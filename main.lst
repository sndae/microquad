
main.o:     file format elf32-msp430

Disassembly of section .text:

00003100 <__init_stack>:
    3100:	31 40 00 31 	mov	#12544,	r1	;#0x3100

00003104 <__low_level_init>:
    3104:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    3108:	20 01 

0000310a <__do_copy_data>:
    310a:	3f 40 b4 00 	mov	#180,	r15	;#0x00b4
    310e:	0f 93       	tst	r15		
    3110:	05 24       	jz	$+12     	;abs 0x311c
    3112:	2f 83       	decd	r15		
    3114:	9f 4f a6 66 	mov	26278(r15),4352(r15);0x66a6(r15), 0x1100(r15)
    3118:	00 11 
    311a:	fb 23       	jnz	$-8      	;abs 0x3112

0000311c <__do_clear_bss>:
    311c:	3f 40 22 03 	mov	#802,	r15	;#0x0322
    3120:	0f 93       	tst	r15		
    3122:	04 24       	jz	$+10     	;abs 0x312c
    3124:	1f 83       	dec	r15		
    3126:	cf 43 b4 11 	mov.b	#0,	4532(r15);r3 As==00, 0x11b4(r15)
    312a:	fc 23       	jnz	$-6      	;abs 0x3124

0000312c <__jump_to_main>:
    312c:	30 40 36 31 	br	#0x3136	

00003130 <__ctors_end>:
    3130:	30 40 34 31 	br	#0x3134	

00003134 <_unexpected_>:
    3134:	00 13       	reti			

00003136 <main>:
// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    3136:	31 40 00 31 	mov	#12544,	r1	;#0x3100
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    313a:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    313e:	20 01 

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    3140:	b0 12 f0 40 	call	#0x40f0	

    lcd_clear(BLACK);
    3144:	4f 43       	clr.b	r15		
    3146:	b0 12 46 46 	call	#0x4646	
    
    MenuOption = RADIO_RAW;
    314a:	82 43 10 11 	mov	#0,	&0x1110	;r3 As==00
    MenuStep = DISPLAY;
    314e:	82 43 0c 11 	mov	#0,	&0x110c	;r3 As==00
    MenuVisible = TRUE;     // inicializa mostrando o menu
    3152:	d2 43 09 11 	mov.b	#1,	&0x1109	;r3 As==01
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(MotorArmed == TRUE){
    3156:	d2 93 0b 11 	cmp.b	#1,	&0x110b	;r3 As==01
    315a:	21 24       	jz	$+68     	;abs 0x319e
                main_loop();
                ControlCounter = 0;
            }
        }
        
        if(SetupDone == TRUE){
    315c:	d2 93 0a 11 	cmp.b	#1,	&0x110a	;r3 As==01
    3160:	15 24       	jz	$+44     	;abs 0x318c
                process_rc();
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
    3162:	d2 93 09 11 	cmp.b	#1,	&0x1109	;r3 As==01
    3166:	09 24       	jz	$+20     	;abs 0x317a
                process_menu();
                MenuCounter = 0;   
            }
        }
        else{
            if(ChannelInput[CH6_CH] > 3500){
    3168:	b2 90 ad 0d 	cmp	#3501,	&0x1188	;#0x0dad
    316c:	88 11 
    316e:	f3 2b       	jnc	$-24     	;abs 0x3156
                MenuVisible = TRUE;
    3170:	d2 43 09 11 	mov.b	#1,	&0x1109	;r3 As==01
                MotorArmed = FALSE;
    3174:	c2 43 0b 11 	mov.b	#0,	&0x110b	;r3 As==00
    3178:	ee 3f       	jmp	$-34     	;abs 0x3156
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
            if(MenuCounter >= MENU_PERIOD){
    317a:	b2 90 45 00 	cmp	#69,	&0x1104	;#0x0045
    317e:	04 11 
    3180:	ea 2b       	jnc	$-42     	;abs 0x3156
                process_menu();
    3182:	b0 12 7e 32 	call	#0x327e	
                MenuCounter = 0;   
    3186:	82 43 04 11 	mov	#0,	&0x1104	;r3 As==00
    318a:	e5 3f       	jmp	$-52     	;abs 0x3156
                ControlCounter = 0;
            }
        }
        
        if(SetupDone == TRUE){
            if(RCCounter >= RC_PERIOD){
    318c:	b2 90 13 00 	cmp	#19,	&0x1102	;#0x0013
    3190:	02 11 
    3192:	e7 2b       	jnc	$-48     	;abs 0x3162
                process_rc();
    3194:	b0 12 5a 3c 	call	#0x3c5a	
                RCCounter = 0;
    3198:	82 43 02 11 	mov	#0,	&0x1102	;r3 As==00
    319c:	e2 3f       	jmp	$-58     	;abs 0x3162
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(MotorArmed == TRUE){
            if(ControlCounter >= CONTROL_PERIOD){
    319e:	b2 90 05 00 	cmp	#5,	&0x1100	;#0x0005
    31a2:	00 11 
    31a4:	db 2b       	jnc	$-72     	;abs 0x315c
                main_loop();
    31a6:	b0 12 9c 40 	call	#0x409c	
                ControlCounter = 0;
    31aa:	82 43 00 11 	mov	#0,	&0x1100	;r3 As==00
    31ae:	d6 3f       	jmp	$-82     	;abs 0x315c
                MenuVisible = TRUE;
                MotorArmed = FALSE;
            }
        }
    }
}
    31b0:	30 40 a4 66 	br	#0x66a4	
    31b4:	44 49       	mov.b	r9,	r4	
    31b6:	53 50       	.word	0x5053;	????	Illegal as 2-op instr
    31b8:	4c 41       	mov.b	r1,	r12	
    31ba:	59 20       	jnz	$+180    	;abs 0x326e
    31bc:	20 20       	jnz	$+66     	;abs 0x31fe
    31be:	20 20       	jnz	$+66     	;abs 0x3200
    31c0:	20 20       	jnz	$+66     	;abs 0x3202
    31c2:	20 20       	jnz	$+66     	;abs 0x3204
    31c4:	20 20       	jnz	$+66     	;abs 0x3206
    31c6:	20 20       	jnz	$+66     	;abs 0x3208
    31c8:	00 20       	jnz	$+2      	;abs 0x31ca
    31ca:	20 20       	jnz	$+66     	;abs 0x320c
    31cc:	4d 41       	mov.b	r1,	r13	
    31ce:	49 4e       	mov.b	r14,	r9	
    31d0:	20 4d       	br	@r13		
    31d2:	45 4e       	mov.b	r14,	r5	
    31d4:	55 0a       	rlam	#3,	r5	
    31d6:	00 20       	jnz	$+2      	;abs 0x31d8
    31d8:	20 52       	add	#4,	r0	;r2 As==10
    31da:	61 64       	addc.b	@r4,	r1	
    31dc:	69 6f       	addc.b	@r15,	r9	
    31de:	20 72       	subc	#4,	r0	;r2 As==10
    31e0:	61 77       	subc.b	@r7,	r1	
    31e2:	0a 20       	jnz	$+22     	;abs 0x31f8
    31e4:	20 52       	add	#4,	r0	;r2 As==10
    31e6:	61 64       	addc.b	@r4,	r1	
    31e8:	69 6f       	addc.b	@r15,	r9	
    31ea:	20 63       	addc	#2,	r0	;r3 As==10
    31ec:	6f 72       	subc.b	#4,	r15	;r2 As==10
    31ee:	72 65       	addc.b	@r5+,	r2	
    31f0:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    31f2:	0a 20       	jnz	$+22     	;abs 0x3208
    31f4:	20 41       	br	@r1		
    31f6:	6e 61       	addc.b	@r1,	r14	
    31f8:	6c 6f       	addc.b	@r15,	r12	
    31fa:	67 20       	jnz	$+208    	;abs 0x32ca
    31fc:	4d 6f       	addc.b	r15,	r13	
    31fe:	6e 69       	addc.b	@r9,	r14	
    3200:	74 6f       	addc.b	@r15+,	r4	
    3202:	72 0a 20 20 	mova	r10,	&0x2020	
    3206:	52 65 61 64 	addc.b	25697(r5),r2	;0x6461(r5)
    320a:	79 0a 20 20 	mova	r10,	8224(r9);0x2020(r9)
    320e:	53 65       	.word	0x6553;	????	Illegal as 2-op instr
    3210:	74 20       	jnz	$+234    	;abs 0x32fa
    3212:	69 6e       	addc.b	@r14,	r9	
    3214:	69 74       	subc.b	@r4,	r9	
    3216:	20 73       	subc	#2,	r0	;r3 As==10
    3218:	65 74       	subc.b	@r4,	r5	
    321a:	74 69       	addc.b	@r9+,	r4	
    321c:	6e 67       	addc.b	@r7,	r14	
    321e:	73 00       	.word	0x0073;	????	Illegal as address instr
    3220:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
    3222:	4c 45       	mov.b	r5,	r12	
    3224:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3226:	20 20       	jnz	$+66     	;abs 0x3268
    3228:	20 20       	jnz	$+66     	;abs 0x326a
    322a:	20 20       	jnz	$+66     	;abs 0x326c
    322c:	20 20       	jnz	$+66     	;abs 0x326e
    322e:	20 20       	jnz	$+66     	;abs 0x3270
    3230:	20 20       	jnz	$+66     	;abs 0x3272
    3232:	00 57       	add	r7,	r0	
    3234:	41 49       	mov.b	r9,	r1	
    3236:	54 20       	jnz	$+170    	;abs 0x32e0
    3238:	50 49 54 43 	br	17236(r9)	;0x4354(r9)
    323c:	48 20       	jnz	$+146    	;abs 0x32ce
    323e:	44 4f       	mov.b	r15,	r4	
    3240:	57 4e 20 20 	mov.b	8224(r14),r7	;0x2020(r14)
    3244:	20 20       	jnz	$+66     	;abs 0x3286
    3246:	00 57       	add	r7,	r0	
    3248:	41 49       	mov.b	r9,	r1	
    324a:	54 20       	jnz	$+170    	;abs 0x32f4
    324c:	50 49 54 43 	br	17236(r9)	;0x4354(r9)
    3250:	48 20       	jnz	$+146    	;abs 0x32e2
    3252:	55 50 20 20 	add.b	0x2020,	r5	;PC rel. 0x05276
    3256:	20 20       	jnz	$+66     	;abs 0x3298
    3258:	00 57       	add	r7,	r0	
    325a:	41 49       	mov.b	r9,	r1	
    325c:	54 20       	jnz	$+170    	;abs 0x3306
    325e:	43 48       	.word	0x4843;	????	Illegal as 2-op instr
    3260:	37 20       	jnz	$+112    	;abs 0x32d0
    3262:	42 41       	mov.b	r1,	r2	
    3264:	43 4b       	.word	0x4b43;	????	Illegal as 2-op instr
    3266:	20 20       	jnz	$+66     	;abs 0x32a8
    3268:	20 20       	jnz	$+66     	;abs 0x32aa
    326a:	00 57       	add	r7,	r0	
    326c:	41 49       	mov.b	r9,	r1	
    326e:	54 20       	jnz	$+170    	;abs 0x3318
    3270:	52 4f 4c 4c 	mov.b	19532(r15),r2	;0x4c4c(r15)
    3274:	20 4c       	br	@r12		
    3276:	45 46       	mov.b	r6,	r5	
    3278:	54 20       	jnz	$+170    	;abs 0x3322
    327a:	20 20       	jnz	$+66     	;abs 0x32bc
    327c:	20 00 1f 42 	bra	&0x0421f	

0000327e <process_menu>:

void process_menu(void){
    switch(MenuStep){
    327e:	1f 42 0c 11 	mov	&0x110c,r15	
    3282:	3f 92       	cmp	#8,	r15	;r2 As==11
    3284:	4a 2c       	jc	$+150    	;abs 0x331a
    3286:	0f 5f       	rla	r15		
    3288:	10 4f 8c 32 	br	12940(r15)	;0x328c(r15)
    328c:	9c 32       	jn	$-710    	;abs 0x2fc6
    328e:	d4 32       	jn	$-598    	;abs 0x3038
    3290:	2c 33       	jn	$-422    	;abs 0x30ea
    3292:	72 33       	jn	$-282    	;abs 0x3178
    3294:	b0 33       	jn	$-158    	;abs 0x31f6
    3296:	1a 33       	jn	$-458    	;abs 0x30cc
    3298:	d2 33       	jn	$-90     	;abs 0x323e
    329a:	04 34       	jge	$+10     	;abs 0x32a4
        case DISPLAY:
            lcd_goto(0,14);
    329c:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    32a0:	4f 43       	clr.b	r15		
    32a2:	b0 12 74 4a 	call	#0x4a74	
            printf("DISPLAY             ");
    32a6:	30 12 b4 31 	push	#12724		;#0x31b4
    32aa:	b0 12 aa 5f 	call	#0x5faa	
            
            lcd_clear(BLACK);
    32ae:	4f 43       	clr.b	r15		
    32b0:	b0 12 46 46 	call	#0x4646	
            lcd_goto(0,0);
    32b4:	4e 43       	clr.b	r14		
    32b6:	4f 43       	clr.b	r15		
    32b8:	b0 12 74 4a 	call	#0x4a74	
            printf("   MAIN MENU\n\n");
    32bc:	3f 40 c9 31 	mov	#12745,	r15	;#0x31c9
    32c0:	b0 12 d6 65 	call	#0x65d6	
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
    32c4:	30 12 d7 31 	push	#12759		;#0x31d7
    32c8:	b0 12 aa 5f 	call	#0x5faa	
            MenuStep = SELECT;
    32cc:	92 43 0c 11 	mov	#1,	&0x110c	;r3 As==01
            break;
    32d0:	21 52       	add	#4,	r1	;r2 As==10
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    32d2:	30 41       	ret			
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
            MenuStep = SELECT;
            break;
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
    32d4:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    32d8:	4f 43       	clr.b	r15		
    32da:	b0 12 74 4a 	call	#0x4a74	
            printf("SELECT            ");
    32de:	30 12 20 32 	push	#12832		;#0x3220
    32e2:	b0 12 aa 5f 	call	#0x5faa	
            
            lcd_goto(0,(int)MenuOption + 2);
    32e6:	5f 42 10 11 	mov.b	&0x1110,r15	
    32ea:	6f 53       	incd.b	r15		
    32ec:	4e 4f       	mov.b	r15,	r14	
    32ee:	4f 43       	clr.b	r15		
    32f0:	b0 12 74 4a 	call	#0x4a74	
            printf(">");
    32f4:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    32f8:	b0 12 80 44 	call	#0x4480	
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    32fc:	21 53       	incd	r1		
    32fe:	b2 90 c4 09 	cmp	#2500,	&0x1180	;#0x09c4
    3302:	80 11 
    3304:	0b 2c       	jc	$+24     	;abs 0x331c
                MenuStep = WAIT_PITCH_DOWN;
    3306:	a2 43 0c 11 	mov	#2,	&0x110c	;r3 As==10
                    MenuStep = WAIT_PITCH_UP;
                }
            }
            
            // select
            if(ChannelInput[ROLL_CH] > 3500){
    330a:	b2 90 ad 0d 	cmp	#3501,	&0x117c	;#0x0dad
    330e:	7c 11 
    3310:	04 28       	jnc	$+10     	;abs 0x331a
                MenuStep = WAIT_ROLL_LEFT;
    3312:	b2 40 06 00 	mov	#6,	&0x110c	;#0x0006
    3316:	0c 11 
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3318:	30 41       	ret			
    331a:	30 41       	ret			
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    331c:	b2 90 ad 0d 	cmp	#3501,	&0x1180	;#0x0dad
    3320:	80 11 
    3322:	f3 2b       	jnc	$-24     	;abs 0x330a
                    MenuStep = WAIT_PITCH_UP;
    3324:	b2 40 03 00 	mov	#3,	&0x110c	;#0x0003
    3328:	0c 11 
    332a:	ef 3f       	jmp	$-32     	;abs 0x330a
            }
            
            break;
        
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    332c:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    3330:	4f 43       	clr.b	r15		
    3332:	b0 12 74 4a 	call	#0x4a74	
            printf("WAIT PITCH DOWN    ");
    3336:	30 12 33 32 	push	#12851		;#0x3233
    333a:	b0 12 aa 5f 	call	#0x5faa	
            
            if(ChannelInput[PITCH_CH] > 2500){
    333e:	21 53       	incd	r1		
    3340:	b2 90 c5 09 	cmp	#2501,	&0x1180	;#0x09c5
    3344:	80 11 
    3346:	e9 2b       	jnc	$-44     	;abs 0x331a
                lcd_goto(0,(int)MenuOption + 2);
    3348:	5f 42 10 11 	mov.b	&0x1110,r15	
    334c:	6f 53       	incd.b	r15		
    334e:	4e 4f       	mov.b	r15,	r14	
    3350:	4f 43       	clr.b	r15		
    3352:	b0 12 74 4a 	call	#0x4a74	
                printf(" ");
    3356:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    335a:	b0 12 80 44 	call	#0x4480	
                if((int)MenuOption > 0){
    335e:	1f 42 10 11 	mov	&0x1110,r15	
    3362:	1f 93       	cmp	#1,	r15	;r3 As==01
    3364:	03 38       	jl	$+8      	;abs 0x336c
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
    3366:	3f 53       	add	#-1,	r15	;r3 As==11
    3368:	82 4f 10 11 	mov	r15,	&0x1110	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    336c:	92 43 0c 11 	mov	#1,	&0x110c	;r3 As==01
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3370:	30 41       	ret			
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    3372:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    3376:	4f 43       	clr.b	r15		
    3378:	b0 12 74 4a 	call	#0x4a74	
            printf("WAIT PITCH UP    ");
    337c:	30 12 47 32 	push	#12871		;#0x3247
    3380:	b0 12 aa 5f 	call	#0x5faa	

            if(ChannelInput[PITCH_CH] < 3500){
    3384:	21 53       	incd	r1		
    3386:	b2 90 ac 0d 	cmp	#3500,	&0x1180	;#0x0dac
    338a:	80 11 
    338c:	c6 2f       	jc	$-114    	;abs 0x331a
                lcd_goto(0,(int)MenuOption + 2);
    338e:	5f 42 10 11 	mov.b	&0x1110,r15	
    3392:	6f 53       	incd.b	r15		
    3394:	4e 4f       	mov.b	r15,	r14	
    3396:	4f 43       	clr.b	r15		
    3398:	b0 12 74 4a 	call	#0x4a74	
                printf(" ");
    339c:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    33a0:	b0 12 80 44 	call	#0x4480	
                if((int)MenuOption < MENU_LENGHT){
    33a4:	1f 42 10 11 	mov	&0x1110,r15	
    33a8:	2f 92       	cmp	#4,	r15	;r2 As==10
    33aa:	e0 37       	jge	$-62     	;abs 0x336c
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    33ac:	1f 53       	inc	r15		
    33ae:	dc 3f       	jmp	$-70     	;abs 0x3368
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    33b0:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    33b4:	4f 43       	clr.b	r15		
    33b6:	b0 12 74 4a 	call	#0x4a74	
            printf("WAIT CH7 BACK    ");
    33ba:	30 12 59 32 	push	#12889		;#0x3259
    33be:	b0 12 aa 5f 	call	#0x5faa	
            
            if(ChannelInput[CH7_CH] < 2500){
    33c2:	21 53       	incd	r1		
    33c4:	b2 90 c4 09 	cmp	#2500,	&0x118a	;#0x09c4
    33c8:	8a 11 
    33ca:	a7 2f       	jc	$-176    	;abs 0x331a
                MenuStep = DISPLAY;
    33cc:	82 43 0c 11 	mov	#0,	&0x110c	;r3 As==00
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    33d0:	30 41       	ret			
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    33d2:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    33d6:	4f 43       	clr.b	r15		
    33d8:	b0 12 74 4a 	call	#0x4a74	
            printf("WAIT ROLL LEFT    ");
    33dc:	30 12 6b 32 	push	#12907		;#0x326b
    33e0:	b0 12 aa 5f 	call	#0x5faa	
            
            if(ChannelInput[ROLL_CH] < 3500){
    33e4:	21 53       	incd	r1		
    33e6:	b2 90 ac 0d 	cmp	#3500,	&0x117c	;#0x0dac
    33ea:	7c 11 
    33ec:	96 2f       	jc	$-210    	;abs 0x331a
                lcd_clear(BLACK);
    33ee:	4f 43       	clr.b	r15		
    33f0:	b0 12 46 46 	call	#0x4646	
                lcd_goto(0,0);  
    33f4:	4e 43       	clr.b	r14		
    33f6:	4f 43       	clr.b	r15		
    33f8:	b0 12 74 4a 	call	#0x4a74	
                MenuStep = PROCESS_OPTION;
    33fc:	b2 40 07 00 	mov	#7,	&0x110c	;#0x0007
    3400:	0c 11 
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3402:	30 41       	ret			
                MenuStep = DISPLAY;
            }
            break;
                    
        case PROCESS_OPTION:
            process_option();
    3404:	b0 12 0e 34 	call	#0x340e	
    3408:	88 3f       	jmp	$-238    	;abs 0x331a
    340a:	25 64       	addc	@r4,	r5	
	...

0000340e <process_option>:
        case WAIT_ROLL_RIGHT:
            break;    
    }
}

void process_option(){
    340e:	0b 12       	push	r11		
    int i;
    switch (MenuOption){
    3410:	1f 42 10 11 	mov	&0x1110,r15	
    3414:	2f 93       	cmp	#2,	r15	;r3 As==10
    3416:	3d 24       	jz	$+124    	;abs 0x3492
    3418:	3f 90 03 00 	cmp	#3,	r15	;#0x0003
    341c:	16 2c       	jc	$+46     	;abs 0x344a
    341e:	0f 93       	tst	r15		
    3420:	12 24       	jz	$+38     	;abs 0x3446
    3422:	1f 93       	cmp	#1,	r15	;r3 As==01
    3424:	0c 24       	jz	$+26     	;abs 0x343e
        case INITIAL_SETTINGS:
            // seta o flag initial setup
            break;          
    }
    
    if(ChannelInput[CH7_CH] > 3500){
    3426:	b2 90 ad 0d 	cmp	#3501,	&0x118a	;#0x0dad
    342a:	8a 11 
    342c:	35 28       	jnc	$+108    	;abs 0x3498
        MenuStep = WAIT_CH7_BACK;
    342e:	a2 42 0c 11 	mov	#4,	&0x110c	;r2 As==10
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    3432:	82 43 0e 11 	mov	#0,	&0x110e	;r3 As==00
        lcd_clear(BLACK);
    3436:	4f 43       	clr.b	r15		
    3438:	b0 12 46 46 	call	#0x4646	
    343c:	2d 3c       	jmp	$+92     	;abs 0x3498
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
    343e:	4f 43       	clr.b	r15		
    3440:	b0 12 94 3f 	call	#0x3f94	
            break;
    3444:	f0 3f       	jmp	$-30     	;abs 0x3426

void process_option(){
    int i;
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
    3446:	5f 43       	mov.b	#1,	r15	;r3 As==01
            break;
    3448:	fb 3f       	jmp	$-8      	;abs 0x3440
    344a:	3f 90 03 00 	cmp	#3,	r15	;#0x0003
    344e:	eb 23       	jnz	$-40     	;abs 0x3426
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
    3450:	4f 43       	clr.b	r15		
    3452:	b0 12 46 46 	call	#0x4646	
            for(i = 5; i >= 0; i--){ // contagem regressiva
    3456:	3b 40 05 00 	mov	#5,	r11	;#0x0005
                lcd_goto(8,8);
    345a:	7e 42       	mov.b	#8,	r14	;r2 As==11
    345c:	7f 42       	mov.b	#8,	r15	;r2 As==11
    345e:	b0 12 74 4a 	call	#0x4a74	
                printf("%d", i);
    3462:	0b 12       	push	r11		
    3464:	30 12 0a 34 	push	#13322		;#0x340a
    3468:	b0 12 aa 5f 	call	#0x5faa	
                delayms(1000);
    346c:	3f 40 e8 03 	mov	#1000,	r15	;#0x03e8
    3470:	b0 12 18 4c 	call	#0x4c18	
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    3474:	21 52       	add	#4,	r1	;r2 As==10
    3476:	3b 53       	add	#-1,	r11	;r3 As==11
    3478:	3b b0 00 80 	bit	#-32768,r11	;#0x8000
    347c:	ee 37       	jge	$-34     	;abs 0x345a
                lcd_goto(8,8);
                printf("%d", i);
                delayms(1000);
            }
            MotorArmed = TRUE;
    347e:	d2 43 0b 11 	mov.b	#1,	&0x110b	;r3 As==01
            MenuVisible = FALSE;
    3482:	c2 43 09 11 	mov.b	#0,	&0x1109	;r3 As==00
            lcd_clear(BLACK);
    3486:	4f 43       	clr.b	r15		
    3488:	b0 12 46 46 	call	#0x4646	
            MenuStep = DISPLAY;
    348c:	82 43 0c 11 	mov	#0,	&0x110c	;r3 As==00
    3490:	ca 3f       	jmp	$-106    	;abs 0x3426
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
    3492:	b0 12 da 34 	call	#0x34da	
            break;
    3496:	c7 3f       	jmp	$-112    	;abs 0x3426
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    }
}
    3498:	3b 41       	pop	r11		
    349a:	30 41       	ret			
    349c:	46 41       	mov.b	r1,	r6	
    349e:	5a 45 52 00 	mov.b	82(r5),	r10	;0x0052(r5)

000034a2 <draw_analog_graph>:

void draw_analog_graph(void){
    lcd_goto(4,4);
    34a2:	6e 42       	mov.b	#4,	r14	;r2 As==10
    34a4:	6f 42       	mov.b	#4,	r15	;r2 As==10
    34a6:	b0 12 74 4a 	call	#0x4a74	
    printf("FAZER");
    34aa:	30 12 9c 34 	push	#13468		;#0x349c
    34ae:	b0 12 aa 5f 	call	#0x5faa	
    34b2:	21 53       	incd	r1		
}
    34b4:	30 41       	ret			
    34b6:	57 41 49 54 	mov.b	21577(r1),r7	;0x5449(r1)
    34ba:	20 52       	add	#4,	r0	;r2 As==10
    34bc:	4f 4c       	mov.b	r12,	r15	
    34be:	4c 20       	jnz	$+154    	;abs 0x3558
    34c0:	52 49 47 48 	mov.b	18503(r9),r2	;0x4847(r9)
    34c4:	54 20       	jnz	$+170    	;abs 0x356e
    34c6:	00 57       	add	r7,	r0	
    34c8:	41 49       	mov.b	r9,	r1	
    34ca:	54 20       	jnz	$+170    	;abs 0x3574
    34cc:	52 4f 4c 4c 	mov.b	19532(r15),r2	;0x4c4c(r15)
    34d0:	20 4c       	br	@r12		
    34d2:	45 46       	mov.b	r6,	r5	
    34d4:	54 20       	jnz	$+170    	;abs 0x357e
    34d6:	20 20       	jnz	$+66     	;abs 0x3518
	...

000034da <process_analog_menu>:

void process_analog_menu(void){
    switch(MenuAnalog){
    34da:	1f 42 0e 11 	mov	&0x110e,r15	
    34de:	3f 92       	cmp	#8,	r15	;r2 As==11
    34e0:	3a 2c       	jc	$+118    	;abs 0x3556
    34e2:	0f 5f       	rla	r15		
    34e4:	10 4f e8 34 	br	13544(r15)	;0x34e8(r15)
    34e8:	f8 34       	jge	$+498    	;abs 0x36da
    34ea:	16 35       	jge	$+558    	;abs 0x3718
    34ec:	68 35       	jge	$+722    	;abs 0x37be
    34ee:	a0 35       	jge	$+834    	;abs 0x3830
    34f0:	56 35       	jge	$+686    	;abs 0x379e
    34f2:	be 35       	jge	$+894    	;abs 0x3870
    34f4:	ea 35       	jge	$+982    	;abs 0x38ca
    34f6:	56 35       	jge	$+686    	;abs 0x37a4
        case DISPLAY:
            lcd_goto(0,14);
    34f8:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    34fc:	4f 43       	clr.b	r15		
    34fe:	b0 12 74 4a 	call	#0x4a74	
            printf("DISPLAY             ");
    3502:	30 12 b4 31 	push	#12724		;#0x31b4
    3506:	b0 12 aa 5f 	call	#0x5faa	

            refresh_analog_menu();
    350a:	b0 12 32 36 	call	#0x3632	
            MenuAnalog = SELECT;
    350e:	92 43 0e 11 	mov	#1,	&0x110e	;r3 As==01
            break;
    3512:	21 53       	incd	r1		
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3514:	30 41       	ret			

            refresh_analog_menu();
            MenuAnalog = SELECT;
            break;
        case SELECT:
            lcd_goto(0,14);
    3516:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    351a:	4f 43       	clr.b	r15		
    351c:	b0 12 74 4a 	call	#0x4a74	
            printf("SELECT            ");
    3520:	30 12 20 32 	push	#12832		;#0x3220
    3524:	b0 12 aa 5f 	call	#0x5faa	

            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    3528:	21 53       	incd	r1		
    352a:	b2 90 ad 0d 	cmp	#3501,	&0x117c	;#0x0dad
    352e:	7c 11 
    3530:	13 28       	jnc	$+40     	;abs 0x3558
                MenuAnalog = WAIT_ROLL_LEFT;
    3532:	b2 40 06 00 	mov	#6,	&0x110e	;#0x0006
    3536:	0e 11 
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
            
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    3538:	b2 90 c4 09 	cmp	#2500,	&0x1180	;#0x09c4
    353c:	80 11 
    353e:	03 2c       	jc	$+8      	;abs 0x3546
                MenuAnalog = WAIT_PITCH_DOWN;
    3540:	a2 43 0e 11 	mov	#2,	&0x110e	;r3 As==10
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3544:	30 41       	ret			
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    3546:	b2 90 ad 0d 	cmp	#3501,	&0x1180	;#0x0dad
    354a:	80 11 
    354c:	04 28       	jnc	$+10     	;abs 0x3556
                    MenuAnalog = WAIT_PITCH_UP;
    354e:	b2 40 03 00 	mov	#3,	&0x110e	;#0x0003
    3552:	0e 11 
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3554:	30 41       	ret			
    3556:	30 41       	ret			
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
            }
            else{
                if(ChannelInput[ROLL_CH] < 2500){
    3558:	b2 90 c4 09 	cmp	#2500,	&0x117c	;#0x09c4
    355c:	7c 11 
    355e:	ec 2f       	jc	$-38     	;abs 0x3538
                    MenuAnalog = WAIT_ROLL_RIGHT;
    3560:	b2 40 05 00 	mov	#5,	&0x110e	;#0x0005
    3564:	0e 11 
    3566:	e8 3f       	jmp	$-46     	;abs 0x3538
                }
            }
            
            break;
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    3568:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    356c:	4f 43       	clr.b	r15		
    356e:	b0 12 74 4a 	call	#0x4a74	
            printf("WAIT PITCH DOWN    ");
    3572:	30 12 33 32 	push	#12851		;#0x3233
    3576:	b0 12 aa 5f 	call	#0x5faa	

            if(ChannelInput[PITCH_CH] > 2500){
    357a:	21 53       	incd	r1		
    357c:	b2 90 c5 09 	cmp	#2501,	&0x1180	;#0x09c5
    3580:	80 11 
    3582:	e9 2b       	jnc	$-44     	;abs 0x3556
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    3584:	1f 43       	mov	#1,	r15	;r3 As==01
    3586:	5e 42 12 11 	mov.b	&0x1112,r14	
    358a:	8e 11       	sxt	r14		
    358c:	0e 93       	tst	r14		
    358e:	03 24       	jz	$+8      	;abs 0x3596
    3590:	0f 5f       	rla	r15		
    3592:	1e 83       	dec	r14		
    3594:	fd 23       	jnz	$-4      	;abs 0x3590
    3596:	c2 ef 13 11 	xor.b	r15,	&0x1113	

                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
                        AnalogSelect--;
                    }
                    MenuAnalog = DISPLAY;
    359a:	82 43 0e 11 	mov	#0,	&0x110e	;r3 As==00
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    359e:	30 41       	ret			
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    35a0:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    35a4:	4f 43       	clr.b	r15		
    35a6:	b0 12 74 4a 	call	#0x4a74	
            printf("WAIT PITCH UP    ");
    35aa:	30 12 47 32 	push	#12871		;#0x3247
    35ae:	b0 12 aa 5f 	call	#0x5faa	

            if(ChannelInput[PITCH_CH] < 3500){
    35b2:	21 53       	incd	r1		
    35b4:	b2 90 ac 0d 	cmp	#3500,	&0x1180	;#0x0dac
    35b8:	80 11 
    35ba:	e4 2b       	jnc	$-54     	;abs 0x3584
    35bc:	cc 3f       	jmp	$-102    	;abs 0x3556
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
    35be:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    35c2:	4f 43       	clr.b	r15		
    35c4:	b0 12 74 4a 	call	#0x4a74	
                printf("WAIT ROLL RIGHT ");
    35c8:	30 12 b6 34 	push	#13494		;#0x34b6
    35cc:	b0 12 aa 5f 	call	#0x5faa	

                if(ChannelInput[PITCH_CH] < 3500){
    35d0:	21 53       	incd	r1		
    35d2:	b2 90 ac 0d 	cmp	#3500,	&0x1180	;#0x0dac
    35d6:	80 11 
    35d8:	be 2f       	jc	$-130    	;abs 0x3556
                    if(AnalogSelect > 0){
    35da:	5f 42 12 11 	mov.b	&0x1112,r15	
    35de:	5f 93       	cmp.b	#1,	r15	;r3 As==01
    35e0:	dc 3b       	jl	$-70     	;abs 0x359a
                        AnalogSelect--;
    35e2:	7f 53       	add.b	#-1,	r15	;r3 As==11
    35e4:	c2 4f 12 11 	mov.b	r15,	&0x1112	
    35e8:	d8 3f       	jmp	$-78     	;abs 0x359a
                    MenuAnalog = DISPLAY;
                }
            break;
            
        case WAIT_ROLL_LEFT:
                lcd_goto(0,14);
    35ea:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    35ee:	4f 43       	clr.b	r15		
    35f0:	b0 12 74 4a 	call	#0x4a74	
                printf("WAIT ROLL LEFT   ");
    35f4:	30 12 c7 34 	push	#13511		;#0x34c7
    35f8:	b0 12 aa 5f 	call	#0x5faa	
        
                if(ChannelInput[PITCH_CH] > 2500){
    35fc:	21 53       	incd	r1		
    35fe:	b2 90 c5 09 	cmp	#2501,	&0x1180	;#0x09c5
    3602:	80 11 
    3604:	a8 2b       	jnc	$-174    	;abs 0x3556
                   if(AnalogSelect < 7){
    3606:	5f 42 12 11 	mov.b	&0x1112,r15	
    360a:	7f 90 07 00 	cmp.b	#7,	r15	;#0x0007
    360e:	03 34       	jge	$+8      	;abs 0x3616
                        AnalogSelect++;
    3610:	5f 53       	inc.b	r15		
    3612:	c2 4f 12 11 	mov.b	r15,	&0x1112	
                    }
                    MenuAnalog = DISPLAY;
    3616:	82 43 0e 11 	mov	#0,	&0x110e	;r3 As==00
    361a:	9d 3f       	jmp	$-196    	;abs 0x3556
    361c:	20 20       	jnz	$+66     	;abs 0x365e
    361e:	20 20       	jnz	$+66     	;abs 0x3660
    3620:	20 20       	jnz	$+66     	;abs 0x3662
    3622:	20 20       	jnz	$+66     	;abs 0x3664
    3624:	20 20       	jnz	$+66     	;abs 0x3666
    3626:	20 20       	jnz	$+66     	;abs 0x3668
    3628:	20 20       	jnz	$+66     	;abs 0x366a
    362a:	20 20       	jnz	$+66     	;abs 0x366c
    362c:	20 20       	jnz	$+66     	;abs 0x366e
    362e:	20 20       	jnz	$+66     	;abs 0x3670
	...

00003632 <refresh_analog_menu>:
        case WAIT_CH7_BACK:
            break;
    }
}

void refresh_analog_menu(void){
    3632:	0b 12       	push	r11		
    int i;
    lcd_goto(1,12);
    3634:	7e 40 0c 00 	mov.b	#12,	r14	;#0x000c
    3638:	5f 43       	mov.b	#1,	r15	;r3 As==01
    363a:	b0 12 74 4a 	call	#0x4a74	
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    363e:	0b 43       	clr	r11		
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
    3640:	5f 42 13 11 	mov.b	&0x1113,r15	
    3644:	8f 11       	sxt	r15		
    3646:	0e 4b       	mov	r11,	r14	
    3648:	0e 93       	tst	r14		
    364a:	03 24       	jz	$+8      	;abs 0x3652
    364c:	0f 11       	rra	r15		
    364e:	1e 83       	dec	r14		
    3650:	fd 23       	jnz	$-4      	;abs 0x364c
    3652:	1f f3       	and	#1,	r15	;r3 As==01
    3654:	28 24       	jz	$+82     	;abs 0x36a6
            color_back = LIME;          // a cor do fundo muda para azul
    3656:	f2 40 1c 00 	mov.b	#28,	&0x118e	;#0x001c
    365a:	8e 11 
            color_fore = BLACK;
    365c:	c2 43 8f 11 	mov.b	#0,	&0x118f	;r3 As==00
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    3660:	5f 42 12 11 	mov.b	&0x1112,r15	
    3664:	8f 11       	sxt	r15		
    3666:	0f 9b       	cmp	r11,	r15	
    3668:	1a 24       	jz	$+54     	;abs 0x369e
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
    366a:	f2 90 1c 00 	cmp.b	#28,	&0x118e	;#0x001c
    366e:	8e 11 
    3670:	13 24       	jz	$+40     	;abs 0x3698
                color_fore = BLACK;
            }
        }                               
        
        printf("%d",i);
    3672:	0b 12       	push	r11		
    3674:	30 12 0a 34 	push	#13322		;#0x340a
    3678:	b0 12 aa 5f 	call	#0x5faa	
        // ajusta as cores para o normal
        color_fore = LIME;
    367c:	f2 40 1c 00 	mov.b	#28,	&0x118f	;#0x001c
    3680:	8f 11 
        color_back = BLACK;
    3682:	c2 43 8e 11 	mov.b	#0,	&0x118e	;r3 As==00
        printf(" ");
    3686:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    368a:	b0 12 80 44 	call	#0x4480	
}

void refresh_analog_menu(void){
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    368e:	21 52       	add	#4,	r1	;r2 As==10
    3690:	1b 53       	inc	r11		
    3692:	3b 92       	cmp	#8,	r11	;r2 As==11
    3694:	d5 3b       	jl	$-84     	;abs 0x3640
    3696:	0d 3c       	jmp	$+28     	;abs 0x36b2
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
                color_fore = BLACK;
    3698:	c2 43 8f 11 	mov.b	#0,	&0x118f	;r3 As==00
    369c:	ea 3f       	jmp	$-42     	;abs 0x3672
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
    369e:	f2 40 e0 ff 	mov.b	#-32,	&0x118f	;#0xffe0
    36a2:	8f 11 
    36a4:	e6 3f       	jmp	$-50     	;abs 0x3672
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
            color_fore = BLACK;
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
    36a6:	c2 43 8e 11 	mov.b	#0,	&0x118e	;r3 As==00
            color_fore = LIME;
    36aa:	f2 40 1c 00 	mov.b	#28,	&0x118f	;#0x001c
    36ae:	8f 11 
    36b0:	d7 3f       	jmp	$-80     	;abs 0x3660
        // ajusta as cores para o normal
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
    36b2:	30 12 1c 36 	push	#13852		;#0x361c
    36b6:	b0 12 aa 5f 	call	#0x5faa	
    36ba:	21 53       	incd	r1		
}
    36bc:	3b 41       	pop	r11		
    36be:	30 41       	ret			

000036c0 <TIMERA0_ISR_HOOK>:

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    36c0:	92 53 00 11 	inc	&0x1100	
    RCCounter++;
    36c4:	92 53 02 11 	inc	&0x1102	
    MenuCounter++;
    36c8:	92 53 04 11 	inc	&0x1104	
}
    36cc:	00 13       	reti			

000036ce <clock_init>:
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    36ce:	c2 43 58 00 	mov.b	#0,	&0x0058	;r3 As==00
    
    DCOCTL = 0x77;      
    36d2:	f2 40 77 00 	mov.b	#119,	&0x0056	;#0x0077
    36d6:	56 00 
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    BCSCTL1 = 0xcf;     
    36d8:	f2 40 cf ff 	mov.b	#-49,	&0x0057	;#0xffcf
    36dc:	57 00 
     * 
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
     * XCAP_0 -- ~1 pF
     */
    BCSCTL3 = 0xa0;
    36de:	f2 40 a0 ff 	mov.b	#-96,	&0x0053	;#0xffa0
    36e2:	53 00 
}
    36e4:	30 41       	ret			

000036e6 <p1_init>:

void p1_init(){
        /* Port 1 Output Register */
    P1OUT = PPM_P1MASK;
    36e6:	f2 43 21 00 	mov.b	#-1,	&0x0021	;r3 As==11

    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;
    36ea:	f2 43 27 00 	mov.b	#-1,	&0x0027	;r3 As==11

    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida
    36ee:	c2 43 24 00 	mov.b	#0,	&0x0024	;r3 As==00

    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;
    36f2:	c2 43 23 00 	mov.b	#0,	&0x0023	;r3 As==00

    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;
    36f6:	f2 43 25 00 	mov.b	#-1,	&0x0025	;r3 As==11

}
    36fa:	30 41       	ret			

000036fc <timer_a3_init>:
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    36fc:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    3700:	62 01 

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;
    3702:	b2 40 a1 0f 	mov	#4001,	&0x0172	;#0x0fa1
    3706:	72 01 
     * 
     * TASSEL_2 -- SMCLK
     * ID_3 -- Divider - /8
     * MC_1 -- Up Mode
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
    3708:	b2 40 d0 02 	mov	#720,	&0x0160	;#0x02d0
    370c:	60 01 
}
    370e:	30 41       	ret			

00003710 <PORT1_ISR_HOOK>:

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    3710:	0f 12       	push	r15		
    3712:	0e 12       	push	r14		
    3714:	0d 12       	push	r13		
    3716:	0c 12       	push	r12		
    3718:	0b 12       	push	r11		
    371a:	0a 12       	push	r10		
    371c:	09 12       	push	r9		
    371e:	08 12       	push	r8		
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    3720:	1a 42 70 01 	mov	&0x0170,r10	
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    3724:	0b 43       	clr	r11		
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    3726:	1d 43       	mov	#1,	r13	;r3 As==01
    3728:	39 40 5c 11 	mov	#4444,	r9	;#0x115c
    372c:	08 49       	mov	r9,	r8	
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    372e:	5f 42 23 00 	mov.b	&0x0023,r15	
    3732:	4f fd       	and.b	r13,	r15	
    3734:	22 24       	jz	$+70     	;abs 0x377a
            if(!(P1IES & PPM_ch_counter)){ // low to high
    3736:	5f 42 24 00 	mov.b	&0x0024,r15	
    373a:	7f f3       	and.b	#-1,	r15	;r3 As==11
    373c:	0f fd       	and	r13,	r15	
    373e:	0a 20       	jnz	$+22     	;abs 0x3754
                TimeUpEdge[channel_num] = PPM_aux;
    3740:	0f 4b       	mov	r11,	r15	
    3742:	0f 5f       	rla	r15		
    3744:	0f 58       	add	r8,	r15	
    3746:	8f 4a 00 00 	mov	r10,	0(r15)	;0x0000(r15)
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    374a:	c2 dd 24 00 	bis.b	r13,	&0x0024	
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
    374e:	c2 cd 23 00 	bic.b	r13,	&0x0023	
    3752:	13 3c       	jmp	$+40     	;abs 0x377a
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
    3754:	0c 4b       	mov	r11,	r12	
    3756:	0c 5c       	rla	r12		
    3758:	0e 4c       	mov	r12,	r14	
    375a:	0e 59       	add	r9,	r14	
    375c:	2f 4e       	mov	@r14,	r15	
    375e:	0a 9f       	cmp	r15,	r10	
    3760:	09 2c       	jc	$+20     	;abs 0x3774
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    3762:	1f 42 72 01 	mov	&0x0172,r15	
    3766:	2f 8e       	sub	@r14,	r15	
    3768:	0f 5a       	add	r10,	r15	
    376a:	8c 4f 6c 11 	mov	r15,	4460(r12);0x116c(r12)
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
    376e:	c2 cd 24 00 	bic.b	r13,	&0x0024	
    3772:	ed 3f       	jmp	$-36     	;abs 0x374e
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    3774:	0f 4a       	mov	r10,	r15	
    3776:	2f 8e       	sub	@r14,	r15	
    3778:	f8 3f       	jmp	$-14     	;abs 0x376a
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    377a:	1b 53       	inc	r11		

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    377c:	0d 5d       	rla	r13		
    377e:	3d 90 81 00 	cmp	#129,	r13	;#0x0081
    3782:	d5 3b       	jl	$-84     	;abs 0x372e
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}
    3784:	38 41       	pop	r8		
    3786:	39 41       	pop	r9		
    3788:	3a 41       	pop	r10		
    378a:	3b 41       	pop	r11		
    378c:	3c 41       	pop	r12		
    378e:	3d 41       	pop	r13		
    3790:	3e 41       	pop	r14		
    3792:	3f 41       	pop	r15		
    3794:	00 13       	reti			
    3796:	4d 4f       	mov.b	r15,	r13	
    3798:	56 45 20 53 	mov.b	21280(r5),r6	;0x5320(r5)
    379c:	54 49 43 4b 	mov.b	19267(r9),r4	;0x4b43(r9)
    37a0:	53 0a       	rlam	#3,	#0	;r3 As==00
    37a2:	41 4c       	mov.b	r12,	r1	
    37a4:	4c 20       	jnz	$+154    	;abs 0x383e
    37a6:	44 49       	mov.b	r9,	r4	
    37a8:	52 45 43 54 	mov.b	21571(r5),r2	;0x5443(r5)
    37ac:	49 4f       	mov.b	r15,	r9	
    37ae:	4e 53       	add.b	#0,	r14	;r3 As==00
    37b0:	00 25       	jz	$+514    	;abs 0x39b2
    37b2:	64 20       	jnz	$+202    	;abs 0x387c
    37b4:	00 50       	rla	r0		
    37b6:	61 72       	subc.b	#4,	r1	;r2 As==10
    37b8:	61 6d       	addc.b	@r13,	r1	
    37ba:	73 20       	jnz	$+232    	;abs 0x38a2
    37bc:	73 61       	.word	0x6173;	????	Illegal as 2-op instr
    37be:	76 65       	addc.b	@r5+,	r6	
    37c0:	64 2e       	jc	$-822    	;abs 0x348a
	...

000037c4 <calibrate_radio>:

void calibrate_radio(void){
    37c4:	0b 12       	push	r11		
    37c6:	0a 12       	push	r10		
    37c8:	09 12       	push	r9		
    37ca:	08 12       	push	r8		
    37cc:	07 12       	push	r7		
    37ce:	06 12       	push	r6		
    37d0:	05 12       	push	r5		
    37d2:	31 80 44 00 	sub	#68,	r1	;#0x0044
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    37d6:	d2 93 0b 11 	cmp.b	#1,	&0x110b	;r3 As==01
    37da:	02 20       	jnz	$+6      	;abs 0x37e0
    37dc:	30 40 46 3c 	br	#0x3c46	
        return;
    }

    int i = 0, k;    
    37e0:	06 43       	clr	r6		
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    37e2:	3e 40 20 00 	mov	#32,	r14	;#0x0020
    37e6:	0f 41       	mov	r1,	r15	
    37e8:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    37ec:	1f 53       	inc	r15		
    37ee:	1e 83       	dec	r14		
    37f0:	fb 23       	jnz	$-8      	;abs 0x37e8
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    37f2:	3e 40 20 00 	mov	#32,	r14	;#0x0020
    37f6:	0f 41       	mov	r1,	r15	
    37f8:	3f 50 20 00 	add	#32,	r15	;#0x0020
    37fc:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    3800:	1f 53       	inc	r15		
    3802:	1e 83       	dec	r14		
    3804:	fb 23       	jnz	$-8      	;abs 0x37fc
    fourbytes ValorAux;        
    
    lcd_goto(2,5);
    3806:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    380a:	6f 43       	mov.b	#2,	r15	;r3 As==10
    380c:	b0 12 74 4a 	call	#0x4a74	
    color_fore = RED;
    3810:	f2 40 e0 ff 	mov.b	#-32,	&0x118f	;#0xffe0
    3814:	8f 11 
    printf("MOVE STICKS\nALL DIRECTIONS");
    3816:	30 12 96 37 	push	#14230		;#0x3796
    381a:	b0 12 aa 5f 	call	#0x5faa	
    color_fore = LIME;
    381e:	f2 40 1c 00 	mov.b	#28,	&0x118f	;#0x001c
    3822:	8f 11 
    delayms(3000);
    3824:	3f 40 b8 0b 	mov	#3000,	r15	;#0x0bb8
    3828:	b0 12 18 4c 	call	#0x4c18	
    lcd_clear(BLACK);
    382c:	4f 43       	clr.b	r15		
    382e:	b0 12 46 46 	call	#0x4646	

    for(i = 0; i < 8; i++){ // zera offset e slope
    3832:	21 53       	incd	r1		
    3834:	3c 40 3c 11 	mov	#4412,	r12	;#0x113c
    3838:	3d 40 1c 11 	mov	#4380,	r13	;#0x111c
        PPMOffset[i] = 0;
    383c:	0f 46       	mov	r6,	r15	
    383e:	0f 5f       	rla	r15		
    3840:	0f 5f       	rla	r15		
    3842:	0e 4f       	mov	r15,	r14	
    3844:	0e 5c       	add	r12,	r14	
    3846:	8e 43 00 00 	mov	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    384a:	8e 43 02 00 	mov	#0,	2(r14)	;r3 As==00, 0x0002(r14)
        PPMSlope[i] = 1;
    384e:	0f 5d       	add	r13,	r15	
    3850:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    3854:	bf 40 80 3f 	mov	#16256,	2(r15)	;#0x3f80, 0x0002(r15)
    3858:	02 00 
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
    385a:	16 53       	inc	r6		
    385c:	36 92       	cmp	#8,	r6	;r2 As==11
    385e:	ee 3b       	jl	$-34     	;abs 0x383c
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    3860:	06 43       	clr	r6		
        PPMMin[i] = PPMValue[i];
    3862:	0a 46       	mov	r6,	r10	
    3864:	0a 5a       	rla	r10		
    3866:	0a 5a       	rla	r10		
    3868:	0a 51       	add	r1,	r10	
    386a:	0f 46       	mov	r6,	r15	
    386c:	0f 5f       	rla	r15		
    386e:	1b 4f 6c 11 	mov	4460(r15),r11	;0x116c(r15)
    3872:	0e 4b       	mov	r11,	r14	
    3874:	0f 4e       	mov	r14,	r15	
    3876:	0f 5f       	rla	r15		
    3878:	0f 7f       	subc	r15,	r15	
    387a:	3f e3       	inv	r15		
    387c:	b0 12 b6 5a 	call	#0x5ab6	
    3880:	0b 93       	tst	r11		
    3882:	db 39       	jl	$+952    	;abs 0x3c3a
    3884:	8a 4e 00 00 	mov	r14,	0(r10)	;0x0000(r10)
    3888:	8a 4f 02 00 	mov	r15,	2(r10)	;0x0002(r10)
        PPMMax[i] = PPMMin[i];
    388c:	8a 4e 20 00 	mov	r14,	32(r10)	;0x0020(r10)
    3890:	8a 4f 22 00 	mov	r15,	34(r10)	;0x0022(r10)
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    3894:	16 53       	inc	r6		
    3896:	36 92       	cmp	#8,	r6	;r2 As==11
    3898:	e4 3b       	jl	$-54     	;abs 0x3862
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    389a:	35 40 78 00 	mov	#120,	r5	;#0x0078
        draw_rc_inputs(1);
    389e:	5f 43       	mov.b	#1,	r15	;r3 As==01
    38a0:	b0 12 94 3f 	call	#0x3f94	
        lcd_goto(0, 14);
    38a4:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    38a8:	4f 43       	clr.b	r15		
    38aa:	b0 12 74 4a 	call	#0x4a74	
        printf("%d ", k);
    38ae:	05 12       	push	r5		
    38b0:	30 12 b1 37 	push	#14257		;#0x37b1
    38b4:	b0 12 aa 5f 	call	#0x5faa	
        delayms(1);
    38b8:	1f 43       	mov	#1,	r15	;r3 As==01
    38ba:	b0 12 18 4c 	call	#0x4c18	
        for(i = 0; i < 8; i++){ // pega max min
    38be:	06 43       	clr	r6		
    38c0:	21 52       	add	#4,	r1	;r2 As==10
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    38c2:	0a 46       	mov	r6,	r10	
    38c4:	0a 5a       	rla	r10		
    38c6:	0a 5a       	rla	r10		
    38c8:	0a 51       	add	r1,	r10	
    38ca:	09 46       	mov	r6,	r9	
    38cc:	09 59       	rla	r9		
    38ce:	1b 49 6c 11 	mov	4460(r9),r11	;0x116c(r9)
    38d2:	0e 4b       	mov	r11,	r14	
    38d4:	0f 4e       	mov	r14,	r15	
    38d6:	0f 5f       	rla	r15		
    38d8:	0f 7f       	subc	r15,	r15	
    38da:	3f e3       	inv	r15		
    38dc:	b0 12 b6 5a 	call	#0x5ab6	
    38e0:	07 4e       	mov	r14,	r7	
    38e2:	08 4f       	mov	r15,	r8	
    38e4:	0b 93       	tst	r11		
    38e6:	a1 39       	jl	$+836    	;abs 0x3c2a
    38e8:	1e 4a 20 00 	mov	32(r10),r14	;0x0020(r10)
    38ec:	1f 4a 22 00 	mov	34(r10),r15	;0x0022(r10)
    38f0:	0c 47       	mov	r7,	r12	
    38f2:	0d 48       	mov	r8,	r13	
    38f4:	b0 12 54 5a 	call	#0x5a54	
    38f8:	0f 93       	tst	r15		
    38fa:	81 39       	jl	$+772    	;abs 0x3bfe
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
    38fc:	0a 49       	mov	r9,	r10	
    38fe:	0a 5a       	rla	r10		
    3900:	0a 51       	add	r1,	r10	
    3902:	09 46       	mov	r6,	r9	
    3904:	09 59       	rla	r9		
    3906:	1b 49 6c 11 	mov	4460(r9),r11	;0x116c(r9)
    390a:	0e 4b       	mov	r11,	r14	
    390c:	0f 4e       	mov	r14,	r15	
    390e:	0f 5f       	rla	r15		
    3910:	0f 7f       	subc	r15,	r15	
    3912:	3f e3       	inv	r15		
    3914:	b0 12 b6 5a 	call	#0x5ab6	
    3918:	07 4e       	mov	r14,	r7	
    391a:	08 4f       	mov	r15,	r8	
    391c:	0b 93       	tst	r11		
    391e:	67 39       	jl	$+720    	;abs 0x3bee
    3920:	3e 4a       	mov	@r10+,	r14	
    3922:	3f 4a       	mov	@r10+,	r15	
    3924:	2a 82       	sub	#4,	r10	;r2 As==10
    3926:	0c 47       	mov	r7,	r12	
    3928:	0d 48       	mov	r8,	r13	
    392a:	b0 12 90 59 	call	#0x5990	
    392e:	1f 93       	cmp	#1,	r15	;r3 As==01
    3930:	0f 38       	jl	$+32     	;abs 0x3950
                PPMMin[i] = PPMValue[i];
    3932:	1b 49 6c 11 	mov	4460(r9),r11	;0x116c(r9)
    3936:	0e 4b       	mov	r11,	r14	
    3938:	0f 4e       	mov	r14,	r15	
    393a:	0f 5f       	rla	r15		
    393c:	0f 7f       	subc	r15,	r15	
    393e:	3f e3       	inv	r15		
    3940:	b0 12 b6 5a 	call	#0x5ab6	
    3944:	0b 93       	tst	r11		
    3946:	4d 39       	jl	$+668    	;abs 0x3be2
    3948:	8a 4e 00 00 	mov	r14,	0(r10)	;0x0000(r10)
    394c:	8a 4f 02 00 	mov	r15,	2(r10)	;0x0002(r10)
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
    3950:	16 53       	inc	r6		
    3952:	36 92       	cmp	#8,	r6	;r2 As==11
    3954:	b6 3b       	jl	$-146    	;abs 0x38c2
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    3956:	35 53       	add	#-1,	r5	;r3 As==11
    3958:	15 93       	cmp	#1,	r5	;r3 As==01
    395a:	a1 37       	jge	$-188    	;abs 0x389e
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    lcd_clear(BLACK);
    395c:	4f 43       	clr.b	r15		
    395e:	b0 12 46 46 	call	#0x4646	
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
    3962:	06 43       	clr	r6		
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
    3964:	07 46       	mov	r6,	r7	
    3966:	07 57       	rla	r7		
    3968:	07 57       	rla	r7		
    396a:	0f 47       	mov	r7,	r15	
    396c:	0f 51       	add	r1,	r15	
    396e:	1a 4f 20 00 	mov	32(r15),r10	;0x0020(r15)
    3972:	1b 4f 22 00 	mov	34(r15),r11	;0x0022(r15)
    3976:	38 4f       	mov	@r15+,	r8	
    3978:	39 4f       	mov	@r15+,	r9	
    397a:	0c 48       	mov	r8,	r12	
    397c:	0d 49       	mov	r9,	r13	
    397e:	0e 4a       	mov	r10,	r14	
    3980:	0f 4b       	mov	r11,	r15	
    3982:	b0 12 64 55 	call	#0x5564	
    3986:	0c 4e       	mov	r14,	r12	
    3988:	0d 4f       	mov	r15,	r13	
    398a:	0e 43       	clr	r14		
    398c:	3f 40 fa 44 	mov	#17658,	r15	;#0x44fa
    3990:	b0 12 1e 58 	call	#0x581e	
    3994:	87 4e 1c 11 	mov	r14,	4380(r7);0x111c(r7)
    3998:	87 4f 1e 11 	mov	r15,	4382(r7);0x111e(r7)
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    399c:	0c 48       	mov	r8,	r12	
    399e:	0d 49       	mov	r9,	r13	
    39a0:	b0 12 b4 55 	call	#0x55b4	
    39a4:	0c 4e       	mov	r14,	r12	
    39a6:	0d 4f       	mov	r15,	r13	
    39a8:	0e 43       	clr	r14		
    39aa:	3f 40 fa 44 	mov	#17658,	r15	;#0x44fa
    39ae:	b0 12 64 55 	call	#0x5564	
    39b2:	87 4e 3c 11 	mov	r14,	4412(r7);0x113c(r7)
    39b6:	87 4f 3e 11 	mov	r15,	4414(r7);0x113e(r7)
        }
    }
    
    lcd_clear(BLACK);
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
    39ba:	16 53       	inc	r6		
    39bc:	36 92       	cmp	#8,	r6	;r2 As==11
    39be:	d2 3b       	jl	$-90     	;abs 0x3964
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
    39c0:	c2 93 90 11 	tst.b	&0x1190	
    39c4:	40 25       	jz	$+642    	;abs 0x3c46
        i2c_change_address(EEPROM_I2C_ADDR);
    39c6:	7f 40 a6 ff 	mov.b	#-90,	r15	;#0xffa6
    39ca:	b0 12 48 4c 	call	#0x4c48	
        
        // grava yaw slope 
        ValorAux.f = PPMSlope[YAW_CH];
    39ce:	91 42 2c 11 	mov	&0x112c,64(r1)	;0x0040(r1)
    39d2:	40 00 
    39d4:	91 42 2e 11 	mov	&0x112e,66(r1)	;0x0042(r1)
    39d8:	42 00 
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    39da:	6d 42       	mov.b	#4,	r13	;r2 As==10
    39dc:	0e 41       	mov	r1,	r14	
    39de:	3e 50 40 00 	add	#64,	r14	;#0x0040
    39e2:	3f 40 0c 00 	mov	#12,	r15	;#0x000c
    39e6:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    39ea:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    39ee:	b0 12 18 4c 	call	#0x4c18	
        
        // grava throttle slope 
        ValorAux.f = PPMSlope[THROTTLE_CH];
    39f2:	91 42 28 11 	mov	&0x1128,64(r1)	;0x0040(r1)
    39f6:	40 00 
    39f8:	91 42 2a 11 	mov	&0x112a,66(r1)	;0x0042(r1)
    39fc:	42 00 
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    39fe:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3a00:	0e 41       	mov	r1,	r14	
    3a02:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3a06:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    3a0a:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3a0e:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3a12:	b0 12 18 4c 	call	#0x4c18	
        
        // grava pitch slope 
        ValorAux.f = PPMSlope[PITCH_CH];
    3a16:	91 42 24 11 	mov	&0x1124,64(r1)	;0x0040(r1)
    3a1a:	40 00 
    3a1c:	91 42 26 11 	mov	&0x1126,66(r1)	;0x0042(r1)
    3a20:	42 00 
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    3a22:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3a24:	0e 41       	mov	r1,	r14	
    3a26:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3a2a:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    3a2e:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3a32:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3a36:	b0 12 18 4c 	call	#0x4c18	
        
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
    3a3a:	91 42 1c 11 	mov	&0x111c,64(r1)	;0x0040(r1)
    3a3e:	40 00 
    3a40:	91 42 1e 11 	mov	&0x111e,66(r1)	;0x0042(r1)
    3a44:	42 00 
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    3a46:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3a48:	0e 41       	mov	r1,	r14	
    3a4a:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3a4e:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    3a52:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3a56:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3a5a:	b0 12 18 4c 	call	#0x4c18	
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
    3a5e:	91 42 30 11 	mov	&0x1130,64(r1)	;0x0040(r1)
    3a62:	40 00 
    3a64:	91 42 32 11 	mov	&0x1132,66(r1)	;0x0042(r1)
    3a68:	42 00 
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    3a6a:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3a6c:	0e 41       	mov	r1,	r14	
    3a6e:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3a72:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    3a76:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3a7a:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3a7e:	b0 12 18 4c 	call	#0x4c18	
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    3a82:	91 42 34 11 	mov	&0x1134,64(r1)	;0x0040(r1)
    3a86:	40 00 
    3a88:	91 42 36 11 	mov	&0x1136,66(r1)	;0x0042(r1)
    3a8c:	42 00 
        i2c_write16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    3a8e:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3a90:	0e 41       	mov	r1,	r14	
    3a92:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3a96:	3f 40 18 00 	mov	#24,	r15	;#0x0018
    3a9a:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3a9e:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3aa2:	b0 12 18 4c 	call	#0x4c18	
        
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
    3aa6:	91 42 38 11 	mov	&0x1138,64(r1)	;0x0040(r1)
    3aaa:	40 00 
    3aac:	91 42 3a 11 	mov	&0x113a,66(r1)	;0x0042(r1)
    3ab0:	42 00 
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    3ab2:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3ab4:	0e 41       	mov	r1,	r14	
    3ab6:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3aba:	3f 40 2c 00 	mov	#44,	r15	;#0x002c
    3abe:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3ac2:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3ac6:	b0 12 18 4c 	call	#0x4c18	
        
        // grava yaw offset 
        ValorAux.f = PPMOffset[YAW_CH];
    3aca:	91 42 4c 11 	mov	&0x114c,64(r1)	;0x0040(r1)
    3ace:	40 00 
    3ad0:	91 42 4e 11 	mov	&0x114e,66(r1)	;0x0042(r1)
    3ad4:	42 00 
        i2c_write16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3ad6:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3ad8:	0e 41       	mov	r1,	r14	
    3ada:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3ade:	3f 40 38 00 	mov	#56,	r15	;#0x0038
    3ae2:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3ae6:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3aea:	b0 12 18 4c 	call	#0x4c18	
        
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
    3aee:	91 42 48 11 	mov	&0x1148,64(r1)	;0x0040(r1)
    3af2:	40 00 
    3af4:	91 42 4a 11 	mov	&0x114a,66(r1)	;0x0042(r1)
    3af8:	42 00 
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    3afa:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3afc:	0e 41       	mov	r1,	r14	
    3afe:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3b02:	3f 40 3c 00 	mov	#60,	r15	;#0x003c
    3b06:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3b0a:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3b0e:	b0 12 18 4c 	call	#0x4c18	
        
        // grava pitch offset 
        ValorAux.f = PPMOffset[PITCH_CH];
    3b12:	91 42 44 11 	mov	&0x1144,64(r1)	;0x0040(r1)
    3b16:	40 00 
    3b18:	91 42 46 11 	mov	&0x1146,66(r1)	;0x0042(r1)
    3b1c:	42 00 
        i2c_write16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    3b1e:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3b20:	0e 41       	mov	r1,	r14	
    3b22:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3b26:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    3b2a:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3b2e:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3b32:	b0 12 18 4c 	call	#0x4c18	
        
        // grava roll offset 
        ValorAux.f = PPMOffset[ROLL_CH];
    3b36:	91 42 3c 11 	mov	&0x113c,64(r1)	;0x0040(r1)
    3b3a:	40 00 
    3b3c:	91 42 3e 11 	mov	&0x113e,66(r1)	;0x0042(r1)
    3b40:	42 00 
        i2c_write16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    3b42:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3b44:	0e 41       	mov	r1,	r14	
    3b46:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3b4a:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    3b4e:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3b52:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3b56:	b0 12 18 4c 	call	#0x4c18	
        
        // grava ch5 offset 
        ValorAux.f = PPMOffset[CH5_CH];
    3b5a:	91 42 50 11 	mov	&0x1150,64(r1)	;0x0040(r1)
    3b5e:	40 00 
    3b60:	91 42 52 11 	mov	&0x1152,66(r1)	;0x0042(r1)
    3b64:	42 00 
        i2c_write16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    3b66:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3b68:	0e 41       	mov	r1,	r14	
    3b6a:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3b6e:	3f 40 40 00 	mov	#64,	r15	;#0x0040
    3b72:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3b76:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3b7a:	b0 12 18 4c 	call	#0x4c18	
        
        // grava ch6 offset 
        ValorAux.f = PPMOffset[CH6_CH];
    3b7e:	91 42 54 11 	mov	&0x1154,64(r1)	;0x0040(r1)
    3b82:	40 00 
    3b84:	91 42 56 11 	mov	&0x1156,66(r1)	;0x0042(r1)
    3b88:	42 00 
        i2c_write16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    3b8a:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3b8c:	0e 41       	mov	r1,	r14	
    3b8e:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3b92:	3f 40 44 00 	mov	#68,	r15	;#0x0044
    3b96:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3b9a:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3b9e:	b0 12 18 4c 	call	#0x4c18	
        
        // grava ch7 offset 
        ValorAux.f = PPMOffset[CH7_CH];
    3ba2:	91 42 58 11 	mov	&0x1158,64(r1)	;0x0040(r1)
    3ba6:	40 00 
    3ba8:	91 42 5a 11 	mov	&0x115a,66(r1)	;0x0042(r1)
    3bac:	42 00 
        i2c_write16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    3bae:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3bb0:	0e 41       	mov	r1,	r14	
    3bb2:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3bb6:	3f 40 48 00 	mov	#72,	r15	;#0x0048
    3bba:	b0 12 b2 4e 	call	#0x4eb2	
        
        delayms(100);
    3bbe:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3bc2:	b0 12 18 4c 	call	#0x4c18	
        
        lcd_goto(2,2);
    3bc6:	6e 43       	mov.b	#2,	r14	;r3 As==10
    3bc8:	6f 43       	mov.b	#2,	r15	;r3 As==10
    3bca:	b0 12 74 4a 	call	#0x4a74	
        printf("Params saved.");
    3bce:	30 12 b5 37 	push	#14261		;#0x37b5
    3bd2:	b0 12 aa 5f 	call	#0x5faa	
        delayms(2000);
    3bd6:	3f 40 d0 07 	mov	#2000,	r15	;#0x07d0
    3bda:	b0 12 18 4c 	call	#0x4c18	
    3bde:	21 53       	incd	r1		
    3be0:	32 3c       	jmp	$+102    	;abs 0x3c46
    3be2:	0c 43       	clr	r12		
    3be4:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3be8:	b0 12 18 55 	call	#0x5518	
    3bec:	ad 3e       	jmp	$-676    	;abs 0x3948
    3bee:	0c 43       	clr	r12		
    3bf0:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3bf4:	b0 12 18 55 	call	#0x5518	
    3bf8:	07 4e       	mov	r14,	r7	
    3bfa:	08 4f       	mov	r15,	r8	
    3bfc:	91 3e       	jmp	$-732    	;abs 0x3920
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
    3bfe:	1b 49 6c 11 	mov	4460(r9),r11	;0x116c(r9)
    3c02:	0e 4b       	mov	r11,	r14	
    3c04:	0f 4e       	mov	r14,	r15	
    3c06:	0f 5f       	rla	r15		
    3c08:	0f 7f       	subc	r15,	r15	
    3c0a:	3f e3       	inv	r15		
    3c0c:	b0 12 b6 5a 	call	#0x5ab6	
    3c10:	0b 93       	tst	r11		
    3c12:	05 38       	jl	$+12     	;abs 0x3c1e
    3c14:	8a 4e 20 00 	mov	r14,	32(r10)	;0x0020(r10)
    3c18:	8a 4f 22 00 	mov	r15,	34(r10)	;0x0022(r10)
    3c1c:	6f 3e       	jmp	$-800    	;abs 0x38fc
    3c1e:	0c 43       	clr	r12		
    3c20:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3c24:	b0 12 18 55 	call	#0x5518	
    3c28:	f5 3f       	jmp	$-20     	;abs 0x3c14
    3c2a:	0c 43       	clr	r12		
    3c2c:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3c30:	b0 12 18 55 	call	#0x5518	
    3c34:	07 4e       	mov	r14,	r7	
    3c36:	08 4f       	mov	r15,	r8	
    3c38:	57 3e       	jmp	$-848    	;abs 0x38e8
    3c3a:	0c 43       	clr	r12		
    3c3c:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3c40:	b0 12 18 55 	call	#0x5518	
    3c44:	1f 3e       	jmp	$-960    	;abs 0x3884
        
        lcd_goto(2,2);
        printf("Params saved.");
        delayms(2000);
    }
}
    3c46:	31 50 44 00 	add	#68,	r1	;#0x0044
    3c4a:	35 41       	pop	r5		
    3c4c:	36 41       	pop	r6		
    3c4e:	37 41       	pop	r7		
    3c50:	38 41       	pop	r8		
    3c52:	39 41       	pop	r9		
    3c54:	3a 41       	pop	r10		
    3c56:	3b 41       	pop	r11		
    3c58:	30 41       	ret			

00003c5a <process_rc>:

void process_rc(void){
    3c5a:	0b 12       	push	r11		
    ChannelInput[THROTTLE_CH] = PPMValue[THROTTLE_CH] * PPMSlope[THROTTLE_CH] + PPMOffset[THROTTLE_CH];
    3c5c:	1b 42 72 11 	mov	&0x1172,r11	
    3c60:	0e 4b       	mov	r11,	r14	
    3c62:	0f 4e       	mov	r14,	r15	
    3c64:	0f 5f       	rla	r15		
    3c66:	0f 7f       	subc	r15,	r15	
    3c68:	3f e3       	inv	r15		
    3c6a:	b0 12 b6 5a 	call	#0x5ab6	
    3c6e:	0b 93       	tst	r11		
    3c70:	c6 38       	jl	$+398    	;abs 0x3dfe
    3c72:	1c 42 28 11 	mov	&0x1128,r12	
    3c76:	1d 42 2a 11 	mov	&0x112a,r13	
    3c7a:	b0 12 b4 55 	call	#0x55b4	
    3c7e:	1c 42 48 11 	mov	&0x1148,r12	
    3c82:	1d 42 4a 11 	mov	&0x114a,r13	
    3c86:	b0 12 18 55 	call	#0x5518	
    3c8a:	b0 12 b8 52 	call	#0x52b8	
    3c8e:	82 4e 82 11 	mov	r14,	&0x1182	
    ChannelInput[YAW_CH] = PPMValue[YAW_CH] * PPMSlope[YAW_CH] + PPMOffset[YAW_CH];
    3c92:	1b 42 74 11 	mov	&0x1174,r11	
    3c96:	0e 4b       	mov	r11,	r14	
    3c98:	0f 4e       	mov	r14,	r15	
    3c9a:	0f 5f       	rla	r15		
    3c9c:	0f 7f       	subc	r15,	r15	
    3c9e:	3f e3       	inv	r15		
    3ca0:	b0 12 b6 5a 	call	#0x5ab6	
    3ca4:	0b 93       	tst	r11		
    3ca6:	a5 38       	jl	$+332    	;abs 0x3df2
    3ca8:	1c 42 2c 11 	mov	&0x112c,r12	
    3cac:	1d 42 2e 11 	mov	&0x112e,r13	
    3cb0:	b0 12 b4 55 	call	#0x55b4	
    3cb4:	1c 42 4c 11 	mov	&0x114c,r12	
    3cb8:	1d 42 4e 11 	mov	&0x114e,r13	
    3cbc:	b0 12 18 55 	call	#0x5518	
    3cc0:	b0 12 b8 52 	call	#0x52b8	
    3cc4:	82 4e 84 11 	mov	r14,	&0x1184	
    ChannelInput[PITCH_CH] = PPMValue[PITCH_CH] * PPMSlope[PITCH_CH] + PPMOffset[PITCH_CH]; // pitch invertido
    3cc8:	1b 42 70 11 	mov	&0x1170,r11	
    3ccc:	0e 4b       	mov	r11,	r14	
    3cce:	0f 4e       	mov	r14,	r15	
    3cd0:	0f 5f       	rla	r15		
    3cd2:	0f 7f       	subc	r15,	r15	
    3cd4:	3f e3       	inv	r15		
    3cd6:	b0 12 b6 5a 	call	#0x5ab6	
    3cda:	0b 93       	tst	r11		
    3cdc:	84 38       	jl	$+266    	;abs 0x3de6
    3cde:	1c 42 24 11 	mov	&0x1124,r12	
    3ce2:	1d 42 26 11 	mov	&0x1126,r13	
    3ce6:	b0 12 b4 55 	call	#0x55b4	
    3cea:	1c 42 44 11 	mov	&0x1144,r12	
    3cee:	1d 42 46 11 	mov	&0x1146,r13	
    3cf2:	b0 12 18 55 	call	#0x5518	
    3cf6:	b0 12 b8 52 	call	#0x52b8	
    3cfa:	82 4e 80 11 	mov	r14,	&0x1180	
    ChannelInput[ROLL_CH] = PPMValue[ROLL_CH] * PPMSlope[ROLL_CH] + PPMOffset[ROLL_CH];
    3cfe:	1b 42 6c 11 	mov	&0x116c,r11	
    3d02:	0e 4b       	mov	r11,	r14	
    3d04:	0f 4e       	mov	r14,	r15	
    3d06:	0f 5f       	rla	r15		
    3d08:	0f 7f       	subc	r15,	r15	
    3d0a:	3f e3       	inv	r15		
    3d0c:	b0 12 b6 5a 	call	#0x5ab6	
    3d10:	0b 93       	tst	r11		
    3d12:	63 38       	jl	$+200    	;abs 0x3dda
    3d14:	1c 42 1c 11 	mov	&0x111c,r12	
    3d18:	1d 42 1e 11 	mov	&0x111e,r13	
    3d1c:	b0 12 b4 55 	call	#0x55b4	
    3d20:	1c 42 3c 11 	mov	&0x113c,r12	
    3d24:	1d 42 3e 11 	mov	&0x113e,r13	
    3d28:	b0 12 18 55 	call	#0x5518	
    3d2c:	b0 12 b8 52 	call	#0x52b8	
    3d30:	82 4e 7c 11 	mov	r14,	&0x117c	
    ChannelInput[CH5_CH] = PPMValue[CH5_CH] * PPMSlope[CH5_CH] + PPMOffset[CH5_CH];
    3d34:	1b 42 76 11 	mov	&0x1176,r11	
    3d38:	0e 4b       	mov	r11,	r14	
    3d3a:	0f 4e       	mov	r14,	r15	
    3d3c:	0f 5f       	rla	r15		
    3d3e:	0f 7f       	subc	r15,	r15	
    3d40:	3f e3       	inv	r15		
    3d42:	b0 12 b6 5a 	call	#0x5ab6	
    3d46:	0b 93       	tst	r11		
    3d48:	42 38       	jl	$+134    	;abs 0x3dce
    3d4a:	1c 42 30 11 	mov	&0x1130,r12	
    3d4e:	1d 42 32 11 	mov	&0x1132,r13	
    3d52:	b0 12 b4 55 	call	#0x55b4	
    3d56:	1c 42 50 11 	mov	&0x1150,r12	
    3d5a:	1d 42 52 11 	mov	&0x1152,r13	
    3d5e:	b0 12 18 55 	call	#0x5518	
    3d62:	b0 12 b8 52 	call	#0x52b8	
    3d66:	82 4e 86 11 	mov	r14,	&0x1186	
    ChannelInput[CH6_CH] = PPMValue[CH6_CH] * PPMSlope[CH6_CH] + PPMOffset[CH6_CH];
    3d6a:	1b 42 78 11 	mov	&0x1178,r11	
    3d6e:	0e 4b       	mov	r11,	r14	
    3d70:	0f 4e       	mov	r14,	r15	
    3d72:	0f 5f       	rla	r15		
    3d74:	0f 7f       	subc	r15,	r15	
    3d76:	3f e3       	inv	r15		
    3d78:	b0 12 b6 5a 	call	#0x5ab6	
    3d7c:	0b 93       	tst	r11		
    3d7e:	21 38       	jl	$+68     	;abs 0x3dc2
    3d80:	1c 42 34 11 	mov	&0x1134,r12	
    3d84:	1d 42 36 11 	mov	&0x1136,r13	
    3d88:	b0 12 b4 55 	call	#0x55b4	
    3d8c:	1c 42 54 11 	mov	&0x1154,r12	
    3d90:	1d 42 56 11 	mov	&0x1156,r13	
    3d94:	b0 12 18 55 	call	#0x5518	
    3d98:	b0 12 b8 52 	call	#0x52b8	
    3d9c:	82 4e 88 11 	mov	r14,	&0x1188	
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
    3da0:	1b 42 7a 11 	mov	&0x117a,r11	
    3da4:	0e 4b       	mov	r11,	r14	
    3da6:	0f 4e       	mov	r14,	r15	
    3da8:	0f 5f       	rla	r15		
    3daa:	0f 7f       	subc	r15,	r15	
    3dac:	3f e3       	inv	r15		
    3dae:	b0 12 b6 5a 	call	#0x5ab6	
    3db2:	0b 93       	tst	r11		
    3db4:	2a 34       	jge	$+86     	;abs 0x3e0a
    3db6:	0c 43       	clr	r12		
    3db8:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3dbc:	b0 12 18 55 	call	#0x5518	
    3dc0:	24 3c       	jmp	$+74     	;abs 0x3e0a
    3dc2:	0c 43       	clr	r12		
    3dc4:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3dc8:	b0 12 18 55 	call	#0x5518	
    3dcc:	d9 3f       	jmp	$-76     	;abs 0x3d80
    3dce:	0c 43       	clr	r12		
    3dd0:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3dd4:	b0 12 18 55 	call	#0x5518	
    3dd8:	b8 3f       	jmp	$-142    	;abs 0x3d4a
    3dda:	0c 43       	clr	r12		
    3ddc:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3de0:	b0 12 18 55 	call	#0x5518	
    3de4:	97 3f       	jmp	$-208    	;abs 0x3d14
    3de6:	0c 43       	clr	r12		
    3de8:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3dec:	b0 12 18 55 	call	#0x5518	
    3df0:	76 3f       	jmp	$-274    	;abs 0x3cde
    3df2:	0c 43       	clr	r12		
    3df4:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3df8:	b0 12 18 55 	call	#0x5518	
    3dfc:	55 3f       	jmp	$-340    	;abs 0x3ca8
    3dfe:	0c 43       	clr	r12		
    3e00:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3e04:	b0 12 18 55 	call	#0x5518	
    3e08:	34 3f       	jmp	$-406    	;abs 0x3c72
    3e0a:	1c 42 38 11 	mov	&0x1138,r12	
    3e0e:	1d 42 3a 11 	mov	&0x113a,r13	
    3e12:	b0 12 b4 55 	call	#0x55b4	
    3e16:	1c 42 58 11 	mov	&0x1158,r12	
    3e1a:	1d 42 5a 11 	mov	&0x115a,r13	
    3e1e:	b0 12 18 55 	call	#0x5518	
    3e22:	b0 12 b8 52 	call	#0x52b8	
    3e26:	82 4e 8a 11 	mov	r14,	&0x118a	
}
    3e2a:	3b 41       	pop	r11		
    3e2c:	30 41       	ret			

00003e2e <load_transmitter_values>:

void load_transmitter_values(void){
    3e2e:	21 82       	sub	#4,	r1	;r2 As==10
    fourbytes ValorAux;

    if(EEPROMFound == 1){
    3e30:	d2 93 90 11 	cmp.b	#1,	&0x1190	;r3 As==01
    3e34:	9e 20       	jnz	$+318    	;abs 0x3f72
        i2c_change_address(EEPROM_I2C_ADDR);    
    3e36:	7f 40 a6 ff 	mov.b	#-90,	r15	;#0xffa6
    3e3a:	b0 12 48 4c 	call	#0x4c48	

        // load yaw slope e offset
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    3e3e:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3e40:	0e 41       	mov	r1,	r14	
    3e42:	3f 40 0c 00 	mov	#12,	r15	;#0x000c
    3e46:	b0 12 82 50 	call	#0x5082	
        PPMSlope[YAW_CH] = ValorAux.f;
    3e4a:	a2 41 2c 11 	mov	@r1,	&0x112c	
    3e4e:	92 41 02 00 	mov	2(r1),	&0x112e	;0x0002(r1)
    3e52:	2e 11 
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3e54:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3e56:	0e 41       	mov	r1,	r14	
    3e58:	3f 40 38 00 	mov	#56,	r15	;#0x0038
    3e5c:	b0 12 82 50 	call	#0x5082	
        PPMOffset[YAW_CH] = ValorAux.f;
    3e60:	a2 41 4c 11 	mov	@r1,	&0x114c	
    3e64:	92 41 02 00 	mov	2(r1),	&0x114e	;0x0002(r1)
    3e68:	4e 11 
        
        // load throttle slope  e offset
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    3e6a:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3e6c:	0e 41       	mov	r1,	r14	
    3e6e:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    3e72:	b0 12 82 50 	call	#0x5082	
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    3e76:	a2 41 28 11 	mov	@r1,	&0x1128	
    3e7a:	92 41 02 00 	mov	2(r1),	&0x112a	;0x0002(r1)
    3e7e:	2a 11 
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    3e80:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3e82:	0e 41       	mov	r1,	r14	
    3e84:	3f 40 3c 00 	mov	#60,	r15	;#0x003c
    3e88:	b0 12 82 50 	call	#0x5082	
        PPMOffset[THROTTLE_CH] = ValorAux.f;
    3e8c:	a2 41 48 11 	mov	@r1,	&0x1148	
    3e90:	92 41 02 00 	mov	2(r1),	&0x114a	;0x0002(r1)
    3e94:	4a 11 
        
        // load pitch slope  e offset
        i2c_read16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    3e96:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3e98:	0e 41       	mov	r1,	r14	
    3e9a:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    3e9e:	b0 12 82 50 	call	#0x5082	
        PPMSlope[PITCH_CH] = ValorAux.f;
    3ea2:	a2 41 24 11 	mov	@r1,	&0x1124	
    3ea6:	92 41 02 00 	mov	2(r1),	&0x1126	;0x0002(r1)
    3eaa:	26 11 
        i2c_read16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    3eac:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3eae:	0e 41       	mov	r1,	r14	
    3eb0:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    3eb4:	b0 12 82 50 	call	#0x5082	
        PPMOffset[PITCH_CH] = ValorAux.f;
    3eb8:	a2 41 44 11 	mov	@r1,	&0x1144	
    3ebc:	92 41 02 00 	mov	2(r1),	&0x1146	;0x0002(r1)
    3ec0:	46 11 
        
        // load roll slope  e offset
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    3ec2:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3ec4:	0e 41       	mov	r1,	r14	
    3ec6:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    3eca:	b0 12 82 50 	call	#0x5082	
        PPMSlope[ROLL_CH] = ValorAux.f;
    3ece:	a2 41 1c 11 	mov	@r1,	&0x111c	
    3ed2:	92 41 02 00 	mov	2(r1),	&0x111e	;0x0002(r1)
    3ed6:	1e 11 
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    3ed8:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3eda:	0e 41       	mov	r1,	r14	
    3edc:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    3ee0:	b0 12 82 50 	call	#0x5082	
        PPMOffset[ROLL_CH] = ValorAux.f;
    3ee4:	a2 41 3c 11 	mov	@r1,	&0x113c	
    3ee8:	92 41 02 00 	mov	2(r1),	&0x113e	;0x0002(r1)
    3eec:	3e 11 
    
        // load ch5 slope  e offset
        i2c_read16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    3eee:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3ef0:	0e 41       	mov	r1,	r14	
    3ef2:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    3ef6:	b0 12 82 50 	call	#0x5082	
        PPMSlope[CH5_CH] = ValorAux.f;
    3efa:	a2 41 30 11 	mov	@r1,	&0x1130	
    3efe:	92 41 02 00 	mov	2(r1),	&0x1132	;0x0002(r1)
    3f02:	32 11 
        i2c_read16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    3f04:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3f06:	0e 41       	mov	r1,	r14	
    3f08:	3f 40 40 00 	mov	#64,	r15	;#0x0040
    3f0c:	b0 12 82 50 	call	#0x5082	
        PPMOffset[CH5_CH] = ValorAux.f;
    3f10:	a2 41 50 11 	mov	@r1,	&0x1150	
    3f14:	92 41 02 00 	mov	2(r1),	&0x1152	;0x0002(r1)
    3f18:	52 11 
    
        // load ch6 slope  e offset
        i2c_read16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    3f1a:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3f1c:	0e 41       	mov	r1,	r14	
    3f1e:	3f 40 18 00 	mov	#24,	r15	;#0x0018
    3f22:	b0 12 82 50 	call	#0x5082	
        PPMSlope[CH6_CH] = ValorAux.f;
    3f26:	a2 41 34 11 	mov	@r1,	&0x1134	
    3f2a:	92 41 02 00 	mov	2(r1),	&0x1136	;0x0002(r1)
    3f2e:	36 11 
        i2c_read16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    3f30:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3f32:	0e 41       	mov	r1,	r14	
    3f34:	3f 40 44 00 	mov	#68,	r15	;#0x0044
    3f38:	b0 12 82 50 	call	#0x5082	
        PPMOffset[CH6_CH] = ValorAux.f;
    3f3c:	a2 41 54 11 	mov	@r1,	&0x1154	
    3f40:	92 41 02 00 	mov	2(r1),	&0x1156	;0x0002(r1)
    3f44:	56 11 
        
        // load ch7 slope  e offset
        i2c_read16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    3f46:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3f48:	0e 41       	mov	r1,	r14	
    3f4a:	3f 40 2c 00 	mov	#44,	r15	;#0x002c
    3f4e:	b0 12 82 50 	call	#0x5082	
        PPMSlope[CH7_CH] = ValorAux.f;
    3f52:	a2 41 38 11 	mov	@r1,	&0x1138	
    3f56:	92 41 02 00 	mov	2(r1),	&0x113a	;0x0002(r1)
    3f5a:	3a 11 
        i2c_read16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    3f5c:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3f5e:	0e 41       	mov	r1,	r14	
    3f60:	3f 40 48 00 	mov	#72,	r15	;#0x0048
    3f64:	b0 12 82 50 	call	#0x5082	
        PPMOffset[CH7_CH] = ValorAux.f;
    3f68:	a2 41 58 11 	mov	@r1,	&0x1158	
    3f6c:	92 41 02 00 	mov	2(r1),	&0x115a	;0x0002(r1)
    3f70:	5a 11 
    }
}
    3f72:	21 52       	add	#4,	r1	;r2 As==10
    3f74:	30 41       	ret			
    3f76:	20 20       	jnz	$+66     	;abs 0x3fb8
    3f78:	20 20       	jnz	$+66     	;abs 0x3fba
    3f7a:	20 52       	add	#4,	r0	;r2 As==10
    3f7c:	43 20       	jnz	$+136    	;abs 0x4004
    3f7e:	69 6e       	addc.b	@r14,	r9	
    3f80:	70 75       	subc.b	@r5+,	r0	
    3f82:	74 73       	subc.b	#-1,	r4	;r3 As==11
    3f84:	00 63       	adc	r0		
    3f86:	68 5b       	add.b	@r11,	r8	
    3f88:	25 64       	addc	@r4,	r5	
    3f8a:	5d 3a       	jl	$-836    	;abs 0x3c46
    3f8c:	20 25       	jz	$+578    	;abs 0x41ce
    3f8e:	64 20       	jnz	$+202    	;abs 0x4058
    3f90:	20 20       	jnz	$+66     	;abs 0x3fd2
    3f92:	0a 00       	mova	@r0,	r10	

00003f94 <draw_rc_inputs>:

void draw_rc_inputs(char raw){
    3f94:	0b 12       	push	r11		
    3f96:	0a 12       	push	r10		
    3f98:	09 12       	push	r9		
    3f9a:	08 12       	push	r8		
    3f9c:	07 12       	push	r7		
    3f9e:	47 4f       	mov.b	r15,	r7	
    unsigned int i = 0, k = 0, h = 0;
    3fa0:	08 43       	clr	r8		
    lcd_goto(0,0);
    3fa2:	4e 43       	clr.b	r14		
    3fa4:	4f 43       	clr.b	r15		
    3fa6:	b0 12 74 4a 	call	#0x4a74	
    printf("     RC inputs");
    3faa:	30 12 76 3f 	push	#16246		;#0x3f76
    3fae:	b0 12 aa 5f 	call	#0x5faa	
    lcd_goto(0,2);
    3fb2:	6e 43       	mov.b	#2,	r14	;r3 As==10
    3fb4:	4f 43       	clr.b	r15		
    3fb6:	b0 12 74 4a 	call	#0x4a74	
    
    for(i = 0; i < 8; i++){
    3fba:	21 53       	incd	r1		
        if(!raw){
    3fbc:	47 93       	tst.b	r7		
    3fbe:	3b 20       	jnz	$+120    	;abs 0x4036
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
    3fc0:	0b 48       	mov	r8,	r11	
    3fc2:	0b 5b       	rla	r11		
    3fc4:	1b 12 7c 11 	push	4476(r11)	;0x117c(r11)
    3fc8:	08 12       	push	r8		
    3fca:	30 12 85 3f 	push	#16261		;#0x3f85
    3fce:	b0 12 aa 5f 	call	#0x5faa	
    3fd2:	31 50 06 00 	add	#6,	r1	;#0x0006
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
        }
        k = 21 + (8 * i); //posicao inicial em y
    3fd6:	09 4b       	mov	r11,	r9	
    3fd8:	09 59       	rla	r9		
    3fda:	09 59       	rla	r9		
    3fdc:	39 50 15 00 	add	#21,	r9	;#0x0015
        if(!raw){
    3fe0:	47 93       	tst.b	r7		
    3fe2:	1e 20       	jnz	$+62     	;abs 0x4020
            if(ChannelInput[i] > 4000){
    3fe4:	bb 90 a1 0f 	cmp	#4001,	4476(r11);#0x0fa1, 0x117c(r11)
    3fe8:	7c 11 
    3fea:	17 2c       	jc	$+48     	;abs 0x401a
                h=100;
            }
            else{
                if(ChannelInput[i] < 2001){
    3fec:	bb 90 d1 07 	cmp	#2001,	4476(r11);#0x07d1, 0x117c(r11)
    3ff0:	7c 11 
    3ff2:	11 28       	jnc	$+36     	;abs 0x4016
                    h = 0;
                }
                else{
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
    3ff4:	1f 4b 7c 11 	mov	4476(r11),r15	;0x117c(r11)
    3ff8:	0e 4f       	mov	r15,	r14	
    3ffa:	0e 5e       	rla	r14		
    3ffc:	0e 5e       	rla	r14		
    3ffe:	0f 5f       	rla	r15		
    4000:	0e 5f       	add	r15,	r14	
    4002:	0e 5f       	add	r15,	r14	
    4004:	0e 5f       	add	r15,	r14	
    4006:	3e 50 e0 b1 	add	#-20000,r14	;#0xb1e0
    400a:	0c 4e       	mov	r14,	r12	
    400c:	3a 40 c8 00 	mov	#200,	r10	;#0x00c8
    4010:	b0 12 28 66 	call	#0x6628	
    4014:	15 3c       	jmp	$+44     	;abs 0x4040
            if(PPMValue[i] > 4000){
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
                    h = 0;
    4016:	0c 43       	clr	r12		
    4018:	13 3c       	jmp	$+40     	;abs 0x4040
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
                h=100;
    401a:	3c 40 64 00 	mov	#100,	r12	;#0x0064
    401e:	10 3c       	jmp	$+34     	;abs 0x4040
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
    4020:	bb 90 a1 0f 	cmp	#4001,	4460(r11);#0x0fa1, 0x116c(r11)
    4024:	6c 11 
    4026:	f9 2f       	jc	$-12     	;abs 0x401a
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
    4028:	bb 90 d1 07 	cmp	#2001,	4460(r11);#0x07d1, 0x116c(r11)
    402c:	6c 11 
    402e:	f3 2b       	jnc	$-24     	;abs 0x4016
                    h = 0;
                }
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
    4030:	1f 4b 6c 11 	mov	4460(r11),r15	;0x116c(r11)
    4034:	e1 3f       	jmp	$-60     	;abs 0x3ff8
    for(i = 0; i < 8; i++){
        if(!raw){
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
    4036:	0b 48       	mov	r8,	r11	
    4038:	0b 5b       	rla	r11		
    403a:	1b 12 6c 11 	push	4460(r11)	;0x116c(r11)
    403e:	c4 3f       	jmp	$-118    	;abs 0x3fc8
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    4040:	0c 12       	push	r12		
    4042:	30 12 03 00 	push	#3		;#0x0003
    4046:	30 12 ff 00 	push	#255		;#0x00ff
    404a:	2c 42       	mov	#4,	r12	;r2 As==10
    404c:	3d 40 2d 00 	mov	#45,	r13	;#0x002d
    4050:	0e 49       	mov	r9,	r14	
    4052:	3f 40 50 00 	mov	#80,	r15	;#0x0050
    4056:	b0 12 86 4b 	call	#0x4b86	
    unsigned int i = 0, k = 0, h = 0;
    lcd_goto(0,0);
    printf("     RC inputs");
    lcd_goto(0,2);
    
    for(i = 0; i < 8; i++){
    405a:	31 50 06 00 	add	#6,	r1	;#0x0006
    405e:	18 53       	inc	r8		
    4060:	38 92       	cmp	#8,	r8	;r2 As==11
    4062:	ac 2b       	jnc	$-166    	;abs 0x3fbc
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}
    4064:	37 41       	pop	r7		
    4066:	38 41       	pop	r8		
    4068:	39 41       	pop	r9		
    406a:	3a 41       	pop	r10		
    406c:	3b 41       	pop	r11		
    406e:	30 41       	ret			

00004070 <find_first>:

int find_first(int startaddress){
    4070:	0b 12       	push	r11		
    4072:	0b 4f       	mov	r15,	r11	
    for(; startaddress < 255; startaddress++){
    4074:	3f 90 ff 00 	cmp	#255,	r15	;#0x00ff
    4078:	02 38       	jl	$+6      	;abs 0x407e
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
        }
    }   
    return 0;
    407a:	0f 43       	clr	r15		
    407c:	0d 3c       	jmp	$+28     	;abs 0x4098
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
    407e:	4f 4b       	mov.b	r11,	r15	
    4080:	b0 12 38 4c 	call	#0x4c38	
        if(!i2c_find_device()){
    4084:	b0 12 80 4d 	call	#0x4d80	
    4088:	4f 93       	tst.b	r15		
    408a:	05 24       	jz	$+12     	;abs 0x4096
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
    408c:	1b 53       	inc	r11		
    408e:	3b 90 ff 00 	cmp	#255,	r11	;#0x00ff
    4092:	f5 3b       	jl	$-20     	;abs 0x407e
    4094:	f2 3f       	jmp	$-26     	;abs 0x407a
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
    4096:	0f 4b       	mov	r11,	r15	
        }
    }   
    return 0;
}
    4098:	3b 41       	pop	r11		
    409a:	30 41       	ret			

0000409c <main_loop>:

// loop de controle
void main_loop(){
    
    
}
    409c:	30 41       	ret			
    409e:	45 45       	mov.b	r5,	r5	
    40a0:	50 52 4f 4d 	add.b	&0x4d4f,r0	
    40a4:	20 66       	addc	@r6,	r0	
    40a6:	6f 75       	subc.b	@r5,	r15	
    40a8:	6e 64       	addc.b	@r4,	r14	
    40aa:	00 53       	add	#0,	r0	;r3 As==00
    40ac:	46 3a       	jl	$-882    	;abs 0x3d3a
    40ae:	20 25       	jz	$+578    	;abs 0x42f0
    40b0:	64 20       	jnz	$+202    	;abs 0x417a
    40b2:	25 64       	addc	@r4,	r5	
    40b4:	20 25       	jz	$+578    	;abs 0x42f6
    40b6:	64 0a 00 43 	mova	r10,	&0x44300
    40ba:	61 6c       	addc.b	@r12,	r1	
    40bc:	69 62       	addc.b	#4,	r9	;r2 As==10
    40be:	72 61       	addc.b	@r1+,	r2	
    40c0:	6e 64       	addc.b	@r4,	r14	
    40c2:	6f 20       	jnz	$+224    	;abs 0x41a2
    40c4:	72 61       	addc.b	@r1+,	r2	
    40c6:	64 69       	addc.b	@r9,	r4	
    40c8:	6f 2e       	jc	$-800    	;abs 0x3da8
    40ca:	2e 2e       	jc	$-930    	;abs 0x3d28
    40cc:	00 52       	add	r2,	r0	
    40ce:	43 20       	jnz	$+136    	;abs 0x4156
    40d0:	70 61       	addc.b	@r1+,	r0	
    40d2:	72 61       	addc.b	@r1+,	r2	
    40d4:	6d 73       	subc.b	#2,	r13	;r3 As==10
    40d6:	20 6c       	addc	@r12,	r0	
    40d8:	6f 61       	addc.b	@r1,	r15	
    40da:	64 65       	addc.b	@r5,	r4	
    40dc:	64 00 45 45 	mova	r0,	&0x44545
    40e0:	50 52 4f 4d 	add.b	&0x4d4f,r0	
    40e4:	20 6e       	addc	@r14,	r0	
    40e6:	6f 74       	subc.b	@r4,	r15	
    40e8:	20 66       	addc	@r6,	r0	
    40ea:	6f 75       	subc.b	@r5,	r15	
    40ec:	6e 64       	addc.b	@r4,	r14	
	...

000040f0 <setup>:

void setup(){
    40f0:	0b 12       	push	r11		
    
    clock_init();
    40f2:	b0 12 ce 36 	call	#0x36ce	
    
    timer_a3_init();
    40f6:	b0 12 fc 36 	call	#0x36fc	
    
    p1_init();
    40fa:	b0 12 e6 36 	call	#0x36e6	
    
    analog_init();
    40fe:	b0 12 30 51 	call	#0x5130	
    
    i2c_init();
    4102:	b0 12 4e 4c 	call	#0x4c4e	
    
    eint();
    4106:	32 d2       	eint			
    
    lcd_init(BLACK);
    4108:	4f 43       	clr.b	r15		
    410a:	b0 12 f2 44 	call	#0x44f2	
    
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));

    i2c_config(EEPROM_I2C_ADDR);
    410e:	7f 40 a6 ff 	mov.b	#-90,	r15	;#0xffa6
    4112:	b0 12 38 4c 	call	#0x4c38	
    EEPROMFound = !(i2c_find_device());
    4116:	4b 43       	clr.b	r11		
    4118:	b0 12 80 4d 	call	#0x4d80	
    411c:	4f 93       	tst.b	r15		
    411e:	01 20       	jnz	$+4      	;abs 0x4122
    4120:	5b 43       	mov.b	#1,	r11	;r3 As==01
    4122:	c2 4b 90 11 	mov.b	r11,	&0x1190	
    
    if(EEPROMFound){
    4126:	4b 93       	tst.b	r11		
    4128:	3e 24       	jz	$+126    	;abs 0x41a6
        printf("EEPROM found\n");
    412a:	3f 40 9e 40 	mov	#16542,	r15	;#0x409e
    412e:	b0 12 d6 65 	call	#0x65d6	
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    4132:	7d 40 03 00 	mov.b	#3,	r13	;#0x0003
    4136:	3e 40 06 11 	mov	#4358,	r14	;#0x1106
    413a:	0f 43       	clr	r15		
    413c:	b0 12 82 50 	call	#0x5082	
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);
    4140:	5f 42 08 11 	mov.b	&0x1108,r15	
    4144:	8f 11       	sxt	r15		
    4146:	0f 12       	push	r15		
    4148:	5f 42 07 11 	mov.b	&0x1107,r15	
    414c:	8f 11       	sxt	r15		
    414e:	0f 12       	push	r15		
    4150:	5f 42 06 11 	mov.b	&0x1106,r15	
    4154:	8f 11       	sxt	r15		
    4156:	0f 12       	push	r15		
    4158:	30 12 ab 40 	push	#16555		;#0x40ab
    415c:	b0 12 aa 5f 	call	#0x5faa	

        //if(1){
        if(StatusFlags[0] != 0){
    4160:	31 52       	add	#8,	r1	;r2 As==11
    4162:	c2 93 06 11 	tst.b	&0x1106	
    4166:	18 24       	jz	$+50     	;abs 0x4198
            printf("Calibrando radio...\n");
    4168:	3f 40 b9 40 	mov	#16569,	r15	;#0x40b9
    416c:	b0 12 d6 65 	call	#0x65d6	
            delayms(4000);
    4170:	3f 40 a0 0f 	mov	#4000,	r15	;#0x0fa0
    4174:	b0 12 18 4c 	call	#0x4c18	
            calibrate_radio();
    4178:	b0 12 c4 37 	call	#0x37c4	
            StatusFlags[0] = 0;
    417c:	c2 43 06 11 	mov.b	#0,	&0x1106	;r3 As==00
            StatusFlags[1] = 0;
    4180:	c2 43 07 11 	mov.b	#0,	&0x1107	;r3 As==00
            StatusFlags[2] = 0;
    4184:	c2 43 08 11 	mov.b	#0,	&0x1108	;r3 As==00
            i2c_write16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    4188:	7d 40 03 00 	mov.b	#3,	r13	;#0x0003
    418c:	3e 40 06 11 	mov	#4358,	r14	;#0x1106
    4190:	0f 43       	clr	r15		
    4192:	b0 12 b2 4e 	call	#0x4eb2	
    4196:	11 3c       	jmp	$+36     	;abs 0x41ba
        }
        else{
            load_transmitter_values();
    4198:	b0 12 2e 3e 	call	#0x3e2e	
            printf("RC params loaded\n");
    419c:	3f 40 cd 40 	mov	#16589,	r15	;#0x40cd
    41a0:	b0 12 d6 65 	call	#0x65d6	
    41a4:	0a 3c       	jmp	$+22     	;abs 0x41ba
            //carregar os outros parametros
        }
    }
    else{
        color_fore = RED;
    41a6:	f2 40 e0 ff 	mov.b	#-32,	&0x118f	;#0xffe0
    41aa:	8f 11 
        printf("EEPROM not found\n");
    41ac:	3f 40 de 40 	mov	#16606,	r15	;#0x40de
    41b0:	b0 12 d6 65 	call	#0x65d6	
        color_fore = LIME;
    41b4:	f2 40 1c 00 	mov.b	#28,	&0x118f	;#0x001c
    41b8:	8f 11 
    }
    
    delayms(5000);
    41ba:	3f 40 88 13 	mov	#5000,	r15	;#0x1388
    41be:	b0 12 18 4c 	call	#0x4c18	
    
    SetupDone = 1;
    41c2:	d2 43 0a 11 	mov.b	#1,	&0x110a	;r3 As==01
}
    41c6:	3b 41       	pop	r11		
    41c8:	30 41       	ret			

000041ca <analog_graph_clear>:

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
    41ca:	0d 43       	clr	r13		
    41cc:	3c 40 b6 11 	mov	#4534,	r12	;#0x11b6
        for(k = 0; k < 100; k++){
    41d0:	0e 43       	clr	r14		
            AnalogGraph[i][k] = 0;
    41d2:	02 12       	push	r2		
    41d4:	32 c2       	dint			
    41d6:	03 43       	nop			
    41d8:	82 4d 32 01 	mov	r13,	&0x0132	
    41dc:	b2 40 64 00 	mov	#100,	&0x0138	;#0x0064
    41e0:	38 01 
    41e2:	1f 42 3a 01 	mov	&0x013a,r15	
    41e6:	32 41       	pop	r2		
    41e8:	0f 5e       	add	r14,	r15	
    41ea:	0f 5c       	add	r12,	r15	
    41ec:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
}

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
        for(k = 0; k < 100; k++){
    41f0:	1e 53       	inc	r14		
    41f2:	3e 90 64 00 	cmp	#100,	r14	;#0x0064
    41f6:	ed 3b       	jl	$-36     	;abs 0x41d2
    SetupDone = 1;
}

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
    41f8:	1d 53       	inc	r13		
    41fa:	3d 92       	cmp	#8,	r13	;r2 As==11
    41fc:	e9 3b       	jl	$-44     	;abs 0x41d0
        for(k = 0; k < 100; k++){
            AnalogGraph[i][k] = 0;
        }
    }
}
    41fe:	30 41       	ret			

00004200 <asciitable>:
    4200:	00 00       	bra	@r0		
    4202:	00 00       	bra	@r0		
    4204:	00 3e       	jmp	$-1022   	;abs 0x3e06
    4206:	0a 34       	jge	$+22     	;abs 0x421c
    4208:	00 3e       	jmp	$-1022   	;abs 0x3e0a
    420a:	18 3e       	jmp	$-974    	;abs 0x3e3c
    420c:	00 3e       	jmp	$-1022   	;abs 0x3e0e
    420e:	22 00 3e 20 	mova	&0x0203e,r2	
    4212:	20 00 22 1c 	bra	&0x01c22	
    4216:	00 24       	jz	$+2      	;abs 0x4218
    4218:	2a 00 08 38 	mova	&0x03808,r10	
    421c:	38 08 1c 22 	mova	8732(r8),r8	;0x221c(r8)
    4220:	22 22       	jnz	$-954    	;abs 0x3e66
    4222:	1c 00       	mova	#0x00000,r12	
    4224:	38 38       	jl	$+114    	;abs 0x4296
    4226:	44 82       	sub.b	r2,	r4	
    4228:	1c 3e       	jmp	$-966    	;abs 0x3e62
    422a:	62 62       	addc.b	#4,	r2	;r2 As==10
    422c:	32 2e       	jc	$-922    	;abs 0x3e92
    422e:	26 23       	jnz	$-434    	;abs 0x407c
    4230:	23 22       	jnz	$-952    	;abs 0x3e78
    4232:	00 00       	bra	@r0		
    4234:	00 00       	bra	@r0		
    4236:	00 1c       	.word	0x1c00;	????	
    4238:	3e 36       	jge	$-898    	;abs 0x3eb6
    423a:	22 36       	jge	$-954    	;abs 0x3e80
    423c:	3e 3e       	jmp	$-898    	;abs 0x3eba
    423e:	36 36       	jge	$-914    	;abs 0x3eac
    4240:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x04242
    4244:	00 00       	bra	@r0		
    4246:	18 08       	mova	@r8+,	r8	
    4248:	1c 22       	jnz	$-966    	;abs 0x3e82
    424a:	22 63       	addc	#2,	r2	;r3 As==10
    424c:	55 4d 55 6b 	mov.b	27477(r13),r5	;0x6b55(r13)
    4250:	00 3e       	jmp	$-1022   	;abs 0x3e52
    4252:	0a 04       	mova	@r4,	r10	
    4254:	78 00 3e 0a 	mova	r0,	2622(r8);0x0a3e(r8)
    4258:	04 78       	subc	r8,	r4	
    425a:	00 38       	jl	$+2      	;abs 0x425c
    425c:	44 5f       	add.b	r15,	r4	
    425e:	4e 00       	rrcm.a	#1,	r14	
    4260:	38 44       	mov	@r4+,	r8	
    4262:	44 5f       	add.b	r15,	r4	
    4264:	00 3c       	jmp	$+2      	;abs 0x4266
    4266:	3c 3c       	jmp	$+122    	;abs 0x42e0
    4268:	3c 00 3e 0a 	mova	0x0a3e,	r12	;PC rel. 0x04ca8
    426c:	04 78       	subc	r8,	r4	
    426e:	00 3e       	jmp	$-1022   	;abs 0x3e70
    4270:	0a 04       	mova	@r4,	r10	
    4272:	78 44       	mov.b	@r4+,	r8	
    4274:	40 38       	jl	$+130    	;abs 0x42f6
    4276:	00 04       	bra	@r4		
    4278:	00 7f       	subc	r15,	r0	
    427a:	3e 1c       	.word	0x1c3e;	????	
    427c:	08 08       	mova	@r8,	r8	
    427e:	08 2a       	jnc	$-1006   	;abs 0x3e90
    4280:	1c 08       	mova	@r8+,	r12	
    4282:	08 1c       	.word	0x1c08;	????	
    4284:	2a 08 08 08 	mova	&0x80808,r10	
    4288:	08 2a       	jnc	$-1006   	;abs 0x3e9a
    428a:	08 08       	mova	@r8,	r8	
    428c:	00 3c       	jmp	$+2      	;abs 0x428e
    428e:	20 00 00 08 	bra	&0x00800	
    4292:	14 00       	mova	#0x00000,r4	
    4294:	14 08       	mova	@r8+,	r4	
    4296:	08 0c       	mova	@r12,	r8	
    4298:	0e 0c       	mova	@r12,	r14	
    429a:	08 08       	mova	@r8,	r8	
    429c:	18 38       	jl	$+50     	;abs 0x42ce
    429e:	18 08       	mova	@r8+,	r8	
    42a0:	00 00       	bra	@r0		
    42a2:	00 00       	bra	@r0		
    42a4:	00 00       	bra	@r0		
    42a6:	00 5f       	add	r15,	r0	
    42a8:	00 00       	bra	@r0		
    42aa:	00 07       	bra	@r7		
    42ac:	00 07       	bra	@r7		
    42ae:	00 14       	pushm.a	#1,	r0	
    42b0:	7f 14       	pushm.a	#8,	r15	
    42b2:	7f 14       	pushm.a	#8,	r15	
    42b4:	24 2a       	jnc	$-950    	;abs 0x3efe
    42b6:	7f 2a       	jnc	$-768    	;abs 0x3fb6
    42b8:	12 23       	jnz	$-474    	;abs 0x40de
    42ba:	13 08       	.word	0x0813;	????	Illegal as address instr
    42bc:	64 62       	addc.b	#4,	r4	;r2 As==10
    42be:	36 49       	mov	@r9+,	r6	
    42c0:	55 22       	jnz	$-852    	;abs 0x3f6c
    42c2:	50 00       	rrcm	#1,	r0	
    42c4:	05 03       	mova	#2,	r5	;r3 As==10
    42c6:	00 00       	bra	@r0		
    42c8:	00 1c 22 41 	movx	@r1,	r2	
    42cc:	00 00       	bra	@r0		
    42ce:	41 22       	jnz	$-892    	;abs 0x3f52
    42d0:	1c 00       	mova	#0x00000,r12	
    42d2:	14 08       	mova	@r8+,	r4	
    42d4:	3e 08 14 08 	mova	2068(r8),r14	;0x0814(r8)
    42d8:	08 3e       	jmp	$-1006   	;abs 0x3eea
    42da:	08 08       	mova	@r8,	r8	
    42dc:	00 50       	rla	r0		
    42de:	30 00 00 08 	bra	0x0800		;PC rel. 0x04ae0
    42e2:	08 08       	mova	@r8,	r8	
    42e4:	08 08       	mova	@r8,	r8	
    42e6:	00 60       	rlc	r0		
    42e8:	60 00 00 20 	mova	r0,	&0x02000
    42ec:	10 08       	bra	@r8+		
    42ee:	04 02       	mova	#4,	r4	;r2 As==10
    42f0:	3e 51       	add	@r1+,	r14	
    42f2:	49 45       	mov.b	r5,	r9	
    42f4:	3e 00 42 7f 	mova	0x7f42,	r14	;PC rel. 0x0c238
    42f8:	40 00       	rrcm.a	#1,	r0	
    42fa:	42 61       	addc.b	r1,	r2	
    42fc:	51 49 46 21 	mov.b	8518(r9),r1	;0x2146(r9)
    4300:	41 45       	mov.b	r5,	r1	
    4302:	4b 31       	jn	$+664    	;abs 0x459a
    4304:	18 14       	pushm.a	#2,	r8	
    4306:	12 7f 10 27 	subc	10000(r15),r2	;0x2710(r15)
    430a:	45 45       	mov.b	r5,	r5	
    430c:	45 39       	jl	$+652    	;abs 0x4598
    430e:	3c 4a       	mov	@r10+,	r12	
    4310:	49 49       	mov.b	r9,	r9	
    4312:	30 01 71 09 	bra	2417(r1)	;0x0971(r1)
    4316:	05 03       	mova	#2,	r5	;r3 As==10
    4318:	36 49       	mov	@r9+,	r6	
    431a:	49 49       	mov.b	r9,	r9	
    431c:	36 06 49 49 	mova	18761(r6),r6	;0x4949(r6)
    4320:	29 1e       	.word	0x1e29;	????	
    4322:	00 36       	jge	$-1022   	;abs 0x3f24
    4324:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x04326
    4328:	56 36       	jge	$-850    	;abs 0x3fd6
    432a:	00 00       	bra	@r0		
    432c:	08 14       	pushm.a	#1,	r8	
    432e:	22 41       	mov	@r1,	r2	
    4330:	00 14       	pushm.a	#1,	r0	
    4332:	14 14       	pushm.a	#2,	r4	
    4334:	14 14       	pushm.a	#2,	r4	
    4336:	00 41       	br	r1		
    4338:	22 14       	pushm.a	#3,	r2	
    433a:	08 02       	mova	#4,	r8	;r2 As==10
    433c:	01 51       	rla	r1		
    433e:	09 06       	mova	@r6,	r9	
    4340:	32 49       	mov	@r9+,	r2	
    4342:	79 41       	pop.b	r9		
    4344:	3e 7e       	subc	@r14+,	r14	
    4346:	11 11 11 7e 	rra	32273(r1)	;0x7e11(r1)
    434a:	7f 49       	mov.b	@r9+,	r15	
    434c:	49 49       	mov.b	r9,	r9	
    434e:	36 3e       	jmp	$-914    	;abs 0x3fbc
    4350:	41 41       	mov.b	r1,	r1	
    4352:	41 22       	jnz	$-892    	;abs 0x3fd6
    4354:	7f 41       	pop.b	r15		
    4356:	41 22       	jnz	$-892    	;abs 0x3fda
    4358:	1c 7f 49 49 	subc	18761(r15),r12	;0x4949(r15)
    435c:	49 41       	mov.b	r1,	r9	
    435e:	7f 09 09 09 	mova	r9,	2313(r15);0x0909(r15)
    4362:	01 3e       	jmp	$-1020   	;abs 0x3f66
    4364:	41 49       	mov.b	r9,	r1	
    4366:	49 7a       	subc.b	r10,	r9	
    4368:	7f 08 08 08 	mova	r8,	2056(r15);0x0808(r15)
    436c:	7f 00 41 7f 	mova	r0,	32577(r15);0x7f41(r15)
    4370:	41 00       	rrcm.a	#1,	r1	
    4372:	20 40       	br	@r0		
    4374:	41 3f       	jmp	$-380    	;abs 0x41f8
    4376:	01 7f       	subc	r15,	r1	
    4378:	08 14       	pushm.a	#1,	r8	
    437a:	22 41       	mov	@r1,	r2	
    437c:	7f 40 40 40 	mov.b	#16448,	r15	;#0x4040
    4380:	40 7f       	subc.b	r15,	r0	
    4382:	02 0c       	mova	@r12,	r2	
    4384:	02 7f       	subc	r15,	r2	
    4386:	7f 04 08 10 	mova	r4,	4104(r15);0x1008(r15)
    438a:	7f 3e       	jmp	$-768    	;abs 0x408a
    438c:	41 41       	mov.b	r1,	r1	
    438e:	41 3e       	jmp	$-892    	;abs 0x4012
    4390:	7f 09 09 09 	mova	r9,	2313(r15);0x0909(r15)
    4394:	06 3e       	jmp	$-1010   	;abs 0x3fa2
    4396:	41 51       	rla.b	r1		
    4398:	21 5e       	add	@r14,	r1	
    439a:	7f 09 19 29 	mova	r9,	10521(r15);0x2919(r15)
    439e:	46 46       	mov.b	r6,	r6	
    43a0:	49 49       	mov.b	r9,	r9	
    43a2:	49 31       	jn	$+660    	;abs 0x4636
    43a4:	01 01       	mova	@r1,	r1	
    43a6:	7f 01 01 3f 	mova	r1,	16129(r15);0x3f01(r15)
    43aa:	40 40       	br	r0		
    43ac:	40 3f       	jmp	$-382    	;abs 0x422e
    43ae:	1f 20       	jnz	$+64     	;abs 0x43ee
    43b0:	40 20       	jnz	$+130    	;abs 0x4432
    43b2:	1f 3f       	jmp	$-448    	;abs 0x41f2
    43b4:	40 38       	jl	$+130    	;abs 0x4436
    43b6:	40 3f       	jmp	$-382    	;abs 0x4238
    43b8:	63 14       	pushm.a	#7,	#0	;r3 As==00
    43ba:	08 14       	pushm.a	#1,	r8	
    43bc:	63 07 08 70 	mova	r7,	&0x37008
    43c0:	08 07       	mova	@r7,	r8	
    43c2:	61 51       	add.b	@r1,	r1	
    43c4:	49 45       	mov.b	r5,	r9	
    43c6:	43 00       	rrcm.a	#1,	#0	;r3 As==00
    43c8:	7f 41       	pop.b	r15		
    43ca:	41 00       	rrcm.a	#1,	r1	
    43cc:	02 04       	mova	@r4,	r2	
    43ce:	08 10       	rrc	r8		
    43d0:	20 00 41 41 	bra	&0x04141	
    43d4:	7f 00 04 02 	mova	r0,	516(r15);0x0204(r15)
    43d8:	01 02       	mova	#4,	r1	;r2 As==10
    43da:	04 40       	mov	r0,	r4	
    43dc:	40 40       	br	r0		
    43de:	40 40       	br	r0		
    43e0:	00 01       	bra	@r1		
    43e2:	02 04       	mova	@r4,	r2	
    43e4:	00 20       	jnz	$+2      	;abs 0x43e6
    43e6:	54 54 54 78 	add.b	30804(r4),r4	;0x7854(r4)
    43ea:	7f 48       	mov.b	@r8+,	r15	
    43ec:	44 44       	mov.b	r4,	r4	
    43ee:	38 38       	jl	$+114    	;abs 0x4460
    43f0:	44 44       	mov.b	r4,	r4	
    43f2:	44 20       	jnz	$+138    	;abs 0x447c
    43f4:	38 44       	mov	@r4+,	r8	
    43f6:	44 48       	mov.b	r8,	r4	
    43f8:	7f 38       	jl	$+256    	;abs 0x44f8
    43fa:	54 54 54 18 	add.b	6228(r4),r4	;0x1854(r4)
    43fe:	08 7e       	subc	r14,	r8	
    4400:	09 01       	mova	@r1,	r9	
    4402:	02 0c       	mova	@r12,	r2	
    4404:	52 52 52 3e 	add.b	&0x3e52,r2	
    4408:	7f 08 04 04 	mova	r8,	1028(r15);0x0404(r15)
    440c:	78 00 44 7d 	mova	r0,	32068(r8);0x7d44(r8)
    4410:	40 00       	rrcm.a	#1,	r0	
    4412:	20 40       	br	@r0		
    4414:	44 3d       	jmp	$+650    	;abs 0x469e
    4416:	00 7f       	subc	r15,	r0	
    4418:	10 28       	jnc	$+34     	;abs 0x443a
    441a:	44 00       	rrcm.a	#1,	r4	
    441c:	00 41       	br	r1		
    441e:	7f 40 00 7c 	mov.b	#31744,	r15	;#0x7c00
    4422:	04 18 04 78 	.rpt	#4
				subcx	r8,	r4	
    4426:	7c 08 04 04 	mova	r8,	1028(r12);0x0404(r12)
    442a:	78 38       	jl	$+242    	;abs 0x451c
    442c:	44 44       	mov.b	r4,	r4	
    442e:	44 38       	jl	$+138    	;abs 0x44b8
    4430:	7c 14       	pushm.a	#8,	r12	
    4432:	14 14       	pushm.a	#2,	r4	
    4434:	08 08       	mova	@r8,	r8	
    4436:	14 14       	pushm.a	#2,	r4	
    4438:	18 7c 7c 08 	subc	2172(r12),r8	;0x087c(r12)
    443c:	04 04       	mova	@r4,	r4	
    443e:	08 48       	mov	r8,	r8	
    4440:	54 54 54 20 	add.b	8276(r4),r4	;0x2054(r4)
    4444:	04 3f       	jmp	$-502    	;abs 0x424e
    4446:	44 40       	mov.b	r0,	r4	
    4448:	20 3c       	jmp	$+66     	;abs 0x448a
    444a:	40 40       	br	r0		
    444c:	20 7c       	subc	@r12,	r0	
    444e:	1c 20       	jnz	$+58     	;abs 0x4488
    4450:	40 20       	jnz	$+130    	;abs 0x44d2
    4452:	1c 3c       	jmp	$+58     	;abs 0x448c
    4454:	40 30       	jn	$+130    	;abs 0x44d6
    4456:	40 3c       	jmp	$+130    	;abs 0x44d8
    4458:	44 28       	jnc	$+138    	;abs 0x44e2
    445a:	10 28       	jnc	$+34     	;abs 0x447c
    445c:	44 0c       	rrcm.a	#4,	r4	
    445e:	50 50 50 3c 	add.b	0x3c50,	r0	;PC rel. 0x080b2
    4462:	44 64       	rlc.b	r4		
    4464:	54 4c 44 00 	mov.b	68(r12),r4	;0x0044(r12)
    4468:	00 36       	jge	$-1022   	;abs 0x406a
    446a:	41 00       	rrcm.a	#1,	r1	
    446c:	00 00       	bra	@r0		
    446e:	7f 00 00 00 	mova	r0,	0(r15)	;0x0000(r15)
    4472:	41 36       	jge	$-892    	;abs 0x40f6
    4474:	08 00       	mova	@r0,	r8	
    4476:	10 08       	bra	@r8+		
    4478:	08 10       	rrc	r8		
    447a:	08 78       	subc	r8,	r8	
    447c:	46 41       	mov.b	r1,	r6	
    447e:	46 78       	subc.b	r8,	r6	

00004480 <putchar>:
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    4480:	b0 12 40 4b 	call	#0x4b40	

void process_option(){
    4484:	0f 43       	clr	r15		
    4486:	30 41       	ret			

00004488 <lcd_setcolor>:
    int i;
    switch (MenuOption){
        case RADIO_RAW:
    4488:	4d 4f       	mov.b	r15,	r13	
            draw_rc_inputs(1);
    448a:	c2 4e 8e 11 	mov.b	r14,	&0x118e	
            break;
    448e:	c2 4d 8f 11 	mov.b	r13,	&0x118f	
        case RADIO_CORRECT:
    4492:	30 41       	ret			

00004494 <n6100_send>:
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    4494:	0b 12       	push	r11		
    4496:	4b 4f       	mov.b	r15,	r11	
                lcd_goto(8,8);
    4498:	7c 40 80 ff 	mov.b	#-128,	r12	;#0xff80
                printf("%d", i);
                delayms(1000);
            }
    449c:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    449e:	24 28       	jnc	$+74     	;abs 0x44e8
            MotorArmed = TRUE;
    44a0:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
            break;
            
        case INITIAL_SETTINGS:
    44a4:	d2 c3 31 00 	bic.b	#1,	&0x0031	;r3 As==01
            // seta o flag initial setup
    44a8:	f2 d2 31 00 	bis.b	#8,	&0x0031	;r2 As==11
            break;          
    44ac:	f2 c2 31 00 	bic.b	#8,	&0x0031	;r2 As==11
    }
    
    44b0:	4d 43       	clr.b	r13		
    if(ChannelInput[CH7_CH] > 3500){
    44b2:	4f 4b       	mov.b	r11,	r15	
    44b4:	4f fc       	and.b	r12,	r15	
    44b6:	15 24       	jz	$+44     	;abs 0x44e2
        MenuStep = WAIT_CH7_BACK;
    44b8:	e2 d3 31 00 	bis.b	#2,	&0x0031	;r3 As==10
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    }
}

    44bc:	f2 d2 31 00 	bis.b	#8,	&0x0031	;r2 As==11
void draw_analog_graph(void){
    44c0:	f2 c2 31 00 	bic.b	#8,	&0x0031	;r2 As==11
    lcd_goto(4,4);
    44c4:	12 c3       	clrc			
    44c6:	4c 10       	rrc.b	r12		
            
        case INITIAL_SETTINGS:
            // seta o flag initial setup
            break;          
    }
    
    44c8:	5d 53       	inc.b	r13		
    44ca:	7d 92       	cmp.b	#8,	r13	;r2 As==11
    44cc:	f2 2b       	jnc	$-26     	;abs 0x44b2

void draw_analog_graph(void){
    lcd_goto(4,4);
    printf("FAZER");
}

    44ce:	5e 93       	cmp.b	#1,	r14	;r3 As==01
    44d0:	0e 24       	jz	$+30     	;abs 0x44ee
    44d2:	7e 90 03 00 	cmp.b	#3,	r14	;#0x0003
    44d6:	0b 24       	jz	$+24     	;abs 0x44ee
void process_analog_menu(void){
    switch(MenuAnalog){
        case DISPLAY:
    44d8:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10
            lcd_goto(0,14);
    44dc:	d2 d3 31 00 	bis.b	#1,	&0x0031	;r3 As==01
    44e0:	06 3c       	jmp	$+14     	;abs 0x44ee
    
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    }
    44e2:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10
    44e6:	ea 3f       	jmp	$-42     	;abs 0x44bc
                delayms(1000);
            }
            MotorArmed = TRUE;
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
    44e8:	e2 d3 31 00 	bis.b	#2,	&0x0031	;r3 As==10
    44ec:	db 3f       	jmp	$-72     	;abs 0x44a4

void process_analog_menu(void){
    switch(MenuAnalog){
        case DISPLAY:
            lcd_goto(0,14);
            printf("DISPLAY             ");
    44ee:	3b 41       	pop	r11		
    44f0:	30 41       	ret			

000044f2 <lcd_init>:

            refresh_analog_menu();
            MenuAnalog = SELECT;
    44f2:	0b 12       	push	r11		
    44f4:	4b 4f       	mov.b	r15,	r11	
            break;
    44f6:	f2 d0 0f 00 	bis.b	#15,	&0x0032	;#0x000f
    44fa:	32 00 
        case SELECT:
            lcd_goto(0,14);
    44fc:	d2 d3 31 00 	bis.b	#1,	&0x0031	;r3 As==01
            printf("SELECT            ");
    4500:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10

    4504:	f2 c2 31 00 	bic.b	#8,	&0x0031	;r2 As==11
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    4508:	e2 c2 31 00 	bic.b	#4,	&0x0031	;r2 As==10
                MenuAnalog = WAIT_ROLL_LEFT;
    450c:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    4510:	b0 12 18 4c 	call	#0x4c18	
            }
    4514:	e2 d2 31 00 	bis.b	#4,	&0x0031	;r2 As==10
            else{
    4518:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    451c:	b0 12 18 4c 	call	#0x4c18	
                if(ChannelInput[ROLL_CH] < 2500){
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
    4520:	6e 43       	mov.b	#2,	r14	;r3 As==10
    4522:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011
    4526:	b0 12 94 44 	call	#0x4494	
            }
            
    452a:	7e 40 40 00 	mov.b	#64,	r14	;#0x0040
    452e:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    4532:	b0 12 5c 46 	call	#0x465c	
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    4536:	6e 43       	mov.b	#2,	r14	;r3 As==10
    4538:	7f 40 29 00 	mov.b	#41,	r15	;#0x0029
    453c:	b0 12 94 44 	call	#0x4494	
                MenuAnalog = WAIT_PITCH_DOWN;
    4540:	6e 43       	mov.b	#2,	r14	;r3 As==10
    4542:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
    4546:	b0 12 94 44 	call	#0x4494	
            }
    454a:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    454e:	b0 12 18 4c 	call	#0x4c18	
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
    4552:	6e 43       	mov.b	#2,	r14	;r3 As==10
    4554:	7f 40 3a 00 	mov.b	#58,	r15	;#0x003a
    4558:	b0 12 5c 46 	call	#0x465c	
                }
            }
    455c:	6e 43       	mov.b	#2,	r14	;r3 As==10
    455e:	7f 40 2d 00 	mov.b	#45,	r15	;#0x002d
    4562:	b0 12 94 44 	call	#0x4494	
            
            break;
    4566:	4e 43       	clr.b	r14		
    4568:	4f 43       	clr.b	r15		
    456a:	b0 12 94 44 	call	#0x4494	
        case WAIT_PITCH_DOWN:
    456e:	4e 43       	clr.b	r14		
    4570:	6f 43       	mov.b	#2,	r15	;r3 As==10
    4572:	b0 12 94 44 	call	#0x4494	
            lcd_goto(0,14);
    4576:	4e 43       	clr.b	r14		
    4578:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    457c:	b0 12 94 44 	call	#0x4494	
            printf("WAIT PITCH DOWN    ");
    4580:	4e 43       	clr.b	r14		
    4582:	7f 40 07 00 	mov.b	#7,	r15	;#0x0007
    4586:	b0 12 94 44 	call	#0x4494	

    458a:	4e 43       	clr.b	r14		
    458c:	7f 40 09 00 	mov.b	#9,	r15	;#0x0009
    4590:	b0 12 94 44 	call	#0x4494	
            if(ChannelInput[PITCH_CH] > 2500){
    4594:	4e 43       	clr.b	r14		
    4596:	7f 40 0b 00 	mov.b	#11,	r15	;#0x000b
    459a:	b0 12 94 44 	call	#0x4494	
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    459e:	4e 43       	clr.b	r14		
    45a0:	7f 40 0d 00 	mov.b	#13,	r15	;#0x000d
    45a4:	b0 12 94 44 	call	#0x4494	
                MenuAnalog = DISPLAY;
    45a8:	4e 43       	clr.b	r14		
    45aa:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    45ae:	b0 12 94 44 	call	#0x4494	
            }
            break;
    45b2:	4e 43       	clr.b	r14		
    45b4:	4f 43       	clr.b	r15		
    45b6:	b0 12 94 44 	call	#0x4494	
            
    45ba:	4e 43       	clr.b	r14		
    45bc:	6f 43       	mov.b	#2,	r15	;r3 As==10
    45be:	b0 12 94 44 	call	#0x4494	
        case WAIT_PITCH_UP:
    45c2:	4e 43       	clr.b	r14		
    45c4:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    45c8:	b0 12 94 44 	call	#0x4494	
            lcd_goto(0,14);
    45cc:	4e 43       	clr.b	r14		
    45ce:	7f 40 07 00 	mov.b	#7,	r15	;#0x0007
    45d2:	b0 12 94 44 	call	#0x4494	
            printf("WAIT PITCH UP    ");
    45d6:	4e 43       	clr.b	r14		
    45d8:	7f 40 09 00 	mov.b	#9,	r15	;#0x0009
    45dc:	b0 12 94 44 	call	#0x4494	

    45e0:	4e 43       	clr.b	r14		
    45e2:	7f 40 0b 00 	mov.b	#11,	r15	;#0x000b
    45e6:	b0 12 94 44 	call	#0x4494	
            if(ChannelInput[PITCH_CH] < 3500){
    45ea:	4e 43       	clr.b	r14		
    45ec:	7f 40 0d 00 	mov.b	#13,	r15	;#0x000d
    45f0:	b0 12 94 44 	call	#0x4494	
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    45f4:	4e 43       	clr.b	r14		
    45f6:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    45fa:	b0 12 94 44 	call	#0x4494	
                MenuAnalog = DISPLAY;
            }
    45fe:	4e 43       	clr.b	r14		
    4600:	4f 43       	clr.b	r15		
    4602:	b0 12 94 44 	call	#0x4494	
            break;
    4606:	4e 43       	clr.b	r14		
    4608:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    460c:	b0 12 94 44 	call	#0x4494	
            
    4610:	4e 43       	clr.b	r14		
    4612:	7f 40 0b 00 	mov.b	#11,	r15	;#0x000b
    4616:	b0 12 94 44 	call	#0x4494	
        case WAIT_ROLL_RIGHT:
    461a:	4e 43       	clr.b	r14		
    461c:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    4620:	b0 12 94 44 	call	#0x4494	
                lcd_goto(0,14);
                printf("WAIT ROLL RIGHT ");

    4624:	4e 43       	clr.b	r14		
    4626:	7f 40 36 00 	mov.b	#54,	r15	;#0x0036
    462a:	b0 12 5c 46 	call	#0x465c	
                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
    462e:	4b 12       	push.b	r11		
    4630:	7c 40 84 ff 	mov.b	#-124,	r12	;#0xff84
    4634:	7d 40 84 ff 	mov.b	#-124,	r13	;#0xff84
    4638:	4e 43       	clr.b	r14		
    463a:	4f 43       	clr.b	r15		
    463c:	b0 12 9a 46 	call	#0x469a	
    4640:	21 53       	incd	r1		
                        AnalogSelect--;
                    }
                    MenuAnalog = DISPLAY;
    4642:	3b 41       	pop	r11		
    4644:	30 41       	ret			

00004646 <lcd_clear>:
                }
            break;
            
        case WAIT_ROLL_LEFT:
    4646:	4f 12       	push.b	r15		
    4648:	7c 40 84 ff 	mov.b	#-124,	r12	;#0xff84
    464c:	7d 40 84 ff 	mov.b	#-124,	r13	;#0xff84
    4650:	4e 43       	clr.b	r14		
    4652:	4f 43       	clr.b	r15		
    4654:	b0 12 9a 46 	call	#0x469a	
    4658:	21 53       	incd	r1		
                lcd_goto(0,14);
    465a:	30 41       	ret			

0000465c <n6100_sendcom1>:
                printf("WAIT ROLL LEFT   ");
        
                if(ChannelInput[PITCH_CH] > 2500){
    465c:	0b 12       	push	r11		
    465e:	4b 4e       	mov.b	r14,	r11	
                   if(AnalogSelect < 7){
    4660:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    4664:	b0 12 94 44 	call	#0x4494	
                        AnalogSelect++;
    4668:	4e 43       	clr.b	r14		
    466a:	4f 4b       	mov.b	r11,	r15	
    466c:	b0 12 94 44 	call	#0x4494	
                    }
    4670:	3b 41       	pop	r11		
    4672:	30 41       	ret			

00004674 <n6100_sendcom2>:
                    MenuAnalog = DISPLAY;

                }
    4674:	0b 12       	push	r11		
    4676:	0a 12       	push	r10		
    4678:	4b 4e       	mov.b	r14,	r11	
    467a:	4a 4d       	mov.b	r13,	r10	
            break;
    467c:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    4680:	b0 12 94 44 	call	#0x4494	
            
    4684:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4686:	4f 4b       	mov.b	r11,	r15	
    4688:	b0 12 94 44 	call	#0x4494	
        case PROCESS_OPTION:
    468c:	4e 43       	clr.b	r14		
    468e:	4f 4a       	mov.b	r10,	r15	
    4690:	b0 12 94 44 	call	#0x4494	
            break;
    4694:	3a 41       	pop	r10		
    4696:	3b 41       	pop	r11		
    4698:	30 41       	ret			

0000469a <lcd_fillrect>:
        case WAIT_CH7_BACK:
            break;
    }
    469a:	0b 12       	push	r11		
    469c:	0a 12       	push	r10		
    469e:	09 12       	push	r9		
    46a0:	08 12       	push	r8		
    46a2:	07 12       	push	r7		
    46a4:	3b 40 0c 00 	mov	#12,	r11	;#0x000c
    46a8:	0b 51       	add	r1,	r11	
    46aa:	4a 4f       	mov.b	r15,	r10	
    46ac:	49 4e       	mov.b	r14,	r9	
    46ae:	48 4d       	mov.b	r13,	r8	
    46b0:	47 4c       	mov.b	r12,	r7	
    46b2:	6b 4b       	mov.b	@r11,	r11	
}

void refresh_analog_menu(void){
    46b4:	4f 5d       	add.b	r13,	r15	
    46b6:	7f 53       	add.b	#-1,	r15	;r3 As==11
    46b8:	4d 4f       	mov.b	r15,	r13	
    46ba:	4e 4a       	mov.b	r10,	r14	
    46bc:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    46c0:	b0 12 74 46 	call	#0x4674	
    int i;
    46c4:	4f 49       	mov.b	r9,	r15	
    46c6:	4f 57       	add.b	r7,	r15	
    46c8:	7f 53       	add.b	#-1,	r15	;r3 As==11
    46ca:	4d 4f       	mov.b	r15,	r13	
    46cc:	4e 49       	mov.b	r9,	r14	
    46ce:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    46d2:	b0 12 74 46 	call	#0x4674	
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    46d6:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    46da:	7f 40 2c 00 	mov.b	#44,	r15	;#0x002c
    46de:	b0 12 94 44 	call	#0x4494	
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
    46e2:	02 12       	push	r2		
    46e4:	32 c2       	dint			
    46e6:	03 43       	nop			
    46e8:	c2 48 30 01 	mov.b	r8,	&0x0130	
    46ec:	c2 47 38 01 	mov.b	r7,	&0x0138	
    46f0:	19 42 3a 01 	mov	&0x013a,r9	
    46f4:	32 41       	pop	r2		
            color_fore = BLACK;
    46f6:	0a 43       	clr	r10		
    46f8:	0a 99       	cmp	r9,	r10	
    46fa:	07 2c       	jc	$+16     	;abs 0x470a
        }
        else{                           // senao
    46fc:	5e 43       	mov.b	#1,	r14	;r3 As==01
    46fe:	4f 4b       	mov.b	r11,	r15	
    4700:	b0 12 94 44 	call	#0x4494	
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
            color_fore = BLACK;
    4704:	1a 53       	inc	r10		
    4706:	0a 99       	cmp	r9,	r10	
    4708:	f9 2b       	jnc	$-12     	;abs 0x46fc
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
    470a:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10
        
    470e:	d2 d3 31 00 	bis.b	#1,	&0x0031	;r3 As==01
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
    4712:	7d 40 83 ff 	mov.b	#-125,	r13	;#0xff83
    4716:	4e 43       	clr.b	r14		
    4718:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    471c:	b0 12 74 46 	call	#0x4674	
        }                                                                
    4720:	7d 40 83 ff 	mov.b	#-125,	r13	;#0xff83
    4724:	4e 43       	clr.b	r14		
    4726:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    472a:	b0 12 74 46 	call	#0x4674	
        else{                           // se nao                        
    472e:	37 41       	pop	r7		
    4730:	38 41       	pop	r8		
    4732:	39 41       	pop	r9		
    4734:	3a 41       	pop	r10		
    4736:	3b 41       	pop	r11		
    4738:	30 41       	ret			

0000473a <lcd_drawcircle>:
            if(color_back == LIME){
                color_fore = BLACK;
            }
    473a:	0b 12       	push	r11		
    473c:	0a 12       	push	r10		
    473e:	09 12       	push	r9		
    4740:	08 12       	push	r8		
    4742:	07 12       	push	r7		
    4744:	06 12       	push	r6		
    4746:	05 12       	push	r5		
    4748:	04 12       	push	r4		
    474a:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    474e:	3b 40 1c 00 	mov	#28,	r11	;#0x001c
    4752:	0b 51       	add	r1,	r11	
    4754:	05 4f       	mov	r15,	r5	
    4756:	06 4e       	mov	r14,	r6	
    4758:	48 4c       	mov.b	r12,	r8	
    475a:	29 4b       	mov	@r11,	r9	
        }                               
    475c:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01, 0x0000(r1)
    4760:	81 8d 00 00 	sub	r13,	0(r1)	;0x0000(r1)
        
    4764:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
        printf("%d",i);
    4768:	0e 4d       	mov	r13,	r14	
    476a:	0e 5e       	rla	r14		
    476c:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    4770:	b1 e3 04 00 	xor	#-1,	4(r1)	;r3 As==11, 0x0004(r1)
    4774:	91 53 04 00 	inc	4(r1)		;0x0004(r1)
        // ajusta as cores para o normal
    4778:	04 43       	clr	r4		
        color_fore = LIME;
    477a:	07 4d       	mov	r13,	r7	
        color_back = BLACK;
    477c:	4f 46       	mov.b	r6,	r15	
    477e:	4f 5d       	add.b	r13,	r15	
    4780:	c1 4f 07 00 	mov.b	r15,	7(r1)	;0x0007(r1)
    4784:	4c 12       	push.b	r12		
    4786:	4c 49       	mov.b	r9,	r12	
    4788:	4d 49       	mov.b	r9,	r13	
    478a:	5e 41 09 00 	mov.b	9(r1),	r14	;0x0009(r1)
    478e:	4f 45       	mov.b	r5,	r15	
    4790:	b0 12 9a 46 	call	#0x469a	
        printf(" ");
    4794:	4e 46       	mov.b	r6,	r14	
    4796:	4e 87       	sub.b	r7,	r14	
    4798:	c1 4e 0b 00 	mov.b	r14,	11(r1)	;0x000b(r1)
    479c:	48 12       	push.b	r8		
    479e:	4c 49       	mov.b	r9,	r12	
    47a0:	4d 49       	mov.b	r9,	r13	
    47a2:	5e 41 0d 00 	mov.b	13(r1),	r14	;0x000d(r1)
    47a6:	4f 45       	mov.b	r5,	r15	
    47a8:	b0 12 9a 46 	call	#0x469a	
    }
    47ac:	4f 45       	mov.b	r5,	r15	
    47ae:	4f 57       	add.b	r7,	r15	
    47b0:	c1 4f 0a 00 	mov.b	r15,	10(r1)	;0x000a(r1)
    47b4:	48 12       	push.b	r8		
    47b6:	4c 49       	mov.b	r9,	r12	
    47b8:	4d 49       	mov.b	r9,	r13	
    47ba:	4e 46       	mov.b	r6,	r14	
    47bc:	5f 41 0c 00 	mov.b	12(r1),	r15	;0x000c(r1)
    47c0:	b0 12 9a 46 	call	#0x469a	
    printf("                    ");
    47c4:	4e 45       	mov.b	r5,	r14	
    47c6:	4e 87       	sub.b	r7,	r14	
    47c8:	c1 4e 0e 00 	mov.b	r14,	14(r1)	;0x000e(r1)
    47cc:	48 12       	push.b	r8		
    47ce:	4c 49       	mov.b	r9,	r12	
    47d0:	4d 49       	mov.b	r9,	r13	
    47d2:	4e 46       	mov.b	r6,	r14	
    47d4:	5f 41 10 00 	mov.b	16(r1),	r15	;0x0010(r1)
    47d8:	b0 12 9a 46 	call	#0x469a	
}
    47dc:	31 52       	add	#8,	r1	;r2 As==11
    47de:	04 97       	cmp	r7,	r4	
    47e0:	6d 34       	jge	$+220    	;abs 0x48bc

    47e2:	81 93 00 00 	tst	0(r1)		;0x0000(r1)
    47e6:	16 38       	jl	$+46     	;abs 0x4814
interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    47e8:	37 53       	add	#-1,	r7	;r3 As==11
    ControlCounter++;
    47ea:	a1 53 04 00 	incd	4(r1)		;0x0004(r1)
    RCCounter++;
    47ee:	91 51 04 00 	add	4(r1),	0(r1)	;0x0004(r1), 0x0000(r1)
    47f2:	00 00 
    47f4:	4f 46       	mov.b	r6,	r15	
    47f6:	4f 57       	add.b	r7,	r15	
    47f8:	c1 4f 07 00 	mov.b	r15,	7(r1)	;0x0007(r1)
    47fc:	4e 46       	mov.b	r6,	r14	
    47fe:	4e 87       	sub.b	r7,	r14	
    4800:	c1 4e 09 00 	mov.b	r14,	9(r1)	;0x0009(r1)
    4804:	4f 45       	mov.b	r5,	r15	
    4806:	4f 57       	add.b	r7,	r15	
    4808:	c1 4f 06 00 	mov.b	r15,	6(r1)	;0x0006(r1)
    480c:	4e 45       	mov.b	r5,	r14	
    480e:	4e 87       	sub.b	r7,	r14	
    4810:	c1 4e 08 00 	mov.b	r14,	8(r1)	;0x0008(r1)
    MenuCounter++;
}
    4814:	14 53       	inc	r4		

    4816:	a1 53 02 00 	incd	2(r1)		;0x0002(r1)
void clock_init(void)
    481a:	91 51 02 00 	add	2(r1),	0(r1)	;0x0002(r1), 0x0000(r1)
    481e:	00 00 
    4820:	91 53 00 00 	inc	0(r1)		;0x0000(r1)
{
    4824:	4a 45       	mov.b	r5,	r10	
    4826:	4a 54       	add.b	r4,	r10	
    4828:	48 12       	push.b	r8		
    482a:	4c 49       	mov.b	r9,	r12	
    482c:	4d 49       	mov.b	r9,	r13	
    482e:	5e 41 09 00 	mov.b	9(r1),	r14	;0x0009(r1)
    4832:	4f 4a       	mov.b	r10,	r15	
    4834:	b0 12 9a 46 	call	#0x469a	
    /* 
    4838:	4b 45       	mov.b	r5,	r11	
    483a:	4b 84       	sub.b	r4,	r11	
    483c:	48 12       	push.b	r8		
    483e:	4c 49       	mov.b	r9,	r12	
    4840:	4d 49       	mov.b	r9,	r13	
    4842:	5e 41 0b 00 	mov.b	11(r1),	r14	;0x000b(r1)
    4846:	4f 4b       	mov.b	r11,	r15	
    4848:	b0 12 9a 46 	call	#0x469a	
     * Basic Clock System Control 2
    484c:	48 12       	push.b	r8		
    484e:	4c 49       	mov.b	r9,	r12	
    4850:	4d 49       	mov.b	r9,	r13	
    4852:	5e 41 0f 00 	mov.b	15(r1),	r14	;0x000f(r1)
    4856:	4f 4a       	mov.b	r10,	r15	
    4858:	b0 12 9a 46 	call	#0x469a	
     * 
    485c:	48 12       	push.b	r8		
    485e:	4c 49       	mov.b	r9,	r12	
    4860:	4d 49       	mov.b	r9,	r13	
    4862:	5e 41 11 00 	mov.b	17(r1),	r14	;0x0011(r1)
    4866:	4f 4b       	mov.b	r11,	r15	
    4868:	b0 12 9a 46 	call	#0x469a	
     * SELM_0 -- DCOCLK
    486c:	4b 46       	mov.b	r6,	r11	
    486e:	4b 54       	add.b	r4,	r11	
    4870:	48 12       	push.b	r8		
    4872:	4c 49       	mov.b	r9,	r12	
    4874:	4d 49       	mov.b	r9,	r13	
    4876:	4e 4b       	mov.b	r11,	r14	
    4878:	5f 41 10 00 	mov.b	16(r1),	r15	;0x0010(r1)
    487c:	b0 12 9a 46 	call	#0x469a	
     * DIVM_0 -- Divide by 1
    4880:	48 12       	push.b	r8		
    4882:	4c 49       	mov.b	r9,	r12	
    4884:	4d 49       	mov.b	r9,	r13	
    4886:	4e 4b       	mov.b	r11,	r14	
    4888:	5f 41 14 00 	mov.b	20(r1),	r15	;0x0014(r1)
    488c:	b0 12 9a 46 	call	#0x469a	
     * ~SELS -- DCOCLK
    4890:	4b 46       	mov.b	r6,	r11	
    4892:	4b 84       	sub.b	r4,	r11	
    4894:	48 12       	push.b	r8		
    4896:	4c 49       	mov.b	r9,	r12	
    4898:	4d 49       	mov.b	r9,	r13	
    489a:	4e 4b       	mov.b	r11,	r14	
    489c:	5f 41 14 00 	mov.b	20(r1),	r15	;0x0014(r1)
    48a0:	b0 12 9a 46 	call	#0x469a	
     * DIVS_0 -- Divide by 1
    48a4:	48 12       	push.b	r8		
    48a6:	4c 49       	mov.b	r9,	r12	
    48a8:	4d 49       	mov.b	r9,	r13	
    48aa:	4e 4b       	mov.b	r11,	r14	
    48ac:	5f 41 18 00 	mov.b	24(r1),	r15	;0x0018(r1)
    48b0:	b0 12 9a 46 	call	#0x469a	
    48b4:	31 50 10 00 	add	#16,	r1	;#0x0010
    48b8:	04 97       	cmp	r7,	r4	
    48ba:	93 3b       	jl	$-216    	;abs 0x47e2
     * ~DCOR -- DCO uses internal resistor
     * 
    48bc:	31 50 0a 00 	add	#10,	r1	;#0x000a
    48c0:	34 41       	pop	r4		
    48c2:	35 41       	pop	r5		
    48c4:	36 41       	pop	r6		
    48c6:	37 41       	pop	r7		
    48c8:	38 41       	pop	r8		
    48ca:	39 41       	pop	r9		
    48cc:	3a 41       	pop	r10		
    48ce:	3b 41       	pop	r11		
    48d0:	30 41       	ret			

000048d2 <lcd_drawline>:
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    48d2:	0b 12       	push	r11		
    48d4:	0a 12       	push	r10		
    48d6:	09 12       	push	r9		
    48d8:	08 12       	push	r8		
    48da:	07 12       	push	r7		
    48dc:	06 12       	push	r6		
    48de:	05 12       	push	r5		
    48e0:	04 12       	push	r4		
    48e2:	31 80 06 00 	sub	#6,	r1	;#0x0006
    48e6:	3b 40 18 00 	mov	#24,	r11	;#0x0018
    48ea:	0b 51       	add	r1,	r11	
    48ec:	09 4f       	mov	r15,	r9	
    48ee:	0a 4e       	mov	r14,	r10	
    48f0:	81 4d 00 00 	mov	r13,	0(r1)	;0x0000(r1)
    48f4:	04 4c       	mov	r12,	r4	
    48f6:	25 4b       	mov	@r11,	r5	
    48f8:	16 4b 02 00 	mov	2(r11),	r6	;0x0002(r11)
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    48fc:	07 4c       	mov	r12,	r7	
    48fe:	07 8e       	sub	r14,	r7	
    
    4900:	08 4d       	mov	r13,	r8	
    4902:	08 8f       	sub	r15,	r8	
    DCOCTL = 0x77;      
        /* 
    4904:	07 93       	tst	r7		
    4906:	49 38       	jl	$+148    	;abs 0x499a
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
    4908:	91 43 04 00 	mov	#1,	4(r1)	;r3 As==01, 0x0004(r1)
     */
    BCSCTL1 = 0xcf;     
    490c:	08 93       	tst	r8		
    490e:	40 38       	jl	$+130    	;abs 0x4990

    /* 
     * Basic Clock System Control 3
     * 
     * XT2S_3 -- Digital input signal
    4910:	91 43 02 00 	mov	#1,	2(r1)	;r3 As==01, 0x0002(r1)
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
     * XCAP_0 -- ~1 pF
    4914:	07 57       	rla	r7		
     */
    4916:	08 58       	rla	r8		
    BCSCTL3 = 0xa0;
    4918:	45 12       	push.b	r5		
    491a:	4c 46       	mov.b	r6,	r12	
    491c:	4d 46       	mov.b	r6,	r13	
    491e:	4e 4a       	mov.b	r10,	r14	
    4920:	4f 49       	mov.b	r9,	r15	
    4922:	b0 12 9a 46 	call	#0x469a	
}

    4926:	21 53       	incd	r1		
    4928:	07 98       	cmp	r8,	r7	
    492a:	19 34       	jge	$+52     	;abs 0x495e
void p1_init(){
    492c:	0f 48       	mov	r8,	r15	
    492e:	0f 11       	rra	r15		
    4930:	0b 47       	mov	r7,	r11	
    4932:	0b 8f       	sub	r15,	r11	
        /* Port 1 Output Register */
    4934:	29 91       	cmp	@r1,	r9	
    4936:	36 24       	jz	$+110    	;abs 0x49a4
    P1OUT = PPM_P1MASK;
    4938:	0b 93       	tst	r11		
    493a:	03 38       	jl	$+8      	;abs 0x4942

    493c:	1a 51 04 00 	add	4(r1),	r10	;0x0004(r1)
    /* Port 1 Resistor Enable Register */
    4940:	0b 88       	sub	r8,	r11	
    P1REN = PPM_P1MASK;

    4942:	19 51 02 00 	add	2(r1),	r9	;0x0002(r1)
    /* Port 1 Interrupt Edge Select Register */
    4946:	0b 57       	add	r7,	r11	
    P1IES = 0; // subida
    4948:	45 12       	push.b	r5		
    494a:	4c 46       	mov.b	r6,	r12	
    494c:	4d 46       	mov.b	r6,	r13	
    494e:	4e 4a       	mov.b	r10,	r14	
    4950:	4f 49       	mov.b	r9,	r15	
    4952:	b0 12 9a 46 	call	#0x469a	
    4956:	21 53       	incd	r1		
    4958:	29 91       	cmp	@r1,	r9	
    495a:	ee 23       	jnz	$-34     	;abs 0x4938
    495c:	23 3c       	jmp	$+72     	;abs 0x49a4

    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;

    495e:	0f 47       	mov	r7,	r15	
    4960:	0f 11       	rra	r15		
    4962:	0b 48       	mov	r8,	r11	
    4964:	0b 8f       	sub	r15,	r11	
    /* Port 1 Interrupt Enable Register */
    4966:	0a 94       	cmp	r4,	r10	
    4968:	1d 24       	jz	$+60     	;abs 0x49a4
    P1IE = PPM_P1MASK;
    496a:	0b 93       	tst	r11		
    496c:	03 38       	jl	$+8      	;abs 0x4974

    496e:	19 51 02 00 	add	2(r1),	r9	;0x0002(r1)
}
    4972:	0b 87       	sub	r7,	r11	

void timer_a3_init(void)
    4974:	1a 51 04 00 	add	4(r1),	r10	;0x0004(r1)
{
    4978:	0b 58       	add	r8,	r11	
    /* 
    497a:	45 12       	push.b	r5		
    497c:	4c 46       	mov.b	r6,	r12	
    497e:	4d 46       	mov.b	r6,	r13	
    4980:	4e 4a       	mov.b	r10,	r14	
    4982:	4f 49       	mov.b	r9,	r15	
    4984:	b0 12 9a 46 	call	#0x469a	
    4988:	21 53       	incd	r1		
    498a:	0a 94       	cmp	r4,	r10	
    498c:	ee 23       	jnz	$-34     	;abs 0x496a
    498e:	0a 3c       	jmp	$+22     	;abs 0x49a4
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    BCSCTL1 = 0xcf;     

    4990:	38 e3       	inv	r8		
    4992:	18 53       	inc	r8		
    /* 
    4994:	b1 43 02 00 	mov	#-1,	2(r1)	;r3 As==11, 0x0002(r1)
    4998:	bd 3f       	jmp	$-132    	;abs 0x4914
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    
    DCOCTL = 0x77;      
        /* 
     * Basic Clock System Control 1
    499a:	37 e3       	inv	r7		
    499c:	17 53       	inc	r7		
     * 
    499e:	b1 43 04 00 	mov	#-1,	4(r1)	;r3 As==11, 0x0004(r1)
    49a2:	b4 3f       	jmp	$-150    	;abs 0x490c
void timer_a3_init(void)
{
    /* 
     * TACCTL0, Capture/Compare Control Register 0
     * 
     * CM_0 -- No Capture
    49a4:	31 50 06 00 	add	#6,	r1	;#0x0006
    49a8:	34 41       	pop	r4		
    49aa:	35 41       	pop	r5		
    49ac:	36 41       	pop	r6		
    49ae:	37 41       	pop	r7		
    49b0:	38 41       	pop	r8		
    49b2:	39 41       	pop	r9		
    49b4:	3a 41       	pop	r10		
    49b6:	3b 41       	pop	r11		
    49b8:	30 41       	ret			

000049ba <lcd_putlogo>:
     * CCIS_0 -- CCIxA
     * ~SCS -- Asynchronous Capture
     * ~SCCI -- Latched capture signal (read)
    49ba:	0b 12       	push	r11		
    49bc:	0a 12       	push	r10		
    49be:	09 12       	push	r9		
    49c0:	08 12       	push	r8		
    49c2:	07 12       	push	r7		
    49c4:	3b 40 0c 00 	mov	#12,	r11	;#0x000c
    49c8:	0b 51       	add	r1,	r11	
    49ca:	4a 4f       	mov.b	r15,	r10	
    49cc:	49 4e       	mov.b	r14,	r9	
    49ce:	48 4d       	mov.b	r13,	r8	
    49d0:	47 4c       	mov.b	r12,	r7	
    49d2:	2b 4b       	mov	@r11,	r11	
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
    49d4:	4f 5d       	add.b	r13,	r15	
    49d6:	7f 53       	add.b	#-1,	r15	;r3 As==11
    49d8:	4d 4f       	mov.b	r15,	r13	
    49da:	4e 4a       	mov.b	r10,	r14	
    49dc:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    49e0:	b0 12 74 46 	call	#0x4674	
     * Note: ~<BIT> indicates that <BIT> has value zero
    49e4:	4f 49       	mov.b	r9,	r15	
    49e6:	4f 57       	add.b	r7,	r15	
    49e8:	7f 53       	add.b	#-1,	r15	;r3 As==11
    49ea:	4d 4f       	mov.b	r15,	r13	
    49ec:	4e 49       	mov.b	r9,	r14	
    49ee:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    49f2:	b0 12 74 46 	call	#0x4674	
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    49f6:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    49fa:	7f 40 2c 00 	mov.b	#44,	r15	;#0x002c
    49fe:	b0 12 94 44 	call	#0x4494	

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    4a02:	02 12       	push	r2		
    4a04:	32 c2       	dint			
    4a06:	03 43       	nop			
    4a08:	c2 48 30 01 	mov.b	r8,	&0x0130	
    4a0c:	c2 47 38 01 	mov.b	r7,	&0x0138	
    4a10:	19 42 3a 01 	mov	&0x013a,r9	
    4a14:	32 41       	pop	r2		
    TACCR0 = 4001;
    4a16:	0a 43       	clr	r10		
    4a18:	0a 99       	cmp	r9,	r10	
    4a1a:	09 2c       	jc	$+20     	;abs 0x4a2e

    /* 
    4a1c:	0f 4b       	mov	r11,	r15	
    4a1e:	0f 5a       	add	r10,	r15	
    4a20:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4a22:	6f 4f       	mov.b	@r15,	r15	
    4a24:	b0 12 94 44 	call	#0x4494	
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;
    4a28:	1a 53       	inc	r10		
    4a2a:	0a 99       	cmp	r9,	r10	
    4a2c:	f7 2b       	jnc	$-16     	;abs 0x4a1c

    /* 
     * TACTL, Timer_A3 Control Register
     * 
     * TASSEL_2 -- SMCLK
    4a2e:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10
     * ID_3 -- Divider - /8
    4a32:	d2 d3 31 00 	bis.b	#1,	&0x0031	;r3 As==01
     * MC_1 -- Up Mode
     */
    4a36:	7d 40 83 ff 	mov.b	#-125,	r13	;#0xff83
    4a3a:	4e 43       	clr.b	r14		
    4a3c:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    4a40:	b0 12 74 46 	call	#0x4674	
    TACTL = TASSEL_2 + ID_3 + MC_1;
    4a44:	7d 40 83 ff 	mov.b	#-125,	r13	;#0xff83
    4a48:	4e 43       	clr.b	r14		
    4a4a:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    4a4e:	b0 12 74 46 	call	#0x4674	
}
    4a52:	37 41       	pop	r7		
    4a54:	38 41       	pop	r8		
    4a56:	39 41       	pop	r9		
    4a58:	3a 41       	pop	r10		
    4a5a:	3b 41       	pop	r11		
    4a5c:	30 41       	ret			

00004a5e <lcd_newline>:

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    4a5e:	d2 53 8c 11 	inc.b	&0x118c	
    4a62:	f2 90 10 00 	cmp.b	#16,	&0x118c	;#0x0010
    4a66:	8c 11 
    4a68:	02 20       	jnz	$+6      	;abs 0x4a6e
    int channel_num = 0, PPM_ch_counter;
    4a6a:	c2 43 8c 11 	mov.b	#0,	&0x118c	;r3 As==00
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    4a6e:	c2 43 8d 11 	mov.b	#0,	&0x118d	;r3 As==00
            if(!(P1IES & PPM_ch_counter)){ // low to high
    4a72:	30 41       	ret			

00004a74 <lcd_goto>:
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
    4a74:	7f 90 15 00 	cmp.b	#21,	r15	;#0x0015
    4a78:	01 28       	jnc	$+4      	;abs 0x4a7c
    4a7a:	4f 43       	clr.b	r15		
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
    4a7c:	7e 90 10 00 	cmp.b	#16,	r14	;#0x0010
    4a80:	01 28       	jnc	$+4      	;abs 0x4a84
    4a82:	4e 43       	clr.b	r14		
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
    4a84:	c2 4f 8d 11 	mov.b	r15,	&0x118d	
                else{ // se nao deu overflow na contagem do timer
    4a88:	c2 4e 8c 11 	mov.b	r14,	&0x118c	
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    4a8c:	30 41       	ret			

00004a8e <lcd_wrchar>:
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
    4a8e:	0b 12       	push	r11		
    4a90:	0a 12       	push	r10		
    4a92:	09 12       	push	r9		
    4a94:	08 12       	push	r8		
    4a96:	07 12       	push	r7		
    4a98:	06 12       	push	r6		
    4a9a:	4b 4f       	mov.b	r15,	r11	
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}
    4a9c:	5f 42 8d 11 	mov.b	&0x118d,r15	
    4aa0:	4e 4f       	mov.b	r15,	r14	
    4aa2:	0e 5e       	rla	r14		
    4aa4:	0e 5e       	rla	r14		
    4aa6:	0f 5f       	rla	r15		
    4aa8:	0e 5f       	add	r15,	r14	
    4aaa:	4a 4e       	mov.b	r14,	r10	

    4aac:	7a 50 05 00 	add.b	#5,	r10	;#0x0005
    4ab0:	4d 4a       	mov.b	r10,	r13	
    4ab2:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    4ab6:	b0 12 74 46 	call	#0x4674	
void calibrate_radio(void){
    4aba:	5f 42 8c 11 	mov.b	&0x118c,r15	
    4abe:	0f 5f       	rla	r15		
    4ac0:	0f 5f       	rla	r15		
    4ac2:	0f 5f       	rla	r15		
    4ac4:	4a 4f       	mov.b	r15,	r10	
    4ac6:	6a 53       	incd.b	r10		
    
    4ac8:	7f 50 09 00 	add.b	#9,	r15	;#0x0009
    4acc:	4d 4f       	mov.b	r15,	r13	
    4ace:	4e 4a       	mov.b	r10,	r14	
    4ad0:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    4ad4:	b0 12 74 46 	call	#0x4674	
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }
    4ad8:	58 43       	mov.b	#1,	r8	;r3 As==01

    4ada:	6e 43       	mov.b	#2,	r14	;r3 As==10
    4adc:	7f 40 2c 00 	mov.b	#44,	r15	;#0x002c
    4ae0:	b0 12 94 44 	call	#0x4494	
    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4ae4:	47 43       	clr.b	r7		
    4ae6:	49 4b       	mov.b	r11,	r9	
    4ae8:	06 49       	mov	r9,	r6	
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    4aea:	0b 46       	mov	r6,	r11	
    4aec:	0b 5b       	rla	r11		
    4aee:	06 49       	mov	r9,	r6	
    4af0:	0b 59       	add	r9,	r11	
    4af2:	0b 59       	add	r9,	r11	
    4af4:	0b 59       	add	r9,	r11	
    
    4af6:	4a 43       	clr.b	r10		
    4af8:	3b 50 00 42 	add	#16896,	r11	;#0x4200
    lcd_goto(2,5);
    color_fore = RED;
    4afc:	6f 4b       	mov.b	@r11,	r15	
    4afe:	1b 53       	inc	r11		
    printf("MOVE STICKS\nALL DIRECTIONS");
    4b00:	4f f8       	and.b	r8,	r15	
    4b02:	0a 24       	jz	$+22     	;abs 0x4b18
    4b04:	4e 43       	clr.b	r14		
    4b06:	5f 42 8f 11 	mov.b	&0x118f,r15	
    4b0a:	b0 12 94 44 	call	#0x4494	

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    
    4b0e:	5a 53       	inc.b	r10		
    4b10:	7a 90 05 00 	cmp.b	#5,	r10	;#0x0005
    4b14:	f3 2b       	jnc	$-24     	;abs 0x4afc
    4b16:	04 3c       	jmp	$+10     	;abs 0x4b20
    4b18:	4e 43       	clr.b	r14		
    4b1a:	5f 42 8e 11 	mov.b	&0x118e,r15	
    4b1e:	f5 3f       	jmp	$-20     	;abs 0x4b0a
    lcd_goto(2,5);
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);
    4b20:	4e 43       	clr.b	r14		
    4b22:	5f 42 8e 11 	mov.b	&0x118e,r15	
    4b26:	b0 12 94 44 	call	#0x4494	

    4b2a:	48 58       	rla.b	r8		
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4b2c:	57 53       	inc.b	r7		
    4b2e:	77 92       	cmp.b	#8,	r7	;r2 As==11
    4b30:	dc 2b       	jnc	$-70     	;abs 0x4aea
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
    4b32:	36 41       	pop	r6		
    4b34:	37 41       	pop	r7		
    4b36:	38 41       	pop	r8		
    4b38:	39 41       	pop	r9		
    4b3a:	3a 41       	pop	r10		
    4b3c:	3b 41       	pop	r11		
    4b3e:	30 41       	ret			

00004b40 <lcd_putchar>:
        PPMSlope[i] = 1;
    }

    4b40:	0b 12       	push	r11		
    4b42:	4b 4f       	mov.b	r15,	r11	
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    4b44:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4b46:	3f 90 0a 00 	cmp	#10,	r15	;#0x000a
    4b4a:	19 24       	jz	$+52     	;abs 0x4b7e
    4b4c:	3f 90 0d 00 	cmp	#13,	r15	;#0x000d
    4b50:	13 24       	jz	$+40     	;abs 0x4b78
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
    4b52:	5f 42 8d 11 	mov.b	&0x118d,r15	
    4b56:	d2 53 8d 11 	inc.b	&0x118d	
    4b5a:	7f 90 15 00 	cmp.b	#21,	r15	;#0x0015
    4b5e:	04 2c       	jc	$+10     	;abs 0x4b68
    4b60:	4f 4b       	mov.b	r11,	r15	
    4b62:	b0 12 8e 4a 	call	#0x4a8e	
    4b66:	0d 3c       	jmp	$+28     	;abs 0x4b82
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
    4b68:	b0 12 5e 4a 	call	#0x4a5e	
        for(i = 0; i < 8; i++){ // pega max min
    4b6c:	4f 4b       	mov.b	r11,	r15	
    4b6e:	b0 12 8e 4a 	call	#0x4a8e	
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    4b72:	d2 53 8d 11 	inc.b	&0x118d	
    4b76:	05 3c       	jmp	$+12     	;abs 0x4b82

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    4b78:	c2 43 8d 11 	mov.b	#0,	&0x118d	;r3 As==00
    for(k = 120; k > 0; k--){
    4b7c:	02 3c       	jmp	$+6      	;abs 0x4b82
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    4b7e:	b0 12 5e 4a 	call	#0x4a5e	
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
    4b82:	3b 41       	pop	r11		
    4b84:	30 41       	ret			

00004b86 <lcd_drawprogressbar>:
                PPMMin[i] = PPMValue[i];
            }
    4b86:	0b 12       	push	r11		
    4b88:	0a 12       	push	r10		
    4b8a:	09 12       	push	r9		
    4b8c:	08 12       	push	r8		
    4b8e:	07 12       	push	r7		
    4b90:	06 12       	push	r6		
    4b92:	05 12       	push	r5		
    4b94:	04 12       	push	r4		
    4b96:	3b 40 12 00 	mov	#18,	r11	;#0x0012
    4b9a:	0b 51       	add	r1,	r11	
    4b9c:	06 4f       	mov	r15,	r6	
    4b9e:	05 4e       	mov	r14,	r5	
    4ba0:	08 4d       	mov	r13,	r8	
    4ba2:	07 4c       	mov	r12,	r7	
    4ba4:	29 4b       	mov	@r11,	r9	
    4ba6:	14 4b 02 00 	mov	2(r11),	r4	;0x0002(r11)
    4baa:	1f 4b 04 00 	mov	4(r11),	r15	;0x0004(r11)
        }
    4bae:	02 12       	push	r2		
    4bb0:	32 c2       	dint			
    4bb2:	03 43       	nop			
    4bb4:	82 4d 32 01 	mov	r13,	&0x0132	
    4bb8:	82 4f 38 01 	mov	r15,	&0x0138	
    4bbc:	1f 42 3a 01 	mov	&0x013a,r15	
    4bc0:	32 41       	pop	r2		
    4bc2:	0c 4f       	mov	r15,	r12	
    4bc4:	3a 40 64 00 	mov	#100,	r10	;#0x0064
    4bc8:	b0 12 44 66 	call	#0x6644	
    4bcc:	0b 4c       	mov	r12,	r11	
    }
    4bce:	49 12       	push.b	r9		
    4bd0:	4c 47       	mov.b	r7,	r12	
    4bd2:	4d 4b       	mov.b	r11,	r13	
    4bd4:	4e 45       	mov.b	r5,	r14	
    4bd6:	4f 46       	mov.b	r6,	r15	
    4bd8:	b0 12 9a 46 	call	#0x469a	
    
    4bdc:	4f 48       	mov.b	r8,	r15	
    4bde:	4f 8b       	sub.b	r11,	r15	
    4be0:	4b 56       	add.b	r6,	r11	
    4be2:	44 12       	push.b	r4		
    4be4:	4c 47       	mov.b	r7,	r12	
    4be6:	4d 4f       	mov.b	r15,	r13	
    4be8:	4e 45       	mov.b	r5,	r14	
    4bea:	4f 4b       	mov.b	r11,	r15	
    4bec:	b0 12 9a 46 	call	#0x469a	
    4bf0:	21 52       	add	#4,	r1	;r2 As==10
    lcd_clear(BLACK);
    4bf2:	34 41       	pop	r4		
    4bf4:	35 41       	pop	r5		
    4bf6:	36 41       	pop	r6		
    4bf8:	37 41       	pop	r7		
    4bfa:	38 41       	pop	r8		
    4bfc:	39 41       	pop	r9		
    4bfe:	3a 41       	pop	r10		
    4c00:	3b 41       	pop	r11		
    4c02:	30 41       	ret			

00004c04 <delay2us>:
/*
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
    4c04:	30 41       	ret			

00004c06 <delay5us>:
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE

MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

    4c06:	30 41       	ret			

00004c08 <delayus>:
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    4c08:	0e 43       	clr	r14		
    4c0a:	0e 9f       	cmp	r15,	r14	
    4c0c:	04 2c       	jc	$+10     	;abs 0x4c16
    4c0e:	03 43       	nop			
    4c10:	1e 53       	inc	r14		
    4c12:	0e 9f       	cmp	r15,	r14	
    4c14:	fc 2b       	jnc	$-6      	;abs 0x4c0e
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    4c16:	30 41       	ret			

00004c18 <delayms>:

// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4c18:	0b 12       	push	r11		
    4c1a:	0a 12       	push	r10		
    4c1c:	0a 4f       	mov	r15,	r10	

int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    4c1e:	0b 43       	clr	r11		
    4c20:	0b 9f       	cmp	r15,	r11	
    4c22:	07 2c       	jc	$+16     	;abs 0x4c32
    4c24:	3f 40 5c 0d 	mov	#3420,	r15	;#0x0d5c
    4c28:	b0 12 08 4c 	call	#0x4c08	
    4c2c:	1b 53       	inc	r11		
    4c2e:	0b 9a       	cmp	r10,	r11	
    4c30:	f9 2b       	jnc	$-12     	;abs 0x4c24

    4c32:	3a 41       	pop	r10		
    4c34:	3b 41       	pop	r11		
    4c36:	30 41       	ret			

00004c38 <i2c_config>:
    4c38:	0b 12       	push	r11		
    4c3a:	4b 4f       	mov.b	r15,	r11	
    4c3c:	b0 12 4e 4c 	call	#0x4c4e	
    4c40:	c2 4b 91 11 	mov.b	r11,	&0x1191	
    4c44:	3b 41       	pop	r11		
    4c46:	30 41       	ret			

00004c48 <i2c_change_address>:

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 
    4c48:	c2 4f 91 11 	mov.b	r15,	&0x1191	

    4c4c:	30 41       	ret			

00004c4e <i2c_init>:
// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()

    4c4e:	f2 d0 06 00 	bis.b	#6,	&0x001a	;#0x0006
    4c52:	1a 00 
// variaveis leitura radio raw
    4c54:	e2 d3 19 00 	bis.b	#2,	&0x0019	;r3 As==10
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    4c58:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    4c5c:	b0 12 06 4c 	call	#0x4c06	
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4c60:	30 41       	ret			

00004c62 <i2c_start>:

int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    4c62:	e2 d3 19 00 	bis.b	#2,	&0x0019	;r3 As==10
    INICIO: //loop main, vir para ca no caso de um reset
    4c66:	b0 12 06 4c 	call	#0x4c06	
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    4c6a:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10

    4c6e:	b0 12 06 4c 	call	#0x4c06	
    lcd_clear(BLACK);
    
    4c72:	e2 c3 19 00 	bic.b	#2,	&0x0019	;r3 As==10
    MenuOption = RADIO_RAW;
    4c76:	b0 12 06 4c 	call	#0x4c06	
    MenuStep = DISPLAY;
    4c7a:	e2 c2 19 00 	bic.b	#4,	&0x0019	;r2 As==10
    MenuVisible = TRUE;     // inicializa mostrando o menu
    4c7e:	b0 12 06 4c 	call	#0x4c06	
        
    4c82:	30 41       	ret			

00004c84 <i2c_stop>:
    while(1){
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
    4c84:	e2 c3 19 00 	bic.b	#2,	&0x0019	;r3 As==10
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
    4c88:	b0 12 06 4c 	call	#0x4c06	
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
    4c8c:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
    4c90:	b0 12 06 4c 	call	#0x4c06	
        P1 completa. */
    4c94:	e2 d3 19 00 	bis.b	#2,	&0x0019	;r3 As==10
        if(MotorArmed == TRUE){
    4c98:	b0 12 06 4c 	call	#0x4c06	
            if(ControlCounter >= CONTROL_PERIOD){
    4c9c:	30 41       	ret			

00004c9e <i2c_recv_ack>:
                main_loop();
                ControlCounter = 0;
            }
    4c9e:	0b 12       	push	r11		
        }
        
        if(SetupDone == TRUE){
    4ca0:	e2 c3 1a 00 	bic.b	#2,	&0x001a	;r3 As==10
            if(RCCounter >= RC_PERIOD){
    4ca4:	b0 12 06 4c 	call	#0x4c06	
                process_rc();
    4ca8:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
                RCCounter = 0;
    4cac:	b0 12 06 4c 	call	#0x4c06	
            }
    4cb0:	e2 b3 18 00 	bit.b	#2,	&0x0018	;r3 As==10
    4cb4:	02 24       	jz	$+6      	;abs 0x4cba
    4cb6:	5b 43       	mov.b	#1,	r11	;r3 As==01
    4cb8:	01 3c       	jmp	$+4      	;abs 0x4cbc
    4cba:	4b 43       	clr.b	r11		
        }
    4cbc:	b0 12 06 4c 	call	#0x4c06	
    
    4cc0:	e2 c2 19 00 	bic.b	#4,	&0x0019	;r2 As==10
        if(MenuVisible == TRUE){
    4cc4:	b0 12 06 4c 	call	#0x4c06	
            if(MenuCounter >= MENU_PERIOD){
    4cc8:	f2 d0 06 00 	bis.b	#6,	&0x001a	;#0x0006
    4ccc:	1a 00 
                process_menu();
                MenuCounter = 0;   
    4cce:	4f 4b       	mov.b	r11,	r15	
            }
    4cd0:	3b 41       	pop	r11		
    4cd2:	30 41       	ret			

00004cd4 <i2c_send_ack>:
        }
        else{
            if(ChannelInput[CH6_CH] > 3500){
                MenuVisible = TRUE;
    4cd4:	f2 d0 06 00 	bis.b	#6,	&0x001a	;#0x0006
    4cd8:	1a 00 
                MotorArmed = FALSE;
    4cda:	4f 93       	tst.b	r15		
    4cdc:	03 24       	jz	$+8      	;abs 0x4ce4
    4cde:	e2 d3 19 00 	bis.b	#2,	&0x0019	;r3 As==10
    4ce2:	02 3c       	jmp	$+6      	;abs 0x4ce8
    4ce4:	e2 c3 19 00 	bic.b	#2,	&0x0019	;r3 As==10
            }
    4ce8:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
        }
    4cec:	b0 12 06 4c 	call	#0x4c06	
    }
    4cf0:	e2 c2 19 00 	bic.b	#4,	&0x0019	;r2 As==10
}
    4cf4:	b0 12 06 4c 	call	#0x4c06	

    4cf8:	e2 c3 19 00 	bic.b	#2,	&0x0019	;r3 As==10
void process_menu(void){
    4cfc:	30 41       	ret			

00004cfe <i2c_bwrite>:
    switch(MenuStep){
        case DISPLAY:
            lcd_goto(0,14);
    4cfe:	0b 12       	push	r11		
    4d00:	0a 12       	push	r10		
    4d02:	09 12       	push	r9		
    4d04:	49 4f       	mov.b	r15,	r9	
            printf("DISPLAY             ");
    4d06:	7a 40 80 ff 	mov.b	#-128,	r10	;#0xff80
            
            lcd_clear(BLACK);
            lcd_goto(0,0);
    4d0a:	f2 d0 06 00 	bis.b	#6,	&0x001a	;#0x0006
    4d0e:	1a 00 
            printf("   MAIN MENU\n\n");
    4d10:	4b 43       	clr.b	r11		
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
            MenuStep = SELECT;
    4d12:	4f 49       	mov.b	r9,	r15	
    4d14:	4f fa       	and.b	r10,	r15	
    4d16:	03 24       	jz	$+8      	;abs 0x4d1e
    4d18:	e2 d3 19 00 	bis.b	#2,	&0x0019	;r3 As==10
    4d1c:	02 3c       	jmp	$+6      	;abs 0x4d22
    4d1e:	e2 c3 19 00 	bic.b	#2,	&0x0019	;r3 As==10
            break;
    4d22:	b0 12 06 4c 	call	#0x4c06	
        
    4d26:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
        case SELECT: // fica neste step a maior parte do tempo
    4d2a:	b0 12 06 4c 	call	#0x4c06	
            lcd_goto(0,14);
    4d2e:	e2 c2 19 00 	bic.b	#4,	&0x0019	;r2 As==10
            printf("SELECT            ");
    4d32:	b0 12 06 4c 	call	#0x4c06	
            
    4d36:	12 c3       	clrc			
    4d38:	4a 10       	rrc.b	r10		
            lcd_goto(0,14);
            printf("DISPLAY             ");
            
            lcd_clear(BLACK);
            lcd_goto(0,0);
            printf("   MAIN MENU\n\n");
    4d3a:	5b 53       	inc.b	r11		
    4d3c:	7b 92       	cmp.b	#8,	r11	;r2 As==11
    4d3e:	e9 2b       	jnc	$-44     	;abs 0x4d12
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
            printf("SELECT            ");
            
            lcd_goto(0,(int)MenuOption + 2);
            printf(">");
    4d40:	39 41       	pop	r9		
    4d42:	3a 41       	pop	r10		
    4d44:	3b 41       	pop	r11		
    4d46:	30 41       	ret			

00004d48 <i2c_bread>:
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    4d48:	0b 12       	push	r11		
    4d4a:	0a 12       	push	r10		
                MenuStep = WAIT_PITCH_DOWN;
            }
    4d4c:	4a 43       	clr.b	r10		
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    4d4e:	e2 c3 1a 00 	bic.b	#2,	&0x001a	;r3 As==10
                    MenuStep = WAIT_PITCH_UP;
    4d52:	4b 43       	clr.b	r11		
                }
            }
    4d54:	4a 5a       	rla.b	r10		
            
    4d56:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
            // select
    4d5a:	b0 12 06 4c 	call	#0x4c06	
            if(ChannelInput[ROLL_CH] > 3500){
    4d5e:	e2 b3 18 00 	bit.b	#2,	&0x0018	;r3 As==10
    4d62:	01 24       	jz	$+4      	;abs 0x4d66
    4d64:	5a 53       	inc.b	r10		
                MenuStep = WAIT_ROLL_LEFT;
    4d66:	b0 12 06 4c 	call	#0x4c06	
            }
    4d6a:	e2 c2 19 00 	bic.b	#4,	&0x0019	;r2 As==10
            
    4d6e:	b0 12 06 4c 	call	#0x4c06	
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuStep = WAIT_PITCH_UP;
    4d72:	5b 53       	inc.b	r11		
    4d74:	7b 92       	cmp.b	#8,	r11	;r2 As==11
    4d76:	ee 2b       	jnc	$-34     	;abs 0x4d54
                MenuStep = WAIT_ROLL_LEFT;
            }
            
            break;
        
        case WAIT_PITCH_DOWN:
    4d78:	4f 4a       	mov.b	r10,	r15	
            lcd_goto(0,14);
    4d7a:	3a 41       	pop	r10		
    4d7c:	3b 41       	pop	r11		
    4d7e:	30 41       	ret			

00004d80 <i2c_find_device>:
            if(ChannelInput[PITCH_CH] > 2500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
    4d80:	0b 12       	push	r11		
                MenuStep = SELECT;
            }
            break;
    4d82:	b0 12 62 4c 	call	#0x4c62	
        
    4d86:	5f 42 91 11 	mov.b	&0x1191,r15	
    4d8a:	b0 12 fe 4c 	call	#0x4cfe	
        case WAIT_PITCH_UP:
    4d8e:	b0 12 9e 4c 	call	#0x4c9e	
    4d92:	4b 4f       	mov.b	r15,	r11	
            lcd_goto(0,14);
    4d94:	b0 12 84 4c 	call	#0x4c84	
            printf("WAIT PITCH UP    ");

    4d98:	4f 4b       	mov.b	r11,	r15	
            if(ChannelInput[PITCH_CH] < 3500){
    4d9a:	3b 41       	pop	r11		
    4d9c:	30 41       	ret			

00004d9e <i2c_write_dummy>:
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    4d9e:	0b 12       	push	r11		
    4da0:	4b 4f       	mov.b	r15,	r11	
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    4da2:	b0 12 62 4c 	call	#0x4c62	
            }
    4da6:	4f 4b       	mov.b	r11,	r15	
    4da8:	b0 12 fe 4c 	call	#0x4cfe	
            break;
    4dac:	b0 12 9e 4c 	call	#0x4c9e	
    4db0:	4b 4f       	mov.b	r15,	r11	
        
    4db2:	b0 12 84 4c 	call	#0x4c84	
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    4db6:	4f 4b       	mov.b	r11,	r15	
            printf("WAIT ROLL LEFT    ");
    4db8:	3b 41       	pop	r11		
    4dba:	30 41       	ret			

00004dbc <i2c_write_byte>:
            
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
    4dbc:	0b 12       	push	r11		
    4dbe:	0a 12       	push	r10		
    4dc0:	09 12       	push	r9		
    4dc2:	4a 4f       	mov.b	r15,	r10	
    4dc4:	49 4e       	mov.b	r14,	r9	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
    4dc6:	b0 12 62 4c 	call	#0x4c62	
            break;
    4dca:	5f 42 91 11 	mov.b	&0x1191,r15	
    4dce:	b0 12 fe 4c 	call	#0x4cfe	
            
    4dd2:	b0 12 9e 4c 	call	#0x4c9e	
    4dd6:	4b 4f       	mov.b	r15,	r11	
        case WAIT_CH7_BACK:
    4dd8:	4f 4a       	mov.b	r10,	r15	
    4dda:	b0 12 fe 4c 	call	#0x4cfe	
            lcd_goto(0,14);
    4dde:	b0 12 9e 4c 	call	#0x4c9e	
    4de2:	4b 5f       	add.b	r15,	r11	
            printf("WAIT CH7 BACK    ");
    4de4:	4f 49       	mov.b	r9,	r15	
    4de6:	b0 12 fe 4c 	call	#0x4cfe	
            
    4dea:	b0 12 9e 4c 	call	#0x4c9e	
    4dee:	4b 5f       	add.b	r15,	r11	
            if(ChannelInput[CH7_CH] < 2500){
    4df0:	b0 12 84 4c 	call	#0x4c84	
                MenuStep = DISPLAY;
            }
    4df4:	4f 4b       	mov.b	r11,	r15	
            break;
    4df6:	39 41       	pop	r9		
    4df8:	3a 41       	pop	r10		
    4dfa:	3b 41       	pop	r11		
    4dfc:	30 41       	ret			

00004dfe <i2c_write_multiples>:
                    
        case PROCESS_OPTION:
            process_option();
    4dfe:	0b 12       	push	r11		
    4e00:	0a 12       	push	r10		
    4e02:	09 12       	push	r9		
    4e04:	08 12       	push	r8		
    4e06:	07 12       	push	r7		
    4e08:	4b 4f       	mov.b	r15,	r11	
    4e0a:	07 4e       	mov	r14,	r7	
    4e0c:	48 4d       	mov.b	r13,	r8	
            break;
    4e0e:	49 43       	clr.b	r9		
            
        case WAIT_ROLL_RIGHT:
    4e10:	b0 12 62 4c 	call	#0x4c62	
            break;    
    4e14:	5f 42 91 11 	mov.b	&0x1191,r15	
    4e18:	b0 12 fe 4c 	call	#0x4cfe	
    }
    4e1c:	b0 12 9e 4c 	call	#0x4c9e	
    4e20:	4a 4f       	mov.b	r15,	r10	
}
    4e22:	4f 4b       	mov.b	r11,	r15	
    4e24:	b0 12 fe 4c 	call	#0x4cfe	

    4e28:	b0 12 9e 4c 	call	#0x4c9e	
    4e2c:	4a 5f       	add.b	r15,	r10	
void process_option(){
    4e2e:	0e 20       	jnz	$+30     	;abs 0x4e4c
    4e30:	4a 98       	cmp.b	r8,	r10	
    4e32:	0c 2c       	jc	$+26     	;abs 0x4e4c
    int i;
    switch (MenuOption){
    4e34:	4f 49       	mov.b	r9,	r15	
    4e36:	0f 57       	add	r7,	r15	
    4e38:	59 53       	inc.b	r9		
    4e3a:	6f 4f       	mov.b	@r15,	r15	
    4e3c:	b0 12 fe 4c 	call	#0x4cfe	
        case RADIO_RAW:
    4e40:	b0 12 9e 4c 	call	#0x4c9e	
    4e44:	4a 5f       	add.b	r15,	r10	
    4e46:	02 20       	jnz	$+6      	;abs 0x4e4c
    4e48:	49 98       	cmp.b	r8,	r9	
    4e4a:	f4 2b       	jnc	$-22     	;abs 0x4e34
            draw_rc_inputs(1);
            break;
    4e4c:	b0 12 84 4c 	call	#0x4c84	
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
    4e50:	4f 4a       	mov.b	r10,	r15	
        case ANALOG_MONITOR:
    4e52:	37 41       	pop	r7		
    4e54:	38 41       	pop	r8		
    4e56:	39 41       	pop	r9		
    4e58:	3a 41       	pop	r10		
    4e5a:	3b 41       	pop	r11		
    4e5c:	30 41       	ret			

00004e5e <i2c_write16_byte>:
            process_analog_menu();
            break;
        
    4e5e:	0b 12       	push	r11		
    4e60:	0a 12       	push	r10		
    4e62:	09 12       	push	r9		
    4e64:	0a 4f       	mov	r15,	r10	
    4e66:	49 4e       	mov.b	r14,	r9	
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    4e68:	b0 12 62 4c 	call	#0x4c62	
                lcd_goto(8,8);
    4e6c:	5f 42 91 11 	mov.b	&0x1191,r15	
    4e70:	b0 12 fe 4c 	call	#0x4cfe	
                printf("%d", i);
    4e74:	b0 12 9e 4c 	call	#0x4c9e	
    4e78:	4b 4f       	mov.b	r15,	r11	
                delayms(1000);
    4e7a:	0f 4a       	mov	r10,	r15	
    4e7c:	8f 10       	swpb	r15		
    4e7e:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4e80:	b0 12 fe 4c 	call	#0x4cfe	
            }
    4e84:	b0 12 9e 4c 	call	#0x4c9e	
    4e88:	4b 5f       	add.b	r15,	r11	
            MotorArmed = TRUE;
    4e8a:	7a f3       	and.b	#-1,	r10	;r3 As==11
    4e8c:	4f 4a       	mov.b	r10,	r15	
    4e8e:	b0 12 fe 4c 	call	#0x4cfe	
            MenuVisible = FALSE;
    4e92:	b0 12 9e 4c 	call	#0x4c9e	
    4e96:	4b 5f       	add.b	r15,	r11	
            lcd_clear(BLACK);
    4e98:	4f 49       	mov.b	r9,	r15	
    4e9a:	b0 12 fe 4c 	call	#0x4cfe	
            MenuStep = DISPLAY;
    4e9e:	b0 12 9e 4c 	call	#0x4c9e	
    4ea2:	4b 5f       	add.b	r15,	r11	
            break;
    4ea4:	b0 12 84 4c 	call	#0x4c84	
            
        case INITIAL_SETTINGS:
    4ea8:	4f 4b       	mov.b	r11,	r15	
            // seta o flag initial setup
    4eaa:	39 41       	pop	r9		
    4eac:	3a 41       	pop	r10		
    4eae:	3b 41       	pop	r11		
    4eb0:	30 41       	ret			

00004eb2 <i2c_write16_multiples>:
            break;          
    }
    
    4eb2:	0b 12       	push	r11		
    4eb4:	0a 12       	push	r10		
    4eb6:	09 12       	push	r9		
    4eb8:	08 12       	push	r8		
    4eba:	07 12       	push	r7		
    4ebc:	0b 4f       	mov	r15,	r11	
    4ebe:	07 4e       	mov	r14,	r7	
    4ec0:	48 4d       	mov.b	r13,	r8	
    if(ChannelInput[CH7_CH] > 3500){
    4ec2:	49 43       	clr.b	r9		
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    4ec4:	b0 12 62 4c 	call	#0x4c62	
        lcd_clear(BLACK);
    4ec8:	5f 42 91 11 	mov.b	&0x1191,r15	
    4ecc:	b0 12 fe 4c 	call	#0x4cfe	
    }
    4ed0:	b0 12 9e 4c 	call	#0x4c9e	
    4ed4:	4a 4f       	mov.b	r15,	r10	
}
    4ed6:	0f 4b       	mov	r11,	r15	
    4ed8:	8f 10       	swpb	r15		
    4eda:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4edc:	b0 12 fe 4c 	call	#0x4cfe	

    4ee0:	b0 12 9e 4c 	call	#0x4c9e	
    4ee4:	4a 5f       	add.b	r15,	r10	
void draw_analog_graph(void){
    4ee6:	7b f3       	and.b	#-1,	r11	;r3 As==11
    4ee8:	4f 4b       	mov.b	r11,	r15	
    4eea:	b0 12 fe 4c 	call	#0x4cfe	
    lcd_goto(4,4);
    4eee:	b0 12 9e 4c 	call	#0x4c9e	
    4ef2:	4a 5f       	add.b	r15,	r10	
    printf("FAZER");
    4ef4:	0e 20       	jnz	$+30     	;abs 0x4f12
    4ef6:	4a 98       	cmp.b	r8,	r10	
    4ef8:	0c 2c       	jc	$+26     	;abs 0x4f12
}

    4efa:	4f 49       	mov.b	r9,	r15	
    4efc:	0f 57       	add	r7,	r15	
    4efe:	59 53       	inc.b	r9		
    4f00:	6f 4f       	mov.b	@r15,	r15	
    4f02:	b0 12 fe 4c 	call	#0x4cfe	
void process_analog_menu(void){
    4f06:	b0 12 9e 4c 	call	#0x4c9e	
    4f0a:	4a 5f       	add.b	r15,	r10	
    4f0c:	02 20       	jnz	$+6      	;abs 0x4f12
    4f0e:	49 98       	cmp.b	r8,	r9	
    4f10:	f4 2b       	jnc	$-22     	;abs 0x4efa
    switch(MenuAnalog){
        case DISPLAY:
    4f12:	b0 12 84 4c 	call	#0x4c84	
            lcd_goto(0,14);
            printf("DISPLAY             ");

    4f16:	4f 4a       	mov.b	r10,	r15	
            refresh_analog_menu();
    4f18:	37 41       	pop	r7		
    4f1a:	38 41       	pop	r8		
    4f1c:	39 41       	pop	r9		
    4f1e:	3a 41       	pop	r10		
    4f20:	3b 41       	pop	r11		
    4f22:	30 41       	ret			

00004f24 <i2c_read_byte>:
            MenuAnalog = SELECT;
            break;
        case SELECT:
    4f24:	0b 12       	push	r11		
    4f26:	0a 12       	push	r10		
    4f28:	09 12       	push	r9		
    4f2a:	4a 4f       	mov.b	r15,	r10	
    4f2c:	09 4e       	mov	r14,	r9	
            lcd_goto(0,14);
            printf("SELECT            ");

    4f2e:	b0 12 62 4c 	call	#0x4c62	
            // move para os lados
    4f32:	5f 42 91 11 	mov.b	&0x1191,r15	
    4f36:	b0 12 fe 4c 	call	#0x4cfe	
            if(ChannelInput[ROLL_CH] > 3500){
    4f3a:	b0 12 9e 4c 	call	#0x4c9e	
    4f3e:	4b 4f       	mov.b	r15,	r11	
                MenuAnalog = WAIT_ROLL_LEFT;
    4f40:	4f 4a       	mov.b	r10,	r15	
    4f42:	b0 12 fe 4c 	call	#0x4cfe	
            }
    4f46:	b0 12 9e 4c 	call	#0x4c9e	
    4f4a:	4b 5f       	add.b	r15,	r11	
            else{
    4f4c:	b0 12 62 4c 	call	#0x4c62	
                if(ChannelInput[ROLL_CH] < 2500){
    4f50:	5f 42 91 11 	mov.b	&0x1191,r15	
    4f54:	5f 53       	inc.b	r15		
    4f56:	b0 12 fe 4c 	call	#0x4cfe	
                    MenuAnalog = WAIT_ROLL_RIGHT;
    4f5a:	b0 12 9e 4c 	call	#0x4c9e	
    4f5e:	4b 5f       	add.b	r15,	r11	
                }
    4f60:	b0 12 48 4d 	call	#0x4d48	
    4f64:	c9 4f 00 00 	mov.b	r15,	0(r9)	;0x0000(r9)
            }
    4f68:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    4f6a:	b0 12 d4 4c 	call	#0x4cd4	
            
    4f6e:	b0 12 84 4c 	call	#0x4c84	
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    4f72:	4f 4b       	mov.b	r11,	r15	
                MenuAnalog = WAIT_PITCH_DOWN;
    4f74:	39 41       	pop	r9		
    4f76:	3a 41       	pop	r10		
    4f78:	3b 41       	pop	r11		
    4f7a:	30 41       	ret			

00004f7c <i2c_read_multiples>:
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    4f7c:	0b 12       	push	r11		
    4f7e:	0a 12       	push	r10		
    4f80:	09 12       	push	r9		
    4f82:	08 12       	push	r8		
    4f84:	07 12       	push	r7		
    4f86:	4b 4f       	mov.b	r15,	r11	
    4f88:	07 4e       	mov	r14,	r7	
    4f8a:	49 4d       	mov.b	r13,	r9	
                    MenuAnalog = WAIT_PITCH_UP;
    4f8c:	48 43       	clr.b	r8		
                }
            }
    4f8e:	b0 12 62 4c 	call	#0x4c62	
            
    4f92:	5f 42 91 11 	mov.b	&0x1191,r15	
    4f96:	b0 12 fe 4c 	call	#0x4cfe	
            break;
    4f9a:	b0 12 9e 4c 	call	#0x4c9e	
    4f9e:	4a 4f       	mov.b	r15,	r10	
        case WAIT_PITCH_DOWN:
    4fa0:	4f 4b       	mov.b	r11,	r15	
    4fa2:	b0 12 fe 4c 	call	#0x4cfe	
            lcd_goto(0,14);
    4fa6:	b0 12 9e 4c 	call	#0x4c9e	
    4faa:	4a 5f       	add.b	r15,	r10	
            printf("WAIT PITCH DOWN    ");
    4fac:	b0 12 62 4c 	call	#0x4c62	

    4fb0:	5f 42 91 11 	mov.b	&0x1191,r15	
    4fb4:	5f 53       	inc.b	r15		
    4fb6:	b0 12 fe 4c 	call	#0x4cfe	
            if(ChannelInput[PITCH_CH] > 2500){
    4fba:	b0 12 9e 4c 	call	#0x4c9e	
    4fbe:	4a 5f       	add.b	r15,	r10	
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
    4fc0:	19 20       	jnz	$+52     	;abs 0x4ff4
    4fc2:	4d 49       	mov.b	r9,	r13	
    4fc4:	3d 53       	add	#-1,	r13	;r3 As==11
    4fc6:	1d 93       	cmp	#1,	r13	;r3 As==01
    4fc8:	15 38       	jl	$+44     	;abs 0x4ff4
    4fca:	0b 43       	clr	r11		
    4fcc:	09 4d       	mov	r13,	r9	
            }
            break;
    4fce:	b0 12 48 4d 	call	#0x4d48	
    4fd2:	4e 4f       	mov.b	r15,	r14	
    4fd4:	0f 47       	mov	r7,	r15	
    4fd6:	0f 5b       	add	r11,	r15	
    4fd8:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
            
    4fdc:	4f 43       	clr.b	r15		
    4fde:	b0 12 d4 4c 	call	#0x4cd4	
        case WAIT_PITCH_UP:
    4fe2:	58 53       	inc.b	r8		
    4fe4:	4a 93       	tst.b	r10		
    4fe6:	04 20       	jnz	$+10     	;abs 0x4ff0
    4fe8:	4b 48       	mov.b	r8,	r11	
    4fea:	0b 99       	cmp	r9,	r11	
    4fec:	f0 3b       	jl	$-30     	;abs 0x4fce
    4fee:	03 3c       	jmp	$+8      	;abs 0x4ff6
    4ff0:	4b 48       	mov.b	r8,	r11	
    4ff2:	01 3c       	jmp	$+4      	;abs 0x4ff6
    4ff4:	0b 43       	clr	r11		
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");
    4ff6:	b0 12 48 4d 	call	#0x4d48	
    4ffa:	07 5b       	add	r11,	r7	
    4ffc:	c7 4f 00 00 	mov.b	r15,	0(r7)	;0x0000(r7)

    5000:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    5002:	b0 12 d4 4c 	call	#0x4cd4	
            if(ChannelInput[PITCH_CH] < 3500){
    5006:	b0 12 84 4c 	call	#0x4c84	
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
    500a:	4f 4a       	mov.b	r10,	r15	
            }
    500c:	37 41       	pop	r7		
    500e:	38 41       	pop	r8		
    5010:	39 41       	pop	r9		
    5012:	3a 41       	pop	r10		
    5014:	3b 41       	pop	r11		
    5016:	30 41       	ret			

00005018 <i2c_read16_byte>:
            break;
            
        case WAIT_ROLL_RIGHT:
    5018:	0b 12       	push	r11		
    501a:	0a 12       	push	r10		
    501c:	09 12       	push	r9		
    501e:	0a 4f       	mov	r15,	r10	
    5020:	09 4e       	mov	r14,	r9	
                lcd_goto(0,14);
                printf("WAIT ROLL RIGHT ");

    5022:	b0 12 62 4c 	call	#0x4c62	
                if(ChannelInput[PITCH_CH] < 3500){
    5026:	5f 42 91 11 	mov.b	&0x1191,r15	
    502a:	b0 12 fe 4c 	call	#0x4cfe	
                    if(AnalogSelect > 0){
    502e:	b0 12 9e 4c 	call	#0x4c9e	
    5032:	4b 4f       	mov.b	r15,	r11	
                        AnalogSelect--;
    5034:	0f 4a       	mov	r10,	r15	
    5036:	8f 10       	swpb	r15		
    5038:	7f f3       	and.b	#-1,	r15	;r3 As==11
    503a:	b0 12 fe 4c 	call	#0x4cfe	
                    }
    503e:	b0 12 9e 4c 	call	#0x4c9e	
    5042:	4b 5f       	add.b	r15,	r11	
                    MenuAnalog = DISPLAY;
    5044:	7a f3       	and.b	#-1,	r10	;r3 As==11
    5046:	4f 4a       	mov.b	r10,	r15	
    5048:	b0 12 fe 4c 	call	#0x4cfe	
                }
    504c:	b0 12 9e 4c 	call	#0x4c9e	
    5050:	4b 5f       	add.b	r15,	r11	
            break;
    5052:	b0 12 62 4c 	call	#0x4c62	
            
    5056:	5f 42 91 11 	mov.b	&0x1191,r15	
    505a:	5f 53       	inc.b	r15		
    505c:	b0 12 fe 4c 	call	#0x4cfe	
        case WAIT_ROLL_LEFT:
    5060:	b0 12 9e 4c 	call	#0x4c9e	
    5064:	4b 5f       	add.b	r15,	r11	
                lcd_goto(0,14);
    5066:	b0 12 48 4d 	call	#0x4d48	
    506a:	c9 4f 00 00 	mov.b	r15,	0(r9)	;0x0000(r9)
                printf("WAIT ROLL LEFT   ");
    506e:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    5070:	b0 12 d4 4c 	call	#0x4cd4	
        
    5074:	b0 12 84 4c 	call	#0x4c84	
                if(ChannelInput[PITCH_CH] > 2500){
                   if(AnalogSelect < 7){
    5078:	4f 4b       	mov.b	r11,	r15	
                        AnalogSelect++;
    507a:	39 41       	pop	r9		
    507c:	3a 41       	pop	r10		
    507e:	3b 41       	pop	r11		
    5080:	30 41       	ret			

00005082 <i2c_read16_multiples>:
                    }
                    MenuAnalog = DISPLAY;

    5082:	0b 12       	push	r11		
    5084:	0a 12       	push	r10		
    5086:	09 12       	push	r9		
    5088:	08 12       	push	r8		
    508a:	07 12       	push	r7		
    508c:	0b 4f       	mov	r15,	r11	
    508e:	08 4e       	mov	r14,	r8	
    5090:	49 4d       	mov.b	r13,	r9	
                }
    5092:	47 43       	clr.b	r7		
            break;
            
    5094:	b0 12 62 4c 	call	#0x4c62	
        case PROCESS_OPTION:
    5098:	5f 42 91 11 	mov.b	&0x1191,r15	
    509c:	b0 12 fe 4c 	call	#0x4cfe	
            break;
    50a0:	b0 12 9e 4c 	call	#0x4c9e	
    50a4:	4a 4f       	mov.b	r15,	r10	
        case WAIT_CH7_BACK:
    50a6:	0f 4b       	mov	r11,	r15	
    50a8:	8f 10       	swpb	r15		
    50aa:	7f f3       	and.b	#-1,	r15	;r3 As==11
    50ac:	b0 12 fe 4c 	call	#0x4cfe	
            break;
    50b0:	b0 12 9e 4c 	call	#0x4c9e	
    50b4:	4a 5f       	add.b	r15,	r10	
    }
    50b6:	7b f3       	and.b	#-1,	r11	;r3 As==11
    50b8:	4f 4b       	mov.b	r11,	r15	
    50ba:	b0 12 fe 4c 	call	#0x4cfe	
}
    50be:	b0 12 9e 4c 	call	#0x4c9e	
    50c2:	4a 5f       	add.b	r15,	r10	

    50c4:	b0 12 62 4c 	call	#0x4c62	
void refresh_analog_menu(void){
    50c8:	5f 42 91 11 	mov.b	&0x1191,r15	
    50cc:	5f 53       	inc.b	r15		
    50ce:	b0 12 fe 4c 	call	#0x4cfe	
    int i;
    50d2:	b0 12 9e 4c 	call	#0x4c9e	
    50d6:	4a 5f       	add.b	r15,	r10	
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    50d8:	19 20       	jnz	$+52     	;abs 0x510c
    50da:	4d 49       	mov.b	r9,	r13	
    50dc:	3d 53       	add	#-1,	r13	;r3 As==11
    50de:	1d 93       	cmp	#1,	r13	;r3 As==01
    50e0:	15 38       	jl	$+44     	;abs 0x510c
    50e2:	0b 43       	clr	r11		
    50e4:	09 4d       	mov	r13,	r9	
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
    50e6:	b0 12 48 4d 	call	#0x4d48	
    50ea:	4e 4f       	mov.b	r15,	r14	
    50ec:	0f 48       	mov	r8,	r15	
    50ee:	0f 5b       	add	r11,	r15	
    50f0:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
            color_fore = BLACK;
    50f4:	4f 43       	clr.b	r15		
    50f6:	b0 12 d4 4c 	call	#0x4cd4	
        }
    50fa:	57 53       	inc.b	r7		
    50fc:	4a 93       	tst.b	r10		
    50fe:	04 20       	jnz	$+10     	;abs 0x5108
    5100:	4b 47       	mov.b	r7,	r11	
    5102:	0b 99       	cmp	r9,	r11	
    5104:	f0 3b       	jl	$-30     	;abs 0x50e6
    5106:	03 3c       	jmp	$+8      	;abs 0x510e
    5108:	4b 47       	mov.b	r7,	r11	
    510a:	01 3c       	jmp	$+4      	;abs 0x510e
    510c:	0b 43       	clr	r11		
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
    510e:	b0 12 48 4d 	call	#0x4d48	
    5112:	08 5b       	add	r11,	r8	
    5114:	c8 4f 00 00 	mov.b	r15,	0(r8)	;0x0000(r8)
            color_fore = LIME;
    5118:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    511a:	b0 12 d4 4c 	call	#0x4cd4	
        }
    511e:	b0 12 84 4c 	call	#0x4c84	
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    5122:	4f 4a       	mov.b	r10,	r15	
            color_fore = RED;           // a cor da letra muda para vermelho 
    5124:	37 41       	pop	r7		
    5126:	38 41       	pop	r8		
    5128:	39 41       	pop	r9		
    512a:	3a 41       	pop	r10		
    512c:	3b 41       	pop	r11		
    512e:	30 41       	ret			

00005130 <analog_init>:
#include "signal.h"
#include "msp430x261x.h"
#include "delay.h"
#include "analog.h"
#include "lcd6100.h"
#include "eeprom.h"
    5130:	f2 43 37 00 	mov.b	#-1,	&0x0037	;r3 As==11
#include "i2c.h"
#include "microquad.h"
    5134:	a2 c3 a0 01 	bic	#2,	&0x01a0	;r3 As==10

    5138:	b2 40 30 00 	mov	#48,	&0x01a0	;#0x0030
    513c:	a0 01 
volatile unsigned int ControlCounter = 0;
    513e:	b2 40 00 02 	mov	#512,	&0x01a2	;#0x0200
    5142:	a2 01 
volatile unsigned int RCCounter = 0;
    5144:	a2 d3 a0 01 	bis	#2,	&0x01a0	;r3 As==10
volatile unsigned int MenuCounter = 0;
    5148:	30 41       	ret			

0000514a <analog_calibrate_channel>:
/*
    StatusFlags:
    514a:	0b 12       	push	r11		
    514c:	0a 12       	push	r10		
    514e:	09 12       	push	r9		
    5150:	08 12       	push	r8		
    5152:	07 12       	push	r7		
    5154:	07 4f       	mov	r15,	r7	
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
    5156:	0a 43       	clr	r10		
    5158:	0b 43       	clr	r11		
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
    515a:	5f 42 37 00 	mov.b	&0x0037,r15	
    515e:	7f f3       	and.b	#-1,	r15	;r3 As==11
    5160:	0e 47       	mov	r7,	r14	
    5162:	0e 93       	tst	r14		
    5164:	03 24       	jz	$+8      	;abs 0x516c
    5166:	0f 11       	rra	r15		
    5168:	1e 83       	dec	r14		
    516a:	fd 23       	jnz	$-4      	;abs 0x5166
    516c:	1f f3       	and	#1,	r15	;r3 As==01
    516e:	49 24       	jz	$+148    	;abs 0x5202
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
    5170:	38 40 b7 0b 	mov	#2999,	r8	;#0x0bb7
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE
    5174:	3f 40 2b 01 	mov	#299,	r15	;#0x012b
    5178:	3f 50 e7 ff 	add	#-25,	r15	;#0xffe7
    517c:	3f b0 00 80 	bit	#-32768,r15	;#0x8000
    5180:	fb 37       	jge	$-8      	;abs 0x5178

    5182:	a2 c3 a0 01 	bic	#2,	&0x01a0	;r3 As==10
MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
    5186:	c2 47 80 00 	mov.b	r7,	&0x0080	
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
    518a:	a2 d3 a0 01 	bis	#2,	&0x01a0	;r3 As==10
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal
    518e:	92 d3 a0 01 	bis	#1,	&0x01a0	;r3 As==01

    5192:	92 b3 a2 01 	bit	#1,	&0x01a2	;r3 As==01
    5196:	fd 23       	jnz	$-4      	;abs 0x5192
// variaveis usadas no menu analog graph
    5198:	3c 40 33 33 	mov	#13107,	r12	;#0x3333
    519c:	3d 40 73 3f 	mov	#16243,	r13	;#0x3f73
    51a0:	0e 4a       	mov	r10,	r14	
    51a2:	0f 4b       	mov	r11,	r15	
    51a4:	b0 12 b4 55 	call	#0x55b4	
    51a8:	09 4e       	mov	r14,	r9	
    51aa:	0a 4f       	mov	r15,	r10	
    51ac:	1b 42 40 01 	mov	&0x0140,r11	
    51b0:	0e 4b       	mov	r11,	r14	
    51b2:	0f 4e       	mov	r14,	r15	
    51b4:	0f 5f       	rla	r15		
    51b6:	0f 7f       	subc	r15,	r15	
    51b8:	3f e3       	inv	r15		
    51ba:	b0 12 b6 5a 	call	#0x5ab6	
    51be:	0b 93       	tst	r11		
    51c0:	1a 38       	jl	$+54     	;abs 0x51f6
    51c2:	3c 40 cd cc 	mov	#-13107,r12	;#0xcccd
    51c6:	3d 40 4c 3d 	mov	#15692,	r13	;#0x3d4c
    51ca:	b0 12 b4 55 	call	#0x55b4	
    51ce:	0c 4e       	mov	r14,	r12	
    51d0:	0d 4f       	mov	r15,	r13	
    51d2:	0e 49       	mov	r9,	r14	
    51d4:	0f 4a       	mov	r10,	r15	
    51d6:	b0 12 18 55 	call	#0x5518	
    51da:	0a 4e       	mov	r14,	r10	
    51dc:	0b 4f       	mov	r15,	r11	
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
    51de:	38 53       	add	#-1,	r8	;r3 As==11
    51e0:	38 b0 00 80 	bit	#-32768,r8	;#0x8000
    51e4:	c7 37       	jge	$-112    	;abs 0x5174
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
    51e6:	07 57       	rla	r7		
    51e8:	37 50 92 11 	add	#4498,	r7	;#0x1192
    51ec:	b0 12 48 5b 	call	#0x5b48	
    51f0:	87 4e 00 00 	mov	r14,	0(r7)	;0x0000(r7)
    51f4:	06 3c       	jmp	$+14     	;abs 0x5202
    51f6:	0c 43       	clr	r12		
    51f8:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    51fc:	b0 12 18 55 	call	#0x5518	
    5200:	e0 3f       	jmp	$-62     	;abs 0x51c2
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 
    5202:	37 41       	pop	r7		
    5204:	38 41       	pop	r8		
    5206:	39 41       	pop	r9		
    5208:	3a 41       	pop	r10		
    520a:	3b 41       	pop	r11		
    520c:	30 41       	ret			

0000520e <analog_refresh_all>:

// variaveis ajuste radio
    520e:	0b 12       	push	r11		
    5210:	0a 12       	push	r10		
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    5212:	0d 43       	clr	r13		
    5214:	3c 40 a2 11 	mov	#4514,	r12	;#0x11a2
    5218:	0b 4c       	mov	r12,	r11	

    521a:	5f 42 37 00 	mov.b	&0x0037,r15	
    521e:	7f f3       	and.b	#-1,	r15	;r3 As==11
    5220:	0e 4d       	mov	r13,	r14	
    5222:	0e 93       	tst	r14		
    5224:	03 24       	jz	$+8      	;abs 0x522c
    5226:	0f 11       	rra	r15		
    5228:	1e 83       	dec	r14		
    522a:	fd 23       	jnz	$-4      	;abs 0x5226
    522c:	1f f3       	and	#1,	r15	;r3 As==01
    522e:	16 24       	jz	$+46     	;abs 0x525c
// variaveis leitura radio raw
    5230:	a2 c3 a0 01 	bic	#2,	&0x01a0	;r3 As==10
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    5234:	c2 4d 80 00 	mov.b	r13,	&0x0080	
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    5238:	a2 d3 a0 01 	bis	#2,	&0x01a0	;r3 As==10
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    523c:	92 d3 a0 01 	bis	#1,	&0x01a0	;r3 As==01

    5240:	92 b3 a2 01 	bit	#1,	&0x01a2	;r3 As==01
    5244:	fd 23       	jnz	$-4      	;abs 0x5240
int main(){
    5246:	0e 4d       	mov	r13,	r14	
    5248:	0e 5e       	rla	r14		
    524a:	0f 4e       	mov	r14,	r15	
    524c:	0f 5b       	add	r11,	r15	
    524e:	1a 42 40 01 	mov	&0x0140,r10	
    5252:	1a 8e 92 11 	sub	4498(r14),r10	;0x1192(r14)
    5256:	8f 4a 00 00 	mov	r10,	0(r15)	;0x0000(r15)
    525a:	05 3c       	jmp	$+12     	;abs 0x5266
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    INICIO: //loop main, vir para ca no caso de um reset
    525c:	0f 4d       	mov	r13,	r15	
    525e:	0f 5f       	rla	r15		
    5260:	0f 5c       	add	r12,	r15	
    5262:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    5266:	1d 53       	inc	r13		
    5268:	3d 92       	cmp	#8,	r13	;r2 As==11
    526a:	d7 3b       	jl	$-80     	;abs 0x521a
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio

    lcd_clear(BLACK);
    526c:	3a 41       	pop	r10		
    526e:	3b 41       	pop	r11		
    5270:	30 41       	ret			

00005272 <analog_refresh_channel>:
    
    MenuOption = RADIO_RAW;
    5272:	0d 4f       	mov	r15,	r13	
    MenuStep = DISPLAY;
    5274:	5f 42 37 00 	mov.b	&0x0037,r15	
    5278:	7f f3       	and.b	#-1,	r15	;r3 As==11
    527a:	0e 4d       	mov	r13,	r14	
    527c:	0e 93       	tst	r14		
    527e:	03 24       	jz	$+8      	;abs 0x5286
    5280:	0f 11       	rra	r15		
    5282:	1e 83       	dec	r14		
    5284:	fd 23       	jnz	$-4      	;abs 0x5280
    5286:	1f f3       	and	#1,	r15	;r3 As==01
    5288:	13 24       	jz	$+40     	;abs 0x52b0
    MenuVisible = TRUE;     // inicializa mostrando o menu
    528a:	a2 c3 a0 01 	bic	#2,	&0x01a0	;r3 As==10
        
    528e:	c2 4d 80 00 	mov.b	r13,	&0x0080	
    while(1){
    5292:	a2 d3 a0 01 	bis	#2,	&0x01a0	;r3 As==10
        /* os Counters sao incrementados na interrution do timerA
    5296:	92 d3 a0 01 	bis	#1,	&0x01a0	;r3 As==01
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
    529a:	92 b3 a2 01 	bit	#1,	&0x01a2	;r3 As==01
    529e:	fd 23       	jnz	$-4      	;abs 0x529a
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
    52a0:	0d 5d       	rla	r13		
    52a2:	1f 42 40 01 	mov	&0x0140,r15	
    52a6:	1f 8d 92 11 	sub	4498(r13),r15	;0x1192(r13)
    52aa:	8d 4f a2 11 	mov	r15,	4514(r13);0x11a2(r13)
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(MotorArmed == TRUE){
    52ae:	30 41       	ret			
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
    52b0:	0d 5d       	rla	r13		
    52b2:	8d 43 a2 11 	mov	#0,	4514(r13);r3 As==00, 0x11a2(r13)
        P1 completa. */
        if(MotorArmed == TRUE){
    52b6:	30 41       	ret			

000052b8 <__fixunssfsi>:
    52b8:	0b 12       	push	r11		
    52ba:	0a 12       	push	r10		
    52bc:	0a 4e       	mov	r14,	r10	
    52be:	0b 4f       	mov	r15,	r11	
    52c0:	0c 43       	clr	r12		
    52c2:	3d 40 00 4f 	mov	#20224,	r13	;#0x4f00
    52c6:	b0 12 f2 59 	call	#0x59f2	
    52ca:	0f 93       	tst	r15		
    52cc:	0d 38       	jl	$+28     	;abs 0x52e8
    52ce:	0c 43       	clr	r12		
    52d0:	3d 40 00 cf 	mov	#-12544,r13	;#0xcf00
    52d4:	0e 4a       	mov	r10,	r14	
    52d6:	0f 4b       	mov	r11,	r15	
    52d8:	b0 12 18 55 	call	#0x5518	
    52dc:	b0 12 48 5b 	call	#0x5b48	
    52e0:	0e 53       	add	#0,	r14	;r3 As==00
    52e2:	3f 60 00 80 	addc	#-32768,r15	;#0x8000
    52e6:	04 3c       	jmp	$+10     	;abs 0x52f0
    52e8:	0e 4a       	mov	r10,	r14	
    52ea:	0f 4b       	mov	r11,	r15	
    52ec:	b0 12 48 5b 	call	#0x5b48	
    52f0:	3a 41       	pop	r10		
    52f2:	3b 41       	pop	r11		
    52f4:	30 41       	ret			

000052f6 <_fpadd_parts>:
    P1IE = PPM_P1MASK;

}

void timer_a3_init(void)
{
    52f6:	0b 12       	push	r11		
    52f8:	0a 12       	push	r10		
    52fa:	09 12       	push	r9		
    52fc:	08 12       	push	r8		
    52fe:	07 12       	push	r7		
    5300:	06 12       	push	r6		
    5302:	05 12       	push	r5		
    5304:	0b 4f       	mov	r15,	r11	
    5306:	0a 4e       	mov	r14,	r10	
    5308:	09 4d       	mov	r13,	r9	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    530a:	0f 43       	clr	r15		
    530c:	6e 4b       	mov.b	@r11,	r14	
    530e:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5310:	01 2c       	jc	$+4      	;abs 0x5314
    5312:	1f 43       	mov	#1,	r15	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5314:	0f 93       	tst	r15		
    5316:	18 20       	jnz	$+50     	;abs 0x5348
                MenuStep = SELECT;
    5318:	0c 43       	clr	r12		
    531a:	6f 4a       	mov.b	@r10,	r15	
    531c:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    531e:	01 2c       	jc	$+4      	;abs 0x5322
    5320:	1c 43       	mov	#1,	r12	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5322:	0c 93       	tst	r12		
    5324:	3c 20       	jnz	$+122    	;abs 0x539e
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5326:	0c 43       	clr	r12		
    5328:	6e 92       	cmp.b	#4,	r14	;r2 As==10
    532a:	eb 24       	jz	$+472    	;abs 0x5502
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    532c:	0c 93       	tst	r12		
    532e:	10 24       	jz	$+34     	;abs 0x5350
            
    5330:	0e 43       	clr	r14		
    5332:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    5334:	0b 24       	jz	$+24     	;abs 0x534c
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5336:	0e 93       	tst	r14		
    5338:	07 24       	jz	$+16     	;abs 0x5348
    533a:	db 9a 01 00 	cmp.b	1(r10),	1(r11)	;0x0001(r10), 0x0001(r11)
    533e:	01 00 
    5340:	03 24       	jz	$+8      	;abs 0x5348
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
    5342:	3d 40 e4 5b 	mov	#23524,	r13	;#0x5be4
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
    5346:	df 3c       	jmp	$+448    	;abs 0x5506
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    5348:	0d 4b       	mov	r11,	r13	
    534a:	dd 3c       	jmp	$+444    	;abs 0x5506
    534c:	1e 43       	mov	#1,	r14	;r3 As==01
    534e:	f3 3f       	jmp	$-24     	;abs 0x5336
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5350:	0d 43       	clr	r13		
    5352:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    5354:	d4 24       	jz	$+426    	;abs 0x54fe
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5356:	0d 93       	tst	r13		
    5358:	22 20       	jnz	$+70     	;abs 0x539e
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    535a:	0d 43       	clr	r13		
    535c:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    535e:	cd 24       	jz	$+412    	;abs 0x54fa
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5360:	0d 93       	tst	r13		
    5362:	18 24       	jz	$+50     	;abs 0x5394
            lcd_goto(0,14);
    5364:	0f 43       	clr	r15		
    5366:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5368:	13 24       	jz	$+40     	;abs 0x5390
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    536a:	0f 93       	tst	r15		
    536c:	ed 27       	jz	$-36     	;abs 0x5348

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    536e:	0f 4b       	mov	r11,	r15	
    5370:	b9 4f 00 00 	mov	@r15+,	0(r9)	;0x0000(r9)
    5374:	b9 4f 02 00 	mov	@r15+,	2(r9)	;0x0002(r9)
    5378:	b9 4f 04 00 	mov	@r15+,	4(r9)	;0x0004(r9)
    537c:	b9 4f 06 00 	mov	@r15+,	6(r9)	;0x0006(r9)
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    5380:	5b 4b 01 00 	mov.b	1(r11),	r11	;0x0001(r11)
    5384:	5b fa 01 00 	and.b	1(r10),	r11	;0x0001(r10)
    5388:	c9 4b 01 00 	mov.b	r11,	1(r9)	;0x0001(r9)
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
    538c:	0d 49       	mov	r9,	r13	
    538e:	bb 3c       	jmp	$+376    	;abs 0x5506
    5390:	1f 43       	mov	#1,	r15	;r3 As==01
    5392:	eb 3f       	jmp	$-40     	;abs 0x536a
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5394:	0f 43       	clr	r15		
    5396:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5398:	ae 24       	jz	$+350    	;abs 0x54f6
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    539a:	0f 93       	tst	r15		
    539c:	02 24       	jz	$+6      	;abs 0x53a2
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    539e:	0d 4a       	mov	r10,	r13	
    53a0:	b2 3c       	jmp	$+358    	;abs 0x5506
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
    53a2:	15 4b 02 00 	mov	2(r11),	r5	;0x0002(r11)
        channel_num++;
    53a6:	16 4a 02 00 	mov	2(r10),	r6	;0x0002(r10)
    }
    53aa:	1c 4b 04 00 	mov	4(r11),	r12	;0x0004(r11)
    53ae:	1d 4b 06 00 	mov	6(r11),	r13	;0x0006(r11)
}
    53b2:	17 4a 04 00 	mov	4(r10),	r7	;0x0004(r10)
    53b6:	18 4a 06 00 	mov	6(r10),	r8	;0x0006(r10)

void calibrate_radio(void){
    53ba:	0f 45       	mov	r5,	r15	
    53bc:	0f 86       	sub	r6,	r15	
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    53be:	98 30       	jn	$+306    	;abs 0x54f0
        return;
    }
    53c0:	3f 90 20 00 	cmp	#32,	r15	;#0x0020
    53c4:	8c 34       	jge	$+282    	;abs 0x54de

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    53c6:	06 95       	cmp	r5,	r6	
    53c8:	10 34       	jge	$+34     	;abs 0x53ea
    53ca:	0f 45       	mov	r5,	r15	
    53cc:	0f 86       	sub	r6,	r15	
    53ce:	06 4f       	mov	r15,	r6	
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    53d0:	36 53       	add	#-1,	r6	;r3 As==11
    
    53d2:	0e 47       	mov	r7,	r14	
    53d4:	0f 48       	mov	r8,	r15	
    53d6:	1e f3       	and	#1,	r14	;r3 As==01
    53d8:	0f f3       	and	#0,	r15	;r3 As==00
    53da:	12 c3       	clrc			
    53dc:	08 10       	rrc	r8		
    53de:	07 10       	rrc	r7		
    53e0:	07 de       	bis	r14,	r7	
    53e2:	08 df       	bis	r15,	r8	
    53e4:	06 93       	tst	r6		
    53e6:	f4 23       	jnz	$-22     	;abs 0x53d0
    53e8:	06 45       	mov	r5,	r6	
    lcd_goto(2,5);
    color_fore = RED;
    53ea:	05 96       	cmp	r6,	r5	
    53ec:	0c 34       	jge	$+26     	;abs 0x5406
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    53ee:	15 53       	inc	r5		
    delayms(3000);
    53f0:	0e 4c       	mov	r12,	r14	
    53f2:	0f 4d       	mov	r13,	r15	
    53f4:	1e f3       	and	#1,	r14	;r3 As==01
    53f6:	0f f3       	and	#0,	r15	;r3 As==00
    53f8:	12 c3       	clrc			
    53fa:	0d 10       	rrc	r13		
    53fc:	0c 10       	rrc	r12		
    53fe:	0c de       	bis	r14,	r12	
    5400:	0d df       	bis	r15,	r13	
    5402:	05 96       	cmp	r6,	r5	
    5404:	f4 3b       	jl	$-22     	;abs 0x53ee
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    5406:	5f 4b 01 00 	mov.b	1(r11),	r15	;0x0001(r11)
    540a:	5f 9a 01 00 	cmp.b	1(r10),	r15	;0x0001(r10)
    540e:	59 24       	jz	$+180    	;abs 0x54c2
                PPMMax[i] = PPMValue[i];
            }
    5410:	4f 93       	tst.b	r15		
    5412:	52 24       	jz	$+166    	;abs 0x54b8
            if(PPMMin[i] > PPMValue[i]){
                PPMMin[i] = PPMValue[i];
    5414:	0e 47       	mov	r7,	r14	
    5416:	0f 48       	mov	r8,	r15	
    5418:	0e 8c       	sub	r12,	r14	
    541a:	0f 7d       	subc	r13,	r15	
            }
        }
    }
    
    lcd_clear(BLACK);
    
    541c:	0f 93       	tst	r15		
    541e:	43 38       	jl	$+136    	;abs 0x54a6
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
    5420:	c9 43 01 00 	mov.b	#0,	1(r9)	;r3 As==00, 0x0001(r9)
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    5424:	89 45 02 00 	mov	r5,	2(r9)	;0x0002(r9)
    5428:	89 4e 04 00 	mov	r14,	4(r9)	;0x0004(r9)
    542c:	89 4f 06 00 	mov	r15,	6(r9)	;0x0006(r9)
        
        // grava yaw slope 
        ValorAux.f = PPMSlope[YAW_CH];
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        
        delayms(100);
    5430:	1b 49 04 00 	mov	4(r9),	r11	;0x0004(r9)
    5434:	1c 49 06 00 	mov	6(r9),	r12	;0x0006(r9)
    5438:	0e 4b       	mov	r11,	r14	
    543a:	0f 4c       	mov	r12,	r15	
    543c:	3e 53       	add	#-1,	r14	;r3 As==11
    543e:	3f 63       	addc	#-1,	r15	;r3 As==11
    5440:	3e 83       	sub	#-1,	r14	;r3 As==11
    5442:	3f 70 ff 3f 	subc	#16383,	r15	;#0x3fff
    5446:	19 2c       	jc	$+52     	;abs 0x547a
        
        // grava throttle slope 
    5448:	0e 4b       	mov	r11,	r14	
    544a:	0f 4c       	mov	r12,	r15	
    544c:	0e 5e       	rla	r14		
    544e:	0f 6f       	rlc	r15		
    5450:	89 4e 04 00 	mov	r14,	4(r9)	;0x0004(r9)
    5454:	89 4f 06 00 	mov	r15,	6(r9)	;0x0006(r9)
        ValorAux.f = PPMSlope[THROTTLE_CH];
    5458:	b9 53 02 00 	add	#-1,	2(r9)	;r3 As==11, 0x0002(r9)
    545c:	0c 4e       	mov	r14,	r12	
    545e:	0d 4f       	mov	r15,	r13	
    5460:	3c 53       	add	#-1,	r12	;r3 As==11
    5462:	3d 63       	addc	#-1,	r13	;r3 As==11
    5464:	3c 83       	sub	#-1,	r12	;r3 As==11
    5466:	3d 70 ff 3f 	subc	#16383,	r13	;#0x3fff
    546a:	05 2c       	jc	$+12     	;abs 0x5476
    546c:	1b 49 04 00 	mov	4(r9),	r11	;0x0004(r9)
    5470:	1c 49 06 00 	mov	6(r9),	r12	;0x0006(r9)
    5474:	e9 3f       	jmp	$-44     	;abs 0x5448
    5476:	0b 4e       	mov	r14,	r11	
    5478:	0c 4f       	mov	r15,	r12	
        
        // grava pitch slope 
        ValorAux.f = PPMSlope[PITCH_CH];
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
        
        delayms(100);
    547a:	f9 40 03 00 	mov.b	#3,	0(r9)	;#0x0003, 0x0000(r9)
    547e:	00 00 
        
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    5480:	3c 90 00 80 	cmp	#-32768,r12	;#0x8000
    5484:	83 2b       	jnc	$-248    	;abs 0x538c
        
        delayms(100);
    5486:	0e 4b       	mov	r11,	r14	
    5488:	0f 4c       	mov	r12,	r15	
    548a:	12 c3       	clrc			
    548c:	0f 10       	rrc	r15		
    548e:	0e 10       	rrc	r14		
    5490:	1b f3       	and	#1,	r11	;r3 As==01
    5492:	0c f3       	and	#0,	r12	;r3 As==00
    5494:	0b de       	bis	r14,	r11	
    5496:	0c df       	bis	r15,	r12	
    5498:	89 4b 04 00 	mov	r11,	4(r9)	;0x0004(r9)
    549c:	89 4c 06 00 	mov	r12,	6(r9)	;0x0006(r9)
        
    54a0:	99 53 02 00 	inc	2(r9)		;0x0002(r9)
    54a4:	73 3f       	jmp	$-280    	;abs 0x538c
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
        i2c_change_address(EEPROM_I2C_ADDR);
    54a6:	d9 43 01 00 	mov.b	#1,	1(r9)	;r3 As==01, 0x0001(r9)
        
    54aa:	89 45 02 00 	mov	r5,	2(r9)	;0x0002(r9)
        // grava yaw slope 
    54ae:	3e e3       	inv	r14		
    54b0:	3f e3       	inv	r15		
    54b2:	1e 53       	inc	r14		
    54b4:	0f 63       	adc	r15		
    54b6:	b8 3f       	jmp	$-142    	;abs 0x5428
            if(PPMMin[i] > PPMValue[i]){
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    54b8:	0e 4c       	mov	r12,	r14	
    54ba:	0f 4d       	mov	r13,	r15	
    54bc:	0e 87       	sub	r7,	r14	
    54be:	0f 78       	subc	r8,	r15	
    54c0:	ad 3f       	jmp	$-164    	;abs 0x541c
        ValorAux.f = PPMSlope[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
        // grava pitch slope 
    54c2:	d9 4b 01 00 	mov.b	1(r11),	1(r9)	;0x0001(r11), 0x0001(r9)
    54c6:	01 00 
        ValorAux.f = PPMSlope[PITCH_CH];
    54c8:	89 45 02 00 	mov	r5,	2(r9)	;0x0002(r9)
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    54cc:	0e 4c       	mov	r12,	r14	
    54ce:	0f 4d       	mov	r13,	r15	
    54d0:	0e 57       	add	r7,	r14	
    54d2:	0f 68       	addc	r8,	r15	
    54d4:	89 4e 04 00 	mov	r14,	4(r9)	;0x0004(r9)
    54d8:	89 4f 06 00 	mov	r15,	6(r9)	;0x0006(r9)
    54dc:	cc 3f       	jmp	$-102    	;abs 0x5476
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }
    54de:	06 95       	cmp	r5,	r6	
    54e0:	03 34       	jge	$+8      	;abs 0x54e8

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
    54e2:	07 43       	clr	r7		
    54e4:	08 43       	clr	r8		
    54e6:	8f 3f       	jmp	$-224    	;abs 0x5406
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    54e8:	05 46       	mov	r6,	r5	
        draw_rc_inputs(1);
    54ea:	0c 43       	clr	r12		
    54ec:	0d 43       	clr	r13		
    54ee:	8b 3f       	jmp	$-232    	;abs 0x5406
}

void calibrate_radio(void){
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    54f0:	3f e3       	inv	r15		
    54f2:	1f 53       	inc	r15		
    54f4:	65 3f       	jmp	$-308    	;abs 0x53c0
    54f6:	1f 43       	mov	#1,	r15	;r3 As==01
    54f8:	50 3f       	jmp	$-350    	;abs 0x539a
    54fa:	1d 43       	mov	#1,	r13	;r3 As==01
    54fc:	31 3f       	jmp	$-412    	;abs 0x5360
    54fe:	1d 43       	mov	#1,	r13	;r3 As==01
    5500:	2a 3f       	jmp	$-426    	;abs 0x5356
    5502:	1c 43       	mov	#1,	r12	;r3 As==01
    5504:	13 3f       	jmp	$-472    	;abs 0x532c
        delayms(100);
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
        
    5506:	0f 4d       	mov	r13,	r15	
    5508:	35 41       	pop	r5		
    550a:	36 41       	pop	r6		
    550c:	37 41       	pop	r7		
    550e:	38 41       	pop	r8		
    5510:	39 41       	pop	r9		
    5512:	3a 41       	pop	r10		
    5514:	3b 41       	pop	r11		
    5516:	30 41       	ret			

00005518 <__addsf3>:
        delayms(100);
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    5518:	0b 12       	push	r11		
    551a:	31 80 20 00 	sub	#32,	r1	;#0x0020
        
        delayms(100);
        
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    551e:	81 4e 18 00 	mov	r14,	24(r1)	;0x0018(r1)
    5522:	81 4f 1a 00 	mov	r15,	26(r1)	;0x001a(r1)
        
    5526:	81 4c 1c 00 	mov	r12,	28(r1)	;0x001c(r1)
    552a:	81 4d 1e 00 	mov	r13,	30(r1)	;0x001e(r1)
        delayms(100);
        
    552e:	0e 41       	mov	r1,	r14	
    5530:	0f 41       	mov	r1,	r15	
    5532:	3f 50 18 00 	add	#24,	r15	;#0x0018
    5536:	b0 12 9c 5d 	call	#0x5d9c	
        // grava yaw offset 
    553a:	0b 41       	mov	r1,	r11	
    553c:	3b 52       	add	#8,	r11	;r2 As==11
    553e:	0e 4b       	mov	r11,	r14	
    5540:	0f 41       	mov	r1,	r15	
    5542:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    5546:	b0 12 9c 5d 	call	#0x5d9c	
        ValorAux.f = PPMOffset[YAW_CH];
        i2c_write16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    554a:	0d 41       	mov	r1,	r13	
    554c:	3d 50 10 00 	add	#16,	r13	;#0x0010
    5550:	0e 4b       	mov	r11,	r14	
    5552:	0f 41       	mov	r1,	r15	
    5554:	b0 12 f6 52 	call	#0x52f6	
        
        delayms(100);
    5558:	b0 12 ec 5b 	call	#0x5bec	
        
    555c:	31 50 20 00 	add	#32,	r1	;#0x0020
    5560:	3b 41       	pop	r11		
    5562:	30 41       	ret			

00005564 <__subsf3>:
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
        
    5564:	0b 12       	push	r11		
    5566:	31 80 20 00 	sub	#32,	r1	;#0x0020
        
        // grava pitch offset 
        ValorAux.f = PPMOffset[PITCH_CH];
        i2c_write16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
        
        delayms(100);
    556a:	81 4e 18 00 	mov	r14,	24(r1)	;0x0018(r1)
    556e:	81 4f 1a 00 	mov	r15,	26(r1)	;0x001a(r1)
        
    5572:	81 4c 1c 00 	mov	r12,	28(r1)	;0x001c(r1)
    5576:	81 4d 1e 00 	mov	r13,	30(r1)	;0x001e(r1)
        // grava roll offset 
        ValorAux.f = PPMOffset[ROLL_CH];
    557a:	0e 41       	mov	r1,	r14	
    557c:	0f 41       	mov	r1,	r15	
    557e:	3f 50 18 00 	add	#24,	r15	;#0x0018
    5582:	b0 12 9c 5d 	call	#0x5d9c	
        i2c_write16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    5586:	0b 41       	mov	r1,	r11	
    5588:	3b 52       	add	#8,	r11	;r2 As==11
    558a:	0e 4b       	mov	r11,	r14	
    558c:	0f 41       	mov	r1,	r15	
    558e:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    5592:	b0 12 9c 5d 	call	#0x5d9c	
        
        delayms(100);
    5596:	d1 e3 09 00 	xor.b	#1,	9(r1)	;r3 As==01, 0x0009(r1)
        
        // grava ch5 offset 
    559a:	0d 41       	mov	r1,	r13	
    559c:	3d 50 10 00 	add	#16,	r13	;#0x0010
    55a0:	0e 4b       	mov	r11,	r14	
    55a2:	0f 41       	mov	r1,	r15	
    55a4:	b0 12 f6 52 	call	#0x52f6	
        ValorAux.f = PPMOffset[CH5_CH];
        i2c_write16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    55a8:	b0 12 ec 5b 	call	#0x5bec	
        
    55ac:	31 50 20 00 	add	#32,	r1	;#0x0020
    55b0:	3b 41       	pop	r11		
    55b2:	30 41       	ret			

000055b4 <__mulsf3>:
            delayms(4000);
            calibrate_radio();
            StatusFlags[0] = 0;
            StatusFlags[1] = 0;
            StatusFlags[2] = 0;
            i2c_write16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    55b4:	0b 12       	push	r11		
    55b6:	31 80 20 00 	sub	#32,	r1	;#0x0020
        else{
            load_transmitter_values();
            printf("RC params loaded\n");
            //carregar os outros parametros
        }
    }
    55ba:	81 4e 18 00 	mov	r14,	24(r1)	;0x0018(r1)
    55be:	81 4f 1a 00 	mov	r15,	26(r1)	;0x001a(r1)
    else{
    55c2:	81 4c 1c 00 	mov	r12,	28(r1)	;0x001c(r1)
    55c6:	81 4d 1e 00 	mov	r13,	30(r1)	;0x001e(r1)
        color_fore = RED;
        printf("EEPROM not found\n");
    55ca:	0e 41       	mov	r1,	r14	
    55cc:	0f 41       	mov	r1,	r15	
    55ce:	3f 50 18 00 	add	#24,	r15	;#0x0018
    55d2:	b0 12 9c 5d 	call	#0x5d9c	
        color_fore = LIME;
    55d6:	0b 41       	mov	r1,	r11	
    55d8:	3b 52       	add	#8,	r11	;r2 As==11
    55da:	0e 4b       	mov	r11,	r14	
    55dc:	0f 41       	mov	r1,	r15	
    55de:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    55e2:	b0 12 9c 5d 	call	#0x5d9c	
    }
    
    55e6:	0d 41       	mov	r1,	r13	
    55e8:	3d 50 10 00 	add	#16,	r13	;#0x0010
    55ec:	0e 4b       	mov	r11,	r14	
    55ee:	0f 41       	mov	r1,	r15	
    55f0:	b0 12 00 56 	call	#0x5600	
    delayms(5000);
    
    55f4:	b0 12 ec 5b 	call	#0x5bec	
    SetupDone = 1;
    55f8:	31 50 20 00 	add	#32,	r1	;#0x0020
    55fc:	3b 41       	pop	r11		
    55fe:	30 41       	ret			

00005600 <_fpmul_parts>:
        // grava ch6 offset 
        ValorAux.f = PPMOffset[CH6_CH];
        i2c_write16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
        
        delayms(100);
        
    5600:	0b 12       	push	r11		
    5602:	0a 12       	push	r10		
    5604:	09 12       	push	r9		
    5606:	08 12       	push	r8		
    5608:	07 12       	push	r7		
    560a:	06 12       	push	r6		
    560c:	05 12       	push	r5		
    560e:	04 12       	push	r4		
    5610:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    5614:	09 4f       	mov	r15,	r9	
    5616:	06 4e       	mov	r14,	r6	
    5618:	81 4d 00 00 	mov	r13,	0(r1)	;0x0000(r1)
        // grava ch7 offset 
    561c:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    5620:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00, 0x0004(r1)
        ValorAux.f = PPMOffset[CH7_CH];
    5624:	04 43       	clr	r4		
    5626:	05 43       	clr	r5		
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5628:	0f 43       	clr	r15		
    562a:	6e 49       	mov.b	@r9,	r14	
    562c:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    562e:	01 2c       	jc	$+4      	;abs 0x5632
    5630:	1f 43       	mov	#1,	r15	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5632:	0f 93       	tst	r15		
    5634:	11 20       	jnz	$+36     	;abs 0x5658
                MenuStep = SELECT;
    5636:	0c 43       	clr	r12		
    5638:	6f 46       	mov.b	@r6,	r15	
    563a:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    563c:	01 2c       	jc	$+4      	;abs 0x5640
    563e:	1c 43       	mov	#1,	r12	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5640:	0c 93       	tst	r12		
    5642:	23 20       	jnz	$+72     	;abs 0x568a
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5644:	0c 43       	clr	r12		
    5646:	6e 92       	cmp.b	#4,	r14	;r2 As==10
    5648:	dc 24       	jz	$+442    	;abs 0x5802
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    564a:	0c 93       	tst	r12		
    564c:	14 24       	jz	$+42     	;abs 0x5676
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    564e:	0e 43       	clr	r14		
    5650:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    5652:	0f 24       	jz	$+32     	;abs 0x5672
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5654:	0e 93       	tst	r14		
    5656:	0a 20       	jnz	$+22     	;abs 0x566c
        i2c_change_address(EEPROM_I2C_ADDR);    

        // load yaw slope e offset
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        PPMSlope[YAW_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    5658:	4f 43       	clr.b	r15		
    565a:	d9 96 01 00 	cmp.b	1(r6),	1(r9)	;0x0001(r6), 0x0001(r9)
    565e:	01 00 
    5660:	01 24       	jz	$+4      	;abs 0x5664
    5662:	5f 43       	mov.b	#1,	r15	;r3 As==01
    5664:	c9 4f 01 00 	mov.b	r15,	1(r9)	;0x0001(r9)
        PPMOffset[YAW_CH] = ValorAux.f;
    5668:	0d 49       	mov	r9,	r13	
    566a:	cd 3c       	jmp	$+412    	;abs 0x5806
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
    566c:	3d 40 e4 5b 	mov	#23524,	r13	;#0x5be4
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
    5670:	ca 3c       	jmp	$+406    	;abs 0x5806
    5672:	1e 43       	mov	#1,	r14	;r3 As==01
    5674:	ef 3f       	jmp	$-32     	;abs 0x5654
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5676:	0d 43       	clr	r13		
    5678:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    567a:	c1 24       	jz	$+388    	;abs 0x57fe
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    567c:	0d 93       	tst	r13		
    567e:	11 24       	jz	$+36     	;abs 0x56a2
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5680:	0f 43       	clr	r15		
    5682:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5684:	0c 24       	jz	$+26     	;abs 0x569e
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5686:	0f 93       	tst	r15		
    5688:	f1 23       	jnz	$-28     	;abs 0x566c
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
        PPMOffset[YAW_CH] = ValorAux.f;
        
        // load throttle slope  e offset
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    568a:	4f 43       	clr.b	r15		
    568c:	d9 96 01 00 	cmp.b	1(r6),	1(r9)	;0x0001(r6), 0x0001(r9)
    5690:	01 00 
    5692:	01 24       	jz	$+4      	;abs 0x5696
    5694:	5f 43       	mov.b	#1,	r15	;r3 As==01
    5696:	c6 4f 01 00 	mov.b	r15,	1(r6)	;0x0001(r6)
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    569a:	0d 46       	mov	r6,	r13	
    569c:	b4 3c       	jmp	$+362    	;abs 0x5806
    569e:	1f 43       	mov	#1,	r15	;r3 As==01
    56a0:	f2 3f       	jmp	$-26     	;abs 0x5686
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    56a2:	0d 43       	clr	r13		
    56a4:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    56a6:	a9 24       	jz	$+340    	;abs 0x57fa
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    56a8:	0d 93       	tst	r13		
    56aa:	d6 23       	jnz	$-82     	;abs 0x5658
            lcd_goto(0,14);
    56ac:	0e 43       	clr	r14		
    56ae:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    56b0:	a2 24       	jz	$+326    	;abs 0x57f6
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    56b2:	0e 93       	tst	r14		
    56b4:	ea 23       	jnz	$-42     	;abs 0x568a
        // load pitch slope  e offset
        i2c_read16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
        PPMSlope[PITCH_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
        PPMOffset[PITCH_CH] = ValorAux.f;
        
    56b6:	1a 49 04 00 	mov	4(r9),	r10	;0x0004(r9)
    56ba:	1b 49 06 00 	mov	6(r9),	r11	;0x0006(r9)
        // load roll slope  e offset
    56be:	1c 46 04 00 	mov	4(r6),	r12	;0x0004(r6)
    56c2:	1d 46 06 00 	mov	6(r6),	r13	;0x0006(r6)
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    56c6:	07 43       	clr	r7		
    56c8:	08 43       	clr	r8		
        PPMSlope[ROLL_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
        PPMOffset[ROLL_CH] = ValorAux.f;
    
    56ca:	b1 40 1f 00 	mov	#31,	6(r1)	;#0x001f, 0x0006(r1)
    56ce:	06 00 
        // load ch5 slope  e offset
        i2c_read16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
        PPMSlope[CH5_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    56d0:	0e 4a       	mov	r10,	r14	
    56d2:	0f 4b       	mov	r11,	r15	
    56d4:	1e f3       	and	#1,	r14	;r3 As==01
    56d6:	0f f3       	and	#0,	r15	;r3 As==00
    56d8:	0e 93       	tst	r14		
    56da:	19 24       	jz	$+52     	;abs 0x570e
        PPMOffset[CH5_CH] = ValorAux.f;
    
    56dc:	81 43 08 00 	mov	#0,	8(r1)	;r3 As==00, 0x0008(r1)
    56e0:	81 5c 02 00 	add	r12,	2(r1)	;0x0002(r1)
    56e4:	81 6d 04 00 	addc	r13,	4(r1)	;0x0004(r1)
    56e8:	1e 41 02 00 	mov	2(r1),	r14	;0x0002(r1)
    56ec:	1f 41 04 00 	mov	4(r1),	r15	;0x0004(r1)
    56f0:	0e 8c       	sub	r12,	r14	
    56f2:	0f 7d       	subc	r13,	r15	
    56f4:	02 2c       	jc	$+6      	;abs 0x56fa
    56f6:	91 43 08 00 	mov	#1,	8(r1)	;r3 As==01, 0x0008(r1)
        // load ch6 slope  e offset
    56fa:	1e 41 08 00 	mov	8(r1),	r14	;0x0008(r1)
    56fe:	0f 4e       	mov	r14,	r15	
    5700:	0f 5f       	rla	r15		
    5702:	0f 7f       	subc	r15,	r15	
    5704:	3f e3       	inv	r15		
    5706:	0e 57       	add	r7,	r14	
    5708:	0f 68       	addc	r8,	r15	
    570a:	04 5e       	add	r14,	r4	
    570c:	05 6f       	addc	r15,	r5	
        i2c_read16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
        PPMSlope[CH6_CH] = ValorAux.f;
    570e:	07 57       	rla	r7		
    5710:	08 68       	rlc	r8		
        i2c_read16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    5712:	3d b0 00 80 	bit	#-32768,r13	;#0x8000
    5716:	01 24       	jz	$+4      	;abs 0x571a
        PPMOffset[CH6_CH] = ValorAux.f;
        
    5718:	17 d3       	bis	#1,	r7	;r3 As==01
        // load ch7 slope  e offset
        i2c_read16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    571a:	0c 5c       	rla	r12		
    571c:	0d 6d       	rlc	r13		
        PPMSlope[CH7_CH] = ValorAux.f;
    571e:	12 c3       	clrc			
    5720:	0b 10       	rrc	r11		
    5722:	0a 10       	rrc	r10		
        // load roll slope  e offset
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
        PPMSlope[ROLL_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
        PPMOffset[ROLL_CH] = ValorAux.f;
    
    5724:	b1 53 06 00 	add	#-1,	6(r1)	;r3 As==11, 0x0006(r1)
    5728:	b1 b0 00 80 	bit	#-32768,6(r1)	;#0x8000, 0x0006(r1)
    572c:	06 00 
    572e:	d0 37       	jge	$-94     	;abs 0x56d0
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
                    h = 0;
                }
    5730:	1f 49 02 00 	mov	2(r9),	r15	;0x0002(r9)
    5734:	1f 56 02 00 	add	2(r6),	r15	;0x0002(r6)
    5738:	2d 41       	mov	@r1,	r13	
    573a:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
                else{
    573e:	4e 43       	clr.b	r14		
    5740:	d9 96 01 00 	cmp.b	1(r6),	1(r9)	;0x0001(r6), 0x0001(r9)
    5744:	01 00 
    5746:	01 24       	jz	$+4      	;abs 0x574a
    5748:	5e 43       	mov.b	#1,	r14	;r3 As==01
    574a:	2d 41       	mov	@r1,	r13	
    574c:	cd 4e 01 00 	mov.b	r14,	1(r13)	;0x0001(r13)
                    h = ((PPMValue[i] - 2000) * 10) / 200;
                }
    5750:	2f 53       	incd	r15		
    5752:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
    5756:	35 90 00 80 	cmp	#-32768,r5	;#0x8000
    575a:	17 28       	jnc	$+48     	;abs 0x578a
}

    575c:	2e 41       	mov	@r1,	r14	
    575e:	9e 53 02 00 	inc	2(r14)		;0x0002(r14)
int find_first(int startaddress){
    5762:	0e 44       	mov	r4,	r14	
    5764:	0f 45       	mov	r5,	r15	
    5766:	1e f3       	and	#1,	r14	;r3 As==01
    5768:	0f f3       	and	#0,	r15	;r3 As==00
    576a:	0e 93       	tst	r14		
    576c:	08 24       	jz	$+18     	;abs 0x577e
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
    576e:	12 c3       	clrc			
    5770:	11 10 04 00 	rrc	4(r1)		;0x0004(r1)
    5774:	11 10 02 00 	rrc	2(r1)		;0x0002(r1)
        if(!i2c_find_device()){
    5778:	b1 d0 00 80 	bis	#-32768,4(r1)	;#0x8000, 0x0004(r1)
    577c:	04 00 
            return startaddress;
        }
    577e:	12 c3       	clrc			
    5780:	05 10       	rrc	r5		
    5782:	04 10       	rrc	r4		
    5784:	35 90 00 80 	cmp	#-32768,r5	;#0x8000
    5788:	e9 2f       	jc	$-44     	;abs 0x575c
    }   
    return 0;
    578a:	35 90 00 40 	cmp	#16384,	r5	;#0x4000
    578e:	13 2c       	jc	$+40     	;abs 0x57b6
}

    5790:	2f 41       	mov	@r1,	r15	
    5792:	bf 53 02 00 	add	#-1,	2(r15)	;r3 As==11, 0x0002(r15)

// loop de controle
    5796:	04 54       	rla	r4		
    5798:	05 65       	rlc	r5		
void main_loop(){
    579a:	b1 b0 00 80 	bit	#-32768,4(r1)	;#0x8000, 0x0004(r1)
    579e:	04 00 
    57a0:	01 24       	jz	$+4      	;abs 0x57a4
    
    57a2:	14 d3       	bis	#1,	r4	;r3 As==01
    
    57a4:	91 51 02 00 	rla	2(r1)		;0x0002(r1)
    57a8:	02 00 
    57aa:	91 61 04 00 	rlc	4(r1)		;0x0004(r1)
    57ae:	04 00 
    57b0:	35 90 00 40 	cmp	#16384,	r5	;#0x4000
    57b4:	ed 2b       	jnc	$-36     	;abs 0x5790
    
    i2c_init();
    
    eint();
    
    lcd_init(BLACK);
    57b6:	0e 44       	mov	r4,	r14	
    57b8:	0f 45       	mov	r5,	r15	
    57ba:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    57be:	0f f3       	and	#0,	r15	;r3 As==00
    57c0:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    57c4:	02 20       	jnz	$+6      	;abs 0x57ca
    57c6:	0f 93       	tst	r15		
    57c8:	0a 24       	jz	$+22     	;abs 0x57de
        printf("EEPROM found\n");
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);

        //if(1){
        if(StatusFlags[0] != 0){
    57ca:	2d 41       	mov	@r1,	r13	
    57cc:	8d 44 04 00 	mov	r4,	4(r13)	;0x0004(r13)
    57d0:	8d 45 06 00 	mov	r5,	6(r13)	;0x0006(r13)
            printf("Calibrando radio...\n");
    57d4:	fd 40 03 00 	mov.b	#3,	0(r13)	;#0x0003, 0x0000(r13)
    57d8:	00 00 
            delayms(4000);
    57da:	2d 41       	mov	@r1,	r13	
    57dc:	14 3c       	jmp	$+42     	;abs 0x5806
    
    eint();
    
    lcd_init(BLACK);
    
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));
    57de:	44 93       	tst.b	r4		
    57e0:	06 38       	jl	$+14     	;abs 0x57ee

    i2c_config(EEPROM_I2C_ADDR);
    EEPROMFound = !(i2c_find_device());
    
    if(EEPROMFound){
    57e2:	81 93 02 00 	tst	2(r1)		;0x0002(r1)
    57e6:	03 20       	jnz	$+8      	;abs 0x57ee
    57e8:	81 93 04 00 	tst	4(r1)		;0x0004(r1)
    57ec:	ee 27       	jz	$-34     	;abs 0x57ca
        printf("EEPROM found\n");
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);
    57ee:	34 50 40 00 	add	#64,	r4	;#0x0040
    57f2:	05 63       	adc	r5		
    57f4:	ea 3f       	jmp	$-42     	;abs 0x57ca
    57f6:	1e 43       	mov	#1,	r14	;r3 As==01
    57f8:	5c 3f       	jmp	$-326    	;abs 0x56b2
    57fa:	1d 43       	mov	#1,	r13	;r3 As==01
    57fc:	55 3f       	jmp	$-340    	;abs 0x56a8
    57fe:	1d 43       	mov	#1,	r13	;r3 As==01
    5800:	3d 3f       	jmp	$-388    	;abs 0x567c
    5802:	1c 43       	mov	#1,	r12	;r3 As==01
    5804:	22 3f       	jmp	$-442    	;abs 0x564a

        //if(1){
        if(StatusFlags[0] != 0){
            printf("Calibrando radio...\n");
            delayms(4000);
            calibrate_radio();
    5806:	0f 4d       	mov	r13,	r15	
    5808:	31 50 0a 00 	add	#10,	r1	;#0x000a
    580c:	34 41       	pop	r4		
    580e:	35 41       	pop	r5		
    5810:	36 41       	pop	r6		
    5812:	37 41       	pop	r7		
    5814:	38 41       	pop	r8		
    5816:	39 41       	pop	r9		
    5818:	3a 41       	pop	r10		
    581a:	3b 41       	pop	r11		
    581c:	30 41       	ret			

0000581e <__divsf3>:
    581e:	0b 12       	push	r11		
    5820:	31 80 18 00 	sub	#24,	r1	;#0x0018
    5824:	81 4e 10 00 	mov	r14,	16(r1)	;0x0010(r1)
    5828:	81 4f 12 00 	mov	r15,	18(r1)	;0x0012(r1)
    582c:	81 4c 14 00 	mov	r12,	20(r1)	;0x0014(r1)
    5830:	81 4d 16 00 	mov	r13,	22(r1)	;0x0016(r1)
    5834:	0e 41       	mov	r1,	r14	
    5836:	0f 41       	mov	r1,	r15	
    5838:	3f 50 10 00 	add	#16,	r15	;#0x0010
    583c:	b0 12 9c 5d 	call	#0x5d9c	
    5840:	0b 41       	mov	r1,	r11	
    5842:	3b 52       	add	#8,	r11	;r2 As==11
    5844:	0e 4b       	mov	r11,	r14	
    5846:	0f 41       	mov	r1,	r15	
    5848:	3f 50 14 00 	add	#20,	r15	;#0x0014
    584c:	b0 12 9c 5d 	call	#0x5d9c	
    5850:	0e 4b       	mov	r11,	r14	
    5852:	0f 41       	mov	r1,	r15	
    5854:	b0 12 64 58 	call	#0x5864	
    5858:	b0 12 ec 5b 	call	#0x5bec	
    585c:	31 50 18 00 	add	#24,	r1	;#0x0018
    5860:	3b 41       	pop	r11		
    5862:	30 41       	ret			

00005864 <_fpdiv_parts>:

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
        for(k = 0; k < 100; k++){
            AnalogGraph[i][k] = 0;
    5864:	0b 12       	push	r11		
    5866:	0a 12       	push	r10		
    5868:	09 12       	push	r9		
    586a:	08 12       	push	r8		
    586c:	07 12       	push	r7		
    586e:	06 12       	push	r6		
    5870:	05 12       	push	r5		
    5872:	0b 4f       	mov	r15,	r11	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5874:	0c 43       	clr	r12		
    5876:	6d 4f       	mov.b	@r15,	r13	
    5878:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    587a:	01 2c       	jc	$+4      	;abs 0x587e
    587c:	1c 43       	mov	#1,	r12	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    587e:	0c 93       	tst	r12		
    5880:	16 20       	jnz	$+46     	;abs 0x58ae
                MenuStep = SELECT;
    5882:	0a 43       	clr	r10		
    5884:	6c 4e       	mov.b	@r14,	r12	
    5886:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    5888:	01 2c       	jc	$+4      	;abs 0x588c
    588a:	1a 43       	mov	#1,	r10	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    588c:	0a 93       	tst	r10		
    588e:	77 20       	jnz	$+240    	;abs 0x597e
    5890:	db ee 01 00 	xor.b	1(r14),	1(r11)	;0x0001(r14), 0x0001(r11)
    5894:	01 00 
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5896:	0f 43       	clr	r15		
    5898:	6d 92       	cmp.b	#4,	r13	;r2 As==10
    589a:	6f 24       	jz	$+224    	;abs 0x597a
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    589c:	0f 93       	tst	r15		
    589e:	05 20       	jnz	$+12     	;abs 0x58aa
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    58a0:	0f 43       	clr	r15		
    58a2:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    58a4:	68 24       	jz	$+210    	;abs 0x5976
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    58a6:	0f 93       	tst	r15		
    58a8:	07 24       	jz	$+16     	;abs 0x58b8
    58aa:	4d 9c       	cmp.b	r12,	r13	
    58ac:	02 24       	jz	$+6      	;abs 0x58b2
    58ae:	0e 4b       	mov	r11,	r14	
    58b0:	66 3c       	jmp	$+206    	;abs 0x597e
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
    58b2:	3e 40 e4 5b 	mov	#23524,	r14	;#0x5be4
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
    58b6:	63 3c       	jmp	$+200    	;abs 0x597e
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    58b8:	0f 43       	clr	r15		
    58ba:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    58bc:	5a 24       	jz	$+182    	;abs 0x5972
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    58be:	0f 93       	tst	r15		
    58c0:	07 24       	jz	$+16     	;abs 0x58d0
    58c2:	8b 43 04 00 	mov	#0,	4(r11)	;r3 As==00, 0x0004(r11)
    58c6:	8b 43 06 00 	mov	#0,	6(r11)	;r3 As==00, 0x0006(r11)
    58ca:	8b 43 02 00 	mov	#0,	2(r11)	;r3 As==00, 0x0002(r11)
    58ce:	ef 3f       	jmp	$-32     	;abs 0x58ae
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    58d0:	0f 43       	clr	r15		
    58d2:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    58d4:	4c 24       	jz	$+154    	;abs 0x596e
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    58d6:	0f 93       	tst	r15		
    58d8:	03 24       	jz	$+8      	;abs 0x58e0
    58da:	eb 42 00 00 	mov.b	#4,	0(r11)	;r2 As==10, 0x0000(r11)
    58de:	e7 3f       	jmp	$-48     	;abs 0x58ae
    58e0:	1d 4b 02 00 	mov	2(r11),	r13	;0x0002(r11)
    58e4:	1d 8e 02 00 	sub	2(r14),	r13	;0x0002(r14)
    58e8:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    58ec:	19 4b 04 00 	mov	4(r11),	r9	;0x0004(r11)
    58f0:	1a 4b 06 00 	mov	6(r11),	r10	;0x0006(r11)
    58f4:	17 4e 04 00 	mov	4(r14),	r7	;0x0004(r14)
    58f8:	18 4e 06 00 	mov	6(r14),	r8	;0x0006(r14)
    58fc:	0e 49       	mov	r9,	r14	
    58fe:	0f 4a       	mov	r10,	r15	
    5900:	0e 87       	sub	r7,	r14	
    5902:	0f 78       	subc	r8,	r15	
    5904:	05 2c       	jc	$+12     	;abs 0x5910
    5906:	09 59       	rla	r9		
    5908:	0a 6a       	rlc	r10		
    590a:	3d 53       	add	#-1,	r13	;r3 As==11
    590c:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    5910:	0e 43       	clr	r14		
    5912:	3f 40 00 40 	mov	#16384,	r15	;#0x4000
    5916:	05 43       	clr	r5		
    5918:	06 43       	clr	r6		
    591a:	0c 49       	mov	r9,	r12	
    591c:	0d 4a       	mov	r10,	r13	
    591e:	0c 87       	sub	r7,	r12	
    5920:	0d 78       	subc	r8,	r13	
    5922:	04 28       	jnc	$+10     	;abs 0x592c
    5924:	05 de       	bis	r14,	r5	
    5926:	06 df       	bis	r15,	r6	
    5928:	09 87       	sub	r7,	r9	
    592a:	0a 78       	subc	r8,	r10	
    592c:	12 c3       	clrc			
    592e:	0f 10       	rrc	r15		
    5930:	0e 10       	rrc	r14		
    5932:	09 59       	rla	r9		
    5934:	0a 6a       	rlc	r10		
    5936:	0e 93       	tst	r14		
    5938:	f0 23       	jnz	$-30     	;abs 0x591a
    593a:	0f 93       	tst	r15		
    593c:	ee 23       	jnz	$-34     	;abs 0x591a
    593e:	0e 45       	mov	r5,	r14	
    5940:	0f 46       	mov	r6,	r15	
    5942:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    5946:	0f f3       	and	#0,	r15	;r3 As==00
    5948:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    594c:	02 20       	jnz	$+6      	;abs 0x5952
    594e:	0f 93       	tst	r15		
    5950:	05 24       	jz	$+12     	;abs 0x595c
    5952:	8b 45 04 00 	mov	r5,	4(r11)	;0x0004(r11)
    5956:	8b 46 06 00 	mov	r6,	6(r11)	;0x0006(r11)
    595a:	a9 3f       	jmp	$-172    	;abs 0x58ae
    595c:	45 93       	tst.b	r5		
    595e:	03 38       	jl	$+8      	;abs 0x5966
    5960:	0a d9       	bis	r9,	r10	
    5962:	0a 93       	tst	r10		
    5964:	f6 27       	jz	$-18     	;abs 0x5952
    5966:	35 50 40 00 	add	#64,	r5	;#0x0040
    596a:	06 63       	adc	r6		
    596c:	f2 3f       	jmp	$-26     	;abs 0x5952
    596e:	1f 43       	mov	#1,	r15	;r3 As==01
    5970:	b2 3f       	jmp	$-154    	;abs 0x58d6
    5972:	1f 43       	mov	#1,	r15	;r3 As==01
    5974:	a4 3f       	jmp	$-182    	;abs 0x58be
    5976:	1f 43       	mov	#1,	r15	;r3 As==01
    5978:	96 3f       	jmp	$-210    	;abs 0x58a6
    597a:	1f 43       	mov	#1,	r15	;r3 As==01
    597c:	8f 3f       	jmp	$-224    	;abs 0x589c
    597e:	0f 4e       	mov	r14,	r15	
    5980:	35 41       	pop	r5		
    5982:	36 41       	pop	r6		
    5984:	37 41       	pop	r7		
    5986:	38 41       	pop	r8		
    5988:	39 41       	pop	r9		
    598a:	3a 41       	pop	r10		
    598c:	3b 41       	pop	r11		
    598e:	30 41       	ret			

00005990 <__gtsf2>:
    5990:	0b 12       	push	r11		
    5992:	31 80 18 00 	sub	#24,	r1	;#0x0018
    5996:	81 4e 10 00 	mov	r14,	16(r1)	;0x0010(r1)
    599a:	81 4f 12 00 	mov	r15,	18(r1)	;0x0012(r1)
    599e:	81 4c 14 00 	mov	r12,	20(r1)	;0x0014(r1)
    59a2:	81 4d 16 00 	mov	r13,	22(r1)	;0x0016(r1)
    59a6:	0e 41       	mov	r1,	r14	
    59a8:	0f 41       	mov	r1,	r15	
    59aa:	3f 50 10 00 	add	#16,	r15	;#0x0010
    59ae:	b0 12 9c 5d 	call	#0x5d9c	
    59b2:	0b 41       	mov	r1,	r11	
    59b4:	3b 52       	add	#8,	r11	;r2 As==11
    59b6:	0e 4b       	mov	r11,	r14	
    59b8:	0f 41       	mov	r1,	r15	
    59ba:	3f 50 14 00 	add	#20,	r15	;#0x0014
    59be:	b0 12 9c 5d 	call	#0x5d9c	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    59c2:	0f 43       	clr	r15		
    59c4:	e1 93 00 00 	cmp.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    59c8:	01 2c       	jc	$+4      	;abs 0x59cc
    59ca:	1f 43       	mov	#1,	r15	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    59cc:	0f 93       	tst	r15		
    59ce:	07 20       	jnz	$+16     	;abs 0x59de
                MenuStep = SELECT;
    59d0:	0f 43       	clr	r15		
    59d2:	e1 93 08 00 	cmp.b	#2,	8(r1)	;r3 As==10, 0x0008(r1)
    59d6:	01 2c       	jc	$+4      	;abs 0x59da
    59d8:	1f 43       	mov	#1,	r15	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    59da:	0f 93       	tst	r15		
    59dc:	02 24       	jz	$+6      	;abs 0x59e2
    59de:	3f 43       	mov	#-1,	r15	;r3 As==11
    59e0:	04 3c       	jmp	$+10     	;abs 0x59ea
    59e2:	0e 4b       	mov	r11,	r14	
    59e4:	0f 41       	mov	r1,	r15	
    59e6:	b0 12 92 5e 	call	#0x5e92	
    59ea:	31 50 18 00 	add	#24,	r1	;#0x0018
    59ee:	3b 41       	pop	r11		
    59f0:	30 41       	ret			

000059f2 <__gesf2>:
    59f2:	0b 12       	push	r11		
    59f4:	31 80 18 00 	sub	#24,	r1	;#0x0018
    59f8:	81 4e 10 00 	mov	r14,	16(r1)	;0x0010(r1)
    59fc:	81 4f 12 00 	mov	r15,	18(r1)	;0x0012(r1)
    5a00:	81 4c 14 00 	mov	r12,	20(r1)	;0x0014(r1)
    5a04:	81 4d 16 00 	mov	r13,	22(r1)	;0x0016(r1)
    5a08:	0e 41       	mov	r1,	r14	
    5a0a:	0f 41       	mov	r1,	r15	
    5a0c:	3f 50 10 00 	add	#16,	r15	;#0x0010
    5a10:	b0 12 9c 5d 	call	#0x5d9c	
    5a14:	0b 41       	mov	r1,	r11	
    5a16:	3b 52       	add	#8,	r11	;r2 As==11
    5a18:	0e 4b       	mov	r11,	r14	
    5a1a:	0f 41       	mov	r1,	r15	
    5a1c:	3f 50 14 00 	add	#20,	r15	;#0x0014
    5a20:	b0 12 9c 5d 	call	#0x5d9c	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5a24:	0f 43       	clr	r15		
    5a26:	e1 93 00 00 	cmp.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    5a2a:	01 2c       	jc	$+4      	;abs 0x5a2e
    5a2c:	1f 43       	mov	#1,	r15	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5a2e:	0f 93       	tst	r15		
    5a30:	07 20       	jnz	$+16     	;abs 0x5a40
                MenuStep = SELECT;
    5a32:	0f 43       	clr	r15		
    5a34:	e1 93 08 00 	cmp.b	#2,	8(r1)	;r3 As==10, 0x0008(r1)
    5a38:	01 2c       	jc	$+4      	;abs 0x5a3c
    5a3a:	1f 43       	mov	#1,	r15	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5a3c:	0f 93       	tst	r15		
    5a3e:	02 24       	jz	$+6      	;abs 0x5a44
    5a40:	3f 43       	mov	#-1,	r15	;r3 As==11
    5a42:	04 3c       	jmp	$+10     	;abs 0x5a4c
    5a44:	0e 4b       	mov	r11,	r14	
    5a46:	0f 41       	mov	r1,	r15	
    5a48:	b0 12 92 5e 	call	#0x5e92	
    5a4c:	31 50 18 00 	add	#24,	r1	;#0x0018
    5a50:	3b 41       	pop	r11		
    5a52:	30 41       	ret			

00005a54 <__ltsf2>:
    5a54:	0b 12       	push	r11		
    5a56:	31 80 18 00 	sub	#24,	r1	;#0x0018
    5a5a:	81 4e 10 00 	mov	r14,	16(r1)	;0x0010(r1)
    5a5e:	81 4f 12 00 	mov	r15,	18(r1)	;0x0012(r1)
    5a62:	81 4c 14 00 	mov	r12,	20(r1)	;0x0014(r1)
    5a66:	81 4d 16 00 	mov	r13,	22(r1)	;0x0016(r1)
    5a6a:	0e 41       	mov	r1,	r14	
    5a6c:	0f 41       	mov	r1,	r15	
    5a6e:	3f 50 10 00 	add	#16,	r15	;#0x0010
    5a72:	b0 12 9c 5d 	call	#0x5d9c	
    5a76:	0b 41       	mov	r1,	r11	
    5a78:	3b 52       	add	#8,	r11	;r2 As==11
    5a7a:	0e 4b       	mov	r11,	r14	
    5a7c:	0f 41       	mov	r1,	r15	
    5a7e:	3f 50 14 00 	add	#20,	r15	;#0x0014
    5a82:	b0 12 9c 5d 	call	#0x5d9c	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5a86:	0f 43       	clr	r15		
    5a88:	e1 93 00 00 	cmp.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    5a8c:	01 2c       	jc	$+4      	;abs 0x5a90
    5a8e:	1f 43       	mov	#1,	r15	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5a90:	0f 93       	tst	r15		
    5a92:	07 20       	jnz	$+16     	;abs 0x5aa2
                MenuStep = SELECT;
    5a94:	0f 43       	clr	r15		
    5a96:	e1 93 08 00 	cmp.b	#2,	8(r1)	;r3 As==10, 0x0008(r1)
    5a9a:	01 2c       	jc	$+4      	;abs 0x5a9e
    5a9c:	1f 43       	mov	#1,	r15	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5a9e:	0f 93       	tst	r15		
    5aa0:	02 24       	jz	$+6      	;abs 0x5aa6
    5aa2:	1f 43       	mov	#1,	r15	;r3 As==01
    5aa4:	04 3c       	jmp	$+10     	;abs 0x5aae
    5aa6:	0e 4b       	mov	r11,	r14	
    5aa8:	0f 41       	mov	r1,	r15	
    5aaa:	b0 12 92 5e 	call	#0x5e92	
    5aae:	31 50 18 00 	add	#24,	r1	;#0x0018
    5ab2:	3b 41       	pop	r11		
    5ab4:	30 41       	ret			

00005ab6 <__floatsisf>:
    5ab6:	0b 12       	push	r11		
    5ab8:	31 82       	sub	#8,	r1	;r2 As==11
    5aba:	0d 4e       	mov	r14,	r13	
    5abc:	0e 4f       	mov	r15,	r14	
    5abe:	f1 40 03 00 	mov.b	#3,	0(r1)	;#0x0003, 0x0000(r1)
    5ac2:	00 00 
    5ac4:	0f 4e       	mov	r14,	r15	
    5ac6:	0f 5f       	rla	r15		
    5ac8:	0f 43       	clr	r15		
    5aca:	0f 6f       	rlc	r15		
    5acc:	c1 4f 01 00 	mov.b	r15,	1(r1)	;0x0001(r1)
    5ad0:	0d 93       	tst	r13		
    5ad2:	08 20       	jnz	$+18     	;abs 0x5ae4
    5ad4:	0e 93       	tst	r14		
    5ad6:	06 20       	jnz	$+14     	;abs 0x5ae4
    5ad8:	e1 43 00 00 	mov.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    5adc:	0f 41       	mov	r1,	r15	
    5ade:	b0 12 ec 5b 	call	#0x5bec	
    5ae2:	2f 3c       	jmp	$+96     	;abs 0x5b42
    5ae4:	b1 40 1e 00 	mov	#30,	2(r1)	;#0x001e, 0x0002(r1)
    5ae8:	02 00 
    5aea:	4f 93       	tst.b	r15		
    5aec:	09 24       	jz	$+20     	;abs 0x5b00
    5aee:	0d 93       	tst	r13		
    5af0:	03 20       	jnz	$+8      	;abs 0x5af8
    5af2:	3e 90 00 80 	cmp	#-32768,r14	;#0x8000
    5af6:	22 24       	jz	$+70     	;abs 0x5b3c
    5af8:	3d e3       	inv	r13		
    5afa:	3e e3       	inv	r14		
    5afc:	1d 53       	inc	r13		
    5afe:	0e 63       	adc	r14		
    5b00:	81 4d 04 00 	mov	r13,	4(r1)	;0x0004(r1)
    5b04:	81 4e 06 00 	mov	r14,	6(r1)	;0x0006(r1)
    5b08:	1c 41 04 00 	mov	4(r1),	r12	;0x0004(r1)
    5b0c:	1d 41 06 00 	mov	6(r1),	r13	;0x0006(r1)
    5b10:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    5b14:	e3 2f       	jc	$-56     	;abs 0x5adc
    5b16:	1b 41 02 00 	mov	2(r1),	r11	;0x0002(r1)
    5b1a:	0e 4c       	mov	r12,	r14	
    5b1c:	0f 4d       	mov	r13,	r15	
    5b1e:	0e 5e       	rla	r14		
    5b20:	0f 6f       	rlc	r15		
    5b22:	3b 53       	add	#-1,	r11	;r3 As==11
    5b24:	0c 4e       	mov	r14,	r12	
    5b26:	0d 4f       	mov	r15,	r13	
    5b28:	3f 90 00 40 	cmp	#16384,	r15	;#0x4000
    5b2c:	f6 2b       	jnc	$-18     	;abs 0x5b1a
    5b2e:	81 4b 02 00 	mov	r11,	2(r1)	;0x0002(r1)
    5b32:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    5b36:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    5b3a:	d0 3f       	jmp	$-94     	;abs 0x5adc
    5b3c:	0e 43       	clr	r14		
    5b3e:	3f 40 00 cf 	mov	#-12544,r15	;#0xcf00
    5b42:	31 52       	add	#8,	r1	;r2 As==11
    5b44:	3b 41       	pop	r11		
    5b46:	30 41       	ret			

00005b48 <__fixsfsi>:
    5b48:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    5b4c:	81 4e 08 00 	mov	r14,	8(r1)	;0x0008(r1)
    5b50:	81 4f 0a 00 	mov	r15,	10(r1)	;0x000a(r1)
    5b54:	0e 41       	mov	r1,	r14	
    5b56:	0f 41       	mov	r1,	r15	
    5b58:	3f 52       	add	#8,	r15	;r2 As==11
    5b5a:	b0 12 9c 5d 	call	#0x5d9c	
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5b5e:	0e 43       	clr	r14		
    5b60:	6f 41       	mov.b	@r1,	r15	
    5b62:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    5b64:	3a 24       	jz	$+118    	;abs 0x5bda
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5b66:	0e 93       	tst	r14		
    5b68:	33 20       	jnz	$+104    	;abs 0x5bd0
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5b6a:	0e 43       	clr	r14		
    5b6c:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    5b6e:	01 2c       	jc	$+4      	;abs 0x5b72
    5b70:	1e 43       	mov	#1,	r14	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5b72:	0e 93       	tst	r14		
    5b74:	2d 20       	jnz	$+92     	;abs 0x5bd0
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5b76:	0e 43       	clr	r14		
    5b78:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    5b7a:	2d 24       	jz	$+92     	;abs 0x5bd6
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5b7c:	0e 93       	tst	r14		
    5b7e:	07 20       	jnz	$+16     	;abs 0x5b8e
    5b80:	1d 41 02 00 	mov	2(r1),	r13	;0x0002(r1)
    5b84:	0d 93       	tst	r13		
    5b86:	24 38       	jl	$+74     	;abs 0x5bd0
    5b88:	3d 90 1f 00 	cmp	#31,	r13	;#0x001f
    5b8c:	0b 38       	jl	$+24     	;abs 0x5ba4
    5b8e:	c1 93 01 00 	tst.b	1(r1)		;0x0001(r1)
    5b92:	04 24       	jz	$+10     	;abs 0x5b9c
    5b94:	0e 43       	clr	r14		
    5b96:	3f 40 00 80 	mov	#-32768,r15	;#0x8000
    5b9a:	21 3c       	jmp	$+68     	;abs 0x5bde
    5b9c:	3e 43       	mov	#-1,	r14	;r3 As==11
    5b9e:	3f 40 ff 7f 	mov	#32767,	r15	;#0x7fff
    5ba2:	1d 3c       	jmp	$+60     	;abs 0x5bde
    5ba4:	3c 40 1e 00 	mov	#30,	r12	;#0x001e
    5ba8:	1e 41 04 00 	mov	4(r1),	r14	;0x0004(r1)
    5bac:	1f 41 06 00 	mov	6(r1),	r15	;0x0006(r1)
    5bb0:	0c 8d       	sub	r13,	r12	
    5bb2:	0c 93       	tst	r12		
    5bb4:	05 24       	jz	$+12     	;abs 0x5bc0
    5bb6:	12 c3       	clrc			
    5bb8:	0f 10       	rrc	r15		
    5bba:	0e 10       	rrc	r14		
    5bbc:	1c 83       	dec	r12		
    5bbe:	fb 23       	jnz	$-8      	;abs 0x5bb6
    5bc0:	c1 93 01 00 	tst.b	1(r1)		;0x0001(r1)
    5bc4:	0c 24       	jz	$+26     	;abs 0x5bde
    5bc6:	3e e3       	inv	r14		
    5bc8:	3f e3       	inv	r15		
    5bca:	1e 53       	inc	r14		
    5bcc:	0f 63       	adc	r15		
    5bce:	07 3c       	jmp	$+16     	;abs 0x5bde
    5bd0:	0e 43       	clr	r14		
    5bd2:	0f 43       	clr	r15		
    5bd4:	04 3c       	jmp	$+10     	;abs 0x5bde
    5bd6:	1e 43       	mov	#1,	r14	;r3 As==01
    5bd8:	d1 3f       	jmp	$-92     	;abs 0x5b7c
    5bda:	1e 43       	mov	#1,	r14	;r3 As==01
    5bdc:	c4 3f       	jmp	$-118    	;abs 0x5b66
    5bde:	31 50 0c 00 	add	#12,	r1	;#0x000c
    5be2:	30 41       	ret			

00005be4 <__thenan_sf>:
	...

00005bec <__pack_f>:
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    5bec:	0b 12       	push	r11		
    5bee:	0a 12       	push	r10		
    5bf0:	09 12       	push	r9		
    5bf2:	08 12       	push	r8		
    5bf4:	07 12       	push	r7		
    5bf6:	21 82       	sub	#4,	r1	;r2 As==10

void process_option(){
    5bf8:	1c 4f 04 00 	mov	4(r15),	r12	;0x0004(r15)
    5bfc:	1d 4f 06 00 	mov	6(r15),	r13	;0x0006(r15)
    int i;
    5c00:	59 4f 01 00 	mov.b	1(r15),	r9	;0x0001(r15)
    switch (MenuOption){
    5c04:	0a 43       	clr	r10		
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5c06:	0b 43       	clr	r11		
    5c08:	6e 4f       	mov.b	@r15,	r14	
    5c0a:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5c0c:	01 2c       	jc	$+4      	;abs 0x5c10
    5c0e:	1b 43       	mov	#1,	r11	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5c10:	0b 93       	tst	r11		
    5c12:	05 24       	jz	$+12     	;abs 0x5c1e
    int i;
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
    5c14:	3a 40 ff 00 	mov	#255,	r10	;#0x00ff
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
    5c18:	3d d0 10 00 	bis	#16,	r13	;#0x0010
    5c1c:	8e 3c       	jmp	$+286    	;abs 0x5d3a
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5c1e:	0b 43       	clr	r11		
    5c20:	6e 92       	cmp.b	#4,	r14	;r2 As==10
    5c22:	89 24       	jz	$+276    	;abs 0x5d36
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5c24:	0b 93       	tst	r11		
    5c26:	62 20       	jnz	$+198    	;abs 0x5cec
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5c28:	0b 43       	clr	r11		
    5c2a:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5c2c:	82 24       	jz	$+262    	;abs 0x5d32
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5c2e:	0b 93       	tst	r11		
    5c30:	5f 20       	jnz	$+192    	;abs 0x5cf0
                printf("%d", i);
                delayms(1000);
            }
            MotorArmed = TRUE;
            MenuVisible = FALSE;
            lcd_clear(BLACK);
    5c32:	0c 93       	tst	r12		
    5c34:	02 20       	jnz	$+6      	;abs 0x5c3a
    5c36:	0d 93       	tst	r13		
    5c38:	80 24       	jz	$+258    	;abs 0x5d3a
            MenuStep = DISPLAY;
            break;
            
        case INITIAL_SETTINGS:
            // seta o flag initial setup
            break;          
    5c3a:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    5c3e:	3f 90 82 ff 	cmp	#-126,	r15	;#0xff82
    5c42:	51 34       	jge	$+164    	;abs 0x5ce6
    }
    
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    5c44:	38 40 82 ff 	mov	#-126,	r8	;#0xff82
    5c48:	08 8f       	sub	r15,	r8	
    }
}

void draw_analog_graph(void){
    5c4a:	38 90 1a 00 	cmp	#26,	r8	;#0x001a
    5c4e:	29 38       	jl	$+84     	;abs 0x5ca2
    lcd_goto(4,4);
    printf("FAZER");
}
    5c50:	0c 43       	clr	r12		
    5c52:	0d 43       	clr	r13		
void process_analog_menu(void){
    switch(MenuAnalog){
        case DISPLAY:
            lcd_goto(0,14);
            printf("DISPLAY             ");

    5c54:	0e 4c       	mov	r12,	r14	
    5c56:	0f 4d       	mov	r13,	r15	
    5c58:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    5c5c:	0f f3       	and	#0,	r15	;r3 As==00
    5c5e:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    5c62:	02 20       	jnz	$+6      	;abs 0x5c68
    5c64:	0f 93       	tst	r15		
    5c66:	17 24       	jz	$+48     	;abs 0x5c96
            break;
        case SELECT:
            lcd_goto(0,14);
            printf("SELECT            ");

            // move para os lados
    5c68:	3c 50 3f 00 	add	#63,	r12	;#0x003f
    5c6c:	0d 63       	adc	r13		
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
            }
            else{
    5c6e:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    5c72:	01 28       	jnc	$+4      	;abs 0x5c76
                if(ChannelInput[ROLL_CH] < 2500){
                    MenuAnalog = WAIT_ROLL_RIGHT;
    5c74:	1a 43       	mov	#1,	r10	;r3 As==01
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    5c76:	12 c3       	clrc			
    5c78:	0d 10       	rrc	r13		
    5c7a:	0c 10       	rrc	r12		
    5c7c:	0d 11       	rra	r13		
    5c7e:	0c 10       	rrc	r12		
    5c80:	0d 11       	rra	r13		
    5c82:	0c 10       	rrc	r12		
    5c84:	0d 11       	rra	r13		
    5c86:	0c 10       	rrc	r12		
    5c88:	0d 11       	rra	r13		
    5c8a:	0c 10       	rrc	r12		
    5c8c:	0d 11       	rra	r13		
    5c8e:	0c 10       	rrc	r12		
    5c90:	0d 11       	rra	r13		
    5c92:	0c 10       	rrc	r12		
    5c94:	52 3c       	jmp	$+166    	;abs 0x5d3a
        case DISPLAY:
            lcd_goto(0,14);
            printf("DISPLAY             ");

            refresh_analog_menu();
            MenuAnalog = SELECT;
    5c96:	4c 93       	tst.b	r12		
    5c98:	ea 37       	jge	$-42     	;abs 0x5c6e
            break;
    5c9a:	3c 50 40 00 	add	#64,	r12	;#0x0040
    5c9e:	0d 63       	adc	r13		
    5ca0:	e6 3f       	jmp	$-50     	;abs 0x5c6e
    printf("FAZER");
}

void process_analog_menu(void){
    switch(MenuAnalog){
        case DISPLAY:
    5ca2:	07 43       	clr	r7		
    5ca4:	1e 43       	mov	#1,	r14	;r3 As==01
    5ca6:	0f 43       	clr	r15		
    5ca8:	0b 48       	mov	r8,	r11	
    5caa:	0b 93       	tst	r11		
    5cac:	04 24       	jz	$+10     	;abs 0x5cb6
    5cae:	0e 5e       	rla	r14		
    5cb0:	0f 6f       	rlc	r15		
    5cb2:	1b 83       	dec	r11		
    5cb4:	fc 23       	jnz	$-6      	;abs 0x5cae
    5cb6:	3e 53       	add	#-1,	r14	;r3 As==11
    5cb8:	3f 63       	addc	#-1,	r15	;r3 As==11
    5cba:	0e fc       	and	r12,	r14	
    5cbc:	0f fd       	and	r13,	r15	
    5cbe:	0f de       	bis	r14,	r15	
    5cc0:	0f 93       	tst	r15		
    5cc2:	01 24       	jz	$+4      	;abs 0x5cc6
    5cc4:	17 43       	mov	#1,	r7	;r3 As==01
            lcd_goto(0,14);
    5cc6:	0f 48       	mov	r8,	r15	
    5cc8:	0f 93       	tst	r15		
    5cca:	05 24       	jz	$+12     	;abs 0x5cd6
    5ccc:	12 c3       	clrc			
    5cce:	0d 10       	rrc	r13		
    5cd0:	0c 10       	rrc	r12		
    5cd2:	1f 83       	dec	r15		
    5cd4:	fb 23       	jnz	$-8      	;abs 0x5ccc
    5cd6:	0e 47       	mov	r7,	r14	
    5cd8:	0f 4e       	mov	r14,	r15	
    5cda:	0f 5f       	rla	r15		
    5cdc:	0f 7f       	subc	r15,	r15	
    5cde:	3f e3       	inv	r15		
    5ce0:	0c de       	bis	r14,	r12	
    5ce2:	0d df       	bis	r15,	r13	
    5ce4:	b7 3f       	jmp	$-144    	;abs 0x5c54
                if(ChannelInput[ROLL_CH] < 2500){
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
            
            // check uncheck
    5ce6:	3f 90 80 00 	cmp	#128,	r15	;#0x0080
    5cea:	05 38       	jl	$+12     	;abs 0x5cf6
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
    5cec:	3a 40 ff 00 	mov	#255,	r10	;#0x00ff
            }
    5cf0:	0c 43       	clr	r12		
    5cf2:	0d 43       	clr	r13		
    5cf4:	22 3c       	jmp	$+70     	;abs 0x5d3a
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
                }
    5cf6:	0a 4f       	mov	r15,	r10	
    5cf8:	3a 50 7f 00 	add	#127,	r10	;#0x007f
            }
            
            break;
        case WAIT_PITCH_DOWN:
    5cfc:	0e 4c       	mov	r12,	r14	
    5cfe:	0f 4d       	mov	r13,	r15	
    5d00:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    5d04:	0f f3       	and	#0,	r15	;r3 As==00
    5d06:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    5d0a:	02 20       	jnz	$+6      	;abs 0x5d10
    5d0c:	0f 93       	tst	r15		
    5d0e:	0b 24       	jz	$+24     	;abs 0x5d26

            if(ChannelInput[PITCH_CH] > 2500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
            }
            break;
    5d10:	3c 50 3f 00 	add	#63,	r12	;#0x003f
    5d14:	0d 63       	adc	r13		
            
        case WAIT_PITCH_UP:
    5d16:	3d 90 00 80 	cmp	#-32768,r13	;#0x8000
    5d1a:	ad 2b       	jnc	$-164    	;abs 0x5c76
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");
    5d1c:	12 c3       	clrc			
    5d1e:	0d 10       	rrc	r13		
    5d20:	0c 10       	rrc	r12		

    5d22:	1a 53       	inc	r10		
    5d24:	a8 3f       	jmp	$-174    	;abs 0x5c76
            }
            
            break;
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
            printf("WAIT PITCH DOWN    ");
    5d26:	4c 93       	tst.b	r12		
    5d28:	f6 37       	jge	$-18     	;abs 0x5d16

    5d2a:	3c 50 40 00 	add	#64,	r12	;#0x0040
    5d2e:	0d 63       	adc	r13		
    5d30:	f2 3f       	jmp	$-26     	;abs 0x5d16
    5d32:	1b 43       	mov	#1,	r11	;r3 As==01
    5d34:	7c 3f       	jmp	$-262    	;abs 0x5c2e
    5d36:	1b 43       	mov	#1,	r11	;r3 As==01
    5d38:	75 3f       	jmp	$-276    	;abs 0x5c24
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
                printf("WAIT ROLL RIGHT ");

    5d3a:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    5d3e:	4e 4d       	mov.b	r13,	r14	
    5d40:	7e f0 7f 00 	and.b	#127,	r14	;#0x007f
    5d44:	5f 41 02 00 	mov.b	2(r1),	r15	;0x0002(r1)
    5d48:	7f f0 80 ff 	and.b	#-128,	r15	;#0xff80
    5d4c:	4f de       	bis.b	r14,	r15	
    5d4e:	c1 4f 02 00 	mov.b	r15,	2(r1)	;0x0002(r1)
                if(ChannelInput[PITCH_CH] < 3500){
    5d52:	0f 4a       	mov	r10,	r15	
    5d54:	7f f3       	and.b	#-1,	r15	;r3 As==11
    5d56:	0f 5f       	rla	r15		
    5d58:	0f 5f       	rla	r15		
    5d5a:	0f 5f       	rla	r15		
    5d5c:	0f 5f       	rla	r15		
    5d5e:	0f 5f       	rla	r15		
    5d60:	0f 5f       	rla	r15		
    5d62:	0f 5f       	rla	r15		
    5d64:	1e 41 02 00 	mov	2(r1),	r14	;0x0002(r1)
    5d68:	3e f0 7f 80 	and	#-32641,r14	;#0x807f
    5d6c:	0e df       	bis	r15,	r14	
    5d6e:	81 4e 02 00 	mov	r14,	2(r1)	;0x0002(r1)
                    if(AnalogSelect > 0){
    5d72:	4e 49       	mov.b	r9,	r14	
    5d74:	4e 11       	rra.b	r14		
    5d76:	4e 43       	clr.b	r14		
    5d78:	4e 10       	rrc.b	r14		
    5d7a:	5f 41 03 00 	mov.b	3(r1),	r15	;0x0003(r1)
    5d7e:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    5d82:	4f de       	bis.b	r14,	r15	
    5d84:	c1 4f 03 00 	mov.b	r15,	3(r1)	;0x0003(r1)
                if(ChannelInput[PITCH_CH] > 2500){
                   if(AnalogSelect < 7){
                        AnalogSelect++;
                    }
                    MenuAnalog = DISPLAY;

    5d88:	2e 41       	mov	@r1,	r14	
    5d8a:	1f 41 02 00 	mov	2(r1),	r15	;0x0002(r1)
    5d8e:	21 52       	add	#4,	r1	;r2 As==10
    5d90:	37 41       	pop	r7		
    5d92:	38 41       	pop	r8		
    5d94:	39 41       	pop	r9		
    5d96:	3a 41       	pop	r10		
    5d98:	3b 41       	pop	r11		
    5d9a:	30 41       	ret			

00005d9c <__unpack_f>:
                }
            break;
            
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
    5d9c:	0b 12       	push	r11		
    5d9e:	0b 4e       	mov	r14,	r11	
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
    5da0:	2c 4f       	mov	@r15,	r12	
    5da2:	5d 4f 02 00 	mov.b	2(r15),	r13	;0x0002(r15)
    5da6:	3d f0 7f 00 	and	#127,	r13	;#0x007f
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    5daa:	1e 4f 02 00 	mov	2(r15),	r14	;0x0002(r15)
    5dae:	12 c3       	clrc			
    5db0:	0e 10       	rrc	r14		
    5db2:	0e 11       	rra	r14		
    5db4:	0e 11       	rra	r14		
    5db6:	0e 11       	rra	r14		
    5db8:	0e 11       	rra	r14		
    5dba:	0e 11       	rra	r14		
    5dbc:	0e 11       	rra	r14		
    5dbe:	7e f3       	and.b	#-1,	r14	;r3 As==11
            color_fore = RED;           // a cor da letra muda para vermelho 
    5dc0:	ff b0 80 00 	bit.b	#128,	3(r15)	;#0x0080, 0x0003(r15)
    5dc4:	03 00 
    5dc6:	4f 43       	clr.b	r15		
    5dc8:	4f 63       	adc.b	r15		
        else{                           // se nao                        
            if(color_back == LIME){
                color_fore = BLACK;
            }
        }                               
        
    5dca:	cb 4f 01 00 	mov.b	r15,	1(r11)	;0x0001(r11)
        printf("%d",i);
    5dce:	0e 93       	tst	r14		
    5dd0:	2d 20       	jnz	$+92     	;abs 0x5e2c
        // ajusta as cores para o normal
        color_fore = LIME;
        color_back = BLACK;
    5dd2:	0c 93       	tst	r12		
    5dd4:	05 20       	jnz	$+12     	;abs 0x5de0
    5dd6:	0d 93       	tst	r13		
    5dd8:	03 20       	jnz	$+8      	;abs 0x5de0
    }
    printf("                    ");
}

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    5dda:	eb 43 00 00 	mov.b	#2,	0(r11)	;r3 As==10, 0x0000(r11)
    5dde:	57 3c       	jmp	$+176    	;abs 0x5e8e
    MenuCounter++;
}

void clock_init(void)
{
    /* 
    5de0:	bb 40 82 ff 	mov	#-126,	2(r11)	;#0xff82, 0x0002(r11)
    5de4:	02 00 
     * Basic Clock System Control 2
    5de6:	0c 5c       	rla	r12		
    5de8:	0d 6d       	rlc	r13		
    5dea:	0c 5c       	rla	r12		
    5dec:	0d 6d       	rlc	r13		
    5dee:	0c 5c       	rla	r12		
    5df0:	0d 6d       	rlc	r13		
    5df2:	0c 5c       	rla	r12		
    5df4:	0d 6d       	rlc	r13		
    5df6:	0c 5c       	rla	r12		
    5df8:	0d 6d       	rlc	r13		
    5dfa:	0c 5c       	rla	r12		
    5dfc:	0d 6d       	rlc	r13		
    5dfe:	0c 5c       	rla	r12		
    5e00:	0d 6d       	rlc	r13		
     * 
     * SELM_0 -- DCOCLK
    5e02:	fb 40 03 00 	mov.b	#3,	0(r11)	;#0x0003, 0x0000(r11)
    5e06:	00 00 
     * DIVM_0 -- Divide by 1
     * ~SELS -- DCOCLK
    5e08:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    5e0c:	0a 2c       	jc	$+22     	;abs 0x5e22
    5e0e:	3f 40 82 ff 	mov	#-126,	r15	;#0xff82
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
    5e12:	0c 5c       	rla	r12		
    5e14:	0d 6d       	rlc	r13		
     * 
    5e16:	3f 53       	add	#-1,	r15	;r3 As==11
    5e18:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    5e1c:	fa 2b       	jnc	$-10     	;abs 0x5e12
    5e1e:	8b 4f 02 00 	mov	r15,	2(r11)	;0x0002(r11)
     */
    BCSCTL3 = 0xa0;
}

void p1_init(){
        /* Port 1 Output Register */
    5e22:	8b 4c 04 00 	mov	r12,	4(r11)	;0x0004(r11)
    5e26:	8b 4d 06 00 	mov	r13,	6(r11)	;0x0006(r11)
    5e2a:	31 3c       	jmp	$+100    	;abs 0x5e8e
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    
    DCOCTL = 0x77;      
        /* 
    5e2c:	3e 90 ff 00 	cmp	#255,	r14	;#0x00ff
    5e30:	1e 24       	jz	$+62     	;abs 0x5e6e
    P1OUT = PPM_P1MASK;

    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;

    /* Port 1 Interrupt Edge Select Register */
    5e32:	3e 50 81 ff 	add	#-127,	r14	;#0xff81
    5e36:	8b 4e 02 00 	mov	r14,	2(r11)	;0x0002(r11)
    P1IES = 0; // subida
    5e3a:	fb 40 03 00 	mov.b	#3,	0(r11)	;#0x0003, 0x0000(r11)
    5e3e:	00 00 

    5e40:	0e 4c       	mov	r12,	r14	
    5e42:	0f 4d       	mov	r13,	r15	
    5e44:	0e 5e       	rla	r14		
    5e46:	0f 6f       	rlc	r15		
    5e48:	0e 5e       	rla	r14		
    5e4a:	0f 6f       	rlc	r15		
    5e4c:	0e 5e       	rla	r14		
    5e4e:	0f 6f       	rlc	r15		
    5e50:	0e 5e       	rla	r14		
    5e52:	0f 6f       	rlc	r15		
    5e54:	0e 5e       	rla	r14		
    5e56:	0f 6f       	rlc	r15		
    5e58:	0e 5e       	rla	r14		
    5e5a:	0f 6f       	rlc	r15		
    5e5c:	0e 5e       	rla	r14		
    5e5e:	0f 6f       	rlc	r15		
    5e60:	3f d0 00 40 	bis	#16384,	r15	;#0x4000
    5e64:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    5e68:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    5e6c:	10 3c       	jmp	$+34     	;abs 0x5e8e
    
    DCOCTL = 0x77;      
        /* 
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
    5e6e:	0c 93       	tst	r12		
    5e70:	05 20       	jnz	$+12     	;abs 0x5e7c
    5e72:	0d 93       	tst	r13		
    5e74:	03 20       	jnz	$+8      	;abs 0x5e7c
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    5e76:	eb 42 00 00 	mov.b	#4,	0(r11)	;r2 As==10, 0x0000(r11)
    5e7a:	09 3c       	jmp	$+20     	;abs 0x5e8e
    BCSCTL1 = 0xcf;     

    /* 
     * Basic Clock System Control 3
     * 
    5e7c:	3d b0 10 00 	bit	#16,	r13	;#0x0010
    5e80:	03 24       	jz	$+8      	;abs 0x5e88
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
    5e82:	db 43 00 00 	mov.b	#1,	0(r11)	;r3 As==01, 0x0000(r11)
    5e86:	cd 3f       	jmp	$-100    	;abs 0x5e22
     * XCAP_0 -- ~1 pF
     */
    BCSCTL3 = 0xa0;
}
    5e88:	cb 43 00 00 	mov.b	#0,	0(r11)	;r3 As==00, 0x0000(r11)
    5e8c:	ca 3f       	jmp	$-106    	;abs 0x5e22

    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida

    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;
    5e8e:	3b 41       	pop	r11		
    5e90:	30 41       	ret			

00005e92 <__fpcmp_parts_f>:
    5e92:	0b 12       	push	r11		
    5e94:	0a 12       	push	r10		
    5e96:	09 12       	push	r9		
    5e98:	08 12       	push	r8		
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5e9a:	0d 43       	clr	r13		
    5e9c:	6c 4f       	mov.b	@r15,	r12	
    5e9e:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    5ea0:	01 2c       	jc	$+4      	;abs 0x5ea4
    5ea2:	1d 43       	mov	#1,	r13	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5ea4:	0d 93       	tst	r13		
    5ea6:	07 20       	jnz	$+16     	;abs 0x5eb6
                MenuStep = SELECT;
    5ea8:	0d 43       	clr	r13		
    5eaa:	6b 4e       	mov.b	@r14,	r11	
    5eac:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    5eae:	01 2c       	jc	$+4      	;abs 0x5eb2
    5eb0:	1d 43       	mov	#1,	r13	;r3 As==01
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5eb2:	0d 93       	tst	r13		
    5eb4:	02 24       	jz	$+6      	;abs 0x5eba
    5eb6:	1d 43       	mov	#1,	r13	;r3 As==01
    5eb8:	72 3c       	jmp	$+230    	;abs 0x5f9e
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5eba:	0d 43       	clr	r13		
    5ebc:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    5ebe:	6d 24       	jz	$+220    	;abs 0x5f9a
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5ec0:	0d 93       	tst	r13		
    5ec2:	0b 24       	jz	$+24     	;abs 0x5eda
            
    5ec4:	0d 43       	clr	r13		
    5ec6:	6b 92       	cmp.b	#4,	r11	;r2 As==10
    5ec8:	66 24       	jz	$+206    	;abs 0x5f96
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5eca:	0d 93       	tst	r13		
    5ecc:	06 24       	jz	$+14     	;abs 0x5eda
    5ece:	5d 4e 01 00 	mov.b	1(r14),	r13	;0x0001(r14)
    5ed2:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    5ed6:	0d 8f       	sub	r15,	r13	
    5ed8:	62 3c       	jmp	$+198    	;abs 0x5f9e
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5eda:	0d 43       	clr	r13		
    5edc:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    5ede:	59 24       	jz	$+180    	;abs 0x5f92
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5ee0:	0d 93       	tst	r13		
    5ee2:	23 20       	jnz	$+72     	;abs 0x5f2a
            
    5ee4:	0d 43       	clr	r13		
    5ee6:	6b 92       	cmp.b	#4,	r11	;r2 As==10
    5ee8:	52 24       	jz	$+166    	;abs 0x5f8e
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5eea:	0d 93       	tst	r13		
    5eec:	11 20       	jnz	$+36     	;abs 0x5f10
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5eee:	0d 43       	clr	r13		
    5ef0:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    5ef2:	4b 24       	jz	$+152    	;abs 0x5f8a
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5ef4:	0d 93       	tst	r13		
    5ef6:	07 24       	jz	$+16     	;abs 0x5f06
            lcd_goto(0,14);
    5ef8:	0d 43       	clr	r13		
    5efa:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    5efc:	44 24       	jz	$+138    	;abs 0x5f86
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5efe:	0d 93       	tst	r13		
    5f00:	02 24       	jz	$+6      	;abs 0x5f06
    5f02:	0d 43       	clr	r13		
    5f04:	4c 3c       	jmp	$+154    	;abs 0x5f9e
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5f06:	0d 43       	clr	r13		
    5f08:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    5f0a:	3b 24       	jz	$+120    	;abs 0x5f82
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5f0c:	0d 93       	tst	r13		
    5f0e:	08 24       	jz	$+18     	;abs 0x5f20
    5f10:	ce 93 01 00 	tst.b	1(r14)		;0x0001(r14)
    5f14:	03 20       	jnz	$+8      	;abs 0x5f1c
    5f16:	3f 43       	mov	#-1,	r15	;r3 As==11
    5f18:	0d 4f       	mov	r15,	r13	
    5f1a:	41 3c       	jmp	$+132    	;abs 0x5f9e
    5f1c:	1f 43       	mov	#1,	r15	;r3 As==01
    5f1e:	fc 3f       	jmp	$-6      	;abs 0x5f18
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5f20:	0d 43       	clr	r13		
    5f22:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    5f24:	2c 24       	jz	$+90     	;abs 0x5f7e
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5f26:	0d 93       	tst	r13		
    5f28:	04 24       	jz	$+10     	;abs 0x5f32
    5f2a:	cf 93 01 00 	tst.b	1(r15)		;0x0001(r15)
    5f2e:	f3 23       	jnz	$-24     	;abs 0x5f16
    5f30:	f5 3f       	jmp	$-20     	;abs 0x5f1c
    5f32:	5c 4f 01 00 	mov.b	1(r15),	r12	;0x0001(r15)
    5f36:	5c 9e 01 00 	cmp.b	1(r14),	r12	;0x0001(r14)
    5f3a:	03 24       	jz	$+8      	;abs 0x5f42
    5f3c:	4c 93       	tst.b	r12		
    5f3e:	eb 23       	jnz	$-40     	;abs 0x5f16
    5f40:	ed 3f       	jmp	$-36     	;abs 0x5f1c
    5f42:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    5f46:	1d 4e 02 00 	mov	2(r14),	r13	;0x0002(r14)
    5f4a:	0d 9b       	cmp	r11,	r13	
    5f4c:	f7 3b       	jl	$-16     	;abs 0x5f3c
    5f4e:	0b 9d       	cmp	r13,	r11	
    5f50:	13 38       	jl	$+40     	;abs 0x5f78
    5f52:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    5f56:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    5f5a:	18 4e 04 00 	mov	4(r14),	r8	;0x0004(r14)
    5f5e:	19 4e 06 00 	mov	6(r14),	r9	;0x0006(r14)
    5f62:	0e 48       	mov	r8,	r14	
    5f64:	0f 49       	mov	r9,	r15	
    5f66:	0e 8a       	sub	r10,	r14	
    5f68:	0f 7b       	subc	r11,	r15	
    5f6a:	e8 2b       	jnc	$-46     	;abs 0x5f3c
    5f6c:	0e 4a       	mov	r10,	r14	
    5f6e:	0f 4b       	mov	r11,	r15	
    5f70:	0d 43       	clr	r13		
    5f72:	0e 88       	sub	r8,	r14	
    5f74:	0f 79       	subc	r9,	r15	
    5f76:	13 2c       	jc	$+40     	;abs 0x5f9e
    5f78:	4c 93       	tst.b	r12		
    5f7a:	cd 27       	jz	$-100    	;abs 0x5f16
    5f7c:	cf 3f       	jmp	$-96     	;abs 0x5f1c
    5f7e:	1d 43       	mov	#1,	r13	;r3 As==01
    5f80:	d2 3f       	jmp	$-90     	;abs 0x5f26
    5f82:	1d 43       	mov	#1,	r13	;r3 As==01
    5f84:	c3 3f       	jmp	$-120    	;abs 0x5f0c
    5f86:	1d 43       	mov	#1,	r13	;r3 As==01
    5f88:	ba 3f       	jmp	$-138    	;abs 0x5efe
    5f8a:	1d 43       	mov	#1,	r13	;r3 As==01
    5f8c:	b3 3f       	jmp	$-152    	;abs 0x5ef4
    5f8e:	1d 43       	mov	#1,	r13	;r3 As==01
    5f90:	ac 3f       	jmp	$-166    	;abs 0x5eea
    5f92:	1d 43       	mov	#1,	r13	;r3 As==01
    5f94:	a5 3f       	jmp	$-180    	;abs 0x5ee0
    5f96:	1d 43       	mov	#1,	r13	;r3 As==01
    5f98:	98 3f       	jmp	$-206    	;abs 0x5eca
    5f9a:	1d 43       	mov	#1,	r13	;r3 As==01
    5f9c:	91 3f       	jmp	$-220    	;abs 0x5ec0
    5f9e:	0f 4d       	mov	r13,	r15	
    5fa0:	38 41       	pop	r8		
    5fa2:	39 41       	pop	r9		
    5fa4:	3a 41       	pop	r10		
    5fa6:	3b 41       	pop	r11		
    5fa8:	30 41       	ret			

00005faa <printf>:
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
    5faa:	2f 43       	mov	#2,	r15	;r3 As==10
    5fac:	0f 51       	add	r1,	r15	
    5fae:	3e 4f       	mov	@r15+,	r14	
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()

// variaveis leitura radio raw
    5fb0:	0d 4f       	mov	r15,	r13	
    5fb2:	3f 40 80 44 	mov	#17536,	r15	;#0x4480
    5fb6:	b0 12 20 60 	call	#0x6020	
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    5fba:	30 41       	ret			

00005fbc <PRINT>:
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
            MenuStep = SELECT;
            break;
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
    5fbc:	0b 12       	push	r11		
    5fbe:	0a 12       	push	r10		
    5fc0:	0a 4f       	mov	r15,	r10	
    5fc2:	0b 4e       	mov	r14,	r11	
            printf("SELECT            ");
    5fc4:	0e 93       	tst	r14		
    5fc6:	02 20       	jnz	$+6      	;abs 0x5fcc
            printf(">");
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
    5fc8:	1f 43       	mov	#1,	r15	;r3 As==01
    5fca:	0d 3c       	jmp	$+28     	;abs 0x5fe6
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
            printf("SELECT            ");
            
            lcd_goto(0,(int)MenuOption + 2);
    5fcc:	6f 4a       	mov.b	@r10,	r15	
    5fce:	8f 11       	sxt	r15		
    5fd0:	1a 53       	inc	r10		
    5fd2:	92 12 b4 11 	call	&0x11b4	
    5fd6:	0f 93       	tst	r15		
    5fd8:	05 38       	jl	$+12     	;abs 0x5fe4
            printf(">");
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    5fda:	92 53 b2 11 	inc	&0x11b2	
            MenuStep = SELECT;
            break;
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
            printf("SELECT            ");
    5fde:	3b 53       	add	#-1,	r11	;r3 As==11
    5fe0:	f5 23       	jnz	$-20     	;abs 0x5fcc
    5fe2:	f2 3f       	jmp	$-26     	;abs 0x5fc8
            
            lcd_goto(0,(int)MenuOption + 2);
            printf(">");
            
    5fe4:	3f 43       	mov	#-1,	r15	;r3 As==11
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
    5fe6:	3a 41       	pop	r10		
    5fe8:	3b 41       	pop	r11		
    5fea:	30 41       	ret			

00005fec <__write_pad>:
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuStep = WAIT_PITCH_UP;
                }
            }
            
            // select
    5fec:	0b 12       	push	r11		
    5fee:	0a 12       	push	r10		
    5ff0:	09 12       	push	r9		
    5ff2:	49 4f       	mov.b	r15,	r9	
    5ff4:	4b 4e       	mov.b	r14,	r11	
            if(ChannelInput[ROLL_CH] > 3500){
    5ff6:	5e 93       	cmp.b	#1,	r14	;r3 As==01
    5ff8:	0c 38       	jl	$+26     	;abs 0x6012
    5ffa:	4a 4f       	mov.b	r15,	r10	
    5ffc:	8a 11       	sxt	r10		
                MenuStep = WAIT_ROLL_LEFT;
            }
    5ffe:	0f 4a       	mov	r10,	r15	
    6000:	92 12 b4 11 	call	&0x11b4	
    6004:	0f 93       	tst	r15		
    6006:	07 38       	jl	$+16     	;abs 0x6016
            
            break;
        
        case WAIT_PITCH_DOWN:
    6008:	92 53 b2 11 	inc	&0x11b2	
                    MenuStep = WAIT_PITCH_UP;
                }
            }
            
            // select
            if(ChannelInput[ROLL_CH] > 3500){
    600c:	7b 53       	add.b	#-1,	r11	;r3 As==11
    600e:	5b 93       	cmp.b	#1,	r11	;r3 As==01
    6010:	f6 37       	jge	$-18     	;abs 0x5ffe
            
            break;
        
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
            printf("WAIT PITCH DOWN    ");
    6012:	4f 49       	mov.b	r9,	r15	
    6014:	01 3c       	jmp	$+4      	;abs 0x6018
            // select
            if(ChannelInput[ROLL_CH] > 3500){
                MenuStep = WAIT_ROLL_LEFT;
            }
            
            break;
    6016:	3f 43       	mov	#-1,	r15	;r3 As==11
        
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
            printf("WAIT PITCH DOWN    ");
            
    6018:	39 41       	pop	r9		
    601a:	3a 41       	pop	r10		
    601c:	3b 41       	pop	r11		
    601e:	30 41       	ret			

00006020 <vuprintf>:
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    6020:	0b 12       	push	r11		
    6022:	0a 12       	push	r10		
    6024:	09 12       	push	r9		
    6026:	08 12       	push	r8		
    6028:	07 12       	push	r7		
    602a:	06 12       	push	r6		
    602c:	05 12       	push	r5		
    602e:	04 12       	push	r4		
    6030:	31 80 3c 00 	sub	#60,	r1	;#0x003c
    6034:	05 4d       	mov	r13,	r5	
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
            printf("WAIT CH7 BACK    ");
    6036:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    603a:	81 43 32 00 	mov	#0,	50(r1)	;r3 As==00, 0x0032(r1)
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}

    603e:	82 43 b2 11 	mov	#0,	&0x11b2	;r3 As==00
void process_option(){
    6042:	82 4f b4 11 	mov	r15,	&0x11b4	
    int i;
    switch (MenuOption){
    6046:	06 4e       	mov	r14,	r6	
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
    6048:	0f 46       	mov	r6,	r15	
    604a:	67 46       	mov.b	@r6,	r7	
    604c:	47 93       	tst.b	r7		
    604e:	0a 24       	jz	$+22     	;abs 0x6064
    6050:	77 90 25 00 	cmp.b	#37,	r7	;#0x0025
    6054:	07 24       	jz	$+16     	;abs 0x6064
    6056:	16 53       	inc	r6		
    6058:	67 46       	mov.b	@r6,	r7	
    605a:	47 93       	tst.b	r7		
    605c:	03 24       	jz	$+8      	;abs 0x6064
    605e:	77 90 25 00 	cmp.b	#37,	r7	;#0x0025
    6062:	f9 23       	jnz	$-12     	;abs 0x6056
            process_analog_menu();
            break;
    6064:	0d 46       	mov	r6,	r13	
    6066:	0d 8f       	sub	r15,	r13	
    6068:	02 24       	jz	$+6      	;abs 0x606e
    606a:	30 40 ae 65 	br	#0x65ae	
        
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    606e:	47 93       	tst.b	r7		
    6070:	02 20       	jnz	$+6      	;abs 0x6076
    6072:	30 40 bc 65 	br	#0x65bc	
                lcd_goto(8,8);
                printf("%d", i);
    6076:	16 53       	inc	r6		
                delayms(1000);
            }
    6078:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
            MotorArmed = TRUE;
    607c:	c1 43 35 00 	mov.b	#0,	53(r1)	;r3 As==00, 0x0035(r1)
            MenuVisible = FALSE;
    6080:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
            lcd_clear(BLACK);
    6084:	7b 43       	mov.b	#-1,	r11	;r3 As==11
            MenuStep = DISPLAY;
    6086:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
            break;
            
        case INITIAL_SETTINGS:
    608a:	67 46       	mov.b	@r6,	r7	
    608c:	16 53       	inc	r6		
            // seta o flag initial setup
            break;          
    608e:	77 90 75 00 	cmp.b	#117,	r7	;#0x0075
    6092:	02 20       	jnz	$+6      	;abs 0x6098
    6094:	30 40 88 65 	br	#0x6588	
    6098:	4f 47       	mov.b	r7,	r15	
    609a:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    609e:	7f 90 78 00 	cmp.b	#120,	r15	;#0x0078
    60a2:	02 20       	jnz	$+6      	;abs 0x60a8
    60a4:	30 40 88 65 	br	#0x6588	

void draw_analog_graph(void){
    lcd_goto(4,4);
    printf("FAZER");
}

    60a8:	77 90 20 00 	cmp.b	#32,	r7	;#0x0020
    60ac:	02 20       	jnz	$+6      	;abs 0x60b2
    60ae:	30 40 74 65 	br	#0x6574	

            refresh_analog_menu();
            MenuAnalog = SELECT;
            break;
        case SELECT:
            lcd_goto(0,14);
    60b2:	77 90 23 00 	cmp.b	#35,	r7	;#0x0023
    60b6:	02 20       	jnz	$+6      	;abs 0x60bc
    60b8:	30 40 6c 65 	br	#0x656c	
            printf("SELECT            ");

            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
    60bc:	77 90 2a 00 	cmp.b	#42,	r7	;#0x002a
    60c0:	02 20       	jnz	$+6      	;abs 0x60c6
    60c2:	30 40 50 65 	br	#0x6550	
    60c6:	77 90 2d 00 	cmp.b	#45,	r7	;#0x002d
    60ca:	02 20       	jnz	$+6      	;abs 0x60d0
    60cc:	30 40 40 65 	br	#0x6540	
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
                }
            }
            
            break;
    60d0:	77 90 2b 00 	cmp.b	#43,	r7	;#0x002b
    60d4:	02 20       	jnz	$+6      	;abs 0x60da
    60d6:	30 40 36 65 	br	#0x6536	
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
            printf("WAIT PITCH DOWN    ");

            if(ChannelInput[PITCH_CH] > 2500){
    60da:	77 90 2e 00 	cmp.b	#46,	r7	;#0x002e
    60de:	02 20       	jnz	$+6      	;abs 0x60e4
    60e0:	30 40 d0 64 	br	#0x64d0	
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
    60e4:	77 90 30 00 	cmp.b	#48,	r7	;#0x0030
    60e8:	02 20       	jnz	$+6      	;abs 0x60ee
    60ea:	30 40 ba 64 	br	#0x64ba	
                    }
                    MenuAnalog = DISPLAY;
                }
            break;
            
        case WAIT_ROLL_LEFT:
    60ee:	4f 47       	mov.b	r7,	r15	
    60f0:	7f 50 cf ff 	add.b	#-49,	r15	;#0xffcf
    60f4:	7f 90 09 00 	cmp.b	#9,	r15	;#0x0009
    60f8:	1a 2c       	jc	$+54     	;abs 0x612e
                lcd_goto(0,14);
                printf("WAIT ROLL LEFT   ");
    60fa:	0d 43       	clr	r13		
        
                if(ChannelInput[PITCH_CH] > 2500){
                   if(AnalogSelect < 7){
    60fc:	0f 4d       	mov	r13,	r15	
    60fe:	0f 5f       	rla	r15		
    6100:	0f 5f       	rla	r15		
    6102:	0e 4d       	mov	r13,	r14	
    6104:	0e 5e       	rla	r14		
    6106:	0d 4f       	mov	r15,	r13	
    6108:	0d 5e       	add	r14,	r13	
    610a:	0d 5e       	add	r14,	r13	
    610c:	0d 5e       	add	r14,	r13	
    610e:	4f 47       	mov.b	r7,	r15	
    6110:	8f 11       	sxt	r15		
    6112:	0d 5f       	add	r15,	r13	
    6114:	3d 50 d0 ff 	add	#-48,	r13	;#0xffd0
                        AnalogSelect++;
    6118:	67 46       	mov.b	@r6,	r7	
    611a:	16 53       	inc	r6		
                    }
    611c:	4f 47       	mov.b	r7,	r15	
    611e:	7f 50 d0 ff 	add.b	#-48,	r15	;#0xffd0
    6122:	7f 90 0a 00 	cmp.b	#10,	r15	;#0x000a
    6126:	ea 2b       	jnc	$-42     	;abs 0x60fc
                    MenuAnalog = DISPLAY;

    6128:	c1 4d 2f 00 	mov.b	r13,	47(r1)	;0x002f(r1)
                }
    612c:	b0 3f       	jmp	$-158    	;abs 0x608e
            break;
            
    612e:	77 90 68 00 	cmp.b	#104,	r7	;#0x0068
    6132:	bf 25       	jz	$+896    	;abs 0x64b2
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
    6134:	77 90 6c 00 	cmp.b	#108,	r7	;#0x006c
    6138:	03 20       	jnz	$+8      	;abs 0x6140
}

    613a:	d1 d3 2e 00 	bis.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
void refresh_analog_menu(void){
    613e:	a5 3f       	jmp	$-180    	;abs 0x608a
    int i;
    lcd_goto(1,12);
    6140:	77 90 63 00 	cmp.b	#99,	r7	;#0x0063
    6144:	af 25       	jz	$+864    	;abs 0x64a4
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
            color_fore = BLACK;
        }
        else{                           // senao
    6146:	77 90 44 00 	cmp.b	#68,	r7	;#0x0044
    614a:	a9 25       	jz	$+852    	;abs 0x649e
    614c:	77 90 64 00 	cmp.b	#100,	r7	;#0x0064
    6150:	7a 25       	jz	$+758    	;abs 0x6446
    6152:	77 90 69 00 	cmp.b	#105,	r7	;#0x0069
    6156:	77 25       	jz	$+752    	;abs 0x6446
        printf(" ");
    }
    printf("                    ");
}

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    6158:	77 90 4f 00 	cmp.b	#79,	r7	;#0x004f
    615c:	71 25       	jz	$+740    	;abs 0x6440
    615e:	77 90 6f 00 	cmp.b	#111,	r7	;#0x006f
    6162:	6b 25       	jz	$+728    	;abs 0x643a
    RCCounter++;
    MenuCounter++;
}

void clock_init(void)
{
    6164:	77 90 70 00 	cmp.b	#112,	r7	;#0x0070
    6168:	59 25       	jz	$+692    	;abs 0x641c
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    
    DCOCTL = 0x77;      
        /* 
     * Basic Clock System Control 1
    616a:	77 90 73 00 	cmp.b	#115,	r7	;#0x0073
    616e:	1a 25       	jz	$+566    	;abs 0x63a4
    P1IFG = 0;

    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;

}
    6170:	77 90 55 00 	cmp.b	#85,	r7	;#0x0055
    6174:	14 25       	jz	$+554    	;abs 0x639e
    6176:	77 90 75 00 	cmp.b	#117,	r7	;#0x0075
    617a:	0d 25       	jz	$+540    	;abs 0x6396
void timer_a3_init(void)
{
    /* 
     * TACCTL0, Capture/Compare Control Register 0
     * 
     * CM_0 -- No Capture
    617c:	77 90 58 00 	cmp.b	#88,	r7	;#0x0058
    6180:	8a 24       	jz	$+278    	;abs 0x6296
    6182:	77 90 78 00 	cmp.b	#120,	r7	;#0x0078
    6186:	87 24       	jz	$+272    	;abs 0x6296
        return;
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    6188:	47 93       	tst.b	r7		
    618a:	02 20       	jnz	$+6      	;abs 0x6190
    618c:	30 40 bc 65 	br	#0x65bc	
    fourbytes ValorAux;        
    
    lcd_goto(2,5);
    6190:	81 41 2c 00 	mov	r1,	44(r1)	;0x002c(r1)
    color_fore = RED;
    6194:	c1 47 00 00 	mov.b	r7,	0(r1)	;0x0000(r1)
    printf("MOVE STICKS\nALL DIRECTIONS");
    6198:	59 43       	mov.b	#1,	r9	;r3 As==01
    color_fore = LIME;
    619a:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    619e:	4b 49       	mov.b	r9,	r11	
                PPMMax[i] = PPMValue[i];
            }
    61a0:	5a 41 35 00 	mov.b	53(r1),	r10	;0x0035(r1)
    61a4:	4a 89       	sub.b	r9,	r10	
            if(PPMMin[i] > PPMValue[i]){
    61a6:	75 30       	jn	$+236    	;abs 0x6292
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    61a8:	5e 41 2a 00 	mov.b	42(r1),	r14	;0x002a(r1)
    61ac:	4e 93       	tst.b	r14		
    61ae:	6b 24       	jz	$+216    	;abs 0x6286
    lcd_clear(BLACK);
    
    61b0:	5b 53       	inc.b	r11		
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    61b2:	4b 5a       	add.b	r10,	r11	
    if(EEPROMFound){
        i2c_change_address(EEPROM_I2C_ADDR);
        
    61b4:	58 41 2e 00 	mov.b	46(r1),	r8	;0x002e(r1)
    61b8:	78 f0 30 00 	and.b	#48,	r8	;#0x0030
    61bc:	13 20       	jnz	$+40     	;abs 0x61e4
        // grava yaw slope 
        ValorAux.f = PPMSlope[YAW_CH];
    61be:	5d 41 2f 00 	mov.b	47(r1),	r13	;0x002f(r1)
    61c2:	8d 11       	sxt	r13		
    61c4:	4f 4b       	mov.b	r11,	r15	
    61c6:	8f 11       	sxt	r15		
    61c8:	0d 8f       	sub	r15,	r13	
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    61ca:	1d 93       	cmp	#1,	r13	;r3 As==01
    61cc:	0b 38       	jl	$+24     	;abs 0x61e4
        
        delayms(100);
    61ce:	4e 4d       	mov.b	r13,	r14	
    61d0:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    61d4:	b0 12 ec 5f 	call	#0x5fec	
    61d8:	0f 93       	tst	r15		
    61da:	02 34       	jge	$+6      	;abs 0x61e0
    61dc:	30 40 bc 65 	br	#0x65bc	
    61e0:	5e 41 2a 00 	mov.b	42(r1),	r14	;0x002a(r1)
        
        // grava throttle slope 
        ValorAux.f = PPMSlope[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        
    61e4:	4e 93       	tst.b	r14		
    61e6:	4a 20       	jnz	$+150    	;abs 0x627c
        delayms(100);
        
        // grava pitch slope 
        ValorAux.f = PPMSlope[PITCH_CH];
    61e8:	f1 b0 40 00 	bit.b	#64,	46(r1)	;#0x0040, 0x002e(r1)
    61ec:	2e 00 
    61ee:	0f 24       	jz	$+32     	;abs 0x620e
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
        
    61f0:	f1 40 30 00 	mov.b	#48,	40(r1)	;#0x0030, 0x0028(r1)
    61f4:	28 00 
        delayms(100);
    61f6:	c1 47 29 00 	mov.b	r7,	41(r1)	;0x0029(r1)
        
    61fa:	2e 43       	mov	#2,	r14	;r3 As==10
    61fc:	0f 41       	mov	r1,	r15	
    61fe:	3f 50 28 00 	add	#40,	r15	;#0x0028
    6202:	b0 12 bc 5f 	call	#0x5fbc	
    6206:	0f 93       	tst	r15		
    6208:	02 34       	jge	$+6      	;abs 0x620e
    620a:	30 40 bc 65 	br	#0x65bc	
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
        
    620e:	78 90 20 00 	cmp.b	#32,	r8	;#0x0020
    6212:	24 24       	jz	$+74     	;abs 0x625c
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    6214:	4e 4a       	mov.b	r10,	r14	
    6216:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    621a:	b0 12 ec 5f 	call	#0x5fec	
    621e:	0f 93       	tst	r15		
    6220:	cd 39       	jl	$+924    	;abs 0x65bc
        i2c_write16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
        
        delayms(100);
    6222:	4f 49       	mov.b	r9,	r15	
    6224:	8f 11       	sxt	r15		
    6226:	0e 4f       	mov	r15,	r14	
    6228:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    622c:	b0 12 bc 5f 	call	#0x5fbc	
    6230:	0f 93       	tst	r15		
    6232:	c4 39       	jl	$+906    	;abs 0x65bc
        
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
    6234:	f1 b0 10 00 	bit.b	#16,	46(r1)	;#0x0010, 0x002e(r1)
    6238:	2e 00 
    623a:	06 27       	jz	$-498    	;abs 0x6048
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
        
    623c:	5d 41 2f 00 	mov.b	47(r1),	r13	;0x002f(r1)
    6240:	8d 11       	sxt	r13		
    6242:	4f 4b       	mov.b	r11,	r15	
    6244:	8f 11       	sxt	r15		
    6246:	0d 8f       	sub	r15,	r13	
        delayms(100);
    6248:	1d 93       	cmp	#1,	r13	;r3 As==01
    624a:	fe 3a       	jl	$-514    	;abs 0x6048
        
        // grava yaw offset 
    624c:	4e 4d       	mov.b	r13,	r14	
    624e:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    6252:	b0 12 ec 5f 	call	#0x5fec	
    6256:	0f 93       	tst	r15		
    6258:	f7 36       	jge	$-528    	;abs 0x6048
    625a:	b0 3d       	jmp	$+866    	;abs 0x65bc
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
    625c:	5d 41 2f 00 	mov.b	47(r1),	r13	;0x002f(r1)
    6260:	8d 11       	sxt	r13		
    6262:	4f 4b       	mov.b	r11,	r15	
    6264:	8f 11       	sxt	r15		
    6266:	0d 8f       	sub	r15,	r13	
        // grava ch5 slope 
    6268:	1d 93       	cmp	#1,	r13	;r3 As==01
    626a:	d4 3b       	jl	$-86     	;abs 0x6214
        ValorAux.f = PPMSlope[CH5_CH];
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    626c:	4e 4d       	mov.b	r13,	r14	
    626e:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    6272:	b0 12 ec 5f 	call	#0x5fec	
    6276:	0f 93       	tst	r15		
    6278:	cd 37       	jge	$-100    	;abs 0x6214
    627a:	a0 3d       	jmp	$+834    	;abs 0x65bc
        // grava throttle slope 
        ValorAux.f = PPMSlope[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
    627c:	1e 43       	mov	#1,	r14	;r3 As==01
    627e:	0f 41       	mov	r1,	r15	
    6280:	3f 50 2a 00 	add	#42,	r15	;#0x002a
    6284:	be 3f       	jmp	$-130    	;abs 0x6202
    }
    
    lcd_clear(BLACK);
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
    6286:	f1 b0 40 00 	bit.b	#64,	46(r1)	;#0x0040, 0x002e(r1)
    628a:	2e 00 
    628c:	92 27       	jz	$-218    	;abs 0x61b2
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }
    628e:	6b 53       	incd.b	r11		
    6290:	90 3f       	jmp	$-222    	;abs 0x61b2
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
                PPMMin[i] = PPMValue[i];
            }
    6292:	4a 43       	clr.b	r10		
    6294:	89 3f       	jmp	$-236    	;abs 0x61a8
    /* 
     * TACCTL0, Capture/Compare Control Register 0
     * 
     * CM_0 -- No Capture
     * CCIS_0 -- CCIxA
     * ~SCS -- Asynchronous Capture
    6296:	f1 40 10 00 	mov.b	#16,	52(r1)	;#0x0010, 0x0034(r1)
    629a:	34 00 
     * ~SCCI -- Latched capture signal (read)
     * ~CAP -- Compare mode
    629c:	f1 b2 2e 00 	bit.b	#8,	46(r1)	;r2 As==11, 0x002e(r1)
    62a0:	09 24       	jz	$+20     	;abs 0x62b4
    62a2:	81 93 30 00 	tst	48(r1)		;0x0030(r1)
    62a6:	03 20       	jnz	$+8      	;abs 0x62ae
    62a8:	81 93 32 00 	tst	50(r1)		;0x0032(r1)
    62ac:	03 24       	jz	$+8      	;abs 0x62b4
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
    62ae:	f1 d0 40 00 	bis.b	#64,	46(r1)	;#0x0040, 0x002e(r1)
    62b2:	2e 00 
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    62b4:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;

    /* 
     * TACTL, Timer_A3 Control Register
     * 
    62b8:	c1 4b 35 00 	mov.b	r11,	53(r1)	;0x0035(r1)
    62bc:	4b 93       	tst.b	r11		
    62be:	03 38       	jl	$+8      	;abs 0x62c6
     * TASSEL_2 -- SMCLK
    62c0:	f1 f0 df ff 	and.b	#-33,	46(r1)	;#0xffdf, 0x002e(r1)
    62c4:	2e 00 
     * MC_1 -- Up Mode
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
}

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    62c6:	0f 41       	mov	r1,	r15	
    62c8:	3f 50 28 00 	add	#40,	r15	;#0x0028
    62cc:	81 4f 2c 00 	mov	r15,	44(r1)	;0x002c(r1)
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    62d0:	81 93 30 00 	tst	48(r1)		;0x0030(r1)
    62d4:	06 20       	jnz	$+14     	;abs 0x62e2
    62d6:	81 93 32 00 	tst	50(r1)		;0x0032(r1)
    62da:	03 20       	jnz	$+8      	;abs 0x62e2
    62dc:	c1 93 35 00 	tst.b	53(r1)		;0x0035(r1)
    62e0:	3e 24       	jz	$+126    	;abs 0x635e
    62e2:	d1 41 34 00 	mov.b	52(r1),	56(r1)	;0x0034(r1), 0x0038(r1)
    62e6:	38 00 
    62e8:	c1 43 39 00 	mov.b	#0,	57(r1)	;r3 As==00, 0x0039(r1)
    62ec:	81 43 3a 00 	mov	#0,	58(r1)	;r3 As==00, 0x003a(r1)
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
            if(!(P1IES & PPM_ch_counter)){ // low to high
    62f0:	c1 43 36 00 	mov.b	#0,	54(r1)	;r3 As==00, 0x0036(r1)
    62f4:	1e 41 30 00 	mov	48(r1),	r14	;0x0030(r1)
    62f8:	1f 41 32 00 	mov	50(r1),	r15	;0x0032(r1)
    62fc:	1e 81 38 00 	sub	56(r1),	r14	;0x0038(r1)
    6300:	1f 71 3a 00 	subc	58(r1),	r15	;0x003a(r1)
    6304:	02 28       	jnc	$+6      	;abs 0x630a
    6306:	d1 43 36 00 	mov.b	#1,	54(r1)	;r3 As==01, 0x0036(r1)
                TimeUpEdge[channel_num] = PPM_aux;
    630a:	1c 41 30 00 	mov	48(r1),	r12	;0x0030(r1)
    630e:	1d 41 32 00 	mov	50(r1),	r13	;0x0032(r1)
    6312:	1a 41 38 00 	mov	56(r1),	r10	;0x0038(r1)
    6316:	1b 41 3a 00 	mov	58(r1),	r11	;0x003a(r1)
    631a:	b0 12 7a 66 	call	#0x667a	
    631e:	44 4e       	mov.b	r14,	r4	
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
    6320:	7e 90 0a 00 	cmp.b	#10,	r14	;#0x000a
    6324:	30 2c       	jc	$+98     	;abs 0x6386
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
    6326:	74 50 30 00 	add.b	#48,	r4	;#0x0030
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
    632a:	b1 53 2c 00 	add	#-1,	44(r1)	;r3 As==11, 0x002c(r1)
    632e:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    6332:	cf 44 00 00 	mov.b	r4,	0(r15)	;0x0000(r15)
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
    6336:	1c 41 30 00 	mov	48(r1),	r12	;0x0030(r1)
    633a:	1d 41 32 00 	mov	50(r1),	r13	;0x0032(r1)
    633e:	1a 41 38 00 	mov	56(r1),	r10	;0x0038(r1)
    6342:	1b 41 3a 00 	mov	58(r1),	r11	;0x003a(r1)
    6346:	b0 12 7a 66 	call	#0x667a	
    634a:	81 4c 30 00 	mov	r12,	48(r1)	;0x0030(r1)
    634e:	81 4d 32 00 	mov	r13,	50(r1)	;0x0032(r1)
        }
    6352:	c1 93 36 00 	tst.b	54(r1)		;0x0036(r1)
    6356:	cc 23       	jnz	$-102    	;abs 0x62f0
        channel_num++;
    }
}

    6358:	f1 92 34 00 	cmp.b	#8,	52(r1)	;r2 As==11, 0x0034(r1)
    635c:	06 24       	jz	$+14     	;abs 0x636a
void calibrate_radio(void){
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    635e:	49 41       	mov.b	r1,	r9	
    6360:	59 81 2c 00 	sub.b	44(r1),	r9	;0x002c(r1)
    6364:	79 50 28 00 	add.b	#40,	r9	;#0x0028
    6368:	1a 3f       	jmp	$-458    	;abs 0x619e
    636a:	f1 b2 2e 00 	bit.b	#8,	46(r1)	;r2 As==11, 0x002e(r1)
    636e:	f7 27       	jz	$-16     	;abs 0x635e
    6370:	74 90 30 00 	cmp.b	#48,	r4	;#0x0030
    6374:	f4 27       	jz	$-22     	;abs 0x635e
        }
        channel_num++;
    }
}

void calibrate_radio(void){
    6376:	b1 53 2c 00 	add	#-1,	44(r1)	;r3 As==11, 0x002c(r1)
    637a:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    637e:	ff 40 30 00 	mov.b	#48,	0(r15)	;#0x0030, 0x0000(r15)
    6382:	00 00 
    6384:	ec 3f       	jmp	$-38     	;abs 0x635e
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    6386:	74 50 57 00 	add.b	#87,	r4	;#0x0057
                }
    638a:	77 90 58 00 	cmp.b	#88,	r7	;#0x0058
    638e:	cd 23       	jnz	$-100    	;abs 0x632a
    6390:	74 f0 df ff 	and.b	#-33,	r4	;#0xffdf
    6394:	ca 3f       	jmp	$-106    	;abs 0x632a

}

void timer_a3_init(void)
{
    /* 
    6396:	f1 40 0a 00 	mov.b	#10,	52(r1)	;#0x000a, 0x0034(r1)
    639a:	34 00 
     * TACCTL0, Capture/Compare Control Register 0
    639c:	8b 3f       	jmp	$-232    	;abs 0x62b4
    P1IE = PPM_P1MASK;

}

void timer_a3_init(void)
{
    639e:	d1 d3 2e 00 	bis.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    63a2:	f9 3f       	jmp	$-12     	;abs 0x6396
    
    DCOCTL = 0x77;      
        /* 
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
    63a4:	0f 45       	mov	r5,	r15	
    63a6:	25 53       	incd	r5		
    63a8:	a1 4f 2c 00 	mov	@r15,	44(r1)	;0x002c(r1)
    63ac:	81 93 2c 00 	tst	44(r1)		;0x002c(r1)
    63b0:	1e 24       	jz	$+62     	;abs 0x63ee

    /* 
     * Basic Clock System Control 3
     * 
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
    63b2:	4b 93       	tst.b	r11		
    63b4:	11 38       	jl	$+36     	;abs 0x63d8
     */
    BCSCTL3 = 0xa0;
}

void p1_init(){
        /* Port 1 Output Register */
    63b6:	4f 4b       	mov.b	r11,	r15	
    63b8:	8f 11       	sxt	r15		
    63ba:	0d 4f       	mov	r15,	r13	
    63bc:	0e 43       	clr	r14		
    63be:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    63c2:	b0 12 04 66 	call	#0x6604	
    P1OUT = PPM_P1MASK;

    63c6:	0f 93       	tst	r15		
    63c8:	05 24       	jz	$+12     	;abs 0x63d4
    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;
    63ca:	49 4f       	mov.b	r15,	r9	
    63cc:	59 81 2c 00 	sub.b	44(r1),	r9	;0x002c(r1)

    63d0:	4b 99       	cmp.b	r9,	r11	
    63d2:	e3 36       	jge	$-568    	;abs 0x619a
    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida

    /* Port 1 Interrupt Flag Register */
    63d4:	49 4b       	mov.b	r11,	r9	
    63d6:	e1 3e       	jmp	$-572    	;abs 0x619a
    P1IFG = 0;

    /* Port 1 Interrupt Enable Register */
    63d8:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    63dc:	1f 83       	dec	r15		
    63de:	1f 53       	inc	r15		
    63e0:	cf 93 00 00 	tst.b	0(r15)		;0x0000(r15)
    63e4:	fc 23       	jnz	$-6      	;abs 0x63de
    63e6:	49 4f       	mov.b	r15,	r9	
    63e8:	59 81 2c 00 	sub.b	44(r1),	r9	;0x002c(r1)
    P1IE = PPM_P1MASK;
    63ec:	d6 3e       	jmp	$-594    	;abs 0x619a
        /* 
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
    63ee:	81 41 2c 00 	mov	r1,	44(r1)	;0x002c(r1)
     */
    63f2:	f1 40 28 00 	mov.b	#40,	0(r1)	;#0x0028, 0x0000(r1)
    63f6:	00 00 
    BCSCTL1 = 0xcf;     
    63f8:	f1 40 6e 00 	mov.b	#110,	1(r1)	;#0x006e, 0x0001(r1)
    63fc:	01 00 

    63fe:	f1 40 75 00 	mov.b	#117,	2(r1)	;#0x0075, 0x0002(r1)
    6402:	02 00 
    /* 
    6404:	f1 40 6c 00 	mov.b	#108,	3(r1)	;#0x006c, 0x0003(r1)
    6408:	03 00 
    640a:	f1 40 6c 00 	mov.b	#108,	4(r1)	;#0x006c, 0x0004(r1)
    640e:	04 00 
     * Basic Clock System Control 3
    6410:	f1 40 29 00 	mov.b	#41,	5(r1)	;#0x0029, 0x0005(r1)
    6414:	05 00 
     * 
    6416:	c1 43 06 00 	mov.b	#0,	6(r1)	;r3 As==00, 0x0006(r1)
    641a:	cb 3f       	jmp	$-104    	;abs 0x63b2
     * DIVM_0 -- Divide by 1
     * ~SELS -- DCOCLK
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
    641c:	0f 45       	mov	r5,	r15	
    641e:	25 53       	incd	r5		
    6420:	a1 4f 30 00 	mov	@r15,	48(r1)	;0x0030(r1)
    6424:	81 43 32 00 	mov	#0,	50(r1)	;r3 As==00, 0x0032(r1)
     */
    6428:	f1 40 10 00 	mov.b	#16,	52(r1)	;#0x0010, 0x0034(r1)
    642c:	34 00 
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    642e:	f1 d0 40 00 	bis.b	#64,	46(r1)	;#0x0040, 0x002e(r1)
    6432:	2e 00 
    
    6434:	77 40 78 00 	mov.b	#120,	r7	;#0x0078
    DCOCTL = 0x77;      
    6438:	3d 3f       	jmp	$-388    	;abs 0x62b4

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    RCCounter++;
    MenuCounter++;
}
    643a:	f1 42 34 00 	mov.b	#8,	52(r1)	;r2 As==11, 0x0034(r1)

    643e:	3a 3f       	jmp	$-394    	;abs 0x62b4
}

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    RCCounter++;
    MenuCounter++;
    6440:	d1 d3 2e 00 	bis.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    6444:	fa 3f       	jmp	$-10     	;abs 0x643a
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
    6446:	d1 b3 2e 00 	bit.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    644a:	19 24       	jz	$+52     	;abs 0x647e
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
    644c:	0f 45       	mov	r5,	r15	
    644e:	25 52       	add	#4,	r5	;r2 As==10
    6450:	b1 4f 30 00 	mov	@r15+,	48(r1)	;0x0030(r1)
    6454:	b1 4f 32 00 	mov	@r15+,	50(r1)	;0x0032(r1)
                color_fore = BLACK;
            }
        }                               
        
        printf("%d",i);
        // ajusta as cores para o normal
    6458:	81 93 32 00 	tst	50(r1)		;0x0032(r1)
    645c:	04 38       	jl	$+10     	;abs 0x6466
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
    645e:	f1 40 0a 00 	mov.b	#10,	52(r1)	;#0x000a, 0x0034(r1)
    6462:	34 00 
}
    6464:	29 3f       	jmp	$-428    	;abs 0x62b8
        }                               
        
        printf("%d",i);
        // ajusta as cores para o normal
        color_fore = LIME;
        color_back = BLACK;
    6466:	b1 e3 30 00 	xor	#-1,	48(r1)	;r3 As==11, 0x0030(r1)
    646a:	b1 e3 32 00 	xor	#-1,	50(r1)	;r3 As==11, 0x0032(r1)
    646e:	91 53 30 00 	inc	48(r1)		;0x0030(r1)
    6472:	81 63 32 00 	adc	50(r1)		;0x0032(r1)
        printf(" ");
    6476:	f1 40 2d 00 	mov.b	#45,	42(r1)	;#0x002d, 0x002a(r1)
    647a:	2a 00 
    647c:	f0 3f       	jmp	$-30     	;abs 0x645e
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
                color_fore = BLACK;
            }
    647e:	0f 45       	mov	r5,	r15	
    6480:	25 53       	incd	r5		
        }                               
    6482:	a1 4f 30 00 	mov	@r15,	48(r1)	;0x0030(r1)
    6486:	91 41 30 00 	mov	48(r1),	50(r1)	;0x0030(r1), 0x0032(r1)
    648a:	32 00 
    648c:	91 51 32 00 	rla	50(r1)		;0x0032(r1)
    6490:	32 00 
    6492:	91 71 32 00 	subc	50(r1),	50(r1)	;0x0032(r1), 0x0032(r1)
    6496:	32 00 
    6498:	b1 e3 32 00 	xor	#-1,	50(r1)	;r3 As==11, 0x0032(r1)
    649c:	dd 3f       	jmp	$-68     	;abs 0x6458
            color_fore = BLACK;
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
    649e:	d1 d3 2e 00 	bis.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    64a2:	d1 3f       	jmp	$-92     	;abs 0x6446

void refresh_analog_menu(void){
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
    64a4:	81 41 2c 00 	mov	r1,	44(r1)	;0x002c(r1)
    64a8:	0f 45       	mov	r5,	r15	
    64aa:	25 53       	incd	r5		
    64ac:	e1 4f 00 00 	mov.b	@r15,	0(r1)	;0x0000(r1)
            color_back = LIME;          // a cor do fundo muda para azul
            color_fore = BLACK;
    64b0:	73 3e       	jmp	$-792    	;abs 0x6198

                }
            break;
            
        case PROCESS_OPTION:
            break;
    64b2:	e1 d2 2e 00 	bis.b	#4,	46(r1)	;r2 As==10, 0x002e(r1)
        case WAIT_CH7_BACK:
    64b6:	30 40 8a 60 	br	#0x608a	

                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
                        AnalogSelect--;
                    }
                    MenuAnalog = DISPLAY;
    64ba:	f1 b0 10 00 	bit.b	#16,	46(r1)	;#0x0010, 0x002e(r1)
    64be:	2e 00 
    64c0:	02 24       	jz	$+6      	;abs 0x64c6
    64c2:	30 40 8a 60 	br	#0x608a	
                }
    64c6:	f1 d0 20 00 	bis.b	#32,	46(r1)	;#0x0020, 0x002e(r1)
    64ca:	2e 00 
            break;
    64cc:	30 40 8a 60 	br	#0x608a	
            lcd_goto(0,14);
            printf("WAIT PITCH DOWN    ");

            if(ChannelInput[PITCH_CH] > 2500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
    64d0:	67 46       	mov.b	@r6,	r7	
    64d2:	16 53       	inc	r6		
    64d4:	77 90 2a 00 	cmp.b	#42,	r7	;#0x002a
    64d8:	24 24       	jz	$+74     	;abs 0x6522
            }
            break;
            
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");
    64da:	0d 43       	clr	r13		

    64dc:	4f 47       	mov.b	r7,	r15	
    64de:	7f 50 d0 ff 	add.b	#-48,	r15	;#0xffd0
    64e2:	7f 90 0a 00 	cmp.b	#10,	r15	;#0x000a
    64e6:	16 2c       	jc	$+46     	;abs 0x6514
            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    64e8:	0f 4d       	mov	r13,	r15	
    64ea:	0f 5f       	rla	r15		
    64ec:	0f 5f       	rla	r15		
    64ee:	0e 4d       	mov	r13,	r14	
    64f0:	0e 5e       	rla	r14		
    64f2:	0d 4f       	mov	r15,	r13	
    64f4:	0d 5e       	add	r14,	r13	
    64f6:	0d 5e       	add	r14,	r13	
    64f8:	0d 5e       	add	r14,	r13	
    64fa:	4f 47       	mov.b	r7,	r15	
    64fc:	8f 11       	sxt	r15		
    64fe:	0d 5f       	add	r15,	r13	
    6500:	3d 50 d0 ff 	add	#-48,	r13	;#0xffd0
                MenuAnalog = DISPLAY;
    6504:	67 46       	mov.b	@r6,	r7	
    6506:	16 53       	inc	r6		
    6508:	4f 47       	mov.b	r7,	r15	
    650a:	7f 50 d0 ff 	add.b	#-48,	r15	;#0xffd0
    650e:	7f 90 0a 00 	cmp.b	#10,	r15	;#0x000a
    6512:	ea 2b       	jnc	$-42     	;abs 0x64e8
            }
            break;
    6514:	0f 4d       	mov	r13,	r15	
    6516:	3d 93       	cmp	#-1,	r13	;r3 As==11
    6518:	01 34       	jge	$+4      	;abs 0x651c
    651a:	3f 43       	mov	#-1,	r15	;r3 As==11
    651c:	4b 4f       	mov.b	r15,	r11	
            
    651e:	30 40 8e 60 	br	#0x608e	

            if(ChannelInput[PITCH_CH] > 2500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
            }
            break;
    6522:	0f 45       	mov	r5,	r15	
    6524:	25 53       	incd	r5		
    6526:	2d 4f       	mov	@r15,	r13	
            
    6528:	0f 4d       	mov	r13,	r15	
    652a:	3d 93       	cmp	#-1,	r13	;r3 As==11
    652c:	01 34       	jge	$+4      	;abs 0x6530
    652e:	3f 43       	mov	#-1,	r15	;r3 As==11
    6530:	4b 4f       	mov.b	r15,	r11	
        case WAIT_PITCH_UP:
    6532:	30 40 8a 60 	br	#0x608a	
                }
            }
            
            break;
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    6536:	f1 40 2b 00 	mov.b	#43,	42(r1)	;#0x002b, 0x002a(r1)
    653a:	2a 00 
            printf("WAIT PITCH DOWN    ");
    653c:	30 40 8a 60 	br	#0x608a	
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
    6540:	f1 d0 10 00 	bis.b	#16,	46(r1)	;#0x0010, 0x002e(r1)
    6544:	2e 00 
                }
    6546:	f1 f0 df ff 	and.b	#-33,	46(r1)	;#0xffdf, 0x002e(r1)
    654a:	2e 00 
            }
    654c:	30 40 8a 60 	br	#0x608a	
                }
            }
            
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
    6550:	0f 45       	mov	r5,	r15	
    6552:	25 53       	incd	r5		
    6554:	e1 4f 2f 00 	mov.b	@r15,	47(r1)	;0x002f(r1)
    6558:	c1 93 2f 00 	tst.b	47(r1)		;0x002f(r1)
    655c:	02 38       	jl	$+6      	;abs 0x6562
    655e:	30 40 8a 60 	br	#0x608a	
            }
            else{
    6562:	f1 e3 2f 00 	xor.b	#-1,	47(r1)	;r3 As==11, 0x002f(r1)
    6566:	d1 53 2f 00 	inc.b	47(r1)		;0x002f(r1)
    656a:	ea 3f       	jmp	$-42     	;abs 0x6540
            MenuAnalog = SELECT;
            break;
        case SELECT:
            lcd_goto(0,14);
            printf("SELECT            ");

    656c:	f1 d2 2e 00 	bis.b	#8,	46(r1)	;r2 As==11, 0x002e(r1)
            // move para os lados
    6570:	30 40 8a 60 	br	#0x608a	
    switch(MenuAnalog){
        case DISPLAY:
            lcd_goto(0,14);
            printf("DISPLAY             ");

            refresh_analog_menu();
    6574:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    6578:	02 24       	jz	$+6      	;abs 0x657e
    657a:	30 40 8a 60 	br	#0x608a	
            MenuAnalog = SELECT;
    657e:	f1 40 20 00 	mov.b	#32,	42(r1)	;#0x0020, 0x002a(r1)
    6582:	2a 00 
            break;
    6584:	30 40 8a 60 	br	#0x608a	
            
        case INITIAL_SETTINGS:
            // seta o flag initial setup
            break;          
    }
    
    6588:	d1 b3 2e 00 	bit.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    658c:	08 24       	jz	$+18     	;abs 0x659e
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
    658e:	0f 45       	mov	r5,	r15	
    6590:	25 52       	add	#4,	r5	;r2 As==10
    6592:	b1 4f 30 00 	mov	@r15+,	48(r1)	;0x0030(r1)
    6596:	b1 4f 32 00 	mov	@r15+,	50(r1)	;0x0032(r1)
    659a:	30 40 a8 60 	br	#0x60a8	
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    }
}

    659e:	0f 45       	mov	r5,	r15	
    65a0:	25 53       	incd	r5		
void draw_analog_graph(void){
    65a2:	a1 4f 30 00 	mov	@r15,	48(r1)	;0x0030(r1)
    65a6:	81 43 32 00 	mov	#0,	50(r1)	;r3 As==00, 0x0032(r1)
    65aa:	30 40 a8 60 	br	#0x60a8	
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
        
        case READY:
    65ae:	0e 4d       	mov	r13,	r14	
    65b0:	b0 12 bc 5f 	call	#0x5fbc	
    65b4:	0f 93       	tst	r15		
    65b6:	02 38       	jl	$+6      	;abs 0x65bc
    65b8:	30 40 6e 60 	br	#0x606e	
        ValorAux.f = PPMOffset[YAW_CH];
        i2c_write16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
        
        delayms(100);
        
        // grava throttle offset 
    65bc:	1f 42 b2 11 	mov	&0x11b2,r15	
    65c0:	31 50 3c 00 	add	#60,	r1	;#0x003c
    65c4:	34 41       	pop	r4		
    65c6:	35 41       	pop	r5		
    65c8:	36 41       	pop	r6		
    65ca:	37 41       	pop	r7		
    65cc:	38 41       	pop	r8		
    65ce:	39 41       	pop	r9		
    65d0:	3a 41       	pop	r10		
    65d2:	3b 41       	pop	r11		
    65d4:	30 41       	ret			

000065d6 <puts>:

MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
    65d6:	0b 12       	push	r11		
    65d8:	0b 4f       	mov	r15,	r11	
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
    65da:	0e 43       	clr	r14		
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
    65dc:	6f 4b       	mov.b	@r11,	r15	
    65de:	4f 93       	tst.b	r15		
    65e0:	09 24       	jz	$+20     	;abs 0x65f4
    65e2:	8f 11       	sxt	r15		
    65e4:	1b 53       	inc	r11		
    65e6:	b0 12 80 44 	call	#0x4480	
    65ea:	0e 4f       	mov	r15,	r14	
    65ec:	0f 93       	tst	r15		
    65ee:	f6 37       	jge	$-18     	;abs 0x65dc
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
    65f0:	0f 4e       	mov	r14,	r15	
    65f2:	06 3c       	jmp	$+14     	;abs 0x6600
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
    65f4:	0e 93       	tst	r14		
    65f6:	fc 3b       	jl	$-6      	;abs 0x65f0
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 
    65f8:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    65fc:	b0 12 80 44 	call	#0x4480	

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    6600:	3b 41       	pop	r11		
    6602:	30 41       	ret			

00006604 <memchr>:
    6604:	0b 12       	push	r11		
    6606:	0b 4f       	mov	r15,	r11	
    6608:	4c 4e       	mov.b	r14,	r12	
    660a:	0d 93       	tst	r13		
    660c:	07 24       	jz	$+16     	;abs 0x661c
    660e:	0e 4b       	mov	r11,	r14	
    6610:	6f 4e       	mov.b	@r14,	r15	
    6612:	1e 53       	inc	r14		
    6614:	4f 9c       	cmp.b	r12,	r15	
    6616:	04 24       	jz	$+10     	;abs 0x6620
    6618:	3d 53       	add	#-1,	r13	;r3 As==11
    661a:	fa 23       	jnz	$-10     	;abs 0x6610
    661c:	0f 43       	clr	r15		
    661e:	02 3c       	jmp	$+6      	;abs 0x6624
    6620:	0f 4e       	mov	r14,	r15	
    6622:	3f 53       	add	#-1,	r15	;r3 As==11
    6624:	3b 41       	pop	r11		
    6626:	30 41       	ret			

00006628 <__udivmodhi4>:
    6628:	0e ee       	xor	r14,	r14	
    662a:	3b 40 11 00 	mov	#17,	r11	;#0x0011
    662e:	05 3c       	jmp	$+12     	;abs 0x663a
    6630:	0d 10       	rrc	r13		
    6632:	0e 6e       	rlc	r14		
    6634:	0e 9a       	cmp	r10,	r14	
    6636:	01 28       	jnc	$+4      	;abs 0x663a
    6638:	0e 8a       	sub	r10,	r14	
    663a:	0c 6c       	rlc	r12		
    663c:	0d 6d       	rlc	r13		
    663e:	1b 83       	dec	r11		
    6640:	f7 23       	jnz	$-16     	;abs 0x6630
    6642:	30 41       	ret			

00006644 <__divmodhi4>:
    6644:	0d 43       	clr	r13		
    6646:	3c b0 00 80 	bit	#-32768,r12	;#0x8000
    664a:	03 28       	jnc	$+8      	;abs 0x6652
    664c:	3c e3       	inv	r12		
    664e:	1c 53       	inc	r12		
    6650:	2d d2       	bis	#4,	r13	;r2 As==10
    6652:	3a b0 00 80 	bit	#-32768,r10	;#0x8000
    6656:	03 28       	jnc	$+8      	;abs 0x665e
    6658:	3a e3       	inv	r10		
    665a:	1a 53       	inc	r10		
    665c:	3d d2       	bis	#8,	r13	;r2 As==11
    665e:	b0 12 28 66 	call	#0x6628	
    6662:	0d 10       	rrc	r13		
    6664:	2d b2       	bit	#4,	r13	;r2 As==10
    6666:	04 28       	jnc	$+10     	;abs 0x6670
    6668:	3e e3       	inv	r14		
    666a:	1e 53       	inc	r14		
    666c:	3c e3       	inv	r12		
    666e:	1c 53       	inc	r12		
    6670:	3d b2       	bit	#8,	r13	;r2 As==11
    6672:	02 28       	jnc	$+6      	;abs 0x6678
    6674:	3c e3       	inv	r12		
    6676:	1c 53       	inc	r12		
    6678:	30 41       	ret			

0000667a <__udivmodsi4>:
    667a:	0f ef       	xor	r15,	r15	
    667c:	0e ee       	xor	r14,	r14	
    667e:	39 40 21 00 	mov	#33,	r9	;#0x0021
    6682:	0a 3c       	jmp	$+22     	;abs 0x6698
    6684:	08 10       	rrc	r8		
    6686:	0e 6e       	rlc	r14		
    6688:	0f 6f       	rlc	r15		
    668a:	0f 9b       	cmp	r11,	r15	
    668c:	05 28       	jnc	$+12     	;abs 0x6698
    668e:	02 20       	jnz	$+6      	;abs 0x6694
    6690:	0e 9a       	cmp	r10,	r14	
    6692:	02 28       	jnc	$+6      	;abs 0x6698
    6694:	0e 8a       	sub	r10,	r14	
    6696:	0f 7b       	subc	r11,	r15	
    6698:	0c 6c       	rlc	r12		
    669a:	0d 6d       	rlc	r13		
    669c:	08 68       	rlc	r8		
    669e:	19 83       	dec	r9		
    66a0:	f1 23       	jnz	$-28     	;abs 0x6684
    66a2:	30 41       	ret			

000066a4 <__stop_progExec__>:
    66a4:	ff 3f       	jmp	$+0      	;abs 0x66a4
Disassembly of section .data:

00001100 <ControlCounter>:
	...

00001102 <RCCounter>:
	...

00001104 <MenuCounter>:
	...

00001106 <StatusFlags>:
    1106:	00 00       	bra	@r0		
	...

00001109 <MenuVisible>:
	...

0000110a <SetupDone>:
	...

0000110b <MotorArmed>:
	...

0000110c <MenuStep>:
	...

0000110e <MenuAnalog>:
	...

00001110 <MenuOption>:
    1110:	03 00       	.word	0x0003;	????	Illegal as address instr

00001112 <AnalogSelect>:
    1112:	07 00       	mova	@r0,	r7	

00001113 <AnalogChecked>:
	...

00001114 <AnalogColours>:
    1114:	03 1c e0 fc 	andx.a	@r12,	0x3e3fc	;PC rel. 0x3f516
    1118:	fc e3 
    111a:	1f ff 00 00 	and	0(r15),	r15	;0x0000(r15)

0000111c <PPMSlope>:
    111c:	00 00       	bra	@r0		
    111e:	80 3f       	jmp	$-254    	;abs 0x1020
    1120:	00 00       	bra	@r0		
    1122:	80 3f       	jmp	$-254    	;abs 0x1024
    1124:	00 00       	bra	@r0		
    1126:	80 3f       	jmp	$-254    	;abs 0x1028
    1128:	00 00       	bra	@r0		
    112a:	80 3f       	jmp	$-254    	;abs 0x102c
    112c:	00 00       	bra	@r0		
    112e:	80 3f       	jmp	$-254    	;abs 0x1030
    1130:	00 00       	bra	@r0		
    1132:	80 3f       	jmp	$-254    	;abs 0x1034
    1134:	00 00       	bra	@r0		
    1136:	80 3f       	jmp	$-254    	;abs 0x1038
    1138:	00 00       	bra	@r0		
    113a:	80 3f       	jmp	$-254    	;abs 0x103c

0000113c <PPMOffset>:
	...

0000115c <TimeUpEdge>:
	...

0000116c <PPMValue>:
	...

0000117c <ChannelInput>:
	...

0000118c <LCD_linecount>:
	...

0000118d <LCD_charcount>:
	...

0000118e <color_back>:
	...

0000118f <color_fore>:
    118f:	1c 00       	mova	#0x00000,r12	

00001190 <EEPROMFound>:
	...

00001191 <i2c_slave_address>:
    1191:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x01193

00001192 <AnalogOffset>:
	...

000011a2 <AnalogValue>:
	...

000011b2 <total_len>:
	...
Disassembly of section .bss:

000011b4 <__bss_start>:
	...

000011b6 <AnalogGraph>:
	...
Disassembly of section .vectors:

0000ffc0 <InterruptVectors>:
    ffc0:	30 31       	interrupt service routine at 0x3130
    ffc2:	30 31       	interrupt service routine at 0x3130
    ffc4:	30 31       	interrupt service routine at 0x3130
    ffc6:	30 31       	interrupt service routine at 0x3130
    ffc8:	30 31       	interrupt service routine at 0x3130
    ffca:	30 31       	interrupt service routine at 0x3130
    ffcc:	30 31       	interrupt service routine at 0x3130
    ffce:	30 31       	interrupt service routine at 0x3130
    ffd0:	30 31       	interrupt service routine at 0x3130
    ffd2:	30 31       	interrupt service routine at 0x3130
    ffd4:	30 31       	interrupt service routine at 0x3130
    ffd6:	30 31       	interrupt service routine at 0x3130
    ffd8:	30 31       	interrupt service routine at 0x3130
    ffda:	30 31       	interrupt service routine at 0x3130
    ffdc:	30 31       	interrupt service routine at 0x3130
    ffde:	30 31       	interrupt service routine at 0x3130
    ffe0:	30 31       	interrupt service routine at 0x3130
    ffe2:	30 31       	interrupt service routine at 0x3130
    ffe4:	10 37       	interrupt service routine at 0x3710
    ffe6:	30 31       	interrupt service routine at 0x3130
    ffe8:	30 31       	interrupt service routine at 0x3130
    ffea:	30 31       	interrupt service routine at 0x3130
    ffec:	30 31       	interrupt service routine at 0x3130
    ffee:	30 31       	interrupt service routine at 0x3130
    fff0:	30 31       	interrupt service routine at 0x3130
    fff2:	c0 36       	interrupt service routine at 0x36c0
    fff4:	30 31       	interrupt service routine at 0x3130
    fff6:	30 31       	interrupt service routine at 0x3130
    fff8:	30 31       	interrupt service routine at 0x3130
    fffa:	30 31       	interrupt service routine at 0x3130
    fffc:	30 31       	interrupt service routine at 0x3130
    fffe:	00 31       	interrupt service routine at 0x3100
Disassembly of section .stab:

00000000 <_efartext-0x10000>:
       0:	01 00       	mova	@r0,	r1	
       2:	00 00       	bra	@r0		
       4:	00 00       	bra	@r0		
       6:	72 10       	rrc.b	#8		;r2 As==11
       8:	bc 59 00 00 	add	@r9+,	0(r12)	;0x0000(r12)
       c:	01 00       	mova	@r0,	r1	
       e:	00 00       	bra	@r0		
      10:	64 00 00 00 	mova	r0,	&0x40000
      14:	30 31       	jn	$+610    	;abs 0x276
      16:	00 00       	bra	@r0		
      18:	2b 00 00 00 	mova	&0x00000,r11	
      1c:	84 00 00 00 	mova	#0x00000,r4	
      20:	30 31       	jn	$+610    	;abs 0x282
      22:	00 00       	bra	@r0		
      24:	00 00       	bra	@r0		
      26:	00 00       	bra	@r0		
      28:	44 00       	rrcm.a	#1,	r4	
      2a:	28 00 30 31 	mova	&0x03130,r8	
      2e:	00 00       	bra	@r0		
      30:	00 00       	bra	@r0		
      32:	00 00       	bra	@r0		
      34:	44 00       	rrcm.a	#1,	r4	
      36:	2a 00 34 31 	mova	&0x03134,r10	
      3a:	00 00       	bra	@r0		
      3c:	00 00       	bra	@r0		
      3e:	00 00       	bra	@r0		
      40:	44 00       	rrcm.a	#1,	r4	
      42:	63 00 c0 ff 	mova	r0,	&0x3ffc0
      46:	00 00       	bra	@r0		
      48:	00 00       	bra	@r0		
      4a:	00 00       	bra	@r0		
      4c:	44 00       	rrcm.a	#1,	r4	
      4e:	64 00 c2 ff 	mova	r0,	&0x4ffc2
      52:	00 00       	bra	@r0		
      54:	00 00       	bra	@r0		
      56:	00 00       	bra	@r0		
      58:	44 00       	rrcm.a	#1,	r4	
      5a:	65 00 c4 ff 	mova	r0,	&0x5ffc4
      5e:	00 00       	bra	@r0		
      60:	00 00       	bra	@r0		
      62:	00 00       	bra	@r0		
      64:	44 00       	rrcm.a	#1,	r4	
      66:	66 00 c6 ff 	mova	r0,	&0x6ffc6
      6a:	00 00       	bra	@r0		
      6c:	00 00       	bra	@r0		
      6e:	00 00       	bra	@r0		
      70:	44 00       	rrcm.a	#1,	r4	
      72:	67 00 c8 ff 	mova	r0,	&0x7ffc8
      76:	00 00       	bra	@r0		
      78:	00 00       	bra	@r0		
      7a:	00 00       	bra	@r0		
      7c:	44 00       	rrcm.a	#1,	r4	
      7e:	68 00 ca ff 	mova	r0,	&0x8ffca
      82:	00 00       	bra	@r0		
      84:	00 00       	bra	@r0		
      86:	00 00       	bra	@r0		
      88:	44 00       	rrcm.a	#1,	r4	
      8a:	69 00 cc ff 	mova	r0,	&0x9ffcc
      8e:	00 00       	bra	@r0		
      90:	00 00       	bra	@r0		
      92:	00 00       	bra	@r0		
      94:	44 00       	rrcm.a	#1,	r4	
      96:	6a 00 ce ff 	mova	r0,	&0xaffce
      9a:	00 00       	bra	@r0		
      9c:	00 00       	bra	@r0		
      9e:	00 00       	bra	@r0		
      a0:	44 00       	rrcm.a	#1,	r4	
      a2:	6b 00 d0 ff 	mova	r0,	&0xbffd0
      a6:	00 00       	bra	@r0		
      a8:	00 00       	bra	@r0		
      aa:	00 00       	bra	@r0		
      ac:	44 00       	rrcm.a	#1,	r4	
      ae:	6c 00 d2 ff 	mova	r0,	&0xcffd2
      b2:	00 00       	bra	@r0		
      b4:	00 00       	bra	@r0		
      b6:	00 00       	bra	@r0		
      b8:	44 00       	rrcm.a	#1,	r4	
      ba:	6d 00 d4 ff 	mova	r0,	&0xdffd4
      be:	00 00       	bra	@r0		
      c0:	00 00       	bra	@r0		
      c2:	00 00       	bra	@r0		
      c4:	44 00       	rrcm.a	#1,	r4	
      c6:	6e 00 d6 ff 	mova	r0,	&0xeffd6
      ca:	00 00       	bra	@r0		
      cc:	00 00       	bra	@r0		
      ce:	00 00       	bra	@r0		
      d0:	44 00       	rrcm.a	#1,	r4	
      d2:	6f 00 d8 ff 	mova	r0,	&0xfffd8
      d6:	00 00       	bra	@r0		
      d8:	00 00       	bra	@r0		
      da:	00 00       	bra	@r0		
      dc:	44 00       	rrcm.a	#1,	r4	
      de:	70 00 da ff 	mova	r0,	0xffda	;PC rel. 0x000ba
      e2:	00 00       	bra	@r0		
      e4:	00 00       	bra	@r0		
      e6:	00 00       	bra	@r0		
      e8:	44 00       	rrcm.a	#1,	r4	
      ea:	71 00 dc ff 	mova	r0,	-36(r1)	;0xffdc(r1)
      ee:	00 00       	bra	@r0		
      f0:	00 00       	bra	@r0		
      f2:	00 00       	bra	@r0		
      f4:	44 00       	rrcm.a	#1,	r4	
      f6:	72 00 de ff 	mova	r0,	&0xffde	
      fa:	00 00       	bra	@r0		
      fc:	00 00       	bra	@r0		
      fe:	00 00       	bra	@r0		
     100:	44 00       	rrcm.a	#1,	r4	
     102:	74 00 e0 ff 	mova	r0,	-32(r4)	;0xffe0(r4)
     106:	00 00       	bra	@r0		
     108:	00 00       	bra	@r0		
     10a:	00 00       	bra	@r0		
     10c:	44 00       	rrcm.a	#1,	r4	
     10e:	75 00 e2 ff 	mova	r0,	-30(r5)	;0xffe2(r5)
     112:	00 00       	bra	@r0		
     114:	00 00       	bra	@r0		
     116:	00 00       	bra	@r0		
     118:	44 00       	rrcm.a	#1,	r4	
     11a:	76 00 e4 ff 	mova	r0,	-28(r6)	;0xffe4(r6)
     11e:	00 00       	bra	@r0		
     120:	00 00       	bra	@r0		
     122:	00 00       	bra	@r0		
     124:	44 00       	rrcm.a	#1,	r4	
     126:	77 00 e6 ff 	mova	r0,	-26(r7)	;0xffe6(r7)
     12a:	00 00       	bra	@r0		
     12c:	00 00       	bra	@r0		
     12e:	00 00       	bra	@r0		
     130:	44 00       	rrcm.a	#1,	r4	
     132:	78 00 e8 ff 	mova	r0,	-24(r8)	;0xffe8(r8)
     136:	00 00       	bra	@r0		
     138:	00 00       	bra	@r0		
     13a:	00 00       	bra	@r0		
     13c:	44 00       	rrcm.a	#1,	r4	
     13e:	79 00 ea ff 	mova	r0,	-22(r9)	;0xffea(r9)
     142:	00 00       	bra	@r0		
     144:	00 00       	bra	@r0		
     146:	00 00       	bra	@r0		
     148:	44 00       	rrcm.a	#1,	r4	
     14a:	7a 00 ec ff 	mova	r0,	-20(r10);0xffec(r10)
     14e:	00 00       	bra	@r0		
     150:	00 00       	bra	@r0		
     152:	00 00       	bra	@r0		
     154:	44 00       	rrcm.a	#1,	r4	
     156:	7b 00 ee ff 	mova	r0,	-18(r11);0xffee(r11)
     15a:	00 00       	bra	@r0		
     15c:	00 00       	bra	@r0		
     15e:	00 00       	bra	@r0		
     160:	44 00       	rrcm.a	#1,	r4	
     162:	7c 00 f0 ff 	mova	r0,	-16(r12);0xfff0(r12)
     166:	00 00       	bra	@r0		
     168:	00 00       	bra	@r0		
     16a:	00 00       	bra	@r0		
     16c:	44 00       	rrcm.a	#1,	r4	
     16e:	7d 00 f2 ff 	mova	r0,	-14(r13);0xfff2(r13)
     172:	00 00       	bra	@r0		
     174:	00 00       	bra	@r0		
     176:	00 00       	bra	@r0		
     178:	44 00       	rrcm.a	#1,	r4	
     17a:	7e 00 f4 ff 	mova	r0,	-12(r14);0xfff4(r14)
     17e:	00 00       	bra	@r0		
     180:	00 00       	bra	@r0		
     182:	00 00       	bra	@r0		
     184:	44 00       	rrcm.a	#1,	r4	
     186:	7f 00 f6 ff 	mova	r0,	-10(r15);0xfff6(r15)
     18a:	00 00       	bra	@r0		
     18c:	00 00       	bra	@r0		
     18e:	00 00       	bra	@r0		
     190:	44 00       	rrcm.a	#1,	r4	
     192:	80 00 f8 ff 	bra	#0x0fff8	
     196:	00 00       	bra	@r0		
     198:	00 00       	bra	@r0		
     19a:	00 00       	bra	@r0		
     19c:	44 00       	rrcm.a	#1,	r4	
     19e:	81 00 fa ff 	mova	#0x0fffa,r1	
     1a2:	00 00       	bra	@r0		
     1a4:	00 00       	bra	@r0		
     1a6:	00 00       	bra	@r0		
     1a8:	44 00       	rrcm.a	#1,	r4	
     1aa:	82 00 fc ff 	mova	#0x0fffc,r2	
     1ae:	00 00       	bra	@r0		
     1b0:	33 00       	.word	0x0033;	????	Illegal as address instr
     1b2:	00 00       	bra	@r0		
     1b4:	64 00 00 00 	mova	r0,	&0x40000
     1b8:	36 31       	jn	$+622    	;abs 0x426
     1ba:	00 00       	bra	@r0		
     1bc:	63 00 00 00 	mova	r0,	&0x30000
     1c0:	64 00 00 00 	mova	r0,	&0x40000
     1c4:	36 31       	jn	$+622    	;abs 0x432
     1c6:	00 00       	bra	@r0		
     1c8:	6a 00 00 00 	mova	r0,	&0xa0000
     1cc:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x001ce
     1d0:	00 00       	bra	@r0		
     1d2:	00 00       	bra	@r0		
     1d4:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
     1d8:	80 00 00 00 	bra	#0x00000	
     1dc:	00 00       	bra	@r0		
     1de:	00 00       	bra	@r0		
     1e0:	99 00 00 00 	cmpa	#0x00000,r9	
     1e4:	80 00 00 00 	bra	#0x00000	
     1e8:	00 00       	bra	@r0		
     1ea:	00 00       	bra	@r0		
     1ec:	b3 00       	.word	0x00b3;	????	Illegal as address instr
     1ee:	00 00       	bra	@r0		
     1f0:	80 00 00 00 	bra	#0x00000	
     1f4:	00 00       	bra	@r0		
     1f6:	00 00       	bra	@r0		
     1f8:	ec 00       	adda	r0,	r12	
     1fa:	00 00       	bra	@r0		
     1fc:	80 00 00 00 	bra	#0x00000	
     200:	00 00       	bra	@r0		
     202:	00 00       	bra	@r0		
     204:	24 01 00 00 	mova	&0x10000,r4	
     208:	80 00 00 00 	bra	#0x00000	
     20c:	00 00       	bra	@r0		
     20e:	00 00       	bra	@r0		
     210:	66 01 00 00 	mova	r1,	&0x60000
     214:	80 00 00 00 	bra	#0x00000	
     218:	00 00       	bra	@r0		
     21a:	00 00       	bra	@r0		
     21c:	b7 01 00 00 	suba	#0x10000,r7	
     220:	80 00 00 00 	bra	#0x00000	
     224:	00 00       	bra	@r0		
     226:	00 00       	bra	@r0		
     228:	08 02       	mova	#4,	r8	;r2 As==10
     22a:	00 00       	bra	@r0		
     22c:	80 00 00 00 	bra	#0x00000	
     230:	00 00       	bra	@r0		
     232:	00 00       	bra	@r0		
     234:	2e 02 00 00 	mova	&0x20000,r14	
     238:	80 00 00 00 	bra	#0x00000	
     23c:	00 00       	bra	@r0		
     23e:	00 00       	bra	@r0		
     240:	6c 02 00 00 	mova	r2,	&0xc0000
     244:	80 00 00 00 	bra	#0x00000	
     248:	00 00       	bra	@r0		
     24a:	00 00       	bra	@r0		
     24c:	96 02 00 00 	cmpa	#0x20000,r6	
     250:	80 00 00 00 	bra	#0x00000	
     254:	00 00       	bra	@r0		
     256:	00 00       	bra	@r0		
     258:	bf 02 00 00 	suba	#0x20000,r15	
     25c:	80 00 00 00 	bra	#0x00000	
     260:	00 00       	bra	@r0		
     262:	00 00       	bra	@r0		
     264:	d9 02       	cmpa	r2,	r9	
     266:	00 00       	bra	@r0		
     268:	80 00 00 00 	bra	#0x00000	
     26c:	00 00       	bra	@r0		
     26e:	00 00       	bra	@r0		
     270:	f4 02       	suba	r2,	r4	
     272:	00 00       	bra	@r0		
     274:	80 00 00 00 	bra	#0x00000	
     278:	00 00       	bra	@r0		
     27a:	00 00       	bra	@r0		
     27c:	14 03       	mova	#-1,	r4	;r3 As==11
     27e:	00 00       	bra	@r0		
     280:	80 00 00 00 	bra	#0x00000	
     284:	00 00       	bra	@r0		
     286:	00 00       	bra	@r0		
     288:	4d 03       	rrum.a	#1,	r13	
     28a:	00 00       	bra	@r0		
     28c:	80 00 00 00 	bra	#0x00000	
     290:	00 00       	bra	@r0		
     292:	00 00       	bra	@r0		
     294:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
     298:	80 00 00 00 	bra	#0x00000	
     29c:	00 00       	bra	@r0		
     29e:	00 00       	bra	@r0		
     2a0:	8a 03 00 00 	mova	#0x30000,r10	
     2a4:	80 00 00 00 	bra	#0x00000	
     2a8:	00 00       	bra	@r0		
     2aa:	00 00       	bra	@r0		
     2ac:	ae 03 00 00 	adda	#0x30000,r14	
     2b0:	80 00 00 00 	bra	#0x00000	
     2b4:	00 00       	bra	@r0		
     2b6:	00 00       	bra	@r0		
     2b8:	d7 03       	tsta	r7		
     2ba:	00 00       	bra	@r0		
     2bc:	80 00 00 00 	bra	#0x00000	
     2c0:	00 00       	bra	@r0		
     2c2:	00 00       	bra	@r0		
     2c4:	63 00 00 00 	mova	r0,	&0x30000
     2c8:	82 00 00 00 	mova	#0x00000,r2	
     2cc:	b4 f1 03 00 	and	@r1+,	3(r4)	;0x0003(r4)
     2d0:	ee 03       	incda	r14		
     2d2:	00 00       	bra	@r0		
     2d4:	82 00 00 00 	mova	#0x00000,r2	
     2d8:	00 00       	bra	@r0		
     2da:	00 00       	bra	@r0		
     2dc:	0f 04       	mova	@r4,	r15	
     2de:	00 00       	bra	@r0		
     2e0:	82 00 00 00 	mova	#0x00000,r2	
     2e4:	13 10       	rrc	#1		;r3 As==01
     2e6:	00 00       	bra	@r0		
     2e8:	43 04       	rrcm.a	#2,	#0	;r3 As==00
     2ea:	00 00       	bra	@r0		
     2ec:	80 00 97 00 	bra	#0x00097	
     2f0:	00 00       	bra	@r0		
     2f2:	00 00       	bra	@r0		
     2f4:	5a 04       	rrcm	#2,	r10	
     2f6:	00 00       	bra	@r0		
     2f8:	80 00 d5 00 	bra	#0x000d5	
     2fc:	00 00       	bra	@r0		
     2fe:	00 00       	bra	@r0		
     300:	6e 04 00 00 	mova	r4,	&0xe0000
     304:	80 00 45 01 	bra	#0x00145	
	...
     310:	a2 00 00 00 	adda	#0x00000,r2	
     314:	00 00       	bra	@r0		
     316:	00 00       	bra	@r0		
     318:	83 04       	.word	0x0483;	????	Illegal as address instr
     31a:	00 00       	bra	@r0		
     31c:	82 00 00 00 	mova	#0x00000,r2	
     320:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
     324:	a8 04 00 00 	adda	#0x40000,r8	
     328:	82 00 00 00 	mova	#0x00000,r2	
	...
     334:	a2 00 00 00 	adda	#0x00000,r2	
     338:	00 00       	bra	@r0		
     33a:	00 00       	bra	@r0		
     33c:	cd 04       	mova	r4,	r13	
     33e:	00 00       	bra	@r0		
     340:	82 00 00 00 	mova	#0x00000,r2	
     344:	91 34       	jge	$+292    	;abs 0x468
     346:	00 00       	bra	@r0		
     348:	f5 04       	suba	r4,	r5	
     34a:	00 00       	bra	@r0		
     34c:	80 00 26 00 	bra	#0x00026	
     350:	00 00       	bra	@r0		
     352:	00 00       	bra	@r0		
     354:	0a 05       	mova	@r5,	r10	
     356:	00 00       	bra	@r0		
     358:	80 00 27 00 	bra	#0x00027	
     35c:	00 00       	bra	@r0		
     35e:	00 00       	bra	@r0		
     360:	20 05 00 00 	bra	&0x50000	
     364:	80 00 29 00 	bra	#0x00029	
     368:	00 00       	bra	@r0		
     36a:	00 00       	bra	@r0		
     36c:	35 05 00 00 	mova	0(r5),	r5	;0x0000(r5)
     370:	80 00 2a 00 	bra	#0x0002a	
     374:	00 00       	bra	@r0		
     376:	00 00       	bra	@r0		
     378:	4b 05       	rram.a	#2,	r11	
     37a:	00 00       	bra	@r0		
     37c:	80 00 2c 00 	bra	#0x0002c	
     380:	00 00       	bra	@r0		
     382:	00 00       	bra	@r0		
     384:	60 05 00 00 	mova	r5,	&0x00000
     388:	80 00 2d 00 	bra	#0x0002d	
     38c:	00 00       	bra	@r0		
     38e:	00 00       	bra	@r0		
     390:	76 05 00 00 	mova	r5,	0(r6)	;0x0000(r6)
     394:	80 00 2f 00 	bra	#0x0002f	
     398:	00 00       	bra	@r0		
     39a:	00 00       	bra	@r0		
     39c:	8b 05 00 00 	mova	#0x50000,r11	
     3a0:	80 00 30 00 	bra	#0x00030	
     3a4:	00 00       	bra	@r0		
     3a6:	00 00       	bra	@r0		
     3a8:	a1 05 00 00 	adda	#0x50000,r1	
     3ac:	80 00 35 00 	bra	#0x00035	
     3b0:	00 00       	bra	@r0		
     3b2:	00 00       	bra	@r0		
     3b4:	b7 05 00 00 	suba	#0x50000,r7	
     3b8:	80 00 36 00 	bra	#0x00036	
	...
     3c4:	a2 00 00 00 	adda	#0x00000,r2	
     3c8:	00 00       	bra	@r0		
     3ca:	00 00       	bra	@r0		
     3cc:	cf 05       	mova	r5,	r15	
     3ce:	00 00       	bra	@r0		
     3d0:	80 00 29 00 	bra	#0x00029	
     3d4:	00 00       	bra	@r0		
     3d6:	00 00       	bra	@r0		
     3d8:	e4 05       	adda	r5,	r4	
     3da:	00 00       	bra	@r0		
     3dc:	80 00 2a 00 	bra	#0x0002a	
     3e0:	00 00       	bra	@r0		
     3e2:	00 00       	bra	@r0		
     3e4:	f9 05       	suba	r5,	r9	
     3e6:	00 00       	bra	@r0		
     3e8:	80 00 2b 00 	bra	#0x0002b	
     3ec:	00 00       	bra	@r0		
     3ee:	00 00       	bra	@r0		
     3f0:	0c 06       	mova	@r6,	r12	
     3f2:	00 00       	bra	@r0		
     3f4:	80 00 2c 00 	bra	#0x0002c	
     3f8:	00 00       	bra	@r0		
     3fa:	00 00       	bra	@r0		
     3fc:	20 06 00 00 	bra	&0x60000	
     400:	80 00 2d 00 	bra	#0x0002d	
     404:	00 00       	bra	@r0		
     406:	00 00       	bra	@r0		
     408:	34 06 00 00 	mova	0(r6),	r4	;0x0000(r6)
     40c:	80 00 2e 00 	bra	#0x0002e	
     410:	00 00       	bra	@r0		
     412:	00 00       	bra	@r0		
     414:	46 06       	rlam.a	#2,	r6	
     416:	00 00       	bra	@r0		
     418:	80 00 30 00 	bra	#0x00030	
     41c:	00 00       	bra	@r0		
     41e:	00 00       	bra	@r0		
     420:	5c 06       	rlam	#2,	r12	
     422:	00 00       	bra	@r0		
     424:	80 00 31 00 	bra	#0x00031	
     428:	00 00       	bra	@r0		
     42a:	00 00       	bra	@r0		
     42c:	73 06       	.word	0x0673;	????	Illegal as address instr
     42e:	00 00       	bra	@r0		
     430:	80 00 32 00 	bra	#0x00032	
     434:	00 00       	bra	@r0		
     436:	00 00       	bra	@r0		
     438:	8a 06 00 00 	mova	#0x60000,r10	
     43c:	80 00 33 00 	bra	#0x00033	
     440:	00 00       	bra	@r0		
     442:	00 00       	bra	@r0		
     444:	a2 06 00 00 	adda	#0x60000,r2	
     448:	80 00 35 00 	bra	#0x00035	
     44c:	00 00       	bra	@r0		
     44e:	00 00       	bra	@r0		
     450:	ba 06 00 00 	suba	#0x60000,r10	
     454:	80 00 36 00 	bra	#0x00036	
     458:	00 00       	bra	@r0		
     45a:	00 00       	bra	@r0		
     45c:	cf 06       	mova	r6,	r15	
     45e:	00 00       	bra	@r0		
     460:	80 00 37 00 	bra	#0x00037	
     464:	00 00       	bra	@r0		
     466:	00 00       	bra	@r0		
     468:	ee 06       	adda	r6,	r14	
     46a:	00 00       	bra	@r0		
     46c:	80 00 39 00 	bra	#0x00039	
     470:	00 00       	bra	@r0		
     472:	00 00       	bra	@r0		
     474:	0c 07       	mova	@r7,	r12	
     476:	00 00       	bra	@r0		
     478:	80 00 3a 00 	bra	#0x0003a	
     47c:	00 00       	bra	@r0		
     47e:	00 00       	bra	@r0		
     480:	34 07 00 00 	mova	0(r7),	r4	;0x0000(r7)
     484:	80 00 3b 00 	bra	#0x0003b	
     488:	00 00       	bra	@r0		
     48a:	00 00       	bra	@r0		
     48c:	5c 07       	rrum	#2,	r12	
     48e:	00 00       	bra	@r0		
     490:	80 00 3c 00 	bra	#0x0003c	
     494:	00 00       	bra	@r0		
     496:	00 00       	bra	@r0		
     498:	72 07 00 00 	mova	r7,	&0x0000	
     49c:	80 00 3d 00 	bra	#0x0003d	
     4a0:	00 00       	bra	@r0		
     4a2:	00 00       	bra	@r0		
     4a4:	86 07 00 00 	mova	#0x70000,r6	
     4a8:	80 00 3e 00 	bra	#0x0003e	
     4ac:	00 00       	bra	@r0		
     4ae:	00 00       	bra	@r0		
     4b0:	9e 07 00 00 	cmpa	#0x70000,r14	
     4b4:	80 00 3f 00 	bra	#0x0003f	
     4b8:	00 00       	bra	@r0		
     4ba:	00 00       	bra	@r0		
     4bc:	b6 07 00 00 	suba	#0x70000,r6	
     4c0:	80 00 40 00 	bra	#0x00040	
     4c4:	00 00       	bra	@r0		
     4c6:	00 00       	bra	@r0		
     4c8:	ca 07       	mova	r7,	r10	
     4ca:	00 00       	bra	@r0		
     4cc:	80 00 41 00 	bra	#0x00041	
     4d0:	00 00       	bra	@r0		
     4d2:	00 00       	bra	@r0		
     4d4:	de 07       	cmpa	r7,	r14	
     4d6:	00 00       	bra	@r0		
     4d8:	80 00 42 00 	bra	#0x00042	
     4dc:	00 00       	bra	@r0		
     4de:	00 00       	bra	@r0		
     4e0:	f3 07       	.word	0x07f3;	????	Illegal as address instr
     4e2:	00 00       	bra	@r0		
     4e4:	80 00 43 00 	bra	#0x00043	
     4e8:	00 00       	bra	@r0		
     4ea:	00 00       	bra	@r0		
     4ec:	09 08       	mova	@r8,	r9	
     4ee:	00 00       	bra	@r0		
     4f0:	80 00 44 00 	bra	#0x00044	
     4f4:	00 00       	bra	@r0		
     4f6:	00 00       	bra	@r0		
     4f8:	1f 08       	mova	@r8+,	r15	
     4fa:	00 00       	bra	@r0		
     4fc:	80 00 45 00 	bra	#0x00045	
     500:	00 00       	bra	@r0		
     502:	00 00       	bra	@r0		
     504:	35 08 00 00 	mova	0(r8),	r5	;0x0000(r8)
     508:	80 00 46 00 	bra	#0x00046	
     50c:	00 00       	bra	@r0		
     50e:	00 00       	bra	@r0		
     510:	4b 08       	rrcm.a	#3,	r11	
     512:	00 00       	bra	@r0		
     514:	80 00 47 00 	bra	#0x00047	
     518:	00 00       	bra	@r0		
     51a:	00 00       	bra	@r0		
     51c:	65 08 00 00 	mova	r8,	&0x50000
     520:	80 00 48 00 	bra	#0x00048	
     524:	00 00       	bra	@r0		
     526:	00 00       	bra	@r0		
     528:	7e 08 00 00 	mova	r8,	0(r14)	;0x0000(r14)
     52c:	80 00 49 00 	bra	#0x00049	
	...
     538:	a2 00 00 00 	adda	#0x00000,r2	
     53c:	00 00       	bra	@r0		
     53e:	00 00       	bra	@r0		
     540:	92 08 00 00 	cmpa	#0x80000,r2	
     544:	82 00 00 00 	mova	#0x00000,r2	
     548:	76 0d 00 00 	mova	r13,	0(r6)	;0x0000(r6)
     54c:	c6 08       	mova	r8,	r6	
     54e:	00 00       	bra	@r0		
     550:	80 00 2b 00 	bra	#0x0002b	
     554:	00 00       	bra	@r0		
     556:	00 00       	bra	@r0		
     558:	e3 08       	.word	0x08e3;	????	Illegal as address instr
     55a:	00 00       	bra	@r0		
     55c:	80 00 6e 00 	bra	#0x0006e	
	...
     568:	a2 00 00 00 	adda	#0x00000,r2	
	...
     574:	a2 00 00 00 	adda	#0x00000,r2	
     578:	00 00       	bra	@r0		
     57a:	00 00       	bra	@r0		
     57c:	f8 08       	suba	r8,	r8	
     57e:	00 00       	bra	@r0		
     580:	82 00 00 00 	mova	#0x00000,r2	
     584:	3c 1a       	.word	0x1a3c;	????	
     586:	00 00       	bra	@r0		
     588:	0f 04       	mova	@r4,	r15	
     58a:	00 00       	bra	@r0		
     58c:	82 00 00 00 	mova	#0x00000,r2	
	...
     598:	a2 00 00 00 	adda	#0x00000,r2	
     59c:	00 00       	bra	@r0		
     59e:	00 00       	bra	@r0		
     5a0:	1a 09       	mova	@r9+,	r10	
     5a2:	00 00       	bra	@r0		
     5a4:	80 00 3b 00 	bra	#0x0003b	
     5a8:	00 00       	bra	@r0		
     5aa:	00 00       	bra	@r0		
     5ac:	51 09       	rram	#3,	r1	
     5ae:	00 00       	bra	@r0		
     5b0:	80 00 43 00 	bra	#0x00043	
	...
     5bc:	a2 00 00 00 	adda	#0x00000,r2	
     5c0:	00 00       	bra	@r0		
     5c2:	00 00       	bra	@r0		
     5c4:	89 09 00 00 	mova	#0x90000,r9	
     5c8:	82 00 00 00 	mova	#0x00000,r2	
     5cc:	00 00       	bra	@r0		
     5ce:	00 00       	bra	@r0		
     5d0:	ab 09 00 00 	adda	#0x90000,r11	
     5d4:	82 00 00 00 	mova	#0x00000,r2	
	...
     5e0:	a2 00 00 00 	adda	#0x00000,r2	
	...
     5ec:	a2 00 00 00 	adda	#0x00000,r2	
     5f0:	00 00       	bra	@r0		
     5f2:	00 00       	bra	@r0		
     5f4:	cf 09       	mova	r9,	r15	
     5f6:	00 00       	bra	@r0		
     5f8:	82 00 00 00 	mova	#0x00000,r2	
     5fc:	00 00       	bra	@r0		
     5fe:	00 00       	bra	@r0		
     600:	f6 09       	suba	r9,	r6	
     602:	00 00       	bra	@r0		
     604:	82 00 00 00 	mova	#0x00000,r2	
	...
     610:	a2 00 00 00 	adda	#0x00000,r2	
     614:	00 00       	bra	@r0		
     616:	00 00       	bra	@r0		
     618:	1c 0a       	mova	@r10+,	r12	
     61a:	00 00       	bra	@r0		
     61c:	82 00 00 00 	mova	#0x00000,r2	
     620:	00 00       	bra	@r0		
     622:	00 00       	bra	@r0		
     624:	43 0a       	rlam.a	#3,	#0	;r3 As==00
     626:	00 00       	bra	@r0		
     628:	82 00 00 00 	mova	#0x00000,r2	
     62c:	c1 68 00 00 	addc.b	r8,	0(r1)	;0x0000(r1)
     630:	72 0a 00 00 	mova	r10,	&0x0000	
     634:	80 00 00 00 	bra	#0x00000	
     638:	00 00       	bra	@r0		
     63a:	00 00       	bra	@r0		
     63c:	2a 0b 00 00 	mova	&0xb0000,r10	
     640:	80 00 27 00 	bra	#0x00027	
     644:	00 00       	bra	@r0		
     646:	00 00       	bra	@r0		
     648:	46 0b       	rrum.a	#3,	r6	
     64a:	00 00       	bra	@r0		
     64c:	80 00 00 00 	bra	#0x00000	
     650:	00 00       	bra	@r0		
     652:	00 00       	bra	@r0		
     654:	e5 0b       	adda	r11,	r5	
     656:	00 00       	bra	@r0		
     658:	80 00 00 00 	bra	#0x00000	
	...
     664:	a2 00 00 00 	adda	#0x00000,r2	
	...
     670:	a2 00 00 00 	adda	#0x00000,r2	
     674:	00 00       	bra	@r0		
     676:	00 00       	bra	@r0		
     678:	41 0c       	rrcm.a	#4,	r1	
     67a:	00 00       	bra	@r0		
     67c:	82 00 00 00 	mova	#0x00000,r2	
	...
     688:	a2 00 00 00 	adda	#0x00000,r2	
     68c:	00 00       	bra	@r0		
     68e:	00 00       	bra	@r0		
     690:	68 0c 00 00 	mova	r12,	&0x80000
     694:	82 00 00 00 	mova	#0x00000,r2	
     698:	3e 8a       	sub	@r10+,	r14	
     69a:	00 00       	bra	@r0		
     69c:	91 0c 00 00 	cmpa	#0xc0000,r1	
     6a0:	80 00 84 00 	bra	#0x00084	
     6a4:	00 00       	bra	@r0		
     6a6:	00 00       	bra	@r0		
     6a8:	1a 0d       	mova	@r13+,	r10	
     6aa:	00 00       	bra	@r0		
     6ac:	80 00 94 00 	bra	#0x00094	
     6b0:	00 00       	bra	@r0		
     6b2:	00 00       	bra	@r0		
     6b4:	eb 0d       	adda	r13,	r11	
     6b6:	00 00       	bra	@r0		
     6b8:	80 00 00 00 	bra	#0x00000	
	...
     6c4:	a2 00 00 00 	adda	#0x00000,r2	
     6c8:	00 00       	bra	@r0		
     6ca:	00 00       	bra	@r0		
     6cc:	eb 0e       	adda	r14,	r11	
     6ce:	00 00       	bra	@r0		
     6d0:	82 00 00 00 	mova	#0x00000,r2	
     6d4:	90 a7 00 00 	dadd	0(r7),	0x0f14	;0x0000(r7), PC rel. 0x015ee
     6d8:	14 0f 
     6da:	00 00       	bra	@r0		
     6dc:	80 00 4c 00 	bra	#0x0004c	
     6e0:	00 00       	bra	@r0		
     6e2:	00 00       	bra	@r0		
     6e4:	d5 0f       	cmpa	r15,	r5	
     6e6:	00 00       	bra	@r0		
     6e8:	80 00 5b 00 	bra	#0x0005b	
     6ec:	00 00       	bra	@r0		
     6ee:	00 00       	bra	@r0		
     6f0:	95 10 00 00 	swpb	0(r5)		;0x0000(r5)
     6f4:	80 00 00 00 	bra	#0x00000	
	...
     700:	a2 00 00 00 	adda	#0x00000,r2	
     704:	00 00       	bra	@r0		
     706:	00 00       	bra	@r0		
     708:	de 11       	.word	0x11de;	????	
     70a:	00 00       	bra	@r0		
     70c:	82 00 00 00 	mova	#0x00000,r2	
	...
     718:	a2 00 00 00 	adda	#0x00000,r2	
     71c:	00 00       	bra	@r0		
     71e:	00 00       	bra	@r0		
     720:	0c 12       	push	r12		
     722:	00 00       	bra	@r0		
     724:	82 00 00 00 	mova	#0x00000,r2	
	...
     730:	a2 00 00 00 	adda	#0x00000,r2	
     734:	00 00       	bra	@r0		
     736:	00 00       	bra	@r0		
     738:	34 12       	push	@r4+		
     73a:	00 00       	bra	@r0		
     73c:	82 00 00 00 	mova	#0x00000,r2	
	...
     748:	a2 00 00 00 	adda	#0x00000,r2	
     74c:	00 00       	bra	@r0		
     74e:	00 00       	bra	@r0		
     750:	5c 12 00 00 	push.b	0(r12)		;0x0000(r12)
     754:	82 00 00 00 	mova	#0x00000,r2	
     758:	0c af       	dadd	r15,	r12	
     75a:	00 00       	bra	@r0		
     75c:	84 12       	call	r4		
     75e:	00 00       	bra	@r0		
     760:	80 00 2a 00 	bra	#0x0002a	
     764:	00 00       	bra	@r0		
     766:	00 00       	bra	@r0		
     768:	4b 13       	calla	r11		
     76a:	00 00       	bra	@r0		
     76c:	80 00 36 00 	bra	#0x00036	
     770:	00 00       	bra	@r0		
     772:	00 00       	bra	@r0		
     774:	f7 13       	calla			
     776:	00 00       	bra	@r0		
     778:	80 00 4a 00 	bra	#0x0004a	
     77c:	00 00       	bra	@r0		
     77e:	00 00       	bra	@r0		
     780:	12 15       	pushm	#2,	r2	
     782:	00 00       	bra	@r0		
     784:	80 00 00 00 	bra	#0x00000	
	...
     790:	a2 00 00 00 	adda	#0x00000,r2	
     794:	00 00       	bra	@r0		
     796:	00 00       	bra	@r0		
     798:	7b 15       	pushm	#8,	r11	
     79a:	00 00       	bra	@r0		
     79c:	82 00 00 00 	mova	#0x00000,r2	
	...
     7a8:	a2 00 00 00 	adda	#0x00000,r2	
     7ac:	00 00       	bra	@r0		
     7ae:	00 00       	bra	@r0		
     7b0:	a3 15       	pushm	#11,	#0	;r3 As==00
     7b2:	00 00       	bra	@r0		
     7b4:	82 00 00 00 	mova	#0x00000,r2	
	...
     7c0:	a2 00 00 00 	adda	#0x00000,r2	
     7c4:	00 00       	bra	@r0		
     7c6:	00 00       	bra	@r0		
     7c8:	c9 15       	pushm	#13,	r9	
     7ca:	00 00       	bra	@r0		
     7cc:	82 00 00 00 	mova	#0x00000,r2	
	...
     7d8:	a2 00 00 00 	adda	#0x00000,r2	
	...
     7e4:	a2 00 00 00 	adda	#0x00000,r2	
     7e8:	00 00       	bra	@r0		
     7ea:	00 00       	bra	@r0		
     7ec:	f2 15       	pushm	#16,	r2	
     7ee:	00 00       	bra	@r0		
     7f0:	82 00 00 00 	mova	#0x00000,r2	
	...
     7fc:	a2 00 00 00 	adda	#0x00000,r2	
     800:	00 00       	bra	@r0		
     802:	00 00       	bra	@r0		
     804:	fa 15       	pushm	#16,	r10	
     806:	00 00       	bra	@r0		
     808:	82 00 00 00 	mova	#0x00000,r2	
	...
     814:	a2 00 00 00 	adda	#0x00000,r2	
     818:	00 00       	bra	@r0		
     81a:	00 00       	bra	@r0		
     81c:	03 16       	popm.a	#1,	#0	;r3 As==00
     81e:	00 00       	bra	@r0		
     820:	82 00 00 00 	mova	#0x00000,r2	
	...
     82c:	a2 00 00 00 	adda	#0x00000,r2	
     830:	00 00       	bra	@r0		
     832:	00 00       	bra	@r0		
     834:	0d 16       	popm.a	#1,	r13	
     836:	00 00       	bra	@r0		
     838:	82 00 00 00 	mova	#0x00000,r2	
     83c:	f0 0f       	suba	r15,	r0	
     83e:	00 00       	bra	@r0		
     840:	16 16       	popm.a	#2,	r7	
     842:	00 00       	bra	@r0		
     844:	80 00 2a 00 	bra	#0x0002a	
	...
     850:	a2 00 00 00 	adda	#0x00000,r2	
     854:	00 00       	bra	@r0		
     856:	00 00       	bra	@r0		
     858:	62 16       	popm.a	#7,	r8	
     85a:	00 00       	bra	@r0		
     85c:	82 00 00 00 	mova	#0x00000,r2	
	...
     868:	a2 00 00 00 	adda	#0x00000,r2	
     86c:	00 00       	bra	@r0		
     86e:	00 00       	bra	@r0		
     870:	68 16       	popm.a	#7,	r14	
     872:	00 00       	bra	@r0		
     874:	82 00 00 00 	mova	#0x00000,r2	
     878:	bc 46 00 00 	mov	@r6+,	0(r12)	;0x0000(r12)
     87c:	74 16       	popm.a	#8,	r11	
     87e:	00 00       	bra	@r0		
     880:	80 00 00 00 	bra	#0x00000	
     884:	00 00       	bra	@r0		
     886:	00 00       	bra	@r0		
     888:	fa 16       	popm.a	#16,	r9	
     88a:	00 00       	bra	@r0		
     88c:	80 00 1e 00 	bra	#0x0001e	
     890:	00 00       	bra	@r0		
     892:	00 00       	bra	@r0		
     894:	16 17       	popm	#2,	r7	
     896:	00 00       	bra	@r0		
     898:	80 00 00 00 	bra	#0x00000	
     89c:	00 00       	bra	@r0		
     89e:	00 00       	bra	@r0		
     8a0:	6b 17       	popm	#7,	r1	
     8a2:	00 00       	bra	@r0		
     8a4:	80 00 26 00 	bra	#0x00026	
	...
     8b0:	a2 00 00 00 	adda	#0x00000,r2	
     8b4:	00 00       	bra	@r0		
     8b6:	00 00       	bra	@r0		
     8b8:	86 17       	popm	#9,	r14	
     8ba:	00 00       	bra	@r0		
     8bc:	24 00 2c 00 	mova	&0x0002c,r4	
     8c0:	36 31       	jn	$+622    	;abs 0xb2e
     8c2:	00 00       	bra	@r0		
     8c4:	00 00       	bra	@r0		
     8c6:	00 00       	bra	@r0		
     8c8:	44 00       	rrcm.a	#1,	r4	
     8ca:	2c 00 00 00 	mova	&0x00000,r12	
     8ce:	00 00       	bra	@r0		
     8d0:	00 00       	bra	@r0		
     8d2:	00 00       	bra	@r0		
     8d4:	44 00       	rrcm.a	#1,	r4	
     8d6:	2d 00 04 00 	mova	&0x00004,r13	
     8da:	00 00       	bra	@r0		
     8dc:	00 00       	bra	@r0		
     8de:	00 00       	bra	@r0		
     8e0:	44 00       	rrcm.a	#1,	r4	
     8e2:	30 00 0a 00 	bra	0x000a		;PC rel. 0x008ee
     8e6:	00 00       	bra	@r0		
     8e8:	00 00       	bra	@r0		
     8ea:	00 00       	bra	@r0		
     8ec:	44 00       	rrcm.a	#1,	r4	
     8ee:	32 00 0e 00 	mova	0x000e,	r2	;PC rel. 0x008fe
     8f2:	00 00       	bra	@r0		
     8f4:	00 00       	bra	@r0		
     8f6:	00 00       	bra	@r0		
     8f8:	44 00       	rrcm.a	#1,	r4	
     8fa:	34 00 14 00 	mova	0x0014,	r4	;PC rel. 0x00910
     8fe:	00 00       	bra	@r0		
     900:	00 00       	bra	@r0		
     902:	00 00       	bra	@r0		
     904:	44 00       	rrcm.a	#1,	r4	
     906:	35 00 18 00 	mova	0x0018,	r5	;PC rel. 0x00920
     90a:	00 00       	bra	@r0		
     90c:	00 00       	bra	@r0		
     90e:	00 00       	bra	@r0		
     910:	44 00       	rrcm.a	#1,	r4	
     912:	36 00 1c 00 	mova	0x001c,	r6	;PC rel. 0x00930
     916:	00 00       	bra	@r0		
     918:	00 00       	bra	@r0		
     91a:	00 00       	bra	@r0		
     91c:	44 00       	rrcm.a	#1,	r4	
     91e:	40 00       	rrcm.a	#1,	r0	
     920:	20 00 00 00 	bra	&0x00000	
     924:	00 00       	bra	@r0		
     926:	00 00       	bra	@r0		
     928:	44 00       	rrcm.a	#1,	r4	
     92a:	47 00       	rrcm.a	#1,	r7	
     92c:	26 00 00 00 	mova	&0x00000,r6	
     930:	00 00       	bra	@r0		
     932:	00 00       	bra	@r0		
     934:	44 00       	rrcm.a	#1,	r4	
     936:	4e 00       	rrcm.a	#1,	r14	
     938:	2c 00 00 00 	mova	&0x00000,r12	
     93c:	00 00       	bra	@r0		
     93e:	00 00       	bra	@r0		
     940:	44 00       	rrcm.a	#1,	r4	
     942:	55 00       	rrcm	#1,	r5	
     944:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x00946
     948:	00 00       	bra	@r0		
     94a:	00 00       	bra	@r0		
     94c:	44 00       	rrcm.a	#1,	r4	
     94e:	56 00       	rrcm	#1,	r6	
     950:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x00952
     954:	00 00       	bra	@r0		
     956:	00 00       	bra	@r0		
     958:	44 00       	rrcm.a	#1,	r4	
     95a:	57 00       	rrcm	#1,	r7	
     95c:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x0095e
     960:	00 00       	bra	@r0		
     962:	00 00       	bra	@r0		
     964:	44 00       	rrcm.a	#1,	r4	
     966:	4f 00       	rrcm.a	#1,	r15	
     968:	44 00       	rrcm.a	#1,	r4	
     96a:	00 00       	bra	@r0		
     96c:	00 00       	bra	@r0		
     96e:	00 00       	bra	@r0		
     970:	44 00       	rrcm.a	#1,	r4	
     972:	50 00       	rrcm	#1,	r0	
     974:	4c 00       	rrcm.a	#1,	r12	
     976:	00 00       	bra	@r0		
     978:	00 00       	bra	@r0		
     97a:	00 00       	bra	@r0		
     97c:	44 00       	rrcm.a	#1,	r4	
     97e:	51 00       	rrcm	#1,	r1	
     980:	50 00       	rrcm	#1,	r0	
     982:	00 00       	bra	@r0		
     984:	00 00       	bra	@r0		
     986:	00 00       	bra	@r0		
     988:	44 00       	rrcm.a	#1,	r4	
     98a:	48 00       	rrcm.a	#1,	r8	
     98c:	56 00       	rrcm	#1,	r6	
     98e:	00 00       	bra	@r0		
     990:	00 00       	bra	@r0		
     992:	00 00       	bra	@r0		
     994:	44 00       	rrcm.a	#1,	r4	
     996:	49 00       	rrcm.a	#1,	r9	
     998:	5e 00       	rrcm	#1,	r14	
     99a:	00 00       	bra	@r0		
     99c:	00 00       	bra	@r0		
     99e:	00 00       	bra	@r0		
     9a0:	44 00       	rrcm.a	#1,	r4	
     9a2:	4a 00       	rrcm.a	#1,	r10	
     9a4:	62 00 00 00 	mova	r0,	&0x20000
     9a8:	00 00       	bra	@r0		
     9aa:	00 00       	bra	@r0		
     9ac:	44 00       	rrcm.a	#1,	r4	
     9ae:	41 00       	rrcm.a	#1,	r1	
     9b0:	68 00 00 00 	mova	r0,	&0x80000
     9b4:	00 00       	bra	@r0		
     9b6:	00 00       	bra	@r0		
     9b8:	44 00       	rrcm.a	#1,	r4	
     9ba:	42 00       	rrcm.a	#1,	r2	
     9bc:	70 00 00 00 	mova	r0,	0x0000	;PC rel. 0x009be
     9c0:	00 00       	bra	@r0		
     9c2:	00 00       	bra	@r0		
     9c4:	44 00       	rrcm.a	#1,	r4	
     9c6:	43 00       	rrcm.a	#1,	#0	;r3 As==00
     9c8:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
     9cc:	00 00       	bra	@r0		
     9ce:	00 00       	bra	@r0		
     9d0:	44 00       	rrcm.a	#1,	r4	
     9d2:	5b 00       	rrcm	#1,	r11	
     9d4:	7a 00 00 00 	mova	r0,	0(r10)	;0x0000(r10)
     9d8:	00 00       	bra	@r0		
     9da:	00 00       	bra	@r0		
     9dc:	24 00 00 00 	mova	&0x00000,r4	
     9e0:	7e 00 00 00 	mova	r0,	0(r14)	;0x0000(r14)
     9e4:	92 17       	popm	#10,	r11	
     9e6:	00 00       	bra	@r0		
     9e8:	24 00 5d 00 	mova	&0x0005d,r4	
     9ec:	7e 32       	jn	$-770    	;abs 0x6ea
     9ee:	00 00       	bra	@r0		
     9f0:	00 00       	bra	@r0		
     9f2:	00 00       	bra	@r0		
     9f4:	44 00       	rrcm.a	#1,	r4	
     9f6:	5d 00       	rrcm	#1,	r13	
	...
     a00:	44 00       	rrcm.a	#1,	r4	
     a02:	5e 00       	rrcm	#1,	r14	
	...
     a0c:	44 00       	rrcm.a	#1,	r4	
     a0e:	60 00 1e 00 	mova	r0,	&0x0001e
     a12:	00 00       	bra	@r0		
     a14:	00 00       	bra	@r0		
     a16:	00 00       	bra	@r0		
     a18:	44 00       	rrcm.a	#1,	r4	
     a1a:	61 00 28 00 	mova	r0,	&0x10028
     a1e:	00 00       	bra	@r0		
     a20:	00 00       	bra	@r0		
     a22:	00 00       	bra	@r0		
     a24:	44 00       	rrcm.a	#1,	r4	
     a26:	63 00 30 00 	mova	r0,	&0x30030
     a2a:	00 00       	bra	@r0		
     a2c:	00 00       	bra	@r0		
     a2e:	00 00       	bra	@r0		
     a30:	44 00       	rrcm.a	#1,	r4	
     a32:	64 00 36 00 	mova	r0,	&0x40036
     a36:	00 00       	bra	@r0		
     a38:	00 00       	bra	@r0		
     a3a:	00 00       	bra	@r0		
     a3c:	44 00       	rrcm.a	#1,	r4	
     a3e:	65 00 3e 00 	mova	r0,	&0x5003e
     a42:	00 00       	bra	@r0		
     a44:	00 00       	bra	@r0		
     a46:	00 00       	bra	@r0		
     a48:	44 00       	rrcm.a	#1,	r4	
     a4a:	66 00 46 00 	mova	r0,	&0x60046
     a4e:	00 00       	bra	@r0		
     a50:	00 00       	bra	@r0		
     a52:	00 00       	bra	@r0		
     a54:	44 00       	rrcm.a	#1,	r4	
     a56:	67 00 4e 00 	mova	r0,	&0x7004e
     a5a:	00 00       	bra	@r0		
     a5c:	00 00       	bra	@r0		
     a5e:	00 00       	bra	@r0		
     a60:	44 00       	rrcm.a	#1,	r4	
     a62:	68 00 52 00 	mova	r0,	&0x80052
     a66:	00 00       	bra	@r0		
     a68:	00 00       	bra	@r0		
     a6a:	00 00       	bra	@r0		
     a6c:	44 00       	rrcm.a	#1,	r4	
     a6e:	b9 00 54 00 	suba	#0x00054,r9	
     a72:	00 00       	bra	@r0		
     a74:	00 00       	bra	@r0		
     a76:	00 00       	bra	@r0		
     a78:	44 00       	rrcm.a	#1,	r4	
     a7a:	6b 00 56 00 	mova	r0,	&0xb0056
     a7e:	00 00       	bra	@r0		
     a80:	00 00       	bra	@r0		
     a82:	00 00       	bra	@r0		
     a84:	44 00       	rrcm.a	#1,	r4	
     a86:	6c 00 60 00 	mova	r0,	&0xc0060
     a8a:	00 00       	bra	@r0		
     a8c:	00 00       	bra	@r0		
     a8e:	00 00       	bra	@r0		
     a90:	44 00       	rrcm.a	#1,	r4	
     a92:	6e 00 68 00 	mova	r0,	&0xe0068
     a96:	00 00       	bra	@r0		
     a98:	00 00       	bra	@r0		
     a9a:	00 00       	bra	@r0		
     a9c:	44 00       	rrcm.a	#1,	r4	
     a9e:	6f 00 76 00 	mova	r0,	&0xf0076
     aa2:	00 00       	bra	@r0		
     aa4:	00 00       	bra	@r0		
     aa6:	00 00       	bra	@r0		
     aa8:	44 00       	rrcm.a	#1,	r4	
     aaa:	72 00 7e 00 	mova	r0,	&0x007e	
     aae:	00 00       	bra	@r0		
     ab0:	00 00       	bra	@r0		
     ab2:	00 00       	bra	@r0		
     ab4:	44 00       	rrcm.a	#1,	r4	
     ab6:	73 00       	.word	0x0073;	????	Illegal as address instr
     ab8:	88 00 00 00 	mova	#0x00000,r8	
     abc:	00 00       	bra	@r0		
     abe:	00 00       	bra	@r0		
     ac0:	44 00       	rrcm.a	#1,	r4	
     ac2:	7c 00 8c 00 	mova	r0,	140(r12);0x008c(r12)
     ac6:	00 00       	bra	@r0		
     ac8:	00 00       	bra	@r0		
     aca:	00 00       	bra	@r0		
     acc:	44 00       	rrcm.a	#1,	r4	
     ace:	7d 00 94 00 	mova	r0,	148(r13);0x0094(r13)
     ad2:	00 00       	bra	@r0		
     ad4:	00 00       	bra	@r0		
     ad6:	00 00       	bra	@r0		
     ad8:	44 00       	rrcm.a	#1,	r4	
     ada:	80 00 9a 00 	bra	#0x0009a	
     ade:	00 00       	bra	@r0		
     ae0:	00 00       	bra	@r0		
     ae2:	00 00       	bra	@r0		
     ae4:	44 00       	rrcm.a	#1,	r4	
     ae6:	b9 00 9a 00 	suba	#0x0009a,r9	
     aea:	00 00       	bra	@r0		
     aec:	00 00       	bra	@r0		
     aee:	00 00       	bra	@r0		
     af0:	44 00       	rrcm.a	#1,	r4	
     af2:	b9 00 9c 00 	suba	#0x0009c,r9	
     af6:	00 00       	bra	@r0		
     af8:	00 00       	bra	@r0		
     afa:	00 00       	bra	@r0		
     afc:	44 00       	rrcm.a	#1,	r4	
     afe:	76 00 9e 00 	mova	r0,	158(r6)	;0x009e(r6)
     b02:	00 00       	bra	@r0		
     b04:	00 00       	bra	@r0		
     b06:	00 00       	bra	@r0		
     b08:	44 00       	rrcm.a	#1,	r4	
     b0a:	77 00 a6 00 	mova	r0,	166(r7)	;0x00a6(r7)
     b0e:	00 00       	bra	@r0		
     b10:	00 00       	bra	@r0		
     b12:	00 00       	bra	@r0		
     b14:	44 00       	rrcm.a	#1,	r4	
     b16:	83 00       	.word	0x0083;	????	Illegal as address instr
     b18:	ae 00 00 00 	adda	#0x00000,r14	
     b1c:	00 00       	bra	@r0		
     b1e:	00 00       	bra	@r0		
     b20:	44 00       	rrcm.a	#1,	r4	
     b22:	84 00 b8 00 	mova	#0x000b8,r4	
     b26:	00 00       	bra	@r0		
     b28:	00 00       	bra	@r0		
     b2a:	00 00       	bra	@r0		
     b2c:	44 00       	rrcm.a	#1,	r4	
     b2e:	86 00 c0 00 	mova	#0x000c0,r6	
     b32:	00 00       	bra	@r0		
     b34:	00 00       	bra	@r0		
     b36:	00 00       	bra	@r0		
     b38:	44 00       	rrcm.a	#1,	r4	
     b3a:	87 00 ca 00 	mova	#0x000ca,r7	
     b3e:	00 00       	bra	@r0		
     b40:	00 00       	bra	@r0		
     b42:	00 00       	bra	@r0		
     b44:	44 00       	rrcm.a	#1,	r4	
     b46:	88 00 d8 00 	mova	#0x000d8,r8	
     b4a:	00 00       	bra	@r0		
     b4c:	00 00       	bra	@r0		
     b4e:	00 00       	bra	@r0		
     b50:	44 00       	rrcm.a	#1,	r4	
     b52:	89 00 e0 00 	mova	#0x000e0,r9	
     b56:	00 00       	bra	@r0		
     b58:	00 00       	bra	@r0		
     b5a:	00 00       	bra	@r0		
     b5c:	44 00       	rrcm.a	#1,	r4	
     b5e:	8a 00 e8 00 	mova	#0x000e8,r10	
     b62:	00 00       	bra	@r0		
     b64:	00 00       	bra	@r0		
     b66:	00 00       	bra	@r0		
     b68:	44 00       	rrcm.a	#1,	r4	
     b6a:	9a 00 ee 00 	cmpa	#0x000ee,r10	
     b6e:	00 00       	bra	@r0		
     b70:	00 00       	bra	@r0		
     b72:	00 00       	bra	@r0		
     b74:	44 00       	rrcm.a	#1,	r4	
     b76:	9c 00 f2 00 	cmpa	#0x000f2,r12	
     b7a:	00 00       	bra	@r0		
     b7c:	00 00       	bra	@r0		
     b7e:	00 00       	bra	@r0		
     b80:	44 00       	rrcm.a	#1,	r4	
     b82:	b9 00 f2 00 	suba	#0x000f2,r9	
     b86:	00 00       	bra	@r0		
     b88:	00 00       	bra	@r0		
     b8a:	00 00       	bra	@r0		
     b8c:	44 00       	rrcm.a	#1,	r4	
     b8e:	91 00 f4 00 	cmpa	#0x000f4,r1	
     b92:	00 00       	bra	@r0		
     b94:	00 00       	bra	@r0		
     b96:	00 00       	bra	@r0		
     b98:	44 00       	rrcm.a	#1,	r4	
     b9a:	92 00 fe 00 	cmpa	#0x000fe,r2	
     b9e:	00 00       	bra	@r0		
     ba0:	00 00       	bra	@r0		
     ba2:	00 00       	bra	@r0		
     ba4:	44 00       	rrcm.a	#1,	r4	
     ba6:	94 00 06 01 	cmpa	#0x00106,r4	
     baa:	00 00       	bra	@r0		
     bac:	00 00       	bra	@r0		
     bae:	00 00       	bra	@r0		
     bb0:	44 00       	rrcm.a	#1,	r4	
     bb2:	95 00 10 01 	cmpa	#0x00110,r5	
     bb6:	00 00       	bra	@r0		
     bb8:	00 00       	bra	@r0		
     bba:	00 00       	bra	@r0		
     bbc:	44 00       	rrcm.a	#1,	r4	
     bbe:	96 00 1e 01 	cmpa	#0x0011e,r6	
     bc2:	00 00       	bra	@r0		
     bc4:	00 00       	bra	@r0		
     bc6:	00 00       	bra	@r0		
     bc8:	44 00       	rrcm.a	#1,	r4	
     bca:	97 00 26 01 	cmpa	#0x00126,r7	
     bce:	00 00       	bra	@r0		
     bd0:	00 00       	bra	@r0		
     bd2:	00 00       	bra	@r0		
     bd4:	44 00       	rrcm.a	#1,	r4	
     bd6:	98 00 2e 01 	cmpa	#0x0012e,r8	
     bda:	00 00       	bra	@r0		
     bdc:	00 00       	bra	@r0		
     bde:	00 00       	bra	@r0		
     be0:	44 00       	rrcm.a	#1,	r4	
     be2:	aa 00 32 01 	adda	#0x00132,r10	
     be6:	00 00       	bra	@r0		
     be8:	00 00       	bra	@r0		
     bea:	00 00       	bra	@r0		
     bec:	44 00       	rrcm.a	#1,	r4	
     bee:	ab 00 3c 01 	adda	#0x0013c,r11	
     bf2:	00 00       	bra	@r0		
     bf4:	00 00       	bra	@r0		
     bf6:	00 00       	bra	@r0		
     bf8:	44 00       	rrcm.a	#1,	r4	
     bfa:	ad 00 44 01 	adda	#0x00144,r13	
     bfe:	00 00       	bra	@r0		
     c00:	00 00       	bra	@r0		
     c02:	00 00       	bra	@r0		
     c04:	44 00       	rrcm.a	#1,	r4	
     c06:	ae 00 4e 01 	adda	#0x0014e,r14	
     c0a:	00 00       	bra	@r0		
     c0c:	00 00       	bra	@r0		
     c0e:	00 00       	bra	@r0		
     c10:	44 00       	rrcm.a	#1,	r4	
     c12:	b0 00 52 01 	suba	#0x00152,r0	
     c16:	00 00       	bra	@r0		
     c18:	00 00       	bra	@r0		
     c1a:	00 00       	bra	@r0		
     c1c:	44 00       	rrcm.a	#1,	r4	
     c1e:	b9 00 52 01 	suba	#0x00152,r9	
     c22:	00 00       	bra	@r0		
     c24:	00 00       	bra	@r0		
     c26:	00 00       	bra	@r0		
     c28:	44 00       	rrcm.a	#1,	r4	
     c2a:	9f 00 54 01 	cmpa	#0x00154,r15	
     c2e:	00 00       	bra	@r0		
     c30:	00 00       	bra	@r0		
     c32:	00 00       	bra	@r0		
     c34:	44 00       	rrcm.a	#1,	r4	
     c36:	a0 00 5e 01 	adda	#0x0015e,r0	
     c3a:	00 00       	bra	@r0		
     c3c:	00 00       	bra	@r0		
     c3e:	00 00       	bra	@r0		
     c40:	44 00       	rrcm.a	#1,	r4	
     c42:	a2 00 66 01 	adda	#0x00166,r2	
     c46:	00 00       	bra	@r0		
     c48:	00 00       	bra	@r0		
     c4a:	00 00       	bra	@r0		
     c4c:	44 00       	rrcm.a	#1,	r4	
     c4e:	a3 00       	.word	0x00a3;	????	Illegal as address instr
     c50:	70 01 00 00 	mova	r1,	0x0000	;PC rel. 0x00c52
     c54:	00 00       	bra	@r0		
     c56:	00 00       	bra	@r0		
     c58:	44 00       	rrcm.a	#1,	r4	
     c5a:	a4 00 76 01 	adda	#0x00176,r4	
     c5e:	00 00       	bra	@r0		
     c60:	00 00       	bra	@r0		
     c62:	00 00       	bra	@r0		
     c64:	44 00       	rrcm.a	#1,	r4	
     c66:	a5 00 7e 01 	adda	#0x0017e,r5	
     c6a:	00 00       	bra	@r0		
     c6c:	00 00       	bra	@r0		
     c6e:	00 00       	bra	@r0		
     c70:	44 00       	rrcm.a	#1,	r4	
     c72:	a7 00 84 01 	adda	#0x00184,r7	
     c76:	00 00       	bra	@r0		
     c78:	00 00       	bra	@r0		
     c7a:	00 00       	bra	@r0		
     c7c:	44 00       	rrcm.a	#1,	r4	
     c7e:	b9 00 84 01 	suba	#0x00184,r9	
     c82:	00 00       	bra	@r0		
     c84:	00 00       	bra	@r0		
     c86:	00 00       	bra	@r0		
     c88:	44 00       	rrcm.a	#1,	r4	
     c8a:	b3 00       	.word	0x00b3;	????	Illegal as address instr
     c8c:	86 01 00 00 	mova	#0x10000,r6	
     c90:	00 00       	bra	@r0		
     c92:	00 00       	bra	@r0		
     c94:	24 00 00 00 	mova	&0x00000,r4	
     c98:	8c 01 00 00 	mova	#0x10000,r12	
     c9c:	a7 17       	popm	#11,	r1	
     c9e:	00 00       	bra	@r0		
     ca0:	24 00 bb 00 	mova	&0x000bb,r4	
     ca4:	0e 34       	jge	$+30     	;abs 0xcc2
     ca6:	00 00       	bra	@r0		
     ca8:	00 00       	bra	@r0		
     caa:	00 00       	bra	@r0		
     cac:	44 00       	rrcm.a	#1,	r4	
     cae:	bb 00 00 00 	suba	#0x00000,r11	
     cb2:	00 00       	bra	@r0		
     cb4:	00 00       	bra	@r0		
     cb6:	00 00       	bra	@r0		
     cb8:	44 00       	rrcm.a	#1,	r4	
     cba:	bd 00 02 00 	suba	#0x00002,r13	
     cbe:	00 00       	bra	@r0		
     cc0:	00 00       	bra	@r0		
     cc2:	00 00       	bra	@r0		
     cc4:	44 00       	rrcm.a	#1,	r4	
     cc6:	da 00       	cmpa	r0,	r10	
     cc8:	18 00       	mova	#0x00000,r8	
     cca:	00 00       	bra	@r0		
     ccc:	00 00       	bra	@r0		
     cce:	00 00       	bra	@r0		
     cd0:	44 00       	rrcm.a	#1,	r4	
     cd2:	db 00       	cmpa	r0,	r11	
     cd4:	20 00 00 00 	bra	&0x00000	
     cd8:	00 00       	bra	@r0		
     cda:	00 00       	bra	@r0		
     cdc:	44 00       	rrcm.a	#1,	r4	
     cde:	dc 00       	cmpa	r0,	r12	
     ce0:	24 00 00 00 	mova	&0x00000,r4	
     ce4:	00 00       	bra	@r0		
     ce6:	00 00       	bra	@r0		
     ce8:	44 00       	rrcm.a	#1,	r4	
     cea:	dd 00       	cmpa	r0,	r13	
     cec:	28 00 00 00 	mova	&0x00000,r8	
     cf0:	00 00       	bra	@r0		
     cf2:	00 00       	bra	@r0		
     cf4:	44 00       	rrcm.a	#1,	r4	
     cf6:	c2 00       	mova	r0,	r2	
     cf8:	30 00 00 00 	bra	0x0000		;PC rel. 0x00cfa
     cfc:	00 00       	bra	@r0		
     cfe:	00 00       	bra	@r0		
     d00:	44 00       	rrcm.a	#1,	r4	
     d02:	c3 00       	.word	0x00c3;	????	Illegal as address instr
     d04:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x00d06
     d08:	00 00       	bra	@r0		
     d0a:	00 00       	bra	@r0		
     d0c:	44 00       	rrcm.a	#1,	r4	
     d0e:	bf 00 38 00 	suba	#0x00038,r15	
     d12:	00 00       	bra	@r0		
     d14:	00 00       	bra	@r0		
     d16:	00 00       	bra	@r0		
     d18:	44 00       	rrcm.a	#1,	r4	
     d1a:	c0 00       	bra	r0		
     d1c:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x00d1e
     d20:	00 00       	bra	@r0		
     d22:	00 00       	bra	@r0		
     d24:	44 00       	rrcm.a	#1,	r4	
     d26:	c9 00       	mova	r0,	r9	
     d28:	42 00       	rrcm.a	#1,	r2	
     d2a:	00 00       	bra	@r0		
     d2c:	00 00       	bra	@r0		
     d2e:	00 00       	bra	@r0		
     d30:	44 00       	rrcm.a	#1,	r4	
     d32:	ca 00       	mova	r0,	r10	
     d34:	48 00       	rrcm.a	#1,	r8	
     d36:	00 00       	bra	@r0		
     d38:	00 00       	bra	@r0		
     d3a:	00 00       	bra	@r0		
     d3c:	44 00       	rrcm.a	#1,	r4	
     d3e:	cb 00       	mova	r0,	r11	
     d40:	4c 00       	rrcm.a	#1,	r12	
     d42:	00 00       	bra	@r0		
     d44:	00 00       	bra	@r0		
     d46:	00 00       	bra	@r0		
     d48:	44 00       	rrcm.a	#1,	r4	
     d4a:	cc 00       	mova	r0,	r12	
     d4c:	54 00       	rrcm	#1,	r4	
     d4e:	00 00       	bra	@r0		
     d50:	00 00       	bra	@r0		
     d52:	00 00       	bra	@r0		
     d54:	44 00       	rrcm.a	#1,	r4	
     d56:	cd 00       	mova	r0,	r13	
     d58:	5e 00       	rrcm	#1,	r14	
     d5a:	00 00       	bra	@r0		
     d5c:	00 00       	bra	@r0		
     d5e:	00 00       	bra	@r0		
     d60:	44 00       	rrcm.a	#1,	r4	
     d62:	ca 00       	mova	r0,	r10	
     d64:	66 00 00 00 	mova	r0,	&0x60000
     d68:	00 00       	bra	@r0		
     d6a:	00 00       	bra	@r0		
     d6c:	44 00       	rrcm.a	#1,	r4	
     d6e:	cf 00       	mova	r0,	r15	
     d70:	70 00 00 00 	mova	r0,	0x0000	;PC rel. 0x00d72
     d74:	00 00       	bra	@r0		
     d76:	00 00       	bra	@r0		
     d78:	44 00       	rrcm.a	#1,	r4	
     d7a:	d0 00       	cmpa	r0,	r0	
     d7c:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
     d80:	00 00       	bra	@r0		
     d82:	00 00       	bra	@r0		
     d84:	44 00       	rrcm.a	#1,	r4	
     d86:	d1 00       	cmpa	r0,	r1	
     d88:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
     d8c:	00 00       	bra	@r0		
     d8e:	00 00       	bra	@r0		
     d90:	44 00       	rrcm.a	#1,	r4	
     d92:	d2 00       	cmpa	r0,	r2	
     d94:	7e 00 00 00 	mova	r0,	0(r14)	;0x0000(r14)
     d98:	00 00       	bra	@r0		
     d9a:	00 00       	bra	@r0		
     d9c:	44 00       	rrcm.a	#1,	r4	
     d9e:	c5 00       	mova	r0,	r5	
     da0:	84 00 00 00 	mova	#0x00000,r4	
     da4:	00 00       	bra	@r0		
     da6:	00 00       	bra	@r0		
     da8:	44 00       	rrcm.a	#1,	r4	
     daa:	c6 00       	mova	r0,	r6	
     dac:	88 00 00 00 	mova	#0x00000,r8	
     db0:	00 00       	bra	@r0		
     db2:	00 00       	bra	@r0		
     db4:	44 00       	rrcm.a	#1,	r4	
     db6:	df 00       	cmpa	r0,	r15	
     db8:	8a 00 00 00 	mova	#0x00000,r10	
     dbc:	be 17       	popm	#12,	r9	
     dbe:	00 00       	bra	@r0		
     dc0:	40 00       	rrcm.a	#1,	r0	
     dc2:	bc 00 0b 00 	suba	#0x0000b,r12	
     dc6:	00 00       	bra	@r0		
     dc8:	00 00       	bra	@r0		
     dca:	00 00       	bra	@r0		
     dcc:	c0 00       	bra	r0		
     dce:	00 00       	bra	@r0		
     dd0:	02 00       	mova	@r0,	r2	
     dd2:	00 00       	bra	@r0		
     dd4:	00 00       	bra	@r0		
     dd6:	00 00       	bra	@r0		
     dd8:	e0 00       	adda	r0,	r0	
     dda:	00 00       	bra	@r0		
     ddc:	8a 00 00 00 	mova	#0x00000,r10	
     de0:	00 00       	bra	@r0		
     de2:	00 00       	bra	@r0		
     de4:	24 00 00 00 	mova	&0x00000,r4	
     de8:	8e 00 00 00 	mova	#0x00000,r14	
     dec:	c7 17       	popm	#13,	#0	;r3 As==00
     dee:	00 00       	bra	@r0		
     df0:	24 00 e1 00 	mova	&0x000e1,r4	
     df4:	a2 34       	jge	$+326    	;abs 0xf3a
     df6:	00 00       	bra	@r0		
     df8:	00 00       	bra	@r0		
     dfa:	00 00       	bra	@r0		
     dfc:	44 00       	rrcm.a	#1,	r4	
     dfe:	e1 00       	adda	r0,	r1	
	...
     e08:	44 00       	rrcm.a	#1,	r4	
     e0a:	e2 00       	adda	r0,	r2	
	...
     e14:	44 00       	rrcm.a	#1,	r4	
     e16:	e3 00       	.word	0x00e3;	????	Illegal as address instr
     e18:	08 00       	mova	@r0,	r8	
     e1a:	00 00       	bra	@r0		
     e1c:	00 00       	bra	@r0		
     e1e:	00 00       	bra	@r0		
     e20:	44 00       	rrcm.a	#1,	r4	
     e22:	e4 00       	adda	r0,	r4	
     e24:	12 00       	mova	#0x00000,r2	
     e26:	00 00       	bra	@r0		
     e28:	00 00       	bra	@r0		
     e2a:	00 00       	bra	@r0		
     e2c:	24 00 00 00 	mova	&0x00000,r4	
     e30:	14 00       	mova	#0x00000,r4	
     e32:	00 00       	bra	@r0		
     e34:	e1 17       	popm	#15,	r15	
     e36:	00 00       	bra	@r0		
     e38:	24 00 e6 00 	mova	&0x000e6,r4	
     e3c:	da 34       	jge	$+438    	;abs 0xff2
     e3e:	00 00       	bra	@r0		
     e40:	00 00       	bra	@r0		
     e42:	00 00       	bra	@r0		
     e44:	44 00       	rrcm.a	#1,	r4	
     e46:	e6 00       	adda	r0,	r6	
	...
     e50:	44 00       	rrcm.a	#1,	r4	
     e52:	e7 00       	adda	r0,	r7	
	...
     e5c:	44 00       	rrcm.a	#1,	r4	
     e5e:	e9 00       	adda	r0,	r9	
     e60:	1e 00       	mova	#0x00000,r14	
     e62:	00 00       	bra	@r0		
     e64:	00 00       	bra	@r0		
     e66:	00 00       	bra	@r0		
     e68:	44 00       	rrcm.a	#1,	r4	
     e6a:	ea 00       	adda	r0,	r10	
     e6c:	28 00 00 00 	mova	&0x00000,r8	
     e70:	00 00       	bra	@r0		
     e72:	00 00       	bra	@r0		
     e74:	44 00       	rrcm.a	#1,	r4	
     e76:	ec 00       	adda	r0,	r12	
     e78:	30 00 00 00 	bra	0x0000		;PC rel. 0x00e7a
     e7c:	00 00       	bra	@r0		
     e7e:	00 00       	bra	@r0		
     e80:	44 00       	rrcm.a	#1,	r4	
     e82:	ed 00       	adda	r0,	r13	
     e84:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x00e86
     e88:	00 00       	bra	@r0		
     e8a:	00 00       	bra	@r0		
     e8c:	44 00       	rrcm.a	#1,	r4	
     e8e:	ee 00       	adda	r0,	r14	
     e90:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x00e92
     e94:	00 00       	bra	@r0		
     e96:	00 00       	bra	@r0		
     e98:	44 00       	rrcm.a	#1,	r4	
     e9a:	3a 01 3a 00 	mova	58(r1),	r10	;0x003a(r1)
     e9e:	00 00       	bra	@r0		
     ea0:	00 00       	bra	@r0		
     ea2:	00 00       	bra	@r0		
     ea4:	44 00       	rrcm.a	#1,	r4	
     ea6:	f0 00       	suba	r0,	r0	
     ea8:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x00eaa
     eac:	00 00       	bra	@r0		
     eae:	00 00       	bra	@r0		
     eb0:	44 00       	rrcm.a	#1,	r4	
     eb2:	f1 00       	suba	r0,	r1	
     eb4:	46 00       	rrcm.a	#1,	r6	
     eb6:	00 00       	bra	@r0		
     eb8:	00 00       	bra	@r0		
     eba:	00 00       	bra	@r0		
     ebc:	44 00       	rrcm.a	#1,	r4	
     ebe:	f4 00       	suba	r0,	r4	
     ec0:	4e 00       	rrcm.a	#1,	r14	
     ec2:	00 00       	bra	@r0		
     ec4:	00 00       	bra	@r0		
     ec6:	00 00       	bra	@r0		
     ec8:	44 00       	rrcm.a	#1,	r4	
     eca:	f5 00       	suba	r0,	r5	
     ecc:	58 00       	rrcm	#1,	r8	
     ece:	00 00       	bra	@r0		
     ed0:	00 00       	bra	@r0		
     ed2:	00 00       	bra	@r0		
     ed4:	44 00       	rrcm.a	#1,	r4	
     ed6:	fe 00       	suba	r0,	r14	
     ed8:	5e 00       	rrcm	#1,	r14	
     eda:	00 00       	bra	@r0		
     edc:	00 00       	bra	@r0		
     ede:	00 00       	bra	@r0		
     ee0:	44 00       	rrcm.a	#1,	r4	
     ee2:	ff 00       	suba	r0,	r15	
     ee4:	66 00 00 00 	mova	r0,	&0x60000
     ee8:	00 00       	bra	@r0		
     eea:	00 00       	bra	@r0		
     eec:	44 00       	rrcm.a	#1,	r4	
     eee:	3a 01 6a 00 	mova	106(r1),r10	;0x006a(r1)
     ef2:	00 00       	bra	@r0		
     ef4:	00 00       	bra	@r0		
     ef6:	00 00       	bra	@r0		
     ef8:	44 00       	rrcm.a	#1,	r4	
     efa:	02 01       	mova	@r1,	r2	
     efc:	6c 00 00 00 	mova	r0,	&0xc0000
     f00:	00 00       	bra	@r0		
     f02:	00 00       	bra	@r0		
     f04:	44 00       	rrcm.a	#1,	r4	
     f06:	03 01       	.word	0x0103;	????	Illegal as address instr
     f08:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
     f0c:	00 00       	bra	@r0		
     f0e:	00 00       	bra	@r0		
     f10:	44 00       	rrcm.a	#1,	r4	
     f12:	07 01       	mova	@r1,	r7	
     f14:	7a 00 00 00 	mova	r0,	0(r10)	;0x0000(r10)
     f18:	00 00       	bra	@r0		
     f1a:	00 00       	bra	@r0		
     f1c:	44 00       	rrcm.a	#1,	r4	
     f1e:	3a 01 7a 00 	mova	122(r1),r10	;0x007a(r1)
     f22:	00 00       	bra	@r0		
     f24:	00 00       	bra	@r0		
     f26:	00 00       	bra	@r0		
     f28:	44 00       	rrcm.a	#1,	r4	
     f2a:	3a 01 7c 00 	mova	124(r1),r10	;0x007c(r1)
     f2e:	00 00       	bra	@r0		
     f30:	00 00       	bra	@r0		
     f32:	00 00       	bra	@r0		
     f34:	44 00       	rrcm.a	#1,	r4	
     f36:	f8 00       	suba	r0,	r8	
     f38:	7e 00 00 00 	mova	r0,	0(r14)	;0x0000(r14)
     f3c:	00 00       	bra	@r0		
     f3e:	00 00       	bra	@r0		
     f40:	44 00       	rrcm.a	#1,	r4	
     f42:	f9 00       	suba	r0,	r9	
     f44:	86 00 00 00 	mova	#0x00000,r6	
     f48:	00 00       	bra	@r0		
     f4a:	00 00       	bra	@r0		
     f4c:	44 00       	rrcm.a	#1,	r4	
     f4e:	09 01       	mova	@r1,	r9	
     f50:	8e 00 00 00 	mova	#0x00000,r14	
     f54:	00 00       	bra	@r0		
     f56:	00 00       	bra	@r0		
     f58:	44 00       	rrcm.a	#1,	r4	
     f5a:	0a 01       	mova	@r1,	r10	
     f5c:	98 00 00 00 	cmpa	#0x00000,r8	
     f60:	00 00       	bra	@r0		
     f62:	00 00       	bra	@r0		
     f64:	44 00       	rrcm.a	#1,	r4	
     f66:	0c 01       	mova	@r1,	r12	
     f68:	a0 00 00 00 	adda	#0x00000,r0	
     f6c:	00 00       	bra	@r0		
     f6e:	00 00       	bra	@r0		
     f70:	44 00       	rrcm.a	#1,	r4	
     f72:	0d 01       	mova	@r1,	r13	
     f74:	aa 00 00 00 	adda	#0x00000,r10	
     f78:	00 00       	bra	@r0		
     f7a:	00 00       	bra	@r0		
     f7c:	44 00       	rrcm.a	#1,	r4	
     f7e:	17 01       	mova	@r1+,	r7	
     f80:	aa 00 00 00 	adda	#0x00000,r10	
     f84:	00 00       	bra	@r0		
     f86:	00 00       	bra	@r0		
     f88:	44 00       	rrcm.a	#1,	r4	
     f8a:	24 01 c0 00 	mova	&0x100c0,r4	
     f8e:	00 00       	bra	@r0		
     f90:	00 00       	bra	@r0		
     f92:	00 00       	bra	@r0		
     f94:	44 00       	rrcm.a	#1,	r4	
     f96:	26 01 c4 00 	mova	&0x100c4,r6	
     f9a:	00 00       	bra	@r0		
     f9c:	00 00       	bra	@r0		
     f9e:	00 00       	bra	@r0		
     fa0:	44 00       	rrcm.a	#1,	r4	
     fa2:	3a 01 c4 00 	mova	196(r1),r10	;0x00c4(r1)
     fa6:	00 00       	bra	@r0		
     fa8:	00 00       	bra	@r0		
     faa:	00 00       	bra	@r0		
     fac:	44 00       	rrcm.a	#1,	r4	
     fae:	13 01       	.word	0x0113;	????	Illegal as address instr
     fb0:	c6 00       	mova	r0,	r6	
     fb2:	00 00       	bra	@r0		
     fb4:	00 00       	bra	@r0		
     fb6:	00 00       	bra	@r0		
     fb8:	44 00       	rrcm.a	#1,	r4	
     fba:	14 01       	mova	@r1+,	r4	
     fbc:	d0 00       	cmpa	r0,	r0	
     fbe:	00 00       	bra	@r0		
     fc0:	00 00       	bra	@r0		
     fc2:	00 00       	bra	@r0		
     fc4:	44 00       	rrcm.a	#1,	r4	
     fc6:	16 01       	mova	@r1+,	r6	
     fc8:	d8 00       	cmpa	r0,	r8	
     fca:	00 00       	bra	@r0		
     fcc:	00 00       	bra	@r0		
     fce:	00 00       	bra	@r0		
     fd0:	44 00       	rrcm.a	#1,	r4	
     fd2:	1d 01       	mova	@r1+,	r13	
     fd4:	e4 00       	adda	r0,	r4	
     fd6:	00 00       	bra	@r0		
     fd8:	00 00       	bra	@r0		
     fda:	00 00       	bra	@r0		
     fdc:	44 00       	rrcm.a	#1,	r4	
     fde:	1e 01       	mova	@r1+,	r14	
     fe0:	ee 00       	adda	r0,	r14	
     fe2:	00 00       	bra	@r0		
     fe4:	00 00       	bra	@r0		
     fe6:	00 00       	bra	@r0		
     fe8:	44 00       	rrcm.a	#1,	r4	
     fea:	20 01 f6 00 	bra	&0x100f6	
     fee:	00 00       	bra	@r0		
     ff0:	00 00       	bra	@r0		
     ff2:	00 00       	bra	@r0		
     ff4:	44 00       	rrcm.a	#1,	r4	
     ff6:	21 01 00 01 	mova	&0x10100,r1	
     ffa:	00 00       	bra	@r0		
     ffc:	00 00       	bra	@r0		
     ffe:	00 00       	bra	@r0		
    1000:	44 00       	rrcm.a	#1,	r4	
    1002:	22 01 08 01 	mova	&0x10108,r2	
    1006:	00 00       	bra	@r0		
    1008:	00 00       	bra	@r0		
    100a:	00 00       	bra	@r0		
    100c:	44 00       	rrcm.a	#1,	r4	
    100e:	29 01 10 01 	mova	&0x10110,r9	
    1012:	00 00       	bra	@r0		
    1014:	00 00       	bra	@r0		
    1016:	00 00       	bra	@r0		
    1018:	44 00       	rrcm.a	#1,	r4	
    101a:	2a 01 1a 01 	mova	&0x1011a,r10	
    101e:	00 00       	bra	@r0		
    1020:	00 00       	bra	@r0		
    1022:	00 00       	bra	@r0		
    1024:	44 00       	rrcm.a	#1,	r4	
    1026:	2c 01 22 01 	mova	&0x10122,r12	
    102a:	00 00       	bra	@r0		
    102c:	00 00       	bra	@r0		
    102e:	00 00       	bra	@r0		
    1030:	44 00       	rrcm.a	#1,	r4	
    1032:	2d 01 2c 01 	mova	&0x1012c,r13	
    1036:	00 00       	bra	@r0		
    1038:	00 00       	bra	@r0		
    103a:	00 00       	bra	@r0		
    103c:	44 00       	rrcm.a	#1,	r4	
    103e:	2e 01 36 01 	mova	&0x10136,r14	
    1042:	00 00       	bra	@r0		
    1044:	00 00       	bra	@r0		
    1046:	00 00       	bra	@r0		
    1048:	44 00       	rrcm.a	#1,	r4	
    104a:	30 01 3c 01 	bra	316(r1)	;0x013c(r1)
    104e:	00 00       	bra	@r0		
    1050:	00 00       	bra	@r0		
    1052:	00 00       	bra	@r0		
    1054:	24 00 00 00 	mova	&0x00000,r4	
    1058:	42 01       	rram.a	#1,	r2	
    105a:	00 00       	bra	@r0		
    105c:	fd 17       	popm	#16,	r12	
    105e:	00 00       	bra	@r0		
    1060:	24 00 3c 01 	mova	&0x0013c,r4	
    1064:	32 36       	jge	$-922    	;abs 0xcca
    1066:	00 00       	bra	@r0		
    1068:	00 00       	bra	@r0		
    106a:	00 00       	bra	@r0		
    106c:	44 00       	rrcm.a	#1,	r4	
    106e:	3c 01 00 00 	mova	0(r1),	r12	;0x0000(r1)
    1072:	00 00       	bra	@r0		
    1074:	00 00       	bra	@r0		
    1076:	00 00       	bra	@r0		
    1078:	44 00       	rrcm.a	#1,	r4	
    107a:	3e 01 02 00 	mova	2(r1),	r14	;0x0002(r1)
    107e:	00 00       	bra	@r0		
    1080:	00 00       	bra	@r0		
    1082:	00 00       	bra	@r0		
    1084:	44 00       	rrcm.a	#1,	r4	
    1086:	3f 01 0c 00 	mova	12(r1),	r15	;0x000c(r1)
    108a:	00 00       	bra	@r0		
    108c:	00 00       	bra	@r0		
    108e:	00 00       	bra	@r0		
    1090:	44 00       	rrcm.a	#1,	r4	
    1092:	40 01       	rram.a	#1,	r0	
    1094:	0e 00       	mova	@r0,	r14	
    1096:	00 00       	bra	@r0		
    1098:	00 00       	bra	@r0		
    109a:	00 00       	bra	@r0		
    109c:	44 00       	rrcm.a	#1,	r4	
    109e:	41 01       	rram.a	#1,	r1	
    10a0:	24 00 00 00 	mova	&0x00000,r4	
    10a4:	00 00       	bra	@r0		
    10a6:	00 00       	bra	@r0		
    10a8:	44 00       	rrcm.a	#1,	r4	
    10aa:	42 01       	rram.a	#1,	r2	
    10ac:	2a 00 00 00 	mova	&0x00000,r10	
    10b0:	00 00       	bra	@r0		
    10b2:	00 00       	bra	@r0		
    10b4:	44 00       	rrcm.a	#1,	r4	
    10b6:	49 01       	rram.a	#1,	r9	
    10b8:	2e 00 00 00 	mova	&0x00000,r14	
    10bc:	00 00       	bra	@r0		
    10be:	00 00       	bra	@r0		
    10c0:	44 00       	rrcm.a	#1,	r4	
    10c2:	4d 01       	rram.a	#1,	r13	
    10c4:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x010c6
    10c8:	00 00       	bra	@r0		
    10ca:	00 00       	bra	@r0		
    10cc:	44 00       	rrcm.a	#1,	r4	
    10ce:	52 01       	rram	#1,	r2	
    10d0:	40 00       	rrcm.a	#1,	r0	
    10d2:	00 00       	bra	@r0		
    10d4:	00 00       	bra	@r0		
    10d6:	00 00       	bra	@r0		
    10d8:	44 00       	rrcm.a	#1,	r4	
    10da:	54 01       	rram	#1,	r4	
    10dc:	4a 00       	rrcm.a	#1,	r10	
    10de:	00 00       	bra	@r0		
    10e0:	00 00       	bra	@r0		
    10e2:	00 00       	bra	@r0		
    10e4:	44 00       	rrcm.a	#1,	r4	
    10e6:	55 01       	rram	#1,	r5	
    10e8:	50 00       	rrcm	#1,	r0	
    10ea:	00 00       	bra	@r0		
    10ec:	00 00       	bra	@r0		
    10ee:	00 00       	bra	@r0		
    10f0:	44 00       	rrcm.a	#1,	r4	
    10f2:	56 01       	rram	#1,	r6	
    10f4:	54 00       	rrcm	#1,	r4	
    10f6:	00 00       	bra	@r0		
    10f8:	00 00       	bra	@r0		
    10fa:	00 00       	bra	@r0		
    10fc:	44 00       	rrcm.a	#1,	r4	
    10fe:	3f 01 5c 00 	mova	92(r1),	r15	;0x005c(r1)
    1102:	00 00       	bra	@r0		
    1104:	00 00       	bra	@r0		
    1106:	00 00       	bra	@r0		
    1108:	44 00       	rrcm.a	#1,	r4	
    110a:	4e 01       	rram.a	#1,	r14	
    110c:	66 00 00 00 	mova	r0,	&0x60000
    1110:	00 00       	bra	@r0		
    1112:	00 00       	bra	@r0		
    1114:	44 00       	rrcm.a	#1,	r4	
    1116:	4a 01       	rram.a	#1,	r10	
    1118:	6c 00 00 00 	mova	r0,	&0xc0000
    111c:	00 00       	bra	@r0		
    111e:	00 00       	bra	@r0		
    1120:	44 00       	rrcm.a	#1,	r4	
    1122:	45 01       	rram.a	#1,	r5	
    1124:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
    1128:	00 00       	bra	@r0		
    112a:	00 00       	bra	@r0		
    112c:	44 00       	rrcm.a	#1,	r4	
    112e:	46 01       	rram.a	#1,	r6	
    1130:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
    1134:	00 00       	bra	@r0		
    1136:	00 00       	bra	@r0		
    1138:	44 00       	rrcm.a	#1,	r4	
    113a:	58 01       	rram	#1,	r8	
    113c:	80 00 00 00 	bra	#0x00000	
    1140:	00 00       	bra	@r0		
    1142:	00 00       	bra	@r0		
    1144:	44 00       	rrcm.a	#1,	r4	
    1146:	59 01       	rram	#1,	r9	
    1148:	8a 00 00 00 	mova	#0x00000,r10	
    114c:	be 17       	popm	#12,	r9	
    114e:	00 00       	bra	@r0		
    1150:	40 00       	rrcm.a	#1,	r0	
    1152:	3d 01 0b 00 	mova	11(r1),	r13	;0x000b(r1)
    1156:	00 00       	bra	@r0		
    1158:	00 00       	bra	@r0		
    115a:	00 00       	bra	@r0		
    115c:	c0 00       	bra	r0		
    115e:	00 00       	bra	@r0		
    1160:	02 00       	mova	@r0,	r2	
    1162:	00 00       	bra	@r0		
    1164:	00 00       	bra	@r0		
    1166:	00 00       	bra	@r0		
    1168:	e0 00       	adda	r0,	r0	
    116a:	00 00       	bra	@r0		
    116c:	88 00 00 00 	mova	#0x00000,r8	
    1170:	00 00       	bra	@r0		
    1172:	00 00       	bra	@r0		
    1174:	24 00 00 00 	mova	&0x00000,r4	
    1178:	8e 00 00 00 	mova	#0x00000,r14	
    117c:	19 18       	.word	0x1819;	????	
    117e:	00 00       	bra	@r0		
    1180:	24 00 5b 01 	mova	&0x0015b,r4	
    1184:	c0 36       	jge	$-638    	;abs 0xf06
    1186:	00 00       	bra	@r0		
    1188:	00 00       	bra	@r0		
    118a:	00 00       	bra	@r0		
    118c:	44 00       	rrcm.a	#1,	r4	
    118e:	5b 01       	rram	#1,	r11	
	...
    1198:	44 00       	rrcm.a	#1,	r4	
    119a:	5c 01       	rram	#1,	r12	
	...
    11a4:	44 00       	rrcm.a	#1,	r4	
    11a6:	5d 01       	rram	#1,	r13	
    11a8:	04 00       	mova	@r0,	r4	
    11aa:	00 00       	bra	@r0		
    11ac:	00 00       	bra	@r0		
    11ae:	00 00       	bra	@r0		
    11b0:	44 00       	rrcm.a	#1,	r4	
    11b2:	5e 01       	rram	#1,	r14	
    11b4:	08 00       	mova	@r0,	r8	
    11b6:	00 00       	bra	@r0		
    11b8:	00 00       	bra	@r0		
    11ba:	00 00       	bra	@r0		
    11bc:	44 00       	rrcm.a	#1,	r4	
    11be:	5f 01       	rram	#1,	r15	
    11c0:	0c 00       	mova	@r0,	r12	
    11c2:	00 00       	bra	@r0		
    11c4:	00 00       	bra	@r0		
    11c6:	00 00       	bra	@r0		
    11c8:	24 00 00 00 	mova	&0x00000,r4	
    11cc:	0e 00       	mova	@r0,	r14	
    11ce:	00 00       	bra	@r0		
    11d0:	32 18       	.word	0x1832;	????	
    11d2:	00 00       	bra	@r0		
    11d4:	24 00 62 01 	mova	&0x00162,r4	
    11d8:	ce 36       	jge	$-610    	;abs 0xf76
    11da:	00 00       	bra	@r0		
    11dc:	00 00       	bra	@r0		
    11de:	00 00       	bra	@r0		
    11e0:	44 00       	rrcm.a	#1,	r4	
    11e2:	62 01 00 00 	mova	r1,	&0x20000
    11e6:	00 00       	bra	@r0		
    11e8:	00 00       	bra	@r0		
    11ea:	00 00       	bra	@r0		
    11ec:	44 00       	rrcm.a	#1,	r4	
    11ee:	6e 01 00 00 	mova	r1,	&0xe0000
    11f2:	00 00       	bra	@r0		
    11f4:	00 00       	bra	@r0		
    11f6:	00 00       	bra	@r0		
    11f8:	44 00       	rrcm.a	#1,	r4	
    11fa:	70 01 04 00 	mova	r1,	0x0004	;PC rel. 0x01200
    11fe:	00 00       	bra	@r0		
    1200:	00 00       	bra	@r0		
    1202:	00 00       	bra	@r0		
    1204:	44 00       	rrcm.a	#1,	r4	
    1206:	78 01 0a 00 	mova	r1,	10(r8)	;0x000a(r8)
    120a:	00 00       	bra	@r0		
    120c:	00 00       	bra	@r0		
    120e:	00 00       	bra	@r0		
    1210:	44 00       	rrcm.a	#1,	r4	
    1212:	81 01 10 00 	mova	#0x10010,r1	
    1216:	00 00       	bra	@r0		
    1218:	00 00       	bra	@r0		
    121a:	00 00       	bra	@r0		
    121c:	44 00       	rrcm.a	#1,	r4	
    121e:	82 01 16 00 	mova	#0x10016,r2	
    1222:	00 00       	bra	@r0		
    1224:	00 00       	bra	@r0		
    1226:	00 00       	bra	@r0		
    1228:	24 00 00 00 	mova	&0x00000,r4	
    122c:	18 00       	mova	#0x00000,r8	
    122e:	00 00       	bra	@r0		
    1230:	45 18       	.word	0x1845;	????	
    1232:	00 00       	bra	@r0		
    1234:	24 00 84 01 	mova	&0x00184,r4	
    1238:	e6 36       	jge	$-562    	;abs 0x1006
    123a:	00 00       	bra	@r0		
    123c:	00 00       	bra	@r0		
    123e:	00 00       	bra	@r0		
    1240:	44 00       	rrcm.a	#1,	r4	
    1242:	84 01 00 00 	mova	#0x10000,r4	
    1246:	00 00       	bra	@r0		
    1248:	00 00       	bra	@r0		
    124a:	00 00       	bra	@r0		
    124c:	44 00       	rrcm.a	#1,	r4	
    124e:	86 01 00 00 	mova	#0x10000,r6	
    1252:	00 00       	bra	@r0		
    1254:	00 00       	bra	@r0		
    1256:	00 00       	bra	@r0		
    1258:	44 00       	rrcm.a	#1,	r4	
    125a:	89 01 04 00 	mova	#0x10004,r9	
    125e:	00 00       	bra	@r0		
    1260:	00 00       	bra	@r0		
    1262:	00 00       	bra	@r0		
    1264:	44 00       	rrcm.a	#1,	r4	
    1266:	8c 01 08 00 	mova	#0x10008,r12	
    126a:	00 00       	bra	@r0		
    126c:	00 00       	bra	@r0		
    126e:	00 00       	bra	@r0		
    1270:	44 00       	rrcm.a	#1,	r4	
    1272:	8f 01 0c 00 	mova	#0x1000c,r15	
    1276:	00 00       	bra	@r0		
    1278:	00 00       	bra	@r0		
    127a:	00 00       	bra	@r0		
    127c:	44 00       	rrcm.a	#1,	r4	
    127e:	92 01 10 00 	cmpa	#0x10010,r2	
    1282:	00 00       	bra	@r0		
    1284:	00 00       	bra	@r0		
    1286:	00 00       	bra	@r0		
    1288:	44 00       	rrcm.a	#1,	r4	
    128a:	94 01 14 00 	cmpa	#0x10014,r4	
    128e:	00 00       	bra	@r0		
    1290:	00 00       	bra	@r0		
    1292:	00 00       	bra	@r0		
    1294:	24 00 00 00 	mova	&0x00000,r4	
    1298:	16 00       	mova	#0x00000,r6	
    129a:	00 00       	bra	@r0		
    129c:	55 18       	.word	0x1855;	????	
    129e:	00 00       	bra	@r0		
    12a0:	24 00 97 01 	mova	&0x00197,r4	
    12a4:	fc 36       	jge	$-518    	;abs 0x109e
    12a6:	00 00       	bra	@r0		
    12a8:	00 00       	bra	@r0		
    12aa:	00 00       	bra	@r0		
    12ac:	44 00       	rrcm.a	#1,	r4	
    12ae:	97 01 00 00 	cmpa	#0x10000,r7	
    12b2:	00 00       	bra	@r0		
    12b4:	00 00       	bra	@r0		
    12b6:	00 00       	bra	@r0		
    12b8:	44 00       	rrcm.a	#1,	r4	
    12ba:	a4 01 00 00 	adda	#0x10000,r4	
    12be:	00 00       	bra	@r0		
    12c0:	00 00       	bra	@r0		
    12c2:	00 00       	bra	@r0		
    12c4:	44 00       	rrcm.a	#1,	r4	
    12c6:	a7 01 06 00 	adda	#0x10006,r7	
    12ca:	00 00       	bra	@r0		
    12cc:	00 00       	bra	@r0		
    12ce:	00 00       	bra	@r0		
    12d0:	44 00       	rrcm.a	#1,	r4	
    12d2:	b0 01 0c 00 	suba	#0x1000c,r0	
    12d6:	00 00       	bra	@r0		
    12d8:	00 00       	bra	@r0		
    12da:	00 00       	bra	@r0		
    12dc:	44 00       	rrcm.a	#1,	r4	
    12de:	b1 01 12 00 	suba	#0x10012,r1	
    12e2:	00 00       	bra	@r0		
    12e4:	00 00       	bra	@r0		
    12e6:	00 00       	bra	@r0		
    12e8:	24 00 00 00 	mova	&0x00000,r4	
    12ec:	14 00       	mova	#0x00000,r4	
    12ee:	00 00       	bra	@r0		
    12f0:	6b 18       	.word	0x186b;	????	
    12f2:	00 00       	bra	@r0		
    12f4:	24 00 b3 01 	mova	&0x001b3,r4	
    12f8:	10 37       	jge	$-478    	;abs 0x111a
    12fa:	00 00       	bra	@r0		
    12fc:	00 00       	bra	@r0		
    12fe:	00 00       	bra	@r0		
    1300:	44 00       	rrcm.a	#1,	r4	
    1302:	b3 01       	.word	0x01b3;	????	Illegal as address instr
	...
    130c:	44 00       	rrcm.a	#1,	r4	
    130e:	b4 01 10 00 	suba	#0x10010,r4	
    1312:	00 00       	bra	@r0		
    1314:	00 00       	bra	@r0		
    1316:	00 00       	bra	@r0		
    1318:	44 00       	rrcm.a	#1,	r4	
    131a:	b6 01 14 00 	suba	#0x10014,r6	
    131e:	00 00       	bra	@r0		
    1320:	00 00       	bra	@r0		
    1322:	00 00       	bra	@r0		
    1324:	44 00       	rrcm.a	#1,	r4	
    1326:	b7 01 16 00 	suba	#0x10016,r7	
    132a:	00 00       	bra	@r0		
    132c:	00 00       	bra	@r0		
    132e:	00 00       	bra	@r0		
    1330:	44 00       	rrcm.a	#1,	r4	
    1332:	b8 01 1e 00 	suba	#0x1001e,r8	
    1336:	00 00       	bra	@r0		
    1338:	00 00       	bra	@r0		
    133a:	00 00       	bra	@r0		
    133c:	44 00       	rrcm.a	#1,	r4	
    133e:	b9 01 26 00 	suba	#0x10026,r9	
    1342:	00 00       	bra	@r0		
    1344:	00 00       	bra	@r0		
    1346:	00 00       	bra	@r0		
    1348:	44 00       	rrcm.a	#1,	r4	
    134a:	ba 01 30 00 	suba	#0x10030,r10	
    134e:	00 00       	bra	@r0		
    1350:	00 00       	bra	@r0		
    1352:	00 00       	bra	@r0		
    1354:	44 00       	rrcm.a	#1,	r4	
    1356:	bb 01 3a 00 	suba	#0x1003a,r11	
    135a:	00 00       	bra	@r0		
    135c:	00 00       	bra	@r0		
    135e:	00 00       	bra	@r0		
    1360:	44 00       	rrcm.a	#1,	r4	
    1362:	c6 01       	mova	r1,	r6	
    1364:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x01366
    1368:	00 00       	bra	@r0		
    136a:	00 00       	bra	@r0		
    136c:	44 00       	rrcm.a	#1,	r4	
    136e:	be 01 44 00 	suba	#0x10044,r14	
    1372:	00 00       	bra	@r0		
    1374:	00 00       	bra	@r0		
    1376:	00 00       	bra	@r0		
    1378:	44 00       	rrcm.a	#1,	r4	
    137a:	bf 01 52 00 	suba	#0x10052,r15	
    137e:	00 00       	bra	@r0		
    1380:	00 00       	bra	@r0		
    1382:	00 00       	bra	@r0		
    1384:	44 00       	rrcm.a	#1,	r4	
    1386:	c4 01       	mova	r1,	r4	
    1388:	5e 00       	rrcm	#1,	r14	
    138a:	00 00       	bra	@r0		
    138c:	00 00       	bra	@r0		
    138e:	00 00       	bra	@r0		
    1390:	44 00       	rrcm.a	#1,	r4	
    1392:	c2 01       	mova	r1,	r2	
    1394:	64 00 00 00 	mova	r0,	&0x40000
    1398:	00 00       	bra	@r0		
    139a:	00 00       	bra	@r0		
    139c:	44 00       	rrcm.a	#1,	r4	
    139e:	c8 01       	mova	r1,	r8	
    13a0:	6a 00 00 00 	mova	r0,	&0xa0000
    13a4:	00 00       	bra	@r0		
    13a6:	00 00       	bra	@r0		
    13a8:	44 00       	rrcm.a	#1,	r4	
    13aa:	b7 01 6c 00 	suba	#0x1006c,r7	
    13ae:	00 00       	bra	@r0		
    13b0:	00 00       	bra	@r0		
    13b2:	00 00       	bra	@r0		
    13b4:	44 00       	rrcm.a	#1,	r4	
    13b6:	ca 01       	mova	r1,	r10	
    13b8:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
    13bc:	82 18       	.word	0x1882;	????	
    13be:	00 00       	bra	@r0		
    13c0:	40 00       	rrcm.a	#1,	r0	
    13c2:	b4 01 0a 00 	suba	#0x1000a,r4	
    13c6:	00 00       	bra	@r0		
    13c8:	91 18       	.word	0x1891;	????	
    13ca:	00 00       	bra	@r0		
    13cc:	40 00       	rrcm.a	#1,	r0	
    13ce:	b6 01 0b 00 	suba	#0x1000b,r6	
    13d2:	00 00       	bra	@r0		
    13d4:	a4 18       	.word	0x18a4;	????	
    13d6:	00 00       	bra	@r0		
    13d8:	40 00       	rrcm.a	#1,	r0	
    13da:	b6 01 0d 00 	suba	#0x1000d,r6	
    13de:	00 00       	bra	@r0		
    13e0:	00 00       	bra	@r0		
    13e2:	00 00       	bra	@r0		
    13e4:	c0 00       	bra	r0		
    13e6:	00 00       	bra	@r0		
    13e8:	10 00       	bra	#0x00000	
    13ea:	00 00       	bra	@r0		
    13ec:	00 00       	bra	@r0		
    13ee:	00 00       	bra	@r0		
    13f0:	e0 00       	adda	r0,	r0	
    13f2:	00 00       	bra	@r0		
    13f4:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
    13f8:	00 00       	bra	@r0		
    13fa:	00 00       	bra	@r0		
    13fc:	24 00 00 00 	mova	&0x00000,r4	
    1400:	86 00 00 00 	mova	#0x00000,r6	
    1404:	ba 18       	.word	0x18ba;	????	
    1406:	00 00       	bra	@r0		
    1408:	24 00 cc 01 	mova	&0x001cc,r4	
    140c:	c4 37       	jge	$-118    	;abs 0x1396
    140e:	00 00       	bra	@r0		
    1410:	00 00       	bra	@r0		
    1412:	00 00       	bra	@r0		
    1414:	44 00       	rrcm.a	#1,	r4	
    1416:	cc 01       	mova	r1,	r12	
	...
    1420:	44 00       	rrcm.a	#1,	r4	
    1422:	ce 01       	mova	r1,	r14	
    1424:	12 00       	mova	#0x00000,r2	
    1426:	00 00       	bra	@r0		
    1428:	00 00       	bra	@r0		
    142a:	00 00       	bra	@r0		
    142c:	44 00       	rrcm.a	#1,	r4	
    142e:	d2 01       	cmpa	r1,	r2	
    1430:	1c 00       	mova	#0x00000,r12	
    1432:	00 00       	bra	@r0		
    1434:	00 00       	bra	@r0		
    1436:	00 00       	bra	@r0		
    1438:	44 00       	rrcm.a	#1,	r4	
    143a:	d3 01       	.word	0x01d3;	????	Illegal as address instr
    143c:	1e 00       	mova	#0x00000,r14	
    143e:	00 00       	bra	@r0		
    1440:	00 00       	bra	@r0		
    1442:	00 00       	bra	@r0		
    1444:	44 00       	rrcm.a	#1,	r4	
    1446:	d4 01       	cmpa	r1,	r4	
    1448:	2e 00 00 00 	mova	&0x00000,r14	
    144c:	00 00       	bra	@r0		
    144e:	00 00       	bra	@r0		
    1450:	44 00       	rrcm.a	#1,	r4	
    1452:	d7 01       	cmpa	r1,	r7	
    1454:	42 00       	rrcm.a	#1,	r2	
    1456:	00 00       	bra	@r0		
    1458:	00 00       	bra	@r0		
    145a:	00 00       	bra	@r0		
    145c:	44 00       	rrcm.a	#1,	r4	
    145e:	d8 01       	cmpa	r1,	r8	
    1460:	4c 00       	rrcm.a	#1,	r12	
    1462:	00 00       	bra	@r0		
    1464:	00 00       	bra	@r0		
    1466:	00 00       	bra	@r0		
    1468:	44 00       	rrcm.a	#1,	r4	
    146a:	d9 01       	cmpa	r1,	r9	
    146c:	52 00       	rrcm	#1,	r2	
    146e:	00 00       	bra	@r0		
    1470:	00 00       	bra	@r0		
    1472:	00 00       	bra	@r0		
    1474:	44 00       	rrcm.a	#1,	r4	
    1476:	da 01       	cmpa	r1,	r10	
    1478:	5a 00       	rrcm	#1,	r10	
    147a:	00 00       	bra	@r0		
    147c:	00 00       	bra	@r0		
    147e:	00 00       	bra	@r0		
    1480:	44 00       	rrcm.a	#1,	r4	
    1482:	db 01       	cmpa	r1,	r11	
    1484:	60 00 00 00 	mova	r0,	&0x00000
    1488:	00 00       	bra	@r0		
    148a:	00 00       	bra	@r0		
    148c:	44 00       	rrcm.a	#1,	r4	
    148e:	dc 01       	cmpa	r1,	r12	
    1490:	68 00 00 00 	mova	r0,	&0x80000
    1494:	00 00       	bra	@r0		
    1496:	00 00       	bra	@r0		
    1498:	44 00       	rrcm.a	#1,	r4	
    149a:	de 01       	cmpa	r1,	r14	
    149c:	6e 00 00 00 	mova	r0,	&0xe0000
    14a0:	00 00       	bra	@r0		
    14a2:	00 00       	bra	@r0		
    14a4:	44 00       	rrcm.a	#1,	r4	
    14a6:	df 01       	cmpa	r1,	r15	
    14a8:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
    14ac:	00 00       	bra	@r0		
    14ae:	00 00       	bra	@r0		
    14b0:	44 00       	rrcm.a	#1,	r4	
    14b2:	e0 01       	adda	r1,	r0	
    14b4:	8a 00 00 00 	mova	#0x00000,r10	
    14b8:	00 00       	bra	@r0		
    14ba:	00 00       	bra	@r0		
    14bc:	44 00       	rrcm.a	#1,	r4	
    14be:	de 01       	cmpa	r1,	r14	
    14c0:	96 00 00 00 	cmpa	#0x00000,r6	
    14c4:	00 00       	bra	@r0		
    14c6:	00 00       	bra	@r0		
    14c8:	44 00       	rrcm.a	#1,	r4	
    14ca:	e3 01       	.word	0x01e3;	????	Illegal as address instr
    14cc:	9c 00 00 00 	cmpa	#0x00000,r12	
    14d0:	00 00       	bra	@r0		
    14d2:	00 00       	bra	@r0		
    14d4:	44 00       	rrcm.a	#1,	r4	
    14d6:	e4 01       	adda	r1,	r4	
    14d8:	9e 00 00 00 	cmpa	#0x00000,r14	
    14dc:	00 00       	bra	@r0		
    14de:	00 00       	bra	@r0		
    14e0:	44 00       	rrcm.a	#1,	r4	
    14e2:	e5 01       	adda	r1,	r5	
    14e4:	c8 00       	mova	r0,	r8	
    14e6:	00 00       	bra	@r0		
    14e8:	00 00       	bra	@r0		
    14ea:	00 00       	bra	@r0		
    14ec:	44 00       	rrcm.a	#1,	r4	
    14ee:	e3 01       	.word	0x01e3;	????	Illegal as address instr
    14f0:	d0 00       	cmpa	r0,	r0	
    14f2:	00 00       	bra	@r0		
    14f4:	00 00       	bra	@r0		
    14f6:	00 00       	bra	@r0		
    14f8:	44 00       	rrcm.a	#1,	r4	
    14fa:	e8 01       	adda	r1,	r8	
    14fc:	d6 00       	cmpa	r0,	r6	
    14fe:	00 00       	bra	@r0		
    1500:	00 00       	bra	@r0		
    1502:	00 00       	bra	@r0		
    1504:	44 00       	rrcm.a	#1,	r4	
    1506:	e9 01       	adda	r1,	r9	
    1508:	da 00       	cmpa	r0,	r10	
    150a:	00 00       	bra	@r0		
    150c:	00 00       	bra	@r0		
    150e:	00 00       	bra	@r0		
    1510:	44 00       	rrcm.a	#1,	r4	
    1512:	ea 01       	adda	r1,	r10	
    1514:	e0 00       	adda	r0,	r0	
    1516:	00 00       	bra	@r0		
    1518:	00 00       	bra	@r0		
    151a:	00 00       	bra	@r0		
    151c:	44 00       	rrcm.a	#1,	r4	
    151e:	eb 01       	adda	r1,	r11	
    1520:	ea 00       	adda	r0,	r10	
    1522:	00 00       	bra	@r0		
    1524:	00 00       	bra	@r0		
    1526:	00 00       	bra	@r0		
    1528:	44 00       	rrcm.a	#1,	r4	
    152a:	ec 01       	adda	r1,	r12	
    152c:	f4 00       	suba	r0,	r4	
    152e:	00 00       	bra	@r0		
    1530:	00 00       	bra	@r0		
    1532:	00 00       	bra	@r0		
    1534:	44 00       	rrcm.a	#1,	r4	
    1536:	ed 01       	adda	r1,	r13	
    1538:	fa 00       	suba	r0,	r10	
    153a:	00 00       	bra	@r0		
    153c:	00 00       	bra	@r0		
    153e:	00 00       	bra	@r0		
    1540:	44 00       	rrcm.a	#1,	r4	
    1542:	ee 01       	adda	r1,	r14	
    1544:	fe 00       	suba	r0,	r14	
    1546:	00 00       	bra	@r0		
    1548:	00 00       	bra	@r0		
    154a:	00 00       	bra	@r0		
    154c:	44 00       	rrcm.a	#1,	r4	
    154e:	f1 01       	suba	r1,	r1	
    1550:	38 01 00 00 	mova	0(r1),	r8	;0x0000(r1)
    1554:	00 00       	bra	@r0		
    1556:	00 00       	bra	@r0		
    1558:	44 00       	rrcm.a	#1,	r4	
    155a:	f2 01       	suba	r1,	r2	
    155c:	6e 01 00 00 	mova	r1,	&0xe0000
    1560:	00 00       	bra	@r0		
    1562:	00 00       	bra	@r0		
    1564:	44 00       	rrcm.a	#1,	r4	
    1566:	ed 01       	adda	r1,	r13	
    1568:	8c 01 00 00 	mova	#0x10000,r12	
    156c:	00 00       	bra	@r0		
    156e:	00 00       	bra	@r0		
    1570:	44 00       	rrcm.a	#1,	r4	
    1572:	e8 01       	adda	r1,	r8	
    1574:	92 01 00 00 	cmpa	#0x10000,r2	
    1578:	00 00       	bra	@r0		
    157a:	00 00       	bra	@r0		
    157c:	44 00       	rrcm.a	#1,	r4	
    157e:	f7 01       	suba	r1,	r7	
    1580:	98 01 00 00 	cmpa	#0x10000,r8	
    1584:	00 00       	bra	@r0		
    1586:	00 00       	bra	@r0		
    1588:	44 00       	rrcm.a	#1,	r4	
    158a:	f9 01       	suba	r1,	r9	
    158c:	9e 01 00 00 	cmpa	#0x10000,r14	
    1590:	00 00       	bra	@r0		
    1592:	00 00       	bra	@r0		
    1594:	44 00       	rrcm.a	#1,	r4	
    1596:	fa 01       	suba	r1,	r10	
    1598:	a0 01 00 00 	adda	#0x10000,r0	
    159c:	00 00       	bra	@r0		
    159e:	00 00       	bra	@r0		
    15a0:	44 00       	rrcm.a	#1,	r4	
    15a2:	fb 01       	suba	r1,	r11	
    15a4:	d8 01       	cmpa	r1,	r8	
    15a6:	00 00       	bra	@r0		
    15a8:	00 00       	bra	@r0		
    15aa:	00 00       	bra	@r0		
    15ac:	44 00       	rrcm.a	#1,	r4	
    15ae:	f9 01       	suba	r1,	r9	
    15b0:	f6 01       	suba	r1,	r6	
    15b2:	00 00       	bra	@r0		
    15b4:	00 00       	bra	@r0		
    15b6:	00 00       	bra	@r0		
    15b8:	44 00       	rrcm.a	#1,	r4	
    15ba:	ff 01       	suba	r1,	r15	
    15bc:	fc 01       	suba	r1,	r12	
    15be:	00 00       	bra	@r0		
    15c0:	00 00       	bra	@r0		
    15c2:	00 00       	bra	@r0		
    15c4:	44 00       	rrcm.a	#1,	r4	
    15c6:	00 02       	bra	#4		;r2 As==10
    15c8:	02 02       	mova	#4,	r2	;r2 As==10
    15ca:	00 00       	bra	@r0		
    15cc:	00 00       	bra	@r0		
    15ce:	00 00       	bra	@r0		
    15d0:	44 00       	rrcm.a	#1,	r4	
    15d2:	03 02       	.word	0x0203;	????	Illegal as address instr
    15d4:	0a 02       	mova	#4,	r10	;r2 As==10
    15d6:	00 00       	bra	@r0		
    15d8:	00 00       	bra	@r0		
    15da:	00 00       	bra	@r0		
    15dc:	44 00       	rrcm.a	#1,	r4	
    15de:	04 02       	mova	#4,	r4	;r2 As==10
    15e0:	16 02       	mova	#8,	r6	;r2 As==11
    15e2:	00 00       	bra	@r0		
    15e4:	00 00       	bra	@r0		
    15e6:	00 00       	bra	@r0		
    15e8:	44 00       	rrcm.a	#1,	r4	
    15ea:	06 02       	mova	#4,	r6	;r2 As==10
    15ec:	26 02 00 00 	mova	&0x20000,r6	
    15f0:	00 00       	bra	@r0		
    15f2:	00 00       	bra	@r0		
    15f4:	44 00       	rrcm.a	#1,	r4	
    15f6:	09 02       	mova	#4,	r9	;r2 As==10
    15f8:	2e 02 00 00 	mova	&0x20000,r14	
    15fc:	00 00       	bra	@r0		
    15fe:	00 00       	bra	@r0		
    1600:	44 00       	rrcm.a	#1,	r4	
    1602:	0a 02       	mova	#4,	r10	;r2 As==10
    1604:	3a 02 00 00 	mova	&0x0000,r10	
    1608:	00 00       	bra	@r0		
    160a:	00 00       	bra	@r0		
    160c:	44 00       	rrcm.a	#1,	r4	
    160e:	0c 02       	mova	#4,	r12	;r2 As==10
    1610:	4a 02       	rlam.a	#1,	r10	
    1612:	00 00       	bra	@r0		
    1614:	00 00       	bra	@r0		
    1616:	00 00       	bra	@r0		
    1618:	44 00       	rrcm.a	#1,	r4	
    161a:	0f 02       	mova	#4,	r15	;r2 As==10
    161c:	52 02       	rlam	#1,	r2	
    161e:	00 00       	bra	@r0		
    1620:	00 00       	bra	@r0		
    1622:	00 00       	bra	@r0		
    1624:	44 00       	rrcm.a	#1,	r4	
    1626:	10 02       	bra	#8		;r2 As==11
    1628:	5e 02       	rlam	#1,	r14	
    162a:	00 00       	bra	@r0		
    162c:	00 00       	bra	@r0		
    162e:	00 00       	bra	@r0		
    1630:	44 00       	rrcm.a	#1,	r4	
    1632:	12 02       	mova	#8,	r2	;r2 As==11
    1634:	6e 02 00 00 	mova	r2,	&0xe0000
    1638:	00 00       	bra	@r0		
    163a:	00 00       	bra	@r0		
    163c:	44 00       	rrcm.a	#1,	r4	
    163e:	15 02       	mova	#8,	r5	;r2 As==11
    1640:	76 02 00 00 	mova	r2,	0(r6)	;0x0000(r6)
    1644:	00 00       	bra	@r0		
    1646:	00 00       	bra	@r0		
    1648:	44 00       	rrcm.a	#1,	r4	
    164a:	16 02       	mova	#8,	r6	;r2 As==11
    164c:	82 02 00 00 	mova	#0x20000,r2	
    1650:	00 00       	bra	@r0		
    1652:	00 00       	bra	@r0		
    1654:	44 00       	rrcm.a	#1,	r4	
    1656:	18 02       	mova	#8,	r8	;r2 As==11
    1658:	92 02 00 00 	cmpa	#0x20000,r2	
    165c:	00 00       	bra	@r0		
    165e:	00 00       	bra	@r0		
    1660:	44 00       	rrcm.a	#1,	r4	
    1662:	1b 02       	mova	#8,	r11	;r2 As==11
    1664:	9a 02 00 00 	cmpa	#0x20000,r10	
    1668:	00 00       	bra	@r0		
    166a:	00 00       	bra	@r0		
    166c:	44 00       	rrcm.a	#1,	r4	
    166e:	1c 02       	mova	#8,	r12	;r2 As==11
    1670:	a6 02 00 00 	adda	#0x20000,r6	
    1674:	00 00       	bra	@r0		
    1676:	00 00       	bra	@r0		
    1678:	44 00       	rrcm.a	#1,	r4	
    167a:	1e 02       	mova	#8,	r14	;r2 As==11
    167c:	b6 02 00 00 	suba	#0x20000,r6	
    1680:	00 00       	bra	@r0		
    1682:	00 00       	bra	@r0		
    1684:	44 00       	rrcm.a	#1,	r4	
    1686:	21 02 be 02 	mova	&0x202be,r1	
    168a:	00 00       	bra	@r0		
    168c:	00 00       	bra	@r0		
    168e:	00 00       	bra	@r0		
    1690:	44 00       	rrcm.a	#1,	r4	
    1692:	22 02 ca 02 	mova	&0x202ca,r2	
    1696:	00 00       	bra	@r0		
    1698:	00 00       	bra	@r0		
    169a:	00 00       	bra	@r0		
    169c:	44 00       	rrcm.a	#1,	r4	
    169e:	24 02 da 02 	mova	&0x202da,r4	
    16a2:	00 00       	bra	@r0		
    16a4:	00 00       	bra	@r0		
    16a6:	00 00       	bra	@r0		
    16a8:	44 00       	rrcm.a	#1,	r4	
    16aa:	27 02 e2 02 	mova	&0x202e2,r7	
    16ae:	00 00       	bra	@r0		
    16b0:	00 00       	bra	@r0		
    16b2:	00 00       	bra	@r0		
    16b4:	44 00       	rrcm.a	#1,	r4	
    16b6:	28 02 ee 02 	mova	&0x202ee,r8	
    16ba:	00 00       	bra	@r0		
    16bc:	00 00       	bra	@r0		
    16be:	00 00       	bra	@r0		
    16c0:	44 00       	rrcm.a	#1,	r4	
    16c2:	2a 02 fe 02 	mova	&0x202fe,r10	
    16c6:	00 00       	bra	@r0		
    16c8:	00 00       	bra	@r0		
    16ca:	00 00       	bra	@r0		
    16cc:	44 00       	rrcm.a	#1,	r4	
    16ce:	2d 02 06 03 	mova	&0x20306,r13	
    16d2:	00 00       	bra	@r0		
    16d4:	00 00       	bra	@r0		
    16d6:	00 00       	bra	@r0		
    16d8:	44 00       	rrcm.a	#1,	r4	
    16da:	2e 02 12 03 	mova	&0x20312,r14	
    16de:	00 00       	bra	@r0		
    16e0:	00 00       	bra	@r0		
    16e2:	00 00       	bra	@r0		
    16e4:	44 00       	rrcm.a	#1,	r4	
    16e6:	30 02 22 03 	bra	&0x0322	
    16ea:	00 00       	bra	@r0		
    16ec:	00 00       	bra	@r0		
    16ee:	00 00       	bra	@r0		
    16f0:	44 00       	rrcm.a	#1,	r4	
    16f2:	33 02       	.word	0x0233;	????	Illegal as address instr
    16f4:	2a 03 00 00 	mova	&0x30000,r10	
    16f8:	00 00       	bra	@r0		
    16fa:	00 00       	bra	@r0		
    16fc:	44 00       	rrcm.a	#1,	r4	
    16fe:	34 02 36 03 	mova	&0x0336,r4	
    1702:	00 00       	bra	@r0		
    1704:	00 00       	bra	@r0		
    1706:	00 00       	bra	@r0		
    1708:	44 00       	rrcm.a	#1,	r4	
    170a:	36 02 46 03 	mova	&0x0346,r6	
    170e:	00 00       	bra	@r0		
    1710:	00 00       	bra	@r0		
    1712:	00 00       	bra	@r0		
    1714:	44 00       	rrcm.a	#1,	r4	
    1716:	39 02 4e 03 	mova	&0x034e,r9	
    171a:	00 00       	bra	@r0		
    171c:	00 00       	bra	@r0		
    171e:	00 00       	bra	@r0		
    1720:	44 00       	rrcm.a	#1,	r4	
    1722:	3a 02 5a 03 	mova	&0x035a,r10	
    1726:	00 00       	bra	@r0		
    1728:	00 00       	bra	@r0		
    172a:	00 00       	bra	@r0		
    172c:	44 00       	rrcm.a	#1,	r4	
    172e:	3c 02 6a 03 	mova	&0x036a,r12	
    1732:	00 00       	bra	@r0		
    1734:	00 00       	bra	@r0		
    1736:	00 00       	bra	@r0		
    1738:	44 00       	rrcm.a	#1,	r4	
    173a:	3f 02 72 03 	mova	&0x0372,r15	
    173e:	00 00       	bra	@r0		
    1740:	00 00       	bra	@r0		
    1742:	00 00       	bra	@r0		
    1744:	44 00       	rrcm.a	#1,	r4	
    1746:	40 02       	rlam.a	#1,	r0	
    1748:	7e 03 00 00 	mova	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    174c:	00 00       	bra	@r0		
    174e:	00 00       	bra	@r0		
    1750:	44 00       	rrcm.a	#1,	r4	
    1752:	42 02       	rlam.a	#1,	r2	
    1754:	8e 03 00 00 	mova	#0x30000,r14	
    1758:	00 00       	bra	@r0		
    175a:	00 00       	bra	@r0		
    175c:	44 00       	rrcm.a	#1,	r4	
    175e:	45 02       	rlam.a	#1,	r5	
    1760:	96 03 00 00 	cmpa	#0x30000,r6	
    1764:	00 00       	bra	@r0		
    1766:	00 00       	bra	@r0		
    1768:	44 00       	rrcm.a	#1,	r4	
    176a:	46 02       	rlam.a	#1,	r6	
    176c:	a2 03 00 00 	adda	#0x30000,r2	
    1770:	00 00       	bra	@r0		
    1772:	00 00       	bra	@r0		
    1774:	44 00       	rrcm.a	#1,	r4	
    1776:	48 02       	rlam.a	#1,	r8	
    1778:	b2 03 00 00 	suba	#0x30000,r2	
    177c:	00 00       	bra	@r0		
    177e:	00 00       	bra	@r0		
    1780:	44 00       	rrcm.a	#1,	r4	
    1782:	4b 02       	rlam.a	#1,	r11	
    1784:	ba 03 00 00 	suba	#0x30000,r10	
    1788:	00 00       	bra	@r0		
    178a:	00 00       	bra	@r0		
    178c:	44 00       	rrcm.a	#1,	r4	
    178e:	4c 02       	rlam.a	#1,	r12	
    1790:	c6 03       	mova	#0,	r6	;r3 As==00
    1792:	00 00       	bra	@r0		
    1794:	00 00       	bra	@r0		
    1796:	00 00       	bra	@r0		
    1798:	44 00       	rrcm.a	#1,	r4	
    179a:	4e 02       	rlam.a	#1,	r14	
    179c:	d6 03       	tsta	r6		
    179e:	00 00       	bra	@r0		
    17a0:	00 00       	bra	@r0		
    17a2:	00 00       	bra	@r0		
    17a4:	44 00       	rrcm.a	#1,	r4	
    17a6:	51 02       	rlam	#1,	r1	
    17a8:	de 03       	tsta	r14		
    17aa:	00 00       	bra	@r0		
    17ac:	00 00       	bra	@r0		
    17ae:	00 00       	bra	@r0		
    17b0:	44 00       	rrcm.a	#1,	r4	
    17b2:	52 02       	rlam	#1,	r2	
    17b4:	ea 03       	incda	r10		
    17b6:	00 00       	bra	@r0		
    17b8:	00 00       	bra	@r0		
    17ba:	00 00       	bra	@r0		
    17bc:	44 00       	rrcm.a	#1,	r4	
    17be:	54 02       	rlam	#1,	r4	
    17c0:	fa 03       	decda	r10		
    17c2:	00 00       	bra	@r0		
    17c4:	00 00       	bra	@r0		
    17c6:	00 00       	bra	@r0		
    17c8:	44 00       	rrcm.a	#1,	r4	
    17ca:	56 02       	rlam	#1,	r6	
    17cc:	02 04       	mova	@r4,	r2	
    17ce:	00 00       	bra	@r0		
    17d0:	00 00       	bra	@r0		
    17d2:	00 00       	bra	@r0		
    17d4:	44 00       	rrcm.a	#1,	r4	
    17d6:	57 02       	rlam	#1,	r7	
    17d8:	0a 04       	mova	@r4,	r10	
    17da:	00 00       	bra	@r0		
    17dc:	00 00       	bra	@r0		
    17de:	00 00       	bra	@r0		
    17e0:	44 00       	rrcm.a	#1,	r4	
    17e2:	58 02       	rlam	#1,	r8	
    17e4:	12 04       	mova	@r4+,	r2	
    17e6:	00 00       	bra	@r0		
    17e8:	00 00       	bra	@r0		
    17ea:	00 00       	bra	@r0		
    17ec:	44 00       	rrcm.a	#1,	r4	
    17ee:	ef 01       	adda	r1,	r15	
    17f0:	3a 04 00 00 	mova	0(r4),	r10	;0x0000(r4)
    17f4:	00 00       	bra	@r0		
    17f6:	00 00       	bra	@r0		
    17f8:	44 00       	rrcm.a	#1,	r4	
    17fa:	5a 02       	rlam	#1,	r10	
    17fc:	82 04 00 00 	mova	#0x40000,r2	
    1800:	be 17       	popm	#12,	r9	
    1802:	00 00       	bra	@r0		
    1804:	40 00       	rrcm.a	#1,	r0	
    1806:	d2 01       	cmpa	r1,	r2	
    1808:	06 00       	mova	@r0,	r6	
    180a:	00 00       	bra	@r0		
    180c:	d2 18       	.word	0x18d2;	????	
    180e:	00 00       	bra	@r0		
    1810:	40 00       	rrcm.a	#1,	r0	
    1812:	d2 01       	cmpa	r1,	r2	
    1814:	05 00       	mova	@r0,	r5	
    1816:	00 00       	bra	@r0		
    1818:	db 18       	.word	0x18db;	????	
    181a:	00 00       	bra	@r0		
    181c:	80 00 d3 01 	bra	#0x001d3	
    1820:	00 00       	bra	@r0		
    1822:	00 00       	bra	@r0		
    1824:	fc 18       	.word	0x18fc;	????	
    1826:	00 00       	bra	@r0		
    1828:	80 00 d4 01 	bra	#0x001d4	
    182c:	20 00 00 00 	bra	&0x00000	
    1830:	09 19       	.word	0x1909;	????	
    1832:	00 00       	bra	@r0		
    1834:	80 00 d5 01 	bra	#0x001d5	
    1838:	40 00       	rrcm.a	#1,	r0	
    183a:	00 00       	bra	@r0		
    183c:	00 00       	bra	@r0		
    183e:	00 00       	bra	@r0		
    1840:	c0 00       	bra	r0		
    1842:	00 00       	bra	@r0		
    1844:	12 00       	mova	#0x00000,r2	
    1846:	00 00       	bra	@r0		
    1848:	00 00       	bra	@r0		
    184a:	00 00       	bra	@r0		
    184c:	e0 00       	adda	r0,	r0	
    184e:	00 00       	bra	@r0		
    1850:	82 04 00 00 	mova	#0x40000,r2	
    1854:	00 00       	bra	@r0		
    1856:	00 00       	bra	@r0		
    1858:	24 00 00 00 	mova	&0x00000,r4	
    185c:	96 04 00 00 	cmpa	#0x40000,r6	
    1860:	19 19       	.word	0x1919;	????	
    1862:	00 00       	bra	@r0		
    1864:	24 00 5c 02 	mova	&0x0025c,r4	
    1868:	5a 3c       	jmp	$+182    	;abs 0x191e
    186a:	00 00       	bra	@r0		
    186c:	00 00       	bra	@r0		
    186e:	00 00       	bra	@r0		
    1870:	44 00       	rrcm.a	#1,	r4	
    1872:	5c 02       	rlam	#1,	r12	
	...
    187c:	44 00       	rrcm.a	#1,	r4	
    187e:	5d 02       	rlam	#1,	r13	
    1880:	02 00       	mova	@r0,	r2	
    1882:	00 00       	bra	@r0		
    1884:	00 00       	bra	@r0		
    1886:	00 00       	bra	@r0		
    1888:	44 00       	rrcm.a	#1,	r4	
    188a:	5e 02       	rlam	#1,	r14	
    188c:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x0188e
    1890:	00 00       	bra	@r0		
    1892:	00 00       	bra	@r0		
    1894:	44 00       	rrcm.a	#1,	r4	
    1896:	5f 02       	rlam	#1,	r15	
    1898:	6e 00 00 00 	mova	r0,	&0xe0000
    189c:	00 00       	bra	@r0		
    189e:	00 00       	bra	@r0		
    18a0:	44 00       	rrcm.a	#1,	r4	
    18a2:	60 02 a4 00 	mova	r2,	&0x000a4
    18a6:	00 00       	bra	@r0		
    18a8:	00 00       	bra	@r0		
    18aa:	00 00       	bra	@r0		
    18ac:	44 00       	rrcm.a	#1,	r4	
    18ae:	61 02 da 00 	mova	r2,	&0x100da
    18b2:	00 00       	bra	@r0		
    18b4:	00 00       	bra	@r0		
    18b6:	00 00       	bra	@r0		
    18b8:	44 00       	rrcm.a	#1,	r4	
    18ba:	62 02 10 01 	mova	r2,	&0x20110
    18be:	00 00       	bra	@r0		
    18c0:	00 00       	bra	@r0		
    18c2:	00 00       	bra	@r0		
    18c4:	44 00       	rrcm.a	#1,	r4	
    18c6:	63 02 46 01 	mova	r2,	&0x30146
    18ca:	00 00       	bra	@r0		
    18cc:	00 00       	bra	@r0		
    18ce:	00 00       	bra	@r0		
    18d0:	44 00       	rrcm.a	#1,	r4	
    18d2:	64 02 d0 01 	mova	r2,	&0x401d0
    18d6:	00 00       	bra	@r0		
    18d8:	00 00       	bra	@r0		
    18da:	00 00       	bra	@r0		
    18dc:	24 00 00 00 	mova	&0x00000,r4	
    18e0:	d4 01       	cmpa	r1,	r4	
    18e2:	00 00       	bra	@r0		
    18e4:	2c 19       	.word	0x192c;	????	
    18e6:	00 00       	bra	@r0		
    18e8:	24 00 66 02 	mova	&0x00266,r4	
    18ec:	2e 3e       	jmp	$-930    	;abs 0x154a
    18ee:	00 00       	bra	@r0		
    18f0:	00 00       	bra	@r0		
    18f2:	00 00       	bra	@r0		
    18f4:	44 00       	rrcm.a	#1,	r4	
    18f6:	66 02 00 00 	mova	r2,	&0x60000
    18fa:	00 00       	bra	@r0		
    18fc:	00 00       	bra	@r0		
    18fe:	00 00       	bra	@r0		
    1900:	44 00       	rrcm.a	#1,	r4	
    1902:	69 02 02 00 	mova	r2,	&0x90002
    1906:	00 00       	bra	@r0		
    1908:	00 00       	bra	@r0		
    190a:	00 00       	bra	@r0		
    190c:	44 00       	rrcm.a	#1,	r4	
    190e:	6a 02 08 00 	mova	r2,	&0xa0008
    1912:	00 00       	bra	@r0		
    1914:	00 00       	bra	@r0		
    1916:	00 00       	bra	@r0		
    1918:	44 00       	rrcm.a	#1,	r4	
    191a:	6d 02 10 00 	mova	r2,	&0xd0010
    191e:	00 00       	bra	@r0		
    1920:	00 00       	bra	@r0		
    1922:	00 00       	bra	@r0		
    1924:	44 00       	rrcm.a	#1,	r4	
    1926:	6e 02 1c 00 	mova	r2,	&0xe001c
    192a:	00 00       	bra	@r0		
    192c:	00 00       	bra	@r0		
    192e:	00 00       	bra	@r0		
    1930:	44 00       	rrcm.a	#1,	r4	
    1932:	6f 02 26 00 	mova	r2,	&0xf0026
    1936:	00 00       	bra	@r0		
    1938:	00 00       	bra	@r0		
    193a:	00 00       	bra	@r0		
    193c:	44 00       	rrcm.a	#1,	r4	
    193e:	70 02 32 00 	mova	r2,	0x0032	;PC rel. 0x01972
    1942:	00 00       	bra	@r0		
    1944:	00 00       	bra	@r0		
    1946:	00 00       	bra	@r0		
    1948:	44 00       	rrcm.a	#1,	r4	
    194a:	73 02       	.word	0x0273;	????	Illegal as address instr
    194c:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0194e
    1950:	00 00       	bra	@r0		
    1952:	00 00       	bra	@r0		
    1954:	44 00       	rrcm.a	#1,	r4	
    1956:	74 02 48 00 	mova	r2,	72(r4)	;0x0048(r4)
    195a:	00 00       	bra	@r0		
    195c:	00 00       	bra	@r0		
    195e:	00 00       	bra	@r0		
    1960:	44 00       	rrcm.a	#1,	r4	
    1962:	75 02 52 00 	mova	r2,	82(r5)	;0x0052(r5)
    1966:	00 00       	bra	@r0		
    1968:	00 00       	bra	@r0		
    196a:	00 00       	bra	@r0		
    196c:	44 00       	rrcm.a	#1,	r4	
    196e:	76 02 5e 00 	mova	r2,	94(r6)	;0x005e(r6)
    1972:	00 00       	bra	@r0		
    1974:	00 00       	bra	@r0		
    1976:	00 00       	bra	@r0		
    1978:	44 00       	rrcm.a	#1,	r4	
    197a:	79 02 68 00 	mova	r2,	104(r9)	;0x0068(r9)
    197e:	00 00       	bra	@r0		
    1980:	00 00       	bra	@r0		
    1982:	00 00       	bra	@r0		
    1984:	44 00       	rrcm.a	#1,	r4	
    1986:	7a 02 74 00 	mova	r2,	116(r10);0x0074(r10)
    198a:	00 00       	bra	@r0		
    198c:	00 00       	bra	@r0		
    198e:	00 00       	bra	@r0		
    1990:	44 00       	rrcm.a	#1,	r4	
    1992:	7b 02 7e 00 	mova	r2,	126(r11);0x007e(r11)
    1996:	00 00       	bra	@r0		
    1998:	00 00       	bra	@r0		
    199a:	00 00       	bra	@r0		
    199c:	44 00       	rrcm.a	#1,	r4	
    199e:	7c 02 8a 00 	mova	r2,	138(r12);0x008a(r12)
    19a2:	00 00       	bra	@r0		
    19a4:	00 00       	bra	@r0		
    19a6:	00 00       	bra	@r0		
    19a8:	44 00       	rrcm.a	#1,	r4	
    19aa:	7f 02 94 00 	mova	r2,	148(r15);0x0094(r15)
    19ae:	00 00       	bra	@r0		
    19b0:	00 00       	bra	@r0		
    19b2:	00 00       	bra	@r0		
    19b4:	44 00       	rrcm.a	#1,	r4	
    19b6:	80 02 a0 00 	bra	#0x200a0	
    19ba:	00 00       	bra	@r0		
    19bc:	00 00       	bra	@r0		
    19be:	00 00       	bra	@r0		
    19c0:	44 00       	rrcm.a	#1,	r4	
    19c2:	81 02 aa 00 	mova	#0x200aa,r1	
    19c6:	00 00       	bra	@r0		
    19c8:	00 00       	bra	@r0		
    19ca:	00 00       	bra	@r0		
    19cc:	44 00       	rrcm.a	#1,	r4	
    19ce:	82 02 b6 00 	mova	#0x200b6,r2	
    19d2:	00 00       	bra	@r0		
    19d4:	00 00       	bra	@r0		
    19d6:	00 00       	bra	@r0		
    19d8:	44 00       	rrcm.a	#1,	r4	
    19da:	85 02 c0 00 	mova	#0x200c0,r5	
    19de:	00 00       	bra	@r0		
    19e0:	00 00       	bra	@r0		
    19e2:	00 00       	bra	@r0		
    19e4:	44 00       	rrcm.a	#1,	r4	
    19e6:	86 02 cc 00 	mova	#0x200cc,r6	
    19ea:	00 00       	bra	@r0		
    19ec:	00 00       	bra	@r0		
    19ee:	00 00       	bra	@r0		
    19f0:	44 00       	rrcm.a	#1,	r4	
    19f2:	87 02 d6 00 	mova	#0x200d6,r7	
    19f6:	00 00       	bra	@r0		
    19f8:	00 00       	bra	@r0		
    19fa:	00 00       	bra	@r0		
    19fc:	44 00       	rrcm.a	#1,	r4	
    19fe:	88 02 e2 00 	mova	#0x200e2,r8	
    1a02:	00 00       	bra	@r0		
    1a04:	00 00       	bra	@r0		
    1a06:	00 00       	bra	@r0		
    1a08:	44 00       	rrcm.a	#1,	r4	
    1a0a:	8b 02 ec 00 	mova	#0x200ec,r11	
    1a0e:	00 00       	bra	@r0		
    1a10:	00 00       	bra	@r0		
    1a12:	00 00       	bra	@r0		
    1a14:	44 00       	rrcm.a	#1,	r4	
    1a16:	8c 02 f8 00 	mova	#0x200f8,r12	
    1a1a:	00 00       	bra	@r0		
    1a1c:	00 00       	bra	@r0		
    1a1e:	00 00       	bra	@r0		
    1a20:	44 00       	rrcm.a	#1,	r4	
    1a22:	8d 02 02 01 	mova	#0x20102,r13	
    1a26:	00 00       	bra	@r0		
    1a28:	00 00       	bra	@r0		
    1a2a:	00 00       	bra	@r0		
    1a2c:	44 00       	rrcm.a	#1,	r4	
    1a2e:	8e 02 0e 01 	mova	#0x2010e,r14	
    1a32:	00 00       	bra	@r0		
    1a34:	00 00       	bra	@r0		
    1a36:	00 00       	bra	@r0		
    1a38:	44 00       	rrcm.a	#1,	r4	
    1a3a:	91 02 18 01 	cmpa	#0x20118,r1	
    1a3e:	00 00       	bra	@r0		
    1a40:	00 00       	bra	@r0		
    1a42:	00 00       	bra	@r0		
    1a44:	44 00       	rrcm.a	#1,	r4	
    1a46:	92 02 24 01 	cmpa	#0x20124,r2	
    1a4a:	00 00       	bra	@r0		
    1a4c:	00 00       	bra	@r0		
    1a4e:	00 00       	bra	@r0		
    1a50:	44 00       	rrcm.a	#1,	r4	
    1a52:	93 02       	.word	0x0293;	????	Illegal as address instr
    1a54:	2e 01 00 00 	mova	&0x10000,r14	
    1a58:	00 00       	bra	@r0		
    1a5a:	00 00       	bra	@r0		
    1a5c:	44 00       	rrcm.a	#1,	r4	
    1a5e:	94 02 3a 01 	cmpa	#0x2013a,r4	
    1a62:	00 00       	bra	@r0		
    1a64:	00 00       	bra	@r0		
    1a66:	00 00       	bra	@r0		
    1a68:	44 00       	rrcm.a	#1,	r4	
    1a6a:	96 02 44 01 	cmpa	#0x20144,r6	
    1a6e:	00 00       	bra	@r0		
    1a70:	09 19       	.word	0x1909;	????	
    1a72:	00 00       	bra	@r0		
    1a74:	80 00 67 02 	bra	#0x00267	
	...
    1a80:	c0 00       	bra	r0		
    1a82:	00 00       	bra	@r0		
    1a84:	02 00       	mova	@r0,	r2	
    1a86:	00 00       	bra	@r0		
    1a88:	00 00       	bra	@r0		
    1a8a:	00 00       	bra	@r0		
    1a8c:	e0 00       	adda	r0,	r0	
    1a8e:	00 00       	bra	@r0		
    1a90:	44 01       	rram.a	#1,	r4	
    1a92:	00 00       	bra	@r0		
    1a94:	00 00       	bra	@r0		
    1a96:	00 00       	bra	@r0		
    1a98:	24 00 00 00 	mova	&0x00000,r4	
    1a9c:	48 01       	rram.a	#1,	r8	
    1a9e:	00 00       	bra	@r0		
    1aa0:	4c 19       	.word	0x194c;	????	
    1aa2:	00 00       	bra	@r0		
    1aa4:	24 00 98 02 	mova	&0x00298,r4	
    1aa8:	94 3f       	jmp	$-214    	;abs 0x19d2
    1aaa:	00 00       	bra	@r0		
    1aac:	63 19       	.word	0x1963;	????	
    1aae:	00 00       	bra	@r0		
    1ab0:	40 00       	rrcm.a	#1,	r0	
    1ab2:	98 02 07 00 	cmpa	#0x20007,r8	
    1ab6:	00 00       	bra	@r0		
    1ab8:	00 00       	bra	@r0		
    1aba:	00 00       	bra	@r0		
    1abc:	44 00       	rrcm.a	#1,	r4	
    1abe:	98 02 00 00 	cmpa	#0x20000,r8	
    1ac2:	00 00       	bra	@r0		
    1ac4:	00 00       	bra	@r0		
    1ac6:	00 00       	bra	@r0		
    1ac8:	44 00       	rrcm.a	#1,	r4	
    1aca:	99 02 0c 00 	cmpa	#0x2000c,r9	
    1ace:	00 00       	bra	@r0		
    1ad0:	00 00       	bra	@r0		
    1ad2:	00 00       	bra	@r0		
    1ad4:	44 00       	rrcm.a	#1,	r4	
    1ad6:	9a 02 0e 00 	cmpa	#0x2000e,r10	
    1ada:	00 00       	bra	@r0		
    1adc:	00 00       	bra	@r0		
    1ade:	00 00       	bra	@r0		
    1ae0:	44 00       	rrcm.a	#1,	r4	
    1ae2:	9b 02 16 00 	cmpa	#0x20016,r11	
    1ae6:	00 00       	bra	@r0		
    1ae8:	00 00       	bra	@r0		
    1aea:	00 00       	bra	@r0		
    1aec:	44 00       	rrcm.a	#1,	r4	
    1aee:	9c 02 1e 00 	cmpa	#0x2001e,r12	
    1af2:	00 00       	bra	@r0		
    1af4:	00 00       	bra	@r0		
    1af6:	00 00       	bra	@r0		
    1af8:	44 00       	rrcm.a	#1,	r4	
    1afa:	9e 02 26 00 	cmpa	#0x20026,r14	
    1afe:	00 00       	bra	@r0		
    1b00:	00 00       	bra	@r0		
    1b02:	00 00       	bra	@r0		
    1b04:	44 00       	rrcm.a	#1,	r4	
    1b06:	9f 02 28 00 	cmpa	#0x20028,r15	
    1b0a:	00 00       	bra	@r0		
    1b0c:	00 00       	bra	@r0		
    1b0e:	00 00       	bra	@r0		
    1b10:	44 00       	rrcm.a	#1,	r4	
    1b12:	a0 02 2c 00 	adda	#0x2002c,r0	
    1b16:	00 00       	bra	@r0		
    1b18:	00 00       	bra	@r0		
    1b1a:	00 00       	bra	@r0		
    1b1c:	44 00       	rrcm.a	#1,	r4	
    1b1e:	a5 02 42 00 	adda	#0x20042,r5	
    1b22:	00 00       	bra	@r0		
    1b24:	00 00       	bra	@r0		
    1b26:	00 00       	bra	@r0		
    1b28:	44 00       	rrcm.a	#1,	r4	
    1b2a:	a6 02 4c 00 	adda	#0x2004c,r6	
    1b2e:	00 00       	bra	@r0		
    1b30:	00 00       	bra	@r0		
    1b32:	00 00       	bra	@r0		
    1b34:	44 00       	rrcm.a	#1,	r4	
    1b36:	a7 02 50 00 	adda	#0x20050,r7	
    1b3a:	00 00       	bra	@r0		
    1b3c:	00 00       	bra	@r0		
    1b3e:	00 00       	bra	@r0		
    1b40:	44 00       	rrcm.a	#1,	r4	
    1b42:	ab 02 58 00 	adda	#0x20058,r11	
    1b46:	00 00       	bra	@r0		
    1b48:	00 00       	bra	@r0		
    1b4a:	00 00       	bra	@r0		
    1b4c:	44 00       	rrcm.a	#1,	r4	
    1b4e:	af 02 60 00 	adda	#0x20060,r15	
    1b52:	00 00       	bra	@r0		
    1b54:	00 00       	bra	@r0		
    1b56:	00 00       	bra	@r0		
    1b58:	44 00       	rrcm.a	#1,	r4	
    1b5a:	b9 02 82 00 	suba	#0x20082,r9	
    1b5e:	00 00       	bra	@r0		
    1b60:	00 00       	bra	@r0		
    1b62:	00 00       	bra	@r0		
    1b64:	44 00       	rrcm.a	#1,	r4	
    1b66:	b5 02 86 00 	suba	#0x20086,r5	
    1b6a:	00 00       	bra	@r0		
    1b6c:	00 00       	bra	@r0		
    1b6e:	00 00       	bra	@r0		
    1b70:	44 00       	rrcm.a	#1,	r4	
    1b72:	b4 02 8c 00 	suba	#0x2008c,r4	
    1b76:	00 00       	bra	@r0		
    1b78:	00 00       	bra	@r0		
    1b7a:	00 00       	bra	@r0		
    1b7c:	44 00       	rrcm.a	#1,	r4	
    1b7e:	b8 02 94 00 	suba	#0x20094,r8	
    1b82:	00 00       	bra	@r0		
    1b84:	00 00       	bra	@r0		
    1b86:	00 00       	bra	@r0		
    1b88:	44 00       	rrcm.a	#1,	r4	
    1b8a:	bc 02 9c 00 	suba	#0x2009c,r12	
    1b8e:	00 00       	bra	@r0		
    1b90:	00 00       	bra	@r0		
    1b92:	00 00       	bra	@r0		
    1b94:	44 00       	rrcm.a	#1,	r4	
    1b96:	a3 02       	.word	0x02a3;	????	Illegal as address instr
    1b98:	a2 00 00 00 	adda	#0x00000,r2	
    1b9c:	00 00       	bra	@r0		
    1b9e:	00 00       	bra	@r0		
    1ba0:	44 00       	rrcm.a	#1,	r4	
    1ba2:	c0 02       	bra	r2		
    1ba4:	ac 00 00 00 	adda	#0x00000,r12	
    1ba8:	00 00       	bra	@r0		
    1baa:	00 00       	bra	@r0		
    1bac:	44 00       	rrcm.a	#1,	r4	
    1bae:	9e 02 c6 00 	cmpa	#0x200c6,r14	
    1bb2:	00 00       	bra	@r0		
    1bb4:	00 00       	bra	@r0		
    1bb6:	00 00       	bra	@r0		
    1bb8:	44 00       	rrcm.a	#1,	r4	
    1bba:	c2 02       	mova	r2,	r2	
    1bbc:	d0 00       	cmpa	r0,	r0	
    1bbe:	00 00       	bra	@r0		
    1bc0:	6e 19       	.word	0x196e;	????	
    1bc2:	00 00       	bra	@r0		
    1bc4:	40 00       	rrcm.a	#1,	r0	
    1bc6:	99 02 08 00 	cmpa	#0x20008,r9	
    1bca:	00 00       	bra	@r0		
    1bcc:	77 19       	.word	0x1977;	????	
    1bce:	00 00       	bra	@r0		
    1bd0:	40 00       	rrcm.a	#1,	r0	
    1bd2:	99 02 09 00 	cmpa	#0x20009,r9	
    1bd6:	00 00       	bra	@r0		
    1bd8:	80 19       	.word	0x1980;	????	
    1bda:	00 00       	bra	@r0		
    1bdc:	40 00       	rrcm.a	#1,	r0	
    1bde:	99 02 0c 00 	cmpa	#0x2000c,r9	
    1be2:	00 00       	bra	@r0		
    1be4:	00 00       	bra	@r0		
    1be6:	00 00       	bra	@r0		
    1be8:	c0 00       	bra	r0		
    1bea:	00 00       	bra	@r0		
    1bec:	0c 00       	mova	@r0,	r12	
    1bee:	00 00       	bra	@r0		
    1bf0:	00 00       	bra	@r0		
    1bf2:	00 00       	bra	@r0		
    1bf4:	e0 00       	adda	r0,	r0	
    1bf6:	00 00       	bra	@r0		
    1bf8:	d0 00       	cmpa	r0,	r0	
    1bfa:	00 00       	bra	@r0		
    1bfc:	00 00       	bra	@r0		
    1bfe:	00 00       	bra	@r0		
    1c00:	24 00 00 00 	mova	&0x00000,r4	
    1c04:	dc 00       	cmpa	r0,	r12	
    1c06:	00 00       	bra	@r0		
    1c08:	89 19       	.word	0x1989;	????	
    1c0a:	00 00       	bra	@r0		
    1c0c:	24 00 c4 02 	mova	&0x002c4,r4	
    1c10:	70 40 00 00 	br	#0x0000	
    1c14:	9b 19       	.word	0x199b;	????	
    1c16:	00 00       	bra	@r0		
    1c18:	40 00       	rrcm.a	#1,	r0	
    1c1a:	c4 02       	mova	r2,	r4	
    1c1c:	0b 00       	mova	@r0,	r11	
    1c1e:	00 00       	bra	@r0		
    1c20:	00 00       	bra	@r0		
    1c22:	00 00       	bra	@r0		
    1c24:	44 00       	rrcm.a	#1,	r4	
    1c26:	c4 02       	mova	r2,	r4	
	...
    1c30:	44 00       	rrcm.a	#1,	r4	
    1c32:	c5 02       	mova	r2,	r5	
    1c34:	04 00       	mova	@r0,	r4	
    1c36:	00 00       	bra	@r0		
    1c38:	00 00       	bra	@r0		
    1c3a:	00 00       	bra	@r0		
    1c3c:	44 00       	rrcm.a	#1,	r4	
    1c3e:	cb 02       	mova	r2,	r11	
    1c40:	0a 00       	mova	@r0,	r10	
    1c42:	00 00       	bra	@r0		
    1c44:	00 00       	bra	@r0		
    1c46:	00 00       	bra	@r0		
    1c48:	44 00       	rrcm.a	#1,	r4	
    1c4a:	c6 02       	mova	r2,	r6	
    1c4c:	0e 00       	mova	@r0,	r14	
    1c4e:	00 00       	bra	@r0		
    1c50:	00 00       	bra	@r0		
    1c52:	00 00       	bra	@r0		
    1c54:	44 00       	rrcm.a	#1,	r4	
    1c56:	c7 02       	mova	r2,	r7	
    1c58:	14 00       	mova	#0x00000,r4	
    1c5a:	00 00       	bra	@r0		
    1c5c:	00 00       	bra	@r0		
    1c5e:	00 00       	bra	@r0		
    1c60:	44 00       	rrcm.a	#1,	r4	
    1c62:	c5 02       	mova	r2,	r5	
    1c64:	1c 00       	mova	#0x00000,r12	
    1c66:	00 00       	bra	@r0		
    1c68:	00 00       	bra	@r0		
    1c6a:	00 00       	bra	@r0		
    1c6c:	44 00       	rrcm.a	#1,	r4	
    1c6e:	c8 02       	mova	r2,	r8	
    1c70:	26 00 00 00 	mova	&0x00000,r6	
    1c74:	00 00       	bra	@r0		
    1c76:	00 00       	bra	@r0		
    1c78:	44 00       	rrcm.a	#1,	r4	
    1c7a:	cc 02       	mova	r2,	r12	
    1c7c:	28 00 00 00 	mova	&0x00000,r8	
    1c80:	00 00       	bra	@r0		
    1c82:	00 00       	bra	@r0		
    1c84:	24 00 00 00 	mova	&0x00000,r4	
    1c88:	2c 00 00 00 	mova	&0x00000,r12	
    1c8c:	af 19       	.word	0x19af;	????	
    1c8e:	00 00       	bra	@r0		
    1c90:	24 00 d0 02 	mova	&0x002d0,r4	
    1c94:	9c 40 00 00 	mov	0x0000,	0(r12)	;PC rel. 0x01c98, 0x0000(r12)
    1c98:	00 00 
    1c9a:	00 00       	bra	@r0		
    1c9c:	44 00       	rrcm.a	#1,	r4	
    1c9e:	d0 02       	cmpa	r2,	r0	
	...
    1ca8:	44 00       	rrcm.a	#1,	r4	
    1caa:	d3 02       	.word	0x02d3;	????	Illegal as address instr
	...
    1cb4:	24 00 00 00 	mova	&0x00000,r4	
    1cb8:	02 00       	mova	@r0,	r2	
    1cba:	00 00       	bra	@r0		
    1cbc:	c1 19       	.word	0x19c1;	????	
    1cbe:	00 00       	bra	@r0		
    1cc0:	24 00 d5 02 	mova	&0x002d5,r4	
    1cc4:	f0 40 00 00 	mov.b	#0,	0x0000	;#0x0000, PC rel. 0x01cca
    1cc8:	00 00 
    1cca:	00 00       	bra	@r0		
    1ccc:	44 00       	rrcm.a	#1,	r4	
    1cce:	d5 02       	cmpa	r2,	r5	
	...
    1cd8:	44 00       	rrcm.a	#1,	r4	
    1cda:	d7 02       	cmpa	r2,	r7	
    1cdc:	02 00       	mova	@r0,	r2	
    1cde:	00 00       	bra	@r0		
    1ce0:	00 00       	bra	@r0		
    1ce2:	00 00       	bra	@r0		
    1ce4:	44 00       	rrcm.a	#1,	r4	
    1ce6:	d9 02       	cmpa	r2,	r9	
    1ce8:	06 00       	mova	@r0,	r6	
    1cea:	00 00       	bra	@r0		
    1cec:	00 00       	bra	@r0		
    1cee:	00 00       	bra	@r0		
    1cf0:	44 00       	rrcm.a	#1,	r4	
    1cf2:	db 02       	cmpa	r2,	r11	
    1cf4:	0a 00       	mova	@r0,	r10	
    1cf6:	00 00       	bra	@r0		
    1cf8:	00 00       	bra	@r0		
    1cfa:	00 00       	bra	@r0		
    1cfc:	44 00       	rrcm.a	#1,	r4	
    1cfe:	dd 02       	cmpa	r2,	r13	
    1d00:	0e 00       	mova	@r0,	r14	
    1d02:	00 00       	bra	@r0		
    1d04:	00 00       	bra	@r0		
    1d06:	00 00       	bra	@r0		
    1d08:	44 00       	rrcm.a	#1,	r4	
    1d0a:	df 02       	cmpa	r2,	r15	
    1d0c:	12 00       	mova	#0x00000,r2	
    1d0e:	00 00       	bra	@r0		
    1d10:	00 00       	bra	@r0		
    1d12:	00 00       	bra	@r0		
    1d14:	44 00       	rrcm.a	#1,	r4	
    1d16:	e1 02       	adda	r2,	r1	
    1d18:	16 00       	mova	#0x00000,r6	
    1d1a:	00 00       	bra	@r0		
    1d1c:	00 00       	bra	@r0		
    1d1e:	00 00       	bra	@r0		
    1d20:	44 00       	rrcm.a	#1,	r4	
    1d22:	e3 02       	.word	0x02e3;	????	Illegal as address instr
    1d24:	18 00       	mova	#0x00000,r8	
    1d26:	00 00       	bra	@r0		
    1d28:	00 00       	bra	@r0		
    1d2a:	00 00       	bra	@r0		
    1d2c:	44 00       	rrcm.a	#1,	r4	
    1d2e:	e7 02       	adda	r2,	r7	
    1d30:	1e 00       	mova	#0x00000,r14	
    1d32:	00 00       	bra	@r0		
    1d34:	00 00       	bra	@r0		
    1d36:	00 00       	bra	@r0		
    1d38:	44 00       	rrcm.a	#1,	r4	
    1d3a:	e8 02       	adda	r2,	r8	
    1d3c:	26 00 00 00 	mova	&0x00000,r6	
    1d40:	00 00       	bra	@r0		
    1d42:	00 00       	bra	@r0		
    1d44:	44 00       	rrcm.a	#1,	r4	
    1d46:	ea 02       	adda	r2,	r10	
    1d48:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x01d4a
    1d4c:	00 00       	bra	@r0		
    1d4e:	00 00       	bra	@r0		
    1d50:	44 00       	rrcm.a	#1,	r4	
    1d52:	eb 02       	adda	r2,	r11	
    1d54:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x01d56
    1d58:	00 00       	bra	@r0		
    1d5a:	00 00       	bra	@r0		
    1d5c:	44 00       	rrcm.a	#1,	r4	
    1d5e:	ec 02       	adda	r2,	r12	
    1d60:	42 00       	rrcm.a	#1,	r2	
    1d62:	00 00       	bra	@r0		
    1d64:	00 00       	bra	@r0		
    1d66:	00 00       	bra	@r0		
    1d68:	44 00       	rrcm.a	#1,	r4	
    1d6a:	ed 02       	adda	r2,	r13	
    1d6c:	50 00       	rrcm	#1,	r0	
    1d6e:	00 00       	bra	@r0		
    1d70:	00 00       	bra	@r0		
    1d72:	00 00       	bra	@r0		
    1d74:	44 00       	rrcm.a	#1,	r4	
    1d76:	f0 02       	suba	r2,	r0	
    1d78:	70 00 00 00 	mova	r0,	0x0000	;PC rel. 0x01d7a
    1d7c:	00 00       	bra	@r0		
    1d7e:	00 00       	bra	@r0		
    1d80:	44 00       	rrcm.a	#1,	r4	
    1d82:	f1 02       	suba	r2,	r1	
    1d84:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
    1d88:	00 00       	bra	@r0		
    1d8a:	00 00       	bra	@r0		
    1d8c:	44 00       	rrcm.a	#1,	r4	
    1d8e:	f2 02       	suba	r2,	r2	
    1d90:	80 00 00 00 	bra	#0x00000	
    1d94:	00 00       	bra	@r0		
    1d96:	00 00       	bra	@r0		
    1d98:	44 00       	rrcm.a	#1,	r4	
    1d9a:	f3 02       	.word	0x02f3;	????	Illegal as address instr
    1d9c:	88 00 00 00 	mova	#0x00000,r8	
    1da0:	00 00       	bra	@r0		
    1da2:	00 00       	bra	@r0		
    1da4:	44 00       	rrcm.a	#1,	r4	
    1da6:	f4 02       	suba	r2,	r4	
    1da8:	8c 00 00 00 	mova	#0x00000,r12	
    1dac:	00 00       	bra	@r0		
    1dae:	00 00       	bra	@r0		
    1db0:	44 00       	rrcm.a	#1,	r4	
    1db2:	f5 02       	suba	r2,	r5	
    1db4:	90 00 00 00 	cmpa	#0x00000,r0	
    1db8:	00 00       	bra	@r0		
    1dba:	00 00       	bra	@r0		
    1dbc:	44 00       	rrcm.a	#1,	r4	
    1dbe:	f6 02       	suba	r2,	r6	
    1dc0:	94 00 00 00 	cmpa	#0x00000,r4	
    1dc4:	00 00       	bra	@r0		
    1dc6:	00 00       	bra	@r0		
    1dc8:	44 00       	rrcm.a	#1,	r4	
    1dca:	f7 02       	suba	r2,	r7	
    1dcc:	98 00 00 00 	cmpa	#0x00000,r8	
    1dd0:	00 00       	bra	@r0		
    1dd2:	00 00       	bra	@r0		
    1dd4:	44 00       	rrcm.a	#1,	r4	
    1dd6:	fa 02       	suba	r2,	r10	
    1dd8:	a8 00 00 00 	adda	#0x00000,r8	
    1ddc:	00 00       	bra	@r0		
    1dde:	00 00       	bra	@r0		
    1de0:	44 00       	rrcm.a	#1,	r4	
    1de2:	fb 02       	suba	r2,	r11	
    1de4:	ac 00 00 00 	adda	#0x00000,r12	
    1de8:	00 00       	bra	@r0		
    1dea:	00 00       	bra	@r0		
    1dec:	44 00       	rrcm.a	#1,	r4	
    1dee:	00 03       	bra	#2		;r3 As==10
    1df0:	b6 00 00 00 	suba	#0x00000,r6	
    1df4:	00 00       	bra	@r0		
    1df6:	00 00       	bra	@r0		
    1df8:	44 00       	rrcm.a	#1,	r4	
    1dfa:	01 03       	mova	#2,	r1	;r3 As==10
    1dfc:	bc 00 00 00 	suba	#0x00000,r12	
    1e00:	00 00       	bra	@r0		
    1e02:	00 00       	bra	@r0		
    1e04:	44 00       	rrcm.a	#1,	r4	
    1e06:	02 03       	mova	#2,	r2	;r3 As==10
    1e08:	c4 00       	mova	r0,	r4	
    1e0a:	00 00       	bra	@r0		
    1e0c:	00 00       	bra	@r0		
    1e0e:	00 00       	bra	@r0		
    1e10:	44 00       	rrcm.a	#1,	r4	
    1e12:	05 03       	mova	#2,	r5	;r3 As==10
    1e14:	ca 00       	mova	r0,	r10	
    1e16:	00 00       	bra	@r0		
    1e18:	00 00       	bra	@r0		
    1e1a:	00 00       	bra	@r0		
    1e1c:	44 00       	rrcm.a	#1,	r4	
    1e1e:	07 03       	mova	#2,	r7	;r3 As==10
    1e20:	d2 00       	cmpa	r0,	r2	
    1e22:	00 00       	bra	@r0		
    1e24:	00 00       	bra	@r0		
    1e26:	00 00       	bra	@r0		
    1e28:	44 00       	rrcm.a	#1,	r4	
    1e2a:	08 03       	mova	#2,	r8	;r3 As==10
    1e2c:	d6 00       	cmpa	r0,	r6	
    1e2e:	00 00       	bra	@r0		
    1e30:	00 00       	bra	@r0		
    1e32:	00 00       	bra	@r0		
    1e34:	24 00 00 00 	mova	&0x00000,r4	
    1e38:	da 00       	cmpa	r0,	r10	
    1e3a:	00 00       	bra	@r0		
    1e3c:	cf 19       	.word	0x19cf;	????	
    1e3e:	00 00       	bra	@r0		
    1e40:	24 00 0a 03 	mova	&0x0030a,r4	
    1e44:	ca 41 00 00 	mov.b	r1,	0(r10)	;0x0000(r10)
    1e48:	00 00       	bra	@r0		
    1e4a:	00 00       	bra	@r0		
    1e4c:	44 00       	rrcm.a	#1,	r4	
    1e4e:	0a 03       	mova	#2,	r10	;r3 As==10
	...
    1e58:	44 00       	rrcm.a	#1,	r4	
    1e5a:	0c 03       	mova	#2,	r12	;r3 As==10
	...
    1e64:	44 00       	rrcm.a	#1,	r4	
    1e66:	0d 03       	mova	#2,	r13	;r3 As==10
    1e68:	06 00       	mova	@r0,	r6	
    1e6a:	00 00       	bra	@r0		
    1e6c:	00 00       	bra	@r0		
    1e6e:	00 00       	bra	@r0		
    1e70:	44 00       	rrcm.a	#1,	r4	
    1e72:	0e 03       	mova	#2,	r14	;r3 As==10
    1e74:	08 00       	mova	@r0,	r8	
    1e76:	00 00       	bra	@r0		
    1e78:	00 00       	bra	@r0		
    1e7a:	00 00       	bra	@r0		
    1e7c:	44 00       	rrcm.a	#1,	r4	
    1e7e:	0d 03       	mova	#2,	r13	;r3 As==10
    1e80:	26 00 00 00 	mova	&0x00000,r6	
    1e84:	00 00       	bra	@r0		
    1e86:	00 00       	bra	@r0		
    1e88:	44 00       	rrcm.a	#1,	r4	
    1e8a:	0c 03       	mova	#2,	r12	;r3 As==10
    1e8c:	2e 00 00 00 	mova	&0x00000,r14	
    1e90:	00 00       	bra	@r0		
    1e92:	00 00       	bra	@r0		
    1e94:	44 00       	rrcm.a	#1,	r4	
    1e96:	11 03       	mova	#-1,	r1	;r3 As==11
    1e98:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x01e9a
    1e9c:	be 17       	popm	#12,	r9	
    1e9e:	00 00       	bra	@r0		
    1ea0:	40 00       	rrcm.a	#1,	r0	
    1ea2:	0b 03       	mova	#2,	r11	;r3 As==10
    1ea4:	0d 00       	mova	@r0,	r13	
    1ea6:	00 00       	bra	@r0		
    1ea8:	d2 18       	.word	0x18d2;	????	
    1eaa:	00 00       	bra	@r0		
    1eac:	40 00       	rrcm.a	#1,	r0	
    1eae:	0b 03       	mova	#2,	r11	;r3 As==10
    1eb0:	0e 00       	mova	@r0,	r14	
    1eb2:	00 00       	bra	@r0		
    1eb4:	00 00       	bra	@r0		
    1eb6:	00 00       	bra	@r0		
    1eb8:	c0 00       	bra	r0		
	...
    1ec2:	00 00       	bra	@r0		
    1ec4:	e0 00       	adda	r0,	r0	
    1ec6:	00 00       	bra	@r0		
    1ec8:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x01eca
    1ecc:	00 00       	bra	@r0		
    1ece:	00 00       	bra	@r0		
    1ed0:	24 00 00 00 	mova	&0x00000,r4	
    1ed4:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x01ed6
    1ed8:	ea 19       	.word	0x19ea;	????	
    1eda:	00 00       	bra	@r0		
    1edc:	20 00 12 00 	bra	&0x00012	
    1ee0:	00 00       	bra	@r0		
    1ee2:	00 00       	bra	@r0		
    1ee4:	f6 19       	.word	0x19f6;	????	
    1ee6:	00 00       	bra	@r0		
    1ee8:	20 00 14 00 	bra	&0x00014	
    1eec:	00 00       	bra	@r0		
    1eee:	00 00       	bra	@r0		
    1ef0:	03 1a       	.word	0x1a03;	????	
    1ef2:	00 00       	bra	@r0		
    1ef4:	20 00 16 00 	bra	&0x00016	
    1ef8:	00 00       	bra	@r0		
    1efa:	00 00       	bra	@r0		
    1efc:	0f 1a       	.word	0x1a0f;	????	
    1efe:	00 00       	bra	@r0		
    1f00:	20 00 18 00 	bra	&0x00018	
    1f04:	00 00       	bra	@r0		
    1f06:	00 00       	bra	@r0		
    1f08:	1c 1a       	.word	0x1a1c;	????	
    1f0a:	00 00       	bra	@r0		
    1f0c:	20 00 1a 00 	bra	&0x0001a	
    1f10:	00 00       	bra	@r0		
    1f12:	00 00       	bra	@r0		
    1f14:	28 1a       	.word	0x1a28;	????	
    1f16:	00 00       	bra	@r0		
    1f18:	20 00 1c 00 	bra	&0x0001c	
    1f1c:	00 00       	bra	@r0		
    1f1e:	00 00       	bra	@r0		
    1f20:	36 1a       	.word	0x1a36;	????	
    1f22:	00 00       	bra	@r0		
    1f24:	20 00 1e 00 	bra	&0x0001e	
    1f28:	00 00       	bra	@r0		
    1f2a:	00 00       	bra	@r0		
    1f2c:	44 1a       	.word	0x1a44;	????	
    1f2e:	00 00       	bra	@r0		
    1f30:	20 00 20 00 	bra	&0x00020	
    1f34:	00 00       	bra	@r0		
    1f36:	00 00       	bra	@r0		
    1f38:	53 1a       	.word	0x1a53;	????	
    1f3a:	00 00       	bra	@r0		
    1f3c:	20 00 88 00 	bra	&0x00088	
    1f40:	00 00       	bra	@r0		
    1f42:	00 00       	bra	@r0		
    1f44:	61 1a       	.word	0x1a61;	????	
    1f46:	00 00       	bra	@r0		
    1f48:	20 00 8c 00 	bra	&0x0008c	
    1f4c:	00 00       	bra	@r0		
    1f4e:	00 00       	bra	@r0		
    1f50:	6f 1a       	.word	0x1a6f;	????	
    1f52:	00 00       	bra	@r0		
    1f54:	20 00 90 00 	bra	&0x00090	
    1f58:	00 00       	bra	@r0		
    1f5a:	00 00       	bra	@r0		
    1f5c:	7d 1a       	.word	0x1a7d;	????	
    1f5e:	00 00       	bra	@r0		
    1f60:	20 00 94 00 	bra	&0x00094	
    1f64:	00 00       	bra	@r0		
    1f66:	00 00       	bra	@r0		
    1f68:	8b 1a       	.word	0x1a8b;	????	
    1f6a:	00 00       	bra	@r0		
    1f6c:	20 00 98 00 	bra	&0x00098	
    1f70:	00 00       	bra	@r0		
    1f72:	00 00       	bra	@r0		
    1f74:	99 1a       	.word	0x1a99;	????	
    1f76:	00 00       	bra	@r0		
    1f78:	20 00 9c 00 	bra	&0x0009c	
    1f7c:	00 00       	bra	@r0		
    1f7e:	00 00       	bra	@r0		
    1f80:	a7 1a       	.word	0x1aa7;	????	
    1f82:	00 00       	bra	@r0		
    1f84:	20 00 7a 00 	bra	&0x0007a	
    1f88:	00 00       	bra	@r0		
    1f8a:	00 00       	bra	@r0		
    1f8c:	bb 1a       	.word	0x1abb;	????	
    1f8e:	00 00       	bra	@r0		
    1f90:	20 00 7c 00 	bra	&0x0007c	
    1f94:	00 00       	bra	@r0		
    1f96:	00 00       	bra	@r0		
    1f98:	c8 1a       	.word	0x1ac8;	????	
    1f9a:	00 00       	bra	@r0		
    1f9c:	20 00 7e 00 	bra	&0x0007e	
    1fa0:	00 00       	bra	@r0		
    1fa2:	00 00       	bra	@r0		
    1fa4:	d5 1a       	.word	0x1ad5;	????	
    1fa6:	00 00       	bra	@r0		
    1fa8:	20 00 80 00 	bra	&0x00080	
    1fac:	00 00       	bra	@r0		
    1fae:	00 00       	bra	@r0		
    1fb0:	e2 1a       	.word	0x1ae2;	????	
    1fb2:	00 00       	bra	@r0		
    1fb4:	20 00 82 00 	bra	&0x00082	
    1fb8:	00 00       	bra	@r0		
    1fba:	00 00       	bra	@r0		
    1fbc:	ef 1a       	.word	0x1aef;	????	
    1fbe:	00 00       	bra	@r0		
    1fc0:	20 00 84 00 	bra	&0x00084	
    1fc4:	00 00       	bra	@r0		
    1fc6:	00 00       	bra	@r0		
    1fc8:	fb 1a       	.word	0x1afb;	????	
    1fca:	00 00       	bra	@r0		
    1fcc:	20 00 86 00 	bra	&0x00086	
    1fd0:	00 00       	bra	@r0		
    1fd2:	00 00       	bra	@r0		
    1fd4:	08 1b       	.word	0x1b08;	????	
    1fd6:	00 00       	bra	@r0		
    1fd8:	20 00 89 00 	bra	&0x00089	
    1fdc:	00 00       	bra	@r0		
    1fde:	00 00       	bra	@r0		
    1fe0:	15 1b       	.word	0x1b15;	????	
    1fe2:	00 00       	bra	@r0		
    1fe4:	20 00 8f 00 	bra	&0x0008f	
    1fe8:	00 00       	bra	@r0		
    1fea:	00 00       	bra	@r0		
    1fec:	21 1b       	.word	0x1b21;	????	
    1fee:	00 00       	bra	@r0		
    1ff0:	20 00 91 00 	bra	&0x00091	
    1ff4:	00 00       	bra	@r0		
    1ff6:	00 00       	bra	@r0		
    1ff8:	2e 1b       	.word	0x1b2e;	????	
    1ffa:	00 00       	bra	@r0		
    1ffc:	20 00 93 00 	bra	&0x00093	
    2000:	00 00       	bra	@r0		
    2002:	00 00       	bra	@r0		
    2004:	3b 1b       	.word	0x1b3b;	????	
    2006:	00 00       	bra	@r0		
    2008:	20 00 95 00 	bra	&0x00095	
    200c:	00 00       	bra	@r0		
    200e:	00 00       	bra	@r0		
    2010:	48 1b       	.word	0x1b48;	????	
    2012:	00 00       	bra	@r0		
    2014:	20 00 97 00 	bra	&0x00097	
    2018:	00 00       	bra	@r0		
    201a:	00 00       	bra	@r0		
    201c:	55 1b       	.word	0x1b55;	????	
    201e:	00 00       	bra	@r0		
    2020:	20 00 99 00 	bra	&0x00099	
    2024:	00 00       	bra	@r0		
    2026:	00 00       	bra	@r0		
    2028:	61 1b       	.word	0x1b61;	????	
    202a:	00 00       	bra	@r0		
    202c:	20 00 9b 00 	bra	&0x0009b	
    2030:	00 00       	bra	@r0		
    2032:	00 00       	bra	@r0		
    2034:	6e 1b       	.word	0x1b6e;	????	
    2036:	00 00       	bra	@r0		
    2038:	20 00 9e 00 	bra	&0x0009e	
    203c:	00 00       	bra	@r0		
    203e:	00 00       	bra	@r0		
    2040:	7b 1b       	.word	0x1b7b;	????	
    2042:	00 00       	bra	@r0		
    2044:	20 00 a4 00 	bra	&0x000a4	
    2048:	00 00       	bra	@r0		
    204a:	00 00       	bra	@r0		
    204c:	87 1b       	.word	0x1b87;	????	
    204e:	00 00       	bra	@r0		
    2050:	20 00 a6 00 	bra	&0x000a6	
    2054:	00 00       	bra	@r0		
    2056:	00 00       	bra	@r0		
    2058:	94 1b       	.word	0x1b94;	????	
    205a:	00 00       	bra	@r0		
    205c:	20 00 a8 00 	bra	&0x000a8	
    2060:	00 00       	bra	@r0		
    2062:	00 00       	bra	@r0		
    2064:	a1 1b       	.word	0x1ba1;	????	
    2066:	00 00       	bra	@r0		
    2068:	20 00 aa 00 	bra	&0x000aa	
    206c:	00 00       	bra	@r0		
    206e:	00 00       	bra	@r0		
    2070:	ae 1b       	.word	0x1bae;	????	
    2072:	00 00       	bra	@r0		
    2074:	20 00 ad 00 	bra	&0x000ad	
    2078:	00 00       	bra	@r0		
    207a:	00 00       	bra	@r0		
    207c:	bb 1b       	.word	0x1bbb;	????	
    207e:	00 00       	bra	@r0		
    2080:	20 00 b3 00 	bra	&0x000b3	
    2084:	00 00       	bra	@r0		
    2086:	00 00       	bra	@r0		
    2088:	c7 1b       	.word	0x1bc7;	????	
    208a:	00 00       	bra	@r0		
    208c:	20 00 b5 00 	bra	&0x000b5	
    2090:	00 00       	bra	@r0		
    2092:	00 00       	bra	@r0		
    2094:	d4 1b       	.word	0x1bd4;	????	
    2096:	00 00       	bra	@r0		
    2098:	20 00 b7 00 	bra	&0x000b7	
    209c:	00 00       	bra	@r0		
    209e:	00 00       	bra	@r0		
    20a0:	e1 1b       	.word	0x1be1;	????	
    20a2:	00 00       	bra	@r0		
    20a4:	20 00 b9 00 	bra	&0x000b9	
    20a8:	00 00       	bra	@r0		
    20aa:	00 00       	bra	@r0		
    20ac:	ee 1b       	.word	0x1bee;	????	
    20ae:	00 00       	bra	@r0		
    20b0:	20 00 bc 00 	bra	&0x000bc	
    20b4:	00 00       	bra	@r0		
    20b6:	00 00       	bra	@r0		
    20b8:	fb 1b       	.word	0x1bfb;	????	
    20ba:	00 00       	bra	@r0		
    20bc:	20 00 c2 00 	bra	&0x000c2	
    20c0:	00 00       	bra	@r0		
    20c2:	00 00       	bra	@r0		
    20c4:	07 1c       	.word	0x1c07;	????	
    20c6:	00 00       	bra	@r0		
    20c8:	20 00 c4 00 	bra	&0x000c4	
    20cc:	00 00       	bra	@r0		
    20ce:	00 00       	bra	@r0		
    20d0:	14 1c       	.word	0x1c14;	????	
    20d2:	00 00       	bra	@r0		
    20d4:	20 00 c6 00 	bra	&0x000c6	
    20d8:	00 00       	bra	@r0		
    20da:	00 00       	bra	@r0		
    20dc:	21 1c       	.word	0x1c21;	????	
    20de:	00 00       	bra	@r0		
    20e0:	20 00 c8 00 	bra	&0x000c8	
    20e4:	00 00       	bra	@r0		
    20e6:	00 00       	bra	@r0		
    20e8:	2e 1c       	.word	0x1c2e;	????	
    20ea:	00 00       	bra	@r0		
    20ec:	20 00 cb 00 	bra	&0x000cb	
    20f0:	00 00       	bra	@r0		
    20f2:	00 00       	bra	@r0		
    20f4:	3b 1c       	.word	0x1c3b;	????	
    20f6:	00 00       	bra	@r0		
    20f8:	20 00 d1 00 	bra	&0x000d1	
    20fc:	00 00       	bra	@r0		
    20fe:	00 00       	bra	@r0		
    2100:	47 1c       	.word	0x1c47;	????	
    2102:	00 00       	bra	@r0		
    2104:	20 00 d3 00 	bra	&0x000d3	
    2108:	00 00       	bra	@r0		
    210a:	00 00       	bra	@r0		
    210c:	54 1c       	.word	0x1c54;	????	
    210e:	00 00       	bra	@r0		
    2110:	20 00 d5 00 	bra	&0x000d5	
    2114:	00 00       	bra	@r0		
    2116:	00 00       	bra	@r0		
    2118:	61 1c       	.word	0x1c61;	????	
    211a:	00 00       	bra	@r0		
    211c:	20 00 d7 00 	bra	&0x000d7	
    2120:	00 00       	bra	@r0		
    2122:	00 00       	bra	@r0		
    2124:	6e 1c       	.word	0x1c6e;	????	
    2126:	00 00       	bra	@r0		
    2128:	20 00 da 00 	bra	&0x000da	
    212c:	00 00       	bra	@r0		
    212e:	00 00       	bra	@r0		
    2130:	7b 1c       	.word	0x1c7b;	????	
    2132:	00 00       	bra	@r0		
    2134:	20 00 e0 00 	bra	&0x000e0	
    2138:	00 00       	bra	@r0		
    213a:	00 00       	bra	@r0		
    213c:	87 1c       	.word	0x1c87;	????	
    213e:	00 00       	bra	@r0		
    2140:	20 00 e2 00 	bra	&0x000e2	
    2144:	00 00       	bra	@r0		
    2146:	00 00       	bra	@r0		
    2148:	94 1c       	.word	0x1c94;	????	
    214a:	00 00       	bra	@r0		
    214c:	20 00 e4 00 	bra	&0x000e4	
    2150:	00 00       	bra	@r0		
    2152:	00 00       	bra	@r0		
    2154:	a1 1c       	.word	0x1ca1;	????	
    2156:	00 00       	bra	@r0		
    2158:	20 00 e6 00 	bra	&0x000e6	
    215c:	00 00       	bra	@r0		
    215e:	00 00       	bra	@r0		
    2160:	ae 1c       	.word	0x1cae;	????	
    2162:	00 00       	bra	@r0		
    2164:	20 00 e9 00 	bra	&0x000e9	
    2168:	00 00       	bra	@r0		
    216a:	00 00       	bra	@r0		
    216c:	bb 1c       	.word	0x1cbb;	????	
    216e:	00 00       	bra	@r0		
    2170:	20 00 ef 00 	bra	&0x000ef	
    2174:	00 00       	bra	@r0		
    2176:	00 00       	bra	@r0		
    2178:	c7 1c       	.word	0x1cc7;	????	
    217a:	00 00       	bra	@r0		
    217c:	20 00 f1 00 	bra	&0x000f1	
    2180:	00 00       	bra	@r0		
    2182:	00 00       	bra	@r0		
    2184:	d4 1c       	.word	0x1cd4;	????	
    2186:	00 00       	bra	@r0		
    2188:	20 00 f3 00 	bra	&0x000f3	
    218c:	00 00       	bra	@r0		
    218e:	00 00       	bra	@r0		
    2190:	e1 1c       	.word	0x1ce1;	????	
    2192:	00 00       	bra	@r0		
    2194:	20 00 f5 00 	bra	&0x000f5	
    2198:	00 00       	bra	@r0		
    219a:	00 00       	bra	@r0		
    219c:	ee 1c       	.word	0x1cee;	????	
    219e:	00 00       	bra	@r0		
    21a0:	20 00 f8 00 	bra	&0x000f8	
    21a4:	00 00       	bra	@r0		
    21a6:	00 00       	bra	@r0		
    21a8:	fb 1c       	.word	0x1cfb;	????	
    21aa:	00 00       	bra	@r0		
    21ac:	20 00 fc 00 	bra	&0x000fc	
    21b0:	00 00       	bra	@r0		
    21b2:	00 00       	bra	@r0		
    21b4:	0b 1d       	.word	0x1d0b;	????	
    21b6:	00 00       	bra	@r0		
    21b8:	20 00 fe 00 	bra	&0x000fe	
    21bc:	00 00       	bra	@r0		
    21be:	00 00       	bra	@r0		
    21c0:	1b 1d       	.word	0x1d1b;	????	
    21c2:	00 00       	bra	@r0		
    21c4:	20 00 00 01 	bra	&0x00100	
    21c8:	00 00       	bra	@r0		
    21ca:	00 00       	bra	@r0		
    21cc:	2a 1d       	.word	0x1d2a;	????	
    21ce:	00 00       	bra	@r0		
    21d0:	20 00 02 01 	bra	&0x00102	
    21d4:	00 00       	bra	@r0		
    21d6:	00 00       	bra	@r0		
    21d8:	39 1d       	.word	0x1d39;	????	
    21da:	00 00       	bra	@r0		
    21dc:	20 00 04 01 	bra	&0x00104	
    21e0:	00 00       	bra	@r0		
    21e2:	00 00       	bra	@r0		
    21e4:	49 1d       	.word	0x1d49;	????	
    21e6:	00 00       	bra	@r0		
    21e8:	20 00 06 01 	bra	&0x00106	
    21ec:	00 00       	bra	@r0		
    21ee:	00 00       	bra	@r0		
    21f0:	59 1d       	.word	0x1d59;	????	
    21f2:	00 00       	bra	@r0		
    21f4:	20 00 08 01 	bra	&0x00108	
    21f8:	00 00       	bra	@r0		
    21fa:	00 00       	bra	@r0		
    21fc:	6a 1d       	.word	0x1d6a;	????	
    21fe:	00 00       	bra	@r0		
    2200:	20 00 0a 01 	bra	&0x0010a	
    2204:	00 00       	bra	@r0		
    2206:	00 00       	bra	@r0		
    2208:	7b 1d       	.word	0x1d7b;	????	
    220a:	00 00       	bra	@r0		
    220c:	20 00 0c 01 	bra	&0x0010c	
    2210:	00 00       	bra	@r0		
    2212:	00 00       	bra	@r0		
    2214:	8c 1d       	.word	0x1d8c;	????	
    2216:	00 00       	bra	@r0		
    2218:	20 00 0e 01 	bra	&0x0010e	
    221c:	00 00       	bra	@r0		
    221e:	00 00       	bra	@r0		
    2220:	9e 1d       	.word	0x1d9e;	????	
    2222:	00 00       	bra	@r0		
    2224:	20 00 10 01 	bra	&0x00110	
    2228:	00 00       	bra	@r0		
    222a:	00 00       	bra	@r0		
    222c:	b0 1d       	.word	0x1db0;	????	
    222e:	00 00       	bra	@r0		
    2230:	20 00 13 01 	bra	&0x00113	
    2234:	00 00       	bra	@r0		
    2236:	00 00       	bra	@r0		
    2238:	c0 1d       	.word	0x1dc0;	????	
    223a:	00 00       	bra	@r0		
    223c:	20 00 15 01 	bra	&0x00115	
    2240:	00 00       	bra	@r0		
    2242:	00 00       	bra	@r0		
    2244:	d0 1d       	.word	0x1dd0;	????	
    2246:	00 00       	bra	@r0		
    2248:	20 00 17 01 	bra	&0x00117	
    224c:	00 00       	bra	@r0		
    224e:	00 00       	bra	@r0		
    2250:	df 1d       	.word	0x1ddf;	????	
    2252:	00 00       	bra	@r0		
    2254:	20 00 19 01 	bra	&0x00119	
    2258:	00 00       	bra	@r0		
    225a:	00 00       	bra	@r0		
    225c:	ee 1d       	.word	0x1dee;	????	
    225e:	00 00       	bra	@r0		
    2260:	20 00 1b 01 	bra	&0x0011b	
    2264:	00 00       	bra	@r0		
    2266:	00 00       	bra	@r0		
    2268:	ff 1d       	.word	0x1dff;	????	
    226a:	00 00       	bra	@r0		
    226c:	20 00 1d 01 	bra	&0x0011d	
    2270:	00 00       	bra	@r0		
    2272:	00 00       	bra	@r0		
    2274:	0f 1e       	.word	0x1e0f;	????	
    2276:	00 00       	bra	@r0		
    2278:	20 00 1f 01 	bra	&0x0011f	
    227c:	00 00       	bra	@r0		
    227e:	00 00       	bra	@r0		
    2280:	20 1e       	.word	0x1e20;	????	
    2282:	00 00       	bra	@r0		
    2284:	20 00 21 01 	bra	&0x00121	
    2288:	00 00       	bra	@r0		
    228a:	00 00       	bra	@r0		
    228c:	31 1e       	.word	0x1e31;	????	
    228e:	00 00       	bra	@r0		
    2290:	20 00 23 01 	bra	&0x00123	
    2294:	00 00       	bra	@r0		
    2296:	00 00       	bra	@r0		
    2298:	43 1e       	.word	0x1e43;	????	
    229a:	00 00       	bra	@r0		
    229c:	20 00 25 01 	bra	&0x00125	
    22a0:	00 00       	bra	@r0		
    22a2:	00 00       	bra	@r0		
    22a4:	55 1e       	.word	0x1e55;	????	
    22a6:	00 00       	bra	@r0		
    22a8:	20 00 2c 01 	bra	&0x0012c	
    22ac:	00 00       	bra	@r0		
    22ae:	00 00       	bra	@r0		
    22b0:	65 1e       	.word	0x1e65;	????	
    22b2:	00 00       	bra	@r0		
    22b4:	20 00 2e 01 	bra	&0x0012e	
    22b8:	00 00       	bra	@r0		
    22ba:	00 00       	bra	@r0		
    22bc:	75 1e       	.word	0x1e75;	????	
    22be:	00 00       	bra	@r0		
    22c0:	20 00 30 01 	bra	&0x00130	
    22c4:	00 00       	bra	@r0		
    22c6:	00 00       	bra	@r0		
    22c8:	84 1e       	.word	0x1e84;	????	
    22ca:	00 00       	bra	@r0		
    22cc:	20 00 32 01 	bra	&0x00132	
    22d0:	00 00       	bra	@r0		
    22d2:	00 00       	bra	@r0		
    22d4:	93 1e       	.word	0x1e93;	????	
    22d6:	00 00       	bra	@r0		
    22d8:	20 00 34 01 	bra	&0x00134	
    22dc:	00 00       	bra	@r0		
    22de:	00 00       	bra	@r0		
    22e0:	a3 1e       	.word	0x1ea3;	????	
    22e2:	00 00       	bra	@r0		
    22e4:	20 00 36 01 	bra	&0x00136	
    22e8:	00 00       	bra	@r0		
    22ea:	00 00       	bra	@r0		
    22ec:	b3 1e       	.word	0x1eb3;	????	
    22ee:	00 00       	bra	@r0		
    22f0:	20 00 38 01 	bra	&0x00138	
    22f4:	00 00       	bra	@r0		
    22f6:	00 00       	bra	@r0		
    22f8:	c4 1e       	.word	0x1ec4;	????	
    22fa:	00 00       	bra	@r0		
    22fc:	20 00 3a 01 	bra	&0x0013a	
    2300:	00 00       	bra	@r0		
    2302:	00 00       	bra	@r0		
    2304:	d5 1e       	.word	0x1ed5;	????	
    2306:	00 00       	bra	@r0		
    2308:	20 00 3c 01 	bra	&0x0013c	
    230c:	00 00       	bra	@r0		
    230e:	00 00       	bra	@r0		
    2310:	e6 1e       	.word	0x1ee6;	????	
    2312:	00 00       	bra	@r0		
    2314:	20 00 3e 01 	bra	&0x0013e	
    2318:	00 00       	bra	@r0		
    231a:	00 00       	bra	@r0		
    231c:	f8 1e       	.word	0x1ef8;	????	
    231e:	00 00       	bra	@r0		
    2320:	20 00 40 01 	bra	&0x00140	
    2324:	00 00       	bra	@r0		
    2326:	00 00       	bra	@r0		
    2328:	0a 1f       	.word	0x1f0a;	????	
    232a:	00 00       	bra	@r0		
    232c:	20 00 43 01 	bra	&0x00143	
    2330:	00 00       	bra	@r0		
    2332:	00 00       	bra	@r0		
    2334:	1a 1f       	.word	0x1f1a;	????	
    2336:	00 00       	bra	@r0		
    2338:	20 00 45 01 	bra	&0x00145	
    233c:	00 00       	bra	@r0		
    233e:	00 00       	bra	@r0		
    2340:	2a 1f       	.word	0x1f2a;	????	
    2342:	00 00       	bra	@r0		
    2344:	20 00 47 01 	bra	&0x00147	
    2348:	00 00       	bra	@r0		
    234a:	00 00       	bra	@r0		
    234c:	39 1f       	.word	0x1f39;	????	
    234e:	00 00       	bra	@r0		
    2350:	20 00 49 01 	bra	&0x00149	
    2354:	00 00       	bra	@r0		
    2356:	00 00       	bra	@r0		
    2358:	48 1f       	.word	0x1f48;	????	
    235a:	00 00       	bra	@r0		
    235c:	20 00 4b 01 	bra	&0x0014b	
    2360:	00 00       	bra	@r0		
    2362:	00 00       	bra	@r0		
    2364:	59 1f       	.word	0x1f59;	????	
    2366:	00 00       	bra	@r0		
    2368:	20 00 4d 01 	bra	&0x0014d	
    236c:	00 00       	bra	@r0		
    236e:	00 00       	bra	@r0		
    2370:	69 1f       	.word	0x1f69;	????	
    2372:	00 00       	bra	@r0		
    2374:	20 00 4f 01 	bra	&0x0014f	
    2378:	00 00       	bra	@r0		
    237a:	00 00       	bra	@r0		
    237c:	7a 1f       	.word	0x1f7a;	????	
    237e:	00 00       	bra	@r0		
    2380:	20 00 51 01 	bra	&0x00151	
    2384:	00 00       	bra	@r0		
    2386:	00 00       	bra	@r0		
    2388:	8b 1f       	.word	0x1f8b;	????	
    238a:	00 00       	bra	@r0		
    238c:	20 00 53 01 	bra	&0x00153	
    2390:	00 00       	bra	@r0		
    2392:	00 00       	bra	@r0		
    2394:	9d 1f       	.word	0x1f9d;	????	
    2396:	00 00       	bra	@r0		
    2398:	20 00 55 01 	bra	&0x00155	
    239c:	00 00       	bra	@r0		
    239e:	00 00       	bra	@r0		
    23a0:	af 1f       	.word	0x1faf;	????	
    23a2:	00 00       	bra	@r0		
    23a4:	20 00 58 01 	bra	&0x00158	
    23a8:	00 00       	bra	@r0		
    23aa:	00 00       	bra	@r0		
    23ac:	bc 1f       	.word	0x1fbc;	????	
    23ae:	00 00       	bra	@r0		
    23b0:	20 00 5a 01 	bra	&0x0015a	
    23b4:	00 00       	bra	@r0		
    23b6:	00 00       	bra	@r0		
    23b8:	ca 1f       	.word	0x1fca;	????	
    23ba:	00 00       	bra	@r0		
    23bc:	20 00 1a 00 	bra	&0x0001a	
    23c0:	00 00       	bra	@r0		
    23c2:	00 00       	bra	@r0		
    23c4:	d8 1f       	.word	0x1fd8;	????	
    23c6:	00 00       	bra	@r0		
    23c8:	20 00 1c 00 	bra	&0x0001c	
    23cc:	00 00       	bra	@r0		
    23ce:	00 00       	bra	@r0		
    23d0:	e7 1f       	.word	0x1fe7;	????	
    23d2:	00 00       	bra	@r0		
    23d4:	20 00 1e 00 	bra	&0x0001e	
    23d8:	00 00       	bra	@r0		
    23da:	00 00       	bra	@r0		
    23dc:	f4 1f       	.word	0x1ff4;	????	
    23de:	00 00       	bra	@r0		
    23e0:	20 00 21 00 	bra	&0x00021	
    23e4:	00 00       	bra	@r0		
    23e6:	00 00       	bra	@r0		
    23e8:	05 20       	jnz	$+12     	;abs 0x23f4
    23ea:	00 00       	bra	@r0		
    23ec:	20 00 23 00 	bra	&0x00023	
    23f0:	00 00       	bra	@r0		
    23f2:	00 00       	bra	@r0		
    23f4:	16 20       	jnz	$+46     	;abs 0x2422
    23f6:	00 00       	bra	@r0		
    23f8:	20 00 25 00 	bra	&0x00025	
    23fc:	00 00       	bra	@r0		
    23fe:	00 00       	bra	@r0		
    2400:	26 20       	jnz	$+78     	;abs 0x244e
    2402:	00 00       	bra	@r0		
    2404:	20 00 27 00 	bra	&0x00027	
    2408:	00 00       	bra	@r0		
    240a:	00 00       	bra	@r0		
    240c:	36 20       	jnz	$+110    	;abs 0x247a
    240e:	00 00       	bra	@r0		
    2410:	20 00 47 00 	bra	&0x00047	
    2414:	00 00       	bra	@r0		
    2416:	00 00       	bra	@r0		
    2418:	47 20       	jnz	$+144    	;abs 0x24a8
    241a:	00 00       	bra	@r0		
    241c:	20 00 49 00 	bra	&0x00049	
    2420:	00 00       	bra	@r0		
    2422:	00 00       	bra	@r0		
    2424:	57 20       	jnz	$+176    	;abs 0x24d4
    2426:	00 00       	bra	@r0		
    2428:	20 00 ac 00 	bra	&0x000ac	
    242c:	00 00       	bra	@r0		
    242e:	00 00       	bra	@r0		
    2430:	66 20       	jnz	$+206    	;abs 0x24fe
    2432:	00 00       	bra	@r0		
    2434:	20 00 16 00 	bra	&0x00016	
    2438:	00 00       	bra	@r0		
    243a:	00 00       	bra	@r0		
    243c:	73 20       	jnz	$+232    	;abs 0x2524
    243e:	00 00       	bra	@r0		
    2440:	20 00 18 00 	bra	&0x00018	
    2444:	00 00       	bra	@r0		
    2446:	00 00       	bra	@r0		
    2448:	81 20       	jnz	$+260    	;abs 0x254c
    244a:	00 00       	bra	@r0		
    244c:	20 00 1a 00 	bra	&0x0001a	
    2450:	00 00       	bra	@r0		
    2452:	00 00       	bra	@r0		
    2454:	8d 20       	jnz	$+284    	;abs 0x2570
    2456:	00 00       	bra	@r0		
    2458:	20 00 1d 00 	bra	&0x0001d	
    245c:	00 00       	bra	@r0		
    245e:	00 00       	bra	@r0		
    2460:	9d 20       	jnz	$+316    	;abs 0x259c
    2462:	00 00       	bra	@r0		
    2464:	20 00 1f 00 	bra	&0x0001f	
    2468:	00 00       	bra	@r0		
    246a:	00 00       	bra	@r0		
    246c:	ad 20       	jnz	$+348    	;abs 0x25c8
    246e:	00 00       	bra	@r0		
    2470:	20 00 21 00 	bra	&0x00021	
    2474:	00 00       	bra	@r0		
    2476:	00 00       	bra	@r0		
    2478:	bd 20       	jnz	$+380    	;abs 0x25f4
    247a:	00 00       	bra	@r0		
    247c:	20 00 23 00 	bra	&0x00023	
    2480:	00 00       	bra	@r0		
    2482:	00 00       	bra	@r0		
    2484:	cc 20       	jnz	$+410    	;abs 0x261e
    2486:	00 00       	bra	@r0		
    2488:	20 00 25 00 	bra	&0x00025	
    248c:	00 00       	bra	@r0		
    248e:	00 00       	bra	@r0		
    2490:	db 20       	jnz	$+440    	;abs 0x2648
    2492:	00 00       	bra	@r0		
    2494:	20 00 27 00 	bra	&0x00027	
    2498:	00 00       	bra	@r0		
    249a:	00 00       	bra	@r0		
    249c:	ea 20       	jnz	$+470    	;abs 0x2672
    249e:	00 00       	bra	@r0		
    24a0:	20 00 2c 00 	bra	&0x0002c	
    24a4:	00 00       	bra	@r0		
    24a6:	00 00       	bra	@r0		
    24a8:	fa 20       	jnz	$+502    	;abs 0x269e
    24aa:	00 00       	bra	@r0		
    24ac:	20 00 2e 00 	bra	&0x0002e	
    24b0:	00 00       	bra	@r0		
    24b2:	00 00       	bra	@r0		
    24b4:	0a 21       	jnz	$+534    	;abs 0x26ca
    24b6:	00 00       	bra	@r0		
    24b8:	20 00 30 00 	bra	&0x00030	
    24bc:	00 00       	bra	@r0		
    24be:	00 00       	bra	@r0		
    24c0:	1a 21       	jnz	$+566    	;abs 0x26f6
    24c2:	00 00       	bra	@r0		
    24c4:	20 00 32 00 	bra	&0x00032	
    24c8:	00 00       	bra	@r0		
    24ca:	00 00       	bra	@r0		
    24cc:	2a 21       	jnz	$+598    	;abs 0x2722
    24ce:	00 00       	bra	@r0		
    24d0:	20 00 34 00 	bra	&0x00034	
    24d4:	00 00       	bra	@r0		
    24d6:	00 00       	bra	@r0		
    24d8:	39 21       	jnz	$+628    	;abs 0x274c
    24da:	00 00       	bra	@r0		
    24dc:	20 00 36 00 	bra	&0x00036	
    24e0:	00 00       	bra	@r0		
    24e2:	00 00       	bra	@r0		
    24e4:	48 21       	jnz	$+658    	;abs 0x2776
    24e6:	00 00       	bra	@r0		
    24e8:	20 00 38 00 	bra	&0x00038	
    24ec:	00 00       	bra	@r0		
    24ee:	00 00       	bra	@r0		
    24f0:	57 21       	jnz	$+688    	;abs 0x27a0
    24f2:	00 00       	bra	@r0		
    24f4:	20 00 3a 00 	bra	&0x0003a	
    24f8:	00 00       	bra	@r0		
    24fa:	00 00       	bra	@r0		
    24fc:	66 21       	jnz	$+718    	;abs 0x27ca
    24fe:	00 00       	bra	@r0		
    2500:	20 00 7a 00 	bra	&0x0007a	
    2504:	00 00       	bra	@r0		
    2506:	00 00       	bra	@r0		
    2508:	75 21       	jnz	$+748    	;abs 0x27f4
    250a:	00 00       	bra	@r0		
    250c:	20 00 14 00 	bra	&0x00014	
    2510:	00 00       	bra	@r0		
    2512:	00 00       	bra	@r0		
    2514:	83 21       	jnz	$+776    	;abs 0x281c
    2516:	00 00       	bra	@r0		
    2518:	20 00 16 00 	bra	&0x00016	
    251c:	00 00       	bra	@r0		
    251e:	00 00       	bra	@r0		
    2520:	92 21       	jnz	$+806    	;abs 0x2846
    2522:	00 00       	bra	@r0		
    2524:	20 00 18 00 	bra	&0x00018	
    2528:	00 00       	bra	@r0		
    252a:	00 00       	bra	@r0		
    252c:	a1 21       	jnz	$+836    	;abs 0x2870
    252e:	00 00       	bra	@r0		
    2530:	20 00 1b 00 	bra	&0x0001b	
    2534:	00 00       	bra	@r0		
    2536:	00 00       	bra	@r0		
    2538:	b0 21       	jnz	$+866    	;abs 0x289a
    253a:	00 00       	bra	@r0		
    253c:	20 00 14 00 	bra	&0x00014	
    2540:	00 00       	bra	@r0		
    2542:	00 00       	bra	@r0		
    2544:	be 21       	jnz	$+894    	;abs 0x28c2
    2546:	00 00       	bra	@r0		
    2548:	20 00 16 00 	bra	&0x00016	
    254c:	00 00       	bra	@r0		
    254e:	00 00       	bra	@r0		
    2550:	cc 21       	jnz	$+922    	;abs 0x28ea
    2552:	00 00       	bra	@r0		
    2554:	20 00 18 00 	bra	&0x00018	
    2558:	00 00       	bra	@r0		
    255a:	00 00       	bra	@r0		
    255c:	da 21       	jnz	$+950    	;abs 0x2912
    255e:	00 00       	bra	@r0		
    2560:	20 00 14 00 	bra	&0x00014	
    2564:	00 00       	bra	@r0		
    2566:	00 00       	bra	@r0		
    2568:	e8 21       	jnz	$+978    	;abs 0x293a
    256a:	00 00       	bra	@r0		
    256c:	20 00 16 00 	bra	&0x00016	
    2570:	00 00       	bra	@r0		
    2572:	00 00       	bra	@r0		
    2574:	f6 21       	jnz	$+1006   	;abs 0x2962
    2576:	00 00       	bra	@r0		
    2578:	20 00 18 00 	bra	&0x00018	
    257c:	00 00       	bra	@r0		
    257e:	00 00       	bra	@r0		
    2580:	02 22       	jnz	$-1018   	;abs 0x2186
    2582:	00 00       	bra	@r0		
    2584:	20 00 12 00 	bra	&0x00012	
    2588:	00 00       	bra	@r0		
    258a:	00 00       	bra	@r0		
    258c:	14 22       	jnz	$-982    	;abs 0x21b6
    258e:	00 00       	bra	@r0		
    2590:	20 00 14 00 	bra	&0x00014	
    2594:	00 00       	bra	@r0		
    2596:	00 00       	bra	@r0		
    2598:	26 22       	jnz	$-946    	;abs 0x21e6
    259a:	00 00       	bra	@r0		
    259c:	20 00 16 00 	bra	&0x00016	
    25a0:	00 00       	bra	@r0		
    25a2:	00 00       	bra	@r0		
    25a4:	37 22       	jnz	$-912    	;abs 0x2214
    25a6:	00 00       	bra	@r0		
    25a8:	20 00 18 00 	bra	&0x00018	
    25ac:	00 00       	bra	@r0		
    25ae:	00 00       	bra	@r0		
    25b0:	47 22       	jnz	$-880    	;abs 0x2240
    25b2:	00 00       	bra	@r0		
    25b4:	20 00 1a 00 	bra	&0x0001a	
    25b8:	00 00       	bra	@r0		
    25ba:	00 00       	bra	@r0		
    25bc:	57 22       	jnz	$-848    	;abs 0x226c
    25be:	00 00       	bra	@r0		
    25c0:	20 00 58 00 	bra	&0x00058	
    25c4:	00 00       	bra	@r0		
    25c6:	00 00       	bra	@r0		
    25c8:	65 22       	jnz	$-820    	;abs 0x2294
    25ca:	00 00       	bra	@r0		
    25cc:	20 00 64 00 	bra	&0x00064	
    25d0:	00 00       	bra	@r0		
    25d2:	00 00       	bra	@r0		
    25d4:	77 22       	jnz	$-784    	;abs 0x22c4
    25d6:	00 00       	bra	@r0		
    25d8:	20 00 66 00 	bra	&0x00066	
    25dc:	00 00       	bra	@r0		
    25de:	00 00       	bra	@r0		
    25e0:	89 22       	jnz	$-748    	;abs 0x22f4
    25e2:	00 00       	bra	@r0		
    25e4:	20 00 68 00 	bra	&0x00068	
    25e8:	00 00       	bra	@r0		
    25ea:	00 00       	bra	@r0		
    25ec:	9b 22       	jnz	$-712    	;abs 0x2324
    25ee:	00 00       	bra	@r0		
    25f0:	20 00 6a 00 	bra	&0x0006a	
    25f4:	00 00       	bra	@r0		
    25f6:	00 00       	bra	@r0		
    25f8:	ad 22       	jnz	$-676    	;abs 0x2354
    25fa:	00 00       	bra	@r0		
    25fc:	20 00 6c 00 	bra	&0x0006c	
    2600:	00 00       	bra	@r0		
    2602:	00 00       	bra	@r0		
    2604:	bf 22       	jnz	$-640    	;abs 0x2384
    2606:	00 00       	bra	@r0		
    2608:	20 00 6e 00 	bra	&0x0006e	
    260c:	00 00       	bra	@r0		
    260e:	00 00       	bra	@r0		
    2610:	d1 22       	jnz	$-604    	;abs 0x23b4
    2612:	00 00       	bra	@r0		
    2614:	20 00 70 00 	bra	&0x00070	
    2618:	00 00       	bra	@r0		
    261a:	00 00       	bra	@r0		
    261c:	e3 22       	jnz	$-568    	;abs 0x23e4
    261e:	00 00       	bra	@r0		
    2620:	20 00 72 00 	bra	&0x00072	
    2624:	00 00       	bra	@r0		
    2626:	00 00       	bra	@r0		
    2628:	f5 22       	jnz	$-532    	;abs 0x2414
    262a:	00 00       	bra	@r0		
    262c:	20 00 74 00 	bra	&0x00074	
    2630:	00 00       	bra	@r0		
    2632:	00 00       	bra	@r0		
    2634:	07 23       	jnz	$-496    	;abs 0x2444
    2636:	00 00       	bra	@r0		
    2638:	20 00 76 00 	bra	&0x00076	
    263c:	00 00       	bra	@r0		
    263e:	00 00       	bra	@r0		
    2640:	19 23       	jnz	$-460    	;abs 0x2474
    2642:	00 00       	bra	@r0		
    2644:	20 00 78 00 	bra	&0x00078	
    2648:	00 00       	bra	@r0		
    264a:	00 00       	bra	@r0		
    264c:	2c 23       	jnz	$-422    	;abs 0x24a6
    264e:	00 00       	bra	@r0		
    2650:	20 00 7a 00 	bra	&0x0007a	
    2654:	00 00       	bra	@r0		
    2656:	00 00       	bra	@r0		
    2658:	3f 23       	jnz	$-384    	;abs 0x24d8
    265a:	00 00       	bra	@r0		
    265c:	20 00 7c 00 	bra	&0x0007c	
    2660:	00 00       	bra	@r0		
    2662:	00 00       	bra	@r0		
    2664:	52 23       	jnz	$-346    	;abs 0x250a
    2666:	00 00       	bra	@r0		
    2668:	20 00 7e 00 	bra	&0x0007e	
    266c:	00 00       	bra	@r0		
    266e:	00 00       	bra	@r0		
    2670:	65 23       	jnz	$-308    	;abs 0x253c
    2672:	00 00       	bra	@r0		
    2674:	20 00 80 00 	bra	&0x00080	
    2678:	00 00       	bra	@r0		
    267a:	00 00       	bra	@r0		
    267c:	78 23       	jnz	$-270    	;abs 0x256e
    267e:	00 00       	bra	@r0		
    2680:	20 00 82 00 	bra	&0x00082	
    2684:	00 00       	bra	@r0		
    2686:	00 00       	bra	@r0		
    2688:	8b 23       	jnz	$-232    	;abs 0x25a0
    268a:	00 00       	bra	@r0		
    268c:	20 00 8b 00 	bra	&0x0008b	
    2690:	00 00       	bra	@r0		
    2692:	00 00       	bra	@r0		
    2694:	9d 23       	jnz	$-196    	;abs 0x25d0
    2696:	00 00       	bra	@r0		
    2698:	20 00 8d 00 	bra	&0x0008d	
    269c:	00 00       	bra	@r0		
    269e:	00 00       	bra	@r0		
    26a0:	af 23       	jnz	$-160    	;abs 0x2600
    26a2:	00 00       	bra	@r0		
    26a4:	20 00 8f 00 	bra	&0x0008f	
    26a8:	00 00       	bra	@r0		
    26aa:	00 00       	bra	@r0		
    26ac:	c1 23       	jnz	$-124    	;abs 0x2630
    26ae:	00 00       	bra	@r0		
    26b0:	20 00 91 00 	bra	&0x00091	
    26b4:	00 00       	bra	@r0		
    26b6:	00 00       	bra	@r0		
    26b8:	d3 23       	jnz	$-88     	;abs 0x2660
    26ba:	00 00       	bra	@r0		
    26bc:	20 00 93 00 	bra	&0x00093	
    26c0:	00 00       	bra	@r0		
    26c2:	00 00       	bra	@r0		
    26c4:	e5 23       	jnz	$-52     	;abs 0x2690
    26c6:	00 00       	bra	@r0		
    26c8:	20 00 95 00 	bra	&0x00095	
    26cc:	00 00       	bra	@r0		
    26ce:	00 00       	bra	@r0		
    26d0:	f7 23       	jnz	$-16     	;abs 0x26c0
    26d2:	00 00       	bra	@r0		
    26d4:	20 00 97 00 	bra	&0x00097	
    26d8:	00 00       	bra	@r0		
    26da:	00 00       	bra	@r0		
    26dc:	09 24       	jz	$+20     	;abs 0x26f0
    26de:	00 00       	bra	@r0		
    26e0:	20 00 99 00 	bra	&0x00099	
    26e4:	00 00       	bra	@r0		
    26e6:	00 00       	bra	@r0		
    26e8:	1b 24       	jz	$+56     	;abs 0x2720
    26ea:	00 00       	bra	@r0		
    26ec:	20 00 9b 00 	bra	&0x0009b	
    26f0:	00 00       	bra	@r0		
    26f2:	00 00       	bra	@r0		
    26f4:	2d 24       	jz	$+92     	;abs 0x2750
    26f6:	00 00       	bra	@r0		
    26f8:	20 00 9d 00 	bra	&0x0009d	
    26fc:	00 00       	bra	@r0		
    26fe:	00 00       	bra	@r0		
    2700:	3f 24       	jz	$+128    	;abs 0x2780
    2702:	00 00       	bra	@r0		
    2704:	20 00 9f 00 	bra	&0x0009f	
    2708:	00 00       	bra	@r0		
    270a:	00 00       	bra	@r0		
    270c:	52 24       	jz	$+166    	;abs 0x27b2
    270e:	00 00       	bra	@r0		
    2710:	20 00 a1 00 	bra	&0x000a1	
    2714:	00 00       	bra	@r0		
    2716:	00 00       	bra	@r0		
    2718:	65 24       	jz	$+204    	;abs 0x27e4
    271a:	00 00       	bra	@r0		
    271c:	20 00 a3 00 	bra	&0x000a3	
    2720:	00 00       	bra	@r0		
    2722:	00 00       	bra	@r0		
    2724:	78 24       	jz	$+242    	;abs 0x2816
    2726:	00 00       	bra	@r0		
    2728:	20 00 a5 00 	bra	&0x000a5	
    272c:	00 00       	bra	@r0		
    272e:	00 00       	bra	@r0		
    2730:	8b 24       	jz	$+280    	;abs 0x2848
    2732:	00 00       	bra	@r0		
    2734:	20 00 a7 00 	bra	&0x000a7	
    2738:	00 00       	bra	@r0		
    273a:	00 00       	bra	@r0		
    273c:	9e 24       	jz	$+318    	;abs 0x287a
    273e:	00 00       	bra	@r0		
    2740:	20 00 a9 00 	bra	&0x000a9	
    2744:	00 00       	bra	@r0		
    2746:	00 00       	bra	@r0		
    2748:	b1 24       	jz	$+356    	;abs 0x28ac
    274a:	00 00       	bra	@r0		
    274c:	20 00 12 00 	bra	&0x00012	
    2750:	00 00       	bra	@r0		
    2752:	00 00       	bra	@r0		
    2754:	c4 24       	jz	$+394    	;abs 0x28de
    2756:	00 00       	bra	@r0		
    2758:	20 00 14 00 	bra	&0x00014	
    275c:	00 00       	bra	@r0		
    275e:	00 00       	bra	@r0		
    2760:	d7 24       	jz	$+432    	;abs 0x2910
    2762:	00 00       	bra	@r0		
    2764:	20 00 16 00 	bra	&0x00016	
    2768:	00 00       	bra	@r0		
    276a:	00 00       	bra	@r0		
    276c:	ea 24       	jz	$+470    	;abs 0x2942
    276e:	00 00       	bra	@r0		
    2770:	20 00 18 00 	bra	&0x00018	
    2774:	00 00       	bra	@r0		
    2776:	00 00       	bra	@r0		
    2778:	fd 24       	jz	$+508    	;abs 0x2974
    277a:	00 00       	bra	@r0		
    277c:	20 00 18 00 	bra	&0x00018	
    2780:	00 00       	bra	@r0		
    2782:	00 00       	bra	@r0		
    2784:	0d 25       	jz	$+540    	;abs 0x29a0
    2786:	00 00       	bra	@r0		
    2788:	20 00 1a 00 	bra	&0x0001a	
    278c:	00 00       	bra	@r0		
    278e:	00 00       	bra	@r0		
    2790:	1d 25       	jz	$+572    	;abs 0x29cc
    2792:	00 00       	bra	@r0		
    2794:	20 00 1d 00 	bra	&0x0001d	
    2798:	00 00       	bra	@r0		
    279a:	00 00       	bra	@r0		
    279c:	2b 25       	jz	$+600    	;abs 0x29f4
    279e:	00 00       	bra	@r0		
    27a0:	20 00 3f 00 	bra	&0x0003f	
    27a4:	00 00       	bra	@r0		
    27a6:	00 00       	bra	@r0		
    27a8:	3b 25       	jz	$+632    	;abs 0x2a20
    27aa:	00 00       	bra	@r0		
    27ac:	20 00 41 00 	bra	&0x00041	
    27b0:	00 00       	bra	@r0		
    27b2:	00 00       	bra	@r0		
    27b4:	50 25       	jz	$+674    	;abs 0x2a56
    27b6:	00 00       	bra	@r0		
    27b8:	20 00 43 00 	bra	&0x00043	
    27bc:	00 00       	bra	@r0		
    27be:	00 00       	bra	@r0		
    27c0:	60 25       	jz	$+706    	;abs 0x2a82
    27c2:	00 00       	bra	@r0		
    27c4:	20 00 45 00 	bra	&0x00045	
    27c8:	00 00       	bra	@r0		
    27ca:	00 00       	bra	@r0		
    27cc:	6e 25       	jz	$+734    	;abs 0x2aaa
    27ce:	00 00       	bra	@r0		
    27d0:	20 00 47 00 	bra	&0x00047	
    27d4:	00 00       	bra	@r0		
    27d6:	00 00       	bra	@r0		
    27d8:	7e 25       	jz	$+766    	;abs 0x2ad6
    27da:	00 00       	bra	@r0		
    27dc:	20 00 49 00 	bra	&0x00049	
    27e0:	00 00       	bra	@r0		
    27e2:	00 00       	bra	@r0		
    27e4:	8d 25       	jz	$+796    	;abs 0x2b00
    27e6:	00 00       	bra	@r0		
    27e8:	20 00 4c 00 	bra	&0x0004c	
    27ec:	00 00       	bra	@r0		
    27ee:	00 00       	bra	@r0		
    27f0:	9d 25       	jz	$+828    	;abs 0x2b2c
    27f2:	00 00       	bra	@r0		
    27f4:	20 00 4e 00 	bra	&0x0004e	
    27f8:	00 00       	bra	@r0		
    27fa:	00 00       	bra	@r0		
    27fc:	ab 25       	jz	$+856    	;abs 0x2b54
    27fe:	00 00       	bra	@r0		
    2800:	20 00 50 00 	bra	&0x00050	
    2804:	00 00       	bra	@r0		
    2806:	00 00       	bra	@r0		
    2808:	bb 25       	jz	$+888    	;abs 0x2b80
    280a:	00 00       	bra	@r0		
    280c:	20 00 52 00 	bra	&0x00052	
    2810:	00 00       	bra	@r0		
    2812:	00 00       	bra	@r0		
    2814:	ca 25       	jz	$+918    	;abs 0x2baa
    2816:	00 00       	bra	@r0		
    2818:	20 00 54 00 	bra	&0x00054	
    281c:	00 00       	bra	@r0		
    281e:	00 00       	bra	@r0		
    2820:	da 25       	jz	$+950    	;abs 0x2bd6
    2822:	00 00       	bra	@r0		
    2824:	20 00 56 00 	bra	&0x00056	
    2828:	00 00       	bra	@r0		
    282a:	00 00       	bra	@r0		
    282c:	e9 25       	jz	$+980    	;abs 0x2c00
    282e:	00 00       	bra	@r0		
    2830:	20 00 59 00 	bra	&0x00059	
    2834:	00 00       	bra	@r0		
    2836:	00 00       	bra	@r0		
    2838:	f9 25       	jz	$+1012   	;abs 0x2c2c
    283a:	00 00       	bra	@r0		
    283c:	20 00 5b 00 	bra	&0x0005b	
    2840:	00 00       	bra	@r0		
    2842:	00 00       	bra	@r0		
    2844:	07 26       	jz	$-1008   	;abs 0x2454
    2846:	00 00       	bra	@r0		
    2848:	20 00 5d 00 	bra	&0x0005d	
    284c:	00 00       	bra	@r0		
    284e:	00 00       	bra	@r0		
    2850:	17 26       	jz	$-976    	;abs 0x2480
    2852:	00 00       	bra	@r0		
    2854:	20 00 5f 00 	bra	&0x0005f	
    2858:	00 00       	bra	@r0		
    285a:	00 00       	bra	@r0		
    285c:	25 26       	jz	$-948    	;abs 0x24a8
    285e:	00 00       	bra	@r0		
    2860:	20 00 61 00 	bra	&0x00061	
    2864:	00 00       	bra	@r0		
    2866:	00 00       	bra	@r0		
    2868:	35 26       	jz	$-916    	;abs 0x24d4
    286a:	00 00       	bra	@r0		
    286c:	20 00 63 00 	bra	&0x00063	
    2870:	00 00       	bra	@r0		
    2872:	00 00       	bra	@r0		
    2874:	44 26       	jz	$-886    	;abs 0x24fe
    2876:	00 00       	bra	@r0		
    2878:	20 00 47 00 	bra	&0x00047	
    287c:	00 00       	bra	@r0		
    287e:	00 00       	bra	@r0		
    2880:	53 26       	jz	$-856    	;abs 0x2528
    2882:	00 00       	bra	@r0		
    2884:	20 00 45 00 	bra	&0x00045	
    2888:	00 00       	bra	@r0		
    288a:	00 00       	bra	@r0		
    288c:	5e 26       	jz	$-834    	;abs 0x254a
    288e:	00 00       	bra	@r0		
    2890:	20 00 4c 00 	bra	&0x0004c	
    2894:	00 00       	bra	@r0		
    2896:	00 00       	bra	@r0		
    2898:	6a 26       	jz	$-810    	;abs 0x256e
    289a:	00 00       	bra	@r0		
    289c:	20 00 54 00 	bra	&0x00054	
    28a0:	00 00       	bra	@r0		
    28a2:	00 00       	bra	@r0		
    28a4:	75 26       	jz	$-788    	;abs 0x2590
    28a6:	00 00       	bra	@r0		
    28a8:	20 00 5c 00 	bra	&0x0005c	
    28ac:	00 00       	bra	@r0		
    28ae:	00 00       	bra	@r0		
    28b0:	81 26       	jz	$-764    	;abs 0x25b4
    28b2:	00 00       	bra	@r0		
    28b4:	20 00 6e 00 	bra	&0x0006e	
    28b8:	00 00       	bra	@r0		
    28ba:	00 00       	bra	@r0		
    28bc:	96 26       	jz	$-722    	;abs 0x25ea
    28be:	00 00       	bra	@r0		
    28c0:	20 00 70 00 	bra	&0x00070	
    28c4:	00 00       	bra	@r0		
    28c6:	00 00       	bra	@r0		
    28c8:	ac 26       	jz	$-678    	;abs 0x2622
    28ca:	00 00       	bra	@r0		
    28cc:	20 00 72 00 	bra	&0x00072	
    28d0:	00 00       	bra	@r0		
    28d2:	00 00       	bra	@r0		
    28d4:	c2 26       	jz	$-634    	;abs 0x265a
    28d6:	00 00       	bra	@r0		
    28d8:	20 00 74 00 	bra	&0x00074	
    28dc:	00 00       	bra	@r0		
    28de:	00 00       	bra	@r0		
    28e0:	d9 26       	jz	$-588    	;abs 0x2694
    28e2:	00 00       	bra	@r0		
    28e4:	20 00 76 00 	bra	&0x00076	
    28e8:	00 00       	bra	@r0		
    28ea:	00 00       	bra	@r0		
    28ec:	f0 26       	jz	$-542    	;abs 0x26ce
    28ee:	00 00       	bra	@r0		
    28f0:	20 00 93 00 	bra	&0x00093	
    28f4:	00 00       	bra	@r0		
    28f6:	00 00       	bra	@r0		
    28f8:	04 27       	jz	$-502    	;abs 0x2702
    28fa:	00 00       	bra	@r0		
    28fc:	20 00 95 00 	bra	&0x00095	
    2900:	00 00       	bra	@r0		
    2902:	00 00       	bra	@r0		
    2904:	18 27       	jz	$-462    	;abs 0x2736
    2906:	00 00       	bra	@r0		
    2908:	20 00 97 00 	bra	&0x00097	
    290c:	00 00       	bra	@r0		
    290e:	00 00       	bra	@r0		
    2910:	2c 27       	jz	$-422    	;abs 0x276a
    2912:	00 00       	bra	@r0		
    2914:	20 00 99 00 	bra	&0x00099	
    2918:	00 00       	bra	@r0		
    291a:	00 00       	bra	@r0		
    291c:	40 27       	jz	$-382    	;abs 0x279e
    291e:	00 00       	bra	@r0		
    2920:	20 00 9b 00 	bra	&0x0009b	
    2924:	00 00       	bra	@r0		
    2926:	00 00       	bra	@r0		
    2928:	53 27       	jz	$-344    	;abs 0x27d0
    292a:	00 00       	bra	@r0		
    292c:	20 00 9d 00 	bra	&0x0009d	
    2930:	00 00       	bra	@r0		
    2932:	00 00       	bra	@r0		
    2934:	66 27       	jz	$-306    	;abs 0x2802
    2936:	00 00       	bra	@r0		
    2938:	20 00 9f 00 	bra	&0x0009f	
    293c:	00 00       	bra	@r0		
    293e:	00 00       	bra	@r0		
    2940:	79 27       	jz	$-268    	;abs 0x2834
    2942:	00 00       	bra	@r0		
    2944:	20 00 a1 00 	bra	&0x000a1	
    2948:	00 00       	bra	@r0		
    294a:	00 00       	bra	@r0		
    294c:	8c 27       	jz	$-230    	;abs 0x2866
    294e:	00 00       	bra	@r0		
    2950:	20 00 0c 00 	bra	&0x0000c	
    2954:	00 00       	bra	@r0		
    2956:	00 00       	bra	@r0		
    2958:	a3 27       	jz	$-184    	;abs 0x28a0
    295a:	00 00       	bra	@r0		
    295c:	20 00 0d 00 	bra	&0x0000d	
    2960:	00 00       	bra	@r0		
    2962:	00 00       	bra	@r0		
    2964:	b5 27       	jz	$-148    	;abs 0x28d0
    2966:	00 00       	bra	@r0		
    2968:	20 00 0e 00 	bra	&0x0000e	
    296c:	00 00       	bra	@r0		
    296e:	00 00       	bra	@r0		
    2970:	c9 27       	jz	$-108    	;abs 0x2904
    2972:	00 00       	bra	@r0		
    2974:	20 00 14 00 	bra	&0x00014	
    2978:	00 00       	bra	@r0		
    297a:	00 00       	bra	@r0		
    297c:	ef 27       	jz	$-32     	;abs 0x295c
    297e:	00 00       	bra	@r0		
    2980:	20 00 15 00 	bra	&0x00015	
    2984:	00 00       	bra	@r0		
    2986:	00 00       	bra	@r0		
    2988:	02 28       	jnc	$+6      	;abs 0x298e
    298a:	00 00       	bra	@r0		
    298c:	20 00 16 00 	bra	&0x00016	
    2990:	00 00       	bra	@r0		
    2992:	00 00       	bra	@r0		
    2994:	13 28       	jnc	$+40     	;abs 0x29bc
    2996:	00 00       	bra	@r0		
    2998:	20 00 17 00 	bra	&0x00017	
    299c:	00 00       	bra	@r0		
    299e:	00 00       	bra	@r0		
    29a0:	25 28       	jnc	$+76     	;abs 0x29ec
    29a2:	00 00       	bra	@r0		
    29a4:	20 00 19 00 	bra	&0x00019	
    29a8:	00 00       	bra	@r0		
    29aa:	00 00       	bra	@r0		
    29ac:	36 28       	jnc	$+110    	;abs 0x2a1a
    29ae:	00 00       	bra	@r0		
    29b0:	20 00 1a 00 	bra	&0x0001a	
    29b4:	00 00       	bra	@r0		
    29b6:	00 00       	bra	@r0		
    29b8:	49 28       	jnc	$+148    	;abs 0x2a4c
    29ba:	00 00       	bra	@r0		
    29bc:	20 00 1b 00 	bra	&0x0001b	
    29c0:	00 00       	bra	@r0		
    29c2:	00 00       	bra	@r0		
    29c4:	5c 28       	jnc	$+186    	;abs 0x2a7e
    29c6:	00 00       	bra	@r0		
    29c8:	20 00 1e 00 	bra	&0x0001e	
    29cc:	00 00       	bra	@r0		
    29ce:	00 00       	bra	@r0		
    29d0:	70 28       	jnc	$+226    	;abs 0x2ab2
    29d2:	00 00       	bra	@r0		
    29d4:	20 00 1f 00 	bra	&0x0001f	
    29d8:	00 00       	bra	@r0		
    29da:	00 00       	bra	@r0		
    29dc:	85 28       	jnc	$+268    	;abs 0x2ae8
    29de:	00 00       	bra	@r0		
    29e0:	20 00 20 00 	bra	&0x00020	
    29e4:	00 00       	bra	@r0		
    29e6:	00 00       	bra	@r0		
    29e8:	bf 28       	jnc	$+384    	;abs 0x2b68
    29ea:	00 00       	bra	@r0		
    29ec:	20 00 21 00 	bra	&0x00021	
    29f0:	00 00       	bra	@r0		
    29f2:	00 00       	bra	@r0		
    29f4:	e7 28       	jnc	$+464    	;abs 0x2bc4
    29f6:	00 00       	bra	@r0		
    29f8:	20 00 24 00 	bra	&0x00024	
    29fc:	00 00       	bra	@r0		
    29fe:	00 00       	bra	@r0		
    2a00:	f7 28       	jnc	$+496    	;abs 0x2bf0
    2a02:	00 00       	bra	@r0		
    2a04:	20 00 25 00 	bra	&0x00025	
    2a08:	00 00       	bra	@r0		
    2a0a:	00 00       	bra	@r0		
    2a0c:	08 29       	jnc	$+530    	;abs 0x2c1e
    2a0e:	00 00       	bra	@r0		
    2a10:	20 00 28 00 	bra	&0x00028	
    2a14:	00 00       	bra	@r0		
    2a16:	00 00       	bra	@r0		
    2a18:	2e 29       	jnc	$+606    	;abs 0x2c76
    2a1a:	00 00       	bra	@r0		
    2a1c:	20 00 29 00 	bra	&0x00029	
    2a20:	00 00       	bra	@r0		
    2a22:	00 00       	bra	@r0		
    2a24:	3e 29       	jnc	$+638    	;abs 0x2ca2
    2a26:	00 00       	bra	@r0		
    2a28:	20 00 2a 00 	bra	&0x0002a	
	...
    2a34:	64 00 00 00 	mova	r0,	&0x40000
    2a38:	00 42       	br	r2		
    2a3a:	00 00       	bra	@r0		
    2a3c:	33 00       	.word	0x0033;	????	Illegal as address instr
    2a3e:	00 00       	bra	@r0		
    2a40:	64 00 00 00 	mova	r0,	&0x40000
    2a44:	00 42       	br	r2		
    2a46:	00 00       	bra	@r0		
    2a48:	52 29       	jnc	$+678    	;abs 0x2cee
    2a4a:	00 00       	bra	@r0		
    2a4c:	64 00 00 00 	mova	r0,	&0x40000
    2a50:	00 42       	br	r2		
    2a52:	00 00       	bra	@r0		
    2a54:	6a 00 00 00 	mova	r0,	&0xa0000
    2a58:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x02a5a
    2a5c:	00 00       	bra	@r0		
    2a5e:	00 00       	bra	@r0		
    2a60:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    2a64:	80 00 00 00 	bra	#0x00000	
    2a68:	00 00       	bra	@r0		
    2a6a:	00 00       	bra	@r0		
    2a6c:	99 00 00 00 	cmpa	#0x00000,r9	
    2a70:	80 00 00 00 	bra	#0x00000	
    2a74:	00 00       	bra	@r0		
    2a76:	00 00       	bra	@r0		
    2a78:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    2a7a:	00 00       	bra	@r0		
    2a7c:	80 00 00 00 	bra	#0x00000	
    2a80:	00 00       	bra	@r0		
    2a82:	00 00       	bra	@r0		
    2a84:	ec 00       	adda	r0,	r12	
    2a86:	00 00       	bra	@r0		
    2a88:	80 00 00 00 	bra	#0x00000	
    2a8c:	00 00       	bra	@r0		
    2a8e:	00 00       	bra	@r0		
    2a90:	24 01 00 00 	mova	&0x10000,r4	
    2a94:	80 00 00 00 	bra	#0x00000	
    2a98:	00 00       	bra	@r0		
    2a9a:	00 00       	bra	@r0		
    2a9c:	66 01 00 00 	mova	r1,	&0x60000
    2aa0:	80 00 00 00 	bra	#0x00000	
    2aa4:	00 00       	bra	@r0		
    2aa6:	00 00       	bra	@r0		
    2aa8:	b7 01 00 00 	suba	#0x10000,r7	
    2aac:	80 00 00 00 	bra	#0x00000	
    2ab0:	00 00       	bra	@r0		
    2ab2:	00 00       	bra	@r0		
    2ab4:	08 02       	mova	#4,	r8	;r2 As==10
    2ab6:	00 00       	bra	@r0		
    2ab8:	80 00 00 00 	bra	#0x00000	
    2abc:	00 00       	bra	@r0		
    2abe:	00 00       	bra	@r0		
    2ac0:	2e 02 00 00 	mova	&0x20000,r14	
    2ac4:	80 00 00 00 	bra	#0x00000	
    2ac8:	00 00       	bra	@r0		
    2aca:	00 00       	bra	@r0		
    2acc:	6c 02 00 00 	mova	r2,	&0xc0000
    2ad0:	80 00 00 00 	bra	#0x00000	
    2ad4:	00 00       	bra	@r0		
    2ad6:	00 00       	bra	@r0		
    2ad8:	96 02 00 00 	cmpa	#0x20000,r6	
    2adc:	80 00 00 00 	bra	#0x00000	
    2ae0:	00 00       	bra	@r0		
    2ae2:	00 00       	bra	@r0		
    2ae4:	bf 02 00 00 	suba	#0x20000,r15	
    2ae8:	80 00 00 00 	bra	#0x00000	
    2aec:	00 00       	bra	@r0		
    2aee:	00 00       	bra	@r0		
    2af0:	d9 02       	cmpa	r2,	r9	
    2af2:	00 00       	bra	@r0		
    2af4:	80 00 00 00 	bra	#0x00000	
    2af8:	00 00       	bra	@r0		
    2afa:	00 00       	bra	@r0		
    2afc:	f4 02       	suba	r2,	r4	
    2afe:	00 00       	bra	@r0		
    2b00:	80 00 00 00 	bra	#0x00000	
    2b04:	00 00       	bra	@r0		
    2b06:	00 00       	bra	@r0		
    2b08:	14 03       	mova	#-1,	r4	;r3 As==11
    2b0a:	00 00       	bra	@r0		
    2b0c:	80 00 00 00 	bra	#0x00000	
    2b10:	00 00       	bra	@r0		
    2b12:	00 00       	bra	@r0		
    2b14:	4d 03       	rrum.a	#1,	r13	
    2b16:	00 00       	bra	@r0		
    2b18:	80 00 00 00 	bra	#0x00000	
    2b1c:	00 00       	bra	@r0		
    2b1e:	00 00       	bra	@r0		
    2b20:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    2b24:	80 00 00 00 	bra	#0x00000	
    2b28:	00 00       	bra	@r0		
    2b2a:	00 00       	bra	@r0		
    2b2c:	8a 03 00 00 	mova	#0x30000,r10	
    2b30:	80 00 00 00 	bra	#0x00000	
    2b34:	00 00       	bra	@r0		
    2b36:	00 00       	bra	@r0		
    2b38:	ae 03 00 00 	adda	#0x30000,r14	
    2b3c:	80 00 00 00 	bra	#0x00000	
    2b40:	00 00       	bra	@r0		
    2b42:	00 00       	bra	@r0		
    2b44:	d7 03       	tsta	r7		
    2b46:	00 00       	bra	@r0		
    2b48:	80 00 00 00 	bra	#0x00000	
    2b4c:	00 00       	bra	@r0		
    2b4e:	00 00       	bra	@r0		
    2b50:	52 29       	jnc	$+678    	;abs 0x2df6
    2b52:	00 00       	bra	@r0		
    2b54:	82 00 00 00 	mova	#0x00000,r2	
    2b58:	66 11       	rra.b	@r6		
    2b5a:	04 00       	mova	@r0,	r4	
    2b5c:	ee 03       	incda	r14		
    2b5e:	00 00       	bra	@r0		
    2b60:	c2 00       	mova	r0,	r2	
    2b62:	00 00       	bra	@r0		
    2b64:	00 00       	bra	@r0		
    2b66:	00 00       	bra	@r0		
    2b68:	0f 04       	mova	@r4,	r15	
    2b6a:	00 00       	bra	@r0		
    2b6c:	c2 00       	mova	r0,	r2	
    2b6e:	00 00       	bra	@r0		
    2b70:	13 10       	rrc	#1		;r3 As==01
    2b72:	00 00       	bra	@r0		
    2b74:	83 04       	.word	0x0483;	????	Illegal as address instr
    2b76:	00 00       	bra	@r0		
    2b78:	c2 00       	mova	r0,	r2	
    2b7a:	00 00       	bra	@r0		
    2b7c:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
    2b80:	a8 04 00 00 	adda	#0x40000,r8	
    2b84:	c2 00       	mova	r0,	r2	
    2b86:	00 00       	bra	@r0		
    2b88:	00 00       	bra	@r0		
    2b8a:	00 00       	bra	@r0		
    2b8c:	cd 04       	mova	r4,	r13	
    2b8e:	00 00       	bra	@r0		
    2b90:	c2 00       	mova	r0,	r2	
    2b92:	00 00       	bra	@r0		
    2b94:	91 34       	jge	$+292    	;abs 0x2cb8
    2b96:	00 00       	bra	@r0		
    2b98:	92 08 00 00 	cmpa	#0x80000,r2	
    2b9c:	c2 00       	mova	r0,	r2	
    2b9e:	00 00       	bra	@r0		
    2ba0:	76 0d 00 00 	mova	r13,	0(r6)	;0x0000(r6)
    2ba4:	f8 08       	suba	r8,	r8	
    2ba6:	00 00       	bra	@r0		
    2ba8:	c2 00       	mova	r0,	r2	
    2baa:	00 00       	bra	@r0		
    2bac:	3c 1a       	.word	0x1a3c;	????	
    2bae:	00 00       	bra	@r0		
    2bb0:	0f 04       	mova	@r4,	r15	
    2bb2:	00 00       	bra	@r0		
    2bb4:	c2 00       	mova	r0,	r2	
    2bb6:	00 00       	bra	@r0		
    2bb8:	00 00       	bra	@r0		
    2bba:	00 00       	bra	@r0		
    2bbc:	cf 09       	mova	r9,	r15	
    2bbe:	00 00       	bra	@r0		
    2bc0:	c2 00       	mova	r0,	r2	
    2bc2:	00 00       	bra	@r0		
    2bc4:	00 00       	bra	@r0		
    2bc6:	00 00       	bra	@r0		
    2bc8:	ab 09 00 00 	adda	#0x90000,r11	
    2bcc:	c2 00       	mova	r0,	r2	
    2bce:	00 00       	bra	@r0		
    2bd0:	00 00       	bra	@r0		
    2bd2:	00 00       	bra	@r0		
    2bd4:	f6 09       	suba	r9,	r6	
    2bd6:	00 00       	bra	@r0		
    2bd8:	c2 00       	mova	r0,	r2	
    2bda:	00 00       	bra	@r0		
    2bdc:	00 00       	bra	@r0		
    2bde:	00 00       	bra	@r0		
    2be0:	1c 0a       	mova	@r10+,	r12	
    2be2:	00 00       	bra	@r0		
    2be4:	c2 00       	mova	r0,	r2	
    2be6:	00 00       	bra	@r0		
    2be8:	00 00       	bra	@r0		
    2bea:	00 00       	bra	@r0		
    2bec:	43 0a       	rlam.a	#3,	#0	;r3 As==00
    2bee:	00 00       	bra	@r0		
    2bf0:	c2 00       	mova	r0,	r2	
    2bf2:	00 00       	bra	@r0		
    2bf4:	c1 68 00 00 	addc.b	r8,	0(r1)	;0x0000(r1)
    2bf8:	41 0c       	rrcm.a	#4,	r1	
    2bfa:	00 00       	bra	@r0		
    2bfc:	c2 00       	mova	r0,	r2	
    2bfe:	00 00       	bra	@r0		
    2c00:	00 00       	bra	@r0		
    2c02:	00 00       	bra	@r0		
    2c04:	68 0c 00 00 	mova	r12,	&0x80000
    2c08:	c2 00       	mova	r0,	r2	
    2c0a:	00 00       	bra	@r0		
    2c0c:	3e 8a       	sub	@r10+,	r14	
    2c0e:	00 00       	bra	@r0		
    2c10:	eb 0e       	adda	r14,	r11	
    2c12:	00 00       	bra	@r0		
    2c14:	c2 00       	mova	r0,	r2	
    2c16:	00 00       	bra	@r0		
    2c18:	90 a7 00 00 	dadd	0(r7),	0x11de	;0x0000(r7), PC rel. 0x03dfc
    2c1c:	de 11 
    2c1e:	00 00       	bra	@r0		
    2c20:	c2 00       	mova	r0,	r2	
    2c22:	00 00       	bra	@r0		
    2c24:	00 00       	bra	@r0		
    2c26:	00 00       	bra	@r0		
    2c28:	0c 12       	push	r12		
    2c2a:	00 00       	bra	@r0		
    2c2c:	c2 00       	mova	r0,	r2	
    2c2e:	00 00       	bra	@r0		
    2c30:	00 00       	bra	@r0		
    2c32:	00 00       	bra	@r0		
    2c34:	34 12       	push	@r4+		
    2c36:	00 00       	bra	@r0		
    2c38:	c2 00       	mova	r0,	r2	
    2c3a:	00 00       	bra	@r0		
    2c3c:	00 00       	bra	@r0		
    2c3e:	00 00       	bra	@r0		
    2c40:	5c 12 00 00 	push.b	0(r12)		;0x0000(r12)
    2c44:	c2 00       	mova	r0,	r2	
    2c46:	00 00       	bra	@r0		
    2c48:	0c af       	dadd	r15,	r12	
    2c4a:	00 00       	bra	@r0		
    2c4c:	7b 15       	pushm	#8,	r11	
    2c4e:	00 00       	bra	@r0		
    2c50:	c2 00       	mova	r0,	r2	
    2c52:	00 00       	bra	@r0		
    2c54:	00 00       	bra	@r0		
    2c56:	00 00       	bra	@r0		
    2c58:	a3 15       	pushm	#11,	#0	;r3 As==00
    2c5a:	00 00       	bra	@r0		
    2c5c:	c2 00       	mova	r0,	r2	
    2c5e:	00 00       	bra	@r0		
    2c60:	00 00       	bra	@r0		
    2c62:	00 00       	bra	@r0		
    2c64:	c9 15       	pushm	#13,	r9	
    2c66:	00 00       	bra	@r0		
    2c68:	c2 00       	mova	r0,	r2	
    2c6a:	00 00       	bra	@r0		
    2c6c:	00 00       	bra	@r0		
    2c6e:	00 00       	bra	@r0		
    2c70:	03 16       	popm.a	#1,	#0	;r3 As==00
    2c72:	00 00       	bra	@r0		
    2c74:	c2 00       	mova	r0,	r2	
    2c76:	00 00       	bra	@r0		
    2c78:	00 00       	bra	@r0		
    2c7a:	00 00       	bra	@r0		
    2c7c:	f2 15       	pushm	#16,	r2	
    2c7e:	00 00       	bra	@r0		
    2c80:	c2 00       	mova	r0,	r2	
    2c82:	00 00       	bra	@r0		
    2c84:	00 00       	bra	@r0		
    2c86:	00 00       	bra	@r0		
    2c88:	5c 29       	jnc	$+698    	;abs 0x2f42
    2c8a:	00 00       	bra	@r0		
    2c8c:	24 00 b8 00 	mova	&0x000b8,r4	
    2c90:	80 44 00 00 	mov	r4,	0x0000	;PC rel. 0x02c94
    2c94:	6b 29       	jnc	$+728    	;abs 0x2f6c
    2c96:	00 00       	bra	@r0		
    2c98:	40 00       	rrcm.a	#1,	r0	
    2c9a:	b7 00 0f 00 	suba	#0x0000f,r7	
    2c9e:	00 00       	bra	@r0		
    2ca0:	00 00       	bra	@r0		
    2ca2:	00 00       	bra	@r0		
    2ca4:	44 00       	rrcm.a	#1,	r4	
    2ca6:	b8 00 00 00 	suba	#0x00000,r8	
    2caa:	00 00       	bra	@r0		
    2cac:	00 00       	bra	@r0		
    2cae:	00 00       	bra	@r0		
    2cb0:	44 00       	rrcm.a	#1,	r4	
    2cb2:	b9 00 00 00 	suba	#0x00000,r9	
    2cb6:	00 00       	bra	@r0		
    2cb8:	00 00       	bra	@r0		
    2cba:	00 00       	bra	@r0		
    2cbc:	44 00       	rrcm.a	#1,	r4	
    2cbe:	bb 00 04 00 	suba	#0x00004,r11	
    2cc2:	00 00       	bra	@r0		
    2cc4:	00 00       	bra	@r0		
    2cc6:	00 00       	bra	@r0		
    2cc8:	24 00 00 00 	mova	&0x00000,r4	
    2ccc:	08 00       	mova	@r0,	r8	
    2cce:	00 00       	bra	@r0		
    2cd0:	74 29       	jnc	$+746    	;abs 0x2fba
    2cd2:	00 00       	bra	@r0		
    2cd4:	24 00 be 00 	mova	&0x000be,r4	
    2cd8:	88 44 00 00 	mov	r4,	0(r8)	;0x0000(r8)
    2cdc:	89 29       	jnc	$+788    	;abs 0x2ff0
    2cde:	00 00       	bra	@r0		
    2ce0:	40 00       	rrcm.a	#1,	r0	
    2ce2:	bd 00 0d 00 	suba	#0x0000d,r13	
    2ce6:	00 00       	bra	@r0		
    2ce8:	a2 29       	jnc	$+838    	;abs 0x302e
    2cea:	00 00       	bra	@r0		
    2cec:	40 00       	rrcm.a	#1,	r0	
    2cee:	bd 00 0f 00 	suba	#0x0000f,r13	
    2cf2:	00 00       	bra	@r0		
    2cf4:	00 00       	bra	@r0		
    2cf6:	00 00       	bra	@r0		
    2cf8:	44 00       	rrcm.a	#1,	r4	
    2cfa:	be 00 00 00 	suba	#0x00000,r14	
    2cfe:	00 00       	bra	@r0		
    2d00:	00 00       	bra	@r0		
    2d02:	00 00       	bra	@r0		
    2d04:	44 00       	rrcm.a	#1,	r4	
    2d06:	bf 00 02 00 	suba	#0x00002,r15	
    2d0a:	00 00       	bra	@r0		
    2d0c:	00 00       	bra	@r0		
    2d0e:	00 00       	bra	@r0		
    2d10:	44 00       	rrcm.a	#1,	r4	
    2d12:	c0 00       	bra	r0		
    2d14:	06 00       	mova	@r0,	r6	
    2d16:	00 00       	bra	@r0		
    2d18:	00 00       	bra	@r0		
    2d1a:	00 00       	bra	@r0		
    2d1c:	44 00       	rrcm.a	#1,	r4	
    2d1e:	c1 00       	mova	r0,	r1	
    2d20:	0a 00       	mova	@r0,	r10	
    2d22:	00 00       	bra	@r0		
    2d24:	00 00       	bra	@r0		
    2d26:	00 00       	bra	@r0		
    2d28:	24 00 00 00 	mova	&0x00000,r4	
    2d2c:	0c 00       	mova	@r0,	r12	
    2d2e:	00 00       	bra	@r0		
    2d30:	bb 29       	jnc	$+888    	;abs 0x30a8
    2d32:	00 00       	bra	@r0		
    2d34:	24 00 ca 00 	mova	&0x000ca,r4	
    2d38:	94 44 00 00 	mov	0(r4),	10702(r4);0x0000(r4), 0x29ce(r4)
    2d3c:	ce 29 
    2d3e:	00 00       	bra	@r0		
    2d40:	40 00       	rrcm.a	#1,	r0	
    2d42:	c9 00       	mova	r0,	r9	
    2d44:	0b 00       	mova	@r0,	r11	
    2d46:	00 00       	bra	@r0		
    2d48:	db 29       	jnc	$+952    	;abs 0x3100
    2d4a:	00 00       	bra	@r0		
    2d4c:	40 00       	rrcm.a	#1,	r0	
    2d4e:	c9 00       	mova	r0,	r9	
    2d50:	0e 00       	mova	@r0,	r14	
    2d52:	00 00       	bra	@r0		
    2d54:	00 00       	bra	@r0		
    2d56:	00 00       	bra	@r0		
    2d58:	44 00       	rrcm.a	#1,	r4	
    2d5a:	ca 00       	mova	r0,	r10	
	...
    2d64:	44 00       	rrcm.a	#1,	r4	
    2d66:	cb 00       	mova	r0,	r11	
    2d68:	04 00       	mova	@r0,	r4	
    2d6a:	00 00       	bra	@r0		
    2d6c:	00 00       	bra	@r0		
    2d6e:	00 00       	bra	@r0		
    2d70:	44 00       	rrcm.a	#1,	r4	
    2d72:	ce 00       	mova	r0,	r14	
    2d74:	08 00       	mova	@r0,	r8	
    2d76:	00 00       	bra	@r0		
    2d78:	00 00       	bra	@r0		
    2d7a:	00 00       	bra	@r0		
    2d7c:	44 00       	rrcm.a	#1,	r4	
    2d7e:	cf 00       	mova	r0,	r15	
    2d80:	0c 00       	mova	@r0,	r12	
    2d82:	00 00       	bra	@r0		
    2d84:	00 00       	bra	@r0		
    2d86:	00 00       	bra	@r0		
    2d88:	44 00       	rrcm.a	#1,	r4	
    2d8a:	d5 00       	cmpa	r0,	r5	
    2d8c:	10 00       	bra	#0x00000	
    2d8e:	00 00       	bra	@r0		
    2d90:	00 00       	bra	@r0		
    2d92:	00 00       	bra	@r0		
    2d94:	44 00       	rrcm.a	#1,	r4	
    2d96:	d6 00       	cmpa	r0,	r6	
    2d98:	14 00       	mova	#0x00000,r4	
    2d9a:	00 00       	bra	@r0		
    2d9c:	00 00       	bra	@r0		
    2d9e:	00 00       	bra	@r0		
    2da0:	44 00       	rrcm.a	#1,	r4	
    2da2:	d7 00       	cmpa	r0,	r7	
    2da4:	18 00       	mova	#0x00000,r8	
    2da6:	00 00       	bra	@r0		
    2da8:	00 00       	bra	@r0		
    2daa:	00 00       	bra	@r0		
    2dac:	44 00       	rrcm.a	#1,	r4	
    2dae:	d9 00       	cmpa	r0,	r9	
    2db0:	1c 00       	mova	#0x00000,r12	
    2db2:	00 00       	bra	@r0		
    2db4:	00 00       	bra	@r0		
    2db6:	00 00       	bra	@r0		
    2db8:	44 00       	rrcm.a	#1,	r4	
    2dba:	da 00       	cmpa	r0,	r10	
    2dbc:	1e 00       	mova	#0x00000,r14	
    2dbe:	00 00       	bra	@r0		
    2dc0:	00 00       	bra	@r0		
    2dc2:	00 00       	bra	@r0		
    2dc4:	44 00       	rrcm.a	#1,	r4	
    2dc6:	db 00       	cmpa	r0,	r11	
    2dc8:	24 00 00 00 	mova	&0x00000,r4	
    2dcc:	00 00       	bra	@r0		
    2dce:	00 00       	bra	@r0		
    2dd0:	44 00       	rrcm.a	#1,	r4	
    2dd2:	e0 00       	adda	r0,	r0	
    2dd4:	28 00 00 00 	mova	&0x00000,r8	
    2dd8:	00 00       	bra	@r0		
    2dda:	00 00       	bra	@r0		
    2ddc:	44 00       	rrcm.a	#1,	r4	
    2dde:	e1 00       	adda	r0,	r1	
    2de0:	2c 00 00 00 	mova	&0x00000,r12	
    2de4:	00 00       	bra	@r0		
    2de6:	00 00       	bra	@r0		
    2de8:	44 00       	rrcm.a	#1,	r4	
    2dea:	e2 00       	adda	r0,	r2	
    2dec:	30 00 00 00 	bra	0x0000		;PC rel. 0x02dee
    2df0:	00 00       	bra	@r0		
    2df2:	00 00       	bra	@r0		
    2df4:	44 00       	rrcm.a	#1,	r4	
    2df6:	d9 00       	cmpa	r0,	r9	
    2df8:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x02dfa
    2dfc:	00 00       	bra	@r0		
    2dfe:	00 00       	bra	@r0		
    2e00:	44 00       	rrcm.a	#1,	r4	
    2e02:	e5 00       	adda	r0,	r5	
    2e04:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x02e06
    2e08:	00 00       	bra	@r0		
    2e0a:	00 00       	bra	@r0		
    2e0c:	44 00       	rrcm.a	#1,	r4	
    2e0e:	e8 00       	adda	r0,	r8	
    2e10:	44 00       	rrcm.a	#1,	r4	
    2e12:	00 00       	bra	@r0		
    2e14:	00 00       	bra	@r0		
    2e16:	00 00       	bra	@r0		
    2e18:	44 00       	rrcm.a	#1,	r4	
    2e1a:	e9 00       	adda	r0,	r9	
    2e1c:	48 00       	rrcm.a	#1,	r8	
    2e1e:	00 00       	bra	@r0		
    2e20:	00 00       	bra	@r0		
    2e22:	00 00       	bra	@r0		
    2e24:	44 00       	rrcm.a	#1,	r4	
    2e26:	de 00       	cmpa	r0,	r14	
    2e28:	4e 00       	rrcm.a	#1,	r14	
    2e2a:	00 00       	bra	@r0		
    2e2c:	00 00       	bra	@r0		
    2e2e:	00 00       	bra	@r0		
    2e30:	44 00       	rrcm.a	#1,	r4	
    2e32:	d2 00       	cmpa	r0,	r2	
    2e34:	54 00       	rrcm	#1,	r4	
    2e36:	00 00       	bra	@r0		
    2e38:	00 00       	bra	@r0		
    2e3a:	00 00       	bra	@r0		
    2e3c:	44 00       	rrcm.a	#1,	r4	
    2e3e:	ea 00       	adda	r0,	r10	
    2e40:	5a 00       	rrcm	#1,	r10	
    2e42:	00 00       	bra	@r0		
    2e44:	e7 29       	jnc	$+976    	;abs 0x3214
    2e46:	00 00       	bra	@r0		
    2e48:	40 00       	rrcm.a	#1,	r0	
    2e4a:	cb 00       	mova	r0,	r11	
    2e4c:	0c 00       	mova	@r0,	r12	
    2e4e:	00 00       	bra	@r0		
    2e50:	f4 29       	jnc	$+1002   	;abs 0x323a
    2e52:	00 00       	bra	@r0		
    2e54:	40 00       	rrcm.a	#1,	r0	
    2e56:	cc 00       	mova	r0,	r12	
    2e58:	0d 00       	mova	@r0,	r13	
    2e5a:	00 00       	bra	@r0		
    2e5c:	00 00       	bra	@r0		
    2e5e:	00 00       	bra	@r0		
    2e60:	c0 00       	bra	r0		
    2e62:	00 00       	bra	@r0		
    2e64:	04 00       	mova	@r0,	r4	
    2e66:	00 00       	bra	@r0		
    2e68:	00 00       	bra	@r0		
    2e6a:	00 00       	bra	@r0		
    2e6c:	e0 00       	adda	r0,	r0	
    2e6e:	00 00       	bra	@r0		
    2e70:	5a 00       	rrcm	#1,	r10	
    2e72:	00 00       	bra	@r0		
    2e74:	00 00       	bra	@r0		
    2e76:	00 00       	bra	@r0		
    2e78:	24 00 00 00 	mova	&0x00000,r4	
    2e7c:	5e 00       	rrcm	#1,	r14	
    2e7e:	00 00       	bra	@r0		
    2e80:	fe 29       	jnc	$+1022   	;abs 0x327e
    2e82:	00 00       	bra	@r0		
    2e84:	24 00 ed 00 	mova	&0x000ed,r4	
    2e88:	f2 44 00 00 	mov.b	@r4+,	&0x0000	
    2e8c:	0f 2a       	jnc	$-992    	;abs 0x2aac
    2e8e:	00 00       	bra	@r0		
    2e90:	40 00       	rrcm.a	#1,	r0	
    2e92:	ec 00       	adda	r0,	r12	
    2e94:	0b 00       	mova	@r0,	r11	
    2e96:	00 00       	bra	@r0		
    2e98:	00 00       	bra	@r0		
    2e9a:	00 00       	bra	@r0		
    2e9c:	44 00       	rrcm.a	#1,	r4	
    2e9e:	ed 00       	adda	r0,	r13	
	...
    2ea8:	44 00       	rrcm.a	#1,	r4	
    2eaa:	ee 00       	adda	r0,	r14	
    2eac:	04 00       	mova	@r0,	r4	
    2eae:	00 00       	bra	@r0		
    2eb0:	00 00       	bra	@r0		
    2eb2:	00 00       	bra	@r0		
    2eb4:	44 00       	rrcm.a	#1,	r4	
    2eb6:	f0 00       	suba	r0,	r0	
    2eb8:	0a 00       	mova	@r0,	r10	
    2eba:	00 00       	bra	@r0		
    2ebc:	00 00       	bra	@r0		
    2ebe:	00 00       	bra	@r0		
    2ec0:	44 00       	rrcm.a	#1,	r4	
    2ec2:	f1 00       	suba	r0,	r1	
    2ec4:	0e 00       	mova	@r0,	r14	
    2ec6:	00 00       	bra	@r0		
    2ec8:	00 00       	bra	@r0		
    2eca:	00 00       	bra	@r0		
    2ecc:	44 00       	rrcm.a	#1,	r4	
    2ece:	f2 00       	suba	r0,	r2	
    2ed0:	12 00       	mova	#0x00000,r2	
    2ed2:	00 00       	bra	@r0		
    2ed4:	00 00       	bra	@r0		
    2ed6:	00 00       	bra	@r0		
    2ed8:	44 00       	rrcm.a	#1,	r4	
    2eda:	f4 00       	suba	r0,	r4	
    2edc:	16 00       	mova	#0x00000,r6	
    2ede:	00 00       	bra	@r0		
    2ee0:	00 00       	bra	@r0		
    2ee2:	00 00       	bra	@r0		
    2ee4:	44 00       	rrcm.a	#1,	r4	
    2ee6:	f5 00       	suba	r0,	r5	
    2ee8:	1a 00       	mova	#0x00000,r10	
    2eea:	00 00       	bra	@r0		
    2eec:	00 00       	bra	@r0		
    2eee:	00 00       	bra	@r0		
    2ef0:	44 00       	rrcm.a	#1,	r4	
    2ef2:	f6 00       	suba	r0,	r6	
    2ef4:	22 00 00 00 	mova	&0x00000,r2	
    2ef8:	00 00       	bra	@r0		
    2efa:	00 00       	bra	@r0		
    2efc:	44 00       	rrcm.a	#1,	r4	
    2efe:	f7 00       	suba	r0,	r7	
    2f00:	26 00 00 00 	mova	&0x00000,r6	
    2f04:	00 00       	bra	@r0		
    2f06:	00 00       	bra	@r0		
    2f08:	44 00       	rrcm.a	#1,	r4	
    2f0a:	fa 00       	suba	r0,	r10	
    2f0c:	2e 00 00 00 	mova	&0x00000,r14	
    2f10:	00 00       	bra	@r0		
    2f12:	00 00       	bra	@r0		
    2f14:	44 00       	rrcm.a	#1,	r4	
    2f16:	fc 00       	suba	r0,	r12	
    2f18:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x02f1a
    2f1c:	00 00       	bra	@r0		
    2f1e:	00 00       	bra	@r0		
    2f20:	44 00       	rrcm.a	#1,	r4	
    2f22:	fe 00       	suba	r0,	r14	
    2f24:	44 00       	rrcm.a	#1,	r4	
    2f26:	00 00       	bra	@r0		
    2f28:	00 00       	bra	@r0		
    2f2a:	00 00       	bra	@r0		
    2f2c:	44 00       	rrcm.a	#1,	r4	
    2f2e:	ff 00       	suba	r0,	r15	
    2f30:	4e 00       	rrcm.a	#1,	r14	
    2f32:	00 00       	bra	@r0		
    2f34:	00 00       	bra	@r0		
    2f36:	00 00       	bra	@r0		
    2f38:	44 00       	rrcm.a	#1,	r4	
    2f3a:	00 01       	bra	@r1		
    2f3c:	58 00       	rrcm	#1,	r8	
    2f3e:	00 00       	bra	@r0		
    2f40:	00 00       	bra	@r0		
    2f42:	00 00       	bra	@r0		
    2f44:	44 00       	rrcm.a	#1,	r4	
    2f46:	03 01       	.word	0x0103;	????	Illegal as address instr
    2f48:	60 00 00 00 	mova	r0,	&0x00000
    2f4c:	00 00       	bra	@r0		
    2f4e:	00 00       	bra	@r0		
    2f50:	44 00       	rrcm.a	#1,	r4	
    2f52:	05 01       	mova	@r1,	r5	
    2f54:	6a 00 00 00 	mova	r0,	&0xa0000
    2f58:	00 00       	bra	@r0		
    2f5a:	00 00       	bra	@r0		
    2f5c:	44 00       	rrcm.a	#1,	r4	
    2f5e:	07 01       	mova	@r1,	r7	
    2f60:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
    2f64:	00 00       	bra	@r0		
    2f66:	00 00       	bra	@r0		
    2f68:	44 00       	rrcm.a	#1,	r4	
    2f6a:	08 01       	mova	@r1,	r8	
    2f6c:	7c 00 00 00 	mova	r0,	0(r12)	;0x0000(r12)
    2f70:	00 00       	bra	@r0		
    2f72:	00 00       	bra	@r0		
    2f74:	44 00       	rrcm.a	#1,	r4	
    2f76:	09 01       	mova	@r1,	r9	
    2f78:	84 00 00 00 	mova	#0x00000,r4	
    2f7c:	00 00       	bra	@r0		
    2f7e:	00 00       	bra	@r0		
    2f80:	44 00       	rrcm.a	#1,	r4	
    2f82:	0a 01       	mova	@r1,	r10	
    2f84:	8e 00 00 00 	mova	#0x00000,r14	
    2f88:	00 00       	bra	@r0		
    2f8a:	00 00       	bra	@r0		
    2f8c:	44 00       	rrcm.a	#1,	r4	
    2f8e:	0b 01       	mova	@r1,	r11	
    2f90:	98 00 00 00 	cmpa	#0x00000,r8	
    2f94:	00 00       	bra	@r0		
    2f96:	00 00       	bra	@r0		
    2f98:	44 00       	rrcm.a	#1,	r4	
    2f9a:	0c 01       	mova	@r1,	r12	
    2f9c:	a2 00 00 00 	adda	#0x00000,r2	
    2fa0:	00 00       	bra	@r0		
    2fa2:	00 00       	bra	@r0		
    2fa4:	44 00       	rrcm.a	#1,	r4	
    2fa6:	0d 01       	mova	@r1,	r13	
    2fa8:	ac 00 00 00 	adda	#0x00000,r12	
    2fac:	00 00       	bra	@r0		
    2fae:	00 00       	bra	@r0		
    2fb0:	44 00       	rrcm.a	#1,	r4	
    2fb2:	0e 01       	mova	@r1,	r14	
    2fb4:	b6 00 00 00 	suba	#0x00000,r6	
    2fb8:	00 00       	bra	@r0		
    2fba:	00 00       	bra	@r0		
    2fbc:	44 00       	rrcm.a	#1,	r4	
    2fbe:	10 01       	reta			
    2fc0:	c0 00       	bra	r0		
    2fc2:	00 00       	bra	@r0		
    2fc4:	00 00       	bra	@r0		
    2fc6:	00 00       	bra	@r0		
    2fc8:	44 00       	rrcm.a	#1,	r4	
    2fca:	11 01       	mova	@r1+,	r1	
    2fcc:	c8 00       	mova	r0,	r8	
    2fce:	00 00       	bra	@r0		
    2fd0:	00 00       	bra	@r0		
    2fd2:	00 00       	bra	@r0		
    2fd4:	44 00       	rrcm.a	#1,	r4	
    2fd6:	12 01       	mova	@r1+,	r2	
    2fd8:	d0 00       	cmpa	r0,	r0	
    2fda:	00 00       	bra	@r0		
    2fdc:	00 00       	bra	@r0		
    2fde:	00 00       	bra	@r0		
    2fe0:	44 00       	rrcm.a	#1,	r4	
    2fe2:	13 01       	.word	0x0113;	????	Illegal as address instr
    2fe4:	da 00       	cmpa	r0,	r10	
    2fe6:	00 00       	bra	@r0		
    2fe8:	00 00       	bra	@r0		
    2fea:	00 00       	bra	@r0		
    2fec:	44 00       	rrcm.a	#1,	r4	
    2fee:	14 01       	mova	@r1+,	r4	
    2ff0:	e4 00       	adda	r0,	r4	
    2ff2:	00 00       	bra	@r0		
    2ff4:	00 00       	bra	@r0		
    2ff6:	00 00       	bra	@r0		
    2ff8:	44 00       	rrcm.a	#1,	r4	
    2ffa:	15 01       	mova	@r1+,	r5	
    2ffc:	ee 00       	adda	r0,	r14	
    2ffe:	00 00       	bra	@r0		
    3000:	00 00       	bra	@r0		
    3002:	00 00       	bra	@r0		
    3004:	44 00       	rrcm.a	#1,	r4	
    3006:	16 01       	mova	@r1+,	r6	
    3008:	f8 00       	suba	r0,	r8	
    300a:	00 00       	bra	@r0		
    300c:	00 00       	bra	@r0		
    300e:	00 00       	bra	@r0		
    3010:	44 00       	rrcm.a	#1,	r4	
    3012:	17 01       	mova	@r1+,	r7	
    3014:	02 01       	mova	@r1,	r2	
    3016:	00 00       	bra	@r0		
    3018:	00 00       	bra	@r0		
    301a:	00 00       	bra	@r0		
    301c:	44 00       	rrcm.a	#1,	r4	
    301e:	19 01       	mova	@r1+,	r9	
    3020:	0c 01       	mova	@r1,	r12	
    3022:	00 00       	bra	@r0		
    3024:	00 00       	bra	@r0		
    3026:	00 00       	bra	@r0		
    3028:	44 00       	rrcm.a	#1,	r4	
    302a:	1a 01       	mova	@r1+,	r10	
    302c:	14 01       	mova	@r1+,	r4	
    302e:	00 00       	bra	@r0		
    3030:	00 00       	bra	@r0		
    3032:	00 00       	bra	@r0		
    3034:	44 00       	rrcm.a	#1,	r4	
    3036:	1b 01       	mova	@r1+,	r11	
    3038:	1e 01       	mova	@r1+,	r14	
    303a:	00 00       	bra	@r0		
    303c:	00 00       	bra	@r0		
    303e:	00 00       	bra	@r0		
    3040:	44 00       	rrcm.a	#1,	r4	
    3042:	1c 01       	mova	@r1+,	r12	
    3044:	28 01 00 00 	mova	&0x10000,r8	
    3048:	00 00       	bra	@r0		
    304a:	00 00       	bra	@r0		
    304c:	44 00       	rrcm.a	#1,	r4	
    304e:	1f 01       	mova	@r1+,	r15	
    3050:	32 01 00 00 	mova	0(r1),	r2	;0x0000(r1)
    3054:	00 00       	bra	@r0		
    3056:	00 00       	bra	@r0		
    3058:	44 00       	rrcm.a	#1,	r4	
    305a:	21 01 3c 01 	mova	&0x1013c,r1	
    305e:	00 00       	bra	@r0		
    3060:	00 00       	bra	@r0		
    3062:	00 00       	bra	@r0		
    3064:	44 00       	rrcm.a	#1,	r4	
    3066:	24 01 50 01 	mova	&0x10150,r4	
    306a:	00 00       	bra	@r0		
    306c:	00 00       	bra	@r0		
    306e:	00 00       	bra	@r0		
    3070:	24 00 00 00 	mova	&0x00000,r4	
    3074:	54 01       	rram	#1,	r4	
    3076:	00 00       	bra	@r0		
    3078:	1b 2a       	jnc	$-968    	;abs 0x2cb0
    307a:	00 00       	bra	@r0		
    307c:	24 00 27 01 	mova	&0x00127,r4	
    3080:	46 46       	mov.b	r6,	r6	
    3082:	00 00       	bra	@r0		
    3084:	0f 2a       	jnc	$-992    	;abs 0x2ca4
    3086:	00 00       	bra	@r0		
    3088:	40 00       	rrcm.a	#1,	r0	
    308a:	26 01 0f 00 	mova	&0x1000f,r6	
    308e:	00 00       	bra	@r0		
    3090:	00 00       	bra	@r0		
    3092:	00 00       	bra	@r0		
    3094:	44 00       	rrcm.a	#1,	r4	
    3096:	27 01 00 00 	mova	&0x10000,r7	
    309a:	00 00       	bra	@r0		
    309c:	00 00       	bra	@r0		
    309e:	00 00       	bra	@r0		
    30a0:	44 00       	rrcm.a	#1,	r4	
    30a2:	28 01 00 00 	mova	&0x10000,r8	
    30a6:	00 00       	bra	@r0		
    30a8:	00 00       	bra	@r0		
    30aa:	00 00       	bra	@r0		
    30ac:	44 00       	rrcm.a	#1,	r4	
    30ae:	29 01 14 00 	mova	&0x10014,r9	
    30b2:	00 00       	bra	@r0		
    30b4:	00 00       	bra	@r0		
    30b6:	00 00       	bra	@r0		
    30b8:	24 00 00 00 	mova	&0x00000,r4	
    30bc:	16 00       	mova	#0x00000,r6	
    30be:	00 00       	bra	@r0		
    30c0:	2d 2a       	jnc	$-932    	;abs 0x2d1c
    30c2:	00 00       	bra	@r0		
    30c4:	24 00 2c 01 	mova	&0x0012c,r4	
    30c8:	5c 46 00 00 	mov.b	0(r6),	r12	;0x0000(r6)
    30cc:	44 2a       	jnc	$-886    	;abs 0x2d56
    30ce:	00 00       	bra	@r0		
    30d0:	40 00       	rrcm.a	#1,	r0	
    30d2:	2b 01 0f 00 	mova	&0x1000f,r11	
    30d6:	00 00       	bra	@r0		
    30d8:	51 2a       	jnc	$-860    	;abs 0x2d7c
    30da:	00 00       	bra	@r0		
    30dc:	40 00       	rrcm.a	#1,	r0	
    30de:	2b 01 0b 00 	mova	&0x1000b,r11	
    30e2:	00 00       	bra	@r0		
    30e4:	00 00       	bra	@r0		
    30e6:	00 00       	bra	@r0		
    30e8:	44 00       	rrcm.a	#1,	r4	
    30ea:	2c 01 00 00 	mova	&0x10000,r12	
    30ee:	00 00       	bra	@r0		
    30f0:	00 00       	bra	@r0		
    30f2:	00 00       	bra	@r0		
    30f4:	44 00       	rrcm.a	#1,	r4	
    30f6:	2d 01 04 00 	mova	&0x10004,r13	
    30fa:	00 00       	bra	@r0		
    30fc:	00 00       	bra	@r0		
    30fe:	00 00       	bra	@r0		
    3100:	44 00       	rrcm.a	#1,	r4	
    3102:	2e 01 0c 00 	mova	&0x1000c,r14	
    3106:	00 00       	bra	@r0		
    3108:	00 00       	bra	@r0		
    310a:	00 00       	bra	@r0		
    310c:	44 00       	rrcm.a	#1,	r4	
    310e:	2f 01 14 00 	mova	&0x10014,r15	
    3112:	00 00       	bra	@r0		
    3114:	00 00       	bra	@r0		
    3116:	00 00       	bra	@r0		
    3118:	24 00 00 00 	mova	&0x00000,r4	
    311c:	18 00       	mova	#0x00000,r8	
    311e:	00 00       	bra	@r0		
    3120:	5d 2a       	jnc	$-836    	;abs 0x2ddc
    3122:	00 00       	bra	@r0		
    3124:	24 00 32 01 	mova	&0x00132,r4	
    3128:	74 46       	mov.b	@r6+,	r4	
    312a:	00 00       	bra	@r0		
    312c:	44 2a       	jnc	$-886    	;abs 0x2db6
    312e:	00 00       	bra	@r0		
    3130:	40 00       	rrcm.a	#1,	r0	
    3132:	31 01 0f 00 	mova	15(r1),	r1	;0x000f(r1)
// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    3136:	00 00       	bra	@r0		
    3138:	74 2a       	jnc	$-790    	;abs 0x2e22
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    313a:	00 00       	bra	@r0		
    313c:	40 00       	rrcm.a	#1,	r0	
    313e:	31 01 0b 00 	mova	11(r1),	r1	;0x000b(r1)

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    3142:	00 00       	bra	@r0		

    lcd_clear(BLACK);
    3144:	81 2a       	jnc	$-764    	;abs 0x2e48
    3146:	00 00       	bra	@r0		
    3148:	40 00       	rrcm.a	#1,	r0	
    
    MenuOption = RADIO_RAW;
    314a:	31 01 0a 00 	mova	10(r1),	r1	;0x000a(r1)
    MenuStep = DISPLAY;
    314e:	00 00       	bra	@r0		
    3150:	00 00       	bra	@r0		
    MenuVisible = TRUE;     // inicializa mostrando o menu
    3152:	00 00       	bra	@r0		
    3154:	44 00       	rrcm.a	#1,	r4	
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(MotorArmed == TRUE){
    3156:	32 01 00 00 	mova	0(r1),	r2	;0x0000(r1)
    315a:	00 00       	bra	@r0		
                main_loop();
                ControlCounter = 0;
            }
        }
        
        if(SetupDone == TRUE){
    315c:	00 00       	bra	@r0		
    315e:	00 00       	bra	@r0		
    3160:	44 00       	rrcm.a	#1,	r4	
                process_rc();
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
    3162:	33 01       	.word	0x0133;	????	Illegal as address instr
    3164:	08 00       	mova	@r0,	r8	
    3166:	00 00       	bra	@r0		
                process_menu();
                MenuCounter = 0;   
            }
        }
        else{
            if(ChannelInput[CH6_CH] > 3500){
    3168:	00 00       	bra	@r0		
    316a:	00 00       	bra	@r0		
    316c:	44 00       	rrcm.a	#1,	r4	
    316e:	34 01 10 00 	mova	16(r1),	r4	;0x0010(r1)
                MenuVisible = TRUE;
    3172:	00 00       	bra	@r0		
                MotorArmed = FALSE;
    3174:	00 00       	bra	@r0		
    3176:	00 00       	bra	@r0		
    3178:	44 00       	rrcm.a	#1,	r4	
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
            if(MenuCounter >= MENU_PERIOD){
    317a:	35 01 18 00 	mova	24(r1),	r5	;0x0018(r1)
    317e:	00 00       	bra	@r0		
    3180:	00 00       	bra	@r0		
                process_menu();
    3182:	00 00       	bra	@r0		
    3184:	44 00       	rrcm.a	#1,	r4	
                MenuCounter = 0;   
    3186:	36 01 20 00 	mova	32(r1),	r6	;0x0020(r1)
    318a:	00 00       	bra	@r0		
                ControlCounter = 0;
            }
        }
        
        if(SetupDone == TRUE){
            if(RCCounter >= RC_PERIOD){
    318c:	00 00       	bra	@r0		
    318e:	00 00       	bra	@r0		
    3190:	24 00 00 00 	mova	&0x00000,r4	
                process_rc();
    3194:	26 00 00 00 	mova	&0x00000,r6	
                RCCounter = 0;
    3198:	8e 2a       	jnc	$-738    	;abs 0x2eb6
    319a:	00 00       	bra	@r0		
    319c:	24 00 39 01 	mova	&0x00139,r4	
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(MotorArmed == TRUE){
            if(ControlCounter >= CONTROL_PERIOD){
    31a0:	9a 46 00 00 	mov	0(r6),	10915(r10);0x0000(r6), 0x2aa3(r10)
    31a4:	a3 2a 
                main_loop();
    31a6:	00 00       	bra	@r0		
    31a8:	40 00       	rrcm.a	#1,	r0	
                ControlCounter = 0;
    31aa:	38 01 0a 00 	mova	10(r1),	r8	;0x000a(r1)
    31ae:	00 00       	bra	@r0		
                MenuVisible = TRUE;
                MotorArmed = FALSE;
            }
        }
    }
}
    31b0:	ad 2a       	jnc	$-676    	;abs 0x2f0c
    31b2:	00 00       	bra	@r0		
    31b4:	40 00       	rrcm.a	#1,	r0	
    31b6:	38 01 09 00 	mova	9(r1),	r8	;0x0009(r1)
    31ba:	00 00       	bra	@r0		
    31bc:	b7 2a       	jnc	$-656    	;abs 0x2f2c
    31be:	00 00       	bra	@r0		
    31c0:	40 00       	rrcm.a	#1,	r0	
    31c2:	38 01 08 00 	mova	8(r1),	r8	;0x0008(r1)
    31c6:	00 00       	bra	@r0		
    31c8:	c2 2a       	jnc	$-634    	;abs 0x2f4e
    31ca:	00 00       	bra	@r0		
    31cc:	40 00       	rrcm.a	#1,	r0	
    31ce:	38 01 07 00 	mova	7(r1),	r8	;0x0007(r1)
    31d2:	00 00       	bra	@r0		
    31d4:	cd 2a       	jnc	$-612    	;abs 0x2f70
    31d6:	00 00       	bra	@r0		
    31d8:	a0 00 38 01 	adda	#0x00138,r0	
	...
    31e4:	44 00       	rrcm.a	#1,	r4	
    31e6:	39 01 00 00 	mova	0(r1),	r9	;0x0000(r1)
    31ea:	00 00       	bra	@r0		
    31ec:	00 00       	bra	@r0		
    31ee:	00 00       	bra	@r0		
    31f0:	44 00       	rrcm.a	#1,	r4	
    31f2:	3c 01 1a 00 	mova	26(r1),	r12	;0x001a(r1)
    31f6:	00 00       	bra	@r0		
    31f8:	00 00       	bra	@r0		
    31fa:	00 00       	bra	@r0		
    31fc:	44 00       	rrcm.a	#1,	r4	
    31fe:	3d 01 2a 00 	mova	42(r1),	r13	;0x002a(r1)
    3202:	00 00       	bra	@r0		
    3204:	00 00       	bra	@r0		
    3206:	00 00       	bra	@r0		
    3208:	44 00       	rrcm.a	#1,	r4	
    320a:	3f 01 3c 00 	mova	60(r1),	r15	;0x003c(r1)
    320e:	00 00       	bra	@r0		
    3210:	00 00       	bra	@r0		
    3212:	00 00       	bra	@r0		
    3214:	44 00       	rrcm.a	#1,	r4	
    3216:	41 01       	rram.a	#1,	r1	
    3218:	48 00       	rrcm.a	#1,	r8	
    321a:	00 00       	bra	@r0		
    321c:	00 00       	bra	@r0		
    321e:	00 00       	bra	@r0		
    3220:	44 00       	rrcm.a	#1,	r4	
    3222:	42 01       	rram.a	#1,	r2	
    3224:	5c 00       	rrcm	#1,	r12	
    3226:	00 00       	bra	@r0		
    3228:	00 00       	bra	@r0		
    322a:	00 00       	bra	@r0		
    322c:	44 00       	rrcm.a	#1,	r4	
    322e:	44 01       	rram.a	#1,	r4	
    3230:	62 00 00 00 	mova	r0,	&0x20000
    3234:	00 00       	bra	@r0		
    3236:	00 00       	bra	@r0		
    3238:	44 00       	rrcm.a	#1,	r4	
    323a:	42 01       	rram.a	#1,	r2	
    323c:	6a 00 00 00 	mova	r0,	&0xa0000
    3240:	00 00       	bra	@r0		
    3242:	00 00       	bra	@r0		
    3244:	44 00       	rrcm.a	#1,	r4	
    3246:	47 01       	rram.a	#1,	r7	
    3248:	70 00 00 00 	mova	r0,	0x0000	;PC rel. 0x0324a
    324c:	00 00       	bra	@r0		
    324e:	00 00       	bra	@r0		
    3250:	44 00       	rrcm.a	#1,	r4	
    3252:	48 01       	rram.a	#1,	r8	
    3254:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
    3258:	00 00       	bra	@r0		
    325a:	00 00       	bra	@r0		
    325c:	44 00       	rrcm.a	#1,	r4	
    325e:	4a 01       	rram.a	#1,	r10	
    3260:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
    3264:	00 00       	bra	@r0		
    3266:	00 00       	bra	@r0		
    3268:	44 00       	rrcm.a	#1,	r4	
    326a:	4b 01       	rram.a	#1,	r11	
    326c:	86 00 00 00 	mova	#0x00000,r6	
    3270:	00 00       	bra	@r0		
    3272:	00 00       	bra	@r0		
    3274:	44 00       	rrcm.a	#1,	r4	
    3276:	4c 01       	rram.a	#1,	r12	
    3278:	94 00 00 00 	cmpa	#0x00000,r4	
    327c:	d9 2a       	jnc	$-588    	;abs 0x3030

void process_menu(void){
    switch(MenuStep){
    327e:	00 00       	bra	@r0		
    3280:	40 00       	rrcm.a	#1,	r0	
    3282:	38 01 0b 00 	mova	11(r1),	r8	;0x000b(r1)
    3286:	00 00       	bra	@r0		
    3288:	e5 2a       	jnc	$-564    	;abs 0x3054
    328a:	00 00       	bra	@r0		
    328c:	40 00       	rrcm.a	#1,	r0	
    328e:	3a 01 0a 00 	mova	10(r1),	r10	;0x000a(r1)
    3292:	00 00       	bra	@r0		
    3294:	f1 2a       	jnc	$-540    	;abs 0x3078
    3296:	00 00       	bra	@r0		
    3298:	40 00       	rrcm.a	#1,	r0	
    329a:	3a 01 09 00 	mova	9(r1),	r10	;0x0009(r1)
        case DISPLAY:
            lcd_goto(0,14);
    329e:	00 00       	bra	@r0		
    32a0:	00 00       	bra	@r0		
    32a2:	00 00       	bra	@r0		
    32a4:	c0 00       	bra	r0		
            printf("DISPLAY             ");
    32a6:	00 00       	bra	@r0		
    32a8:	1a 00       	mova	#0x00000,r10	
    32aa:	00 00       	bra	@r0		
    32ac:	00 00       	bra	@r0		
            
            lcd_clear(BLACK);
    32ae:	00 00       	bra	@r0		
    32b0:	e0 00       	adda	r0,	r0	
    32b2:	00 00       	bra	@r0		
            lcd_goto(0,0);
    32b4:	94 00 00 00 	cmpa	#0x00000,r4	
    32b8:	00 00       	bra	@r0		
    32ba:	00 00       	bra	@r0		
            printf("   MAIN MENU\n\n");
    32bc:	24 00 00 00 	mova	&0x00000,r4	
    32c0:	a0 00 00 00 	adda	#0x00000,r0	
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
    32c4:	fc 2a       	jnc	$-518    	;abs 0x30be
    32c6:	00 00       	bra	@r0		
    32c8:	24 00 4f 01 	mova	&0x0014f,r4	
            MenuStep = SELECT;
    32cc:	3a 47       	mov	@r7+,	r10	
    32ce:	00 00       	bra	@r0		
            break;
    32d0:	13 2b       	jnc	$-472    	;abs 0x30f8
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    32d2:	00 00       	bra	@r0		
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
            MenuStep = SELECT;
            break;
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
    32d4:	40 00       	rrcm.a	#1,	r0	
    32d6:	4f 01       	rram.a	#1,	r15	
    32d8:	05 00       	mova	@r0,	r5	
    32da:	00 00       	bra	@r0		
    32dc:	1d 2b       	jnc	$-452    	;abs 0x3118
            printf("SELECT            ");
    32de:	00 00       	bra	@r0		
    32e0:	40 00       	rrcm.a	#1,	r0	
    32e2:	4f 01       	rram.a	#1,	r15	
    32e4:	06 00       	mova	@r0,	r6	
            
            lcd_goto(0,(int)MenuOption + 2);
    32e6:	00 00       	bra	@r0		
    32e8:	27 2b       	jnc	$-432    	;abs 0x3138
    32ea:	00 00       	bra	@r0		
    32ec:	40 00       	rrcm.a	#1,	r0	
    32ee:	4f 01       	rram.a	#1,	r15	
    32f0:	0f 00       	mova	@r0,	r15	
    32f2:	00 00       	bra	@r0		
            printf(">");
    32f4:	35 2b       	jnc	$-404    	;abs 0x3160
    32f6:	00 00       	bra	@r0		
    32f8:	40 00       	rrcm.a	#1,	r0	
    32fa:	4f 01       	rram.a	#1,	r15	
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    32fc:	08 00       	mova	@r0,	r8	
    32fe:	00 00       	bra	@r0		
    3300:	43 2b       	jnc	$-376    	;abs 0x3188
    3302:	00 00       	bra	@r0		
    3304:	a0 00 4f 01 	adda	#0x0014f,r0	
	...
                    MenuStep = WAIT_PITCH_UP;
                }
            }
            
            // select
            if(ChannelInput[ROLL_CH] > 3500){
    3310:	44 00       	rrcm.a	#1,	r4	
                MenuStep = WAIT_ROLL_LEFT;
    3312:	4f 01       	rram.a	#1,	r15	
	...
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    331c:	44 00       	rrcm.a	#1,	r4	
    331e:	50 01       	rram	#1,	r0	
    3320:	22 00 00 00 	mova	&0x00000,r2	
                    MenuStep = WAIT_PITCH_UP;
    3324:	00 00       	bra	@r0		
    3326:	00 00       	bra	@r0		
    3328:	44 00       	rrcm.a	#1,	r4	
    332a:	51 01       	rram	#1,	r1	
            }
            
            break;
        
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    332c:	2a 00 00 00 	mova	&0x00000,r10	
    3330:	00 00       	bra	@r0		
    3332:	00 00       	bra	@r0		
    3334:	44 00       	rrcm.a	#1,	r4	
            printf("WAIT PITCH DOWN    ");
    3336:	52 01       	rram	#1,	r2	
    3338:	2e 00 00 00 	mova	&0x00000,r14	
    333c:	00 00       	bra	@r0		
            
            if(ChannelInput[PITCH_CH] > 2500){
    333e:	00 00       	bra	@r0		
    3340:	44 00       	rrcm.a	#1,	r4	
    3342:	53 01       	rram	#1,	#0	;r3 As==00
    3344:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x03346
                lcd_goto(0,(int)MenuOption + 2);
    3348:	00 00       	bra	@r0		
    334a:	00 00       	bra	@r0		
    334c:	44 00       	rrcm.a	#1,	r4	
    334e:	54 01       	rram	#1,	r4	
    3350:	40 00       	rrcm.a	#1,	r0	
    3352:	00 00       	bra	@r0		
    3354:	00 00       	bra	@r0		
                printf(" ");
    3356:	00 00       	bra	@r0		
    3358:	44 00       	rrcm.a	#1,	r4	
    335a:	55 01       	rram	#1,	r5	
    335c:	42 00       	rrcm.a	#1,	r2	
                if((int)MenuOption > 0){
    335e:	00 00       	bra	@r0		
    3360:	00 00       	bra	@r0		
    3362:	00 00       	bra	@r0		
    3364:	44 00       	rrcm.a	#1,	r4	
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
    3366:	56 01       	rram	#1,	r6	
    3368:	5a 00       	rrcm	#1,	r10	
    336a:	00 00       	bra	@r0		
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    336c:	00 00       	bra	@r0		
    336e:	00 00       	bra	@r0		
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3370:	44 00       	rrcm.a	#1,	r4	
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    3372:	57 01       	rram	#1,	r7	
    3374:	72 00 00 00 	mova	r0,	&0x0000	
    3378:	00 00       	bra	@r0		
    337a:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");
    337c:	44 00       	rrcm.a	#1,	r4	
    337e:	58 01       	rram	#1,	r8	
    3380:	8a 00 00 00 	mova	#0x00000,r10	

            if(ChannelInput[PITCH_CH] < 3500){
    3384:	00 00       	bra	@r0		
    3386:	00 00       	bra	@r0		
    3388:	44 00       	rrcm.a	#1,	r4	
    338a:	59 01       	rram	#1,	r9	
    338c:	a2 00 00 00 	adda	#0x00000,r2	
                lcd_goto(0,(int)MenuOption + 2);
    3390:	00 00       	bra	@r0		
    3392:	00 00       	bra	@r0		
    3394:	44 00       	rrcm.a	#1,	r4	
    3396:	5a 01       	rram	#1,	r10	
    3398:	a8 00 00 00 	adda	#0x00000,r8	
                printf(" ");
    339c:	00 00       	bra	@r0		
    339e:	00 00       	bra	@r0		
    33a0:	44 00       	rrcm.a	#1,	r4	
    33a2:	5b 01       	rram	#1,	r11	
                if((int)MenuOption < MENU_LENGHT){
    33a4:	ae 00 00 00 	adda	#0x00000,r14	
    33a8:	00 00       	bra	@r0		
    33aa:	00 00       	bra	@r0		
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    33ac:	44 00       	rrcm.a	#1,	r4	
    33ae:	5c 01       	rram	#1,	r12	
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    33b0:	b0 00 00 00 	suba	#0x00000,r0	
    33b4:	00 00       	bra	@r0		
    33b6:	00 00       	bra	@r0		
    33b8:	44 00       	rrcm.a	#1,	r4	
            printf("WAIT CH7 BACK    ");
    33ba:	5d 01       	rram	#1,	r13	
    33bc:	b4 00 00 00 	suba	#0x00000,r4	
    33c0:	00 00       	bra	@r0		
            
            if(ChannelInput[CH7_CH] < 2500){
    33c2:	00 00       	bra	@r0		
    33c4:	44 00       	rrcm.a	#1,	r4	
    33c6:	5f 01       	rram	#1,	r15	
    33c8:	da 00       	cmpa	r0,	r10	
    33ca:	00 00       	bra	@r0		
                MenuStep = DISPLAY;
    33cc:	00 00       	bra	@r0		
    33ce:	00 00       	bra	@r0		
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    33d0:	44 00       	rrcm.a	#1,	r4	
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    33d2:	60 01 dc 00 	mova	r1,	&0x000dc
    33d6:	00 00       	bra	@r0		
    33d8:	00 00       	bra	@r0		
    33da:	00 00       	bra	@r0		
            printf("WAIT ROLL LEFT    ");
    33dc:	44 00       	rrcm.a	#1,	r4	
    33de:	61 01 e0 00 	mova	r1,	&0x100e0
    33e2:	00 00       	bra	@r0		
            
            if(ChannelInput[ROLL_CH] < 3500){
    33e4:	00 00       	bra	@r0		
    33e6:	00 00       	bra	@r0		
    33e8:	44 00       	rrcm.a	#1,	r4	
    33ea:	62 01 ea 00 	mova	r1,	&0x200ea
                lcd_clear(BLACK);
    33ee:	00 00       	bra	@r0		
    33f0:	00 00       	bra	@r0		
    33f2:	00 00       	bra	@r0		
                lcd_goto(0,0);  
    33f4:	44 00       	rrcm.a	#1,	r4	
    33f6:	63 01 fe 00 	mova	r1,	&0x300fe
    33fa:	00 00       	bra	@r0		
                MenuStep = PROCESS_OPTION;
    33fc:	00 00       	bra	@r0		
    33fe:	00 00       	bra	@r0		
    3400:	44 00       	rrcm.a	#1,	r4	
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3402:	64 01 12 01 	mova	r1,	&0x40112
                MenuStep = DISPLAY;
            }
            break;
                    
        case PROCESS_OPTION:
            process_option();
    3406:	00 00       	bra	@r0		
    3408:	00 00       	bra	@r0		
    340a:	00 00       	bra	@r0		
    340c:	44 00       	rrcm.a	#1,	r4	
        case WAIT_ROLL_RIGHT:
            break;    
    }
}

void process_option(){
    340e:	65 01 22 01 	mova	r1,	&0x50122
    int i;
    switch (MenuOption){
    3412:	00 00       	bra	@r0		
    3414:	00 00       	bra	@r0		
    3416:	00 00       	bra	@r0		
    3418:	44 00       	rrcm.a	#1,	r4	
    341a:	66 01 32 01 	mova	r1,	&0x60132
    341e:	00 00       	bra	@r0		
    3420:	00 00       	bra	@r0		
    3422:	00 00       	bra	@r0		
    3424:	44 00       	rrcm.a	#1,	r4	
        case INITIAL_SETTINGS:
            // seta o flag initial setup
            break;          
    }
    
    if(ChannelInput[CH7_CH] > 3500){
    3426:	67 01 46 01 	mova	r1,	&0x70146
    342a:	00 00       	bra	@r0		
    342c:	00 00       	bra	@r0		
        MenuStep = WAIT_CH7_BACK;
    342e:	00 00       	bra	@r0		
    3430:	44 00       	rrcm.a	#1,	r4	
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    3432:	68 01 56 01 	mova	r1,	&0x80156
        lcd_clear(BLACK);
    3436:	00 00       	bra	@r0		
    3438:	00 00       	bra	@r0		
    343a:	00 00       	bra	@r0		
    343c:	44 00       	rrcm.a	#1,	r4	
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
    343e:	69 01 6a 01 	mova	r1,	&0x9016a
    3442:	00 00       	bra	@r0		
            break;
    3444:	00 00       	bra	@r0		

void process_option(){
    int i;
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
    3446:	00 00       	bra	@r0		
            break;
    3448:	44 00       	rrcm.a	#1,	r4	
    344a:	6b 01 82 01 	mova	r1,	&0xb0182
    344e:	00 00       	bra	@r0		
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
    3450:	50 2b       	jnc	$-350    	;abs 0x32f2
    3452:	00 00       	bra	@r0		
    3454:	40 00       	rrcm.a	#1,	r0	
            for(i = 5; i >= 0; i--){ // contagem regressiva
    3456:	4f 01       	rram.a	#1,	r15	
    3458:	09 00       	mova	@r0,	r9	
                lcd_goto(8,8);
    345a:	00 00       	bra	@r0		
    345c:	5d 2b       	jnc	$-324    	;abs 0x3318
    345e:	00 00       	bra	@r0		
    3460:	80 00 50 01 	bra	#0x00150	
                printf("%d", i);
    3464:	00 00       	bra	@r0		
    3466:	00 00       	bra	@r0		
    3468:	65 2b       	jnc	$-308    	;abs 0x3334
    346a:	00 00       	bra	@r0		
                delayms(1000);
    346c:	80 00 51 01 	bra	#0x00151	
    3470:	02 00       	mova	@r0,	r2	
    3472:	00 00       	bra	@r0		
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    3474:	71 2b       	jnc	$-284    	;abs 0x3358
    3476:	00 00       	bra	@r0		
    3478:	80 00 52 01 	bra	#0x00152	
    347c:	04 00       	mova	@r0,	r4	
                lcd_goto(8,8);
                printf("%d", i);
                delayms(1000);
            }
            MotorArmed = TRUE;
    347e:	00 00       	bra	@r0		
    3480:	7d 2b       	jnc	$-260    	;abs 0x337c
            MenuVisible = FALSE;
    3482:	00 00       	bra	@r0		
    3484:	40 00       	rrcm.a	#1,	r0	
            lcd_clear(BLACK);
    3486:	53 01       	rram	#1,	#0	;r3 As==00
    3488:	04 00       	mova	@r0,	r4	
    348a:	00 00       	bra	@r0		
            MenuStep = DISPLAY;
    348c:	86 2b       	jnc	$-242    	;abs 0x339a
    348e:	00 00       	bra	@r0		
    3490:	40 00       	rrcm.a	#1,	r0	
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
    3492:	54 01       	rram	#1,	r4	
    3494:	07 00       	mova	@r0,	r7	
            break;
    3496:	00 00       	bra	@r0		
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    }
}
    3498:	00 00       	bra	@r0		
    349a:	00 00       	bra	@r0		
    349c:	c0 00       	bra	r0		
    349e:	00 00       	bra	@r0		
    34a0:	22 00 00 00 	mova	&0x00000,r2	

void draw_analog_graph(void){
    lcd_goto(4,4);
    34a4:	00 00       	bra	@r0		
    34a6:	00 00       	bra	@r0		
    34a8:	e0 00       	adda	r0,	r0	
    printf("FAZER");
    34aa:	00 00       	bra	@r0		
    34ac:	82 01 00 00 	mova	#0x10000,r2	
    34b0:	00 00       	bra	@r0		
    34b2:	00 00       	bra	@r0		
}
    34b4:	24 00 00 00 	mova	&0x00000,r4	
    34b8:	98 01 00 00 	cmpa	#0x10000,r8	
    34bc:	8f 2b       	jnc	$-224    	;abs 0x33dc
    34be:	00 00       	bra	@r0		
    34c0:	24 00 6d 01 	mova	&0x0016d,r4	
    34c4:	d2 48 00 00 	mov.b	0(r8),	&0x2ba4	;0x0000(r8)
    34c8:	a4 2b 
    34ca:	00 00       	bra	@r0		
    34cc:	40 00       	rrcm.a	#1,	r0	
    34ce:	6d 01 09 00 	mova	r1,	&0xd0009
    34d2:	00 00       	bra	@r0		
    34d4:	ae 2b       	jnc	$-162    	;abs 0x3432
    34d6:	00 00       	bra	@r0		
    34d8:	40 00       	rrcm.a	#1,	r0	

void process_analog_menu(void){
    switch(MenuAnalog){
    34da:	6d 01 0a 00 	mova	r1,	&0xd000a
    34de:	00 00       	bra	@r0		
    34e0:	b8 2b       	jnc	$-142    	;abs 0x3452
    34e2:	00 00       	bra	@r0		
    34e4:	a0 00 6d 01 	adda	#0x0016d,r0	
    34e8:	00 00       	bra	@r0		
    34ea:	00 00       	bra	@r0		
    34ec:	c2 2b       	jnc	$-122    	;abs 0x3472
    34ee:	00 00       	bra	@r0		
    34f0:	40 00       	rrcm.a	#1,	r0	
    34f2:	6d 01 04 00 	mova	r1,	&0xd0004
    34f6:	00 00       	bra	@r0		
        case DISPLAY:
            lcd_goto(0,14);
    34f8:	cc 2b       	jnc	$-102    	;abs 0x3492
    34fa:	00 00       	bra	@r0		
    34fc:	a0 00 6d 01 	adda	#0x0016d,r0	
    3500:	00 00       	bra	@r0		
            printf("DISPLAY             ");
    3502:	00 00       	bra	@r0		
    3504:	43 2b       	jnc	$-376    	;abs 0x338c
    3506:	00 00       	bra	@r0		
    3508:	a0 00 6d 01 	adda	#0x0016d,r0	

            refresh_analog_menu();
    350c:	02 00       	mova	@r0,	r2	
            MenuAnalog = SELECT;
    350e:	00 00       	bra	@r0		
    3510:	00 00       	bra	@r0		
            break;
    3512:	00 00       	bra	@r0		
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3514:	44 00       	rrcm.a	#1,	r4	

            refresh_analog_menu();
            MenuAnalog = SELECT;
            break;
        case SELECT:
            lcd_goto(0,14);
    3516:	6d 01 00 00 	mova	r1,	&0xd0000
    351a:	00 00       	bra	@r0		
    351c:	00 00       	bra	@r0		
    351e:	00 00       	bra	@r0		
            printf("SELECT            ");
    3520:	44 00       	rrcm.a	#1,	r4	
    3522:	6e 01 2a 00 	mova	r1,	&0xe002a
    3526:	00 00       	bra	@r0		

            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    3528:	00 00       	bra	@r0		
    352a:	00 00       	bra	@r0		
    352c:	44 00       	rrcm.a	#1,	r4	
    352e:	6f 01 2e 00 	mova	r1,	&0xf002e
                MenuAnalog = WAIT_ROLL_LEFT;
    3532:	00 00       	bra	@r0		
    3534:	00 00       	bra	@r0		
    3536:	00 00       	bra	@r0		
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
            
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    3538:	44 00       	rrcm.a	#1,	r4	
    353a:	71 01 32 00 	mova	r1,	50(r1)	;0x0032(r1)
    353e:	00 00       	bra	@r0		
                MenuAnalog = WAIT_PITCH_DOWN;
    3540:	00 00       	bra	@r0		
    3542:	00 00       	bra	@r0		
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3544:	44 00       	rrcm.a	#1,	r4	
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    3546:	76 01 36 00 	mova	r1,	54(r6)	;0x0036(r6)
    354a:	00 00       	bra	@r0		
    354c:	00 00       	bra	@r0		
                    MenuAnalog = WAIT_PITCH_UP;
    354e:	00 00       	bra	@r0		
    3550:	44 00       	rrcm.a	#1,	r4	
    3552:	78 01 3a 00 	mova	r1,	58(r8)	;0x003a(r8)
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3556:	00 00       	bra	@r0		
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
            }
            else{
                if(ChannelInput[ROLL_CH] < 2500){
    3558:	00 00       	bra	@r0		
    355a:	00 00       	bra	@r0		
    355c:	44 00       	rrcm.a	#1,	r4	
    355e:	7d 01 3e 00 	mova	r1,	62(r13)	;0x003e(r13)
                    MenuAnalog = WAIT_ROLL_RIGHT;
    3562:	00 00       	bra	@r0		
    3564:	00 00       	bra	@r0		
    3566:	00 00       	bra	@r0		
                }
            }
            
            break;
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    3568:	44 00       	rrcm.a	#1,	r4	
    356a:	7f 01 42 00 	mova	r1,	66(r15)	;0x0042(r15)
    356e:	00 00       	bra	@r0		
    3570:	00 00       	bra	@r0		
            printf("WAIT PITCH DOWN    ");
    3572:	00 00       	bra	@r0		
    3574:	44 00       	rrcm.a	#1,	r4	
    3576:	80 01 44 00 	bra	#0x10044	

            if(ChannelInput[PITCH_CH] > 2500){
    357a:	00 00       	bra	@r0		
    357c:	00 00       	bra	@r0		
    357e:	00 00       	bra	@r0		
    3580:	44 00       	rrcm.a	#1,	r4	
    3582:	81 01 46 00 	mova	#0x10046,r1	
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    3586:	00 00       	bra	@r0		
    3588:	00 00       	bra	@r0		
    358a:	00 00       	bra	@r0		
    358c:	44 00       	rrcm.a	#1,	r4	
    358e:	83 01       	.word	0x0183;	????	Illegal as address instr
    3590:	54 00       	rrcm	#1,	r4	
    3592:	00 00       	bra	@r0		
    3594:	00 00       	bra	@r0		
    3596:	00 00       	bra	@r0		
    3598:	44 00       	rrcm.a	#1,	r4	

                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
                        AnalogSelect--;
                    }
                    MenuAnalog = DISPLAY;
    359a:	84 01 5a 00 	mova	#0x1005a,r4	
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    359e:	00 00       	bra	@r0		
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    35a0:	00 00       	bra	@r0		
    35a2:	00 00       	bra	@r0		
    35a4:	44 00       	rrcm.a	#1,	r4	
    35a6:	85 01 62 00 	mova	#0x10062,r5	
            printf("WAIT PITCH UP    ");
    35aa:	00 00       	bra	@r0		
    35ac:	00 00       	bra	@r0		
    35ae:	00 00       	bra	@r0		
    35b0:	44 00       	rrcm.a	#1,	r4	

            if(ChannelInput[PITCH_CH] < 3500){
    35b2:	86 01 66 00 	mova	#0x10066,r6	
    35b6:	00 00       	bra	@r0		
    35b8:	00 00       	bra	@r0		
    35ba:	00 00       	bra	@r0		
    35bc:	44 00       	rrcm.a	#1,	r4	
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
    35be:	87 01 6a 00 	mova	#0x1006a,r7	
    35c2:	00 00       	bra	@r0		
    35c4:	00 00       	bra	@r0		
    35c6:	00 00       	bra	@r0		
                printf("WAIT ROLL RIGHT ");
    35c8:	44 00       	rrcm.a	#1,	r4	
    35ca:	88 01 6e 00 	mova	#0x1006e,r8	
    35ce:	00 00       	bra	@r0		

                if(ChannelInput[PITCH_CH] < 3500){
    35d0:	00 00       	bra	@r0		
    35d2:	00 00       	bra	@r0		
    35d4:	44 00       	rrcm.a	#1,	r4	
    35d6:	8a 01 70 00 	mova	#0x10070,r10	
                    if(AnalogSelect > 0){
    35da:	00 00       	bra	@r0		
    35dc:	00 00       	bra	@r0		
    35de:	00 00       	bra	@r0		
    35e0:	44 00       	rrcm.a	#1,	r4	
                        AnalogSelect--;
    35e2:	8b 01 74 00 	mova	#0x10074,r11	
    35e6:	00 00       	bra	@r0		
    35e8:	00 00       	bra	@r0		
                    MenuAnalog = DISPLAY;
                }
            break;
            
        case WAIT_ROLL_LEFT:
                lcd_goto(0,14);
    35ea:	00 00       	bra	@r0		
    35ec:	44 00       	rrcm.a	#1,	r4	
    35ee:	8c 01 76 00 	mova	#0x10076,r12	
    35f2:	00 00       	bra	@r0		
                printf("WAIT ROLL LEFT   ");
    35f4:	00 00       	bra	@r0		
    35f6:	00 00       	bra	@r0		
    35f8:	44 00       	rrcm.a	#1,	r4	
    35fa:	90 01 8c 00 	cmpa	#0x1008c,r0	
        
                if(ChannelInput[PITCH_CH] > 2500){
    35fe:	00 00       	bra	@r0		
    3600:	00 00       	bra	@r0		
    3602:	00 00       	bra	@r0		
    3604:	44 00       	rrcm.a	#1,	r4	
                   if(AnalogSelect < 7){
    3606:	91 01 94 00 	cmpa	#0x10094,r1	
    360a:	00 00       	bra	@r0		
    360c:	00 00       	bra	@r0		
    360e:	00 00       	bra	@r0		
                        AnalogSelect++;
    3610:	44 00       	rrcm.a	#1,	r4	
    3612:	92 01 98 00 	cmpa	#0x10098,r2	
                    }
                    MenuAnalog = DISPLAY;
    3616:	00 00       	bra	@r0		
    3618:	00 00       	bra	@r0		
    361a:	00 00       	bra	@r0		
    361c:	44 00       	rrcm.a	#1,	r4	
    361e:	93 01       	.word	0x0193;	????	Illegal as address instr
    3620:	9c 00 00 00 	cmpa	#0x00000,r12	
    3624:	00 00       	bra	@r0		
    3626:	00 00       	bra	@r0		
    3628:	44 00       	rrcm.a	#1,	r4	
    362a:	94 01 a0 00 	cmpa	#0x100a0,r4	
    362e:	00 00       	bra	@r0		
    3630:	00 00       	bra	@r0		
        case WAIT_CH7_BACK:
            break;
    }
}

void refresh_analog_menu(void){
    3632:	00 00       	bra	@r0		
    int i;
    lcd_goto(1,12);
    3634:	44 00       	rrcm.a	#1,	r4	
    3636:	96 01 a2 00 	cmpa	#0x100a2,r6	
    363a:	00 00       	bra	@r0		
    363c:	00 00       	bra	@r0		
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    363e:	00 00       	bra	@r0		
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
    3640:	44 00       	rrcm.a	#1,	r4	
    3642:	97 01 a6 00 	cmpa	#0x100a6,r7	
    3646:	00 00       	bra	@r0		
    3648:	00 00       	bra	@r0		
    364a:	00 00       	bra	@r0		
    364c:	44 00       	rrcm.a	#1,	r4	
    364e:	98 01 a8 00 	cmpa	#0x100a8,r8	
    3652:	00 00       	bra	@r0		
    3654:	00 00       	bra	@r0		
            color_back = LIME;          // a cor do fundo muda para azul
    3656:	00 00       	bra	@r0		
    3658:	44 00       	rrcm.a	#1,	r4	
    365a:	79 01 be 00 	mova	r1,	190(r9)	;0x00be(r9)
            color_fore = BLACK;
    365e:	00 00       	bra	@r0		
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    3660:	00 00       	bra	@r0		
    3662:	00 00       	bra	@r0		
    3664:	44 00       	rrcm.a	#1,	r4	
    3666:	7a 01 c2 00 	mova	r1,	194(r10);0x00c2(r10)
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
    366a:	00 00       	bra	@r0		
    366c:	00 00       	bra	@r0		
    366e:	00 00       	bra	@r0		
    3670:	44 00       	rrcm.a	#1,	r4	
                color_fore = BLACK;
            }
        }                               
        
        printf("%d",i);
    3672:	72 01 c8 00 	mova	r1,	&0x00c8	
    3676:	00 00       	bra	@r0		
    3678:	00 00       	bra	@r0		
    367a:	00 00       	bra	@r0		
        // ajusta as cores para o normal
        color_fore = LIME;
    367c:	44 00       	rrcm.a	#1,	r4	
    367e:	73 01       	.word	0x0173;	????	Illegal as address instr
    3680:	cc 00       	mova	r0,	r12	
        color_back = BLACK;
    3682:	00 00       	bra	@r0		
    3684:	00 00       	bra	@r0		
        printf(" ");
    3686:	00 00       	bra	@r0		
    3688:	44 00       	rrcm.a	#1,	r4	
    368a:	9b 01 d2 00 	cmpa	#0x100d2,r11	
}

void refresh_analog_menu(void){
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    368e:	00 00       	bra	@r0		
    3690:	d9 2b       	jnc	$-76     	;abs 0x3644
    3692:	00 00       	bra	@r0		
    3694:	40 00       	rrcm.a	#1,	r0	
    3696:	6d 01 05 00 	mova	r1,	&0xd0005
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
                color_fore = BLACK;
    369a:	00 00       	bra	@r0		
    369c:	50 2b       	jnc	$-350    	;abs 0x353e
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
    369e:	00 00       	bra	@r0		
    36a0:	40 00       	rrcm.a	#1,	r0	
    36a2:	6d 01 06 00 	mova	r1,	&0xd0006
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
            color_fore = BLACK;
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
    36a6:	00 00       	bra	@r0		
    36a8:	e6 2b       	jnc	$-50     	;abs 0x3676
            color_fore = LIME;
    36aa:	00 00       	bra	@r0		
    36ac:	40 00       	rrcm.a	#1,	r0	
    36ae:	6e 01 07 00 	mova	r1,	&0xe0007
        // ajusta as cores para o normal
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
    36b2:	00 00       	bra	@r0		
    36b4:	f0 2b       	jnc	$-30     	;abs 0x3696
    36b6:	00 00       	bra	@r0		
    36b8:	40 00       	rrcm.a	#1,	r0	
    36ba:	6f 01 08 00 	mova	r1,	&0xf0008
}
    36be:	00 00       	bra	@r0		

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    36c0:	fa 2b       	jnc	$-10     	;abs 0x36b6
    36c2:	00 00       	bra	@r0		
    RCCounter++;
    36c4:	80 00 70 01 	bra	#0x00170	
    MenuCounter++;
    36c8:	02 00       	mova	@r0,	r2	
    36ca:	00 00       	bra	@r0		
}
    36cc:	06 2c       	jc	$+14     	;abs 0x36da
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    36ce:	00 00       	bra	@r0		
    36d0:	80 00 70 01 	bra	#0x00170	
    
    DCOCTL = 0x77;      
    36d4:	04 00       	mova	@r0,	r4	
    36d6:	00 00       	bra	@r0		
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    BCSCTL1 = 0xcf;     
    36d8:	00 00       	bra	@r0		
    36da:	00 00       	bra	@r0		
    36dc:	c0 00       	bra	r0		
     * 
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
     * XCAP_0 -- ~1 pF
     */
    BCSCTL3 = 0xa0;
    36de:	00 00       	bra	@r0		
    36e0:	2a 00 00 00 	mova	&0x00000,r10	
}
    36e4:	12 2c       	jc	$+38     	;abs 0x370a

void p1_init(){
        /* Port 1 Output Register */
    P1OUT = PPM_P1MASK;
    36e6:	00 00       	bra	@r0		
    36e8:	40 00       	rrcm.a	#1,	r0	

    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;
    36ea:	84 01 0b 00 	mova	#0x1000b,r4	

    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida
    36ee:	00 00       	bra	@r0		
    36f0:	00 00       	bra	@r0		

    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;
    36f2:	00 00       	bra	@r0		
    36f4:	c0 00       	bra	r0		

    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;
    36f6:	00 00       	bra	@r0		
    36f8:	5a 00       	rrcm	#1,	r10	

}
    36fa:	00 00       	bra	@r0		
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    36fc:	00 00       	bra	@r0		
    36fe:	00 00       	bra	@r0		
    3700:	e0 00       	adda	r0,	r0	

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;
    3702:	00 00       	bra	@r0		
    3704:	8c 00 00 00 	mova	#0x00000,r12	
     * 
     * TASSEL_2 -- SMCLK
     * ID_3 -- Divider - /8
     * MC_1 -- Up Mode
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
    3708:	12 2c       	jc	$+38     	;abs 0x372e
    370a:	00 00       	bra	@r0		
    370c:	40 00       	rrcm.a	#1,	r0	
}
    370e:	90 01 0b 00 	cmpa	#0x1000b,r0	

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    3712:	00 00       	bra	@r0		
    3714:	00 00       	bra	@r0		
    3716:	00 00       	bra	@r0		
    3718:	c0 00       	bra	r0		
    371a:	00 00       	bra	@r0		
    371c:	8c 00 00 00 	mova	#0x00000,r12	
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    3720:	00 00       	bra	@r0		
    3722:	00 00       	bra	@r0		
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    3724:	e0 00       	adda	r0,	r0	
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    3726:	00 00       	bra	@r0		
    3728:	be 00 00 00 	suba	#0x00000,r14	
    372c:	00 00       	bra	@r0		
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    372e:	00 00       	bra	@r0		
    3730:	e0 00       	adda	r0,	r0	
    3732:	00 00       	bra	@r0		
    3734:	d2 00       	cmpa	r0,	r2	
            if(!(P1IES & PPM_ch_counter)){ // low to high
    3736:	00 00       	bra	@r0		
    3738:	00 00       	bra	@r0		
    373a:	00 00       	bra	@r0		
    373c:	24 00 00 00 	mova	&0x00000,r4	
                TimeUpEdge[channel_num] = PPM_aux;
    3740:	e8 00       	adda	r0,	r8	
    3742:	00 00       	bra	@r0		
    3744:	22 2c       	jc	$+70     	;abs 0x378a
    3746:	00 00       	bra	@r0		
    3748:	24 00 9e 01 	mova	&0x0019e,r4	
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    374c:	ba 49 00 00 	mov	@r9+,	0(r10)	;0x0000(r10)
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
    3750:	a3 2a       	jnc	$-696    	;abs 0x3498
    3752:	00 00       	bra	@r0		
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
    3754:	40 00       	rrcm.a	#1,	r0	
    3756:	9d 01 0a 00 	cmpa	#0x1000a,r13	
    375a:	00 00       	bra	@r0		
    375c:	ad 2a       	jnc	$-676    	;abs 0x34b8
    375e:	00 00       	bra	@r0		
    3760:	40 00       	rrcm.a	#1,	r0	
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    3762:	9d 01 09 00 	cmpa	#0x10009,r13	
    3766:	00 00       	bra	@r0		
    3768:	b7 2a       	jnc	$-656    	;abs 0x34d8
    376a:	00 00       	bra	@r0		
    376c:	40 00       	rrcm.a	#1,	r0	
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
    376e:	9d 01 08 00 	cmpa	#0x10008,r13	
    3772:	00 00       	bra	@r0		
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    3774:	c2 2a       	jnc	$-634    	;abs 0x34fa
    3776:	00 00       	bra	@r0		
    3778:	40 00       	rrcm.a	#1,	r0	
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    377a:	9d 01 07 00 	cmpa	#0x10007,r13	

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    377e:	00 00       	bra	@r0		
    3780:	36 2c       	jc	$+110    	;abs 0x37ee
    3782:	00 00       	bra	@r0		
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}
    3784:	a0 00 9d 01 	adda	#0x0019d,r0	
	...
    3790:	44 00       	rrcm.a	#1,	r4	
    3792:	9e 01 00 00 	cmpa	#0x10000,r14	
    3796:	00 00       	bra	@r0		
    3798:	00 00       	bra	@r0		
    379a:	00 00       	bra	@r0		
    379c:	44 00       	rrcm.a	#1,	r4	
    379e:	a1 01 1a 00 	adda	#0x1001a,r1	
    37a2:	00 00       	bra	@r0		
    37a4:	00 00       	bra	@r0		
    37a6:	00 00       	bra	@r0		
    37a8:	44 00       	rrcm.a	#1,	r4	
    37aa:	a2 01 2a 00 	adda	#0x1002a,r2	
    37ae:	00 00       	bra	@r0		
    37b0:	00 00       	bra	@r0		
    37b2:	00 00       	bra	@r0		
    37b4:	44 00       	rrcm.a	#1,	r4	
    37b6:	a4 01 3c 00 	adda	#0x1003c,r4	
    37ba:	00 00       	bra	@r0		
    37bc:	00 00       	bra	@r0		
    37be:	00 00       	bra	@r0		
    37c0:	44 00       	rrcm.a	#1,	r4	
    37c2:	a6 01 48 00 	adda	#0x10048,r6	

void calibrate_radio(void){
    37c6:	00 00       	bra	@r0		
    37c8:	00 00       	bra	@r0		
    37ca:	00 00       	bra	@r0		
    37cc:	44 00       	rrcm.a	#1,	r4	
    37ce:	a7 01 5c 00 	adda	#0x1005c,r7	
    37d2:	00 00       	bra	@r0		
    37d4:	00 00       	bra	@r0		
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    37d6:	00 00       	bra	@r0		
    37d8:	44 00       	rrcm.a	#1,	r4	
    37da:	a9 01 62 00 	adda	#0x10062,r9	
    37de:	00 00       	bra	@r0		
        return;
    }

    int i = 0, k;    
    37e0:	00 00       	bra	@r0		
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    37e2:	00 00       	bra	@r0		
    37e4:	44 00       	rrcm.a	#1,	r4	
    37e6:	a7 01 6e 00 	adda	#0x1006e,r7	
    37ea:	00 00       	bra	@r0		
    37ec:	00 00       	bra	@r0		
    37ee:	00 00       	bra	@r0		
    37f0:	44 00       	rrcm.a	#1,	r4	
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    37f2:	ac 01 74 00 	adda	#0x10074,r12	
    37f6:	00 00       	bra	@r0		
    37f8:	00 00       	bra	@r0		
    37fa:	00 00       	bra	@r0		
    37fc:	44 00       	rrcm.a	#1,	r4	
    37fe:	ad 01 78 00 	adda	#0x10078,r13	
    3802:	00 00       	bra	@r0		
    3804:	00 00       	bra	@r0		
    fourbytes ValorAux;        
    
    lcd_goto(2,5);
    3806:	00 00       	bra	@r0		
    3808:	44 00       	rrcm.a	#1,	r4	
    380a:	af 01 7c 00 	adda	#0x1007c,r15	
    380e:	00 00       	bra	@r0		
    color_fore = RED;
    3810:	00 00       	bra	@r0		
    3812:	00 00       	bra	@r0		
    3814:	44 00       	rrcm.a	#1,	r4	
    printf("MOVE STICKS\nALL DIRECTIONS");
    3816:	b0 01 8a 00 	suba	#0x1008a,r0	
    381a:	00 00       	bra	@r0		
    381c:	00 00       	bra	@r0		
    color_fore = LIME;
    381e:	00 00       	bra	@r0		
    3820:	44 00       	rrcm.a	#1,	r4	
    3822:	b1 01 98 00 	suba	#0x10098,r1	
    delayms(3000);
    3826:	00 00       	bra	@r0		
    3828:	47 2c       	jc	$+144    	;abs 0x38b8
    382a:	00 00       	bra	@r0		
    lcd_clear(BLACK);
    382c:	40 00       	rrcm.a	#1,	r0	
    382e:	9d 01 0b 00 	cmpa	#0x1000b,r13	

    for(i = 0; i < 8; i++){ // zera offset e slope
    3832:	00 00       	bra	@r0		
    3834:	e5 2a       	jnc	$-564    	;abs 0x3600
    3836:	00 00       	bra	@r0		
    3838:	40 00       	rrcm.a	#1,	r0	
    383a:	9f 01 0a 00 	cmpa	#0x1000a,r15	
        PPMOffset[i] = 0;
    383e:	00 00       	bra	@r0		
    3840:	f1 2a       	jnc	$-540    	;abs 0x3624
    3842:	00 00       	bra	@r0		
    3844:	40 00       	rrcm.a	#1,	r0	
    3846:	9f 01 09 00 	cmpa	#0x10009,r15	
    384a:	00 00       	bra	@r0		
    384c:	00 00       	bra	@r0		
        PPMSlope[i] = 1;
    384e:	00 00       	bra	@r0		
    3850:	c0 00       	bra	r0		
    3852:	00 00       	bra	@r0		
    3854:	1a 00       	mova	#0x00000,r10	
    3856:	00 00       	bra	@r0		
    3858:	00 00       	bra	@r0		
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
    385a:	00 00       	bra	@r0		
    385c:	e0 00       	adda	r0,	r0	
    385e:	00 00       	bra	@r0		
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    3860:	98 00 00 00 	cmpa	#0x00000,r8	
        PPMMin[i] = PPMValue[i];
    3864:	00 00       	bra	@r0		
    3866:	00 00       	bra	@r0		
    3868:	24 00 00 00 	mova	&0x00000,r4	
    386c:	a4 00 00 00 	adda	#0x00000,r4	
    3870:	50 2c       	jc	$+162    	;abs 0x3912
    3872:	00 00       	bra	@r0		
    3874:	24 00 b4 01 	mova	&0x001b4,r4	
    3878:	5e 4a 00 00 	mov.b	0(r10),	r14	;0x0000(r10)
    387c:	00 00       	bra	@r0		
    387e:	00 00       	bra	@r0		
    3880:	44 00       	rrcm.a	#1,	r4	
    3882:	b4 01 00 00 	suba	#0x10000,r4	
    3886:	00 00       	bra	@r0		
    3888:	00 00       	bra	@r0		
    388a:	00 00       	bra	@r0		
        PPMMax[i] = PPMMin[i];
    388c:	44 00       	rrcm.a	#1,	r4	
    388e:	b5 01 00 00 	suba	#0x10000,r5	
    3892:	00 00       	bra	@r0		
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    3894:	00 00       	bra	@r0		
    3896:	00 00       	bra	@r0		
    3898:	44 00       	rrcm.a	#1,	r4	
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    389a:	b6 01 0c 00 	suba	#0x1000c,r6	
        draw_rc_inputs(1);
    389e:	00 00       	bra	@r0		
    38a0:	00 00       	bra	@r0		
    38a2:	00 00       	bra	@r0		
        lcd_goto(0, 14);
    38a4:	44 00       	rrcm.a	#1,	r4	
    38a6:	b8 01 10 00 	suba	#0x10010,r8	
    38aa:	00 00       	bra	@r0		
    38ac:	00 00       	bra	@r0		
        printf("%d ", k);
    38ae:	00 00       	bra	@r0		
    38b0:	44 00       	rrcm.a	#1,	r4	
    38b2:	b9 01 14 00 	suba	#0x10014,r9	
    38b6:	00 00       	bra	@r0		
        delayms(1);
    38b8:	00 00       	bra	@r0		
    38ba:	00 00       	bra	@r0		
    38bc:	24 00 00 00 	mova	&0x00000,r4	
        for(i = 0; i < 8; i++){ // pega max min
    38c0:	16 00       	mova	#0x00000,r6	
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    38c2:	00 00       	bra	@r0		
    38c4:	64 2c       	jc	$+202    	;abs 0x398e
    38c6:	00 00       	bra	@r0		
    38c8:	24 00 bc 01 	mova	&0x001bc,r4	
    38cc:	74 4a       	mov.b	@r10+,	r4	
    38ce:	00 00       	bra	@r0		
    38d0:	a3 2a       	jnc	$-696    	;abs 0x3618
    38d2:	00 00       	bra	@r0		
    38d4:	40 00       	rrcm.a	#1,	r0	
    38d6:	bb 01 0f 00 	suba	#0x1000f,r11	
    38da:	00 00       	bra	@r0		
    38dc:	ad 2a       	jnc	$-676    	;abs 0x3638
    38de:	00 00       	bra	@r0		
    38e0:	40 00       	rrcm.a	#1,	r0	
    38e2:	bb 01 0e 00 	suba	#0x1000e,r11	
    38e6:	00 00       	bra	@r0		
    38e8:	00 00       	bra	@r0		
    38ea:	00 00       	bra	@r0		
    38ec:	44 00       	rrcm.a	#1,	r4	
    38ee:	bc 01 00 00 	suba	#0x10000,r12	
    38f2:	00 00       	bra	@r0		
    38f4:	00 00       	bra	@r0		
    38f6:	00 00       	bra	@r0		
    38f8:	44 00       	rrcm.a	#1,	r4	
    38fa:	bd 01 00 00 	suba	#0x10000,r13	
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
    38fe:	00 00       	bra	@r0		
    3900:	00 00       	bra	@r0		
    3902:	00 00       	bra	@r0		
    3904:	44 00       	rrcm.a	#1,	r4	
    3906:	be 01 08 00 	suba	#0x10008,r14	
    390a:	00 00       	bra	@r0		
    390c:	00 00       	bra	@r0		
    390e:	00 00       	bra	@r0		
    3910:	44 00       	rrcm.a	#1,	r4	
    3912:	c0 01       	bra	r1		
    3914:	10 00       	bra	#0x00000	
    3916:	00 00       	bra	@r0		
    3918:	00 00       	bra	@r0		
    391a:	00 00       	bra	@r0		
    391c:	44 00       	rrcm.a	#1,	r4	
    391e:	c1 01       	mova	r1,	r1	
    3920:	14 00       	mova	#0x00000,r4	
    3922:	00 00       	bra	@r0		
    3924:	00 00       	bra	@r0		
    3926:	00 00       	bra	@r0		
    3928:	44 00       	rrcm.a	#1,	r4	
    392a:	c2 01       	mova	r1,	r2	
    392c:	18 00       	mova	#0x00000,r8	
    392e:	00 00       	bra	@r0		
    3930:	00 00       	bra	@r0		
                PPMMin[i] = PPMValue[i];
    3932:	00 00       	bra	@r0		
    3934:	24 00 00 00 	mova	&0x00000,r4	
    3938:	1a 00       	mova	#0x00000,r10	
    393a:	00 00       	bra	@r0		
    393c:	75 2c       	jc	$+236    	;abs 0x3a28
    393e:	00 00       	bra	@r0		
    3940:	24 00 c5 01 	mova	&0x001c5,r4	
    3944:	8e 4a 00 00 	mov	r10,	0(r14)	;0x0000(r14)
    3948:	88 2c       	jc	$+274    	;abs 0x3a5a
    394a:	00 00       	bra	@r0		
    394c:	40 00       	rrcm.a	#1,	r0	
    394e:	c4 01       	mova	r1,	r4	
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
    3950:	0b 00       	mova	@r0,	r11	
    3952:	00 00       	bra	@r0		
    3954:	00 00       	bra	@r0		
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    3956:	00 00       	bra	@r0		
    3958:	44 00       	rrcm.a	#1,	r4	
    395a:	c5 01       	mova	r1,	r5	
	...
    }
    
    lcd_clear(BLACK);
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
    3964:	44 00       	rrcm.a	#1,	r4	
    3966:	ca 01       	mova	r1,	r10	
    3968:	0e 00       	mova	@r0,	r14	
    396a:	00 00       	bra	@r0		
    396c:	00 00       	bra	@r0		
    396e:	00 00       	bra	@r0		
    3970:	44 00       	rrcm.a	#1,	r4	
    3972:	cb 01       	mova	r1,	r11	
    3974:	1e 00       	mova	#0x00000,r14	
    3976:	00 00       	bra	@r0		
    3978:	00 00       	bra	@r0		
    397a:	00 00       	bra	@r0		
    397c:	44 00       	rrcm.a	#1,	r4	
    397e:	cc 01       	mova	r1,	r12	
    3980:	2c 00 00 00 	mova	&0x00000,r12	
    3984:	00 00       	bra	@r0		
    3986:	00 00       	bra	@r0		
    3988:	44 00       	rrcm.a	#1,	r4	
    398a:	cd 01       	mova	r1,	r13	
    398c:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x0398e
    3990:	00 00       	bra	@r0		
    3992:	00 00       	bra	@r0		
    3994:	44 00       	rrcm.a	#1,	r4	
    3996:	d0 01       	cmpa	r1,	r0	
    3998:	4a 00       	rrcm.a	#1,	r10	
    399a:	00 00       	bra	@r0		
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    399c:	00 00       	bra	@r0		
    399e:	00 00       	bra	@r0		
    39a0:	44 00       	rrcm.a	#1,	r4	
    39a2:	d1 01       	cmpa	r1,	r1	
    39a4:	4c 00       	rrcm.a	#1,	r12	
    39a6:	00 00       	bra	@r0		
    39a8:	00 00       	bra	@r0		
    39aa:	00 00       	bra	@r0		
    39ac:	44 00       	rrcm.a	#1,	r4	
    39ae:	d3 01       	.word	0x01d3;	????	Illegal as address instr
    39b0:	56 00       	rrcm	#1,	r6	
    39b2:	00 00       	bra	@r0		
    39b4:	00 00       	bra	@r0		
    39b6:	00 00       	bra	@r0		
    39b8:	44 00       	rrcm.a	#1,	r4	
        }
    }
    
    lcd_clear(BLACK);
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
    39ba:	d5 01       	cmpa	r1,	r5	
    39bc:	5c 00       	rrcm	#1,	r12	
    39be:	00 00       	bra	@r0		
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
    39c0:	00 00       	bra	@r0		
    39c2:	00 00       	bra	@r0		
    39c4:	44 00       	rrcm.a	#1,	r4	
        i2c_change_address(EEPROM_I2C_ADDR);
    39c6:	d6 01       	cmpa	r1,	r6	
    39c8:	68 00 00 00 	mova	r0,	&0x80000
    39cc:	00 00       	bra	@r0		
        
        // grava yaw slope 
        ValorAux.f = PPMSlope[YAW_CH];
    39ce:	00 00       	bra	@r0		
    39d0:	44 00       	rrcm.a	#1,	r4	
    39d2:	d8 01       	cmpa	r1,	r8	
    39d4:	6e 00 00 00 	mova	r0,	&0xe0000
    39d8:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    39da:	00 00       	bra	@r0		
    39dc:	44 00       	rrcm.a	#1,	r4	
    39de:	d9 01       	cmpa	r1,	r9	
    39e0:	72 00 00 00 	mova	r0,	&0x0000	
    39e4:	00 00       	bra	@r0		
    39e6:	00 00       	bra	@r0		
    39e8:	44 00       	rrcm.a	#1,	r4	
        
        delayms(100);
    39ea:	d6 01       	cmpa	r1,	r6	
    39ec:	80 00 00 00 	bra	#0x00000	
    39f0:	00 00       	bra	@r0		
        
        // grava throttle slope 
        ValorAux.f = PPMSlope[THROTTLE_CH];
    39f2:	00 00       	bra	@r0		
    39f4:	44 00       	rrcm.a	#1,	r4	
    39f6:	dc 01       	cmpa	r1,	r12	
    39f8:	92 00 00 00 	cmpa	#0x00000,r2	
    39fc:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    39fe:	00 00       	bra	@r0		
    3a00:	44 00       	rrcm.a	#1,	r4	
    3a02:	dd 01       	cmpa	r1,	r13	
    3a04:	9c 00 00 00 	cmpa	#0x00000,r12	
    3a08:	00 00       	bra	@r0		
    3a0a:	00 00       	bra	@r0		
    3a0c:	44 00       	rrcm.a	#1,	r4	
        
        delayms(100);
    3a0e:	d3 01       	.word	0x01d3;	????	Illegal as address instr
    3a10:	9e 00 00 00 	cmpa	#0x00000,r14	
    3a14:	00 00       	bra	@r0		
        
        // grava pitch slope 
        ValorAux.f = PPMSlope[PITCH_CH];
    3a16:	00 00       	bra	@r0		
    3a18:	44 00       	rrcm.a	#1,	r4	
    3a1a:	df 01       	cmpa	r1,	r15	
    3a1c:	a4 00 00 00 	adda	#0x00000,r4	
    3a20:	f4 29       	jnc	$+1002   	;abs 0x3e0a
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    3a22:	00 00       	bra	@r0		
    3a24:	40 00       	rrcm.a	#1,	r0	
    3a26:	c7 01       	mova	r1,	r7	
    3a28:	0a 00       	mova	@r0,	r10	
    3a2a:	00 00       	bra	@r0		
    3a2c:	92 2c       	jc	$+294    	;abs 0x3b52
    3a2e:	00 00       	bra	@r0		
    3a30:	40 00       	rrcm.a	#1,	r0	
        
        delayms(100);
    3a32:	c7 01       	mova	r1,	r7	
    3a34:	07 00       	mova	@r0,	r7	
    3a36:	00 00       	bra	@r0		
    3a38:	e7 29       	jnc	$+976    	;abs 0x3e08
        
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
    3a3a:	00 00       	bra	@r0		
    3a3c:	40 00       	rrcm.a	#1,	r0	
    3a3e:	c7 01       	mova	r1,	r7	
    3a40:	08 00       	mova	@r0,	r8	
    3a42:	00 00       	bra	@r0		
    3a44:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    3a46:	00 00       	bra	@r0		
    3a48:	c0 00       	bra	r0		
    3a4a:	00 00       	bra	@r0		
    3a4c:	0e 00       	mova	@r0,	r14	
    3a4e:	00 00       	bra	@r0		
    3a50:	00 00       	bra	@r0		
    3a52:	00 00       	bra	@r0		
    3a54:	e0 00       	adda	r0,	r0	
        
        delayms(100);
    3a56:	00 00       	bra	@r0		
    3a58:	a4 00 00 00 	adda	#0x00000,r4	
    3a5c:	00 00       	bra	@r0		
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
    3a5e:	00 00       	bra	@r0		
    3a60:	24 00 00 00 	mova	&0x00000,r4	
    3a64:	b2 00 00 00 	suba	#0x00000,r2	
    3a68:	9c 2c       	jc	$+314    	;abs 0x3ba2
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    3a6a:	00 00       	bra	@r0		
    3a6c:	24 00 e2 01 	mova	&0x001e2,r4	
    3a70:	40 4b       	br	r11		
    3a72:	00 00       	bra	@r0		
    3a74:	88 2c       	jc	$+274    	;abs 0x3b86
    3a76:	00 00       	bra	@r0		
    3a78:	40 00       	rrcm.a	#1,	r0	
        
        delayms(100);
    3a7a:	e1 01       	adda	r1,	r1	
    3a7c:	0b 00       	mova	@r0,	r11	
    3a7e:	00 00       	bra	@r0		
    3a80:	00 00       	bra	@r0		
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    3a82:	00 00       	bra	@r0		
    3a84:	44 00       	rrcm.a	#1,	r4	
    3a86:	e2 01       	adda	r1,	r2	
	...
        i2c_write16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    3a90:	44 00       	rrcm.a	#1,	r4	
    3a92:	e3 01       	.word	0x01e3;	????	Illegal as address instr
    3a94:	04 00       	mova	@r0,	r4	
    3a96:	00 00       	bra	@r0		
    3a98:	00 00       	bra	@r0		
    3a9a:	00 00       	bra	@r0		
    3a9c:	44 00       	rrcm.a	#1,	r4	
        
        delayms(100);
    3a9e:	e9 01       	adda	r1,	r9	
    3aa0:	12 00       	mova	#0x00000,r2	
    3aa2:	00 00       	bra	@r0		
    3aa4:	00 00       	bra	@r0		
        
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
    3aa6:	00 00       	bra	@r0		
    3aa8:	44 00       	rrcm.a	#1,	r4	
    3aaa:	ec 01       	adda	r1,	r12	
    3aac:	28 00 00 00 	mova	&0x00000,r8	
    3ab0:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    3ab2:	00 00       	bra	@r0		
    3ab4:	44 00       	rrcm.a	#1,	r4	
    3ab6:	ed 01       	adda	r1,	r13	
    3ab8:	2c 00 00 00 	mova	&0x00000,r12	
    3abc:	00 00       	bra	@r0		
    3abe:	00 00       	bra	@r0		
    3ac0:	44 00       	rrcm.a	#1,	r4	
        
        delayms(100);
    3ac2:	ee 01       	adda	r1,	r14	
    3ac4:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x03ac6
    3ac8:	00 00       	bra	@r0		
        
        // grava yaw offset 
        ValorAux.f = PPMOffset[YAW_CH];
    3aca:	00 00       	bra	@r0		
    3acc:	44 00       	rrcm.a	#1,	r4	
    3ace:	e7 01       	adda	r1,	r7	
    3ad0:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x03ad2
    3ad4:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3ad6:	00 00       	bra	@r0		
    3ad8:	44 00       	rrcm.a	#1,	r4	
    3ada:	e8 01       	adda	r1,	r8	
    3adc:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x03ade
    3ae0:	00 00       	bra	@r0		
    3ae2:	00 00       	bra	@r0		
    3ae4:	44 00       	rrcm.a	#1,	r4	
        
        delayms(100);
    3ae6:	e5 01       	adda	r1,	r5	
    3ae8:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x03aea
    3aec:	00 00       	bra	@r0		
        
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
    3aee:	00 00       	bra	@r0		
    3af0:	44 00       	rrcm.a	#1,	r4	
    3af2:	f1 01       	suba	r1,	r1	
    3af4:	42 00       	rrcm.a	#1,	r2	
    3af6:	00 00       	bra	@r0		
    3af8:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    3afa:	00 00       	bra	@r0		
    3afc:	24 00 00 00 	mova	&0x00000,r4	
    3b00:	46 00       	rrcm.a	#1,	r6	
    3b02:	00 00       	bra	@r0		
    3b04:	b0 2c       	jc	$+354    	;abs 0x3c66
    3b06:	00 00       	bra	@r0		
    3b08:	24 00 f3 01 	mova	&0x001f3,r4	
        
        delayms(100);
    3b0c:	86 4b 00 00 	mov	r11,	0(r6)	;0x0000(r6)
    3b10:	cc 2c       	jc	$+410    	;abs 0x3caa
        
        // grava pitch offset 
        ValorAux.f = PPMOffset[PITCH_CH];
    3b12:	00 00       	bra	@r0		
    3b14:	40 00       	rrcm.a	#1,	r0	
    3b16:	f3 01       	.word	0x01f3;	????	Illegal as address instr
    3b18:	06 00       	mova	@r0,	r6	
    3b1a:	00 00       	bra	@r0		
    3b1c:	d5 2c       	jc	$+428    	;abs 0x3cc8
        i2c_write16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    3b1e:	00 00       	bra	@r0		
    3b20:	40 00       	rrcm.a	#1,	r0	
    3b22:	f3 01       	.word	0x01f3;	????	Illegal as address instr
    3b24:	05 00       	mova	@r0,	r5	
    3b26:	00 00       	bra	@r0		
    3b28:	de 2c       	jc	$+446    	;abs 0x3ce6
    3b2a:	00 00       	bra	@r0		
    3b2c:	40 00       	rrcm.a	#1,	r0	
        
        delayms(100);
    3b2e:	f3 01       	.word	0x01f3;	????	Illegal as address instr
    3b30:	08 00       	mova	@r0,	r8	
    3b32:	00 00       	bra	@r0		
    3b34:	e8 2c       	jc	$+466    	;abs 0x3d06
        
        // grava roll offset 
        ValorAux.f = PPMOffset[ROLL_CH];
    3b36:	00 00       	bra	@r0		
    3b38:	40 00       	rrcm.a	#1,	r0	
    3b3a:	f3 01       	.word	0x01f3;	????	Illegal as address instr
    3b3c:	07 00       	mova	@r0,	r7	
    3b3e:	00 00       	bra	@r0		
    3b40:	cc 2b       	jnc	$-102    	;abs 0x3ada
        i2c_write16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    3b42:	00 00       	bra	@r0		
    3b44:	a0 00 f3 01 	adda	#0x001f3,r0	
    3b48:	00 00       	bra	@r0		
    3b4a:	00 00       	bra	@r0		
    3b4c:	f2 2c       	jc	$+486    	;abs 0x3d32
    3b4e:	00 00       	bra	@r0		
    3b50:	a0 00 f3 01 	adda	#0x001f3,r0	
        
        delayms(100);
    3b54:	02 00       	mova	@r0,	r2	
    3b56:	00 00       	bra	@r0		
    3b58:	07 2d       	jc	$+528    	;abs 0x3d68
        
        // grava ch5 offset 
        ValorAux.f = PPMOffset[CH5_CH];
    3b5a:	00 00       	bra	@r0		
    3b5c:	a0 00 f3 01 	adda	#0x001f3,r0	
    3b60:	04 00       	mova	@r0,	r4	
    3b62:	00 00       	bra	@r0		
    3b64:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    3b66:	00 00       	bra	@r0		
    3b68:	44 00       	rrcm.a	#1,	r4	
    3b6a:	f3 01       	.word	0x01f3;	????	Illegal as address instr
	...
    3b74:	44 00       	rrcm.a	#1,	r4	
        
        delayms(100);
    3b76:	f4 01       	suba	r1,	r4	
    3b78:	28 00 00 00 	mova	&0x00000,r8	
    3b7c:	00 00       	bra	@r0		
        
        // grava ch6 offset 
        ValorAux.f = PPMOffset[CH6_CH];
    3b7e:	00 00       	bra	@r0		
    3b80:	44 00       	rrcm.a	#1,	r4	
    3b82:	f5 01       	suba	r1,	r5	
    3b84:	48 00       	rrcm.a	#1,	r8	
    3b86:	00 00       	bra	@r0		
    3b88:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    3b8a:	00 00       	bra	@r0		
    3b8c:	44 00       	rrcm.a	#1,	r4	
    3b8e:	f6 01       	suba	r1,	r6	
    3b90:	56 00       	rrcm	#1,	r6	
    3b92:	00 00       	bra	@r0		
    3b94:	00 00       	bra	@r0		
    3b96:	00 00       	bra	@r0		
    3b98:	44 00       	rrcm.a	#1,	r4	
        
        delayms(100);
    3b9a:	f7 01       	suba	r1,	r7	
    3b9c:	6c 00 00 00 	mova	r0,	&0xc0000
    3ba0:	d9 2b       	jnc	$-76     	;abs 0x3b54
        
        // grava ch7 offset 
        ValorAux.f = PPMOffset[CH7_CH];
    3ba2:	00 00       	bra	@r0		
    3ba4:	40 00       	rrcm.a	#1,	r0	
    3ba6:	f3 01       	.word	0x01f3;	????	Illegal as address instr
    3ba8:	09 00       	mova	@r0,	r9	
    3baa:	00 00       	bra	@r0		
    3bac:	16 2d       	jc	$+558    	;abs 0x3dda
        i2c_write16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    3bae:	00 00       	bra	@r0		
    3bb0:	40 00       	rrcm.a	#1,	r0	
    3bb2:	f3 01       	.word	0x01f3;	????	Illegal as address instr
    3bb4:	04 00       	mova	@r0,	r4	
    3bb6:	00 00       	bra	@r0		
    3bb8:	2b 2d       	jc	$+600    	;abs 0x3e10
    3bba:	00 00       	bra	@r0		
    3bbc:	40 00       	rrcm.a	#1,	r0	
        
        delayms(100);
    3bbe:	f3 01       	.word	0x01f3;	????	Illegal as address instr
    3bc0:	0f 00       	mova	@r0,	r15	
    3bc2:	00 00       	bra	@r0		
    3bc4:	00 00       	bra	@r0		
        
        lcd_goto(2,2);
    3bc6:	00 00       	bra	@r0		
    3bc8:	24 00 00 00 	mova	&0x00000,r4	
    3bcc:	7e 00 00 00 	mova	r0,	0(r14)	;0x0000(r14)
        printf("Params saved.");
    3bd0:	3a 2d       	jc	$+630    	;abs 0x3e46
    3bd2:	00 00       	bra	@r0		
    3bd4:	20 00 12 00 	bra	&0x00012	
        delayms(2000);
    3bd8:	00 00       	bra	@r0		
    3bda:	00 00       	bra	@r0		
    3bdc:	46 2d       	jc	$+654    	;abs 0x3e6a
    3bde:	00 00       	bra	@r0		
    3be0:	20 00 14 00 	bra	&0x00014	
    3be4:	00 00       	bra	@r0		
    3be6:	00 00       	bra	@r0		
    3be8:	53 2d       	jc	$+680    	;abs 0x3e90
    3bea:	00 00       	bra	@r0		
    3bec:	20 00 16 00 	bra	&0x00016	
    3bf0:	00 00       	bra	@r0		
    3bf2:	00 00       	bra	@r0		
    3bf4:	5f 2d       	jc	$+704    	;abs 0x3eb4
    3bf6:	00 00       	bra	@r0		
    3bf8:	20 00 18 00 	bra	&0x00018	
    3bfc:	00 00       	bra	@r0		
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
    3bfe:	00 00       	bra	@r0		
    3c00:	6c 2d       	jc	$+730    	;abs 0x3eda
    3c02:	00 00       	bra	@r0		
    3c04:	20 00 1a 00 	bra	&0x0001a	
    3c08:	00 00       	bra	@r0		
    3c0a:	00 00       	bra	@r0		
    3c0c:	78 2d       	jc	$+754    	;abs 0x3efe
    3c0e:	00 00       	bra	@r0		
    3c10:	20 00 1c 00 	bra	&0x0001c	
    3c14:	00 00       	bra	@r0		
    3c16:	00 00       	bra	@r0		
    3c18:	86 2d       	jc	$+782    	;abs 0x3f26
    3c1a:	00 00       	bra	@r0		
    3c1c:	20 00 1e 00 	bra	&0x0001e	
    3c20:	00 00       	bra	@r0		
    3c22:	00 00       	bra	@r0		
    3c24:	94 2d       	jc	$+810    	;abs 0x3f4e
    3c26:	00 00       	bra	@r0		
    3c28:	20 00 20 00 	bra	&0x00020	
    3c2c:	00 00       	bra	@r0		
    3c2e:	00 00       	bra	@r0		
    3c30:	a3 2d       	jc	$+840    	;abs 0x3f78
    3c32:	00 00       	bra	@r0		
    3c34:	20 00 88 00 	bra	&0x00088	
    3c38:	00 00       	bra	@r0		
    3c3a:	00 00       	bra	@r0		
    3c3c:	b1 2d       	jc	$+868    	;abs 0x3fa0
    3c3e:	00 00       	bra	@r0		
    3c40:	20 00 8c 00 	bra	&0x0008c	
    3c44:	00 00       	bra	@r0		
        
        lcd_goto(2,2);
        printf("Params saved.");
        delayms(2000);
    }
}
    3c46:	00 00       	bra	@r0		
    3c48:	bf 2d       	jc	$+896    	;abs 0x3fc8
    3c4a:	00 00       	bra	@r0		
    3c4c:	20 00 90 00 	bra	&0x00090	
    3c50:	00 00       	bra	@r0		
    3c52:	00 00       	bra	@r0		
    3c54:	cd 2d       	jc	$+924    	;abs 0x3ff0
    3c56:	00 00       	bra	@r0		
    3c58:	20 00 94 00 	bra	&0x00094	

void process_rc(void){
    ChannelInput[THROTTLE_CH] = PPMValue[THROTTLE_CH] * PPMSlope[THROTTLE_CH] + PPMOffset[THROTTLE_CH];
    3c5c:	00 00       	bra	@r0		
    3c5e:	00 00       	bra	@r0		
    3c60:	db 2d       	jc	$+952    	;abs 0x4018
    3c62:	00 00       	bra	@r0		
    3c64:	20 00 98 00 	bra	&0x00098	
    3c68:	00 00       	bra	@r0		
    3c6a:	00 00       	bra	@r0		
    3c6c:	e9 2d       	jc	$+980    	;abs 0x4040
    3c6e:	00 00       	bra	@r0		
    3c70:	20 00 9c 00 	bra	&0x0009c	
    3c74:	00 00       	bra	@r0		
    3c76:	00 00       	bra	@r0		
    3c78:	a7 1a       	.word	0x1aa7;	????	
    3c7a:	00 00       	bra	@r0		
    3c7c:	20 00 7a 00 	bra	&0x0007a	
    3c80:	00 00       	bra	@r0		
    3c82:	00 00       	bra	@r0		
    3c84:	bb 1a       	.word	0x1abb;	????	
    3c86:	00 00       	bra	@r0		
    3c88:	20 00 7c 00 	bra	&0x0007c	
    3c8c:	00 00       	bra	@r0		
    3c8e:	00 00       	bra	@r0		
    3c90:	c8 1a       	.word	0x1ac8;	????	
    ChannelInput[YAW_CH] = PPMValue[YAW_CH] * PPMSlope[YAW_CH] + PPMOffset[YAW_CH];
    3c92:	00 00       	bra	@r0		
    3c94:	20 00 7e 00 	bra	&0x0007e	
    3c98:	00 00       	bra	@r0		
    3c9a:	00 00       	bra	@r0		
    3c9c:	d5 1a       	.word	0x1ad5;	????	
    3c9e:	00 00       	bra	@r0		
    3ca0:	20 00 80 00 	bra	&0x00080	
    3ca4:	00 00       	bra	@r0		
    3ca6:	00 00       	bra	@r0		
    3ca8:	e2 1a       	.word	0x1ae2;	????	
    3caa:	00 00       	bra	@r0		
    3cac:	20 00 82 00 	bra	&0x00082	
    3cb0:	00 00       	bra	@r0		
    3cb2:	00 00       	bra	@r0		
    3cb4:	ef 1a       	.word	0x1aef;	????	
    3cb6:	00 00       	bra	@r0		
    3cb8:	20 00 84 00 	bra	&0x00084	
    3cbc:	00 00       	bra	@r0		
    3cbe:	00 00       	bra	@r0		
    3cc0:	fb 1a       	.word	0x1afb;	????	
    3cc2:	00 00       	bra	@r0		
    3cc4:	20 00 86 00 	bra	&0x00086	
    ChannelInput[PITCH_CH] = PPMValue[PITCH_CH] * PPMSlope[PITCH_CH] + PPMOffset[PITCH_CH]; // pitch invertido
    3cc8:	00 00       	bra	@r0		
    3cca:	00 00       	bra	@r0		
    3ccc:	08 1b       	.word	0x1b08;	????	
    3cce:	00 00       	bra	@r0		
    3cd0:	20 00 89 00 	bra	&0x00089	
    3cd4:	00 00       	bra	@r0		
    3cd6:	00 00       	bra	@r0		
    3cd8:	15 1b       	.word	0x1b15;	????	
    3cda:	00 00       	bra	@r0		
    3cdc:	20 00 8f 00 	bra	&0x0008f	
    3ce0:	00 00       	bra	@r0		
    3ce2:	00 00       	bra	@r0		
    3ce4:	21 1b       	.word	0x1b21;	????	
    3ce6:	00 00       	bra	@r0		
    3ce8:	20 00 91 00 	bra	&0x00091	
    3cec:	00 00       	bra	@r0		
    3cee:	00 00       	bra	@r0		
    3cf0:	2e 1b       	.word	0x1b2e;	????	
    3cf2:	00 00       	bra	@r0		
    3cf4:	20 00 93 00 	bra	&0x00093	
    3cf8:	00 00       	bra	@r0		
    3cfa:	00 00       	bra	@r0		
    3cfc:	3b 1b       	.word	0x1b3b;	????	
    ChannelInput[ROLL_CH] = PPMValue[ROLL_CH] * PPMSlope[ROLL_CH] + PPMOffset[ROLL_CH];
    3cfe:	00 00       	bra	@r0		
    3d00:	20 00 95 00 	bra	&0x00095	
    3d04:	00 00       	bra	@r0		
    3d06:	00 00       	bra	@r0		
    3d08:	48 1b       	.word	0x1b48;	????	
    3d0a:	00 00       	bra	@r0		
    3d0c:	20 00 97 00 	bra	&0x00097	
    3d10:	00 00       	bra	@r0		
    3d12:	00 00       	bra	@r0		
    3d14:	55 1b       	.word	0x1b55;	????	
    3d16:	00 00       	bra	@r0		
    3d18:	20 00 99 00 	bra	&0x00099	
    3d1c:	00 00       	bra	@r0		
    3d1e:	00 00       	bra	@r0		
    3d20:	61 1b       	.word	0x1b61;	????	
    3d22:	00 00       	bra	@r0		
    3d24:	20 00 9b 00 	bra	&0x0009b	
    3d28:	00 00       	bra	@r0		
    3d2a:	00 00       	bra	@r0		
    3d2c:	6e 1b       	.word	0x1b6e;	????	
    3d2e:	00 00       	bra	@r0		
    3d30:	20 00 9e 00 	bra	&0x0009e	
    ChannelInput[CH5_CH] = PPMValue[CH5_CH] * PPMSlope[CH5_CH] + PPMOffset[CH5_CH];
    3d34:	00 00       	bra	@r0		
    3d36:	00 00       	bra	@r0		
    3d38:	7b 1b       	.word	0x1b7b;	????	
    3d3a:	00 00       	bra	@r0		
    3d3c:	20 00 a4 00 	bra	&0x000a4	
    3d40:	00 00       	bra	@r0		
    3d42:	00 00       	bra	@r0		
    3d44:	87 1b       	.word	0x1b87;	????	
    3d46:	00 00       	bra	@r0		
    3d48:	20 00 a6 00 	bra	&0x000a6	
    3d4c:	00 00       	bra	@r0		
    3d4e:	00 00       	bra	@r0		
    3d50:	94 1b       	.word	0x1b94;	????	
    3d52:	00 00       	bra	@r0		
    3d54:	20 00 a8 00 	bra	&0x000a8	
    3d58:	00 00       	bra	@r0		
    3d5a:	00 00       	bra	@r0		
    3d5c:	a1 1b       	.word	0x1ba1;	????	
    3d5e:	00 00       	bra	@r0		
    3d60:	20 00 aa 00 	bra	&0x000aa	
    3d64:	00 00       	bra	@r0		
    3d66:	00 00       	bra	@r0		
    3d68:	ae 1b       	.word	0x1bae;	????	
    ChannelInput[CH6_CH] = PPMValue[CH6_CH] * PPMSlope[CH6_CH] + PPMOffset[CH6_CH];
    3d6a:	00 00       	bra	@r0		
    3d6c:	20 00 ad 00 	bra	&0x000ad	
    3d70:	00 00       	bra	@r0		
    3d72:	00 00       	bra	@r0		
    3d74:	bb 1b       	.word	0x1bbb;	????	
    3d76:	00 00       	bra	@r0		
    3d78:	20 00 b3 00 	bra	&0x000b3	
    3d7c:	00 00       	bra	@r0		
    3d7e:	00 00       	bra	@r0		
    3d80:	c7 1b       	.word	0x1bc7;	????	
    3d82:	00 00       	bra	@r0		
    3d84:	20 00 b5 00 	bra	&0x000b5	
    3d88:	00 00       	bra	@r0		
    3d8a:	00 00       	bra	@r0		
    3d8c:	d4 1b       	.word	0x1bd4;	????	
    3d8e:	00 00       	bra	@r0		
    3d90:	20 00 b7 00 	bra	&0x000b7	
    3d94:	00 00       	bra	@r0		
    3d96:	00 00       	bra	@r0		
    3d98:	e1 1b       	.word	0x1be1;	????	
    3d9a:	00 00       	bra	@r0		
    3d9c:	20 00 b9 00 	bra	&0x000b9	
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
    3da0:	00 00       	bra	@r0		
    3da2:	00 00       	bra	@r0		
    3da4:	ee 1b       	.word	0x1bee;	????	
    3da6:	00 00       	bra	@r0		
    3da8:	20 00 bc 00 	bra	&0x000bc	
    3dac:	00 00       	bra	@r0		
    3dae:	00 00       	bra	@r0		
    3db0:	fb 1b       	.word	0x1bfb;	????	
    3db2:	00 00       	bra	@r0		
    3db4:	20 00 c2 00 	bra	&0x000c2	
    3db8:	00 00       	bra	@r0		
    3dba:	00 00       	bra	@r0		
    3dbc:	07 1c       	.word	0x1c07;	????	
    3dbe:	00 00       	bra	@r0		
    3dc0:	20 00 c4 00 	bra	&0x000c4	
    3dc4:	00 00       	bra	@r0		
    3dc6:	00 00       	bra	@r0		
    3dc8:	14 1c       	.word	0x1c14;	????	
    3dca:	00 00       	bra	@r0		
    3dcc:	20 00 c6 00 	bra	&0x000c6	
    3dd0:	00 00       	bra	@r0		
    3dd2:	00 00       	bra	@r0		
    3dd4:	21 1c       	.word	0x1c21;	????	
    3dd6:	00 00       	bra	@r0		
    3dd8:	20 00 c8 00 	bra	&0x000c8	
    3ddc:	00 00       	bra	@r0		
    3dde:	00 00       	bra	@r0		
    3de0:	2e 1c       	.word	0x1c2e;	????	
    3de2:	00 00       	bra	@r0		
    3de4:	20 00 cb 00 	bra	&0x000cb	
    3de8:	00 00       	bra	@r0		
    3dea:	00 00       	bra	@r0		
    3dec:	3b 1c       	.word	0x1c3b;	????	
    3dee:	00 00       	bra	@r0		
    3df0:	20 00 d1 00 	bra	&0x000d1	
    3df4:	00 00       	bra	@r0		
    3df6:	00 00       	bra	@r0		
    3df8:	47 1c       	.word	0x1c47;	????	
    3dfa:	00 00       	bra	@r0		
    3dfc:	20 00 d3 00 	bra	&0x000d3	
    3e00:	00 00       	bra	@r0		
    3e02:	00 00       	bra	@r0		
    3e04:	54 1c       	.word	0x1c54;	????	
    3e06:	00 00       	bra	@r0		
    3e08:	20 00 d5 00 	bra	&0x000d5	
    3e0c:	00 00       	bra	@r0		
    3e0e:	00 00       	bra	@r0		
    3e10:	61 1c       	.word	0x1c61;	????	
    3e12:	00 00       	bra	@r0		
    3e14:	20 00 d7 00 	bra	&0x000d7	
    3e18:	00 00       	bra	@r0		
    3e1a:	00 00       	bra	@r0		
    3e1c:	6e 1c       	.word	0x1c6e;	????	
    3e1e:	00 00       	bra	@r0		
    3e20:	20 00 da 00 	bra	&0x000da	
    3e24:	00 00       	bra	@r0		
    3e26:	00 00       	bra	@r0		
    3e28:	7b 1c       	.word	0x1c7b;	????	
}
    3e2a:	00 00       	bra	@r0		
    3e2c:	20 00 e0 00 	bra	&0x000e0	

void load_transmitter_values(void){
    fourbytes ValorAux;

    if(EEPROMFound == 1){
    3e30:	00 00       	bra	@r0		
    3e32:	00 00       	bra	@r0		
    3e34:	87 1c       	.word	0x1c87;	????	
        i2c_change_address(EEPROM_I2C_ADDR);    
    3e36:	00 00       	bra	@r0		
    3e38:	20 00 e2 00 	bra	&0x000e2	
    3e3c:	00 00       	bra	@r0		

        // load yaw slope e offset
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    3e3e:	00 00       	bra	@r0		
    3e40:	94 1c       	.word	0x1c94;	????	
    3e42:	00 00       	bra	@r0		
    3e44:	20 00 e4 00 	bra	&0x000e4	
    3e48:	00 00       	bra	@r0		
        PPMSlope[YAW_CH] = ValorAux.f;
    3e4a:	00 00       	bra	@r0		
    3e4c:	a1 1c       	.word	0x1ca1;	????	
    3e4e:	00 00       	bra	@r0		
    3e50:	20 00 e6 00 	bra	&0x000e6	
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3e54:	00 00       	bra	@r0		
    3e56:	00 00       	bra	@r0		
    3e58:	ae 1c       	.word	0x1cae;	????	
    3e5a:	00 00       	bra	@r0		
    3e5c:	20 00 e9 00 	bra	&0x000e9	
        PPMOffset[YAW_CH] = ValorAux.f;
    3e60:	00 00       	bra	@r0		
    3e62:	00 00       	bra	@r0		
    3e64:	bb 1c       	.word	0x1cbb;	????	
    3e66:	00 00       	bra	@r0		
    3e68:	20 00 ef 00 	bra	&0x000ef	
        
        // load throttle slope  e offset
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    3e6c:	00 00       	bra	@r0		
    3e6e:	00 00       	bra	@r0		
    3e70:	c7 1c       	.word	0x1cc7;	????	
    3e72:	00 00       	bra	@r0		
    3e74:	20 00 f1 00 	bra	&0x000f1	
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    3e78:	00 00       	bra	@r0		
    3e7a:	00 00       	bra	@r0		
    3e7c:	d4 1c       	.word	0x1cd4;	????	
    3e7e:	00 00       	bra	@r0		
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    3e80:	20 00 f3 00 	bra	&0x000f3	
    3e84:	00 00       	bra	@r0		
    3e86:	00 00       	bra	@r0		
    3e88:	e1 1c       	.word	0x1ce1;	????	
    3e8a:	00 00       	bra	@r0		
        PPMOffset[THROTTLE_CH] = ValorAux.f;
    3e8c:	20 00 f5 00 	bra	&0x000f5	
    3e90:	00 00       	bra	@r0		
    3e92:	00 00       	bra	@r0		
    3e94:	ee 1c       	.word	0x1cee;	????	
        
        // load pitch slope  e offset
        i2c_read16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    3e96:	00 00       	bra	@r0		
    3e98:	20 00 f8 00 	bra	&0x000f8	
    3e9c:	00 00       	bra	@r0		
    3e9e:	00 00       	bra	@r0		
    3ea0:	fb 1c       	.word	0x1cfb;	????	
        PPMSlope[PITCH_CH] = ValorAux.f;
    3ea2:	00 00       	bra	@r0		
    3ea4:	20 00 fc 00 	bra	&0x000fc	
    3ea8:	00 00       	bra	@r0		
    3eaa:	00 00       	bra	@r0		
        i2c_read16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    3eac:	0b 1d       	.word	0x1d0b;	????	
    3eae:	00 00       	bra	@r0		
    3eb0:	20 00 fe 00 	bra	&0x000fe	
    3eb4:	00 00       	bra	@r0		
    3eb6:	00 00       	bra	@r0		
        PPMOffset[PITCH_CH] = ValorAux.f;
    3eb8:	1b 1d       	.word	0x1d1b;	????	
    3eba:	00 00       	bra	@r0		
    3ebc:	20 00 00 01 	bra	&0x00100	
    3ec0:	00 00       	bra	@r0		
        
        // load roll slope  e offset
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    3ec2:	00 00       	bra	@r0		
    3ec4:	2a 1d       	.word	0x1d2a;	????	
    3ec6:	00 00       	bra	@r0		
    3ec8:	20 00 02 01 	bra	&0x00102	
    3ecc:	00 00       	bra	@r0		
        PPMSlope[ROLL_CH] = ValorAux.f;
    3ece:	00 00       	bra	@r0		
    3ed0:	39 1d       	.word	0x1d39;	????	
    3ed2:	00 00       	bra	@r0		
    3ed4:	20 00 04 01 	bra	&0x00104	
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    3ed8:	00 00       	bra	@r0		
    3eda:	00 00       	bra	@r0		
    3edc:	49 1d       	.word	0x1d49;	????	
    3ede:	00 00       	bra	@r0		
    3ee0:	20 00 06 01 	bra	&0x00106	
        PPMOffset[ROLL_CH] = ValorAux.f;
    3ee4:	00 00       	bra	@r0		
    3ee6:	00 00       	bra	@r0		
    3ee8:	59 1d       	.word	0x1d59;	????	
    3eea:	00 00       	bra	@r0		
    3eec:	20 00 08 01 	bra	&0x00108	
    
        // load ch5 slope  e offset
        i2c_read16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    3ef0:	00 00       	bra	@r0		
    3ef2:	00 00       	bra	@r0		
    3ef4:	6a 1d       	.word	0x1d6a;	????	
    3ef6:	00 00       	bra	@r0		
    3ef8:	20 00 0a 01 	bra	&0x0010a	
        PPMSlope[CH5_CH] = ValorAux.f;
    3efc:	00 00       	bra	@r0		
    3efe:	00 00       	bra	@r0		
    3f00:	7b 1d       	.word	0x1d7b;	????	
    3f02:	00 00       	bra	@r0		
        i2c_read16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    3f04:	20 00 0c 01 	bra	&0x0010c	
    3f08:	00 00       	bra	@r0		
    3f0a:	00 00       	bra	@r0		
    3f0c:	8c 1d       	.word	0x1d8c;	????	
    3f0e:	00 00       	bra	@r0		
        PPMOffset[CH5_CH] = ValorAux.f;
    3f10:	20 00 0e 01 	bra	&0x0010e	
    3f14:	00 00       	bra	@r0		
    3f16:	00 00       	bra	@r0		
    3f18:	9e 1d       	.word	0x1d9e;	????	
    
        // load ch6 slope  e offset
        i2c_read16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    3f1a:	00 00       	bra	@r0		
    3f1c:	20 00 10 01 	bra	&0x00110	
    3f20:	00 00       	bra	@r0		
    3f22:	00 00       	bra	@r0		
    3f24:	b0 1d       	.word	0x1db0;	????	
        PPMSlope[CH6_CH] = ValorAux.f;
    3f26:	00 00       	bra	@r0		
    3f28:	20 00 13 01 	bra	&0x00113	
    3f2c:	00 00       	bra	@r0		
    3f2e:	00 00       	bra	@r0		
        i2c_read16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    3f30:	c0 1d       	.word	0x1dc0;	????	
    3f32:	00 00       	bra	@r0		
    3f34:	20 00 15 01 	bra	&0x00115	
    3f38:	00 00       	bra	@r0		
    3f3a:	00 00       	bra	@r0		
        PPMOffset[CH6_CH] = ValorAux.f;
    3f3c:	d0 1d       	.word	0x1dd0;	????	
    3f3e:	00 00       	bra	@r0		
    3f40:	20 00 17 01 	bra	&0x00117	
    3f44:	00 00       	bra	@r0		
        
        // load ch7 slope  e offset
        i2c_read16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    3f46:	00 00       	bra	@r0		
    3f48:	df 1d       	.word	0x1ddf;	????	
    3f4a:	00 00       	bra	@r0		
    3f4c:	20 00 19 01 	bra	&0x00119	
    3f50:	00 00       	bra	@r0		
        PPMSlope[CH7_CH] = ValorAux.f;
    3f52:	00 00       	bra	@r0		
    3f54:	ee 1d       	.word	0x1dee;	????	
    3f56:	00 00       	bra	@r0		
    3f58:	20 00 1b 01 	bra	&0x0011b	
        i2c_read16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    3f5c:	00 00       	bra	@r0		
    3f5e:	00 00       	bra	@r0		
    3f60:	ff 1d       	.word	0x1dff;	????	
    3f62:	00 00       	bra	@r0		
    3f64:	20 00 1d 01 	bra	&0x0011d	
        PPMOffset[CH7_CH] = ValorAux.f;
    3f68:	00 00       	bra	@r0		
    3f6a:	00 00       	bra	@r0		
    3f6c:	0f 1e       	.word	0x1e0f;	????	
    3f6e:	00 00       	bra	@r0		
    3f70:	20 00 1f 01 	bra	&0x0011f	
    }
}
    3f74:	00 00       	bra	@r0		
    3f76:	00 00       	bra	@r0		
    3f78:	20 1e       	.word	0x1e20;	????	
    3f7a:	00 00       	bra	@r0		
    3f7c:	20 00 21 01 	bra	&0x00121	
    3f80:	00 00       	bra	@r0		
    3f82:	00 00       	bra	@r0		
    3f84:	f7 2d       	jc	$+1008   	;abs 0x4374
    3f86:	00 00       	bra	@r0		
    3f88:	20 00 23 01 	bra	&0x00123	
    3f8c:	00 00       	bra	@r0		
    3f8e:	00 00       	bra	@r0		
    3f90:	09 2e       	jc	$-1004   	;abs 0x3ba4
    3f92:	00 00       	bra	@r0		

void draw_rc_inputs(char raw){
    3f94:	20 00 25 01 	bra	&0x00125	
    3f98:	00 00       	bra	@r0		
    3f9a:	00 00       	bra	@r0		
    3f9c:	55 1e       	.word	0x1e55;	????	
    3f9e:	00 00       	bra	@r0		
    unsigned int i = 0, k = 0, h = 0;
    3fa0:	20 00 2c 01 	bra	&0x0012c	
    lcd_goto(0,0);
    3fa4:	00 00       	bra	@r0		
    3fa6:	00 00       	bra	@r0		
    3fa8:	65 1e       	.word	0x1e65;	????	
    printf("     RC inputs");
    3faa:	00 00       	bra	@r0		
    3fac:	20 00 2e 01 	bra	&0x0012e	
    3fb0:	00 00       	bra	@r0		
    lcd_goto(0,2);
    3fb2:	00 00       	bra	@r0		
    3fb4:	75 1e       	.word	0x1e75;	????	
    3fb6:	00 00       	bra	@r0		
    3fb8:	20 00 30 01 	bra	&0x00130	
    
    for(i = 0; i < 8; i++){
        if(!raw){
    3fbc:	00 00       	bra	@r0		
    3fbe:	00 00       	bra	@r0		
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
    3fc0:	84 1e       	.word	0x1e84;	????	
    3fc2:	00 00       	bra	@r0		
    3fc4:	20 00 32 01 	bra	&0x00132	
    3fc8:	00 00       	bra	@r0		
    3fca:	00 00       	bra	@r0		
    3fcc:	93 1e       	.word	0x1e93;	????	
    3fce:	00 00       	bra	@r0		
    3fd0:	20 00 34 01 	bra	&0x00134	
    3fd4:	00 00       	bra	@r0		
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
        }
        k = 21 + (8 * i); //posicao inicial em y
    3fd6:	00 00       	bra	@r0		
    3fd8:	a3 1e       	.word	0x1ea3;	????	
    3fda:	00 00       	bra	@r0		
    3fdc:	20 00 36 01 	bra	&0x00136	
        if(!raw){
    3fe0:	00 00       	bra	@r0		
    3fe2:	00 00       	bra	@r0		
            if(ChannelInput[i] > 4000){
    3fe4:	b3 1e       	.word	0x1eb3;	????	
    3fe6:	00 00       	bra	@r0		
    3fe8:	20 00 38 01 	bra	&0x00138	
                h=100;
            }
            else{
                if(ChannelInput[i] < 2001){
    3fec:	00 00       	bra	@r0		
    3fee:	00 00       	bra	@r0		
    3ff0:	c4 1e       	.word	0x1ec4;	????	
    3ff2:	00 00       	bra	@r0		
                    h = 0;
                }
                else{
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
    3ff4:	20 00 3a 01 	bra	&0x0013a	
    3ff8:	00 00       	bra	@r0		
    3ffa:	00 00       	bra	@r0		
    3ffc:	d5 1e       	.word	0x1ed5;	????	
    3ffe:	00 00       	bra	@r0		
    4000:	20 00 3c 01 	bra	&0x0013c	
    4004:	00 00       	bra	@r0		
    4006:	00 00       	bra	@r0		
    4008:	e6 1e       	.word	0x1ee6;	????	
    400a:	00 00       	bra	@r0		
    400c:	20 00 3e 01 	bra	&0x0013e	
    4010:	00 00       	bra	@r0		
    4012:	00 00       	bra	@r0		
    4014:	f8 1e       	.word	0x1ef8;	????	
            if(PPMValue[i] > 4000){
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
                    h = 0;
    4016:	00 00       	bra	@r0		
    4018:	20 00 40 01 	bra	&0x00140	
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
                h=100;
    401c:	00 00       	bra	@r0		
    401e:	00 00       	bra	@r0		
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
    4020:	0a 1f       	.word	0x1f0a;	????	
    4022:	00 00       	bra	@r0		
    4024:	20 00 43 01 	bra	&0x00143	
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
    4028:	00 00       	bra	@r0		
    402a:	00 00       	bra	@r0		
    402c:	1a 1f       	.word	0x1f1a;	????	
    402e:	00 00       	bra	@r0		
                    h = 0;
                }
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
    4030:	20 00 45 01 	bra	&0x00145	
    4034:	00 00       	bra	@r0		
    for(i = 0; i < 8; i++){
        if(!raw){
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
    4036:	00 00       	bra	@r0		
    4038:	2a 1f       	.word	0x1f2a;	????	
    403a:	00 00       	bra	@r0		
    403c:	20 00 47 01 	bra	&0x00147	
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    4040:	00 00       	bra	@r0		
    4042:	00 00       	bra	@r0		
    4044:	39 1f       	.word	0x1f39;	????	
    4046:	00 00       	bra	@r0		
    4048:	20 00 49 01 	bra	&0x00149	
    404c:	00 00       	bra	@r0		
    404e:	00 00       	bra	@r0		
    4050:	48 1f       	.word	0x1f48;	????	
    4052:	00 00       	bra	@r0		
    4054:	20 00 4b 01 	bra	&0x0014b	
    4058:	00 00       	bra	@r0		
    unsigned int i = 0, k = 0, h = 0;
    lcd_goto(0,0);
    printf("     RC inputs");
    lcd_goto(0,2);
    
    for(i = 0; i < 8; i++){
    405a:	00 00       	bra	@r0		
    405c:	59 1f       	.word	0x1f59;	????	
    405e:	00 00       	bra	@r0		
    4060:	20 00 4d 01 	bra	&0x0014d	
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}
    4064:	00 00       	bra	@r0		
    4066:	00 00       	bra	@r0		
    4068:	69 1f       	.word	0x1f69;	????	
    406a:	00 00       	bra	@r0		
    406c:	20 00 4f 01 	bra	&0x0014f	

int find_first(int startaddress){
    4070:	00 00       	bra	@r0		
    4072:	00 00       	bra	@r0		
    for(; startaddress < 255; startaddress++){
    4074:	7a 1f       	.word	0x1f7a;	????	
    4076:	00 00       	bra	@r0		
    4078:	20 00 51 01 	bra	&0x00151	
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
        }
    }   
    return 0;
    407c:	00 00       	bra	@r0		
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
    407e:	00 00       	bra	@r0		
    4080:	1b 2e       	jc	$-968    	;abs 0x3cb8
    4082:	00 00       	bra	@r0		
        if(!i2c_find_device()){
    4084:	20 00 53 01 	bra	&0x00153	
    4088:	00 00       	bra	@r0		
    408a:	00 00       	bra	@r0		
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
    408c:	2d 2e       	jc	$-932    	;abs 0x3ce8
    408e:	00 00       	bra	@r0		
    4090:	20 00 55 01 	bra	&0x00155	
    4094:	00 00       	bra	@r0		
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
    4096:	00 00       	bra	@r0		
        }
    }   
    return 0;
}
    4098:	af 1f       	.word	0x1faf;	????	
    409a:	00 00       	bra	@r0		

// loop de controle
void main_loop(){
    
    
}
    409c:	20 00 58 01 	bra	&0x00158	
    40a0:	00 00       	bra	@r0		
    40a2:	00 00       	bra	@r0		
    40a4:	bc 1f       	.word	0x1fbc;	????	
    40a6:	00 00       	bra	@r0		
    40a8:	20 00 5a 01 	bra	&0x0015a	
    40ac:	00 00       	bra	@r0		
    40ae:	00 00       	bra	@r0		
    40b0:	3f 2e       	jc	$-896    	;abs 0x3d30
    40b2:	00 00       	bra	@r0		
    40b4:	20 00 1a 00 	bra	&0x0001a	
    40b8:	00 00       	bra	@r0		
    40ba:	00 00       	bra	@r0		
    40bc:	4d 2e       	jc	$-868    	;abs 0x3d58
    40be:	00 00       	bra	@r0		
    40c0:	20 00 1c 00 	bra	&0x0001c	
    40c4:	00 00       	bra	@r0		
    40c6:	00 00       	bra	@r0		
    40c8:	5c 2e       	jc	$-838    	;abs 0x3d82
    40ca:	00 00       	bra	@r0		
    40cc:	20 00 1e 00 	bra	&0x0001e	
    40d0:	00 00       	bra	@r0		
    40d2:	00 00       	bra	@r0		
    40d4:	69 2e       	jc	$-812    	;abs 0x3da8
    40d6:	00 00       	bra	@r0		
    40d8:	20 00 21 00 	bra	&0x00021	
    40dc:	00 00       	bra	@r0		
    40de:	00 00       	bra	@r0		
    40e0:	7a 2e       	jc	$-778    	;abs 0x3dd6
    40e2:	00 00       	bra	@r0		
    40e4:	20 00 23 00 	bra	&0x00023	
    40e8:	00 00       	bra	@r0		
    40ea:	00 00       	bra	@r0		
    40ec:	8b 2e       	jc	$-744    	;abs 0x3e04
    40ee:	00 00       	bra	@r0		

void setup(){
    40f0:	20 00 25 00 	bra	&0x00025	
    
    clock_init();
    40f4:	00 00       	bra	@r0		
    
    timer_a3_init();
    40f6:	00 00       	bra	@r0		
    40f8:	9b 2e       	jc	$-712    	;abs 0x3e30
    
    p1_init();
    40fa:	00 00       	bra	@r0		
    40fc:	20 00 27 00 	bra	&0x00027	
    
    analog_init();
    4100:	00 00       	bra	@r0		
    
    i2c_init();
    4102:	00 00       	bra	@r0		
    4104:	ab 2e       	jc	$-680    	;abs 0x3e5c
    
    eint();
    4106:	00 00       	bra	@r0		
    
    lcd_init(BLACK);
    4108:	20 00 47 00 	bra	&0x00047	
    410c:	00 00       	bra	@r0		
    
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));

    i2c_config(EEPROM_I2C_ADDR);
    410e:	00 00       	bra	@r0		
    4110:	bc 2e       	jc	$-646    	;abs 0x3e8a
    4112:	00 00       	bra	@r0		
    4114:	20 00 49 00 	bra	&0x00049	
    EEPROMFound = !(i2c_find_device());
    4118:	00 00       	bra	@r0		
    411a:	00 00       	bra	@r0		
    411c:	cc 2e       	jc	$-614    	;abs 0x3eb6
    411e:	00 00       	bra	@r0		
    4120:	20 00 ac 00 	bra	&0x000ac	
    4124:	00 00       	bra	@r0		
    
    if(EEPROMFound){
    4126:	00 00       	bra	@r0		
    4128:	db 2e       	jc	$-584    	;abs 0x3ee0
        printf("EEPROM found\n");
    412a:	00 00       	bra	@r0		
    412c:	20 00 16 00 	bra	&0x00016	
    4130:	00 00       	bra	@r0		
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    4132:	00 00       	bra	@r0		
    4134:	e8 2e       	jc	$-558    	;abs 0x3f06
    4136:	00 00       	bra	@r0		
    4138:	20 00 18 00 	bra	&0x00018	
    413c:	00 00       	bra	@r0		
    413e:	00 00       	bra	@r0		
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);
    4140:	f6 2e       	jc	$-530    	;abs 0x3f2e
    4142:	00 00       	bra	@r0		
    4144:	20 00 1a 00 	bra	&0x0001a	
    4148:	00 00       	bra	@r0		
    414a:	00 00       	bra	@r0		
    414c:	02 2f       	jc	$-506    	;abs 0x3f52
    414e:	00 00       	bra	@r0		
    4150:	20 00 1d 00 	bra	&0x0001d	
    4154:	00 00       	bra	@r0		
    4156:	00 00       	bra	@r0		
    4158:	12 2f       	jc	$-474    	;abs 0x3f7e
    415a:	00 00       	bra	@r0		
    415c:	20 00 1f 00 	bra	&0x0001f	

        //if(1){
        if(StatusFlags[0] != 0){
    4160:	00 00       	bra	@r0		
    4162:	00 00       	bra	@r0		
    4164:	22 2f       	jc	$-442    	;abs 0x3faa
    4166:	00 00       	bra	@r0		
            printf("Calibrando radio...\n");
    4168:	20 00 21 00 	bra	&0x00021	
    416c:	00 00       	bra	@r0		
    416e:	00 00       	bra	@r0		
            delayms(4000);
    4170:	32 2f       	jc	$-410    	;abs 0x3fd6
    4172:	00 00       	bra	@r0		
    4174:	20 00 23 00 	bra	&0x00023	
            calibrate_radio();
    4178:	00 00       	bra	@r0		
    417a:	00 00       	bra	@r0		
            StatusFlags[0] = 0;
    417c:	41 2f       	jc	$-380    	;abs 0x4000
    417e:	00 00       	bra	@r0		
            StatusFlags[1] = 0;
    4180:	20 00 25 00 	bra	&0x00025	
            StatusFlags[2] = 0;
    4184:	00 00       	bra	@r0		
    4186:	00 00       	bra	@r0		
            i2c_write16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    4188:	50 2f       	jc	$-350    	;abs 0x402a
    418a:	00 00       	bra	@r0		
    418c:	20 00 27 00 	bra	&0x00027	
    4190:	00 00       	bra	@r0		
    4192:	00 00       	bra	@r0		
    4194:	5f 2f       	jc	$-320    	;abs 0x4054
    4196:	00 00       	bra	@r0		
        }
        else{
            load_transmitter_values();
    4198:	20 00 2c 00 	bra	&0x0002c	
            printf("RC params loaded\n");
    419c:	00 00       	bra	@r0		
    419e:	00 00       	bra	@r0		
    41a0:	6f 2f       	jc	$-288    	;abs 0x4080
    41a2:	00 00       	bra	@r0		
    41a4:	20 00 2e 00 	bra	&0x0002e	
            //carregar os outros parametros
        }
    }
    else{
        color_fore = RED;
    41a8:	00 00       	bra	@r0		
    41aa:	00 00       	bra	@r0		
        printf("EEPROM not found\n");
    41ac:	7f 2f       	jc	$-256    	;abs 0x40ac
    41ae:	00 00       	bra	@r0		
    41b0:	20 00 30 00 	bra	&0x00030	
        color_fore = LIME;
    41b4:	00 00       	bra	@r0		
    41b6:	00 00       	bra	@r0		
    41b8:	8f 2f       	jc	$-224    	;abs 0x40d8
    }
    
    delayms(5000);
    41ba:	00 00       	bra	@r0		
    41bc:	20 00 32 00 	bra	&0x00032	
    41c0:	00 00       	bra	@r0		
    
    SetupDone = 1;
    41c2:	00 00       	bra	@r0		
    41c4:	9f 2f       	jc	$-192    	;abs 0x4104
}
    41c6:	00 00       	bra	@r0		
    41c8:	20 00 34 00 	bra	&0x00034	

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
    41cc:	00 00       	bra	@r0		
    41ce:	00 00       	bra	@r0		
        for(k = 0; k < 100; k++){
    41d0:	ae 2f       	jc	$-162    	;abs 0x412e
            AnalogGraph[i][k] = 0;
    41d2:	00 00       	bra	@r0		
    41d4:	20 00 36 00 	bra	&0x00036	
    41d8:	00 00       	bra	@r0		
    41da:	00 00       	bra	@r0		
    41dc:	bd 2f       	jc	$-132    	;abs 0x4158
    41de:	00 00       	bra	@r0		
    41e0:	20 00 38 00 	bra	&0x00038	
    41e4:	00 00       	bra	@r0		
    41e6:	00 00       	bra	@r0		
    41e8:	cc 2f       	jc	$-102    	;abs 0x4182
    41ea:	00 00       	bra	@r0		
    41ec:	20 00 3a 00 	bra	&0x0003a	
}

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
        for(k = 0; k < 100; k++){
    41f0:	00 00       	bra	@r0		
    41f2:	00 00       	bra	@r0		
    41f4:	db 2f       	jc	$-72     	;abs 0x41ac
    41f6:	00 00       	bra	@r0		
    SetupDone = 1;
}

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
    41f8:	20 00 7a 00 	bra	&0x0007a	
    41fc:	00 00       	bra	@r0		
        for(k = 0; k < 100; k++){
            AnalogGraph[i][k] = 0;
        }
    }
}
    41fe:	00 00       	bra	@r0		
    4200:	75 21       	jnz	$+748    	;abs 0x44ec
    4202:	00 00       	bra	@r0		
    4204:	20 00 14 00 	bra	&0x00014	
    4208:	00 00       	bra	@r0		
    420a:	00 00       	bra	@r0		
    420c:	83 21       	jnz	$+776    	;abs 0x4514
    420e:	00 00       	bra	@r0		
    4210:	20 00 16 00 	bra	&0x00016	
    4214:	00 00       	bra	@r0		
    4216:	00 00       	bra	@r0		
    4218:	92 21       	jnz	$+806    	;abs 0x453e
    421a:	00 00       	bra	@r0		
    421c:	20 00 18 00 	bra	&0x00018	
    4220:	00 00       	bra	@r0		
    4222:	00 00       	bra	@r0		
    4224:	a1 21       	jnz	$+836    	;abs 0x4568
    4226:	00 00       	bra	@r0		
    4228:	20 00 1b 00 	bra	&0x0001b	
    422c:	00 00       	bra	@r0		
    422e:	00 00       	bra	@r0		
    4230:	ea 2f       	jc	$-42     	;abs 0x4206
    4232:	00 00       	bra	@r0		
    4234:	20 00 14 00 	bra	&0x00014	
    4238:	00 00       	bra	@r0		
    423a:	00 00       	bra	@r0		
    423c:	f8 2f       	jc	$-14     	;abs 0x422e
    423e:	00 00       	bra	@r0		
    4240:	20 00 16 00 	bra	&0x00016	
    4244:	00 00       	bra	@r0		
    4246:	00 00       	bra	@r0		
    4248:	06 30       	jn	$+14     	;abs 0x4256
    424a:	00 00       	bra	@r0		
    424c:	20 00 18 00 	bra	&0x00018	
    4250:	00 00       	bra	@r0		
    4252:	00 00       	bra	@r0		
    4254:	da 21       	jnz	$+950    	;abs 0x460a
    4256:	00 00       	bra	@r0		
    4258:	20 00 14 00 	bra	&0x00014	
    425c:	00 00       	bra	@r0		
    425e:	00 00       	bra	@r0		
    4260:	e8 21       	jnz	$+978    	;abs 0x4632
    4262:	00 00       	bra	@r0		
    4264:	20 00 16 00 	bra	&0x00016	
    4268:	00 00       	bra	@r0		
    426a:	00 00       	bra	@r0		
    426c:	f6 21       	jnz	$+1006   	;abs 0x465a
    426e:	00 00       	bra	@r0		
    4270:	20 00 18 00 	bra	&0x00018	
    4274:	00 00       	bra	@r0		
    4276:	00 00       	bra	@r0		
    4278:	14 30       	jn	$+42     	;abs 0x42a2
    427a:	00 00       	bra	@r0		
    427c:	20 00 12 00 	bra	&0x00012	
    4280:	00 00       	bra	@r0		
    4282:	00 00       	bra	@r0		
    4284:	26 30       	jn	$+78     	;abs 0x42d2
    4286:	00 00       	bra	@r0		
    4288:	20 00 14 00 	bra	&0x00014	
    428c:	00 00       	bra	@r0		
    428e:	00 00       	bra	@r0		
    4290:	38 30       	jn	$+114    	;abs 0x4302
    4292:	00 00       	bra	@r0		
    4294:	20 00 16 00 	bra	&0x00016	
    4298:	00 00       	bra	@r0		
    429a:	00 00       	bra	@r0		
    429c:	49 30       	jn	$+148    	;abs 0x4330
    429e:	00 00       	bra	@r0		
    42a0:	20 00 18 00 	bra	&0x00018	
    42a4:	00 00       	bra	@r0		
    42a6:	00 00       	bra	@r0		
    42a8:	59 30       	jn	$+180    	;abs 0x435c
    42aa:	00 00       	bra	@r0		
    42ac:	20 00 1a 00 	bra	&0x0001a	
    42b0:	00 00       	bra	@r0		
    42b2:	00 00       	bra	@r0		
    42b4:	69 30       	jn	$+212    	;abs 0x4388
    42b6:	00 00       	bra	@r0		
    42b8:	20 00 58 00 	bra	&0x00058	
    42bc:	00 00       	bra	@r0		
    42be:	00 00       	bra	@r0		
    42c0:	77 30       	jn	$+240    	;abs 0x43b0
    42c2:	00 00       	bra	@r0		
    42c4:	20 00 64 00 	bra	&0x00064	
    42c8:	00 00       	bra	@r0		
    42ca:	00 00       	bra	@r0		
    42cc:	89 30       	jn	$+276    	;abs 0x43e0
    42ce:	00 00       	bra	@r0		
    42d0:	20 00 66 00 	bra	&0x00066	
    42d4:	00 00       	bra	@r0		
    42d6:	00 00       	bra	@r0		
    42d8:	9b 30       	jn	$+312    	;abs 0x4410
    42da:	00 00       	bra	@r0		
    42dc:	20 00 68 00 	bra	&0x00068	
    42e0:	00 00       	bra	@r0		
    42e2:	00 00       	bra	@r0		
    42e4:	ad 30       	jn	$+348    	;abs 0x4440
    42e6:	00 00       	bra	@r0		
    42e8:	20 00 6a 00 	bra	&0x0006a	
    42ec:	00 00       	bra	@r0		
    42ee:	00 00       	bra	@r0		
    42f0:	bf 30       	jn	$+384    	;abs 0x4470
    42f2:	00 00       	bra	@r0		
    42f4:	20 00 6c 00 	bra	&0x0006c	
    42f8:	00 00       	bra	@r0		
    42fa:	00 00       	bra	@r0		
    42fc:	d1 30       	jn	$+420    	;abs 0x44a0
    42fe:	00 00       	bra	@r0		
    4300:	20 00 6e 00 	bra	&0x0006e	
    4304:	00 00       	bra	@r0		
    4306:	00 00       	bra	@r0		
    4308:	e3 30       	jn	$+456    	;abs 0x44d0
    430a:	00 00       	bra	@r0		
    430c:	20 00 70 00 	bra	&0x00070	
    4310:	00 00       	bra	@r0		
    4312:	00 00       	bra	@r0		
    4314:	f5 30       	jn	$+492    	;abs 0x4500
    4316:	00 00       	bra	@r0		
    4318:	20 00 72 00 	bra	&0x00072	
    431c:	00 00       	bra	@r0		
    431e:	00 00       	bra	@r0		
    4320:	07 31       	jn	$+528    	;abs 0x4530
    4322:	00 00       	bra	@r0		
    4324:	20 00 74 00 	bra	&0x00074	
    4328:	00 00       	bra	@r0		
    432a:	00 00       	bra	@r0		
    432c:	19 31       	jn	$+564    	;abs 0x4560
    432e:	00 00       	bra	@r0		
    4330:	20 00 76 00 	bra	&0x00076	
    4334:	00 00       	bra	@r0		
    4336:	00 00       	bra	@r0		
    4338:	2b 31       	jn	$+600    	;abs 0x4590
    433a:	00 00       	bra	@r0		
    433c:	20 00 78 00 	bra	&0x00078	
    4340:	00 00       	bra	@r0		
    4342:	00 00       	bra	@r0		
    4344:	3e 31       	jn	$+638    	;abs 0x45c2
    4346:	00 00       	bra	@r0		
    4348:	20 00 7a 00 	bra	&0x0007a	
    434c:	00 00       	bra	@r0		
    434e:	00 00       	bra	@r0		
    4350:	51 31       	jn	$+676    	;abs 0x45f4
    4352:	00 00       	bra	@r0		
    4354:	20 00 7c 00 	bra	&0x0007c	
    4358:	00 00       	bra	@r0		
    435a:	00 00       	bra	@r0		
    435c:	64 31       	jn	$+714    	;abs 0x4626
    435e:	00 00       	bra	@r0		
    4360:	20 00 7e 00 	bra	&0x0007e	
    4364:	00 00       	bra	@r0		
    4366:	00 00       	bra	@r0		
    4368:	77 31       	jn	$+752    	;abs 0x4658
    436a:	00 00       	bra	@r0		
    436c:	20 00 80 00 	bra	&0x00080	
    4370:	00 00       	bra	@r0		
    4372:	00 00       	bra	@r0		
    4374:	8a 31       	jn	$+790    	;abs 0x468a
    4376:	00 00       	bra	@r0		
    4378:	20 00 82 00 	bra	&0x00082	
    437c:	00 00       	bra	@r0		
    437e:	00 00       	bra	@r0		
    4380:	8b 23       	jnz	$-232    	;abs 0x4298
    4382:	00 00       	bra	@r0		
    4384:	20 00 8b 00 	bra	&0x0008b	
    4388:	00 00       	bra	@r0		
    438a:	00 00       	bra	@r0		
    438c:	9d 23       	jnz	$-196    	;abs 0x42c8
    438e:	00 00       	bra	@r0		
    4390:	20 00 8d 00 	bra	&0x0008d	
    4394:	00 00       	bra	@r0		
    4396:	00 00       	bra	@r0		
    4398:	af 23       	jnz	$-160    	;abs 0x42f8
    439a:	00 00       	bra	@r0		
    439c:	20 00 8f 00 	bra	&0x0008f	
    43a0:	00 00       	bra	@r0		
    43a2:	00 00       	bra	@r0		
    43a4:	c1 23       	jnz	$-124    	;abs 0x4328
    43a6:	00 00       	bra	@r0		
    43a8:	20 00 91 00 	bra	&0x00091	
    43ac:	00 00       	bra	@r0		
    43ae:	00 00       	bra	@r0		
    43b0:	d3 23       	jnz	$-88     	;abs 0x4358
    43b2:	00 00       	bra	@r0		
    43b4:	20 00 93 00 	bra	&0x00093	
    43b8:	00 00       	bra	@r0		
    43ba:	00 00       	bra	@r0		
    43bc:	e5 23       	jnz	$-52     	;abs 0x4388
    43be:	00 00       	bra	@r0		
    43c0:	20 00 95 00 	bra	&0x00095	
    43c4:	00 00       	bra	@r0		
    43c6:	00 00       	bra	@r0		
    43c8:	f7 23       	jnz	$-16     	;abs 0x43b8
    43ca:	00 00       	bra	@r0		
    43cc:	20 00 97 00 	bra	&0x00097	
    43d0:	00 00       	bra	@r0		
    43d2:	00 00       	bra	@r0		
    43d4:	09 24       	jz	$+20     	;abs 0x43e8
    43d6:	00 00       	bra	@r0		
    43d8:	20 00 99 00 	bra	&0x00099	
    43dc:	00 00       	bra	@r0		
    43de:	00 00       	bra	@r0		
    43e0:	1b 24       	jz	$+56     	;abs 0x4418
    43e2:	00 00       	bra	@r0		
    43e4:	20 00 9b 00 	bra	&0x0009b	
    43e8:	00 00       	bra	@r0		
    43ea:	00 00       	bra	@r0		
    43ec:	2d 24       	jz	$+92     	;abs 0x4448
    43ee:	00 00       	bra	@r0		
    43f0:	20 00 9d 00 	bra	&0x0009d	
    43f4:	00 00       	bra	@r0		
    43f6:	00 00       	bra	@r0		
    43f8:	3f 24       	jz	$+128    	;abs 0x4478
    43fa:	00 00       	bra	@r0		
    43fc:	20 00 9f 00 	bra	&0x0009f	
    4400:	00 00       	bra	@r0		
    4402:	00 00       	bra	@r0		
    4404:	52 24       	jz	$+166    	;abs 0x44aa
    4406:	00 00       	bra	@r0		
    4408:	20 00 a1 00 	bra	&0x000a1	
    440c:	00 00       	bra	@r0		
    440e:	00 00       	bra	@r0		
    4410:	65 24       	jz	$+204    	;abs 0x44dc
    4412:	00 00       	bra	@r0		
    4414:	20 00 a3 00 	bra	&0x000a3	
    4418:	00 00       	bra	@r0		
    441a:	00 00       	bra	@r0		
    441c:	78 24       	jz	$+242    	;abs 0x450e
    441e:	00 00       	bra	@r0		
    4420:	20 00 a5 00 	bra	&0x000a5	
    4424:	00 00       	bra	@r0		
    4426:	00 00       	bra	@r0		
    4428:	8b 24       	jz	$+280    	;abs 0x4540
    442a:	00 00       	bra	@r0		
    442c:	20 00 a7 00 	bra	&0x000a7	
    4430:	00 00       	bra	@r0		
    4432:	00 00       	bra	@r0		
    4434:	9e 24       	jz	$+318    	;abs 0x4572
    4436:	00 00       	bra	@r0		
    4438:	20 00 a9 00 	bra	&0x000a9	
    443c:	00 00       	bra	@r0		
    443e:	00 00       	bra	@r0		
    4440:	9d 31       	jn	$+828    	;abs 0x477c
    4442:	00 00       	bra	@r0		
    4444:	20 00 12 00 	bra	&0x00012	
    4448:	00 00       	bra	@r0		
    444a:	00 00       	bra	@r0		
    444c:	b0 31       	jn	$+866    	;abs 0x47ae
    444e:	00 00       	bra	@r0		
    4450:	20 00 14 00 	bra	&0x00014	
    4454:	00 00       	bra	@r0		
    4456:	00 00       	bra	@r0		
    4458:	c3 31       	jn	$+904    	;abs 0x47e0
    445a:	00 00       	bra	@r0		
    445c:	20 00 16 00 	bra	&0x00016	
    4460:	00 00       	bra	@r0		
    4462:	00 00       	bra	@r0		
    4464:	d6 31       	jn	$+942    	;abs 0x4812
    4466:	00 00       	bra	@r0		
    4468:	20 00 18 00 	bra	&0x00018	
    446c:	00 00       	bra	@r0		
    446e:	00 00       	bra	@r0		
    4470:	e9 31       	jn	$+980    	;abs 0x4844
    4472:	00 00       	bra	@r0		
    4474:	20 00 18 00 	bra	&0x00018	
    4478:	00 00       	bra	@r0		
    447a:	00 00       	bra	@r0		
    447c:	f9 31       	jn	$+1012   	;abs 0x4870
    447e:	00 00       	bra	@r0		
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    4480:	20 00 1a 00 	bra	&0x0001a	

void process_option(){
    4484:	00 00       	bra	@r0		
    4486:	00 00       	bra	@r0		
    int i;
    switch (MenuOption){
        case RADIO_RAW:
    4488:	09 32       	jn	$-1004   	;abs 0x409c
            draw_rc_inputs(1);
    448a:	00 00       	bra	@r0		
    448c:	20 00 1d 00 	bra	&0x0001d	
            break;
    4490:	00 00       	bra	@r0		
        case RADIO_CORRECT:
    4492:	00 00       	bra	@r0		
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    4494:	17 32       	jn	$-976    	;abs 0x40c4
    4496:	00 00       	bra	@r0		
                lcd_goto(8,8);
    4498:	20 00 3f 00 	bra	&0x0003f	
                printf("%d", i);
                delayms(1000);
            }
    449c:	00 00       	bra	@r0		
    449e:	00 00       	bra	@r0		
            MotorArmed = TRUE;
    44a0:	3b 25       	jz	$+632    	;abs 0x4718
    44a2:	00 00       	bra	@r0		
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
            break;
            
        case INITIAL_SETTINGS:
    44a4:	20 00 41 00 	bra	&0x00041	
            // seta o flag initial setup
    44a8:	00 00       	bra	@r0		
    44aa:	00 00       	bra	@r0		
            break;          
    44ac:	27 32       	jn	$-944    	;abs 0x40fc
    44ae:	00 00       	bra	@r0		
    }
    
    44b0:	20 00 43 00 	bra	&0x00043	
    if(ChannelInput[CH7_CH] > 3500){
    44b4:	00 00       	bra	@r0		
    44b6:	00 00       	bra	@r0		
        MenuStep = WAIT_CH7_BACK;
    44b8:	60 25       	jz	$+706    	;abs 0x477a
    44ba:	00 00       	bra	@r0		
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    }
}

    44bc:	20 00 45 00 	bra	&0x00045	
void draw_analog_graph(void){
    44c0:	00 00       	bra	@r0		
    44c2:	00 00       	bra	@r0		
    lcd_goto(4,4);
    44c4:	37 32       	jn	$-912    	;abs 0x4134
    44c6:	00 00       	bra	@r0		
            
        case INITIAL_SETTINGS:
            // seta o flag initial setup
            break;          
    }
    
    44c8:	20 00 47 00 	bra	&0x00047	
    44cc:	00 00       	bra	@r0		

void draw_analog_graph(void){
    lcd_goto(4,4);
    printf("FAZER");
}

    44ce:	00 00       	bra	@r0		
    44d0:	47 32       	jn	$-880    	;abs 0x4160
    44d2:	00 00       	bra	@r0		
    44d4:	20 00 49 00 	bra	&0x00049	
void process_analog_menu(void){
    switch(MenuAnalog){
        case DISPLAY:
    44d8:	00 00       	bra	@r0		
    44da:	00 00       	bra	@r0		
            lcd_goto(0,14);
    44dc:	56 32       	jn	$-850    	;abs 0x418a
    44de:	00 00       	bra	@r0		
    44e0:	20 00 4c 00 	bra	&0x0004c	
    
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    }
    44e4:	00 00       	bra	@r0		
    44e6:	00 00       	bra	@r0		
                delayms(1000);
            }
            MotorArmed = TRUE;
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
    44e8:	9d 25       	jz	$+828    	;abs 0x4824
    44ea:	00 00       	bra	@r0		
    44ec:	20 00 4e 00 	bra	&0x0004e	

void process_analog_menu(void){
    switch(MenuAnalog){
        case DISPLAY:
            lcd_goto(0,14);
            printf("DISPLAY             ");
    44f0:	00 00       	bra	@r0		

            refresh_analog_menu();
            MenuAnalog = SELECT;
    44f2:	00 00       	bra	@r0		
    44f4:	66 32       	jn	$-818    	;abs 0x41c2
            break;
    44f6:	00 00       	bra	@r0		
    44f8:	20 00 50 00 	bra	&0x00050	
        case SELECT:
            lcd_goto(0,14);
    44fc:	00 00       	bra	@r0		
    44fe:	00 00       	bra	@r0		
            printf("SELECT            ");
    4500:	76 32       	jn	$-786    	;abs 0x41ee
    4502:	00 00       	bra	@r0		

    4504:	20 00 52 00 	bra	&0x00052	
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    4508:	00 00       	bra	@r0		
    450a:	00 00       	bra	@r0		
                MenuAnalog = WAIT_ROLL_LEFT;
    450c:	85 32       	jn	$-756    	;abs 0x4218
    450e:	00 00       	bra	@r0		
    4510:	20 00 54 00 	bra	&0x00054	
            }
    4514:	00 00       	bra	@r0		
    4516:	00 00       	bra	@r0		
            else{
    4518:	95 32       	jn	$-724    	;abs 0x4244
    451a:	00 00       	bra	@r0		
    451c:	20 00 56 00 	bra	&0x00056	
                if(ChannelInput[ROLL_CH] < 2500){
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
    4520:	00 00       	bra	@r0		
    4522:	00 00       	bra	@r0		
    4524:	a4 32       	jn	$-694    	;abs 0x426e
    4526:	00 00       	bra	@r0		
    4528:	20 00 59 00 	bra	&0x00059	
            }
            
    452c:	00 00       	bra	@r0		
    452e:	00 00       	bra	@r0		
    4530:	f9 25       	jz	$+1012   	;abs 0x4924
    4532:	00 00       	bra	@r0		
    4534:	20 00 5b 00 	bra	&0x0005b	
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    4538:	00 00       	bra	@r0		
    453a:	00 00       	bra	@r0		
    453c:	b4 32       	jn	$-662    	;abs 0x42a6
    453e:	00 00       	bra	@r0		
                MenuAnalog = WAIT_PITCH_DOWN;
    4540:	20 00 5d 00 	bra	&0x0005d	
    4544:	00 00       	bra	@r0		
    4546:	00 00       	bra	@r0		
    4548:	17 26       	jz	$-976    	;abs 0x4178
            }
    454a:	00 00       	bra	@r0		
    454c:	20 00 5f 00 	bra	&0x0005f	
    4550:	00 00       	bra	@r0		
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
    4552:	00 00       	bra	@r0		
    4554:	c4 32       	jn	$-630    	;abs 0x42de
    4556:	00 00       	bra	@r0		
    4558:	20 00 61 00 	bra	&0x00061	
                }
            }
    455c:	00 00       	bra	@r0		
    455e:	00 00       	bra	@r0		
    4560:	d4 32       	jn	$-598    	;abs 0x430a
    4562:	00 00       	bra	@r0		
    4564:	20 00 63 00 	bra	&0x00063	
            
            break;
    4568:	00 00       	bra	@r0		
    456a:	00 00       	bra	@r0		
    456c:	e3 32       	jn	$-568    	;abs 0x4334
        case WAIT_PITCH_DOWN:
    456e:	00 00       	bra	@r0		
    4570:	20 00 47 00 	bra	&0x00047	
    4574:	00 00       	bra	@r0		
            lcd_goto(0,14);
    4576:	00 00       	bra	@r0		
    4578:	53 26       	jz	$-856    	;abs 0x4220
    457a:	00 00       	bra	@r0		
    457c:	20 00 45 00 	bra	&0x00045	
            printf("WAIT PITCH DOWN    ");
    4580:	00 00       	bra	@r0		
    4582:	00 00       	bra	@r0		
    4584:	5e 26       	jz	$-834    	;abs 0x4242
    4586:	00 00       	bra	@r0		
    4588:	20 00 4c 00 	bra	&0x0004c	

    458c:	00 00       	bra	@r0		
    458e:	00 00       	bra	@r0		
    4590:	6a 26       	jz	$-810    	;abs 0x4266
    4592:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] > 2500){
    4594:	20 00 54 00 	bra	&0x00054	
    4598:	00 00       	bra	@r0		
    459a:	00 00       	bra	@r0		
    459c:	75 26       	jz	$-788    	;abs 0x4288
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    459e:	00 00       	bra	@r0		
    45a0:	20 00 5c 00 	bra	&0x0005c	
    45a4:	00 00       	bra	@r0		
    45a6:	00 00       	bra	@r0		
                MenuAnalog = DISPLAY;
    45a8:	f2 32       	jn	$-538    	;abs 0x438e
    45aa:	00 00       	bra	@r0		
    45ac:	20 00 6e 00 	bra	&0x0006e	
    45b0:	00 00       	bra	@r0		
            }
            break;
    45b2:	00 00       	bra	@r0		
    45b4:	96 26       	jz	$-722    	;abs 0x42e2
    45b6:	00 00       	bra	@r0		
    45b8:	20 00 70 00 	bra	&0x00070	
            
    45bc:	00 00       	bra	@r0		
    45be:	00 00       	bra	@r0		
    45c0:	ac 26       	jz	$-678    	;abs 0x431a
        case WAIT_PITCH_UP:
    45c2:	00 00       	bra	@r0		
    45c4:	20 00 72 00 	bra	&0x00072	
    45c8:	00 00       	bra	@r0		
    45ca:	00 00       	bra	@r0		
            lcd_goto(0,14);
    45cc:	c2 26       	jz	$-634    	;abs 0x4352
    45ce:	00 00       	bra	@r0		
    45d0:	20 00 74 00 	bra	&0x00074	
    45d4:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");
    45d6:	00 00       	bra	@r0		
    45d8:	d9 26       	jz	$-588    	;abs 0x438c
    45da:	00 00       	bra	@r0		
    45dc:	20 00 76 00 	bra	&0x00076	

    45e0:	00 00       	bra	@r0		
    45e2:	00 00       	bra	@r0		
    45e4:	f0 26       	jz	$-542    	;abs 0x43c6
    45e6:	00 00       	bra	@r0		
    45e8:	20 00 93 00 	bra	&0x00093	
            if(ChannelInput[PITCH_CH] < 3500){
    45ec:	00 00       	bra	@r0		
    45ee:	00 00       	bra	@r0		
    45f0:	04 27       	jz	$-502    	;abs 0x43fa
    45f2:	00 00       	bra	@r0		
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    45f4:	20 00 95 00 	bra	&0x00095	
    45f8:	00 00       	bra	@r0		
    45fa:	00 00       	bra	@r0		
    45fc:	18 27       	jz	$-462    	;abs 0x442e
                MenuAnalog = DISPLAY;
            }
    45fe:	00 00       	bra	@r0		
    4600:	20 00 97 00 	bra	&0x00097	
    4604:	00 00       	bra	@r0		
            break;
    4606:	00 00       	bra	@r0		
    4608:	2c 27       	jz	$-422    	;abs 0x4462
    460a:	00 00       	bra	@r0		
    460c:	20 00 99 00 	bra	&0x00099	
            
    4610:	00 00       	bra	@r0		
    4612:	00 00       	bra	@r0		
    4614:	40 27       	jz	$-382    	;abs 0x4496
    4616:	00 00       	bra	@r0		
    4618:	20 00 9b 00 	bra	&0x0009b	
        case WAIT_ROLL_RIGHT:
    461c:	00 00       	bra	@r0		
    461e:	00 00       	bra	@r0		
    4620:	53 27       	jz	$-344    	;abs 0x44c8
    4622:	00 00       	bra	@r0		
                lcd_goto(0,14);
                printf("WAIT ROLL RIGHT ");

    4624:	20 00 9d 00 	bra	&0x0009d	
    4628:	00 00       	bra	@r0		
    462a:	00 00       	bra	@r0		
    462c:	66 27       	jz	$-306    	;abs 0x44fa
                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
    462e:	00 00       	bra	@r0		
    4630:	20 00 9f 00 	bra	&0x0009f	
    4634:	00 00       	bra	@r0		
    4636:	00 00       	bra	@r0		
    4638:	79 27       	jz	$-268    	;abs 0x452c
    463a:	00 00       	bra	@r0		
    463c:	20 00 a1 00 	bra	&0x000a1	
    4640:	00 00       	bra	@r0		
                        AnalogSelect--;
                    }
                    MenuAnalog = DISPLAY;
    4642:	00 00       	bra	@r0		
    4644:	07 33       	jn	$-496    	;abs 0x4454
                }
            break;
            
        case WAIT_ROLL_LEFT:
    4646:	00 00       	bra	@r0		
    4648:	20 00 2b 00 	bra	&0x0002b	
    464c:	00 00       	bra	@r0		
    464e:	00 00       	bra	@r0		
    4650:	1d 33       	jn	$-452    	;abs 0x448c
    4652:	00 00       	bra	@r0		
    4654:	20 00 2c 00 	bra	&0x0002c	
    4658:	00 00       	bra	@r0		
                lcd_goto(0,14);
    465a:	00 00       	bra	@r0		
                printf("WAIT ROLL LEFT   ");
        
                if(ChannelInput[PITCH_CH] > 2500){
    465c:	33 33       	jn	$-408    	;abs 0x44c4
    465e:	00 00       	bra	@r0		
                   if(AnalogSelect < 7){
    4660:	20 00 2d 00 	bra	&0x0002d	
    4664:	00 00       	bra	@r0		
    4666:	00 00       	bra	@r0		
                        AnalogSelect++;
    4668:	46 33       	jn	$-370    	;abs 0x44f6
    466a:	00 00       	bra	@r0		
    466c:	20 00 2e 00 	bra	&0x0002e	
                    }
    4670:	00 00       	bra	@r0		
    4672:	00 00       	bra	@r0		
                    MenuAnalog = DISPLAY;

                }
    4674:	59 33       	jn	$-332    	;abs 0x4528
    4676:	00 00       	bra	@r0		
    4678:	20 00 30 00 	bra	&0x00030	
	...
            break;
            
    4684:	64 00 00 00 	mova	r0,	&0x40000
    4688:	04 4c       	mov	r12,	r4	
    468a:	00 00       	bra	@r0		
        case PROCESS_OPTION:
    468c:	81 33       	jn	$-252    	;abs 0x4590
    468e:	00 00       	bra	@r0		
    4690:	64 00 00 00 	mova	r0,	&0x40000
            break;
    4694:	04 4c       	mov	r12,	r4	
    4696:	00 00       	bra	@r0		
    4698:	a7 33       	jn	$-176    	;abs 0x45e8
        case WAIT_CH7_BACK:
            break;
    }
    469a:	00 00       	bra	@r0		
    469c:	64 00 00 00 	mova	r0,	&0x40000
    46a0:	04 4c       	mov	r12,	r4	
    46a2:	00 00       	bra	@r0		
    46a4:	6a 00 00 00 	mova	r0,	&0xa0000
    46a8:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x046aa
    46ac:	00 00       	bra	@r0		
    46ae:	00 00       	bra	@r0		
    46b0:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
}

void refresh_analog_menu(void){
    46b4:	80 00 00 00 	bra	#0x00000	
    46b8:	00 00       	bra	@r0		
    46ba:	00 00       	bra	@r0		
    46bc:	99 00 00 00 	cmpa	#0x00000,r9	
    46c0:	80 00 00 00 	bra	#0x00000	
    int i;
    46c4:	00 00       	bra	@r0		
    46c6:	00 00       	bra	@r0		
    46c8:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    46ca:	00 00       	bra	@r0		
    46cc:	80 00 00 00 	bra	#0x00000	
    46d0:	00 00       	bra	@r0		
    46d2:	00 00       	bra	@r0		
    46d4:	ec 00       	adda	r0,	r12	
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    46d6:	00 00       	bra	@r0		
    46d8:	80 00 00 00 	bra	#0x00000	
    46dc:	00 00       	bra	@r0		
    46de:	00 00       	bra	@r0		
    46e0:	24 01 00 00 	mova	&0x10000,r4	
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
    46e4:	80 00 00 00 	bra	#0x00000	
    46e8:	00 00       	bra	@r0		
    46ea:	00 00       	bra	@r0		
    46ec:	66 01 00 00 	mova	r1,	&0x60000
    46f0:	80 00 00 00 	bra	#0x00000	
    46f4:	00 00       	bra	@r0		
            color_fore = BLACK;
    46f6:	00 00       	bra	@r0		
    46f8:	b7 01 00 00 	suba	#0x10000,r7	
        }
        else{                           // senao
    46fc:	80 00 00 00 	bra	#0x00000	
    4700:	00 00       	bra	@r0		
    4702:	00 00       	bra	@r0		
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
            color_fore = BLACK;
    4704:	08 02       	mova	#4,	r8	;r2 As==10
    4706:	00 00       	bra	@r0		
    4708:	80 00 00 00 	bra	#0x00000	
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
    470c:	00 00       	bra	@r0		
        
    470e:	00 00       	bra	@r0		
    4710:	2e 02 00 00 	mova	&0x20000,r14	
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
    4714:	80 00 00 00 	bra	#0x00000	
    4718:	00 00       	bra	@r0		
    471a:	00 00       	bra	@r0		
    471c:	6c 02 00 00 	mova	r2,	&0xc0000
        }                                                                
    4720:	80 00 00 00 	bra	#0x00000	
    4724:	00 00       	bra	@r0		
    4726:	00 00       	bra	@r0		
    4728:	96 02 00 00 	cmpa	#0x20000,r6	
    472c:	80 00 00 00 	bra	#0x00000	
        else{                           // se nao                        
    4730:	00 00       	bra	@r0		
    4732:	00 00       	bra	@r0		
    4734:	bf 02 00 00 	suba	#0x20000,r15	
    4738:	80 00 00 00 	bra	#0x00000	
            if(color_back == LIME){
                color_fore = BLACK;
            }
    473c:	00 00       	bra	@r0		
    473e:	00 00       	bra	@r0		
    4740:	d9 02       	cmpa	r2,	r9	
    4742:	00 00       	bra	@r0		
    4744:	80 00 00 00 	bra	#0x00000	
    4748:	00 00       	bra	@r0		
    474a:	00 00       	bra	@r0		
    474c:	f4 02       	suba	r2,	r4	
    474e:	00 00       	bra	@r0		
    4750:	80 00 00 00 	bra	#0x00000	
    4754:	00 00       	bra	@r0		
    4756:	00 00       	bra	@r0		
    4758:	14 03       	mova	#-1,	r4	;r3 As==11
    475a:	00 00       	bra	@r0		
        }                               
    475c:	80 00 00 00 	bra	#0x00000	
    4760:	00 00       	bra	@r0		
    4762:	00 00       	bra	@r0		
        
    4764:	4d 03       	rrum.a	#1,	r13	
    4766:	00 00       	bra	@r0		
        printf("%d",i);
    4768:	80 00 00 00 	bra	#0x00000	
    476c:	00 00       	bra	@r0		
    476e:	00 00       	bra	@r0		
    4770:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    4774:	80 00 00 00 	bra	#0x00000	
        // ajusta as cores para o normal
    4778:	00 00       	bra	@r0		
        color_fore = LIME;
    477a:	00 00       	bra	@r0		
        color_back = BLACK;
    477c:	8a 03 00 00 	mova	#0x30000,r10	
    4780:	80 00 00 00 	bra	#0x00000	
    4784:	00 00       	bra	@r0		
    4786:	00 00       	bra	@r0		
    4788:	ae 03 00 00 	adda	#0x30000,r14	
    478c:	80 00 00 00 	bra	#0x00000	
    4790:	00 00       	bra	@r0		
    4792:	00 00       	bra	@r0		
        printf(" ");
    4794:	d7 03       	tsta	r7		
    4796:	00 00       	bra	@r0		
    4798:	80 00 00 00 	bra	#0x00000	
    479c:	00 00       	bra	@r0		
    479e:	00 00       	bra	@r0		
    47a0:	a7 33       	jn	$-176    	;abs 0x46f0
    47a2:	00 00       	bra	@r0		
    47a4:	82 00 00 00 	mova	#0x00000,r2	
    47a8:	c2 dd 02 00 	bis.b	r13,	&0x0002	
    }
    47ac:	cf 09       	mova	r9,	r15	
    47ae:	00 00       	bra	@r0		
    47b0:	c2 00       	mova	r0,	r2	
    47b2:	00 00       	bra	@r0		
    47b4:	00 00       	bra	@r0		
    47b6:	00 00       	bra	@r0		
    47b8:	ab 09 00 00 	adda	#0x90000,r11	
    47bc:	c2 00       	mova	r0,	r2	
    47be:	00 00       	bra	@r0		
    47c0:	00 00       	bra	@r0		
    47c2:	00 00       	bra	@r0		
    printf("                    ");
    47c4:	cd 04       	mova	r4,	r13	
    47c6:	00 00       	bra	@r0		
    47c8:	c2 00       	mova	r0,	r2	
    47ca:	00 00       	bra	@r0		
    47cc:	91 34       	jge	$+292    	;abs 0x48f0
    47ce:	00 00       	bra	@r0		
    47d0:	f6 09       	suba	r9,	r6	
    47d2:	00 00       	bra	@r0		
    47d4:	c2 00       	mova	r0,	r2	
    47d6:	00 00       	bra	@r0		
    47d8:	00 00       	bra	@r0		
    47da:	00 00       	bra	@r0		
}
    47dc:	1c 0a       	mova	@r10+,	r12	
    47de:	00 00       	bra	@r0		
    47e0:	c2 00       	mova	r0,	r2	

    47e2:	00 00       	bra	@r0		
    47e4:	00 00       	bra	@r0		
    47e6:	00 00       	bra	@r0		
interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    47e8:	43 0a       	rlam.a	#3,	#0	;r3 As==00
    ControlCounter++;
    47ea:	00 00       	bra	@r0		
    47ec:	c2 00       	mova	r0,	r2	
    RCCounter++;
    47ee:	00 00       	bra	@r0		
    47f0:	c1 68 00 00 	addc.b	r8,	0(r1)	;0x0000(r1)
    47f4:	41 0c       	rrcm.a	#4,	r1	
    47f6:	00 00       	bra	@r0		
    47f8:	c2 00       	mova	r0,	r2	
    47fa:	00 00       	bra	@r0		
    47fc:	00 00       	bra	@r0		
    47fe:	00 00       	bra	@r0		
    4800:	68 0c 00 00 	mova	r12,	&0x80000
    4804:	c2 00       	mova	r0,	r2	
    4806:	00 00       	bra	@r0		
    4808:	3e 8a       	sub	@r10+,	r14	
    480a:	00 00       	bra	@r0		
    480c:	eb 0e       	adda	r14,	r11	
    480e:	00 00       	bra	@r0		
    4810:	c2 00       	mova	r0,	r2	
    4812:	00 00       	bra	@r0		
    MenuCounter++;
}
    4814:	90 a7 00 00 	dadd	0(r7),	0x11de	;0x0000(r7), PC rel. 0x059f8
    4818:	de 11 

void clock_init(void)
    481a:	00 00       	bra	@r0		
    481c:	c2 00       	mova	r0,	r2	
    481e:	00 00       	bra	@r0		
    4820:	00 00       	bra	@r0		
    4822:	00 00       	bra	@r0		
{
    4824:	0c 12       	push	r12		
    4826:	00 00       	bra	@r0		
    4828:	c2 00       	mova	r0,	r2	
    482a:	00 00       	bra	@r0		
    482c:	00 00       	bra	@r0		
    482e:	00 00       	bra	@r0		
    4830:	34 12       	push	@r4+		
    4832:	00 00       	bra	@r0		
    4834:	c2 00       	mova	r0,	r2	
    4836:	00 00       	bra	@r0		
    /* 
    4838:	00 00       	bra	@r0		
    483a:	00 00       	bra	@r0		
    483c:	5c 12 00 00 	push.b	0(r12)		;0x0000(r12)
    4840:	c2 00       	mova	r0,	r2	
    4842:	00 00       	bra	@r0		
    4844:	0c af       	dadd	r15,	r12	
    4846:	00 00       	bra	@r0		
    4848:	7b 15       	pushm	#8,	r11	
    484a:	00 00       	bra	@r0		
     * Basic Clock System Control 2
    484c:	c2 00       	mova	r0,	r2	
    484e:	00 00       	bra	@r0		
    4850:	00 00       	bra	@r0		
    4852:	00 00       	bra	@r0		
    4854:	a3 15       	pushm	#11,	#0	;r3 As==00
    4856:	00 00       	bra	@r0		
    4858:	c2 00       	mova	r0,	r2	
    485a:	00 00       	bra	@r0		
     * 
    485c:	00 00       	bra	@r0		
    485e:	00 00       	bra	@r0		
    4860:	c9 15       	pushm	#13,	r9	
    4862:	00 00       	bra	@r0		
    4864:	c2 00       	mova	r0,	r2	
    4866:	00 00       	bra	@r0		
    4868:	00 00       	bra	@r0		
    486a:	00 00       	bra	@r0		
     * SELM_0 -- DCOCLK
    486c:	af 33       	jn	$-160    	;abs 0x47cc
    486e:	00 00       	bra	@r0		
    4870:	24 00 0f 00 	mova	&0x0000f,r4	
    4874:	04 4c       	mov	r12,	r4	
    4876:	00 00       	bra	@r0		
    4878:	00 00       	bra	@r0		
    487a:	00 00       	bra	@r0		
    487c:	44 00       	rrcm.a	#1,	r4	
    487e:	0f 00       	mova	@r0,	r15	
	...
     * DIVM_0 -- Divide by 1
    4888:	44 00       	rrcm.a	#1,	r4	
    488a:	12 00       	mova	#0x00000,r2	
	...
     * ~SELS -- DCOCLK
    4894:	44 00       	rrcm.a	#1,	r4	
    4896:	14 00       	mova	#0x00000,r4	
	...
    48a0:	24 00 00 00 	mova	&0x00000,r4	
     * DIVS_0 -- Divide by 1
    48a4:	02 00       	mova	@r0,	r2	
    48a6:	00 00       	bra	@r0		
    48a8:	c0 33       	jn	$-126    	;abs 0x482a
    48aa:	00 00       	bra	@r0		
    48ac:	24 00 17 00 	mova	&0x00017,r4	
    48b0:	06 4c       	mov	r12,	r6	
    48b2:	00 00       	bra	@r0		
    48b4:	00 00       	bra	@r0		
    48b6:	00 00       	bra	@r0		
    48b8:	44 00       	rrcm.a	#1,	r4	
    48ba:	17 00       	mova	#0x00000,r7	
	...
     * ~DCOR -- DCO uses internal resistor
     * 
    48c4:	44 00       	rrcm.a	#1,	r4	
    48c6:	1a 00       	mova	#0x00000,r10	
	...
    48d0:	44 00       	rrcm.a	#1,	r4	
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    48d2:	1c 00       	mova	#0x00000,r12	
	...
    48dc:	24 00 00 00 	mova	&0x00000,r4	
    48e0:	02 00       	mova	@r0,	r2	
    48e2:	00 00       	bra	@r0		
    48e4:	d1 33       	jn	$-92     	;abs 0x4888
    48e6:	00 00       	bra	@r0		
    48e8:	24 00 21 00 	mova	&0x00021,r4	
    48ec:	08 4c       	mov	r12,	r8	
    48ee:	00 00       	bra	@r0		
    48f0:	e1 33       	jn	$-60     	;abs 0x48b4
    48f2:	00 00       	bra	@r0		
    48f4:	40 00       	rrcm.a	#1,	r0	
    48f6:	20 00 0f 00 	bra	&0x0000f	
    48fa:	00 00       	bra	@r0		
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    48fc:	00 00       	bra	@r0		
    48fe:	00 00       	bra	@r0		
    
    4900:	44 00       	rrcm.a	#1,	r4	
    4902:	21 00 00 00 	mova	&0x00000,r1	
    DCOCTL = 0x77;      
        /* 
    4906:	00 00       	bra	@r0		
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
    4908:	00 00       	bra	@r0		
    490a:	00 00       	bra	@r0		
     */
    BCSCTL1 = 0xcf;     
    490c:	44 00       	rrcm.a	#1,	r4	
    490e:	24 00 00 00 	mova	&0x00000,r4	

    /* 
     * Basic Clock System Control 3
     * 
     * XT2S_3 -- Digital input signal
    4912:	00 00       	bra	@r0		
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
     * XCAP_0 -- ~1 pF
    4914:	00 00       	bra	@r0		
     */
    4916:	00 00       	bra	@r0		
    BCSCTL3 = 0xa0;
    4918:	44 00       	rrcm.a	#1,	r4	
    491a:	25 00 0e 00 	mova	&0x0000e,r5	
    491e:	00 00       	bra	@r0		
    4920:	be 17       	popm	#12,	r9	
    4922:	00 00       	bra	@r0		
    4924:	40 00       	rrcm.a	#1,	r0	
}

    4926:	22 00 0e 00 	mova	&0x0000e,r2	
    492a:	00 00       	bra	@r0		
void p1_init(){
    492c:	00 00       	bra	@r0		
    492e:	00 00       	bra	@r0		
    4930:	c0 00       	bra	r0		
	...
        /* Port 1 Output Register */
    P1OUT = PPM_P1MASK;
    493a:	00 00       	bra	@r0		

    493c:	e0 00       	adda	r0,	r0	
    493e:	00 00       	bra	@r0		
    /* Port 1 Resistor Enable Register */
    4940:	10 00       	bra	#0x00000	
    P1REN = PPM_P1MASK;

    4942:	00 00       	bra	@r0		
    4944:	00 00       	bra	@r0		
    /* Port 1 Interrupt Edge Select Register */
    4946:	00 00       	bra	@r0		
    P1IES = 0; // subida
    4948:	24 00 00 00 	mova	&0x00000,r4	
    494c:	10 00       	bra	#0x00000	
    494e:	00 00       	bra	@r0		
    4950:	ee 33       	jn	$-34     	;abs 0x492e
    4952:	00 00       	bra	@r0		
    4954:	24 00 2a 00 	mova	&0x0002a,r4	
    4958:	18 4c 00 00 	mov	0(r12),	r8	;0x0000(r12)
    495c:	e1 33       	jn	$-60     	;abs 0x4920

    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;

    495e:	00 00       	bra	@r0		
    4960:	40 00       	rrcm.a	#1,	r0	
    4962:	29 00 0a 00 	mova	&0x0000a,r9	
    /* Port 1 Interrupt Enable Register */
    4966:	00 00       	bra	@r0		
    4968:	00 00       	bra	@r0		
    P1IE = PPM_P1MASK;
    496a:	00 00       	bra	@r0		
    496c:	44 00       	rrcm.a	#1,	r4	

    496e:	2a 00 00 00 	mova	&0x00000,r10	
}
    4972:	00 00       	bra	@r0		

void timer_a3_init(void)
    4974:	00 00       	bra	@r0		
    4976:	00 00       	bra	@r0		
{
    4978:	44 00       	rrcm.a	#1,	r4	
    /* 
    497a:	2d 00 06 00 	mova	&0x00006,r13	
    497e:	00 00       	bra	@r0		
    4980:	00 00       	bra	@r0		
    4982:	00 00       	bra	@r0		
    4984:	44 00       	rrcm.a	#1,	r4	
    4986:	2e 00 1a 00 	mova	&0x0001a,r14	
    498a:	00 00       	bra	@r0		
    498c:	be 17       	popm	#12,	r9	
    498e:	00 00       	bra	@r0		
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    BCSCTL1 = 0xcf;     

    4990:	40 00       	rrcm.a	#1,	r0	
    4992:	2b 00 0b 00 	mova	&0x0000b,r11	
    /* 
    4996:	00 00       	bra	@r0		
    4998:	00 00       	bra	@r0		
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    
    DCOCTL = 0x77;      
        /* 
     * Basic Clock System Control 1
    499a:	00 00       	bra	@r0		
    499c:	c0 00       	bra	r0		
     * 
    499e:	00 00       	bra	@r0		
    49a0:	06 00       	mova	@r0,	r6	
    49a2:	00 00       	bra	@r0		
void timer_a3_init(void)
{
    /* 
     * TACCTL0, Capture/Compare Control Register 0
     * 
     * CM_0 -- No Capture
    49a4:	00 00       	bra	@r0		
    49a6:	00 00       	bra	@r0		
    49a8:	e0 00       	adda	r0,	r0	
    49aa:	00 00       	bra	@r0		
    49ac:	1a 00       	mova	#0x00000,r10	
    49ae:	00 00       	bra	@r0		
    49b0:	00 00       	bra	@r0		
    49b2:	00 00       	bra	@r0		
    49b4:	24 00 00 00 	mova	&0x00000,r4	
    49b8:	20 00 00 00 	bra	&0x00000	
     * CCIS_0 -- CCIxA
     * ~SCS -- Asynchronous Capture
     * ~SCCI -- Latched capture signal (read)
    49bc:	fe 33       	jn	$-2      	;abs 0x49ba
    49be:	00 00       	bra	@r0		
    49c0:	20 00 12 00 	bra	&0x00012	
    49c4:	00 00       	bra	@r0		
    49c6:	00 00       	bra	@r0		
    49c8:	09 34       	jge	$+20     	;abs 0x49dc
    49ca:	00 00       	bra	@r0		
    49cc:	20 00 14 00 	bra	&0x00014	
    49d0:	00 00       	bra	@r0		
    49d2:	00 00       	bra	@r0		
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
    49d4:	15 34       	jge	$+44     	;abs 0x4a00
    49d6:	00 00       	bra	@r0		
    49d8:	20 00 16 00 	bra	&0x00016	
    49dc:	00 00       	bra	@r0		
    49de:	00 00       	bra	@r0		
    49e0:	20 34       	jge	$+66     	;abs 0x4a22
    49e2:	00 00       	bra	@r0		
     * Note: ~<BIT> indicates that <BIT> has value zero
    49e4:	20 00 18 00 	bra	&0x00018	
    49e8:	00 00       	bra	@r0		
    49ea:	00 00       	bra	@r0		
    49ec:	2c 34       	jge	$+90     	;abs 0x4a46
    49ee:	00 00       	bra	@r0		
    49f0:	20 00 1a 00 	bra	&0x0001a	
    49f4:	00 00       	bra	@r0		
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    49f6:	00 00       	bra	@r0		
    49f8:	37 34       	jge	$+112    	;abs 0x4a68
    49fa:	00 00       	bra	@r0		
    49fc:	20 00 1c 00 	bra	&0x0001c	
    4a00:	00 00       	bra	@r0		

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    4a02:	00 00       	bra	@r0		
    4a04:	44 34       	jge	$+138    	;abs 0x4a8e
    4a06:	00 00       	bra	@r0		
    4a08:	20 00 1e 00 	bra	&0x0001e	
    4a0c:	00 00       	bra	@r0		
    4a0e:	00 00       	bra	@r0		
    4a10:	51 34       	jge	$+164    	;abs 0x4ab4
    4a12:	00 00       	bra	@r0		
    4a14:	20 00 20 00 	bra	&0x00020	
    TACCR0 = 4001;
    4a18:	00 00       	bra	@r0		
    4a1a:	00 00       	bra	@r0		

    /* 
    4a1c:	5f 34       	jge	$+192    	;abs 0x4adc
    4a1e:	00 00       	bra	@r0		
    4a20:	20 00 88 00 	bra	&0x00088	
    4a24:	00 00       	bra	@r0		
    4a26:	00 00       	bra	@r0		
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;
    4a28:	6c 34       	jge	$+218    	;abs 0x4b02
    4a2a:	00 00       	bra	@r0		
    4a2c:	20 00 8c 00 	bra	&0x0008c	

    /* 
     * TACTL, Timer_A3 Control Register
     * 
     * TASSEL_2 -- SMCLK
    4a30:	00 00       	bra	@r0		
     * ID_3 -- Divider - /8
    4a32:	00 00       	bra	@r0		
    4a34:	79 34       	jge	$+244    	;abs 0x4b28
     * MC_1 -- Up Mode
     */
    4a36:	00 00       	bra	@r0		
    4a38:	20 00 90 00 	bra	&0x00090	
    4a3c:	00 00       	bra	@r0		
    4a3e:	00 00       	bra	@r0		
    4a40:	86 34       	jge	$+270    	;abs 0x4b4e
    4a42:	00 00       	bra	@r0		
    TACTL = TASSEL_2 + ID_3 + MC_1;
    4a44:	20 00 94 00 	bra	&0x00094	
    4a48:	00 00       	bra	@r0		
    4a4a:	00 00       	bra	@r0		
    4a4c:	93 34       	jge	$+296    	;abs 0x4b74
    4a4e:	00 00       	bra	@r0		
    4a50:	20 00 98 00 	bra	&0x00098	
}
    4a54:	00 00       	bra	@r0		
    4a56:	00 00       	bra	@r0		
    4a58:	a0 34       	jge	$+322    	;abs 0x4b9a
    4a5a:	00 00       	bra	@r0		
    4a5c:	20 00 9c 00 	bra	&0x0009c	

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    4a60:	00 00       	bra	@r0		
    4a62:	00 00       	bra	@r0		
    4a64:	ad 34       	jge	$+348    	;abs 0x4bc0
    4a66:	00 00       	bra	@r0		
    4a68:	20 00 7a 00 	bra	&0x0007a	
    int channel_num = 0, PPM_ch_counter;
    4a6c:	00 00       	bra	@r0		
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    4a6e:	00 00       	bra	@r0		
    4a70:	c1 34       	jge	$+388    	;abs 0x4bf4
            if(!(P1IES & PPM_ch_counter)){ // low to high
    4a72:	00 00       	bra	@r0		
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
    4a74:	20 00 7c 00 	bra	&0x0007c	
    4a78:	00 00       	bra	@r0		
    4a7a:	00 00       	bra	@r0		
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
    4a7c:	ce 34       	jge	$+414    	;abs 0x4c1a
    4a7e:	00 00       	bra	@r0		
    4a80:	20 00 7e 00 	bra	&0x0007e	
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
    4a84:	00 00       	bra	@r0		
    4a86:	00 00       	bra	@r0		
                else{ // se nao deu overflow na contagem do timer
    4a88:	db 34       	jge	$+440    	;abs 0x4c40
    4a8a:	00 00       	bra	@r0		
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    4a8c:	20 00 80 00 	bra	&0x00080	
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
    4a90:	00 00       	bra	@r0		
    4a92:	00 00       	bra	@r0		
    4a94:	e8 34       	jge	$+466    	;abs 0x4c66
    4a96:	00 00       	bra	@r0		
    4a98:	20 00 82 00 	bra	&0x00082	
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}
    4a9c:	00 00       	bra	@r0		
    4a9e:	00 00       	bra	@r0		
    4aa0:	f5 34       	jge	$+492    	;abs 0x4c8c
    4aa2:	00 00       	bra	@r0		
    4aa4:	20 00 84 00 	bra	&0x00084	
    4aa8:	00 00       	bra	@r0		
    4aaa:	00 00       	bra	@r0		

    4aac:	01 35       	jge	$+516    	;abs 0x4cb0
    4aae:	00 00       	bra	@r0		
    4ab0:	20 00 86 00 	bra	&0x00086	
    4ab4:	00 00       	bra	@r0		
    4ab6:	00 00       	bra	@r0		
    4ab8:	0e 35       	jge	$+542    	;abs 0x4cd6
void calibrate_radio(void){
    4aba:	00 00       	bra	@r0		
    4abc:	20 00 89 00 	bra	&0x00089	
    4ac0:	00 00       	bra	@r0		
    4ac2:	00 00       	bra	@r0		
    4ac4:	1b 35       	jge	$+568    	;abs 0x4cfc
    4ac6:	00 00       	bra	@r0		
    
    4ac8:	20 00 8f 00 	bra	&0x0008f	
    4acc:	00 00       	bra	@r0		
    4ace:	00 00       	bra	@r0		
    4ad0:	27 35       	jge	$+592    	;abs 0x4d20
    4ad2:	00 00       	bra	@r0		
    4ad4:	20 00 91 00 	bra	&0x00091	
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }
    4ad8:	00 00       	bra	@r0		

    4ada:	00 00       	bra	@r0		
    4adc:	34 35       	jge	$+618    	;abs 0x4d46
    4ade:	00 00       	bra	@r0		
    4ae0:	20 00 93 00 	bra	&0x00093	
    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4ae4:	00 00       	bra	@r0		
    4ae6:	00 00       	bra	@r0		
    4ae8:	41 35       	jge	$+644    	;abs 0x4d6c
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    4aea:	00 00       	bra	@r0		
    4aec:	20 00 95 00 	bra	&0x00095	
    4af0:	00 00       	bra	@r0		
    4af2:	00 00       	bra	@r0		
    4af4:	4e 35       	jge	$+670    	;abs 0x4d92
    
    4af6:	00 00       	bra	@r0		
    4af8:	20 00 97 00 	bra	&0x00097	
    lcd_goto(2,5);
    color_fore = RED;
    4afc:	00 00       	bra	@r0		
    4afe:	00 00       	bra	@r0		
    printf("MOVE STICKS\nALL DIRECTIONS");
    4b00:	5b 35       	jge	$+696    	;abs 0x4db8
    4b02:	00 00       	bra	@r0		
    4b04:	20 00 99 00 	bra	&0x00099	
    4b08:	00 00       	bra	@r0		
    4b0a:	00 00       	bra	@r0		
    4b0c:	67 35       	jge	$+720    	;abs 0x4ddc

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    
    4b0e:	00 00       	bra	@r0		
    4b10:	20 00 9b 00 	bra	&0x0009b	
    4b14:	00 00       	bra	@r0		
    4b16:	00 00       	bra	@r0		
    4b18:	74 35       	jge	$+746    	;abs 0x4e02
    4b1a:	00 00       	bra	@r0		
    4b1c:	20 00 9e 00 	bra	&0x0009e	
    lcd_goto(2,5);
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);
    4b20:	00 00       	bra	@r0		
    4b22:	00 00       	bra	@r0		
    4b24:	81 35       	jge	$+772    	;abs 0x4e28
    4b26:	00 00       	bra	@r0		
    4b28:	20 00 a4 00 	bra	&0x000a4	
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4b2c:	00 00       	bra	@r0		
    4b2e:	00 00       	bra	@r0		
    4b30:	8d 35       	jge	$+796    	;abs 0x4e4c
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
    4b32:	00 00       	bra	@r0		
    4b34:	20 00 a6 00 	bra	&0x000a6	
    4b38:	00 00       	bra	@r0		
    4b3a:	00 00       	bra	@r0		
    4b3c:	9a 35       	jge	$+822    	;abs 0x4e72
    4b3e:	00 00       	bra	@r0		
        PPMSlope[i] = 1;
    }

    4b40:	20 00 a8 00 	bra	&0x000a8	
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    4b44:	00 00       	bra	@r0		
    4b46:	00 00       	bra	@r0		
    4b48:	a7 35       	jge	$+848    	;abs 0x4e98
    4b4a:	00 00       	bra	@r0		
    4b4c:	20 00 aa 00 	bra	&0x000aa	
    4b50:	00 00       	bra	@r0		
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
    4b52:	00 00       	bra	@r0		
    4b54:	b4 35       	jge	$+874    	;abs 0x4ebe
    4b56:	00 00       	bra	@r0		
    4b58:	20 00 ad 00 	bra	&0x000ad	
    4b5c:	00 00       	bra	@r0		
    4b5e:	00 00       	bra	@r0		
    4b60:	c1 35       	jge	$+900    	;abs 0x4ee4
    4b62:	00 00       	bra	@r0		
    4b64:	20 00 b3 00 	bra	&0x000b3	
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
    4b68:	00 00       	bra	@r0		
    4b6a:	00 00       	bra	@r0		
        for(i = 0; i < 8; i++){ // pega max min
    4b6c:	cd 35       	jge	$+924    	;abs 0x4f08
    4b6e:	00 00       	bra	@r0		
    4b70:	20 00 b5 00 	bra	&0x000b5	
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    4b74:	00 00       	bra	@r0		
    4b76:	00 00       	bra	@r0		

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    4b78:	da 35       	jge	$+950    	;abs 0x4f2e
    4b7a:	00 00       	bra	@r0		
    for(k = 120; k > 0; k--){
    4b7c:	20 00 b7 00 	bra	&0x000b7	
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    4b80:	00 00       	bra	@r0		
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
    4b82:	00 00       	bra	@r0		
    4b84:	e7 35       	jge	$+976    	;abs 0x4f54
                PPMMin[i] = PPMValue[i];
            }
    4b86:	00 00       	bra	@r0		
    4b88:	20 00 b9 00 	bra	&0x000b9	
    4b8c:	00 00       	bra	@r0		
    4b8e:	00 00       	bra	@r0		
    4b90:	f4 35       	jge	$+1002   	;abs 0x4f7a
    4b92:	00 00       	bra	@r0		
    4b94:	20 00 bc 00 	bra	&0x000bc	
    4b98:	00 00       	bra	@r0		
    4b9a:	00 00       	bra	@r0		
    4b9c:	01 36       	jge	$-1020   	;abs 0x47a0
    4b9e:	00 00       	bra	@r0		
    4ba0:	20 00 c2 00 	bra	&0x000c2	
    4ba4:	00 00       	bra	@r0		
    4ba6:	00 00       	bra	@r0		
    4ba8:	0d 36       	jge	$-996    	;abs 0x47c4
    4baa:	00 00       	bra	@r0		
    4bac:	20 00 c4 00 	bra	&0x000c4	
        }
    4bb0:	00 00       	bra	@r0		
    4bb2:	00 00       	bra	@r0		
    4bb4:	1a 36       	jge	$-970    	;abs 0x47ea
    4bb6:	00 00       	bra	@r0		
    4bb8:	20 00 c6 00 	bra	&0x000c6	
    4bbc:	00 00       	bra	@r0		
    4bbe:	00 00       	bra	@r0		
    4bc0:	27 36       	jge	$-944    	;abs 0x4810
    4bc2:	00 00       	bra	@r0		
    4bc4:	20 00 c8 00 	bra	&0x000c8	
    4bc8:	00 00       	bra	@r0		
    4bca:	00 00       	bra	@r0		
    4bcc:	34 36       	jge	$-918    	;abs 0x4836
    }
    4bce:	00 00       	bra	@r0		
    4bd0:	20 00 cb 00 	bra	&0x000cb	
    4bd4:	00 00       	bra	@r0		
    4bd6:	00 00       	bra	@r0		
    4bd8:	41 36       	jge	$-892    	;abs 0x485c
    4bda:	00 00       	bra	@r0		
    
    4bdc:	20 00 d1 00 	bra	&0x000d1	
    4be0:	00 00       	bra	@r0		
    4be2:	00 00       	bra	@r0		
    4be4:	4d 36       	jge	$-868    	;abs 0x4880
    4be6:	00 00       	bra	@r0		
    4be8:	20 00 d3 00 	bra	&0x000d3	
    4bec:	00 00       	bra	@r0		
    4bee:	00 00       	bra	@r0		
    4bf0:	5a 36       	jge	$-842    	;abs 0x48a6
    lcd_clear(BLACK);
    4bf2:	00 00       	bra	@r0		
    4bf4:	20 00 d5 00 	bra	&0x000d5	
    4bf8:	00 00       	bra	@r0		
    4bfa:	00 00       	bra	@r0		
    4bfc:	67 36       	jge	$-816    	;abs 0x48cc
    4bfe:	00 00       	bra	@r0		
    4c00:	20 00 d7 00 	bra	&0x000d7	
/*
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
    4c04:	00 00       	bra	@r0		
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE

MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

    4c06:	00 00       	bra	@r0		
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    4c08:	74 36       	jge	$-790    	;abs 0x48f2
    4c0a:	00 00       	bra	@r0		
    4c0c:	20 00 da 00 	bra	&0x000da	
    4c10:	00 00       	bra	@r0		
    4c12:	00 00       	bra	@r0		
    4c14:	81 36       	jge	$-764    	;abs 0x4918
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    4c16:	00 00       	bra	@r0		

// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4c18:	20 00 e0 00 	bra	&0x000e0	
    4c1c:	00 00       	bra	@r0		

int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    4c1e:	00 00       	bra	@r0		
    4c20:	8d 36       	jge	$-740    	;abs 0x493c
    4c22:	00 00       	bra	@r0		
    4c24:	20 00 e2 00 	bra	&0x000e2	
    4c28:	00 00       	bra	@r0		
    4c2a:	00 00       	bra	@r0		
    4c2c:	9a 36       	jge	$-714    	;abs 0x4962
    4c2e:	00 00       	bra	@r0		
    4c30:	20 00 e4 00 	bra	&0x000e4	

    4c34:	00 00       	bra	@r0		
    4c36:	00 00       	bra	@r0		
    4c38:	a7 36       	jge	$-688    	;abs 0x4988
    4c3a:	00 00       	bra	@r0		
    4c3c:	20 00 e6 00 	bra	&0x000e6	
    4c40:	00 00       	bra	@r0		
    4c42:	00 00       	bra	@r0		
    4c44:	b4 36       	jge	$-662    	;abs 0x49ae
    4c46:	00 00       	bra	@r0		

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 
    4c48:	20 00 e9 00 	bra	&0x000e9	

    4c4c:	00 00       	bra	@r0		
// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()

    4c4e:	00 00       	bra	@r0		
    4c50:	c1 36       	jge	$-636    	;abs 0x49d4
    4c52:	00 00       	bra	@r0		
// variaveis leitura radio raw
    4c54:	20 00 ef 00 	bra	&0x000ef	
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    4c58:	00 00       	bra	@r0		
    4c5a:	00 00       	bra	@r0		
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    4c5c:	cd 36       	jge	$-612    	;abs 0x49f8
    4c5e:	00 00       	bra	@r0		
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4c60:	20 00 f1 00 	bra	&0x000f1	

int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    4c64:	00 00       	bra	@r0		
    INICIO: //loop main, vir para ca no caso de um reset
    4c66:	00 00       	bra	@r0		
    4c68:	da 36       	jge	$-586    	;abs 0x4a1e
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    4c6a:	00 00       	bra	@r0		
    4c6c:	20 00 f3 00 	bra	&0x000f3	

    4c70:	00 00       	bra	@r0		
    lcd_clear(BLACK);
    
    4c72:	00 00       	bra	@r0		
    4c74:	e7 36       	jge	$-560    	;abs 0x4a44
    MenuOption = RADIO_RAW;
    4c76:	00 00       	bra	@r0		
    4c78:	20 00 f5 00 	bra	&0x000f5	
    MenuStep = DISPLAY;
    4c7c:	00 00       	bra	@r0		
    MenuVisible = TRUE;     // inicializa mostrando o menu
    4c7e:	00 00       	bra	@r0		
    4c80:	f4 36       	jge	$-534    	;abs 0x4a6a
        
    4c82:	00 00       	bra	@r0		
    while(1){
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
    4c84:	20 00 f8 00 	bra	&0x000f8	
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
    4c88:	00 00       	bra	@r0		
    4c8a:	00 00       	bra	@r0		
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
    4c8c:	01 37       	jge	$-508    	;abs 0x4a90
    4c8e:	00 00       	bra	@r0		
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
    4c90:	20 00 fc 00 	bra	&0x000fc	
        P1 completa. */
    4c94:	00 00       	bra	@r0		
    4c96:	00 00       	bra	@r0		
        if(MotorArmed == TRUE){
    4c98:	11 37       	jge	$-476    	;abs 0x4abc
    4c9a:	00 00       	bra	@r0		
            if(ControlCounter >= CONTROL_PERIOD){
    4c9c:	20 00 fe 00 	bra	&0x000fe	
                main_loop();
                ControlCounter = 0;
            }
        }
        
        if(SetupDone == TRUE){
    4ca0:	00 00       	bra	@r0		
    4ca2:	00 00       	bra	@r0		
            if(RCCounter >= RC_PERIOD){
    4ca4:	21 37       	jge	$-444    	;abs 0x4ae8
    4ca6:	00 00       	bra	@r0		
                process_rc();
    4ca8:	20 00 00 01 	bra	&0x00100	
                RCCounter = 0;
    4cac:	00 00       	bra	@r0		
    4cae:	00 00       	bra	@r0		
            }
    4cb0:	30 37       	jge	$-414    	;abs 0x4b12
    4cb2:	00 00       	bra	@r0		
    4cb4:	20 00 02 01 	bra	&0x00102	
    4cb8:	00 00       	bra	@r0		
    4cba:	00 00       	bra	@r0		
        }
    4cbc:	3f 37       	jge	$-384    	;abs 0x4b3c
    4cbe:	00 00       	bra	@r0		
    
    4cc0:	20 00 04 01 	bra	&0x00104	
        if(MenuVisible == TRUE){
    4cc4:	00 00       	bra	@r0		
    4cc6:	00 00       	bra	@r0		
            if(MenuCounter >= MENU_PERIOD){
    4cc8:	4f 37       	jge	$-352    	;abs 0x4b68
    4cca:	00 00       	bra	@r0		
    4ccc:	20 00 06 01 	bra	&0x00106	
                process_menu();
                MenuCounter = 0;   
            }
    4cd0:	00 00       	bra	@r0		
    4cd2:	00 00       	bra	@r0		
        }
        else{
            if(ChannelInput[CH6_CH] > 3500){
                MenuVisible = TRUE;
    4cd4:	5f 37       	jge	$-320    	;abs 0x4b94
    4cd6:	00 00       	bra	@r0		
    4cd8:	20 00 08 01 	bra	&0x00108	
                MotorArmed = FALSE;
    4cdc:	00 00       	bra	@r0		
    4cde:	00 00       	bra	@r0		
    4ce0:	70 37       	jge	$-286    	;abs 0x4bc2
    4ce2:	00 00       	bra	@r0		
    4ce4:	20 00 0a 01 	bra	&0x0010a	
            }
    4ce8:	00 00       	bra	@r0		
    4cea:	00 00       	bra	@r0		
        }
    4cec:	81 37       	jge	$-252    	;abs 0x4bf0
    4cee:	00 00       	bra	@r0		
    }
    4cf0:	20 00 0c 01 	bra	&0x0010c	
}
    4cf4:	00 00       	bra	@r0		
    4cf6:	00 00       	bra	@r0		

    4cf8:	92 37       	jge	$-218    	;abs 0x4c1e
    4cfa:	00 00       	bra	@r0		
void process_menu(void){
    4cfc:	20 00 0e 01 	bra	&0x0010e	
    switch(MenuStep){
        case DISPLAY:
            lcd_goto(0,14);
    4d00:	00 00       	bra	@r0		
    4d02:	00 00       	bra	@r0		
    4d04:	a4 37       	jge	$-182    	;abs 0x4c4e
            printf("DISPLAY             ");
    4d06:	00 00       	bra	@r0		
    4d08:	20 00 10 01 	bra	&0x00110	
            
            lcd_clear(BLACK);
            lcd_goto(0,0);
    4d0c:	00 00       	bra	@r0		
    4d0e:	00 00       	bra	@r0		
            printf("   MAIN MENU\n\n");
    4d10:	b6 37       	jge	$-146    	;abs 0x4c7e
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
            MenuStep = SELECT;
    4d12:	00 00       	bra	@r0		
    4d14:	20 00 13 01 	bra	&0x00113	
    4d18:	00 00       	bra	@r0		
    4d1a:	00 00       	bra	@r0		
    4d1c:	c6 37       	jge	$-114    	;abs 0x4caa
    4d1e:	00 00       	bra	@r0		
    4d20:	20 00 15 01 	bra	&0x00115	
            break;
    4d24:	00 00       	bra	@r0		
        
    4d26:	00 00       	bra	@r0		
    4d28:	d6 37       	jge	$-82     	;abs 0x4cd6
        case SELECT: // fica neste step a maior parte do tempo
    4d2a:	00 00       	bra	@r0		
    4d2c:	20 00 17 01 	bra	&0x00117	
            lcd_goto(0,14);
    4d30:	00 00       	bra	@r0		
            printf("SELECT            ");
    4d32:	00 00       	bra	@r0		
    4d34:	e5 37       	jge	$-52     	;abs 0x4d00
            
    4d36:	00 00       	bra	@r0		
    4d38:	20 00 19 01 	bra	&0x00119	
            lcd_goto(0,14);
            printf("DISPLAY             ");
            
            lcd_clear(BLACK);
            lcd_goto(0,0);
            printf("   MAIN MENU\n\n");
    4d3c:	00 00       	bra	@r0		
    4d3e:	00 00       	bra	@r0		
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
            printf("SELECT            ");
            
            lcd_goto(0,(int)MenuOption + 2);
            printf(">");
    4d40:	f4 37       	jge	$-22     	;abs 0x4d2a
    4d42:	00 00       	bra	@r0		
    4d44:	20 00 1b 01 	bra	&0x0011b	
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    4d48:	00 00       	bra	@r0		
    4d4a:	00 00       	bra	@r0		
                MenuStep = WAIT_PITCH_DOWN;
            }
    4d4c:	05 38       	jl	$+12     	;abs 0x4d58
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    4d4e:	00 00       	bra	@r0		
    4d50:	20 00 1d 01 	bra	&0x0011d	
                    MenuStep = WAIT_PITCH_UP;
                }
            }
    4d54:	00 00       	bra	@r0		
            
    4d56:	00 00       	bra	@r0		
    4d58:	15 38       	jl	$+44     	;abs 0x4d84
            // select
    4d5a:	00 00       	bra	@r0		
    4d5c:	20 00 1f 01 	bra	&0x0011f	
            if(ChannelInput[ROLL_CH] > 3500){
    4d60:	00 00       	bra	@r0		
    4d62:	00 00       	bra	@r0		
    4d64:	26 38       	jl	$+78     	;abs 0x4db2
                MenuStep = WAIT_ROLL_LEFT;
    4d66:	00 00       	bra	@r0		
    4d68:	20 00 21 01 	bra	&0x00121	
            }
    4d6c:	00 00       	bra	@r0		
            
    4d6e:	00 00       	bra	@r0		
    4d70:	37 38       	jl	$+112    	;abs 0x4de0
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuStep = WAIT_PITCH_UP;
    4d72:	00 00       	bra	@r0		
    4d74:	20 00 23 01 	bra	&0x00123	
                MenuStep = WAIT_ROLL_LEFT;
            }
            
            break;
        
        case WAIT_PITCH_DOWN:
    4d78:	00 00       	bra	@r0		
            lcd_goto(0,14);
    4d7a:	00 00       	bra	@r0		
    4d7c:	48 38       	jl	$+146    	;abs 0x4e0e
    4d7e:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] > 2500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
    4d80:	20 00 25 01 	bra	&0x00125	
                MenuStep = SELECT;
            }
            break;
    4d84:	00 00       	bra	@r0		
        
    4d86:	00 00       	bra	@r0		
    4d88:	59 38       	jl	$+180    	;abs 0x4e3c
    4d8a:	00 00       	bra	@r0		
    4d8c:	20 00 2c 01 	bra	&0x0012c	
        case WAIT_PITCH_UP:
    4d90:	00 00       	bra	@r0		
    4d92:	00 00       	bra	@r0		
            lcd_goto(0,14);
    4d94:	69 38       	jl	$+212    	;abs 0x4e68
    4d96:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");

    4d98:	20 00 2e 01 	bra	&0x0012e	
            if(ChannelInput[PITCH_CH] < 3500){
    4d9c:	00 00       	bra	@r0		
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    4d9e:	00 00       	bra	@r0		
    4da0:	79 38       	jl	$+244    	;abs 0x4e94
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    4da2:	00 00       	bra	@r0		
    4da4:	20 00 30 01 	bra	&0x00130	
            }
    4da8:	00 00       	bra	@r0		
    4daa:	00 00       	bra	@r0		
            break;
    4dac:	88 38       	jl	$+274    	;abs 0x4ebe
    4dae:	00 00       	bra	@r0		
    4db0:	20 00 32 01 	bra	&0x00132	
        
    4db4:	00 00       	bra	@r0		
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    4db6:	00 00       	bra	@r0		
            printf("WAIT ROLL LEFT    ");
    4db8:	97 38       	jl	$+304    	;abs 0x4ee8
    4dba:	00 00       	bra	@r0		
            
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
    4dbc:	20 00 34 01 	bra	&0x00134	
    4dc0:	00 00       	bra	@r0		
    4dc2:	00 00       	bra	@r0		
    4dc4:	a7 38       	jl	$+336    	;abs 0x4f14
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
    4dc6:	00 00       	bra	@r0		
    4dc8:	20 00 36 01 	bra	&0x00136	
            break;
    4dcc:	00 00       	bra	@r0		
    4dce:	00 00       	bra	@r0		
    4dd0:	b7 38       	jl	$+368    	;abs 0x4f40
            
    4dd2:	00 00       	bra	@r0		
    4dd4:	20 00 38 01 	bra	&0x00138	
        case WAIT_CH7_BACK:
    4dd8:	00 00       	bra	@r0		
    4dda:	00 00       	bra	@r0		
    4ddc:	c8 38       	jl	$+402    	;abs 0x4f6e
            lcd_goto(0,14);
    4dde:	00 00       	bra	@r0		
    4de0:	20 00 3a 01 	bra	&0x0013a	
            printf("WAIT CH7 BACK    ");
    4de4:	00 00       	bra	@r0		
    4de6:	00 00       	bra	@r0		
    4de8:	d9 38       	jl	$+436    	;abs 0x4f9c
            
    4dea:	00 00       	bra	@r0		
    4dec:	20 00 3c 01 	bra	&0x0013c	
            if(ChannelInput[CH7_CH] < 2500){
    4df0:	00 00       	bra	@r0		
    4df2:	00 00       	bra	@r0		
                MenuStep = DISPLAY;
            }
    4df4:	ea 38       	jl	$+470    	;abs 0x4fca
            break;
    4df6:	00 00       	bra	@r0		
    4df8:	20 00 3e 01 	bra	&0x0013e	
    4dfc:	00 00       	bra	@r0		
                    
        case PROCESS_OPTION:
            process_option();
    4dfe:	00 00       	bra	@r0		
    4e00:	fc 38       	jl	$+506    	;abs 0x4ffa
    4e02:	00 00       	bra	@r0		
    4e04:	20 00 40 01 	bra	&0x00140	
    4e08:	00 00       	bra	@r0		
    4e0a:	00 00       	bra	@r0		
    4e0c:	0e 39       	jl	$+542    	;abs 0x502a
            break;
    4e0e:	00 00       	bra	@r0		
            
        case WAIT_ROLL_RIGHT:
    4e10:	20 00 43 01 	bra	&0x00143	
            break;    
    4e14:	00 00       	bra	@r0		
    4e16:	00 00       	bra	@r0		
    4e18:	1e 39       	jl	$+574    	;abs 0x5056
    4e1a:	00 00       	bra	@r0		
    }
    4e1c:	20 00 45 01 	bra	&0x00145	
    4e20:	00 00       	bra	@r0		
}
    4e22:	00 00       	bra	@r0		
    4e24:	2e 39       	jl	$+606    	;abs 0x5082
    4e26:	00 00       	bra	@r0		

    4e28:	20 00 47 01 	bra	&0x00147	
    4e2c:	00 00       	bra	@r0		
void process_option(){
    4e2e:	00 00       	bra	@r0		
    4e30:	3d 39       	jl	$+636    	;abs 0x50ac
    4e32:	00 00       	bra	@r0		
    int i;
    switch (MenuOption){
    4e34:	20 00 49 01 	bra	&0x00149	
    4e38:	00 00       	bra	@r0		
    4e3a:	00 00       	bra	@r0		
    4e3c:	4c 39       	jl	$+666    	;abs 0x50d6
    4e3e:	00 00       	bra	@r0		
        case RADIO_RAW:
    4e40:	20 00 4b 01 	bra	&0x0014b	
    4e44:	00 00       	bra	@r0		
    4e46:	00 00       	bra	@r0		
    4e48:	5d 39       	jl	$+700    	;abs 0x5104
    4e4a:	00 00       	bra	@r0		
            draw_rc_inputs(1);
            break;
    4e4c:	20 00 4d 01 	bra	&0x0014d	
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
    4e50:	00 00       	bra	@r0		
        case ANALOG_MONITOR:
    4e52:	00 00       	bra	@r0		
    4e54:	6d 39       	jl	$+732    	;abs 0x5130
    4e56:	00 00       	bra	@r0		
    4e58:	20 00 4f 01 	bra	&0x0014f	
    4e5c:	00 00       	bra	@r0		
            process_analog_menu();
            break;
        
    4e5e:	00 00       	bra	@r0		
    4e60:	7e 39       	jl	$+766    	;abs 0x515e
    4e62:	00 00       	bra	@r0		
    4e64:	20 00 51 01 	bra	&0x00151	
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    4e68:	00 00       	bra	@r0		
    4e6a:	00 00       	bra	@r0		
                lcd_goto(8,8);
    4e6c:	8f 39       	jl	$+800    	;abs 0x518c
    4e6e:	00 00       	bra	@r0		
    4e70:	20 00 53 01 	bra	&0x00153	
                printf("%d", i);
    4e74:	00 00       	bra	@r0		
    4e76:	00 00       	bra	@r0		
    4e78:	a0 39       	jl	$+834    	;abs 0x51ba
                delayms(1000);
    4e7a:	00 00       	bra	@r0		
    4e7c:	20 00 55 01 	bra	&0x00155	
    4e80:	00 00       	bra	@r0		
    4e82:	00 00       	bra	@r0		
            }
    4e84:	b1 39       	jl	$+868    	;abs 0x51e8
    4e86:	00 00       	bra	@r0		
    4e88:	20 00 58 01 	bra	&0x00158	
            MotorArmed = TRUE;
    4e8c:	00 00       	bra	@r0		
    4e8e:	00 00       	bra	@r0		
    4e90:	be 39       	jl	$+894    	;abs 0x520e
            MenuVisible = FALSE;
    4e92:	00 00       	bra	@r0		
    4e94:	20 00 5a 01 	bra	&0x0015a	
            lcd_clear(BLACK);
    4e98:	00 00       	bra	@r0		
    4e9a:	00 00       	bra	@r0		
    4e9c:	cc 39       	jl	$+922    	;abs 0x5236
            MenuStep = DISPLAY;
    4e9e:	00 00       	bra	@r0		
    4ea0:	20 00 1a 00 	bra	&0x0001a	
            break;
    4ea4:	00 00       	bra	@r0		
    4ea6:	00 00       	bra	@r0		
            
        case INITIAL_SETTINGS:
    4ea8:	d9 39       	jl	$+948    	;abs 0x525c
            // seta o flag initial setup
    4eaa:	00 00       	bra	@r0		
    4eac:	20 00 1c 00 	bra	&0x0001c	
    4eb0:	00 00       	bra	@r0		
            break;          
    }
    
    4eb2:	00 00       	bra	@r0		
    4eb4:	e7 39       	jl	$+976    	;abs 0x5284
    4eb6:	00 00       	bra	@r0		
    4eb8:	20 00 1e 00 	bra	&0x0001e	
    4ebc:	00 00       	bra	@r0		
    4ebe:	00 00       	bra	@r0		
    4ec0:	f3 39       	jl	$+1000   	;abs 0x52a8
    if(ChannelInput[CH7_CH] > 3500){
    4ec2:	00 00       	bra	@r0		
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    4ec4:	20 00 21 00 	bra	&0x00021	
        lcd_clear(BLACK);
    4ec8:	00 00       	bra	@r0		
    4eca:	00 00       	bra	@r0		
    4ecc:	03 3a       	jl	$-1016   	;abs 0x4ad4
    4ece:	00 00       	bra	@r0		
    }
    4ed0:	20 00 23 00 	bra	&0x00023	
    4ed4:	00 00       	bra	@r0		
}
    4ed6:	00 00       	bra	@r0		
    4ed8:	13 3a       	jl	$-984    	;abs 0x4b00
    4eda:	00 00       	bra	@r0		
    4edc:	20 00 25 00 	bra	&0x00025	

    4ee0:	00 00       	bra	@r0		
    4ee2:	00 00       	bra	@r0		
    4ee4:	22 3a       	jl	$-954    	;abs 0x4b2a
void draw_analog_graph(void){
    4ee6:	00 00       	bra	@r0		
    4ee8:	20 00 27 00 	bra	&0x00027	
    4eec:	00 00       	bra	@r0		
    lcd_goto(4,4);
    4eee:	00 00       	bra	@r0		
    4ef0:	31 3a       	jl	$-924    	;abs 0x4b54
    4ef2:	00 00       	bra	@r0		
    printf("FAZER");
    4ef4:	20 00 47 00 	bra	&0x00047	
    4ef8:	00 00       	bra	@r0		
}

    4efa:	00 00       	bra	@r0		
    4efc:	41 3a       	jl	$-892    	;abs 0x4b80
    4efe:	00 00       	bra	@r0		
    4f00:	20 00 49 00 	bra	&0x00049	
    4f04:	00 00       	bra	@r0		
void process_analog_menu(void){
    4f06:	00 00       	bra	@r0		
    4f08:	50 3a       	jl	$-862    	;abs 0x4baa
    4f0a:	00 00       	bra	@r0		
    4f0c:	20 00 ac 00 	bra	&0x000ac	
    4f10:	00 00       	bra	@r0		
    switch(MenuAnalog){
        case DISPLAY:
    4f12:	00 00       	bra	@r0		
    4f14:	5e 3a       	jl	$-834    	;abs 0x4bd2
            lcd_goto(0,14);
            printf("DISPLAY             ");

    4f16:	00 00       	bra	@r0		
            refresh_analog_menu();
    4f18:	20 00 16 00 	bra	&0x00016	
    4f1c:	00 00       	bra	@r0		
    4f1e:	00 00       	bra	@r0		
    4f20:	6a 3a       	jl	$-810    	;abs 0x4bf6
    4f22:	00 00       	bra	@r0		
            MenuAnalog = SELECT;
            break;
        case SELECT:
    4f24:	20 00 18 00 	bra	&0x00018	
    4f28:	00 00       	bra	@r0		
    4f2a:	00 00       	bra	@r0		
    4f2c:	77 3a       	jl	$-784    	;abs 0x4c1c
            lcd_goto(0,14);
            printf("SELECT            ");

    4f2e:	00 00       	bra	@r0		
    4f30:	20 00 1a 00 	bra	&0x0001a	
            // move para os lados
    4f34:	00 00       	bra	@r0		
    4f36:	00 00       	bra	@r0		
    4f38:	82 3a       	jl	$-762    	;abs 0x4c3e
            if(ChannelInput[ROLL_CH] > 3500){
    4f3a:	00 00       	bra	@r0		
    4f3c:	20 00 1d 00 	bra	&0x0001d	
                MenuAnalog = WAIT_ROLL_LEFT;
    4f40:	00 00       	bra	@r0		
    4f42:	00 00       	bra	@r0		
    4f44:	91 3a       	jl	$-732    	;abs 0x4c68
            }
    4f46:	00 00       	bra	@r0		
    4f48:	20 00 1f 00 	bra	&0x0001f	
            else{
    4f4c:	00 00       	bra	@r0		
    4f4e:	00 00       	bra	@r0		
                if(ChannelInput[ROLL_CH] < 2500){
    4f50:	a0 3a       	jl	$-702    	;abs 0x4c92
    4f52:	00 00       	bra	@r0		
    4f54:	20 00 21 00 	bra	&0x00021	
    4f58:	00 00       	bra	@r0		
                    MenuAnalog = WAIT_ROLL_RIGHT;
    4f5a:	00 00       	bra	@r0		
    4f5c:	af 3a       	jl	$-672    	;abs 0x4cbc
    4f5e:	00 00       	bra	@r0		
                }
    4f60:	20 00 23 00 	bra	&0x00023	
    4f64:	00 00       	bra	@r0		
    4f66:	00 00       	bra	@r0		
            }
    4f68:	bd 3a       	jl	$-644    	;abs 0x4ce4
    4f6a:	00 00       	bra	@r0		
    4f6c:	20 00 25 00 	bra	&0x00025	
            
    4f70:	00 00       	bra	@r0		
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    4f72:	00 00       	bra	@r0		
                MenuAnalog = WAIT_PITCH_DOWN;
    4f74:	cb 3a       	jl	$-616    	;abs 0x4d0c
    4f76:	00 00       	bra	@r0		
    4f78:	20 00 27 00 	bra	&0x00027	
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    4f7c:	00 00       	bra	@r0		
    4f7e:	00 00       	bra	@r0		
    4f80:	d9 3a       	jl	$-588    	;abs 0x4d34
    4f82:	00 00       	bra	@r0		
    4f84:	20 00 2c 00 	bra	&0x0002c	
    4f88:	00 00       	bra	@r0		
    4f8a:	00 00       	bra	@r0		
                    MenuAnalog = WAIT_PITCH_UP;
    4f8c:	e8 3a       	jl	$-558    	;abs 0x4d5e
                }
            }
    4f8e:	00 00       	bra	@r0		
    4f90:	20 00 2e 00 	bra	&0x0002e	
            
    4f94:	00 00       	bra	@r0		
    4f96:	00 00       	bra	@r0		
    4f98:	f7 3a       	jl	$-528    	;abs 0x4d88
            break;
    4f9a:	00 00       	bra	@r0		
    4f9c:	20 00 30 00 	bra	&0x00030	
        case WAIT_PITCH_DOWN:
    4fa0:	00 00       	bra	@r0		
    4fa2:	00 00       	bra	@r0		
    4fa4:	06 3b       	jl	$-498    	;abs 0x4db2
            lcd_goto(0,14);
    4fa6:	00 00       	bra	@r0		
    4fa8:	20 00 32 00 	bra	&0x00032	
            printf("WAIT PITCH DOWN    ");
    4fac:	00 00       	bra	@r0		
    4fae:	00 00       	bra	@r0		

    4fb0:	15 3b       	jl	$-468    	;abs 0x4ddc
    4fb2:	00 00       	bra	@r0		
    4fb4:	20 00 34 00 	bra	&0x00034	
    4fb8:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] > 2500){
    4fba:	00 00       	bra	@r0		
    4fbc:	23 3b       	jl	$-440    	;abs 0x4e04
    4fbe:	00 00       	bra	@r0		
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
    4fc0:	20 00 36 00 	bra	&0x00036	
    4fc4:	00 00       	bra	@r0		
    4fc6:	00 00       	bra	@r0		
    4fc8:	31 3b       	jl	$-412    	;abs 0x4e2c
    4fca:	00 00       	bra	@r0		
    4fcc:	20 00 38 00 	bra	&0x00038	
            }
            break;
    4fd0:	00 00       	bra	@r0		
    4fd2:	00 00       	bra	@r0		
    4fd4:	3f 3b       	jl	$-384    	;abs 0x4e54
    4fd6:	00 00       	bra	@r0		
    4fd8:	20 00 3a 00 	bra	&0x0003a	
            
    4fdc:	00 00       	bra	@r0		
    4fde:	00 00       	bra	@r0		
    4fe0:	4d 3b       	jl	$-356    	;abs 0x4e7c
        case WAIT_PITCH_UP:
    4fe2:	00 00       	bra	@r0		
    4fe4:	20 00 7a 00 	bra	&0x0007a	
    4fe8:	00 00       	bra	@r0		
    4fea:	00 00       	bra	@r0		
    4fec:	5c 3b       	jl	$-326    	;abs 0x4ea6
    4fee:	00 00       	bra	@r0		
    4ff0:	20 00 14 00 	bra	&0x00014	
    4ff4:	00 00       	bra	@r0		
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");
    4ff6:	00 00       	bra	@r0		
    4ff8:	6a 3b       	jl	$-298    	;abs 0x4ece
    4ffa:	00 00       	bra	@r0		
    4ffc:	20 00 16 00 	bra	&0x00016	

    5000:	00 00       	bra	@r0		
    5002:	00 00       	bra	@r0		
    5004:	79 3b       	jl	$-268    	;abs 0x4ef8
            if(ChannelInput[PITCH_CH] < 3500){
    5006:	00 00       	bra	@r0		
    5008:	20 00 18 00 	bra	&0x00018	
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
            }
    500c:	00 00       	bra	@r0		
    500e:	00 00       	bra	@r0		
    5010:	88 3b       	jl	$-238    	;abs 0x4f22
    5012:	00 00       	bra	@r0		
    5014:	20 00 1b 00 	bra	&0x0001b	
            break;
            
        case WAIT_ROLL_RIGHT:
    5018:	00 00       	bra	@r0		
    501a:	00 00       	bra	@r0		
    501c:	97 3b       	jl	$-208    	;abs 0x4f4c
    501e:	00 00       	bra	@r0		
    5020:	20 00 14 00 	bra	&0x00014	
                lcd_goto(0,14);
                printf("WAIT ROLL RIGHT ");

    5024:	00 00       	bra	@r0		
                if(ChannelInput[PITCH_CH] < 3500){
    5026:	00 00       	bra	@r0		
    5028:	a4 3b       	jl	$-182    	;abs 0x4f72
    502a:	00 00       	bra	@r0		
    502c:	20 00 16 00 	bra	&0x00016	
                    if(AnalogSelect > 0){
    5030:	00 00       	bra	@r0		
    5032:	00 00       	bra	@r0		
                        AnalogSelect--;
    5034:	b1 3b       	jl	$-156    	;abs 0x4f98
    5036:	00 00       	bra	@r0		
    5038:	20 00 18 00 	bra	&0x00018	
    503c:	00 00       	bra	@r0		
                    }
    503e:	00 00       	bra	@r0		
    5040:	be 3b       	jl	$-130    	;abs 0x4fbe
    5042:	00 00       	bra	@r0		
                    MenuAnalog = DISPLAY;
    5044:	20 00 14 00 	bra	&0x00014	
    5048:	00 00       	bra	@r0		
    504a:	00 00       	bra	@r0		
                }
    504c:	cc 3b       	jl	$-102    	;abs 0x4fe6
    504e:	00 00       	bra	@r0		
    5050:	20 00 16 00 	bra	&0x00016	
            break;
    5054:	00 00       	bra	@r0		
            
    5056:	00 00       	bra	@r0		
    5058:	da 3b       	jl	$-74     	;abs 0x500e
    505a:	00 00       	bra	@r0		
    505c:	20 00 18 00 	bra	&0x00018	
        case WAIT_ROLL_LEFT:
    5060:	00 00       	bra	@r0		
    5062:	00 00       	bra	@r0		
    5064:	e6 3b       	jl	$-50     	;abs 0x5032
                lcd_goto(0,14);
    5066:	00 00       	bra	@r0		
    5068:	20 00 12 00 	bra	&0x00012	
    506c:	00 00       	bra	@r0		
                printf("WAIT ROLL LEFT   ");
    506e:	00 00       	bra	@r0		
    5070:	f7 3b       	jl	$-16     	;abs 0x5060
    5072:	00 00       	bra	@r0		
        
    5074:	20 00 14 00 	bra	&0x00014	
                if(ChannelInput[PITCH_CH] > 2500){
                   if(AnalogSelect < 7){
    5078:	00 00       	bra	@r0		
                        AnalogSelect++;
    507a:	00 00       	bra	@r0		
    507c:	08 3c       	jmp	$+18     	;abs 0x508e
    507e:	00 00       	bra	@r0		
    5080:	20 00 16 00 	bra	&0x00016	
                    }
                    MenuAnalog = DISPLAY;

    5084:	00 00       	bra	@r0		
    5086:	00 00       	bra	@r0		
    5088:	18 3c       	jmp	$+50     	;abs 0x50ba
    508a:	00 00       	bra	@r0		
    508c:	20 00 18 00 	bra	&0x00018	
    5090:	00 00       	bra	@r0		
                }
    5092:	00 00       	bra	@r0		
            break;
            
    5094:	27 3c       	jmp	$+80     	;abs 0x50e4
    5096:	00 00       	bra	@r0		
        case PROCESS_OPTION:
    5098:	20 00 1a 00 	bra	&0x0001a	
    509c:	00 00       	bra	@r0		
    509e:	00 00       	bra	@r0		
            break;
    50a0:	36 3c       	jmp	$+110    	;abs 0x510e
    50a2:	00 00       	bra	@r0		
    50a4:	20 00 58 00 	bra	&0x00058	
        case WAIT_CH7_BACK:
    50a8:	00 00       	bra	@r0		
    50aa:	00 00       	bra	@r0		
    50ac:	44 3c       	jmp	$+138    	;abs 0x5136
    50ae:	00 00       	bra	@r0		
            break;
    50b0:	20 00 64 00 	bra	&0x00064	
    50b4:	00 00       	bra	@r0		
    }
    50b6:	00 00       	bra	@r0		
    50b8:	55 3c       	jmp	$+172    	;abs 0x5164
    50ba:	00 00       	bra	@r0		
    50bc:	20 00 66 00 	bra	&0x00066	
}
    50c0:	00 00       	bra	@r0		
    50c2:	00 00       	bra	@r0		

    50c4:	66 3c       	jmp	$+206    	;abs 0x5192
    50c6:	00 00       	bra	@r0		
void refresh_analog_menu(void){
    50c8:	20 00 68 00 	bra	&0x00068	
    50cc:	00 00       	bra	@r0		
    50ce:	00 00       	bra	@r0		
    50d0:	77 3c       	jmp	$+240    	;abs 0x51c0
    int i;
    50d2:	00 00       	bra	@r0		
    50d4:	20 00 6a 00 	bra	&0x0006a	
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    50d8:	00 00       	bra	@r0		
    50da:	00 00       	bra	@r0		
    50dc:	88 3c       	jmp	$+274    	;abs 0x51ee
    50de:	00 00       	bra	@r0		
    50e0:	20 00 6c 00 	bra	&0x0006c	
    50e4:	00 00       	bra	@r0		
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
    50e6:	00 00       	bra	@r0		
    50e8:	99 3c       	jmp	$+308    	;abs 0x521c
    50ea:	00 00       	bra	@r0		
    50ec:	20 00 6e 00 	bra	&0x0006e	
    50f0:	00 00       	bra	@r0		
    50f2:	00 00       	bra	@r0		
            color_fore = BLACK;
    50f4:	aa 3c       	jmp	$+342    	;abs 0x524a
    50f6:	00 00       	bra	@r0		
    50f8:	20 00 70 00 	bra	&0x00070	
        }
    50fc:	00 00       	bra	@r0		
    50fe:	00 00       	bra	@r0		
    5100:	bb 3c       	jmp	$+376    	;abs 0x5278
    5102:	00 00       	bra	@r0		
    5104:	20 00 72 00 	bra	&0x00072	
    5108:	00 00       	bra	@r0		
    510a:	00 00       	bra	@r0		
    510c:	cc 3c       	jmp	$+410    	;abs 0x52a6
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
    510e:	00 00       	bra	@r0		
    5110:	20 00 74 00 	bra	&0x00074	
    5114:	00 00       	bra	@r0		
    5116:	00 00       	bra	@r0		
            color_fore = LIME;
    5118:	dd 3c       	jmp	$+444    	;abs 0x52d4
    511a:	00 00       	bra	@r0		
    511c:	20 00 76 00 	bra	&0x00076	
        }
    5120:	00 00       	bra	@r0		
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    5122:	00 00       	bra	@r0		
            color_fore = RED;           // a cor da letra muda para vermelho 
    5124:	ee 3c       	jmp	$+478    	;abs 0x5302
    5126:	00 00       	bra	@r0		
    5128:	20 00 78 00 	bra	&0x00078	
    512c:	00 00       	bra	@r0		
    512e:	00 00       	bra	@r0		
#include "signal.h"
#include "msp430x261x.h"
#include "delay.h"
#include "analog.h"
#include "lcd6100.h"
#include "eeprom.h"
    5130:	00 3d       	jmp	$+514    	;abs 0x5332
    5132:	00 00       	bra	@r0		
#include "i2c.h"
#include "microquad.h"
    5134:	20 00 7a 00 	bra	&0x0007a	

    5138:	00 00       	bra	@r0		
    513a:	00 00       	bra	@r0		
    513c:	12 3d       	jmp	$+550    	;abs 0x5362
volatile unsigned int ControlCounter = 0;
    513e:	00 00       	bra	@r0		
    5140:	20 00 7c 00 	bra	&0x0007c	
volatile unsigned int RCCounter = 0;
    5144:	00 00       	bra	@r0		
    5146:	00 00       	bra	@r0		
volatile unsigned int MenuCounter = 0;
    5148:	24 3d       	jmp	$+586    	;abs 0x5392
/*
    StatusFlags:
    514a:	00 00       	bra	@r0		
    514c:	20 00 7e 00 	bra	&0x0007e	
    5150:	00 00       	bra	@r0		
    5152:	00 00       	bra	@r0		
    5154:	36 3d       	jmp	$+622    	;abs 0x53c2
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
    5156:	00 00       	bra	@r0		
    5158:	20 00 80 00 	bra	&0x00080	
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
    515c:	00 00       	bra	@r0		
    515e:	00 00       	bra	@r0		
    5160:	48 3d       	jmp	$+658    	;abs 0x53f2
    5162:	00 00       	bra	@r0		
    5164:	20 00 82 00 	bra	&0x00082	
    5168:	00 00       	bra	@r0		
    516a:	00 00       	bra	@r0		
    516c:	5a 3d       	jmp	$+694    	;abs 0x5422
    516e:	00 00       	bra	@r0		
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
    5170:	20 00 8b 00 	bra	&0x0008b	
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE
    5174:	00 00       	bra	@r0		
    5176:	00 00       	bra	@r0		
    5178:	6c 3d       	jmp	$+730    	;abs 0x5452
    517a:	00 00       	bra	@r0		
    517c:	20 00 8d 00 	bra	&0x0008d	
    5180:	00 00       	bra	@r0		

    5182:	00 00       	bra	@r0		
    5184:	7e 3d       	jmp	$+766    	;abs 0x5482
MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
    5186:	00 00       	bra	@r0		
    5188:	20 00 8f 00 	bra	&0x0008f	
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
    518c:	00 00       	bra	@r0		
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal
    518e:	00 00       	bra	@r0		
    5190:	90 3d       	jmp	$+802    	;abs 0x54b2

    5192:	00 00       	bra	@r0		
    5194:	20 00 91 00 	bra	&0x00091	
// variaveis usadas no menu analog graph
    5198:	00 00       	bra	@r0		
    519a:	00 00       	bra	@r0		
    519c:	a2 3d       	jmp	$+838    	;abs 0x54e2
    519e:	00 00       	bra	@r0		
    51a0:	20 00 93 00 	bra	&0x00093	
    51a4:	00 00       	bra	@r0		
    51a6:	00 00       	bra	@r0		
    51a8:	b4 3d       	jmp	$+874    	;abs 0x5512
    51aa:	00 00       	bra	@r0		
    51ac:	20 00 95 00 	bra	&0x00095	
    51b0:	00 00       	bra	@r0		
    51b2:	00 00       	bra	@r0		
    51b4:	c6 3d       	jmp	$+910    	;abs 0x5542
    51b6:	00 00       	bra	@r0		
    51b8:	20 00 97 00 	bra	&0x00097	
    51bc:	00 00       	bra	@r0		
    51be:	00 00       	bra	@r0		
    51c0:	d8 3d       	jmp	$+946    	;abs 0x5572
    51c2:	00 00       	bra	@r0		
    51c4:	20 00 99 00 	bra	&0x00099	
    51c8:	00 00       	bra	@r0		
    51ca:	00 00       	bra	@r0		
    51cc:	ea 3d       	jmp	$+982    	;abs 0x55a2
    51ce:	00 00       	bra	@r0		
    51d0:	20 00 9b 00 	bra	&0x0009b	
    51d4:	00 00       	bra	@r0		
    51d6:	00 00       	bra	@r0		
    51d8:	fc 3d       	jmp	$+1018   	;abs 0x55d2
    51da:	00 00       	bra	@r0		
    51dc:	20 00 9d 00 	bra	&0x0009d	
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
    51e0:	00 00       	bra	@r0		
    51e2:	00 00       	bra	@r0		
    51e4:	0e 3e       	jmp	$-994    	;abs 0x4e02
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
    51e6:	00 00       	bra	@r0		
    51e8:	20 00 9f 00 	bra	&0x0009f	
    51ec:	00 00       	bra	@r0		
    51ee:	00 00       	bra	@r0		
    51f0:	21 3e       	jmp	$-956    	;abs 0x4e34
    51f2:	00 00       	bra	@r0		
    51f4:	20 00 a1 00 	bra	&0x000a1	
    51f8:	00 00       	bra	@r0		
    51fa:	00 00       	bra	@r0		
    51fc:	34 3e       	jmp	$-918    	;abs 0x4e66
    51fe:	00 00       	bra	@r0		
    5200:	20 00 a3 00 	bra	&0x000a3	
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 
    5204:	00 00       	bra	@r0		
    5206:	00 00       	bra	@r0		
    5208:	47 3e       	jmp	$-880    	;abs 0x4e98
    520a:	00 00       	bra	@r0		
    520c:	20 00 a5 00 	bra	&0x000a5	

// variaveis ajuste radio
    5210:	00 00       	bra	@r0		
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    5212:	00 00       	bra	@r0		
    5214:	5a 3e       	jmp	$-842    	;abs 0x4eca
    5216:	00 00       	bra	@r0		
    5218:	20 00 a7 00 	bra	&0x000a7	

    521c:	00 00       	bra	@r0		
    521e:	00 00       	bra	@r0		
    5220:	6d 3e       	jmp	$-804    	;abs 0x4efc
    5222:	00 00       	bra	@r0		
    5224:	20 00 a9 00 	bra	&0x000a9	
    5228:	00 00       	bra	@r0		
    522a:	00 00       	bra	@r0		
    522c:	80 3e       	jmp	$-766    	;abs 0x4f2e
    522e:	00 00       	bra	@r0		
// variaveis leitura radio raw
    5230:	20 00 12 00 	bra	&0x00012	
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    5234:	00 00       	bra	@r0		
    5236:	00 00       	bra	@r0		
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    5238:	92 3e       	jmp	$-730    	;abs 0x4f5e
    523a:	00 00       	bra	@r0		
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    523c:	20 00 14 00 	bra	&0x00014	

    5240:	00 00       	bra	@r0		
    5242:	00 00       	bra	@r0		
    5244:	a4 3e       	jmp	$-694    	;abs 0x4f8e
int main(){
    5246:	00 00       	bra	@r0		
    5248:	20 00 16 00 	bra	&0x00016	
    524c:	00 00       	bra	@r0		
    524e:	00 00       	bra	@r0		
    5250:	b6 3e       	jmp	$-658    	;abs 0x4fbe
    5252:	00 00       	bra	@r0		
    5254:	20 00 18 00 	bra	&0x00018	
    5258:	00 00       	bra	@r0		
    525a:	00 00       	bra	@r0		
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    INICIO: //loop main, vir para ca no caso de um reset
    525c:	c8 3e       	jmp	$-622    	;abs 0x4fee
    525e:	00 00       	bra	@r0		
    5260:	20 00 18 00 	bra	&0x00018	
    5264:	00 00       	bra	@r0		
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    5266:	00 00       	bra	@r0		
    5268:	d7 3e       	jmp	$-592    	;abs 0x5018
    526a:	00 00       	bra	@r0		
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio

    lcd_clear(BLACK);
    526c:	20 00 1a 00 	bra	&0x0001a	
    5270:	00 00       	bra	@r0		
    
    MenuOption = RADIO_RAW;
    5272:	00 00       	bra	@r0		
    MenuStep = DISPLAY;
    5274:	e6 3e       	jmp	$-562    	;abs 0x5042
    5276:	00 00       	bra	@r0		
    5278:	20 00 1d 00 	bra	&0x0001d	
    527c:	00 00       	bra	@r0		
    527e:	00 00       	bra	@r0		
    5280:	f3 3e       	jmp	$-536    	;abs 0x5068
    5282:	00 00       	bra	@r0		
    5284:	20 00 3f 00 	bra	&0x0003f	
    5288:	00 00       	bra	@r0		
    MenuVisible = TRUE;     // inicializa mostrando o menu
    528a:	00 00       	bra	@r0		
    528c:	02 3f       	jmp	$-506    	;abs 0x5092
        
    528e:	00 00       	bra	@r0		
    5290:	20 00 41 00 	bra	&0x00041	
    while(1){
    5294:	00 00       	bra	@r0		
        /* os Counters sao incrementados na interrution do timerA
    5296:	00 00       	bra	@r0		
    5298:	17 3f       	jmp	$-464    	;abs 0x50c8
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
    529a:	00 00       	bra	@r0		
    529c:	20 00 43 00 	bra	&0x00043	
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
    52a0:	00 00       	bra	@r0		
    52a2:	00 00       	bra	@r0		
    52a4:	26 3f       	jmp	$-434    	;abs 0x50f2
    52a6:	00 00       	bra	@r0		
    52a8:	20 00 45 00 	bra	&0x00045	
    52ac:	00 00       	bra	@r0		
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(MotorArmed == TRUE){
    52ae:	00 00       	bra	@r0		
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
    52b0:	34 3f       	jmp	$-406    	;abs 0x511a
    52b2:	00 00       	bra	@r0		
    52b4:	20 00 47 00 	bra	&0x00047	
    52b8:	00 00       	bra	@r0		
    52ba:	00 00       	bra	@r0		
    52bc:	43 3f       	jmp	$-376    	;abs 0x5144
    52be:	00 00       	bra	@r0		
    52c0:	20 00 49 00 	bra	&0x00049	
    52c4:	00 00       	bra	@r0		
    52c6:	00 00       	bra	@r0		
    52c8:	51 3f       	jmp	$-348    	;abs 0x516c
    52ca:	00 00       	bra	@r0		
    52cc:	20 00 4c 00 	bra	&0x0004c	
    52d0:	00 00       	bra	@r0		
    52d2:	00 00       	bra	@r0		
    52d4:	60 3f       	jmp	$-318    	;abs 0x5196
    52d6:	00 00       	bra	@r0		
    52d8:	20 00 4e 00 	bra	&0x0004e	
    52dc:	00 00       	bra	@r0		
    52de:	00 00       	bra	@r0		
    52e0:	6e 3f       	jmp	$-290    	;abs 0x51be
    52e2:	00 00       	bra	@r0		
    52e4:	20 00 50 00 	bra	&0x00050	
    52e8:	00 00       	bra	@r0		
    52ea:	00 00       	bra	@r0		
    52ec:	7d 3f       	jmp	$-260    	;abs 0x51e8
    52ee:	00 00       	bra	@r0		
    52f0:	20 00 52 00 	bra	&0x00052	
    52f4:	00 00       	bra	@r0		
    P1IE = PPM_P1MASK;

}

void timer_a3_init(void)
{
    52f6:	00 00       	bra	@r0		
    52f8:	8b 3f       	jmp	$-232    	;abs 0x5210
    52fa:	00 00       	bra	@r0		
    52fc:	20 00 54 00 	bra	&0x00054	
    5300:	00 00       	bra	@r0		
    5302:	00 00       	bra	@r0		
    5304:	9a 3f       	jmp	$-202    	;abs 0x523a
    5306:	00 00       	bra	@r0		
    5308:	20 00 56 00 	bra	&0x00056	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    530c:	00 00       	bra	@r0		
    530e:	00 00       	bra	@r0		
    5310:	a8 3f       	jmp	$-174    	;abs 0x5262
    5312:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5314:	20 00 59 00 	bra	&0x00059	
                MenuStep = SELECT;
    5318:	00 00       	bra	@r0		
    531a:	00 00       	bra	@r0		
    531c:	b7 3f       	jmp	$-144    	;abs 0x528c
    531e:	00 00       	bra	@r0		
    5320:	20 00 5b 00 	bra	&0x0005b	
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5324:	00 00       	bra	@r0		
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5326:	00 00       	bra	@r0		
    5328:	c5 3f       	jmp	$-116    	;abs 0x52b4
    532a:	00 00       	bra	@r0		
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    532c:	20 00 5d 00 	bra	&0x0005d	
            
    5330:	00 00       	bra	@r0		
    5332:	00 00       	bra	@r0		
    5334:	d4 3f       	jmp	$-86     	;abs 0x52de
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5336:	00 00       	bra	@r0		
    5338:	20 00 5f 00 	bra	&0x0005f	
    533c:	00 00       	bra	@r0		
    533e:	00 00       	bra	@r0		
    5340:	e2 3f       	jmp	$-58     	;abs 0x5306
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
    5342:	00 00       	bra	@r0		
    5344:	20 00 61 00 	bra	&0x00061	
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    5348:	00 00       	bra	@r0		
    534a:	00 00       	bra	@r0		
    534c:	f1 3f       	jmp	$-28     	;abs 0x5330
    534e:	00 00       	bra	@r0		
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5350:	20 00 63 00 	bra	&0x00063	
    5354:	00 00       	bra	@r0		
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5356:	00 00       	bra	@r0		
    5358:	ff 3f       	jmp	$+0      	;abs 0x5358
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    535a:	00 00       	bra	@r0		
    535c:	20 00 47 00 	bra	&0x00047	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5360:	00 00       	bra	@r0		
    5362:	00 00       	bra	@r0		
            lcd_goto(0,14);
    5364:	0d 40       	mov	r0,	r13	
    5366:	00 00       	bra	@r0		
    5368:	20 00 45 00 	bra	&0x00045	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    536c:	00 00       	bra	@r0		

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    536e:	00 00       	bra	@r0		
    5370:	18 40 00 00 	mov	0x0000,	r8	;PC rel. 0x05374
    5374:	20 00 4c 00 	bra	&0x0004c	
    5378:	00 00       	bra	@r0		
    537a:	00 00       	bra	@r0		
    537c:	24 40       	mov	@r0,	r4	
    537e:	00 00       	bra	@r0		
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    5380:	20 00 54 00 	bra	&0x00054	
    5384:	00 00       	bra	@r0		
    5386:	00 00       	bra	@r0		
    5388:	2f 40       	mov	@r0,	r15	
    538a:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
    538c:	20 00 5c 00 	bra	&0x0005c	
    5390:	00 00       	bra	@r0		
    5392:	00 00       	bra	@r0		
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5394:	3b 40 00 00 	mov	#0,	r11	;#0x0000
    5398:	20 00 6e 00 	bra	&0x0006e	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    539c:	00 00       	bra	@r0		
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    539e:	00 00       	bra	@r0		
    53a0:	4f 40       	mov.b	r0,	r15	
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
    53a2:	00 00       	bra	@r0		
    53a4:	20 00 70 00 	bra	&0x00070	
        channel_num++;
    53a8:	00 00       	bra	@r0		
    }
    53aa:	00 00       	bra	@r0		
    53ac:	65 40       	mov.b	@r0,	r5	
    53ae:	00 00       	bra	@r0		
    53b0:	20 00 72 00 	bra	&0x00072	
}
    53b4:	00 00       	bra	@r0		
    53b6:	00 00       	bra	@r0		
    53b8:	7b 40 00 00 	mov.b	#0,	r11	;#0x0000

void calibrate_radio(void){
    53bc:	20 00 74 00 	bra	&0x00074	
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }
    53c0:	00 00       	bra	@r0		
    53c2:	00 00       	bra	@r0		
    53c4:	92 40 00 00 	mov	0x0000,	&0x0020	;PC rel. 0x053c8
    53c8:	20 00 

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    53ca:	76 00 00 00 	mova	r0,	0(r6)	;0x0000(r6)
    53ce:	00 00       	bra	@r0		
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    53d0:	a9 40 00 00 	mov	@r0,	0(r9)	;0x0000(r9)
    
    53d4:	20 00 93 00 	bra	&0x00093	
    53d8:	00 00       	bra	@r0		
    53da:	00 00       	bra	@r0		
    53dc:	bd 40 00 00 	mov	#0,	32(r13)	;#0x0000, 0x0020(r13)
    53e0:	20 00 
    53e2:	95 00 00 00 	cmpa	#0x00000,r5	
    53e6:	00 00       	bra	@r0		
    53e8:	d1 40 00 00 	mov.b	0x0000,	32(r1)	;PC rel. 0x053ec, 0x0020(r1)
    53ec:	20 00 
    lcd_goto(2,5);
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    53ee:	97 00 00 00 	cmpa	#0x00000,r7	
    delayms(3000);
    53f2:	00 00       	bra	@r0		
    53f4:	e5 40 00 00 	mov.b	@r0,	0(r5)	;0x0000(r5)
    53f8:	20 00 99 00 	bra	&0x00099	
    53fc:	00 00       	bra	@r0		
    53fe:	00 00       	bra	@r0		
    5400:	f9 40 00 00 	mov.b	#0,	32(r9)	;#0x0000, 0x0020(r9)
    5404:	20 00 
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    5406:	9b 00 00 00 	cmpa	#0x00000,r11	
    540a:	00 00       	bra	@r0		
    540c:	0c 41       	mov	r1,	r12	
    540e:	00 00       	bra	@r0		
                PPMMax[i] = PPMValue[i];
            }
    5410:	20 00 9d 00 	bra	&0x0009d	
            if(PPMMin[i] > PPMValue[i]){
                PPMMin[i] = PPMValue[i];
    5414:	00 00       	bra	@r0		
    5416:	00 00       	bra	@r0		
    5418:	1f 41 00 00 	mov	0(r1),	r15	;0x0000(r1)
            }
        }
    }
    
    lcd_clear(BLACK);
    
    541c:	20 00 9f 00 	bra	&0x0009f	
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
    5420:	00 00       	bra	@r0		
    5422:	00 00       	bra	@r0		
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    5424:	32 41       	pop	r2		
    5426:	00 00       	bra	@r0		
    5428:	20 00 a1 00 	bra	&0x000a1	
	...
        
        // grava yaw slope 
        ValorAux.f = PPMSlope[YAW_CH];
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        
        delayms(100);
    5434:	64 00 00 00 	mova	r0,	&0x40000
    5438:	38 4c       	mov	@r12+,	r8	
    543a:	00 00       	bra	@r0		
    543c:	81 33       	jn	$-252    	;abs 0x5340
    543e:	00 00       	bra	@r0		
    5440:	64 00 00 00 	mova	r0,	&0x40000
    5444:	38 4c       	mov	@r12+,	r8	
    5446:	00 00       	bra	@r0		
        
        // grava throttle slope 
    5448:	45 41       	mov.b	r1,	r5	
    544a:	00 00       	bra	@r0		
    544c:	64 00 00 00 	mova	r0,	&0x40000
    5450:	38 4c       	mov	@r12+,	r8	
    5452:	00 00       	bra	@r0		
    5454:	6a 00 00 00 	mova	r0,	&0xa0000
        ValorAux.f = PPMSlope[THROTTLE_CH];
    5458:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0545a
    545c:	00 00       	bra	@r0		
    545e:	00 00       	bra	@r0		
    5460:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    5464:	80 00 00 00 	bra	#0x00000	
    5468:	00 00       	bra	@r0		
    546a:	00 00       	bra	@r0		
    546c:	99 00 00 00 	cmpa	#0x00000,r9	
    5470:	80 00 00 00 	bra	#0x00000	
    5474:	00 00       	bra	@r0		
    5476:	00 00       	bra	@r0		
    5478:	b3 00       	.word	0x00b3;	????	Illegal as address instr
        
        // grava pitch slope 
        ValorAux.f = PPMSlope[PITCH_CH];
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
        
        delayms(100);
    547a:	00 00       	bra	@r0		
    547c:	80 00 00 00 	bra	#0x00000	
        
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    5480:	00 00       	bra	@r0		
    5482:	00 00       	bra	@r0		
    5484:	ec 00       	adda	r0,	r12	
        
        delayms(100);
    5486:	00 00       	bra	@r0		
    5488:	80 00 00 00 	bra	#0x00000	
    548c:	00 00       	bra	@r0		
    548e:	00 00       	bra	@r0		
    5490:	24 01 00 00 	mova	&0x10000,r4	
    5494:	80 00 00 00 	bra	#0x00000	
    5498:	00 00       	bra	@r0		
    549a:	00 00       	bra	@r0		
    549c:	66 01 00 00 	mova	r1,	&0x60000
        
    54a0:	80 00 00 00 	bra	#0x00000	
    54a4:	00 00       	bra	@r0		
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
        i2c_change_address(EEPROM_I2C_ADDR);
    54a6:	00 00       	bra	@r0		
    54a8:	b7 01 00 00 	suba	#0x10000,r7	
        
    54ac:	80 00 00 00 	bra	#0x00000	
        // grava yaw slope 
    54b0:	00 00       	bra	@r0		
    54b2:	00 00       	bra	@r0		
    54b4:	08 02       	mova	#4,	r8	;r2 As==10
    54b6:	00 00       	bra	@r0		
            if(PPMMin[i] > PPMValue[i]){
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    54b8:	80 00 00 00 	bra	#0x00000	
    54bc:	00 00       	bra	@r0		
    54be:	00 00       	bra	@r0		
    54c0:	2e 02 00 00 	mova	&0x20000,r14	
        ValorAux.f = PPMSlope[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
        // grava pitch slope 
    54c4:	80 00 00 00 	bra	#0x00000	
        ValorAux.f = PPMSlope[PITCH_CH];
    54c8:	00 00       	bra	@r0		
    54ca:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    54cc:	6c 02 00 00 	mova	r2,	&0xc0000
    54d0:	80 00 00 00 	bra	#0x00000	
    54d4:	00 00       	bra	@r0		
    54d6:	00 00       	bra	@r0		
    54d8:	96 02 00 00 	cmpa	#0x20000,r6	
    54dc:	80 00 00 00 	bra	#0x00000	
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }
    54e0:	00 00       	bra	@r0		

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
    54e2:	00 00       	bra	@r0		
    54e4:	bf 02 00 00 	suba	#0x20000,r15	
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    54e8:	80 00 00 00 	bra	#0x00000	
        draw_rc_inputs(1);
    54ec:	00 00       	bra	@r0		
    54ee:	00 00       	bra	@r0		
}

void calibrate_radio(void){
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    54f0:	d9 02       	cmpa	r2,	r9	
    54f2:	00 00       	bra	@r0		
    54f4:	80 00 00 00 	bra	#0x00000	
    54f8:	00 00       	bra	@r0		
    54fa:	00 00       	bra	@r0		
    54fc:	f4 02       	suba	r2,	r4	
    54fe:	00 00       	bra	@r0		
    5500:	80 00 00 00 	bra	#0x00000	
    5504:	00 00       	bra	@r0		
        delayms(100);
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
        
    5506:	00 00       	bra	@r0		
    5508:	14 03       	mova	#-1,	r4	;r3 As==11
    550a:	00 00       	bra	@r0		
    550c:	80 00 00 00 	bra	#0x00000	
    5510:	00 00       	bra	@r0		
    5512:	00 00       	bra	@r0		
    5514:	4d 03       	rrum.a	#1,	r13	
    5516:	00 00       	bra	@r0		
        delayms(100);
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    5518:	80 00 00 00 	bra	#0x00000	
    551c:	00 00       	bra	@r0		
        
        delayms(100);
        
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    551e:	00 00       	bra	@r0		
    5520:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    5524:	80 00 00 00 	bra	#0x00000	
        
    5528:	00 00       	bra	@r0		
    552a:	00 00       	bra	@r0		
    552c:	8a 03 00 00 	mova	#0x30000,r10	
        delayms(100);
        
    5530:	80 00 00 00 	bra	#0x00000	
    5534:	00 00       	bra	@r0		
    5536:	00 00       	bra	@r0		
    5538:	ae 03 00 00 	adda	#0x30000,r14	
        // grava yaw offset 
    553c:	80 00 00 00 	bra	#0x00000	
    5540:	00 00       	bra	@r0		
    5542:	00 00       	bra	@r0		
    5544:	d7 03       	tsta	r7		
    5546:	00 00       	bra	@r0		
    5548:	80 00 00 00 	bra	#0x00000	
        ValorAux.f = PPMOffset[YAW_CH];
        i2c_write16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    554c:	00 00       	bra	@r0		
    554e:	00 00       	bra	@r0		
    5550:	45 41       	mov.b	r1,	r5	
    5552:	00 00       	bra	@r0		
    5554:	82 00 00 00 	mova	#0x00000,r2	
        
        delayms(100);
    5558:	24 05 00 00 	mova	&0x50000,r4	
        
    555c:	0d 16       	popm.a	#1,	r13	
    555e:	00 00       	bra	@r0		
    5560:	82 00 00 00 	mova	#0x00000,r2	
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
        
    5564:	02 17       	popm	#1,	r2	
    5566:	00 00       	bra	@r0		
    5568:	4e 41       	mov.b	r1,	r14	
        
        // grava pitch offset 
        ValorAux.f = PPMOffset[PITCH_CH];
        i2c_write16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
        
        delayms(100);
    556a:	00 00       	bra	@r0		
    556c:	80 00 24 00 	bra	#0x00024	
	...
        
    5578:	a2 00 00 00 	adda	#0x00000,r2	
        // grava roll offset 
        ValorAux.f = PPMOffset[ROLL_CH];
    557c:	00 00       	bra	@r0		
    557e:	00 00       	bra	@r0		
    5580:	ba 41 00 00 	pop	0(r10)		;0x0000(r10)
    5584:	20 00 03 00 	bra	&0x00003	
	...
        i2c_write16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    5590:	64 00 00 00 	mova	r0,	&0x40000
    5594:	38 4c       	mov	@r12+,	r8	
        
        delayms(100);
    5596:	00 00       	bra	@r0		
    5598:	81 33       	jn	$-252    	;abs 0x549c
        
        // grava ch5 offset 
    559a:	00 00       	bra	@r0		
    559c:	64 00 00 00 	mova	r0,	&0x40000
    55a0:	38 4c       	mov	@r12+,	r8	
    55a2:	00 00       	bra	@r0		
    55a4:	ce 41 00 00 	mov.b	r1,	0(r14)	;0x0000(r14)
        ValorAux.f = PPMOffset[CH5_CH];
        i2c_write16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    55a8:	64 00 00 00 	mova	r0,	&0x40000
        
    55ac:	38 4c       	mov	@r12+,	r8	
    55ae:	00 00       	bra	@r0		
    55b0:	6a 00 00 00 	mova	r0,	&0xa0000
            delayms(4000);
            calibrate_radio();
            StatusFlags[0] = 0;
            StatusFlags[1] = 0;
            StatusFlags[2] = 0;
            i2c_write16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    55b4:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x055b6
    55b8:	00 00       	bra	@r0		
        else{
            load_transmitter_values();
            printf("RC params loaded\n");
            //carregar os outros parametros
        }
    }
    55ba:	00 00       	bra	@r0		
    55bc:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    55c0:	80 00 00 00 	bra	#0x00000	
    else{
    55c4:	00 00       	bra	@r0		
    55c6:	00 00       	bra	@r0		
    55c8:	99 00 00 00 	cmpa	#0x00000,r9	
        color_fore = RED;
        printf("EEPROM not found\n");
    55cc:	80 00 00 00 	bra	#0x00000	
    55d0:	00 00       	bra	@r0		
    55d2:	00 00       	bra	@r0		
    55d4:	b3 00       	.word	0x00b3;	????	Illegal as address instr
        color_fore = LIME;
    55d6:	00 00       	bra	@r0		
    55d8:	80 00 00 00 	bra	#0x00000	
    55dc:	00 00       	bra	@r0		
    55de:	00 00       	bra	@r0		
    55e0:	ec 00       	adda	r0,	r12	
    55e2:	00 00       	bra	@r0		
    55e4:	80 00 00 00 	bra	#0x00000	
    }
    
    55e8:	00 00       	bra	@r0		
    55ea:	00 00       	bra	@r0		
    55ec:	24 01 00 00 	mova	&0x10000,r4	
    55f0:	80 00 00 00 	bra	#0x00000	
    delayms(5000);
    
    55f4:	00 00       	bra	@r0		
    55f6:	00 00       	bra	@r0		
    SetupDone = 1;
    55f8:	66 01 00 00 	mova	r1,	&0x60000
    55fc:	80 00 00 00 	bra	#0x00000	
        // grava ch6 offset 
        ValorAux.f = PPMOffset[CH6_CH];
        i2c_write16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
        
        delayms(100);
        
    5600:	00 00       	bra	@r0		
    5602:	00 00       	bra	@r0		
    5604:	b7 01 00 00 	suba	#0x10000,r7	
    5608:	80 00 00 00 	bra	#0x00000	
    560c:	00 00       	bra	@r0		
    560e:	00 00       	bra	@r0		
    5610:	08 02       	mova	#4,	r8	;r2 As==10
    5612:	00 00       	bra	@r0		
    5614:	80 00 00 00 	bra	#0x00000	
    5618:	00 00       	bra	@r0		
    561a:	00 00       	bra	@r0		
        // grava ch7 offset 
    561c:	2e 02 00 00 	mova	&0x20000,r14	
    5620:	80 00 00 00 	bra	#0x00000	
        ValorAux.f = PPMOffset[CH7_CH];
    5624:	00 00       	bra	@r0		
    5626:	00 00       	bra	@r0		
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5628:	6c 02 00 00 	mova	r2,	&0xc0000
    562c:	80 00 00 00 	bra	#0x00000	
    5630:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5632:	00 00       	bra	@r0		
    5634:	96 02 00 00 	cmpa	#0x20000,r6	
                MenuStep = SELECT;
    5638:	80 00 00 00 	bra	#0x00000	
    563c:	00 00       	bra	@r0		
    563e:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5640:	bf 02 00 00 	suba	#0x20000,r15	
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5644:	80 00 00 00 	bra	#0x00000	
    5648:	00 00       	bra	@r0		
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    564a:	00 00       	bra	@r0		
    564c:	d9 02       	cmpa	r2,	r9	
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    564e:	00 00       	bra	@r0		
    5650:	80 00 00 00 	bra	#0x00000	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5654:	00 00       	bra	@r0		
    5656:	00 00       	bra	@r0		
        i2c_change_address(EEPROM_I2C_ADDR);    

        // load yaw slope e offset
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        PPMSlope[YAW_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    5658:	f4 02       	suba	r2,	r4	
    565a:	00 00       	bra	@r0		
    565c:	80 00 00 00 	bra	#0x00000	
    5660:	00 00       	bra	@r0		
    5662:	00 00       	bra	@r0		
    5664:	14 03       	mova	#-1,	r4	;r3 As==11
    5666:	00 00       	bra	@r0		
        PPMOffset[YAW_CH] = ValorAux.f;
    5668:	80 00 00 00 	bra	#0x00000	
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
    566c:	00 00       	bra	@r0		
    566e:	00 00       	bra	@r0		
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
    5670:	4d 03       	rrum.a	#1,	r13	
    5672:	00 00       	bra	@r0		
    5674:	80 00 00 00 	bra	#0x00000	
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5678:	00 00       	bra	@r0		
    567a:	00 00       	bra	@r0		
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    567c:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5680:	80 00 00 00 	bra	#0x00000	
    5684:	00 00       	bra	@r0		
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5686:	00 00       	bra	@r0		
    5688:	8a 03 00 00 	mova	#0x30000,r10	
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
        PPMOffset[YAW_CH] = ValorAux.f;
        
        // load throttle slope  e offset
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    568c:	80 00 00 00 	bra	#0x00000	
    5690:	00 00       	bra	@r0		
    5692:	00 00       	bra	@r0		
    5694:	ae 03 00 00 	adda	#0x30000,r14	
    5698:	80 00 00 00 	bra	#0x00000	
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    569c:	00 00       	bra	@r0		
    569e:	00 00       	bra	@r0		
    56a0:	d7 03       	tsta	r7		
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    56a2:	00 00       	bra	@r0		
    56a4:	80 00 00 00 	bra	#0x00000	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    56a8:	00 00       	bra	@r0		
    56aa:	00 00       	bra	@r0		
            lcd_goto(0,14);
    56ac:	ce 41 00 00 	mov.b	r1,	0(r14)	;0x0000(r14)
    56b0:	82 00 00 00 	mova	#0x00000,r2	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    56b4:	15 d1 03 00 	bis	3(r1),	r5	;0x0003(r1)
        // load pitch slope  e offset
        i2c_read16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
        PPMSlope[PITCH_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
        PPMOffset[PITCH_CH] = ValorAux.f;
        
    56b8:	62 16       	popm.a	#7,	r8	
    56ba:	00 00       	bra	@r0		
    56bc:	c2 00       	mova	r0,	r2	
        // load roll slope  e offset
    56be:	00 00       	bra	@r0		
    56c0:	00 00       	bra	@r0		
    56c2:	00 00       	bra	@r0		
    56c4:	cf 09       	mova	r9,	r15	
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    56c6:	00 00       	bra	@r0		
    56c8:	c2 00       	mova	r0,	r2	
        PPMSlope[ROLL_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
        PPMOffset[ROLL_CH] = ValorAux.f;
    
    56ca:	00 00       	bra	@r0		
    56cc:	00 00       	bra	@r0		
    56ce:	00 00       	bra	@r0		
        // load ch5 slope  e offset
        i2c_read16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
        PPMSlope[CH5_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    56d0:	ab 09 00 00 	adda	#0x90000,r11	
    56d4:	c2 00       	mova	r0,	r2	
    56d6:	00 00       	bra	@r0		
    56d8:	00 00       	bra	@r0		
    56da:	00 00       	bra	@r0		
        PPMOffset[CH5_CH] = ValorAux.f;
    
    56dc:	cd 04       	mova	r4,	r13	
    56de:	00 00       	bra	@r0		
    56e0:	c2 00       	mova	r0,	r2	
    56e2:	00 00       	bra	@r0		
    56e4:	91 34       	jge	$+292    	;abs 0x5808
    56e6:	00 00       	bra	@r0		
    56e8:	f6 09       	suba	r9,	r6	
    56ea:	00 00       	bra	@r0		
    56ec:	c2 00       	mova	r0,	r2	
    56ee:	00 00       	bra	@r0		
    56f0:	00 00       	bra	@r0		
    56f2:	00 00       	bra	@r0		
    56f4:	1c 0a       	mova	@r10+,	r12	
    56f6:	00 00       	bra	@r0		
    56f8:	c2 00       	mova	r0,	r2	
        // load ch6 slope  e offset
    56fa:	00 00       	bra	@r0		
    56fc:	00 00       	bra	@r0		
    56fe:	00 00       	bra	@r0		
    5700:	43 0a       	rlam.a	#3,	#0	;r3 As==00
    5702:	00 00       	bra	@r0		
    5704:	c2 00       	mova	r0,	r2	
    5706:	00 00       	bra	@r0		
    5708:	c1 68 00 00 	addc.b	r8,	0(r1)	;0x0000(r1)
    570c:	41 0c       	rrcm.a	#4,	r1	
        i2c_read16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
        PPMSlope[CH6_CH] = ValorAux.f;
    570e:	00 00       	bra	@r0		
    5710:	c2 00       	mova	r0,	r2	
        i2c_read16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    5712:	00 00       	bra	@r0		
    5714:	00 00       	bra	@r0		
    5716:	00 00       	bra	@r0		
        PPMOffset[CH6_CH] = ValorAux.f;
        
    5718:	68 0c 00 00 	mova	r12,	&0x80000
        // load ch7 slope  e offset
        i2c_read16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    571c:	c2 00       	mova	r0,	r2	
        PPMSlope[CH7_CH] = ValorAux.f;
    571e:	00 00       	bra	@r0		
    5720:	3e 8a       	sub	@r10+,	r14	
    5722:	00 00       	bra	@r0		
        // load roll slope  e offset
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
        PPMSlope[ROLL_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
        PPMOffset[ROLL_CH] = ValorAux.f;
    
    5724:	eb 0e       	adda	r14,	r11	
    5726:	00 00       	bra	@r0		
    5728:	c2 00       	mova	r0,	r2	
    572a:	00 00       	bra	@r0		
    572c:	90 a7 00 00 	dadd	0(r7),	0x11de	;0x0000(r7), PC rel. 0x06910
    5730:	de 11 
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
                    h = 0;
                }
    5732:	00 00       	bra	@r0		
    5734:	c2 00       	mova	r0,	r2	
    5736:	00 00       	bra	@r0		
    5738:	00 00       	bra	@r0		
    573a:	00 00       	bra	@r0		
    573c:	0c 12       	push	r12		
                else{
    573e:	00 00       	bra	@r0		
    5740:	c2 00       	mova	r0,	r2	
    5742:	00 00       	bra	@r0		
    5744:	00 00       	bra	@r0		
    5746:	00 00       	bra	@r0		
    5748:	34 12       	push	@r4+		
    574a:	00 00       	bra	@r0		
    574c:	c2 00       	mova	r0,	r2	
    574e:	00 00       	bra	@r0		
                    h = ((PPMValue[i] - 2000) * 10) / 200;
                }
    5750:	00 00       	bra	@r0		
    5752:	00 00       	bra	@r0		
    5754:	5c 12 00 00 	push.b	0(r12)		;0x0000(r12)
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
    5758:	c2 00       	mova	r0,	r2	
    575a:	00 00       	bra	@r0		
}

    575c:	0c af       	dadd	r15,	r12	
    575e:	00 00       	bra	@r0		
    5760:	7b 15       	pushm	#8,	r11	
int find_first(int startaddress){
    5762:	00 00       	bra	@r0		
    5764:	c2 00       	mova	r0,	r2	
    5766:	00 00       	bra	@r0		
    5768:	00 00       	bra	@r0		
    576a:	00 00       	bra	@r0		
    576c:	a3 15       	pushm	#11,	#0	;r3 As==00
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
    576e:	00 00       	bra	@r0		
    5770:	c2 00       	mova	r0,	r2	
    5772:	00 00       	bra	@r0		
    5774:	00 00       	bra	@r0		
    5776:	00 00       	bra	@r0		
        if(!i2c_find_device()){
    5778:	c9 15       	pushm	#13,	r9	
    577a:	00 00       	bra	@r0		
    577c:	c2 00       	mova	r0,	r2	
            return startaddress;
        }
    577e:	00 00       	bra	@r0		
    5780:	00 00       	bra	@r0		
    5782:	00 00       	bra	@r0		
    5784:	f2 15       	pushm	#16,	r2	
    5786:	00 00       	bra	@r0		
    5788:	c2 00       	mova	r0,	r2	
    }   
    return 0;
    578a:	00 00       	bra	@r0		
    578c:	00 00       	bra	@r0		
    578e:	00 00       	bra	@r0		
}

    5790:	d4 41 00 00 	mov.b	0(r1),	36(r4)	;0x0000(r1), 0x0024(r4)
    5794:	24 00 

// loop de controle
    5796:	1a 00       	mova	#0x00000,r10	
    5798:	38 4c       	mov	@r12+,	r8	
void main_loop(){
    579a:	00 00       	bra	@r0		
    579c:	e7 41 00 00 	mov.b	@r1,	0(r7)	;0x0000(r7)
    57a0:	40 00       	rrcm.a	#1,	r0	
    
    57a2:	19 00       	mova	#0x00000,r9	
    
    57a4:	0b 00       	mova	@r0,	r11	
    57a6:	00 00       	bra	@r0		
    57a8:	00 00       	bra	@r0		
    57aa:	00 00       	bra	@r0		
    57ac:	44 00       	rrcm.a	#1,	r4	
    57ae:	1a 00       	mova	#0x00000,r10	
	...
    
    i2c_init();
    
    eint();
    
    lcd_init(BLACK);
    57b8:	44 00       	rrcm.a	#1,	r4	
    57ba:	1b 00       	mova	#0x00000,r11	
    57bc:	04 00       	mova	@r0,	r4	
    57be:	00 00       	bra	@r0		
    57c0:	00 00       	bra	@r0		
    57c2:	00 00       	bra	@r0		
    57c4:	44 00       	rrcm.a	#1,	r4	
    57c6:	1c 00       	mova	#0x00000,r12	
    57c8:	08 00       	mova	@r0,	r8	
        printf("EEPROM found\n");
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);

        //if(1){
        if(StatusFlags[0] != 0){
    57ca:	00 00       	bra	@r0		
    57cc:	00 00       	bra	@r0		
    57ce:	00 00       	bra	@r0		
    57d0:	44 00       	rrcm.a	#1,	r4	
    57d2:	1d 00       	mova	#0x00000,r13	
            printf("Calibrando radio...\n");
    57d4:	0c 00       	mova	@r0,	r12	
    57d6:	00 00       	bra	@r0		
    57d8:	00 00       	bra	@r0		
            delayms(4000);
    57da:	00 00       	bra	@r0		
    57dc:	24 00 00 00 	mova	&0x00000,r4	
    
    eint();
    
    lcd_init(BLACK);
    
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));
    57e0:	10 00       	bra	#0x00000	

    i2c_config(EEPROM_I2C_ADDR);
    EEPROMFound = !(i2c_find_device());
    
    if(EEPROMFound){
    57e2:	00 00       	bra	@r0		
    57e4:	fa 41 00 00 	pop.b	0(r10)		;0x0000(r10)
    57e8:	24 00 20 00 	mova	&0x00020,r4	
    57ec:	48 4c       	mov.b	r12,	r8	
        printf("EEPROM found\n");
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);
    57ee:	00 00       	bra	@r0		
    57f0:	e7 41 00 00 	mov.b	@r1,	0(r7)	;0x0000(r7)
    57f4:	40 00       	rrcm.a	#1,	r0	
    57f6:	1f 00       	mova	#0x00000,r15	
    57f8:	0f 00       	mova	@r0,	r15	
    57fa:	00 00       	bra	@r0		
    57fc:	00 00       	bra	@r0		
    57fe:	00 00       	bra	@r0		
    5800:	44 00       	rrcm.a	#1,	r4	
    5802:	20 00 00 00 	bra	&0x00000	

        //if(1){
        if(StatusFlags[0] != 0){
            printf("Calibrando radio...\n");
            delayms(4000);
            calibrate_radio();
    5806:	00 00       	bra	@r0		
    5808:	00 00       	bra	@r0		
    580a:	00 00       	bra	@r0		
    580c:	44 00       	rrcm.a	#1,	r4	
    580e:	21 00 00 00 	mova	&0x00000,r1	
    5812:	00 00       	bra	@r0		
    5814:	00 00       	bra	@r0		
    5816:	00 00       	bra	@r0		
    5818:	44 00       	rrcm.a	#1,	r4	
    581a:	22 00 04 00 	mova	&0x00004,r2	
    581e:	00 00       	bra	@r0		
    5820:	00 00       	bra	@r0		
    5822:	00 00       	bra	@r0		
    5824:	24 00 00 00 	mova	&0x00000,r4	
    5828:	06 00       	mova	@r0,	r6	
    582a:	00 00       	bra	@r0		
    582c:	15 42 00 00 	mov	&0x0000,r5	
    5830:	24 00 25 00 	mova	&0x00025,r4	
    5834:	4e 4c       	mov.b	r12,	r14	
    5836:	00 00       	bra	@r0		
    5838:	00 00       	bra	@r0		
    583a:	00 00       	bra	@r0		
    583c:	44 00       	rrcm.a	#1,	r4	
    583e:	25 00 00 00 	mova	&0x00000,r5	
    5842:	00 00       	bra	@r0		
    5844:	00 00       	bra	@r0		
    5846:	00 00       	bra	@r0		
    5848:	44 00       	rrcm.a	#1,	r4	
    584a:	26 00 00 00 	mova	&0x00000,r6	
    584e:	00 00       	bra	@r0		
    5850:	00 00       	bra	@r0		
    5852:	00 00       	bra	@r0		
    5854:	44 00       	rrcm.a	#1,	r4	
    5856:	27 00 06 00 	mova	&0x00006,r7	
    585a:	00 00       	bra	@r0		
    585c:	00 00       	bra	@r0		
    585e:	00 00       	bra	@r0		
    5860:	44 00       	rrcm.a	#1,	r4	
    5862:	28 00 0a 00 	mova	&0x0000a,r8	

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
        for(k = 0; k < 100; k++){
            AnalogGraph[i][k] = 0;
    5866:	00 00       	bra	@r0		
    5868:	00 00       	bra	@r0		
    586a:	00 00       	bra	@r0		
    586c:	44 00       	rrcm.a	#1,	r4	
    586e:	29 00 0e 00 	mova	&0x0000e,r9	
    5872:	00 00       	bra	@r0		
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5874:	00 00       	bra	@r0		
    5876:	00 00       	bra	@r0		
    5878:	44 00       	rrcm.a	#1,	r4	
    587a:	2a 00 12 00 	mova	&0x00012,r10	
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    587e:	00 00       	bra	@r0		
    5880:	00 00       	bra	@r0		
                MenuStep = SELECT;
    5882:	00 00       	bra	@r0		
    5884:	24 00 00 00 	mova	&0x00000,r4	
    5888:	14 00       	mova	#0x00000,r4	
    588a:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    588c:	26 42       	mov	#4,	r6	;r2 As==10
    588e:	00 00       	bra	@r0		
    5890:	24 00 2d 00 	mova	&0x0002d,r4	
    5894:	62 4c       	mov.b	@r12,	r2	
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5896:	00 00       	bra	@r0		
    5898:	00 00       	bra	@r0		
    589a:	00 00       	bra	@r0		
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    589c:	44 00       	rrcm.a	#1,	r4	
    589e:	2d 00 00 00 	mova	&0x00000,r13	
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    58a2:	00 00       	bra	@r0		
    58a4:	00 00       	bra	@r0		
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    58a6:	00 00       	bra	@r0		
    58a8:	44 00       	rrcm.a	#1,	r4	
    58aa:	2e 00 00 00 	mova	&0x00000,r14	
    58ae:	00 00       	bra	@r0		
    58b0:	00 00       	bra	@r0		
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
    58b2:	00 00       	bra	@r0		
    58b4:	44 00       	rrcm.a	#1,	r4	
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
    58b6:	2f 00 04 00 	mova	&0x00004,r15	
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    58ba:	00 00       	bra	@r0		
    58bc:	00 00       	bra	@r0		
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    58be:	00 00       	bra	@r0		
    58c0:	44 00       	rrcm.a	#1,	r4	
    58c2:	30 00 08 00 	bra	0x0008		;PC rel. 0x058cc
    58c6:	00 00       	bra	@r0		
    58c8:	00 00       	bra	@r0		
    58ca:	00 00       	bra	@r0		
    58cc:	44 00       	rrcm.a	#1,	r4	
    58ce:	31 00 0c 00 	mova	0x000c,	r1	;PC rel. 0x058dc
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    58d2:	00 00       	bra	@r0		
    58d4:	00 00       	bra	@r0		
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    58d6:	00 00       	bra	@r0		
    58d8:	44 00       	rrcm.a	#1,	r4	
    58da:	33 00       	.word	0x0033;	????	Illegal as address instr
    58dc:	10 00       	bra	#0x00000	
    58de:	00 00       	bra	@r0		
    58e0:	00 00       	bra	@r0		
    58e2:	00 00       	bra	@r0		
    58e4:	44 00       	rrcm.a	#1,	r4	
    58e6:	34 00 14 00 	mova	0x0014,	r4	;PC rel. 0x058fc
    58ea:	00 00       	bra	@r0		
    58ec:	00 00       	bra	@r0		
    58ee:	00 00       	bra	@r0		
    58f0:	44 00       	rrcm.a	#1,	r4	
    58f2:	35 00 18 00 	mova	0x0018,	r5	;PC rel. 0x0590c
    58f6:	00 00       	bra	@r0		
    58f8:	00 00       	bra	@r0		
    58fa:	00 00       	bra	@r0		
    58fc:	44 00       	rrcm.a	#1,	r4	
    58fe:	36 00 1c 00 	mova	0x001c,	r6	;PC rel. 0x0591c
    5902:	00 00       	bra	@r0		
    5904:	00 00       	bra	@r0		
    5906:	00 00       	bra	@r0		
    5908:	44 00       	rrcm.a	#1,	r4	
    590a:	37 00 20 00 	mova	0x0020,	r7	;PC rel. 0x0592c
    590e:	00 00       	bra	@r0		
    5910:	00 00       	bra	@r0		
    5912:	00 00       	bra	@r0		
    5914:	24 00 00 00 	mova	&0x00000,r4	
    5918:	22 00 00 00 	mova	&0x00000,r2	
    591c:	38 42       	mov	#8,	r8	;r2 As==11
    591e:	00 00       	bra	@r0		
    5920:	24 00 3a 00 	mova	&0x0003a,r4	
    5924:	84 4c 00 00 	mov	r12,	0(r4)	;0x0000(r4)
    5928:	00 00       	bra	@r0		
    592a:	00 00       	bra	@r0		
    592c:	44 00       	rrcm.a	#1,	r4	
    592e:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x05930
    5932:	00 00       	bra	@r0		
    5934:	00 00       	bra	@r0		
    5936:	00 00       	bra	@r0		
    5938:	44 00       	rrcm.a	#1,	r4	
    593a:	3b 00 00 00 	mova	0x0000,	r11	;PC rel. 0x0593c
    593e:	00 00       	bra	@r0		
    5940:	00 00       	bra	@r0		
    5942:	00 00       	bra	@r0		
    5944:	44 00       	rrcm.a	#1,	r4	
    5946:	3c 00 04 00 	mova	0x0004,	r12	;PC rel. 0x0594c
    594a:	00 00       	bra	@r0		
    594c:	00 00       	bra	@r0		
    594e:	00 00       	bra	@r0		
    5950:	44 00       	rrcm.a	#1,	r4	
    5952:	3d 00 08 00 	mova	0x0008,	r13	;PC rel. 0x0595c
    5956:	00 00       	bra	@r0		
    5958:	00 00       	bra	@r0		
    595a:	00 00       	bra	@r0		
    595c:	44 00       	rrcm.a	#1,	r4	
    595e:	3e 00 0c 00 	mova	0x000c,	r14	;PC rel. 0x0596c
    5962:	00 00       	bra	@r0		
    5964:	00 00       	bra	@r0		
    5966:	00 00       	bra	@r0		
    5968:	44 00       	rrcm.a	#1,	r4	
    596a:	3f 00 10 00 	mova	0x0010,	r15	;PC rel. 0x0597c
    596e:	00 00       	bra	@r0		
    5970:	00 00       	bra	@r0		
    5972:	00 00       	bra	@r0		
    5974:	44 00       	rrcm.a	#1,	r4	
    5976:	40 00       	rrcm.a	#1,	r0	
    5978:	14 00       	mova	#0x00000,r4	
    597a:	00 00       	bra	@r0		
    597c:	00 00       	bra	@r0		
    597e:	00 00       	bra	@r0		
    5980:	44 00       	rrcm.a	#1,	r4	
    5982:	41 00       	rrcm.a	#1,	r1	
    5984:	18 00       	mova	#0x00000,r8	
    5986:	00 00       	bra	@r0		
    5988:	00 00       	bra	@r0		
    598a:	00 00       	bra	@r0		
    598c:	24 00 00 00 	mova	&0x00000,r4	
    5990:	1a 00       	mova	#0x00000,r10	
    5992:	00 00       	bra	@r0		
    5994:	49 42       	mov.b	r2,	r9	
    5996:	00 00       	bra	@r0		
    5998:	24 00 44 00 	mova	&0x00044,r4	
    599c:	9e 4c 00 00 	mov	0(r12),	0(r14)	;0x0000(r12), 0x0000(r14)
    59a0:	00 00 
    59a2:	00 00       	bra	@r0		
    59a4:	44 00       	rrcm.a	#1,	r4	
    59a6:	44 00       	rrcm.a	#1,	r4	
	...
    59b0:	44 00       	rrcm.a	#1,	r4	
    59b2:	47 00       	rrcm.a	#1,	r7	
    59b4:	02 00       	mova	@r0,	r2	
    59b6:	00 00       	bra	@r0		
    59b8:	00 00       	bra	@r0		
    59ba:	00 00       	bra	@r0		
    59bc:	44 00       	rrcm.a	#1,	r4	
    59be:	48 00       	rrcm.a	#1,	r8	
    59c0:	06 00       	mova	@r0,	r6	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    59c2:	00 00       	bra	@r0		
    59c4:	00 00       	bra	@r0		
    59c6:	00 00       	bra	@r0		
    59c8:	44 00       	rrcm.a	#1,	r4	
    59ca:	49 00       	rrcm.a	#1,	r9	
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    59cc:	0a 00       	mova	@r0,	r10	
    59ce:	00 00       	bra	@r0		
                MenuStep = SELECT;
    59d0:	00 00       	bra	@r0		
    59d2:	00 00       	bra	@r0		
    59d4:	44 00       	rrcm.a	#1,	r4	
    59d6:	4a 00       	rrcm.a	#1,	r10	
    59d8:	0e 00       	mova	@r0,	r14	
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    59da:	00 00       	bra	@r0		
    59dc:	00 00       	bra	@r0		
    59de:	00 00       	bra	@r0		
    59e0:	44 00       	rrcm.a	#1,	r4	
    59e2:	4b 00       	rrcm.a	#1,	r11	
    59e4:	12 00       	mova	#0x00000,r2	
    59e6:	00 00       	bra	@r0		
    59e8:	00 00       	bra	@r0		
    59ea:	00 00       	bra	@r0		
    59ec:	44 00       	rrcm.a	#1,	r4	
    59ee:	4c 00       	rrcm.a	#1,	r12	
    59f0:	1e 00       	mova	#0x00000,r14	
    59f2:	00 00       	bra	@r0		
    59f4:	00 00       	bra	@r0		
    59f6:	00 00       	bra	@r0		
    59f8:	44 00       	rrcm.a	#1,	r4	
    59fa:	4d 00       	rrcm.a	#1,	r13	
    59fc:	22 00 00 00 	mova	&0x00000,r2	
    5a00:	00 00       	bra	@r0		
    5a02:	00 00       	bra	@r0		
    5a04:	44 00       	rrcm.a	#1,	r4	
    5a06:	4e 00       	rrcm.a	#1,	r14	
    5a08:	26 00 00 00 	mova	&0x00000,r6	
    5a0c:	00 00       	bra	@r0		
    5a0e:	00 00       	bra	@r0		
    5a10:	44 00       	rrcm.a	#1,	r4	
    5a12:	4f 00       	rrcm.a	#1,	r15	
    5a14:	2a 00 00 00 	mova	&0x00000,r10	
    5a18:	00 00       	bra	@r0		
    5a1a:	00 00       	bra	@r0		
    5a1c:	44 00       	rrcm.a	#1,	r4	
    5a1e:	51 00       	rrcm	#1,	r1	
    5a20:	30 00 00 00 	bra	0x0000		;PC rel. 0x05a22
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5a24:	00 00       	bra	@r0		
    5a26:	00 00       	bra	@r0		
    5a28:	44 00       	rrcm.a	#1,	r4	
    5a2a:	52 00       	rrcm	#1,	r2	
    5a2c:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x05a2e
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5a30:	f4 29       	jnc	$+1002   	;abs 0x5e1a
                MenuStep = SELECT;
    5a32:	00 00       	bra	@r0		
    5a34:	40 00       	rrcm.a	#1,	r0	
    5a36:	45 00       	rrcm.a	#1,	r5	
    5a38:	0b 00       	mova	@r0,	r11	
    5a3a:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5a3c:	00 00       	bra	@r0		
    5a3e:	00 00       	bra	@r0		
    5a40:	c0 00       	bra	r0		
    5a42:	00 00       	bra	@r0		
    5a44:	02 00       	mova	@r0,	r2	
    5a46:	00 00       	bra	@r0		
    5a48:	00 00       	bra	@r0		
    5a4a:	00 00       	bra	@r0		
    5a4c:	e0 00       	adda	r0,	r0	
    5a4e:	00 00       	bra	@r0		
    5a50:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x05a52
    5a54:	00 00       	bra	@r0		
    5a56:	00 00       	bra	@r0		
    5a58:	24 00 00 00 	mova	&0x00000,r4	
    5a5c:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x05a5e
    5a60:	5e 42 00 00 	mov.b	&0x0000,r14	
    5a64:	24 00 55 00 	mova	&0x00055,r4	
    5a68:	d4 4c 00 00 	mov.b	0(r12),	17011(r4);0x0000(r12), 0x4273(r4)
    5a6c:	73 42 
    5a6e:	00 00       	bra	@r0		
    5a70:	40 00       	rrcm.a	#1,	r0	
    5a72:	54 00       	rrcm	#1,	r4	
    5a74:	0f 00       	mova	@r0,	r15	
    5a76:	00 00       	bra	@r0		
    5a78:	00 00       	bra	@r0		
    5a7a:	00 00       	bra	@r0		
    5a7c:	44 00       	rrcm.a	#1,	r4	
    5a7e:	55 00       	rrcm	#1,	r5	
	...
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5a88:	44 00       	rrcm.a	#1,	r4	
    5a8a:	56 00       	rrcm	#1,	r6	
	...
    5a94:	44 00       	rrcm.a	#1,	r4	
    5a96:	57 00       	rrcm	#1,	r7	
    5a98:	06 00       	mova	@r0,	r6	
    5a9a:	00 00       	bra	@r0		
    5a9c:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5a9e:	00 00       	bra	@r0		
    5aa0:	44 00       	rrcm.a	#1,	r4	
    5aa2:	58 00       	rrcm	#1,	r8	
    5aa4:	14 00       	mova	#0x00000,r4	
    5aa6:	00 00       	bra	@r0		
    5aa8:	00 00       	bra	@r0		
    5aaa:	00 00       	bra	@r0		
    5aac:	44 00       	rrcm.a	#1,	r4	
    5aae:	59 00       	rrcm	#1,	r9	
    5ab0:	18 00       	mova	#0x00000,r8	
    5ab2:	00 00       	bra	@r0		
    5ab4:	00 00       	bra	@r0		
    5ab6:	00 00       	bra	@r0		
    5ab8:	44 00       	rrcm.a	#1,	r4	
    5aba:	5a 00       	rrcm	#1,	r10	
    5abc:	1c 00       	mova	#0x00000,r12	
    5abe:	00 00       	bra	@r0		
    5ac0:	00 00       	bra	@r0		
    5ac2:	00 00       	bra	@r0		
    5ac4:	44 00       	rrcm.a	#1,	r4	
    5ac6:	5b 00       	rrcm	#1,	r11	
    5ac8:	20 00 00 00 	bra	&0x00000	
    5acc:	00 00       	bra	@r0		
    5ace:	00 00       	bra	@r0		
    5ad0:	44 00       	rrcm.a	#1,	r4	
    5ad2:	5c 00       	rrcm	#1,	r12	
    5ad4:	24 00 00 00 	mova	&0x00000,r4	
    5ad8:	00 00       	bra	@r0		
    5ada:	00 00       	bra	@r0		
    5adc:	44 00       	rrcm.a	#1,	r4	
    5ade:	5d 00       	rrcm	#1,	r13	
    5ae0:	28 00 00 00 	mova	&0x00000,r8	
    5ae4:	00 00       	bra	@r0		
    5ae6:	00 00       	bra	@r0		
    5ae8:	24 00 00 00 	mova	&0x00000,r4	
    5aec:	2a 00 00 00 	mova	&0x00000,r10	
    5af0:	88 42 00 00 	mov	r2,	0(r8)	;0x0000(r8)
    5af4:	24 00 60 00 	mova	&0x00060,r4	
    5af8:	fe 4c 00 00 	mov.b	@r12+,	0(r14)	;0x0000(r14)
    5afc:	9b 42 00 00 	mov	&0x0000,64(r11)	;0x0040(r11)
    5b00:	40 00 
    5b02:	5f 00       	rrcm	#1,	r15	
    5b04:	09 00       	mova	@r0,	r9	
    5b06:	00 00       	bra	@r0		
    5b08:	00 00       	bra	@r0		
    5b0a:	00 00       	bra	@r0		
    5b0c:	44 00       	rrcm.a	#1,	r4	
    5b0e:	60 00 00 00 	mova	r0,	&0x00000
    5b12:	00 00       	bra	@r0		
    5b14:	00 00       	bra	@r0		
    5b16:	00 00       	bra	@r0		
    5b18:	44 00       	rrcm.a	#1,	r4	
    5b1a:	61 00 08 00 	mova	r0,	&0x10008
    5b1e:	00 00       	bra	@r0		
    5b20:	00 00       	bra	@r0		
    5b22:	00 00       	bra	@r0		
    5b24:	44 00       	rrcm.a	#1,	r4	
    5b26:	64 00 0c 00 	mova	r0,	&0x4000c
    5b2a:	00 00       	bra	@r0		
    5b2c:	00 00       	bra	@r0		
    5b2e:	00 00       	bra	@r0		
    5b30:	44 00       	rrcm.a	#1,	r4	
    5b32:	65 00 12 00 	mova	r0,	&0x50012
    5b36:	00 00       	bra	@r0		
    5b38:	00 00       	bra	@r0		
    5b3a:	00 00       	bra	@r0		
    5b3c:	44 00       	rrcm.a	#1,	r4	
    5b3e:	67 00 14 00 	mova	r0,	&0x70014
    5b42:	00 00       	bra	@r0		
    5b44:	00 00       	bra	@r0		
    5b46:	00 00       	bra	@r0		
    5b48:	44 00       	rrcm.a	#1,	r4	
    5b4a:	68 00 24 00 	mova	r0,	&0x80024
    5b4e:	00 00       	bra	@r0		
    5b50:	00 00       	bra	@r0		
    5b52:	00 00       	bra	@r0		
    5b54:	44 00       	rrcm.a	#1,	r4	
    5b56:	69 00 28 00 	mova	r0,	&0x90028
    5b5a:	00 00       	bra	@r0		
    5b5c:	00 00       	bra	@r0		
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5b5e:	00 00       	bra	@r0		
    5b60:	44 00       	rrcm.a	#1,	r4	
    5b62:	6a 00 2c 00 	mova	r0,	&0xa002c
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5b66:	00 00       	bra	@r0		
    5b68:	00 00       	bra	@r0		
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5b6a:	00 00       	bra	@r0		
    5b6c:	44 00       	rrcm.a	#1,	r4	
    5b6e:	6b 00 30 00 	mova	r0,	&0xb0030
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5b72:	00 00       	bra	@r0		
    5b74:	00 00       	bra	@r0		
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5b76:	00 00       	bra	@r0		
    5b78:	44 00       	rrcm.a	#1,	r4	
    5b7a:	6c 00 34 00 	mova	r0,	&0xc0034
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5b7e:	00 00       	bra	@r0		
    5b80:	00 00       	bra	@r0		
    5b82:	00 00       	bra	@r0		
    5b84:	44 00       	rrcm.a	#1,	r4	
    5b86:	6d 00 38 00 	mova	r0,	&0xd0038
    5b8a:	00 00       	bra	@r0		
    5b8c:	00 00       	bra	@r0		
    5b8e:	00 00       	bra	@r0		
    5b90:	44 00       	rrcm.a	#1,	r4	
    5b92:	65 00 3c 00 	mova	r0,	&0x5003c
    5b96:	00 00       	bra	@r0		
    5b98:	00 00       	bra	@r0		
    5b9a:	00 00       	bra	@r0		
    5b9c:	44 00       	rrcm.a	#1,	r4	
    5b9e:	6f 00 42 00 	mova	r0,	&0xf0042
    5ba2:	00 00       	bra	@r0		
    5ba4:	e7 29       	jnc	$+976    	;abs 0x5f74
    5ba6:	00 00       	bra	@r0		
    5ba8:	40 00       	rrcm.a	#1,	r0	
    5baa:	61 00 0a 00 	mova	r0,	&0x1000a
    5bae:	00 00       	bra	@r0		
    5bb0:	f4 29       	jnc	$+1002   	;abs 0x5f9a
    5bb2:	00 00       	bra	@r0		
    5bb4:	40 00       	rrcm.a	#1,	r0	
    5bb6:	62 00 0b 00 	mova	r0,	&0x2000b
    5bba:	00 00       	bra	@r0		
    5bbc:	00 00       	bra	@r0		
    5bbe:	00 00       	bra	@r0		
    5bc0:	c0 00       	bra	r0		
    5bc2:	00 00       	bra	@r0		
    5bc4:	08 00       	mova	@r0,	r8	
    5bc6:	00 00       	bra	@r0		
    5bc8:	00 00       	bra	@r0		
    5bca:	00 00       	bra	@r0		
    5bcc:	e0 00       	adda	r0,	r0	
    5bce:	00 00       	bra	@r0		
    5bd0:	42 00       	rrcm.a	#1,	r2	
    5bd2:	00 00       	bra	@r0		
    5bd4:	00 00       	bra	@r0		
    5bd6:	00 00       	bra	@r0		
    5bd8:	24 00 00 00 	mova	&0x00000,r4	
    5bdc:	4a 00       	rrcm.a	#1,	r10	
    5bde:	00 00       	bra	@r0		
    5be0:	a5 42 00 00 	mov	#4,	0(r5)	;r2 As==10, 0x0000(r5)
    5be4:	24 00 72 00 	mova	&0x00072,r4	
    5be8:	48 4d       	mov.b	r13,	r8	
    5bea:	00 00       	bra	@r0		
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    5bec:	00 00       	bra	@r0		
    5bee:	00 00       	bra	@r0		
    5bf0:	44 00       	rrcm.a	#1,	r4	
    5bf2:	72 00 00 00 	mova	r0,	&0x0000	
    5bf6:	00 00       	bra	@r0		

void process_option(){
    5bf8:	00 00       	bra	@r0		
    5bfa:	00 00       	bra	@r0		
    5bfc:	44 00       	rrcm.a	#1,	r4	
    5bfe:	74 00 04 00 	mova	r0,	4(r4)	;0x0004(r4)
    int i;
    5c02:	00 00       	bra	@r0		
    switch (MenuOption){
    5c04:	00 00       	bra	@r0		
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5c06:	00 00       	bra	@r0		
    5c08:	44 00       	rrcm.a	#1,	r4	
    5c0a:	76 00 06 00 	mova	r0,	6(r6)	;0x0006(r6)
    5c0e:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5c10:	00 00       	bra	@r0		
    5c12:	00 00       	bra	@r0		
    int i;
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
    5c14:	44 00       	rrcm.a	#1,	r4	
    5c16:	77 00 0a 00 	mova	r0,	10(r7)	;0x000a(r7)
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
    5c1a:	00 00       	bra	@r0		
    5c1c:	00 00       	bra	@r0		
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5c1e:	00 00       	bra	@r0		
    5c20:	44 00       	rrcm.a	#1,	r4	
    5c22:	79 00 0c 00 	mova	r0,	12(r9)	;0x000c(r9)
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5c26:	00 00       	bra	@r0		
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5c28:	00 00       	bra	@r0		
    5c2a:	00 00       	bra	@r0		
    5c2c:	44 00       	rrcm.a	#1,	r4	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5c2e:	7a 00 0e 00 	mova	r0,	14(r10)	;0x000e(r10)
                printf("%d", i);
                delayms(1000);
            }
            MotorArmed = TRUE;
            MenuVisible = FALSE;
            lcd_clear(BLACK);
    5c32:	00 00       	bra	@r0		
    5c34:	00 00       	bra	@r0		
    5c36:	00 00       	bra	@r0		
    5c38:	44 00       	rrcm.a	#1,	r4	
            MenuStep = DISPLAY;
            break;
            
        case INITIAL_SETTINGS:
            // seta o flag initial setup
            break;          
    5c3a:	7b 00 12 00 	mova	r0,	18(r11)	;0x0012(r11)
    5c3e:	00 00       	bra	@r0		
    5c40:	00 00       	bra	@r0		
    5c42:	00 00       	bra	@r0		
    }
    
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    5c44:	44 00       	rrcm.a	#1,	r4	
    5c46:	7c 00 16 00 	mova	r0,	22(r12)	;0x0016(r12)
    }
}

void draw_analog_graph(void){
    5c4a:	00 00       	bra	@r0		
    5c4c:	00 00       	bra	@r0		
    5c4e:	00 00       	bra	@r0		
    lcd_goto(4,4);
    printf("FAZER");
}
    5c50:	44 00       	rrcm.a	#1,	r4	
    5c52:	7d 00 1e 00 	mova	r0,	30(r13)	;0x001e(r13)
void process_analog_menu(void){
    switch(MenuAnalog){
        case DISPLAY:
            lcd_goto(0,14);
            printf("DISPLAY             ");

    5c56:	00 00       	bra	@r0		
    5c58:	00 00       	bra	@r0		
    5c5a:	00 00       	bra	@r0		
    5c5c:	44 00       	rrcm.a	#1,	r4	
    5c5e:	7e 00 22 00 	mova	r0,	34(r14)	;0x0022(r14)
    5c62:	00 00       	bra	@r0		
    5c64:	00 00       	bra	@r0		
    5c66:	00 00       	bra	@r0		
            break;
        case SELECT:
            lcd_goto(0,14);
            printf("SELECT            ");

            // move para os lados
    5c68:	44 00       	rrcm.a	#1,	r4	
    5c6a:	7f 00 26 00 	mova	r0,	38(r15)	;0x0026(r15)
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
            }
            else{
    5c6e:	00 00       	bra	@r0		
    5c70:	00 00       	bra	@r0		
    5c72:	00 00       	bra	@r0		
                if(ChannelInput[ROLL_CH] < 2500){
                    MenuAnalog = WAIT_ROLL_RIGHT;
    5c74:	44 00       	rrcm.a	#1,	r4	
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    5c76:	77 00 2a 00 	mova	r0,	42(r7)	;0x002a(r7)
    5c7a:	00 00       	bra	@r0		
    5c7c:	00 00       	bra	@r0		
    5c7e:	00 00       	bra	@r0		
    5c80:	44 00       	rrcm.a	#1,	r4	
    5c82:	82 00 30 00 	mova	#0x00030,r2	
    5c86:	00 00       	bra	@r0		
    5c88:	00 00       	bra	@r0		
    5c8a:	00 00       	bra	@r0		
    5c8c:	44 00       	rrcm.a	#1,	r4	
    5c8e:	83 00       	.word	0x0083;	????	Illegal as address instr
    5c90:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x05c92
    5c94:	f4 29       	jnc	$+1002   	;abs 0x607e
        case DISPLAY:
            lcd_goto(0,14);
            printf("DISPLAY             ");

            refresh_analog_menu();
            MenuAnalog = SELECT;
    5c96:	00 00       	bra	@r0		
    5c98:	40 00       	rrcm.a	#1,	r0	
            break;
    5c9a:	73 00       	.word	0x0073;	????	Illegal as address instr
    5c9c:	0b 00       	mova	@r0,	r11	
    5c9e:	00 00       	bra	@r0		
    5ca0:	b7 42 00 00 	mov	#8,	0(r7)	;r2 As==11, 0x0000(r7)
    printf("FAZER");
}

void process_analog_menu(void){
    switch(MenuAnalog){
        case DISPLAY:
    5ca4:	40 00       	rrcm.a	#1,	r0	
    5ca6:	74 00 0a 00 	mova	r0,	10(r4)	;0x000a(r4)
    5caa:	00 00       	bra	@r0		
    5cac:	00 00       	bra	@r0		
    5cae:	00 00       	bra	@r0		
    5cb0:	c0 00       	bra	r0		
    5cb2:	00 00       	bra	@r0		
    5cb4:	04 00       	mova	@r0,	r4	
    5cb6:	00 00       	bra	@r0		
    5cb8:	00 00       	bra	@r0		
    5cba:	00 00       	bra	@r0		
    5cbc:	e0 00       	adda	r0,	r0	
    5cbe:	00 00       	bra	@r0		
    5cc0:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x05cc2
    5cc4:	00 00       	bra	@r0		
            lcd_goto(0,14);
    5cc6:	00 00       	bra	@r0		
    5cc8:	24 00 00 00 	mova	&0x00000,r4	
    5ccc:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x05cce
    5cd0:	c3 42       	mov.b	r2,	#1	;r3 As==01
    5cd2:	00 00       	bra	@r0		
    5cd4:	24 00 8b 00 	mova	&0x0008b,r4	
    5cd8:	80 4d 00 00 	mov	r13,	0x0000	;PC rel. 0x05cdc
    5cdc:	00 00       	bra	@r0		
    5cde:	00 00       	bra	@r0		
    5ce0:	44 00       	rrcm.a	#1,	r4	
    5ce2:	8b 00 00 00 	mova	#0x00000,r11	
                if(ChannelInput[ROLL_CH] < 2500){
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
            
            // check uncheck
    5ce6:	00 00       	bra	@r0		
    5ce8:	00 00       	bra	@r0		
    5cea:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
    5cec:	44 00       	rrcm.a	#1,	r4	
    5cee:	8e 00 02 00 	mova	#0x00002,r14	
            }
    5cf2:	00 00       	bra	@r0		
    5cf4:	00 00       	bra	@r0		
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
                }
    5cf6:	00 00       	bra	@r0		
    5cf8:	44 00       	rrcm.a	#1,	r4	
    5cfa:	8f 00 06 00 	mova	#0x00006,r15	
            }
            
            break;
        case WAIT_PITCH_DOWN:
    5cfe:	00 00       	bra	@r0		
    5d00:	00 00       	bra	@r0		
    5d02:	00 00       	bra	@r0		
    5d04:	44 00       	rrcm.a	#1,	r4	
    5d06:	90 00 0e 00 	cmpa	#0x0000e,r0	
    5d0a:	00 00       	bra	@r0		
    5d0c:	00 00       	bra	@r0		
    5d0e:	00 00       	bra	@r0		

            if(ChannelInput[PITCH_CH] > 2500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
            }
            break;
    5d10:	44 00       	rrcm.a	#1,	r4	
    5d12:	91 00 14 00 	cmpa	#0x00014,r1	
            
        case WAIT_PITCH_UP:
    5d16:	00 00       	bra	@r0		
    5d18:	00 00       	bra	@r0		
    5d1a:	00 00       	bra	@r0		
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");
    5d1c:	44 00       	rrcm.a	#1,	r4	
    5d1e:	93 00       	.word	0x0093;	????	Illegal as address instr
    5d20:	18 00       	mova	#0x00000,r8	

    5d22:	00 00       	bra	@r0		
    5d24:	00 00       	bra	@r0		
            }
            
            break;
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
            printf("WAIT PITCH DOWN    ");
    5d26:	00 00       	bra	@r0		
    5d28:	44 00       	rrcm.a	#1,	r4	

    5d2a:	94 00 1a 00 	cmpa	#0x0001a,r4	
    5d2e:	00 00       	bra	@r0		
    5d30:	db 42 00 00 	mov.b	&0x0000,64(r11)	;0x0040(r11)
    5d34:	40 00 
    5d36:	8c 00 0b 00 	mova	#0x0000b,r12	
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
                printf("WAIT ROLL RIGHT ");

    5d3a:	00 00       	bra	@r0		
    5d3c:	00 00       	bra	@r0		
    5d3e:	00 00       	bra	@r0		
    5d40:	c0 00       	bra	r0		
    5d42:	00 00       	bra	@r0		
    5d44:	02 00       	mova	@r0,	r2	
    5d46:	00 00       	bra	@r0		
    5d48:	00 00       	bra	@r0		
    5d4a:	00 00       	bra	@r0		
    5d4c:	e0 00       	adda	r0,	r0	
    5d4e:	00 00       	bra	@r0		
    5d50:	1a 00       	mova	#0x00000,r10	
                if(ChannelInput[PITCH_CH] < 3500){
    5d52:	00 00       	bra	@r0		
    5d54:	00 00       	bra	@r0		
    5d56:	00 00       	bra	@r0		
    5d58:	24 00 00 00 	mova	&0x00000,r4	
    5d5c:	1e 00       	mova	#0x00000,r14	
    5d5e:	00 00       	bra	@r0		
    5d60:	ea 42 00 00 	mov.b	#4,	0(r10)	;r2 As==10, 0x0000(r10)
    5d64:	24 00 97 00 	mova	&0x00097,r4	
    5d68:	9e 4d 00 00 	mov	0(r13),	17051(r14);0x0000(r13), 0x429b(r14)
    5d6c:	9b 42 
    5d6e:	00 00       	bra	@r0		
    5d70:	40 00       	rrcm.a	#1,	r0	
                    if(AnalogSelect > 0){
    5d72:	96 00 0b 00 	cmpa	#0x0000b,r6	
    5d76:	00 00       	bra	@r0		
    5d78:	00 00       	bra	@r0		
    5d7a:	00 00       	bra	@r0		
    5d7c:	44 00       	rrcm.a	#1,	r4	
    5d7e:	97 00 00 00 	cmpa	#0x00000,r7	
    5d82:	00 00       	bra	@r0		
    5d84:	00 00       	bra	@r0		
    5d86:	00 00       	bra	@r0		
                if(ChannelInput[PITCH_CH] > 2500){
                   if(AnalogSelect < 7){
                        AnalogSelect++;
                    }
                    MenuAnalog = DISPLAY;

    5d88:	44 00       	rrcm.a	#1,	r4	
    5d8a:	9a 00 04 00 	cmpa	#0x00004,r10	
    5d8e:	00 00       	bra	@r0		
    5d90:	00 00       	bra	@r0		
    5d92:	00 00       	bra	@r0		
    5d94:	44 00       	rrcm.a	#1,	r4	
    5d96:	9b 00 08 00 	cmpa	#0x00008,r11	
    5d9a:	00 00       	bra	@r0		
                }
            break;
            
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
    5d9c:	00 00       	bra	@r0		
    5d9e:	00 00       	bra	@r0		
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
    5da0:	44 00       	rrcm.a	#1,	r4	
    5da2:	9c 00 0e 00 	cmpa	#0x0000e,r12	
    5da6:	00 00       	bra	@r0		
    5da8:	00 00       	bra	@r0		
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    5daa:	00 00       	bra	@r0		
    5dac:	44 00       	rrcm.a	#1,	r4	
    5dae:	9d 00 14 00 	cmpa	#0x00014,r13	
    5db2:	00 00       	bra	@r0		
    5db4:	00 00       	bra	@r0		
    5db6:	00 00       	bra	@r0		
    5db8:	44 00       	rrcm.a	#1,	r4	
    5dba:	9f 00 18 00 	cmpa	#0x00018,r15	
    5dbe:	00 00       	bra	@r0		
            color_fore = RED;           // a cor da letra muda para vermelho 
    5dc0:	00 00       	bra	@r0		
    5dc2:	00 00       	bra	@r0		
    5dc4:	44 00       	rrcm.a	#1,	r4	
    5dc6:	a0 00 1a 00 	adda	#0x0001a,r0	
        else{                           // se nao                        
            if(color_back == LIME){
                color_fore = BLACK;
            }
        }                               
        
    5dca:	00 00       	bra	@r0		
    5dcc:	db 42 00 00 	mov.b	&0x0000,64(r11)	;0x0040(r11)
    5dd0:	40 00 
        printf("%d",i);
        // ajusta as cores para o normal
        color_fore = LIME;
        color_back = BLACK;
    5dd2:	98 00 0b 00 	cmpa	#0x0000b,r8	
    5dd6:	00 00       	bra	@r0		
    5dd8:	00 00       	bra	@r0		
    }
    printf("                    ");
}

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    5dda:	00 00       	bra	@r0		
    5ddc:	c0 00       	bra	r0		
    5dde:	00 00       	bra	@r0		
    MenuCounter++;
}

void clock_init(void)
{
    /* 
    5de0:	04 00       	mova	@r0,	r4	
    5de2:	00 00       	bra	@r0		
    5de4:	00 00       	bra	@r0		
     * Basic Clock System Control 2
    5de6:	00 00       	bra	@r0		
    5de8:	e0 00       	adda	r0,	r0	
    5dea:	00 00       	bra	@r0		
    5dec:	1a 00       	mova	#0x00000,r10	
    5dee:	00 00       	bra	@r0		
    5df0:	00 00       	bra	@r0		
    5df2:	00 00       	bra	@r0		
    5df4:	24 00 00 00 	mova	&0x00000,r4	
    5df8:	1e 00       	mova	#0x00000,r14	
    5dfa:	00 00       	bra	@r0		
    5dfc:	02 43       	clr	r2		
    5dfe:	00 00       	bra	@r0		
    5e00:	24 00 a3 00 	mova	&0x000a3,r4	
     * 
     * SELM_0 -- DCOCLK
    5e04:	bc 4d 00 00 	mov	@r13+,	0(r12)	;0x0000(r12)
     * DIVM_0 -- Divide by 1
     * ~SELS -- DCOCLK
    5e08:	19 43       	mov	#1,	r9	;r3 As==01
    5e0a:	00 00       	bra	@r0		
    5e0c:	40 00       	rrcm.a	#1,	r0	
    5e0e:	a2 00 0a 00 	adda	#0x0000a,r2	
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
    5e12:	00 00       	bra	@r0		
    5e14:	51 2a       	jnc	$-860    	;abs 0x5ab8
     * 
    5e16:	00 00       	bra	@r0		
    5e18:	40 00       	rrcm.a	#1,	r0	
    5e1a:	a2 00 09 00 	adda	#0x00009,r2	
    5e1e:	00 00       	bra	@r0		
    5e20:	00 00       	bra	@r0		
     */
    BCSCTL3 = 0xa0;
}

void p1_init(){
        /* Port 1 Output Register */
    5e22:	00 00       	bra	@r0		
    5e24:	44 00       	rrcm.a	#1,	r4	
    5e26:	a3 00       	.word	0x00a3;	????	Illegal as address instr
	...
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    
    DCOCTL = 0x77;      
        /* 
    5e30:	44 00       	rrcm.a	#1,	r4	
    P1OUT = PPM_P1MASK;

    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;

    /* Port 1 Interrupt Edge Select Register */
    5e32:	a6 00 0a 00 	adda	#0x0000a,r6	
    5e36:	00 00       	bra	@r0		
    5e38:	00 00       	bra	@r0		
    P1IES = 0; // subida
    5e3a:	00 00       	bra	@r0		
    5e3c:	44 00       	rrcm.a	#1,	r4	
    5e3e:	a7 00 0e 00 	adda	#0x0000e,r7	

    5e42:	00 00       	bra	@r0		
    5e44:	00 00       	bra	@r0		
    5e46:	00 00       	bra	@r0		
    5e48:	44 00       	rrcm.a	#1,	r4	
    5e4a:	a8 00 16 00 	adda	#0x00016,r8	
    5e4e:	00 00       	bra	@r0		
    5e50:	00 00       	bra	@r0		
    5e52:	00 00       	bra	@r0		
    5e54:	44 00       	rrcm.a	#1,	r4	
    5e56:	a9 00 1c 00 	adda	#0x0001c,r9	
    5e5a:	00 00       	bra	@r0		
    5e5c:	00 00       	bra	@r0		
    5e5e:	00 00       	bra	@r0		
    5e60:	44 00       	rrcm.a	#1,	r4	
    5e62:	aa 00 22 00 	adda	#0x00022,r10	
    5e66:	00 00       	bra	@r0		
    5e68:	00 00       	bra	@r0		
    5e6a:	00 00       	bra	@r0		
    5e6c:	44 00       	rrcm.a	#1,	r4	
    
    DCOCTL = 0x77;      
        /* 
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
    5e6e:	ab 00 28 00 	adda	#0x00028,r11	
    5e72:	00 00       	bra	@r0		
    5e74:	00 00       	bra	@r0		
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    5e76:	00 00       	bra	@r0		
    5e78:	44 00       	rrcm.a	#1,	r4	
    5e7a:	ac 00 2e 00 	adda	#0x0002e,r12	
    BCSCTL1 = 0xcf;     

    /* 
     * Basic Clock System Control 3
     * 
    5e7e:	00 00       	bra	@r0		
    5e80:	00 00       	bra	@r0		
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
    5e82:	00 00       	bra	@r0		
    5e84:	44 00       	rrcm.a	#1,	r4	
    5e86:	ad 00 34 00 	adda	#0x00034,r13	
     * XCAP_0 -- ~1 pF
     */
    BCSCTL3 = 0xa0;
}
    5e8a:	00 00       	bra	@r0		
    5e8c:	00 00       	bra	@r0		

    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida

    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;
    5e8e:	00 00       	bra	@r0		
    5e90:	44 00       	rrcm.a	#1,	r4	
    5e92:	af 00 38 00 	adda	#0x00038,r15	
    5e96:	00 00       	bra	@r0		
    5e98:	00 00       	bra	@r0		
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5e9a:	00 00       	bra	@r0		
    5e9c:	44 00       	rrcm.a	#1,	r4	
    5e9e:	b0 00 3a 00 	suba	#0x0003a,r0	
    5ea2:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5ea4:	db 42 00 00 	mov.b	&0x0000,64(r11)	;0x0040(r11)
    5ea8:	40 00 
                MenuStep = SELECT;
    5eaa:	a4 00 0b 00 	adda	#0x0000b,r4	
    5eae:	00 00       	bra	@r0		
    5eb0:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5eb2:	00 00       	bra	@r0		
    5eb4:	c0 00       	bra	r0		
    5eb6:	00 00       	bra	@r0		
    5eb8:	0a 00       	mova	@r0,	r10	
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5eba:	00 00       	bra	@r0		
    5ebc:	00 00       	bra	@r0		
    5ebe:	00 00       	bra	@r0		
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5ec0:	e0 00       	adda	r0,	r0	
    5ec2:	00 00       	bra	@r0		
            
    5ec4:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x05ec6
    5ec8:	00 00       	bra	@r0		
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5eca:	00 00       	bra	@r0		
    5ecc:	24 00 00 00 	mova	&0x00000,r4	
    5ed0:	42 00       	rrcm.a	#1,	r2	
    5ed2:	00 00       	bra	@r0		
    5ed4:	25 43       	mov	#2,	r5	;r3 As==10
    5ed6:	00 00       	bra	@r0		
    5ed8:	24 00 b3 00 	mova	&0x000b3,r4	
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5edc:	fe 4d 00 00 	mov.b	@r13+,	0(r14)	;0x0000(r14)
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5ee0:	19 43       	mov	#1,	r9	;r3 As==01
    5ee2:	00 00       	bra	@r0		
            
    5ee4:	40 00       	rrcm.a	#1,	r0	
    5ee6:	b2 00 0b 00 	suba	#0x0000b,r2	
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5eea:	00 00       	bra	@r0		
    5eec:	41 43       	clr.b	r1		
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5eee:	00 00       	bra	@r0		
    5ef0:	40 00       	rrcm.a	#1,	r0	
    5ef2:	b2 00 07 00 	suba	#0x00007,r2	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5ef6:	00 00       	bra	@r0		
            lcd_goto(0,14);
    5ef8:	54 43       	mov.b	#1,	r4	;r3 As==01
    5efa:	00 00       	bra	@r0		
    5efc:	40 00       	rrcm.a	#1,	r0	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5efe:	b2 00 08 00 	suba	#0x00008,r2	
    5f02:	00 00       	bra	@r0		
    5f04:	00 00       	bra	@r0		
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5f06:	00 00       	bra	@r0		
    5f08:	44 00       	rrcm.a	#1,	r4	
    5f0a:	b3 00       	.word	0x00b3;	????	Illegal as address instr
	...
    5f14:	44 00       	rrcm.a	#1,	r4	
    5f16:	b4 00 10 00 	suba	#0x00010,r4	
    5f1a:	00 00       	bra	@r0		
    5f1c:	00 00       	bra	@r0		
    5f1e:	00 00       	bra	@r0		
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5f20:	44 00       	rrcm.a	#1,	r4	
    5f22:	b6 00 12 00 	suba	#0x00012,r6	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5f26:	00 00       	bra	@r0		
    5f28:	00 00       	bra	@r0		
    5f2a:	00 00       	bra	@r0		
    5f2c:	44 00       	rrcm.a	#1,	r4	
    5f2e:	b7 00 16 00 	suba	#0x00016,r7	
    5f32:	00 00       	bra	@r0		
    5f34:	00 00       	bra	@r0		
    5f36:	00 00       	bra	@r0		
    5f38:	44 00       	rrcm.a	#1,	r4	
    5f3a:	b8 00 1e 00 	suba	#0x0001e,r8	
    5f3e:	00 00       	bra	@r0		
    5f40:	00 00       	bra	@r0		
    5f42:	00 00       	bra	@r0		
    5f44:	44 00       	rrcm.a	#1,	r4	
    5f46:	b9 00 24 00 	suba	#0x00024,r9	
    5f4a:	00 00       	bra	@r0		
    5f4c:	00 00       	bra	@r0		
    5f4e:	00 00       	bra	@r0		
    5f50:	44 00       	rrcm.a	#1,	r4	
    5f52:	ba 00 2a 00 	suba	#0x0002a,r10	
    5f56:	00 00       	bra	@r0		
    5f58:	00 00       	bra	@r0		
    5f5a:	00 00       	bra	@r0		
    5f5c:	44 00       	rrcm.a	#1,	r4	
    5f5e:	bb 00 30 00 	suba	#0x00030,r11	
    5f62:	00 00       	bra	@r0		
    5f64:	00 00       	bra	@r0		
    5f66:	00 00       	bra	@r0		
    5f68:	44 00       	rrcm.a	#1,	r4	
    5f6a:	bd 00 36 00 	suba	#0x00036,r13	
    5f6e:	00 00       	bra	@r0		
    5f70:	00 00       	bra	@r0		
    5f72:	00 00       	bra	@r0		
    5f74:	44 00       	rrcm.a	#1,	r4	
    5f76:	be 00 42 00 	suba	#0x00042,r14	
    5f7a:	00 00       	bra	@r0		
    5f7c:	00 00       	bra	@r0		
    5f7e:	00 00       	bra	@r0		
    5f80:	44 00       	rrcm.a	#1,	r4	
    5f82:	c0 00       	bra	r0		
    5f84:	4e 00       	rrcm.a	#1,	r14	
    5f86:	00 00       	bra	@r0		
    5f88:	00 00       	bra	@r0		
    5f8a:	00 00       	bra	@r0		
    5f8c:	44 00       	rrcm.a	#1,	r4	
    5f8e:	c3 00       	.word	0x00c3;	????	Illegal as address instr
    5f90:	52 00       	rrcm	#1,	r2	
    5f92:	00 00       	bra	@r0		
    5f94:	00 00       	bra	@r0		
    5f96:	00 00       	bra	@r0		
    5f98:	44 00       	rrcm.a	#1,	r4	
    5f9a:	c4 00       	mova	r0,	r4	
    5f9c:	54 00       	rrcm	#1,	r4	
    5f9e:	00 00       	bra	@r0		
    5fa0:	f4 29       	jnc	$+1002   	;abs 0x638a
    5fa2:	00 00       	bra	@r0		
    5fa4:	40 00       	rrcm.a	#1,	r0	
    5fa6:	b4 00 09 00 	suba	#0x00009,r4	
    5faa:	00 00       	bra	@r0		
    5fac:	db 42 00 00 	mov.b	&0x0000,64(r11)	;0x0040(r11)
    5fb0:	40 00 
    5fb2:	b4 00 0a 00 	suba	#0x0000a,r4	
    5fb6:	00 00       	bra	@r0		
    5fb8:	00 00       	bra	@r0		
    5fba:	00 00       	bra	@r0		
    5fbc:	c0 00       	bra	r0		
    5fbe:	00 00       	bra	@r0		
    5fc0:	10 00       	bra	#0x00000	
    5fc2:	00 00       	bra	@r0		
    5fc4:	00 00       	bra	@r0		
    5fc6:	00 00       	bra	@r0		
    5fc8:	e0 00       	adda	r0,	r0	
    5fca:	00 00       	bra	@r0		
    5fcc:	54 00       	rrcm	#1,	r4	
    5fce:	00 00       	bra	@r0		
    5fd0:	00 00       	bra	@r0		
    5fd2:	00 00       	bra	@r0		
    5fd4:	24 00 00 00 	mova	&0x00000,r4	
    5fd8:	60 00 00 00 	mova	r0,	&0x00000
    5fdc:	60 43       	br	#2		;r3 As==10
    5fde:	00 00       	bra	@r0		
    5fe0:	24 00 c7 00 	mova	&0x000c7,r4	
    5fe4:	5e 4e 00 00 	mov.b	0(r14),	r14	;0x0000(r14)
    5fe8:	79 43       	mov.b	#-1,	r9	;r3 As==11
    5fea:	00 00       	bra	@r0		
    5fec:	40 00       	rrcm.a	#1,	r0	
    5fee:	c6 00       	mova	r0,	r6	
    5ff0:	0a 00       	mova	@r0,	r10	
    5ff2:	00 00       	bra	@r0		
    5ff4:	51 2a       	jnc	$-860    	;abs 0x5c98
    5ff6:	00 00       	bra	@r0		
    5ff8:	40 00       	rrcm.a	#1,	r0	
    5ffa:	c6 00       	mova	r0,	r6	
    5ffc:	09 00       	mova	@r0,	r9	
    5ffe:	00 00       	bra	@r0		
    6000:	00 00       	bra	@r0		
    6002:	00 00       	bra	@r0		
    6004:	44 00       	rrcm.a	#1,	r4	
    6006:	c7 00       	mova	r0,	r7	
	...
    6010:	44 00       	rrcm.a	#1,	r4	
    6012:	ca 00       	mova	r0,	r10	
    6014:	0a 00       	mova	@r0,	r10	
    6016:	00 00       	bra	@r0		
    6018:	00 00       	bra	@r0		
    601a:	00 00       	bra	@r0		
    601c:	44 00       	rrcm.a	#1,	r4	
    601e:	cb 00       	mova	r0,	r11	
    6020:	0e 00       	mova	@r0,	r14	
    6022:	00 00       	bra	@r0		
    6024:	00 00       	bra	@r0		
    6026:	00 00       	bra	@r0		
    6028:	44 00       	rrcm.a	#1,	r4	
    602a:	cc 00       	mova	r0,	r12	
    602c:	16 00       	mova	#0x00000,r6	
    602e:	00 00       	bra	@r0		
    6030:	00 00       	bra	@r0		
    6032:	00 00       	bra	@r0		
    6034:	44 00       	rrcm.a	#1,	r4	
    6036:	cd 00       	mova	r0,	r13	
    6038:	1c 00       	mova	#0x00000,r12	
    603a:	00 00       	bra	@r0		
    603c:	00 00       	bra	@r0		
    603e:	00 00       	bra	@r0		
    6040:	44 00       	rrcm.a	#1,	r4	
    6042:	ce 00       	mova	r0,	r14	
    6044:	26 00 00 00 	mova	&0x00000,r6	
    6048:	00 00       	bra	@r0		
    604a:	00 00       	bra	@r0		
    604c:	44 00       	rrcm.a	#1,	r4	
    604e:	cf 00       	mova	r0,	r15	
    6050:	2c 00 00 00 	mova	&0x00000,r12	
    6054:	00 00       	bra	@r0		
    6056:	00 00       	bra	@r0		
    6058:	44 00       	rrcm.a	#1,	r4	
    605a:	d0 00       	cmpa	r0,	r0	
    605c:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0605e
    6060:	00 00       	bra	@r0		
    6062:	00 00       	bra	@r0		
    6064:	44 00       	rrcm.a	#1,	r4	
    6066:	d1 00       	cmpa	r0,	r1	
    6068:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x0606a
    606c:	00 00       	bra	@r0		
    606e:	00 00       	bra	@r0		
    6070:	44 00       	rrcm.a	#1,	r4	
    6072:	d2 00       	cmpa	r0,	r2	
    6074:	40 00       	rrcm.a	#1,	r0	
    6076:	00 00       	bra	@r0		
    6078:	00 00       	bra	@r0		
    607a:	00 00       	bra	@r0		
    607c:	44 00       	rrcm.a	#1,	r4	
    607e:	d3 00       	.word	0x00d3;	????	Illegal as address instr
    6080:	46 00       	rrcm.a	#1,	r6	
    6082:	00 00       	bra	@r0		
    6084:	00 00       	bra	@r0		
    6086:	00 00       	bra	@r0		
    6088:	44 00       	rrcm.a	#1,	r4	
    608a:	d5 00       	cmpa	r0,	r5	
    608c:	4a 00       	rrcm.a	#1,	r10	
    608e:	00 00       	bra	@r0		
    6090:	00 00       	bra	@r0		
    6092:	00 00       	bra	@r0		
    6094:	44 00       	rrcm.a	#1,	r4	
    6096:	d6 00       	cmpa	r0,	r6	
    6098:	4c 00       	rrcm.a	#1,	r12	
    609a:	00 00       	bra	@r0		
    609c:	db 42 00 00 	mov.b	&0x0000,64(r11)	;0x0040(r11)
    60a0:	40 00 
    60a2:	c8 00       	mova	r0,	r8	
    60a4:	0b 00       	mova	@r0,	r11	
    60a6:	00 00       	bra	@r0		
    60a8:	00 00       	bra	@r0		
    60aa:	00 00       	bra	@r0		
    60ac:	c0 00       	bra	r0		
    60ae:	00 00       	bra	@r0		
    60b0:	0a 00       	mova	@r0,	r10	
    60b2:	00 00       	bra	@r0		
    60b4:	00 00       	bra	@r0		
    60b6:	00 00       	bra	@r0		
    60b8:	e0 00       	adda	r0,	r0	
    60ba:	00 00       	bra	@r0		
    60bc:	4c 00       	rrcm.a	#1,	r12	
    60be:	00 00       	bra	@r0		
    60c0:	00 00       	bra	@r0		
    60c2:	00 00       	bra	@r0		
    60c4:	24 00 00 00 	mova	&0x00000,r4	
    60c8:	54 00       	rrcm	#1,	r4	
    60ca:	00 00       	bra	@r0		
    60cc:	84 43 00 00 	mov	#0,	0(r4)	;r3 As==00, 0x0000(r4)
    60d0:	24 00 d9 00 	mova	&0x000d9,r4	
    60d4:	b2 4e 00 00 	mov	@r14+,	&0x0000	
    60d8:	79 43       	mov.b	#-1,	r9	;r3 As==11
    60da:	00 00       	bra	@r0		
    60dc:	40 00       	rrcm.a	#1,	r0	
    60de:	d8 00       	cmpa	r0,	r8	
    60e0:	0b 00       	mova	@r0,	r11	
    60e2:	00 00       	bra	@r0		
    60e4:	a2 43 00 00 	mov	#2,	&0x0000	;r3 As==10
    60e8:	40 00       	rrcm.a	#1,	r0	
    60ea:	d8 00       	cmpa	r0,	r8	
    60ec:	07 00       	mova	@r0,	r7	
    60ee:	00 00       	bra	@r0		
    60f0:	54 43       	mov.b	#1,	r4	;r3 As==01
    60f2:	00 00       	bra	@r0		
    60f4:	40 00       	rrcm.a	#1,	r0	
    60f6:	d8 00       	cmpa	r0,	r8	
    60f8:	08 00       	mova	@r0,	r8	
    60fa:	00 00       	bra	@r0		
    60fc:	00 00       	bra	@r0		
    60fe:	00 00       	bra	@r0		
    6100:	44 00       	rrcm.a	#1,	r4	
    6102:	d9 00       	cmpa	r0,	r9	
	...
    610c:	44 00       	rrcm.a	#1,	r4	
    610e:	da 00       	cmpa	r0,	r10	
    6110:	10 00       	bra	#0x00000	
    6112:	00 00       	bra	@r0		
    6114:	00 00       	bra	@r0		
    6116:	00 00       	bra	@r0		
    6118:	44 00       	rrcm.a	#1,	r4	
    611a:	dc 00       	cmpa	r0,	r12	
    611c:	12 00       	mova	#0x00000,r2	
    611e:	00 00       	bra	@r0		
    6120:	00 00       	bra	@r0		
    6122:	00 00       	bra	@r0		
    6124:	44 00       	rrcm.a	#1,	r4	
    6126:	dd 00       	cmpa	r0,	r13	
    6128:	16 00       	mova	#0x00000,r6	
    612a:	00 00       	bra	@r0		
    612c:	00 00       	bra	@r0		
    612e:	00 00       	bra	@r0		
    6130:	44 00       	rrcm.a	#1,	r4	
    6132:	de 00       	cmpa	r0,	r14	
    6134:	1e 00       	mova	#0x00000,r14	
    6136:	00 00       	bra	@r0		
    6138:	00 00       	bra	@r0		
    613a:	00 00       	bra	@r0		
    613c:	44 00       	rrcm.a	#1,	r4	
    613e:	df 00       	cmpa	r0,	r15	
    6140:	24 00 00 00 	mova	&0x00000,r4	
    6144:	00 00       	bra	@r0		
    6146:	00 00       	bra	@r0		
    6148:	44 00       	rrcm.a	#1,	r4	
    614a:	e0 00       	adda	r0,	r0	
    614c:	2e 00 00 00 	mova	&0x00000,r14	
    6150:	00 00       	bra	@r0		
    6152:	00 00       	bra	@r0		
    6154:	44 00       	rrcm.a	#1,	r4	
    6156:	e1 00       	adda	r0,	r1	
    6158:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0615a
    615c:	00 00       	bra	@r0		
    615e:	00 00       	bra	@r0		
    6160:	44 00       	rrcm.a	#1,	r4	
    6162:	e2 00       	adda	r0,	r2	
    6164:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x06166
    6168:	00 00       	bra	@r0		
    616a:	00 00       	bra	@r0		
    616c:	44 00       	rrcm.a	#1,	r4	
    616e:	e3 00       	.word	0x00e3;	????	Illegal as address instr
    6170:	42 00       	rrcm.a	#1,	r2	
    6172:	00 00       	bra	@r0		
    6174:	00 00       	bra	@r0		
    6176:	00 00       	bra	@r0		
    6178:	44 00       	rrcm.a	#1,	r4	
    617a:	e5 00       	adda	r0,	r5	
    617c:	48 00       	rrcm.a	#1,	r8	
    617e:	00 00       	bra	@r0		
    6180:	00 00       	bra	@r0		
    6182:	00 00       	bra	@r0		
    6184:	44 00       	rrcm.a	#1,	r4	
    6186:	e6 00       	adda	r0,	r6	
    6188:	54 00       	rrcm	#1,	r4	
    618a:	00 00       	bra	@r0		
    618c:	00 00       	bra	@r0		
    618e:	00 00       	bra	@r0		
    6190:	44 00       	rrcm.a	#1,	r4	
    6192:	e8 00       	adda	r0,	r8	
    6194:	60 00 00 00 	mova	r0,	&0x00000
    6198:	00 00       	bra	@r0		
    619a:	00 00       	bra	@r0		
    619c:	44 00       	rrcm.a	#1,	r4	
    619e:	eb 00       	adda	r0,	r11	
    61a0:	64 00 00 00 	mova	r0,	&0x40000
    61a4:	00 00       	bra	@r0		
    61a6:	00 00       	bra	@r0		
    61a8:	44 00       	rrcm.a	#1,	r4	
    61aa:	ec 00       	adda	r0,	r12	
    61ac:	66 00 00 00 	mova	r0,	&0x60000
    61b0:	f4 29       	jnc	$+1002   	;abs 0x659a
    61b2:	00 00       	bra	@r0		
    61b4:	40 00       	rrcm.a	#1,	r0	
    61b6:	da 00       	cmpa	r0,	r10	
    61b8:	09 00       	mova	@r0,	r9	
    61ba:	00 00       	bra	@r0		
    61bc:	db 42 00 00 	mov.b	&0x0000,64(r11)	;0x0040(r11)
    61c0:	40 00 
    61c2:	da 00       	cmpa	r0,	r10	
    61c4:	0a 00       	mova	@r0,	r10	
    61c6:	00 00       	bra	@r0		
    61c8:	00 00       	bra	@r0		
    61ca:	00 00       	bra	@r0		
    61cc:	c0 00       	bra	r0		
    61ce:	00 00       	bra	@r0		
    61d0:	10 00       	bra	#0x00000	
    61d2:	00 00       	bra	@r0		
    61d4:	00 00       	bra	@r0		
    61d6:	00 00       	bra	@r0		
    61d8:	e0 00       	adda	r0,	r0	
    61da:	00 00       	bra	@r0		
    61dc:	66 00 00 00 	mova	r0,	&0x60000
    61e0:	00 00       	bra	@r0		
    61e2:	00 00       	bra	@r0		
    61e4:	24 00 00 00 	mova	&0x00000,r4	
    61e8:	72 00 00 00 	mova	r0,	&0x0000	
    61ec:	ad 43 00 00 	mov	#2,	0(r13)	;r3 As==10, 0x0000(r13)
    61f0:	24 00 ef 00 	mova	&0x000ef,r4	
    61f4:	24 4f       	mov	@r15,	r4	
    61f6:	00 00       	bra	@r0		
    61f8:	19 43       	mov	#1,	r9	;r3 As==01
    61fa:	00 00       	bra	@r0		
    61fc:	40 00       	rrcm.a	#1,	r0	
    61fe:	ee 00       	adda	r0,	r14	
    6200:	0a 00       	mova	@r0,	r10	
    6202:	00 00       	bra	@r0		
    6204:	a2 43 00 00 	mov	#2,	&0x0000	;r3 As==10
    6208:	40 00       	rrcm.a	#1,	r0	
    620a:	ee 00       	adda	r0,	r14	
    620c:	09 00       	mova	@r0,	r9	
    620e:	00 00       	bra	@r0		
    6210:	00 00       	bra	@r0		
    6212:	00 00       	bra	@r0		
    6214:	44 00       	rrcm.a	#1,	r4	
    6216:	ef 00       	adda	r0,	r15	
	...
    6220:	44 00       	rrcm.a	#1,	r4	
    6222:	f2 00       	suba	r0,	r2	
    6224:	0a 00       	mova	@r0,	r10	
    6226:	00 00       	bra	@r0		
    6228:	00 00       	bra	@r0		
    622a:	00 00       	bra	@r0		
    622c:	44 00       	rrcm.a	#1,	r4	
    622e:	f3 00       	.word	0x00f3;	????	Illegal as address instr
    6230:	0e 00       	mova	@r0,	r14	
    6232:	00 00       	bra	@r0		
    6234:	00 00       	bra	@r0		
    6236:	00 00       	bra	@r0		
    6238:	44 00       	rrcm.a	#1,	r4	
    623a:	f4 00       	suba	r0,	r4	
    623c:	16 00       	mova	#0x00000,r6	
    623e:	00 00       	bra	@r0		
    6240:	00 00       	bra	@r0		
    6242:	00 00       	bra	@r0		
    6244:	44 00       	rrcm.a	#1,	r4	
    6246:	f5 00       	suba	r0,	r5	
    6248:	1c 00       	mova	#0x00000,r12	
    624a:	00 00       	bra	@r0		
    624c:	00 00       	bra	@r0		
    624e:	00 00       	bra	@r0		
    6250:	44 00       	rrcm.a	#1,	r4	
    6252:	f6 00       	suba	r0,	r6	
    6254:	22 00 00 00 	mova	&0x00000,r2	
    6258:	00 00       	bra	@r0		
    625a:	00 00       	bra	@r0		
    625c:	44 00       	rrcm.a	#1,	r4	
    625e:	f7 00       	suba	r0,	r7	
    6260:	28 00 00 00 	mova	&0x00000,r8	
    6264:	00 00       	bra	@r0		
    6266:	00 00       	bra	@r0		
    6268:	44 00       	rrcm.a	#1,	r4	
    626a:	f8 00       	suba	r0,	r8	
    626c:	2c 00 00 00 	mova	&0x00000,r12	
    6270:	00 00       	bra	@r0		
    6272:	00 00       	bra	@r0		
    6274:	44 00       	rrcm.a	#1,	r4	
    6276:	f9 00       	suba	r0,	r9	
    6278:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x0627a
    627c:	00 00       	bra	@r0		
    627e:	00 00       	bra	@r0		
    6280:	44 00       	rrcm.a	#1,	r4	
    6282:	fa 00       	suba	r0,	r10	
    6284:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x06286
    6288:	00 00       	bra	@r0		
    628a:	00 00       	bra	@r0		
    628c:	44 00       	rrcm.a	#1,	r4	
    628e:	fb 00       	suba	r0,	r11	
    6290:	44 00       	rrcm.a	#1,	r4	
    6292:	00 00       	bra	@r0		
    6294:	00 00       	bra	@r0		
    6296:	00 00       	bra	@r0		
    6298:	44 00       	rrcm.a	#1,	r4	
    629a:	fc 00       	suba	r0,	r12	
    629c:	4a 00       	rrcm.a	#1,	r10	
    629e:	00 00       	bra	@r0		
    62a0:	00 00       	bra	@r0		
    62a2:	00 00       	bra	@r0		
    62a4:	44 00       	rrcm.a	#1,	r4	
    62a6:	fe 00       	suba	r0,	r14	
    62a8:	4e 00       	rrcm.a	#1,	r14	
    62aa:	00 00       	bra	@r0		
    62ac:	00 00       	bra	@r0		
    62ae:	00 00       	bra	@r0		
    62b0:	44 00       	rrcm.a	#1,	r4	
    62b2:	ff 00       	suba	r0,	r15	
    62b4:	50 00       	rrcm	#1,	r0	
    62b6:	00 00       	bra	@r0		
    62b8:	db 42 00 00 	mov.b	&0x0000,64(r11)	;0x0040(r11)
    62bc:	40 00 
    62be:	f0 00       	suba	r0,	r0	
    62c0:	0b 00       	mova	@r0,	r11	
    62c2:	00 00       	bra	@r0		
    62c4:	00 00       	bra	@r0		
    62c6:	00 00       	bra	@r0		
    62c8:	c0 00       	bra	r0		
    62ca:	00 00       	bra	@r0		
    62cc:	0a 00       	mova	@r0,	r10	
    62ce:	00 00       	bra	@r0		
    62d0:	00 00       	bra	@r0		
    62d2:	00 00       	bra	@r0		
    62d4:	e0 00       	adda	r0,	r0	
    62d6:	00 00       	bra	@r0		
    62d8:	50 00       	rrcm	#1,	r0	
    62da:	00 00       	bra	@r0		
    62dc:	00 00       	bra	@r0		
    62de:	00 00       	bra	@r0		
    62e0:	24 00 00 00 	mova	&0x00000,r4	
    62e4:	58 00       	rrcm	#1,	r8	
    62e6:	00 00       	bra	@r0		
    62e8:	c3 43       	mov.b	#0,	#1	;r3 As==00, r3 As==01
    62ea:	00 00       	bra	@r0		
    62ec:	24 00 02 01 	mova	&0x00102,r4	
    62f0:	7c 4f       	mov.b	@r15+,	r12	
    62f2:	00 00       	bra	@r0		
    62f4:	19 43       	mov	#1,	r9	;r3 As==01
    62f6:	00 00       	bra	@r0		
    62f8:	40 00       	rrcm.a	#1,	r0	
    62fa:	01 01       	mova	@r1,	r1	
    62fc:	0b 00       	mova	@r0,	r11	
    62fe:	00 00       	bra	@r0		
    6300:	a2 43 00 00 	mov	#2,	&0x0000	;r3 As==10
    6304:	40 00       	rrcm.a	#1,	r0	
    6306:	01 01       	mova	@r1,	r1	
    6308:	07 00       	mova	@r0,	r7	
    630a:	00 00       	bra	@r0		
    630c:	54 43       	mov.b	#1,	r4	;r3 As==01
    630e:	00 00       	bra	@r0		
    6310:	40 00       	rrcm.a	#1,	r0	
    6312:	01 01       	mova	@r1,	r1	
    6314:	09 00       	mova	@r0,	r9	
    6316:	00 00       	bra	@r0		
    6318:	00 00       	bra	@r0		
    631a:	00 00       	bra	@r0		
    631c:	44 00       	rrcm.a	#1,	r4	
    631e:	02 01       	mova	@r1,	r2	
	...
    6328:	44 00       	rrcm.a	#1,	r4	
    632a:	03 01       	.word	0x0103;	????	Illegal as address instr
    632c:	10 00       	bra	#0x00000	
    632e:	00 00       	bra	@r0		
    6330:	00 00       	bra	@r0		
    6332:	00 00       	bra	@r0		
    6334:	44 00       	rrcm.a	#1,	r4	
    6336:	05 01       	mova	@r1,	r5	
    6338:	12 00       	mova	#0x00000,r2	
    633a:	00 00       	bra	@r0		
    633c:	00 00       	bra	@r0		
    633e:	00 00       	bra	@r0		
    6340:	44 00       	rrcm.a	#1,	r4	
    6342:	06 01       	mova	@r1,	r6	
    6344:	16 00       	mova	#0x00000,r6	
    6346:	00 00       	bra	@r0		
    6348:	00 00       	bra	@r0		
    634a:	00 00       	bra	@r0		
    634c:	44 00       	rrcm.a	#1,	r4	
    634e:	07 01       	mova	@r1,	r7	
    6350:	1e 00       	mova	#0x00000,r14	
    6352:	00 00       	bra	@r0		
    6354:	00 00       	bra	@r0		
    6356:	00 00       	bra	@r0		
    6358:	44 00       	rrcm.a	#1,	r4	
    635a:	08 01       	mova	@r1,	r8	
    635c:	24 00 00 00 	mova	&0x00000,r4	
    6360:	00 00       	bra	@r0		
    6362:	00 00       	bra	@r0		
    6364:	44 00       	rrcm.a	#1,	r4	
    6366:	09 01       	mova	@r1,	r9	
    6368:	2a 00 00 00 	mova	&0x00000,r10	
    636c:	00 00       	bra	@r0		
    636e:	00 00       	bra	@r0		
    6370:	44 00       	rrcm.a	#1,	r4	
    6372:	0a 01       	mova	@r1,	r10	
    6374:	30 00 00 00 	bra	0x0000		;PC rel. 0x06376
    6378:	00 00       	bra	@r0		
    637a:	00 00       	bra	@r0		
    637c:	44 00       	rrcm.a	#1,	r4	
    637e:	0b 01       	mova	@r1,	r11	
    6380:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x06382
    6384:	00 00       	bra	@r0		
    6386:	00 00       	bra	@r0		
    6388:	44 00       	rrcm.a	#1,	r4	
    638a:	0c 01       	mova	@r1,	r12	
    638c:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x0638e
    6390:	00 00       	bra	@r0		
    6392:	00 00       	bra	@r0		
    6394:	44 00       	rrcm.a	#1,	r4	
    6396:	0e 01       	mova	@r1,	r14	
    6398:	44 00       	rrcm.a	#1,	r4	
    639a:	00 00       	bra	@r0		
    639c:	00 00       	bra	@r0		
    639e:	00 00       	bra	@r0		
    63a0:	44 00       	rrcm.a	#1,	r4	
    63a2:	10 01       	reta			
    63a4:	52 00       	rrcm	#1,	r2	
    63a6:	00 00       	bra	@r0		
    63a8:	00 00       	bra	@r0		
    63aa:	00 00       	bra	@r0		
    63ac:	44 00       	rrcm.a	#1,	r4	
    63ae:	11 01       	mova	@r1+,	r1	
    63b0:	60 00 00 00 	mova	r0,	&0x00000
    63b4:	00 00       	bra	@r0		
    63b6:	00 00       	bra	@r0		
    63b8:	44 00       	rrcm.a	#1,	r4	
    63ba:	12 01       	mova	@r1+,	r2	
    63bc:	66 00 00 00 	mova	r0,	&0x60000
    63c0:	00 00       	bra	@r0		
    63c2:	00 00       	bra	@r0		
    63c4:	44 00       	rrcm.a	#1,	r4	
    63c6:	14 01       	mova	@r1+,	r4	
    63c8:	7a 00 00 00 	mova	r0,	0(r10)	;0x0000(r10)
    63cc:	00 00       	bra	@r0		
    63ce:	00 00       	bra	@r0		
    63d0:	44 00       	rrcm.a	#1,	r4	
    63d2:	15 01       	mova	@r1+,	r5	
    63d4:	84 00 00 00 	mova	#0x00000,r4	
    63d8:	00 00       	bra	@r0		
    63da:	00 00       	bra	@r0		
    63dc:	44 00       	rrcm.a	#1,	r4	
    63de:	16 01       	mova	@r1+,	r6	
    63e0:	8a 00 00 00 	mova	#0x00000,r10	
    63e4:	00 00       	bra	@r0		
    63e6:	00 00       	bra	@r0		
    63e8:	44 00       	rrcm.a	#1,	r4	
    63ea:	18 01       	mova	@r1+,	r8	
    63ec:	8e 00 00 00 	mova	#0x00000,r14	
    63f0:	00 00       	bra	@r0		
    63f2:	00 00       	bra	@r0		
    63f4:	44 00       	rrcm.a	#1,	r4	
    63f6:	19 01       	mova	@r1+,	r9	
    63f8:	90 00 00 00 	cmpa	#0x00000,r0	
    63fc:	f4 29       	jnc	$+1002   	;abs 0x67e6
    63fe:	00 00       	bra	@r0		
    6400:	40 00       	rrcm.a	#1,	r0	
    6402:	03 01       	.word	0x0103;	????	Illegal as address instr
    6404:	08 00       	mova	@r0,	r8	
    6406:	00 00       	bra	@r0		
    6408:	db 42 00 00 	mov.b	&0x0000,64(r11)	;0x0040(r11)
    640c:	40 00 
    640e:	03 01       	.word	0x0103;	????	Illegal as address instr
    6410:	0a 00       	mova	@r0,	r10	
    6412:	00 00       	bra	@r0		
    6414:	00 00       	bra	@r0		
    6416:	00 00       	bra	@r0		
    6418:	c0 00       	bra	r0		
    641a:	00 00       	bra	@r0		
    641c:	10 00       	bra	#0x00000	
    641e:	00 00       	bra	@r0		
    6420:	00 00       	bra	@r0		
    6422:	00 00       	bra	@r0		
    6424:	e0 00       	adda	r0,	r0	
    6426:	00 00       	bra	@r0		
    6428:	90 00 00 00 	cmpa	#0x00000,r0	
    642c:	00 00       	bra	@r0		
    642e:	00 00       	bra	@r0		
    6430:	24 00 00 00 	mova	&0x00000,r4	
    6434:	9c 00 00 00 	cmpa	#0x00000,r12	
    6438:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01, 0x0000(r14)
    643c:	24 00 1c 01 	mova	&0x0011c,r4	
    6440:	18 50 00 00 	add	0x0000,	r8	;PC rel. 0x06444
    6444:	79 43       	mov.b	#-1,	r9	;r3 As==11
    6446:	00 00       	bra	@r0		
    6448:	40 00       	rrcm.a	#1,	r0	
    644a:	1b 01       	mova	@r1+,	r11	
    644c:	0a 00       	mova	@r0,	r10	
    644e:	00 00       	bra	@r0		
    6450:	a2 43 00 00 	mov	#2,	&0x0000	;r3 As==10
    6454:	40 00       	rrcm.a	#1,	r0	
    6456:	1b 01       	mova	@r1+,	r11	
    6458:	09 00       	mova	@r0,	r9	
    645a:	00 00       	bra	@r0		
    645c:	00 00       	bra	@r0		
    645e:	00 00       	bra	@r0		
    6460:	44 00       	rrcm.a	#1,	r4	
    6462:	1c 01       	mova	@r1+,	r12	
	...
    646c:	44 00       	rrcm.a	#1,	r4	
    646e:	1f 01       	mova	@r1+,	r15	
    6470:	0a 00       	mova	@r0,	r10	
    6472:	00 00       	bra	@r0		
    6474:	00 00       	bra	@r0		
    6476:	00 00       	bra	@r0		
    6478:	44 00       	rrcm.a	#1,	r4	
    647a:	20 01 0e 00 	bra	&0x1000e	
    647e:	00 00       	bra	@r0		
    6480:	00 00       	bra	@r0		
    6482:	00 00       	bra	@r0		
    6484:	44 00       	rrcm.a	#1,	r4	
    6486:	21 01 16 00 	mova	&0x10016,r1	
    648a:	00 00       	bra	@r0		
    648c:	00 00       	bra	@r0		
    648e:	00 00       	bra	@r0		
    6490:	44 00       	rrcm.a	#1,	r4	
    6492:	22 01 1c 00 	mova	&0x1001c,r2	
    6496:	00 00       	bra	@r0		
    6498:	00 00       	bra	@r0		
    649a:	00 00       	bra	@r0		
    649c:	44 00       	rrcm.a	#1,	r4	
    649e:	23 01       	.word	0x0123;	????	Illegal as address instr
    64a0:	26 00 00 00 	mova	&0x00000,r6	
    64a4:	00 00       	bra	@r0		
    64a6:	00 00       	bra	@r0		
    64a8:	44 00       	rrcm.a	#1,	r4	
    64aa:	24 01 2c 00 	mova	&0x1002c,r4	
    64ae:	00 00       	bra	@r0		
    64b0:	00 00       	bra	@r0		
    64b2:	00 00       	bra	@r0		
    64b4:	44 00       	rrcm.a	#1,	r4	
    64b6:	25 01 34 00 	mova	&0x10034,r5	
    64ba:	00 00       	bra	@r0		
    64bc:	00 00       	bra	@r0		
    64be:	00 00       	bra	@r0		
    64c0:	44 00       	rrcm.a	#1,	r4	
    64c2:	26 01 3a 00 	mova	&0x1003a,r6	
    64c6:	00 00       	bra	@r0		
    64c8:	00 00       	bra	@r0		
    64ca:	00 00       	bra	@r0		
    64cc:	44 00       	rrcm.a	#1,	r4	
    64ce:	27 01 3e 00 	mova	&0x1003e,r7	
    64d2:	00 00       	bra	@r0		
    64d4:	00 00       	bra	@r0		
    64d6:	00 00       	bra	@r0		
    64d8:	44 00       	rrcm.a	#1,	r4	
    64da:	28 01 48 00 	mova	&0x10048,r8	
    64de:	00 00       	bra	@r0		
    64e0:	00 00       	bra	@r0		
    64e2:	00 00       	bra	@r0		
    64e4:	44 00       	rrcm.a	#1,	r4	
    64e6:	29 01 4e 00 	mova	&0x1004e,r9	
    64ea:	00 00       	bra	@r0		
    64ec:	00 00       	bra	@r0		
    64ee:	00 00       	bra	@r0		
    64f0:	44 00       	rrcm.a	#1,	r4	
    64f2:	2a 01 56 00 	mova	&0x10056,r10	
    64f6:	00 00       	bra	@r0		
    64f8:	00 00       	bra	@r0		
    64fa:	00 00       	bra	@r0		
    64fc:	44 00       	rrcm.a	#1,	r4	
    64fe:	2b 01 5c 00 	mova	&0x1005c,r11	
    6502:	00 00       	bra	@r0		
    6504:	00 00       	bra	@r0		
    6506:	00 00       	bra	@r0		
    6508:	44 00       	rrcm.a	#1,	r4	
    650a:	2d 01 60 00 	mova	&0x10060,r13	
    650e:	00 00       	bra	@r0		
    6510:	00 00       	bra	@r0		
    6512:	00 00       	bra	@r0		
    6514:	44 00       	rrcm.a	#1,	r4	
    6516:	2e 01 62 00 	mova	&0x10062,r14	
    651a:	00 00       	bra	@r0		
    651c:	db 42 00 00 	mov.b	&0x0000,64(r11)	;0x0040(r11)
    6520:	40 00 
    6522:	1d 01       	mova	@r1+,	r13	
    6524:	0b 00       	mova	@r0,	r11	
    6526:	00 00       	bra	@r0		
    6528:	00 00       	bra	@r0		
    652a:	00 00       	bra	@r0		
    652c:	c0 00       	bra	r0		
    652e:	00 00       	bra	@r0		
    6530:	0a 00       	mova	@r0,	r10	
    6532:	00 00       	bra	@r0		
    6534:	00 00       	bra	@r0		
    6536:	00 00       	bra	@r0		
    6538:	e0 00       	adda	r0,	r0	
    653a:	00 00       	bra	@r0		
    653c:	62 00 00 00 	mova	r0,	&0x20000
    6540:	00 00       	bra	@r0		
    6542:	00 00       	bra	@r0		
    6544:	24 00 00 00 	mova	&0x00000,r4	
    6548:	6a 00 00 00 	mova	r0,	&0xa0000
    654c:	f6 43 00 00 	mov.b	#-1,	0(r6)	;r3 As==11, 0x0000(r6)
    6550:	24 00 31 01 	mova	&0x00131,r4	
    6554:	82 50 00 00 	add	r0,	&0x0000	
    6558:	79 43       	mov.b	#-1,	r9	;r3 As==11
    655a:	00 00       	bra	@r0		
    655c:	40 00       	rrcm.a	#1,	r0	
    655e:	30 01 0b 00 	bra	11(r1)		;0x000b(r1)
    6562:	00 00       	bra	@r0		
    6564:	a2 43 00 00 	mov	#2,	&0x0000	;r3 As==10
    6568:	40 00       	rrcm.a	#1,	r0	
    656a:	30 01 08 00 	bra	8(r1)		;0x0008(r1)
    656e:	00 00       	bra	@r0		
    6570:	54 43       	mov.b	#1,	r4	;r3 As==01
    6572:	00 00       	bra	@r0		
    6574:	40 00       	rrcm.a	#1,	r0	
    6576:	30 01 09 00 	bra	9(r1)		;0x0009(r1)
    657a:	00 00       	bra	@r0		
    657c:	00 00       	bra	@r0		
    657e:	00 00       	bra	@r0		
    6580:	44 00       	rrcm.a	#1,	r4	
    6582:	31 01 00 00 	mova	0(r1),	r1	;0x0000(r1)
    6586:	00 00       	bra	@r0		
    6588:	00 00       	bra	@r0		
    658a:	00 00       	bra	@r0		
    658c:	44 00       	rrcm.a	#1,	r4	
    658e:	32 01 10 00 	mova	16(r1),	r2	;0x0010(r1)
    6592:	00 00       	bra	@r0		
    6594:	00 00       	bra	@r0		
    6596:	00 00       	bra	@r0		
    6598:	44 00       	rrcm.a	#1,	r4	
    659a:	34 01 12 00 	mova	18(r1),	r4	;0x0012(r1)
    659e:	00 00       	bra	@r0		
    65a0:	00 00       	bra	@r0		
    65a2:	00 00       	bra	@r0		
    65a4:	44 00       	rrcm.a	#1,	r4	
    65a6:	35 01 16 00 	mova	22(r1),	r5	;0x0016(r1)
    65aa:	00 00       	bra	@r0		
    65ac:	00 00       	bra	@r0		
    65ae:	00 00       	bra	@r0		
    65b0:	44 00       	rrcm.a	#1,	r4	
    65b2:	36 01 1e 00 	mova	30(r1),	r6	;0x001e(r1)
    65b6:	00 00       	bra	@r0		
    65b8:	00 00       	bra	@r0		
    65ba:	00 00       	bra	@r0		
    65bc:	44 00       	rrcm.a	#1,	r4	
    65be:	37 01 24 00 	mova	36(r1),	r7	;0x0024(r1)
    65c2:	00 00       	bra	@r0		
    65c4:	00 00       	bra	@r0		
    65c6:	00 00       	bra	@r0		
    65c8:	44 00       	rrcm.a	#1,	r4	
    65ca:	38 01 2e 00 	mova	46(r1),	r8	;0x002e(r1)
    65ce:	00 00       	bra	@r0		
    65d0:	00 00       	bra	@r0		
    65d2:	00 00       	bra	@r0		
    65d4:	44 00       	rrcm.a	#1,	r4	

MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
    65d6:	39 01 34 00 	mova	52(r1),	r9	;0x0034(r1)
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
    65da:	00 00       	bra	@r0		
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
    65dc:	00 00       	bra	@r0		
    65de:	00 00       	bra	@r0		
    65e0:	44 00       	rrcm.a	#1,	r4	
    65e2:	3a 01 3c 00 	mova	60(r1),	r10	;0x003c(r1)
    65e6:	00 00       	bra	@r0		
    65e8:	00 00       	bra	@r0		
    65ea:	00 00       	bra	@r0		
    65ec:	44 00       	rrcm.a	#1,	r4	
    65ee:	3b 01 42 00 	mova	66(r1),	r11	;0x0042(r1)
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
    65f2:	00 00       	bra	@r0		
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
    65f4:	00 00       	bra	@r0		
    65f6:	00 00       	bra	@r0		
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 
    65f8:	44 00       	rrcm.a	#1,	r4	
    65fa:	3c 01 46 00 	mova	70(r1),	r12	;0x0046(r1)
    65fe:	00 00       	bra	@r0		

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    6600:	00 00       	bra	@r0		
    6602:	00 00       	bra	@r0		
    6604:	44 00       	rrcm.a	#1,	r4	
    6606:	3d 01 50 00 	mova	80(r1),	r13	;0x0050(r1)
    660a:	00 00       	bra	@r0		
    660c:	00 00       	bra	@r0		
    660e:	00 00       	bra	@r0		
    6610:	44 00       	rrcm.a	#1,	r4	
    6612:	3f 01 56 00 	mova	86(r1),	r15	;0x0056(r1)
    6616:	00 00       	bra	@r0		
    6618:	00 00       	bra	@r0		
    661a:	00 00       	bra	@r0		
    661c:	44 00       	rrcm.a	#1,	r4	
    661e:	41 01       	rram.a	#1,	r1	
    6620:	64 00 00 00 	mova	r0,	&0x40000
    6624:	00 00       	bra	@r0		
    6626:	00 00       	bra	@r0		
    6628:	44 00       	rrcm.a	#1,	r4	
    662a:	42 01       	rram.a	#1,	r2	
    662c:	72 00 00 00 	mova	r0,	&0x0000	
    6630:	00 00       	bra	@r0		
    6632:	00 00       	bra	@r0		
    6634:	44 00       	rrcm.a	#1,	r4	
    6636:	43 01       	rram.a	#1,	#0	;r3 As==00
    6638:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
    663c:	00 00       	bra	@r0		
    663e:	00 00       	bra	@r0		
    6640:	44 00       	rrcm.a	#1,	r4	
    6642:	45 01       	rram.a	#1,	r5	
    6644:	8c 00 00 00 	mova	#0x00000,r12	
    6648:	00 00       	bra	@r0		
    664a:	00 00       	bra	@r0		
    664c:	44 00       	rrcm.a	#1,	r4	
    664e:	46 01       	rram.a	#1,	r6	
    6650:	96 00 00 00 	cmpa	#0x00000,r6	
    6654:	00 00       	bra	@r0		
    6656:	00 00       	bra	@r0		
    6658:	44 00       	rrcm.a	#1,	r4	
    665a:	47 01       	rram.a	#1,	r7	
    665c:	9c 00 00 00 	cmpa	#0x00000,r12	
    6660:	00 00       	bra	@r0		
    6662:	00 00       	bra	@r0		
    6664:	44 00       	rrcm.a	#1,	r4	
    6666:	49 01       	rram.a	#1,	r9	
    6668:	a0 00 00 00 	adda	#0x00000,r0	
    666c:	00 00       	bra	@r0		
    666e:	00 00       	bra	@r0		
    6670:	44 00       	rrcm.a	#1,	r4	
    6672:	4a 01       	rram.a	#1,	r10	
    6674:	a2 00 00 00 	adda	#0x00000,r2	
    6678:	f4 29       	jnc	$+1002   	;abs 0x6a62
    667a:	00 00       	bra	@r0		
    667c:	40 00       	rrcm.a	#1,	r0	
    667e:	32 01 07 00 	mova	7(r1),	r2	;0x0007(r1)
    6682:	00 00       	bra	@r0		
    6684:	db 42 00 00 	mov.b	&0x0000,64(r11)	;0x0040(r11)
    6688:	40 00 
    668a:	32 01 0a 00 	mova	10(r1),	r2	;0x000a(r1)
    668e:	00 00       	bra	@r0		
    6690:	00 00       	bra	@r0		
    6692:	00 00       	bra	@r0		
    6694:	c0 00       	bra	r0		
    6696:	00 00       	bra	@r0		
    6698:	10 00       	bra	#0x00000	
    669a:	00 00       	bra	@r0		
    669c:	00 00       	bra	@r0		
    669e:	00 00       	bra	@r0		
    66a0:	e0 00       	adda	r0,	r0	
    66a2:	00 00       	bra	@r0		
    66a4:	a2 00 00 00 	adda	#0x00000,r2	
    66a8:	00 00       	bra	@r0		
    66aa:	00 00       	bra	@r0		
    66ac:	24 00 00 00 	mova	&0x00000,r4	
    66b0:	ae 00 00 00 	adda	#0x00000,r14	
    66b4:	13 44       	.word	0x4413;	????	Illegal as 2-op instr
    66b6:	00 00       	bra	@r0		
    66b8:	20 00 12 00 	bra	&0x00012	
    66bc:	00 00       	bra	@r0		
    66be:	00 00       	bra	@r0		
    66c0:	1f 44 00 00 	mov	0(r4),	r15	;0x0000(r4)
    66c4:	20 00 14 00 	bra	&0x00014	
    66c8:	00 00       	bra	@r0		
    66ca:	00 00       	bra	@r0		
    66cc:	2c 44       	mov	@r4,	r12	
    66ce:	00 00       	bra	@r0		
    66d0:	20 00 16 00 	bra	&0x00016	
    66d4:	00 00       	bra	@r0		
    66d6:	00 00       	bra	@r0		
    66d8:	38 44       	mov	@r4+,	r8	
    66da:	00 00       	bra	@r0		
    66dc:	20 00 18 00 	bra	&0x00018	
    66e0:	00 00       	bra	@r0		
    66e2:	00 00       	bra	@r0		
    66e4:	45 44       	mov.b	r4,	r5	
    66e6:	00 00       	bra	@r0		
    66e8:	20 00 1a 00 	bra	&0x0001a	
    66ec:	00 00       	bra	@r0		
    66ee:	00 00       	bra	@r0		
    66f0:	51 44 00 00 	mov.b	0(r4),	r1	;0x0000(r4)
    66f4:	20 00 1c 00 	bra	&0x0001c	
    66f8:	00 00       	bra	@r0		
    66fa:	00 00       	bra	@r0		
    66fc:	5f 44 00 00 	mov.b	0(r4),	r15	;0x0000(r4)
    6700:	20 00 1e 00 	bra	&0x0001e	
    6704:	00 00       	bra	@r0		
    6706:	00 00       	bra	@r0		
    6708:	6d 44       	mov.b	@r4,	r13	
    670a:	00 00       	bra	@r0		
    670c:	20 00 20 00 	bra	&0x00020	
    6710:	00 00       	bra	@r0		
    6712:	00 00       	bra	@r0		
    6714:	7c 44       	mov.b	@r4+,	r12	
    6716:	00 00       	bra	@r0		
    6718:	20 00 88 00 	bra	&0x00088	
    671c:	00 00       	bra	@r0		
    671e:	00 00       	bra	@r0		
    6720:	89 44 00 00 	mov	r4,	0(r9)	;0x0000(r9)
    6724:	20 00 8c 00 	bra	&0x0008c	
    6728:	00 00       	bra	@r0		
    672a:	00 00       	bra	@r0		
    672c:	96 44 00 00 	mov	0(r4),	32(r6)	;0x0000(r4), 0x0020(r6)
    6730:	20 00 
    6732:	90 00 00 00 	cmpa	#0x00000,r0	
    6736:	00 00       	bra	@r0		
    6738:	a3 44       	mov	@r4,	#1	;r3 As==01
    673a:	00 00       	bra	@r0		
    673c:	20 00 94 00 	bra	&0x00094	
    6740:	00 00       	bra	@r0		
    6742:	00 00       	bra	@r0		
    6744:	b0 44 00 00 	mov	@r4+,	0x0000	;PC rel. 0x06748
    6748:	20 00 98 00 	bra	&0x00098	
    674c:	00 00       	bra	@r0		
    674e:	00 00       	bra	@r0		
    6750:	bd 44 00 00 	mov	@r4+,	0(r13)	;0x0000(r13)
    6754:	20 00 9c 00 	bra	&0x0009c	
    6758:	00 00       	bra	@r0		
    675a:	00 00       	bra	@r0		
    675c:	a7 1a       	.word	0x1aa7;	????	
    675e:	00 00       	bra	@r0		
    6760:	20 00 7a 00 	bra	&0x0007a	
    6764:	00 00       	bra	@r0		
    6766:	00 00       	bra	@r0		
    6768:	bb 1a       	.word	0x1abb;	????	
    676a:	00 00       	bra	@r0		
    676c:	20 00 7c 00 	bra	&0x0007c	
    6770:	00 00       	bra	@r0		
    6772:	00 00       	bra	@r0		
    6774:	c8 1a       	.word	0x1ac8;	????	
    6776:	00 00       	bra	@r0		
    6778:	20 00 7e 00 	bra	&0x0007e	
    677c:	00 00       	bra	@r0		
    677e:	00 00       	bra	@r0		
    6780:	d5 1a       	.word	0x1ad5;	????	
    6782:	00 00       	bra	@r0		
    6784:	20 00 80 00 	bra	&0x00080	
    6788:	00 00       	bra	@r0		
    678a:	00 00       	bra	@r0		
    678c:	e2 1a       	.word	0x1ae2;	????	
    678e:	00 00       	bra	@r0		
    6790:	20 00 82 00 	bra	&0x00082	
    6794:	00 00       	bra	@r0		
    6796:	00 00       	bra	@r0		
    6798:	ef 1a       	.word	0x1aef;	????	
    679a:	00 00       	bra	@r0		
    679c:	20 00 84 00 	bra	&0x00084	
    67a0:	00 00       	bra	@r0		
    67a2:	00 00       	bra	@r0		
    67a4:	fb 1a       	.word	0x1afb;	????	
    67a6:	00 00       	bra	@r0		
    67a8:	20 00 86 00 	bra	&0x00086	
    67ac:	00 00       	bra	@r0		
    67ae:	00 00       	bra	@r0		
    67b0:	08 1b       	.word	0x1b08;	????	
    67b2:	00 00       	bra	@r0		
    67b4:	20 00 89 00 	bra	&0x00089	
    67b8:	00 00       	bra	@r0		
    67ba:	00 00       	bra	@r0		
    67bc:	15 1b       	.word	0x1b15;	????	
    67be:	00 00       	bra	@r0		
    67c0:	20 00 8f 00 	bra	&0x0008f	
    67c4:	00 00       	bra	@r0		
    67c6:	00 00       	bra	@r0		
    67c8:	21 1b       	.word	0x1b21;	????	
    67ca:	00 00       	bra	@r0		
    67cc:	20 00 91 00 	bra	&0x00091	
    67d0:	00 00       	bra	@r0		
    67d2:	00 00       	bra	@r0		
    67d4:	2e 1b       	.word	0x1b2e;	????	
    67d6:	00 00       	bra	@r0		
    67d8:	20 00 93 00 	bra	&0x00093	
    67dc:	00 00       	bra	@r0		
    67de:	00 00       	bra	@r0		
    67e0:	3b 1b       	.word	0x1b3b;	????	
    67e2:	00 00       	bra	@r0		
    67e4:	20 00 95 00 	bra	&0x00095	
    67e8:	00 00       	bra	@r0		
    67ea:	00 00       	bra	@r0		
    67ec:	48 1b       	.word	0x1b48;	????	
    67ee:	00 00       	bra	@r0		
    67f0:	20 00 97 00 	bra	&0x00097	
    67f4:	00 00       	bra	@r0		
    67f6:	00 00       	bra	@r0		
    67f8:	55 1b       	.word	0x1b55;	????	
    67fa:	00 00       	bra	@r0		
    67fc:	20 00 99 00 	bra	&0x00099	
    6800:	00 00       	bra	@r0		
    6802:	00 00       	bra	@r0		
    6804:	61 1b       	.word	0x1b61;	????	
    6806:	00 00       	bra	@r0		
    6808:	20 00 9b 00 	bra	&0x0009b	
    680c:	00 00       	bra	@r0		
    680e:	00 00       	bra	@r0		
    6810:	6e 1b       	.word	0x1b6e;	????	
    6812:	00 00       	bra	@r0		
    6814:	20 00 9e 00 	bra	&0x0009e	
    6818:	00 00       	bra	@r0		
    681a:	00 00       	bra	@r0		
    681c:	7b 1b       	.word	0x1b7b;	????	
    681e:	00 00       	bra	@r0		
    6820:	20 00 a4 00 	bra	&0x000a4	
    6824:	00 00       	bra	@r0		
    6826:	00 00       	bra	@r0		
    6828:	87 1b       	.word	0x1b87;	????	
    682a:	00 00       	bra	@r0		
    682c:	20 00 a6 00 	bra	&0x000a6	
    6830:	00 00       	bra	@r0		
    6832:	00 00       	bra	@r0		
    6834:	94 1b       	.word	0x1b94;	????	
    6836:	00 00       	bra	@r0		
    6838:	20 00 a8 00 	bra	&0x000a8	
    683c:	00 00       	bra	@r0		
    683e:	00 00       	bra	@r0		
    6840:	a1 1b       	.word	0x1ba1;	????	
    6842:	00 00       	bra	@r0		
    6844:	20 00 aa 00 	bra	&0x000aa	
    6848:	00 00       	bra	@r0		
    684a:	00 00       	bra	@r0		
    684c:	ae 1b       	.word	0x1bae;	????	
    684e:	00 00       	bra	@r0		
    6850:	20 00 ad 00 	bra	&0x000ad	
    6854:	00 00       	bra	@r0		
    6856:	00 00       	bra	@r0		
    6858:	bb 1b       	.word	0x1bbb;	????	
    685a:	00 00       	bra	@r0		
    685c:	20 00 b3 00 	bra	&0x000b3	
    6860:	00 00       	bra	@r0		
    6862:	00 00       	bra	@r0		
    6864:	c7 1b       	.word	0x1bc7;	????	
    6866:	00 00       	bra	@r0		
    6868:	20 00 b5 00 	bra	&0x000b5	
    686c:	00 00       	bra	@r0		
    686e:	00 00       	bra	@r0		
    6870:	d4 1b       	.word	0x1bd4;	????	
    6872:	00 00       	bra	@r0		
    6874:	20 00 b7 00 	bra	&0x000b7	
    6878:	00 00       	bra	@r0		
    687a:	00 00       	bra	@r0		
    687c:	e1 1b       	.word	0x1be1;	????	
    687e:	00 00       	bra	@r0		
    6880:	20 00 b9 00 	bra	&0x000b9	
    6884:	00 00       	bra	@r0		
    6886:	00 00       	bra	@r0		
    6888:	ee 1b       	.word	0x1bee;	????	
    688a:	00 00       	bra	@r0		
    688c:	20 00 bc 00 	bra	&0x000bc	
    6890:	00 00       	bra	@r0		
    6892:	00 00       	bra	@r0		
    6894:	fb 1b       	.word	0x1bfb;	????	
    6896:	00 00       	bra	@r0		
    6898:	20 00 c2 00 	bra	&0x000c2	
    689c:	00 00       	bra	@r0		
    689e:	00 00       	bra	@r0		
    68a0:	07 1c       	.word	0x1c07;	????	
    68a2:	00 00       	bra	@r0		
    68a4:	20 00 c4 00 	bra	&0x000c4	
    68a8:	00 00       	bra	@r0		
    68aa:	00 00       	bra	@r0		
    68ac:	14 1c       	.word	0x1c14;	????	
    68ae:	00 00       	bra	@r0		
    68b0:	20 00 c6 00 	bra	&0x000c6	
    68b4:	00 00       	bra	@r0		
    68b6:	00 00       	bra	@r0		
    68b8:	21 1c       	.word	0x1c21;	????	
    68ba:	00 00       	bra	@r0		
    68bc:	20 00 c8 00 	bra	&0x000c8	
    68c0:	00 00       	bra	@r0		
    68c2:	00 00       	bra	@r0		
    68c4:	2e 1c       	.word	0x1c2e;	????	
    68c6:	00 00       	bra	@r0		
    68c8:	20 00 cb 00 	bra	&0x000cb	
    68cc:	00 00       	bra	@r0		
    68ce:	00 00       	bra	@r0		
    68d0:	3b 1c       	.word	0x1c3b;	????	
    68d2:	00 00       	bra	@r0		
    68d4:	20 00 d1 00 	bra	&0x000d1	
    68d8:	00 00       	bra	@r0		
    68da:	00 00       	bra	@r0		
    68dc:	47 1c       	.word	0x1c47;	????	
    68de:	00 00       	bra	@r0		
    68e0:	20 00 d3 00 	bra	&0x000d3	
    68e4:	00 00       	bra	@r0		
    68e6:	00 00       	bra	@r0		
    68e8:	54 1c       	.word	0x1c54;	????	
    68ea:	00 00       	bra	@r0		
    68ec:	20 00 d5 00 	bra	&0x000d5	
    68f0:	00 00       	bra	@r0		
    68f2:	00 00       	bra	@r0		
    68f4:	61 1c       	.word	0x1c61;	????	
    68f6:	00 00       	bra	@r0		
    68f8:	20 00 d7 00 	bra	&0x000d7	
    68fc:	00 00       	bra	@r0		
    68fe:	00 00       	bra	@r0		
    6900:	6e 1c       	.word	0x1c6e;	????	
    6902:	00 00       	bra	@r0		
    6904:	20 00 da 00 	bra	&0x000da	
    6908:	00 00       	bra	@r0		
    690a:	00 00       	bra	@r0		
    690c:	7b 1c       	.word	0x1c7b;	????	
    690e:	00 00       	bra	@r0		
    6910:	20 00 e0 00 	bra	&0x000e0	
    6914:	00 00       	bra	@r0		
    6916:	00 00       	bra	@r0		
    6918:	87 1c       	.word	0x1c87;	????	
    691a:	00 00       	bra	@r0		
    691c:	20 00 e2 00 	bra	&0x000e2	
    6920:	00 00       	bra	@r0		
    6922:	00 00       	bra	@r0		
    6924:	94 1c       	.word	0x1c94;	????	
    6926:	00 00       	bra	@r0		
    6928:	20 00 e4 00 	bra	&0x000e4	
    692c:	00 00       	bra	@r0		
    692e:	00 00       	bra	@r0		
    6930:	a1 1c       	.word	0x1ca1;	????	
    6932:	00 00       	bra	@r0		
    6934:	20 00 e6 00 	bra	&0x000e6	
    6938:	00 00       	bra	@r0		
    693a:	00 00       	bra	@r0		
    693c:	ae 1c       	.word	0x1cae;	????	
    693e:	00 00       	bra	@r0		
    6940:	20 00 e9 00 	bra	&0x000e9	
    6944:	00 00       	bra	@r0		
    6946:	00 00       	bra	@r0		
    6948:	bb 1c       	.word	0x1cbb;	????	
    694a:	00 00       	bra	@r0		
    694c:	20 00 ef 00 	bra	&0x000ef	
    6950:	00 00       	bra	@r0		
    6952:	00 00       	bra	@r0		
    6954:	c7 1c       	.word	0x1cc7;	????	
    6956:	00 00       	bra	@r0		
    6958:	20 00 f1 00 	bra	&0x000f1	
    695c:	00 00       	bra	@r0		
    695e:	00 00       	bra	@r0		
    6960:	d4 1c       	.word	0x1cd4;	????	
    6962:	00 00       	bra	@r0		
    6964:	20 00 f3 00 	bra	&0x000f3	
    6968:	00 00       	bra	@r0		
    696a:	00 00       	bra	@r0		
    696c:	e1 1c       	.word	0x1ce1;	????	
    696e:	00 00       	bra	@r0		
    6970:	20 00 f5 00 	bra	&0x000f5	
    6974:	00 00       	bra	@r0		
    6976:	00 00       	bra	@r0		
    6978:	ee 1c       	.word	0x1cee;	????	
    697a:	00 00       	bra	@r0		
    697c:	20 00 f8 00 	bra	&0x000f8	
    6980:	00 00       	bra	@r0		
    6982:	00 00       	bra	@r0		
    6984:	fb 1c       	.word	0x1cfb;	????	
    6986:	00 00       	bra	@r0		
    6988:	20 00 fc 00 	bra	&0x000fc	
    698c:	00 00       	bra	@r0		
    698e:	00 00       	bra	@r0		
    6990:	0b 1d       	.word	0x1d0b;	????	
    6992:	00 00       	bra	@r0		
    6994:	20 00 fe 00 	bra	&0x000fe	
    6998:	00 00       	bra	@r0		
    699a:	00 00       	bra	@r0		
    699c:	1b 1d       	.word	0x1d1b;	????	
    699e:	00 00       	bra	@r0		
    69a0:	20 00 00 01 	bra	&0x00100	
    69a4:	00 00       	bra	@r0		
    69a6:	00 00       	bra	@r0		
    69a8:	2a 1d       	.word	0x1d2a;	????	
    69aa:	00 00       	bra	@r0		
    69ac:	20 00 02 01 	bra	&0x00102	
    69b0:	00 00       	bra	@r0		
    69b2:	00 00       	bra	@r0		
    69b4:	39 1d       	.word	0x1d39;	????	
    69b6:	00 00       	bra	@r0		
    69b8:	20 00 04 01 	bra	&0x00104	
    69bc:	00 00       	bra	@r0		
    69be:	00 00       	bra	@r0		
    69c0:	49 1d       	.word	0x1d49;	????	
    69c2:	00 00       	bra	@r0		
    69c4:	20 00 06 01 	bra	&0x00106	
    69c8:	00 00       	bra	@r0		
    69ca:	00 00       	bra	@r0		
    69cc:	59 1d       	.word	0x1d59;	????	
    69ce:	00 00       	bra	@r0		
    69d0:	20 00 08 01 	bra	&0x00108	
    69d4:	00 00       	bra	@r0		
    69d6:	00 00       	bra	@r0		
    69d8:	6a 1d       	.word	0x1d6a;	????	
    69da:	00 00       	bra	@r0		
    69dc:	20 00 0a 01 	bra	&0x0010a	
    69e0:	00 00       	bra	@r0		
    69e2:	00 00       	bra	@r0		
    69e4:	7b 1d       	.word	0x1d7b;	????	
    69e6:	00 00       	bra	@r0		
    69e8:	20 00 0c 01 	bra	&0x0010c	
    69ec:	00 00       	bra	@r0		
    69ee:	00 00       	bra	@r0		
    69f0:	8c 1d       	.word	0x1d8c;	????	
    69f2:	00 00       	bra	@r0		
    69f4:	20 00 0e 01 	bra	&0x0010e	
    69f8:	00 00       	bra	@r0		
    69fa:	00 00       	bra	@r0		
    69fc:	9e 1d       	.word	0x1d9e;	????	
    69fe:	00 00       	bra	@r0		
    6a00:	20 00 10 01 	bra	&0x00110	
    6a04:	00 00       	bra	@r0		
    6a06:	00 00       	bra	@r0		
    6a08:	b0 1d       	.word	0x1db0;	????	
    6a0a:	00 00       	bra	@r0		
    6a0c:	20 00 13 01 	bra	&0x00113	
    6a10:	00 00       	bra	@r0		
    6a12:	00 00       	bra	@r0		
    6a14:	c0 1d       	.word	0x1dc0;	????	
    6a16:	00 00       	bra	@r0		
    6a18:	20 00 15 01 	bra	&0x00115	
    6a1c:	00 00       	bra	@r0		
    6a1e:	00 00       	bra	@r0		
    6a20:	d0 1d       	.word	0x1dd0;	????	
    6a22:	00 00       	bra	@r0		
    6a24:	20 00 17 01 	bra	&0x00117	
    6a28:	00 00       	bra	@r0		
    6a2a:	00 00       	bra	@r0		
    6a2c:	df 1d       	.word	0x1ddf;	????	
    6a2e:	00 00       	bra	@r0		
    6a30:	20 00 19 01 	bra	&0x00119	
    6a34:	00 00       	bra	@r0		
    6a36:	00 00       	bra	@r0		
    6a38:	ee 1d       	.word	0x1dee;	????	
    6a3a:	00 00       	bra	@r0		
    6a3c:	20 00 1b 01 	bra	&0x0011b	
    6a40:	00 00       	bra	@r0		
    6a42:	00 00       	bra	@r0		
    6a44:	ff 1d       	.word	0x1dff;	????	
    6a46:	00 00       	bra	@r0		
    6a48:	20 00 1d 01 	bra	&0x0011d	
    6a4c:	00 00       	bra	@r0		
    6a4e:	00 00       	bra	@r0		
    6a50:	0f 1e       	.word	0x1e0f;	????	
    6a52:	00 00       	bra	@r0		
    6a54:	20 00 1f 01 	bra	&0x0011f	
    6a58:	00 00       	bra	@r0		
    6a5a:	00 00       	bra	@r0		
    6a5c:	20 1e       	.word	0x1e20;	????	
    6a5e:	00 00       	bra	@r0		
    6a60:	20 00 21 01 	bra	&0x00121	
    6a64:	00 00       	bra	@r0		
    6a66:	00 00       	bra	@r0		
    6a68:	ca 44 00 00 	mov.b	r4,	0(r10)	;0x0000(r10)
    6a6c:	20 00 23 01 	bra	&0x00123	
    6a70:	00 00       	bra	@r0		
    6a72:	00 00       	bra	@r0		
    6a74:	dc 44 00 00 	mov.b	0(r4),	32(r12)	;0x0000(r4), 0x0020(r12)
    6a78:	20 00 
    6a7a:	25 01 00 00 	mova	&0x10000,r5	
    6a7e:	00 00       	bra	@r0		
    6a80:	55 1e       	.word	0x1e55;	????	
    6a82:	00 00       	bra	@r0		
    6a84:	20 00 2c 01 	bra	&0x0012c	
    6a88:	00 00       	bra	@r0		
    6a8a:	00 00       	bra	@r0		
    6a8c:	65 1e       	.word	0x1e65;	????	
    6a8e:	00 00       	bra	@r0		
    6a90:	20 00 2e 01 	bra	&0x0012e	
    6a94:	00 00       	bra	@r0		
    6a96:	00 00       	bra	@r0		
    6a98:	75 1e       	.word	0x1e75;	????	
    6a9a:	00 00       	bra	@r0		
    6a9c:	20 00 30 01 	bra	&0x00130	
    6aa0:	00 00       	bra	@r0		
    6aa2:	00 00       	bra	@r0		
    6aa4:	84 1e       	.word	0x1e84;	????	
    6aa6:	00 00       	bra	@r0		
    6aa8:	20 00 32 01 	bra	&0x00132	
    6aac:	00 00       	bra	@r0		
    6aae:	00 00       	bra	@r0		
    6ab0:	93 1e       	.word	0x1e93;	????	
    6ab2:	00 00       	bra	@r0		
    6ab4:	20 00 34 01 	bra	&0x00134	
    6ab8:	00 00       	bra	@r0		
    6aba:	00 00       	bra	@r0		
    6abc:	a3 1e       	.word	0x1ea3;	????	
    6abe:	00 00       	bra	@r0		
    6ac0:	20 00 36 01 	bra	&0x00136	
    6ac4:	00 00       	bra	@r0		
    6ac6:	00 00       	bra	@r0		
    6ac8:	b3 1e       	.word	0x1eb3;	????	
    6aca:	00 00       	bra	@r0		
    6acc:	20 00 38 01 	bra	&0x00138	
    6ad0:	00 00       	bra	@r0		
    6ad2:	00 00       	bra	@r0		
    6ad4:	c4 1e       	.word	0x1ec4;	????	
    6ad6:	00 00       	bra	@r0		
    6ad8:	20 00 3a 01 	bra	&0x0013a	
    6adc:	00 00       	bra	@r0		
    6ade:	00 00       	bra	@r0		
    6ae0:	d5 1e       	.word	0x1ed5;	????	
    6ae2:	00 00       	bra	@r0		
    6ae4:	20 00 3c 01 	bra	&0x0013c	
    6ae8:	00 00       	bra	@r0		
    6aea:	00 00       	bra	@r0		
    6aec:	e6 1e       	.word	0x1ee6;	????	
    6aee:	00 00       	bra	@r0		
    6af0:	20 00 3e 01 	bra	&0x0013e	
    6af4:	00 00       	bra	@r0		
    6af6:	00 00       	bra	@r0		
    6af8:	f8 1e       	.word	0x1ef8;	????	
    6afa:	00 00       	bra	@r0		
    6afc:	20 00 40 01 	bra	&0x00140	
    6b00:	00 00       	bra	@r0		
    6b02:	00 00       	bra	@r0		
    6b04:	0a 1f       	.word	0x1f0a;	????	
    6b06:	00 00       	bra	@r0		
    6b08:	20 00 43 01 	bra	&0x00143	
    6b0c:	00 00       	bra	@r0		
    6b0e:	00 00       	bra	@r0		
    6b10:	1a 1f       	.word	0x1f1a;	????	
    6b12:	00 00       	bra	@r0		
    6b14:	20 00 45 01 	bra	&0x00145	
    6b18:	00 00       	bra	@r0		
    6b1a:	00 00       	bra	@r0		
    6b1c:	2a 1f       	.word	0x1f2a;	????	
    6b1e:	00 00       	bra	@r0		
    6b20:	20 00 47 01 	bra	&0x00147	
    6b24:	00 00       	bra	@r0		
    6b26:	00 00       	bra	@r0		
    6b28:	39 1f       	.word	0x1f39;	????	
    6b2a:	00 00       	bra	@r0		
    6b2c:	20 00 49 01 	bra	&0x00149	
    6b30:	00 00       	bra	@r0		
    6b32:	00 00       	bra	@r0		
    6b34:	48 1f       	.word	0x1f48;	????	
    6b36:	00 00       	bra	@r0		
    6b38:	20 00 4b 01 	bra	&0x0014b	
    6b3c:	00 00       	bra	@r0		
    6b3e:	00 00       	bra	@r0		
    6b40:	59 1f       	.word	0x1f59;	????	
    6b42:	00 00       	bra	@r0		
    6b44:	20 00 4d 01 	bra	&0x0014d	
    6b48:	00 00       	bra	@r0		
    6b4a:	00 00       	bra	@r0		
    6b4c:	69 1f       	.word	0x1f69;	????	
    6b4e:	00 00       	bra	@r0		
    6b50:	20 00 4f 01 	bra	&0x0014f	
    6b54:	00 00       	bra	@r0		
    6b56:	00 00       	bra	@r0		
    6b58:	7a 1f       	.word	0x1f7a;	????	
    6b5a:	00 00       	bra	@r0		
    6b5c:	20 00 51 01 	bra	&0x00151	
    6b60:	00 00       	bra	@r0		
    6b62:	00 00       	bra	@r0		
    6b64:	ee 44 00 00 	mov.b	@r4,	0(r14)	;0x0000(r14)
    6b68:	20 00 53 01 	bra	&0x00153	
    6b6c:	00 00       	bra	@r0		
    6b6e:	00 00       	bra	@r0		
    6b70:	00 45       	br	r5		
    6b72:	00 00       	bra	@r0		
    6b74:	20 00 55 01 	bra	&0x00155	
    6b78:	00 00       	bra	@r0		
    6b7a:	00 00       	bra	@r0		
    6b7c:	af 1f       	.word	0x1faf;	????	
    6b7e:	00 00       	bra	@r0		
    6b80:	20 00 58 01 	bra	&0x00158	
    6b84:	00 00       	bra	@r0		
    6b86:	00 00       	bra	@r0		
    6b88:	bc 1f       	.word	0x1fbc;	????	
    6b8a:	00 00       	bra	@r0		
    6b8c:	20 00 5a 01 	bra	&0x0015a	
    6b90:	00 00       	bra	@r0		
    6b92:	00 00       	bra	@r0		
    6b94:	12 45 00 00 	mov	0(r5),	r2	;0x0000(r5)
    6b98:	20 00 1a 00 	bra	&0x0001a	
    6b9c:	00 00       	bra	@r0		
    6b9e:	00 00       	bra	@r0		
    6ba0:	20 45       	br	@r5		
    6ba2:	00 00       	bra	@r0		
    6ba4:	20 00 1c 00 	bra	&0x0001c	
    6ba8:	00 00       	bra	@r0		
    6baa:	00 00       	bra	@r0		
    6bac:	2f 45       	mov	@r5,	r15	
    6bae:	00 00       	bra	@r0		
    6bb0:	20 00 1e 00 	bra	&0x0001e	
    6bb4:	00 00       	bra	@r0		
    6bb6:	00 00       	bra	@r0		
    6bb8:	3c 45       	mov	@r5+,	r12	
    6bba:	00 00       	bra	@r0		
    6bbc:	20 00 21 00 	bra	&0x00021	
    6bc0:	00 00       	bra	@r0		
    6bc2:	00 00       	bra	@r0		
    6bc4:	4d 45       	mov.b	r5,	r13	
    6bc6:	00 00       	bra	@r0		
    6bc8:	20 00 23 00 	bra	&0x00023	
    6bcc:	00 00       	bra	@r0		
    6bce:	00 00       	bra	@r0		
    6bd0:	5e 45 00 00 	mov.b	0(r5),	r14	;0x0000(r5)
    6bd4:	20 00 25 00 	bra	&0x00025	
    6bd8:	00 00       	bra	@r0		
    6bda:	00 00       	bra	@r0		
    6bdc:	6e 45       	mov.b	@r5,	r14	
    6bde:	00 00       	bra	@r0		
    6be0:	20 00 27 00 	bra	&0x00027	
    6be4:	00 00       	bra	@r0		
    6be6:	00 00       	bra	@r0		
    6be8:	7e 45       	mov.b	@r5+,	r14	
    6bea:	00 00       	bra	@r0		
    6bec:	20 00 47 00 	bra	&0x00047	
    6bf0:	00 00       	bra	@r0		
    6bf2:	00 00       	bra	@r0		
    6bf4:	8f 45 00 00 	mov	r5,	0(r15)	;0x0000(r15)
    6bf8:	20 00 49 00 	bra	&0x00049	
    6bfc:	00 00       	bra	@r0		
    6bfe:	00 00       	bra	@r0		
    6c00:	9f 45 00 00 	mov	0(r5),	32(r15)	;0x0000(r5), 0x0020(r15)
    6c04:	20 00 
    6c06:	ac 00 00 00 	adda	#0x00000,r12	
    6c0a:	00 00       	bra	@r0		
    6c0c:	ae 45 00 00 	mov	@r5,	0(r14)	;0x0000(r14)
    6c10:	20 00 16 00 	bra	&0x00016	
    6c14:	00 00       	bra	@r0		
    6c16:	00 00       	bra	@r0		
    6c18:	bb 45 00 00 	mov	@r5+,	0(r11)	;0x0000(r11)
    6c1c:	20 00 18 00 	bra	&0x00018	
    6c20:	00 00       	bra	@r0		
    6c22:	00 00       	bra	@r0		
    6c24:	c9 45 00 00 	mov.b	r5,	0(r9)	;0x0000(r9)
    6c28:	20 00 1a 00 	bra	&0x0001a	
    6c2c:	00 00       	bra	@r0		
    6c2e:	00 00       	bra	@r0		
    6c30:	d5 45 00 00 	mov.b	0(r5),	32(r5)	;0x0000(r5), 0x0020(r5)
    6c34:	20 00 
    6c36:	1d 00       	mova	#0x00000,r13	
    6c38:	00 00       	bra	@r0		
    6c3a:	00 00       	bra	@r0		
    6c3c:	e5 45 00 00 	mov.b	@r5,	0(r5)	;0x0000(r5)
    6c40:	20 00 1f 00 	bra	&0x0001f	
    6c44:	00 00       	bra	@r0		
    6c46:	00 00       	bra	@r0		
    6c48:	f5 45 00 00 	mov.b	@r5+,	0(r5)	;0x0000(r5)
    6c4c:	20 00 21 00 	bra	&0x00021	
    6c50:	00 00       	bra	@r0		
    6c52:	00 00       	bra	@r0		
    6c54:	05 46       	mov	r6,	r5	
    6c56:	00 00       	bra	@r0		
    6c58:	20 00 23 00 	bra	&0x00023	
    6c5c:	00 00       	bra	@r0		
    6c5e:	00 00       	bra	@r0		
    6c60:	14 46 00 00 	mov	0(r6),	r4	;0x0000(r6)
    6c64:	20 00 25 00 	bra	&0x00025	
    6c68:	00 00       	bra	@r0		
    6c6a:	00 00       	bra	@r0		
    6c6c:	23 46       	.word	0x4623;	????	Illegal as 2-op instr
    6c6e:	00 00       	bra	@r0		
    6c70:	20 00 27 00 	bra	&0x00027	
    6c74:	00 00       	bra	@r0		
    6c76:	00 00       	bra	@r0		
    6c78:	32 46       	mov	@r6+,	r2	
    6c7a:	00 00       	bra	@r0		
    6c7c:	20 00 2c 00 	bra	&0x0002c	
    6c80:	00 00       	bra	@r0		
    6c82:	00 00       	bra	@r0		
    6c84:	42 46       	mov.b	r6,	r2	
    6c86:	00 00       	bra	@r0		
    6c88:	20 00 2e 00 	bra	&0x0002e	
    6c8c:	00 00       	bra	@r0		
    6c8e:	00 00       	bra	@r0		
    6c90:	52 46 00 00 	mov.b	0(r6),	r2	;0x0000(r6)
    6c94:	20 00 30 00 	bra	&0x00030	
    6c98:	00 00       	bra	@r0		
    6c9a:	00 00       	bra	@r0		
    6c9c:	62 46       	mov.b	@r6,	r2	
    6c9e:	00 00       	bra	@r0		
    6ca0:	20 00 32 00 	bra	&0x00032	
    6ca4:	00 00       	bra	@r0		
    6ca6:	00 00       	bra	@r0		
    6ca8:	72 46       	mov.b	@r6+,	r2	
    6caa:	00 00       	bra	@r0		
    6cac:	20 00 34 00 	bra	&0x00034	
    6cb0:	00 00       	bra	@r0		
    6cb2:	00 00       	bra	@r0		
    6cb4:	81 46 00 00 	mov	r6,	0(r1)	;0x0000(r1)
    6cb8:	20 00 36 00 	bra	&0x00036	
    6cbc:	00 00       	bra	@r0		
    6cbe:	00 00       	bra	@r0		
    6cc0:	90 46 00 00 	mov	0(r6),	0x0020	;0x0000(r6), PC rel. 0x06ce6
    6cc4:	20 00 
    6cc6:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x06cc8
    6cca:	00 00       	bra	@r0		
    6ccc:	9f 46 00 00 	mov	0(r6),	32(r15)	;0x0000(r6), 0x0020(r15)
    6cd0:	20 00 
    6cd2:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x06cd4
    6cd6:	00 00       	bra	@r0		
    6cd8:	ae 46 00 00 	mov	@r6,	0(r14)	;0x0000(r14)
    6cdc:	20 00 7a 00 	bra	&0x0007a	
    6ce0:	00 00       	bra	@r0		
    6ce2:	00 00       	bra	@r0		
    6ce4:	75 21       	jnz	$+748    	;abs 0x6fd0
    6ce6:	00 00       	bra	@r0		
    6ce8:	20 00 14 00 	bra	&0x00014	
    6cec:	00 00       	bra	@r0		
    6cee:	00 00       	bra	@r0		
    6cf0:	83 21       	jnz	$+776    	;abs 0x6ff8
    6cf2:	00 00       	bra	@r0		
    6cf4:	20 00 16 00 	bra	&0x00016	
    6cf8:	00 00       	bra	@r0		
    6cfa:	00 00       	bra	@r0		
    6cfc:	92 21       	jnz	$+806    	;abs 0x7022
    6cfe:	00 00       	bra	@r0		
    6d00:	20 00 18 00 	bra	&0x00018	
    6d04:	00 00       	bra	@r0		
    6d06:	00 00       	bra	@r0		
    6d08:	a1 21       	jnz	$+836    	;abs 0x704c
    6d0a:	00 00       	bra	@r0		
    6d0c:	20 00 1b 00 	bra	&0x0001b	
    6d10:	00 00       	bra	@r0		
    6d12:	00 00       	bra	@r0		
    6d14:	bd 46 00 00 	mov	@r6+,	0(r13)	;0x0000(r13)
    6d18:	20 00 14 00 	bra	&0x00014	
    6d1c:	00 00       	bra	@r0		
    6d1e:	00 00       	bra	@r0		
    6d20:	cb 46 00 00 	mov.b	r6,	0(r11)	;0x0000(r11)
    6d24:	20 00 16 00 	bra	&0x00016	
    6d28:	00 00       	bra	@r0		
    6d2a:	00 00       	bra	@r0		
    6d2c:	d9 46 00 00 	mov.b	0(r6),	32(r9)	;0x0000(r6), 0x0020(r9)
    6d30:	20 00 
    6d32:	18 00       	mova	#0x00000,r8	
    6d34:	00 00       	bra	@r0		
    6d36:	00 00       	bra	@r0		
    6d38:	da 21       	jnz	$+950    	;abs 0x70ee
    6d3a:	00 00       	bra	@r0		
    6d3c:	20 00 14 00 	bra	&0x00014	
    6d40:	00 00       	bra	@r0		
    6d42:	00 00       	bra	@r0		
    6d44:	e8 21       	jnz	$+978    	;abs 0x7116
    6d46:	00 00       	bra	@r0		
    6d48:	20 00 16 00 	bra	&0x00016	
    6d4c:	00 00       	bra	@r0		
    6d4e:	00 00       	bra	@r0		
    6d50:	f6 21       	jnz	$+1006   	;abs 0x713e
    6d52:	00 00       	bra	@r0		
    6d54:	20 00 18 00 	bra	&0x00018	
    6d58:	00 00       	bra	@r0		
    6d5a:	00 00       	bra	@r0		
    6d5c:	e7 46 00 00 	mov.b	@r6,	0(r7)	;0x0000(r7)
    6d60:	20 00 12 00 	bra	&0x00012	
    6d64:	00 00       	bra	@r0		
    6d66:	00 00       	bra	@r0		
    6d68:	f9 46 00 00 	mov.b	@r6+,	0(r9)	;0x0000(r9)
    6d6c:	20 00 14 00 	bra	&0x00014	
    6d70:	00 00       	bra	@r0		
    6d72:	00 00       	bra	@r0		
    6d74:	0b 47       	mov	r7,	r11	
    6d76:	00 00       	bra	@r0		
    6d78:	20 00 16 00 	bra	&0x00016	
    6d7c:	00 00       	bra	@r0		
    6d7e:	00 00       	bra	@r0		
    6d80:	1c 47 00 00 	mov	0(r7),	r12	;0x0000(r7)
    6d84:	20 00 18 00 	bra	&0x00018	
    6d88:	00 00       	bra	@r0		
    6d8a:	00 00       	bra	@r0		
    6d8c:	2c 47       	mov	@r7,	r12	
    6d8e:	00 00       	bra	@r0		
    6d90:	20 00 1a 00 	bra	&0x0001a	
    6d94:	00 00       	bra	@r0		
    6d96:	00 00       	bra	@r0		
    6d98:	3c 47       	mov	@r7+,	r12	
    6d9a:	00 00       	bra	@r0		
    6d9c:	20 00 58 00 	bra	&0x00058	
    6da0:	00 00       	bra	@r0		
    6da2:	00 00       	bra	@r0		
    6da4:	4a 47       	mov.b	r7,	r10	
    6da6:	00 00       	bra	@r0		
    6da8:	20 00 64 00 	bra	&0x00064	
    6dac:	00 00       	bra	@r0		
    6dae:	00 00       	bra	@r0		
    6db0:	5c 47 00 00 	mov.b	0(r7),	r12	;0x0000(r7)
    6db4:	20 00 66 00 	bra	&0x00066	
    6db8:	00 00       	bra	@r0		
    6dba:	00 00       	bra	@r0		
    6dbc:	6e 47       	mov.b	@r7,	r14	
    6dbe:	00 00       	bra	@r0		
    6dc0:	20 00 68 00 	bra	&0x00068	
    6dc4:	00 00       	bra	@r0		
    6dc6:	00 00       	bra	@r0		
    6dc8:	80 47 00 00 	mov	r7,	0x0000	;PC rel. 0x06dcc
    6dcc:	20 00 6a 00 	bra	&0x0006a	
    6dd0:	00 00       	bra	@r0		
    6dd2:	00 00       	bra	@r0		
    6dd4:	92 47 00 00 	mov	0(r7),	&0x0020	;0x0000(r7)
    6dd8:	20 00 
    6dda:	6c 00 00 00 	mova	r0,	&0xc0000
    6dde:	00 00       	bra	@r0		
    6de0:	a4 47 00 00 	mov	@r7,	0(r4)	;0x0000(r4)
    6de4:	20 00 6e 00 	bra	&0x0006e	
    6de8:	00 00       	bra	@r0		
    6dea:	00 00       	bra	@r0		
    6dec:	b6 47 00 00 	mov	@r7+,	0(r6)	;0x0000(r6)
    6df0:	20 00 70 00 	bra	&0x00070	
    6df4:	00 00       	bra	@r0		
    6df6:	00 00       	bra	@r0		
    6df8:	c8 47 00 00 	mov.b	r7,	0(r8)	;0x0000(r8)
    6dfc:	20 00 72 00 	bra	&0x00072	
    6e00:	00 00       	bra	@r0		
    6e02:	00 00       	bra	@r0		
    6e04:	da 47 00 00 	mov.b	0(r7),	32(r10)	;0x0000(r7), 0x0020(r10)
    6e08:	20 00 
    6e0a:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
    6e0e:	00 00       	bra	@r0		
    6e10:	ec 47 00 00 	mov.b	@r7,	0(r12)	;0x0000(r12)
    6e14:	20 00 76 00 	bra	&0x00076	
    6e18:	00 00       	bra	@r0		
    6e1a:	00 00       	bra	@r0		
    6e1c:	fe 47 00 00 	mov.b	@r7+,	0(r14)	;0x0000(r14)
    6e20:	20 00 78 00 	bra	&0x00078	
    6e24:	00 00       	bra	@r0		
    6e26:	00 00       	bra	@r0		
    6e28:	11 48 00 00 	mov	0(r8),	r1	;0x0000(r8)
    6e2c:	20 00 7a 00 	bra	&0x0007a	
    6e30:	00 00       	bra	@r0		
    6e32:	00 00       	bra	@r0		
    6e34:	24 48       	mov	@r8,	r4	
    6e36:	00 00       	bra	@r0		
    6e38:	20 00 7c 00 	bra	&0x0007c	
    6e3c:	00 00       	bra	@r0		
    6e3e:	00 00       	bra	@r0		
    6e40:	37 48       	mov	@r8+,	r7	
    6e42:	00 00       	bra	@r0		
    6e44:	20 00 7e 00 	bra	&0x0007e	
    6e48:	00 00       	bra	@r0		
    6e4a:	00 00       	bra	@r0		
    6e4c:	4a 48       	mov.b	r8,	r10	
    6e4e:	00 00       	bra	@r0		
    6e50:	20 00 80 00 	bra	&0x00080	
    6e54:	00 00       	bra	@r0		
    6e56:	00 00       	bra	@r0		
    6e58:	5d 48 00 00 	mov.b	0(r8),	r13	;0x0000(r8)
    6e5c:	20 00 82 00 	bra	&0x00082	
    6e60:	00 00       	bra	@r0		
    6e62:	00 00       	bra	@r0		
    6e64:	8b 23       	jnz	$-232    	;abs 0x6d7c
    6e66:	00 00       	bra	@r0		
    6e68:	20 00 8b 00 	bra	&0x0008b	
    6e6c:	00 00       	bra	@r0		
    6e6e:	00 00       	bra	@r0		
    6e70:	9d 23       	jnz	$-196    	;abs 0x6dac
    6e72:	00 00       	bra	@r0		
    6e74:	20 00 8d 00 	bra	&0x0008d	
    6e78:	00 00       	bra	@r0		
    6e7a:	00 00       	bra	@r0		
    6e7c:	af 23       	jnz	$-160    	;abs 0x6ddc
    6e7e:	00 00       	bra	@r0		
    6e80:	20 00 8f 00 	bra	&0x0008f	
    6e84:	00 00       	bra	@r0		
    6e86:	00 00       	bra	@r0		
    6e88:	c1 23       	jnz	$-124    	;abs 0x6e0c
    6e8a:	00 00       	bra	@r0		
    6e8c:	20 00 91 00 	bra	&0x00091	
    6e90:	00 00       	bra	@r0		
    6e92:	00 00       	bra	@r0		
    6e94:	d3 23       	jnz	$-88     	;abs 0x6e3c
    6e96:	00 00       	bra	@r0		
    6e98:	20 00 93 00 	bra	&0x00093	
    6e9c:	00 00       	bra	@r0		
    6e9e:	00 00       	bra	@r0		
    6ea0:	e5 23       	jnz	$-52     	;abs 0x6e6c
    6ea2:	00 00       	bra	@r0		
    6ea4:	20 00 95 00 	bra	&0x00095	
    6ea8:	00 00       	bra	@r0		
    6eaa:	00 00       	bra	@r0		
    6eac:	f7 23       	jnz	$-16     	;abs 0x6e9c
    6eae:	00 00       	bra	@r0		
    6eb0:	20 00 97 00 	bra	&0x00097	
    6eb4:	00 00       	bra	@r0		
    6eb6:	00 00       	bra	@r0		
    6eb8:	09 24       	jz	$+20     	;abs 0x6ecc
    6eba:	00 00       	bra	@r0		
    6ebc:	20 00 99 00 	bra	&0x00099	
    6ec0:	00 00       	bra	@r0		
    6ec2:	00 00       	bra	@r0		
    6ec4:	1b 24       	jz	$+56     	;abs 0x6efc
    6ec6:	00 00       	bra	@r0		
    6ec8:	20 00 9b 00 	bra	&0x0009b	
    6ecc:	00 00       	bra	@r0		
    6ece:	00 00       	bra	@r0		
    6ed0:	2d 24       	jz	$+92     	;abs 0x6f2c
    6ed2:	00 00       	bra	@r0		
    6ed4:	20 00 9d 00 	bra	&0x0009d	
    6ed8:	00 00       	bra	@r0		
    6eda:	00 00       	bra	@r0		
    6edc:	3f 24       	jz	$+128    	;abs 0x6f5c
    6ede:	00 00       	bra	@r0		
    6ee0:	20 00 9f 00 	bra	&0x0009f	
    6ee4:	00 00       	bra	@r0		
    6ee6:	00 00       	bra	@r0		
    6ee8:	52 24       	jz	$+166    	;abs 0x6f8e
    6eea:	00 00       	bra	@r0		
    6eec:	20 00 a1 00 	bra	&0x000a1	
    6ef0:	00 00       	bra	@r0		
    6ef2:	00 00       	bra	@r0		
    6ef4:	65 24       	jz	$+204    	;abs 0x6fc0
    6ef6:	00 00       	bra	@r0		
    6ef8:	20 00 a3 00 	bra	&0x000a3	
    6efc:	00 00       	bra	@r0		
    6efe:	00 00       	bra	@r0		
    6f00:	78 24       	jz	$+242    	;abs 0x6ff2
    6f02:	00 00       	bra	@r0		
    6f04:	20 00 a5 00 	bra	&0x000a5	
    6f08:	00 00       	bra	@r0		
    6f0a:	00 00       	bra	@r0		
    6f0c:	8b 24       	jz	$+280    	;abs 0x7024
    6f0e:	00 00       	bra	@r0		
    6f10:	20 00 a7 00 	bra	&0x000a7	
    6f14:	00 00       	bra	@r0		
    6f16:	00 00       	bra	@r0		
    6f18:	9e 24       	jz	$+318    	;abs 0x7056
    6f1a:	00 00       	bra	@r0		
    6f1c:	20 00 a9 00 	bra	&0x000a9	
    6f20:	00 00       	bra	@r0		
    6f22:	00 00       	bra	@r0		
    6f24:	70 48       	br	@r8+		
    6f26:	00 00       	bra	@r0		
    6f28:	20 00 12 00 	bra	&0x00012	
    6f2c:	00 00       	bra	@r0		
    6f2e:	00 00       	bra	@r0		
    6f30:	83 48       	mov	r8,	#1	;r3 As==01
    6f32:	00 00       	bra	@r0		
    6f34:	20 00 14 00 	bra	&0x00014	
    6f38:	00 00       	bra	@r0		
    6f3a:	00 00       	bra	@r0		
    6f3c:	96 48 00 00 	mov	0(r8),	32(r6)	;0x0000(r8), 0x0020(r6)
    6f40:	20 00 
    6f42:	16 00       	mova	#0x00000,r6	
    6f44:	00 00       	bra	@r0		
    6f46:	00 00       	bra	@r0		
    6f48:	a9 48 00 00 	mov	@r8,	0(r9)	;0x0000(r9)
    6f4c:	20 00 18 00 	bra	&0x00018	
    6f50:	00 00       	bra	@r0		
    6f52:	00 00       	bra	@r0		
    6f54:	bc 48 00 00 	mov	@r8+,	0(r12)	;0x0000(r12)
    6f58:	20 00 18 00 	bra	&0x00018	
    6f5c:	00 00       	bra	@r0		
    6f5e:	00 00       	bra	@r0		
    6f60:	cc 48 00 00 	mov.b	r8,	0(r12)	;0x0000(r12)
    6f64:	20 00 1a 00 	bra	&0x0001a	
    6f68:	00 00       	bra	@r0		
    6f6a:	00 00       	bra	@r0		
    6f6c:	dc 48 00 00 	mov.b	0(r8),	32(r12)	;0x0000(r8), 0x0020(r12)
    6f70:	20 00 
    6f72:	1d 00       	mova	#0x00000,r13	
    6f74:	00 00       	bra	@r0		
    6f76:	00 00       	bra	@r0		
    6f78:	ea 48 00 00 	mov.b	@r8,	0(r10)	;0x0000(r10)
    6f7c:	20 00 3f 00 	bra	&0x0003f	
    6f80:	00 00       	bra	@r0		
    6f82:	00 00       	bra	@r0		
    6f84:	3b 25       	jz	$+632    	;abs 0x71fc
    6f86:	00 00       	bra	@r0		
    6f88:	20 00 41 00 	bra	&0x00041	
    6f8c:	00 00       	bra	@r0		
    6f8e:	00 00       	bra	@r0		
    6f90:	fa 48 00 00 	mov.b	@r8+,	0(r10)	;0x0000(r10)
    6f94:	20 00 43 00 	bra	&0x00043	
    6f98:	00 00       	bra	@r0		
    6f9a:	00 00       	bra	@r0		
    6f9c:	60 25       	jz	$+706    	;abs 0x725e
    6f9e:	00 00       	bra	@r0		
    6fa0:	20 00 45 00 	bra	&0x00045	
    6fa4:	00 00       	bra	@r0		
    6fa6:	00 00       	bra	@r0		
    6fa8:	0a 49       	mov	r9,	r10	
    6faa:	00 00       	bra	@r0		
    6fac:	20 00 47 00 	bra	&0x00047	
    6fb0:	00 00       	bra	@r0		
    6fb2:	00 00       	bra	@r0		
    6fb4:	1a 49 00 00 	mov	0(r9),	r10	;0x0000(r9)
    6fb8:	20 00 49 00 	bra	&0x00049	
    6fbc:	00 00       	bra	@r0		
    6fbe:	00 00       	bra	@r0		
    6fc0:	29 49       	mov	@r9,	r9	
    6fc2:	00 00       	bra	@r0		
    6fc4:	20 00 4c 00 	bra	&0x0004c	
    6fc8:	00 00       	bra	@r0		
    6fca:	00 00       	bra	@r0		
    6fcc:	9d 25       	jz	$+828    	;abs 0x7308
    6fce:	00 00       	bra	@r0		
    6fd0:	20 00 4e 00 	bra	&0x0004e	
    6fd4:	00 00       	bra	@r0		
    6fd6:	00 00       	bra	@r0		
    6fd8:	39 49       	mov	@r9+,	r9	
    6fda:	00 00       	bra	@r0		
    6fdc:	20 00 50 00 	bra	&0x00050	
    6fe0:	00 00       	bra	@r0		
    6fe2:	00 00       	bra	@r0		
    6fe4:	49 49       	mov.b	r9,	r9	
    6fe6:	00 00       	bra	@r0		
    6fe8:	20 00 52 00 	bra	&0x00052	
    6fec:	00 00       	bra	@r0		
    6fee:	00 00       	bra	@r0		
    6ff0:	58 49 00 00 	mov.b	0(r9),	r8	;0x0000(r9)
    6ff4:	20 00 54 00 	bra	&0x00054	
    6ff8:	00 00       	bra	@r0		
    6ffa:	00 00       	bra	@r0		
    6ffc:	68 49       	mov.b	@r9,	r8	
    6ffe:	00 00       	bra	@r0		
    7000:	20 00 56 00 	bra	&0x00056	
    7004:	00 00       	bra	@r0		
    7006:	00 00       	bra	@r0		
    7008:	77 49       	mov.b	@r9+,	r7	
    700a:	00 00       	bra	@r0		
    700c:	20 00 59 00 	bra	&0x00059	
    7010:	00 00       	bra	@r0		
    7012:	00 00       	bra	@r0		
    7014:	f9 25       	jz	$+1012   	;abs 0x7408
    7016:	00 00       	bra	@r0		
    7018:	20 00 5b 00 	bra	&0x0005b	
    701c:	00 00       	bra	@r0		
    701e:	00 00       	bra	@r0		
    7020:	87 49 00 00 	mov	r9,	0(r7)	;0x0000(r7)
    7024:	20 00 5d 00 	bra	&0x0005d	
    7028:	00 00       	bra	@r0		
    702a:	00 00       	bra	@r0		
    702c:	17 26       	jz	$-976    	;abs 0x6c5c
    702e:	00 00       	bra	@r0		
    7030:	20 00 5f 00 	bra	&0x0005f	
    7034:	00 00       	bra	@r0		
    7036:	00 00       	bra	@r0		
    7038:	97 49 00 00 	mov	0(r9),	32(r7)	;0x0000(r9), 0x0020(r7)
    703c:	20 00 
    703e:	61 00 00 00 	mova	r0,	&0x10000
    7042:	00 00       	bra	@r0		
    7044:	a7 49 00 00 	mov	@r9,	0(r7)	;0x0000(r7)
    7048:	20 00 63 00 	bra	&0x00063	
    704c:	00 00       	bra	@r0		
    704e:	00 00       	bra	@r0		
    7050:	b6 49 00 00 	mov	@r9+,	0(r6)	;0x0000(r6)
    7054:	20 00 47 00 	bra	&0x00047	
    7058:	00 00       	bra	@r0		
    705a:	00 00       	bra	@r0		
    705c:	53 26       	jz	$-856    	;abs 0x6d04
    705e:	00 00       	bra	@r0		
    7060:	20 00 45 00 	bra	&0x00045	
    7064:	00 00       	bra	@r0		
    7066:	00 00       	bra	@r0		
    7068:	5e 26       	jz	$-834    	;abs 0x6d26
    706a:	00 00       	bra	@r0		
    706c:	20 00 4c 00 	bra	&0x0004c	
    7070:	00 00       	bra	@r0		
    7072:	00 00       	bra	@r0		
    7074:	6a 26       	jz	$-810    	;abs 0x6d4a
    7076:	00 00       	bra	@r0		
    7078:	20 00 54 00 	bra	&0x00054	
    707c:	00 00       	bra	@r0		
    707e:	00 00       	bra	@r0		
    7080:	75 26       	jz	$-788    	;abs 0x6d6c
    7082:	00 00       	bra	@r0		
    7084:	20 00 5c 00 	bra	&0x0005c	
    7088:	00 00       	bra	@r0		
    708a:	00 00       	bra	@r0		
    708c:	c5 49 00 00 	mov.b	r9,	0(r5)	;0x0000(r5)
    7090:	20 00 6e 00 	bra	&0x0006e	
    7094:	00 00       	bra	@r0		
    7096:	00 00       	bra	@r0		
    7098:	96 26       	jz	$-722    	;abs 0x6dc6
    709a:	00 00       	bra	@r0		
    709c:	20 00 70 00 	bra	&0x00070	
    70a0:	00 00       	bra	@r0		
    70a2:	00 00       	bra	@r0		
    70a4:	ac 26       	jz	$-678    	;abs 0x6dfe
    70a6:	00 00       	bra	@r0		
    70a8:	20 00 72 00 	bra	&0x00072	
    70ac:	00 00       	bra	@r0		
    70ae:	00 00       	bra	@r0		
    70b0:	c2 26       	jz	$-634    	;abs 0x6e36
    70b2:	00 00       	bra	@r0		
    70b4:	20 00 74 00 	bra	&0x00074	
    70b8:	00 00       	bra	@r0		
    70ba:	00 00       	bra	@r0		
    70bc:	d9 26       	jz	$-588    	;abs 0x6e70
    70be:	00 00       	bra	@r0		
    70c0:	20 00 76 00 	bra	&0x00076	
    70c4:	00 00       	bra	@r0		
    70c6:	00 00       	bra	@r0		
    70c8:	f0 26       	jz	$-542    	;abs 0x6eaa
    70ca:	00 00       	bra	@r0		
    70cc:	20 00 93 00 	bra	&0x00093	
    70d0:	00 00       	bra	@r0		
    70d2:	00 00       	bra	@r0		
    70d4:	04 27       	jz	$-502    	;abs 0x6ede
    70d6:	00 00       	bra	@r0		
    70d8:	20 00 95 00 	bra	&0x00095	
    70dc:	00 00       	bra	@r0		
    70de:	00 00       	bra	@r0		
    70e0:	18 27       	jz	$-462    	;abs 0x6f12
    70e2:	00 00       	bra	@r0		
    70e4:	20 00 97 00 	bra	&0x00097	
    70e8:	00 00       	bra	@r0		
    70ea:	00 00       	bra	@r0		
    70ec:	2c 27       	jz	$-422    	;abs 0x6f46
    70ee:	00 00       	bra	@r0		
    70f0:	20 00 99 00 	bra	&0x00099	
    70f4:	00 00       	bra	@r0		
    70f6:	00 00       	bra	@r0		
    70f8:	40 27       	jz	$-382    	;abs 0x6f7a
    70fa:	00 00       	bra	@r0		
    70fc:	20 00 9b 00 	bra	&0x0009b	
    7100:	00 00       	bra	@r0		
    7102:	00 00       	bra	@r0		
    7104:	53 27       	jz	$-344    	;abs 0x6fac
    7106:	00 00       	bra	@r0		
    7108:	20 00 9d 00 	bra	&0x0009d	
    710c:	00 00       	bra	@r0		
    710e:	00 00       	bra	@r0		
    7110:	66 27       	jz	$-306    	;abs 0x6fde
    7112:	00 00       	bra	@r0		
    7114:	20 00 9f 00 	bra	&0x0009f	
    7118:	00 00       	bra	@r0		
    711a:	00 00       	bra	@r0		
    711c:	79 27       	jz	$-268    	;abs 0x7010
    711e:	00 00       	bra	@r0		
    7120:	20 00 a1 00 	bra	&0x000a1	
    7124:	00 00       	bra	@r0		
    7126:	00 00       	bra	@r0		
    7128:	da 49 00 00 	mov.b	0(r9),	32(r10)	;0x0000(r9), 0x0020(r10)
    712c:	20 00 
    712e:	12 00       	mova	#0x00000,r2	
	...
    7138:	64 00 00 00 	mova	r0,	&0x40000
    713c:	30 51       	add	@r1+,	r0	
    713e:	00 00       	bra	@r0		
    7140:	81 33       	jn	$-252    	;abs 0x7044
    7142:	00 00       	bra	@r0		
    7144:	64 00 00 00 	mova	r0,	&0x40000
    7148:	30 51       	add	@r1+,	r0	
    714a:	00 00       	bra	@r0		
    714c:	f4 49 00 00 	mov.b	@r9+,	0(r4)	;0x0000(r4)
    7150:	64 00 00 00 	mova	r0,	&0x40000
    7154:	30 51       	add	@r1+,	r0	
    7156:	00 00       	bra	@r0		
    7158:	6a 00 00 00 	mova	r0,	&0xa0000
    715c:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0715e
    7160:	00 00       	bra	@r0		
    7162:	00 00       	bra	@r0		
    7164:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    7168:	80 00 00 00 	bra	#0x00000	
    716c:	00 00       	bra	@r0		
    716e:	00 00       	bra	@r0		
    7170:	99 00 00 00 	cmpa	#0x00000,r9	
    7174:	80 00 00 00 	bra	#0x00000	
    7178:	00 00       	bra	@r0		
    717a:	00 00       	bra	@r0		
    717c:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    717e:	00 00       	bra	@r0		
    7180:	80 00 00 00 	bra	#0x00000	
    7184:	00 00       	bra	@r0		
    7186:	00 00       	bra	@r0		
    7188:	ec 00       	adda	r0,	r12	
    718a:	00 00       	bra	@r0		
    718c:	80 00 00 00 	bra	#0x00000	
    7190:	00 00       	bra	@r0		
    7192:	00 00       	bra	@r0		
    7194:	24 01 00 00 	mova	&0x10000,r4	
    7198:	80 00 00 00 	bra	#0x00000	
    719c:	00 00       	bra	@r0		
    719e:	00 00       	bra	@r0		
    71a0:	66 01 00 00 	mova	r1,	&0x60000
    71a4:	80 00 00 00 	bra	#0x00000	
    71a8:	00 00       	bra	@r0		
    71aa:	00 00       	bra	@r0		
    71ac:	b7 01 00 00 	suba	#0x10000,r7	
    71b0:	80 00 00 00 	bra	#0x00000	
    71b4:	00 00       	bra	@r0		
    71b6:	00 00       	bra	@r0		
    71b8:	08 02       	mova	#4,	r8	;r2 As==10
    71ba:	00 00       	bra	@r0		
    71bc:	80 00 00 00 	bra	#0x00000	
    71c0:	00 00       	bra	@r0		
    71c2:	00 00       	bra	@r0		
    71c4:	2e 02 00 00 	mova	&0x20000,r14	
    71c8:	80 00 00 00 	bra	#0x00000	
    71cc:	00 00       	bra	@r0		
    71ce:	00 00       	bra	@r0		
    71d0:	6c 02 00 00 	mova	r2,	&0xc0000
    71d4:	80 00 00 00 	bra	#0x00000	
    71d8:	00 00       	bra	@r0		
    71da:	00 00       	bra	@r0		
    71dc:	96 02 00 00 	cmpa	#0x20000,r6	
    71e0:	80 00 00 00 	bra	#0x00000	
    71e4:	00 00       	bra	@r0		
    71e6:	00 00       	bra	@r0		
    71e8:	bf 02 00 00 	suba	#0x20000,r15	
    71ec:	80 00 00 00 	bra	#0x00000	
    71f0:	00 00       	bra	@r0		
    71f2:	00 00       	bra	@r0		
    71f4:	d9 02       	cmpa	r2,	r9	
    71f6:	00 00       	bra	@r0		
    71f8:	80 00 00 00 	bra	#0x00000	
    71fc:	00 00       	bra	@r0		
    71fe:	00 00       	bra	@r0		
    7200:	f4 02       	suba	r2,	r4	
    7202:	00 00       	bra	@r0		
    7204:	80 00 00 00 	bra	#0x00000	
    7208:	00 00       	bra	@r0		
    720a:	00 00       	bra	@r0		
    720c:	14 03       	mova	#-1,	r4	;r3 As==11
    720e:	00 00       	bra	@r0		
    7210:	80 00 00 00 	bra	#0x00000	
    7214:	00 00       	bra	@r0		
    7216:	00 00       	bra	@r0		
    7218:	4d 03       	rrum.a	#1,	r13	
    721a:	00 00       	bra	@r0		
    721c:	80 00 00 00 	bra	#0x00000	
    7220:	00 00       	bra	@r0		
    7222:	00 00       	bra	@r0		
    7224:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    7228:	80 00 00 00 	bra	#0x00000	
    722c:	00 00       	bra	@r0		
    722e:	00 00       	bra	@r0		
    7230:	8a 03 00 00 	mova	#0x30000,r10	
    7234:	80 00 00 00 	bra	#0x00000	
    7238:	00 00       	bra	@r0		
    723a:	00 00       	bra	@r0		
    723c:	ae 03 00 00 	adda	#0x30000,r14	
    7240:	80 00 00 00 	bra	#0x00000	
    7244:	00 00       	bra	@r0		
    7246:	00 00       	bra	@r0		
    7248:	d7 03       	tsta	r7		
    724a:	00 00       	bra	@r0		
    724c:	80 00 00 00 	bra	#0x00000	
    7250:	00 00       	bra	@r0		
    7252:	00 00       	bra	@r0		
    7254:	f4 49 00 00 	mov.b	@r9+,	0(r4)	;0x0000(r4)
    7258:	82 00 00 00 	mova	#0x00000,r2	
    725c:	d4 00       	cmpa	r0,	r4	
    725e:	03 00       	.word	0x0003;	????	Illegal as address instr
    7260:	cf 09       	mova	r9,	r15	
    7262:	00 00       	bra	@r0		
    7264:	c2 00       	mova	r0,	r2	
    7266:	00 00       	bra	@r0		
    7268:	00 00       	bra	@r0		
    726a:	00 00       	bra	@r0		
    726c:	ab 09 00 00 	adda	#0x90000,r11	
    7270:	c2 00       	mova	r0,	r2	
    7272:	00 00       	bra	@r0		
    7274:	00 00       	bra	@r0		
    7276:	00 00       	bra	@r0		
    7278:	cd 04       	mova	r4,	r13	
    727a:	00 00       	bra	@r0		
    727c:	c2 00       	mova	r0,	r2	
    727e:	00 00       	bra	@r0		
    7280:	91 34       	jge	$+292    	;abs 0x73a4
    7282:	00 00       	bra	@r0		
    7284:	f6 09       	suba	r9,	r6	
    7286:	00 00       	bra	@r0		
    7288:	c2 00       	mova	r0,	r2	
    728a:	00 00       	bra	@r0		
    728c:	00 00       	bra	@r0		
    728e:	00 00       	bra	@r0		
    7290:	1c 0a       	mova	@r10+,	r12	
    7292:	00 00       	bra	@r0		
    7294:	c2 00       	mova	r0,	r2	
    7296:	00 00       	bra	@r0		
    7298:	00 00       	bra	@r0		
    729a:	00 00       	bra	@r0		
    729c:	43 0a       	rlam.a	#3,	#0	;r3 As==00
    729e:	00 00       	bra	@r0		
    72a0:	c2 00       	mova	r0,	r2	
    72a2:	00 00       	bra	@r0		
    72a4:	c1 68 00 00 	addc.b	r8,	0(r1)	;0x0000(r1)
    72a8:	41 0c       	rrcm.a	#4,	r1	
    72aa:	00 00       	bra	@r0		
    72ac:	c2 00       	mova	r0,	r2	
    72ae:	00 00       	bra	@r0		
    72b0:	00 00       	bra	@r0		
    72b2:	00 00       	bra	@r0		
    72b4:	68 0c 00 00 	mova	r12,	&0x80000
    72b8:	c2 00       	mova	r0,	r2	
    72ba:	00 00       	bra	@r0		
    72bc:	3e 8a       	sub	@r10+,	r14	
    72be:	00 00       	bra	@r0		
    72c0:	eb 0e       	adda	r14,	r11	
    72c2:	00 00       	bra	@r0		
    72c4:	c2 00       	mova	r0,	r2	
    72c6:	00 00       	bra	@r0		
    72c8:	90 a7 00 00 	dadd	0(r7),	0x11de	;0x0000(r7), PC rel. 0x084ac
    72cc:	de 11 
    72ce:	00 00       	bra	@r0		
    72d0:	c2 00       	mova	r0,	r2	
    72d2:	00 00       	bra	@r0		
    72d4:	00 00       	bra	@r0		
    72d6:	00 00       	bra	@r0		
    72d8:	0c 12       	push	r12		
    72da:	00 00       	bra	@r0		
    72dc:	c2 00       	mova	r0,	r2	
    72de:	00 00       	bra	@r0		
    72e0:	00 00       	bra	@r0		
    72e2:	00 00       	bra	@r0		
    72e4:	34 12       	push	@r4+		
    72e6:	00 00       	bra	@r0		
    72e8:	c2 00       	mova	r0,	r2	
    72ea:	00 00       	bra	@r0		
    72ec:	00 00       	bra	@r0		
    72ee:	00 00       	bra	@r0		
    72f0:	5c 12 00 00 	push.b	0(r12)		;0x0000(r12)
    72f4:	c2 00       	mova	r0,	r2	
    72f6:	00 00       	bra	@r0		
    72f8:	0c af       	dadd	r15,	r12	
    72fa:	00 00       	bra	@r0		
    72fc:	7b 15       	pushm	#8,	r11	
    72fe:	00 00       	bra	@r0		
    7300:	c2 00       	mova	r0,	r2	
    7302:	00 00       	bra	@r0		
    7304:	00 00       	bra	@r0		
    7306:	00 00       	bra	@r0		
    7308:	a3 15       	pushm	#11,	#0	;r3 As==00
    730a:	00 00       	bra	@r0		
    730c:	c2 00       	mova	r0,	r2	
    730e:	00 00       	bra	@r0		
    7310:	00 00       	bra	@r0		
    7312:	00 00       	bra	@r0		
    7314:	c9 15       	pushm	#13,	r9	
    7316:	00 00       	bra	@r0		
    7318:	c2 00       	mova	r0,	r2	
    731a:	00 00       	bra	@r0		
    731c:	00 00       	bra	@r0		
    731e:	00 00       	bra	@r0		
    7320:	fa 15       	pushm	#16,	r10	
    7322:	00 00       	bra	@r0		
    7324:	c2 00       	mova	r0,	r2	
    7326:	00 00       	bra	@r0		
    7328:	00 00       	bra	@r0		
    732a:	00 00       	bra	@r0		
    732c:	fd 49 00 00 	mov.b	@r9+,	0(r13)	;0x0000(r13)
    7330:	24 00 07 00 	mova	&0x00007,r4	
    7334:	30 51       	add	@r1+,	r0	
    7336:	00 00       	bra	@r0		
    7338:	00 00       	bra	@r0		
    733a:	00 00       	bra	@r0		
    733c:	44 00       	rrcm.a	#1,	r4	
    733e:	07 00       	mova	@r0,	r7	
	...
    7348:	44 00       	rrcm.a	#1,	r4	
    734a:	08 00       	mova	@r0,	r8	
	...
    7354:	44 00       	rrcm.a	#1,	r4	
    7356:	0a 00       	mova	@r0,	r10	
    7358:	04 00       	mova	@r0,	r4	
    735a:	00 00       	bra	@r0		
    735c:	00 00       	bra	@r0		
    735e:	00 00       	bra	@r0		
    7360:	44 00       	rrcm.a	#1,	r4	
    7362:	0b 00       	mova	@r0,	r11	
    7364:	08 00       	mova	@r0,	r8	
    7366:	00 00       	bra	@r0		
    7368:	00 00       	bra	@r0		
    736a:	00 00       	bra	@r0		
    736c:	44 00       	rrcm.a	#1,	r4	
    736e:	0c 00       	mova	@r0,	r12	
    7370:	0e 00       	mova	@r0,	r14	
    7372:	00 00       	bra	@r0		
    7374:	00 00       	bra	@r0		
    7376:	00 00       	bra	@r0		
    7378:	44 00       	rrcm.a	#1,	r4	
    737a:	0d 00       	mova	@r0,	r13	
    737c:	14 00       	mova	#0x00000,r4	
    737e:	00 00       	bra	@r0		
    7380:	00 00       	bra	@r0		
    7382:	00 00       	bra	@r0		
    7384:	44 00       	rrcm.a	#1,	r4	
    7386:	0e 00       	mova	@r0,	r14	
    7388:	18 00       	mova	#0x00000,r8	
    738a:	00 00       	bra	@r0		
    738c:	00 00       	bra	@r0		
    738e:	00 00       	bra	@r0		
    7390:	24 00 00 00 	mova	&0x00000,r4	
    7394:	1a 00       	mova	#0x00000,r10	
    7396:	00 00       	bra	@r0		
    7398:	11 4a 00 00 	mov	0(r10),	r1	;0x0000(r10)
    739c:	24 00 10 00 	mova	&0x00010,r4	
    73a0:	4a 51       	add.b	r1,	r10	
    73a2:	00 00       	bra	@r0		
    73a4:	32 4a       	mov	@r10+,	r2	
    73a6:	00 00       	bra	@r0		
    73a8:	40 00       	rrcm.a	#1,	r0	
    73aa:	10 00       	bra	#0x00000	
    73ac:	07 00       	mova	@r0,	r7	
    73ae:	00 00       	bra	@r0		
    73b0:	00 00       	bra	@r0		
    73b2:	00 00       	bra	@r0		
    73b4:	44 00       	rrcm.a	#1,	r4	
    73b6:	10 00       	bra	#0x00000	
	...
    73c0:	44 00       	rrcm.a	#1,	r4	
    73c2:	13 00       	.word	0x0013;	????	Illegal as address instr
    73c4:	0c 00       	mova	@r0,	r12	
    73c6:	00 00       	bra	@r0		
    73c8:	00 00       	bra	@r0		
    73ca:	00 00       	bra	@r0		
    73cc:	44 00       	rrcm.a	#1,	r4	
    73ce:	15 00       	mova	#0x00000,r5	
    73d0:	10 00       	bra	#0x00000	
    73d2:	00 00       	bra	@r0		
    73d4:	00 00       	bra	@r0		
    73d6:	00 00       	bra	@r0		
    73d8:	44 00       	rrcm.a	#1,	r4	
    73da:	16 00       	mova	#0x00000,r6	
    73dc:	26 00 00 00 	mova	&0x00000,r6	
    73e0:	00 00       	bra	@r0		
    73e2:	00 00       	bra	@r0		
    73e4:	44 00       	rrcm.a	#1,	r4	
    73e6:	17 00       	mova	#0x00000,r7	
    73e8:	2a 00 00 00 	mova	&0x00000,r10	
    73ec:	00 00       	bra	@r0		
    73ee:	00 00       	bra	@r0		
    73f0:	44 00       	rrcm.a	#1,	r4	
    73f2:	18 00       	mova	#0x00000,r8	
    73f4:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x073f6
    73f8:	00 00       	bra	@r0		
    73fa:	00 00       	bra	@r0		
    73fc:	44 00       	rrcm.a	#1,	r4	
    73fe:	19 00       	mova	#0x00000,r9	
    7400:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x07402
    7404:	00 00       	bra	@r0		
    7406:	00 00       	bra	@r0		
    7408:	44 00       	rrcm.a	#1,	r4	
    740a:	1a 00       	mova	#0x00000,r10	
    740c:	40 00       	rrcm.a	#1,	r0	
    740e:	00 00       	bra	@r0		
    7410:	00 00       	bra	@r0		
    7412:	00 00       	bra	@r0		
    7414:	44 00       	rrcm.a	#1,	r4	
    7416:	1b 00       	mova	#0x00000,r11	
    7418:	44 00       	rrcm.a	#1,	r4	
    741a:	00 00       	bra	@r0		
    741c:	00 00       	bra	@r0		
    741e:	00 00       	bra	@r0		
    7420:	44 00       	rrcm.a	#1,	r4	
    7422:	1c 00       	mova	#0x00000,r12	
    7424:	48 00       	rrcm.a	#1,	r8	
    7426:	00 00       	bra	@r0		
    7428:	00 00       	bra	@r0		
    742a:	00 00       	bra	@r0		
    742c:	44 00       	rrcm.a	#1,	r4	
    742e:	1d 00       	mova	#0x00000,r13	
    7430:	4e 00       	rrcm.a	#1,	r14	
    7432:	00 00       	bra	@r0		
    7434:	00 00       	bra	@r0		
    7436:	00 00       	bra	@r0		
    7438:	44 00       	rrcm.a	#1,	r4	
    743a:	16 00       	mova	#0x00000,r6	
    743c:	94 00 00 00 	cmpa	#0x00000,r4	
    7440:	00 00       	bra	@r0		
    7442:	00 00       	bra	@r0		
    7444:	44 00       	rrcm.a	#1,	r4	
    7446:	1f 00       	mova	#0x00000,r15	
    7448:	9c 00 00 00 	cmpa	#0x00000,r12	
    744c:	00 00       	bra	@r0		
    744e:	00 00       	bra	@r0		
    7450:	44 00       	rrcm.a	#1,	r4	
    7452:	21 00 b8 00 	mova	&0x000b8,r1	
    7456:	00 00       	bra	@r0		
    7458:	d2 18       	.word	0x18d2;	????	
    745a:	00 00       	bra	@r0		
    745c:	40 00       	rrcm.a	#1,	r0	
    745e:	11 00       	mova	#0x00000,r1	
    7460:	08 00       	mova	@r0,	r8	
    7462:	00 00       	bra	@r0		
    7464:	3b 4a       	mov	@r10+,	r11	
    7466:	00 00       	bra	@r0		
    7468:	40 00       	rrcm.a	#1,	r0	
    746a:	12 00       	mova	#0x00000,r2	
    746c:	0f 00       	mova	@r0,	r15	
    746e:	00 00       	bra	@r0		
    7470:	44 4a       	mov.b	r10,	r4	
    7472:	00 00       	bra	@r0		
    7474:	40 00       	rrcm.a	#1,	r0	
    7476:	13 00       	.word	0x0013;	????	Illegal as address instr
    7478:	0a 00       	mova	@r0,	r10	
    747a:	00 00       	bra	@r0		
    747c:	00 00       	bra	@r0		
    747e:	00 00       	bra	@r0		
    7480:	c0 00       	bra	r0		
    7482:	00 00       	bra	@r0		
    7484:	0c 00       	mova	@r0,	r12	
    7486:	00 00       	bra	@r0		
    7488:	00 00       	bra	@r0		
    748a:	00 00       	bra	@r0		
    748c:	e0 00       	adda	r0,	r0	
    748e:	00 00       	bra	@r0		
    7490:	b8 00 00 00 	suba	#0x00000,r8	
    7494:	00 00       	bra	@r0		
    7496:	00 00       	bra	@r0		
    7498:	24 00 00 00 	mova	&0x00000,r4	
    749c:	c4 00       	mova	r0,	r4	
    749e:	00 00       	bra	@r0		
    74a0:	52 4a 00 00 	mov.b	0(r10),	r2	;0x0000(r10)
    74a4:	24 00 23 00 	mova	&0x00023,r4	
    74a8:	0e 52       	add	r2,	r14	
    74aa:	00 00       	bra	@r0		
    74ac:	00 00       	bra	@r0		
    74ae:	00 00       	bra	@r0		
    74b0:	44 00       	rrcm.a	#1,	r4	
    74b2:	23 00       	.word	0x0023;	????	Illegal as address instr
	...
    74bc:	44 00       	rrcm.a	#1,	r4	
    74be:	25 00 04 00 	mova	&0x00004,r5	
    74c2:	00 00       	bra	@r0		
    74c4:	00 00       	bra	@r0		
    74c6:	00 00       	bra	@r0		
    74c8:	44 00       	rrcm.a	#1,	r4	
    74ca:	26 00 0c 00 	mova	&0x0000c,r6	
    74ce:	00 00       	bra	@r0		
    74d0:	00 00       	bra	@r0		
    74d2:	00 00       	bra	@r0		
    74d4:	44 00       	rrcm.a	#1,	r4	
    74d6:	27 00 22 00 	mova	&0x00022,r7	
    74da:	00 00       	bra	@r0		
    74dc:	00 00       	bra	@r0		
    74de:	00 00       	bra	@r0		
    74e0:	44 00       	rrcm.a	#1,	r4	
    74e2:	28 00 26 00 	mova	&0x00026,r8	
    74e6:	00 00       	bra	@r0		
    74e8:	00 00       	bra	@r0		
    74ea:	00 00       	bra	@r0		
    74ec:	44 00       	rrcm.a	#1,	r4	
    74ee:	29 00 2a 00 	mova	&0x0002a,r9	
    74f2:	00 00       	bra	@r0		
    74f4:	00 00       	bra	@r0		
    74f6:	00 00       	bra	@r0		
    74f8:	44 00       	rrcm.a	#1,	r4	
    74fa:	2a 00 2e 00 	mova	&0x0002e,r10	
    74fe:	00 00       	bra	@r0		
    7500:	00 00       	bra	@r0		
    7502:	00 00       	bra	@r0		
    7504:	44 00       	rrcm.a	#1,	r4	
    7506:	2b 00 32 00 	mova	&0x00032,r11	
    750a:	00 00       	bra	@r0		
    750c:	00 00       	bra	@r0		
    750e:	00 00       	bra	@r0		
    7510:	44 00       	rrcm.a	#1,	r4	
    7512:	2c 00 38 00 	mova	&0x00038,r12	
    7516:	00 00       	bra	@r0		
    7518:	00 00       	bra	@r0		
    751a:	00 00       	bra	@r0		
    751c:	44 00       	rrcm.a	#1,	r4	
    751e:	2f 00 4e 00 	mova	&0x0004e,r15	
    7522:	00 00       	bra	@r0		
    7524:	00 00       	bra	@r0		
    7526:	00 00       	bra	@r0		
    7528:	44 00       	rrcm.a	#1,	r4	
    752a:	25 00 58 00 	mova	&0x00058,r5	
    752e:	00 00       	bra	@r0		
    7530:	00 00       	bra	@r0		
    7532:	00 00       	bra	@r0		
    7534:	44 00       	rrcm.a	#1,	r4	
    7536:	32 00 5e 00 	mova	0x005e,	r2	;PC rel. 0x07596
    753a:	00 00       	bra	@r0		
    753c:	be 17       	popm	#12,	r9	
    753e:	00 00       	bra	@r0		
    7540:	40 00       	rrcm.a	#1,	r0	
    7542:	24 00 0d 00 	mova	&0x0000d,r4	
    7546:	00 00       	bra	@r0		
    7548:	00 00       	bra	@r0		
    754a:	00 00       	bra	@r0		
    754c:	c0 00       	bra	r0		
    754e:	00 00       	bra	@r0		
    7550:	04 00       	mova	@r0,	r4	
    7552:	00 00       	bra	@r0		
    7554:	00 00       	bra	@r0		
    7556:	00 00       	bra	@r0		
    7558:	e0 00       	adda	r0,	r0	
    755a:	00 00       	bra	@r0		
    755c:	5e 00       	rrcm	#1,	r14	
    755e:	00 00       	bra	@r0		
    7560:	00 00       	bra	@r0		
    7562:	00 00       	bra	@r0		
    7564:	24 00 00 00 	mova	&0x00000,r4	
    7568:	64 00 00 00 	mova	r0,	&0x40000
    756c:	6d 4a       	mov.b	@r10,	r13	
    756e:	00 00       	bra	@r0		
    7570:	24 00 34 00 	mova	&0x00034,r4	
    7574:	72 52       	add.b	#8,	r2	;r2 As==11
    7576:	00 00       	bra	@r0		
    7578:	32 4a       	mov	@r10+,	r2	
    757a:	00 00       	bra	@r0		
    757c:	40 00       	rrcm.a	#1,	r0	
    757e:	34 00 0d 00 	mova	0x000d,	r4	;PC rel. 0x0758d
    7582:	00 00       	bra	@r0		
    7584:	00 00       	bra	@r0		
    7586:	00 00       	bra	@r0		
    7588:	44 00       	rrcm.a	#1,	r4	
    758a:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0758c
    758e:	00 00       	bra	@r0		
    7590:	00 00       	bra	@r0		
    7592:	00 00       	bra	@r0		
    7594:	44 00       	rrcm.a	#1,	r4	
    7596:	35 00 02 00 	mova	0x0002,	r5	;PC rel. 0x0759a
    759a:	00 00       	bra	@r0		
    759c:	00 00       	bra	@r0		
    759e:	00 00       	bra	@r0		
    75a0:	44 00       	rrcm.a	#1,	r4	
    75a2:	36 00 18 00 	mova	0x0018,	r6	;PC rel. 0x075bc
    75a6:	00 00       	bra	@r0		
    75a8:	00 00       	bra	@r0		
    75aa:	00 00       	bra	@r0		
    75ac:	44 00       	rrcm.a	#1,	r4	
    75ae:	37 00 1c 00 	mova	0x001c,	r7	;PC rel. 0x075cc
    75b2:	00 00       	bra	@r0		
    75b4:	00 00       	bra	@r0		
    75b6:	00 00       	bra	@r0		
    75b8:	44 00       	rrcm.a	#1,	r4	
    75ba:	38 00 20 00 	mova	0x0020,	r8	;PC rel. 0x075dc
    75be:	00 00       	bra	@r0		
    75c0:	00 00       	bra	@r0		
    75c2:	00 00       	bra	@r0		
    75c4:	44 00       	rrcm.a	#1,	r4	
    75c6:	39 00 24 00 	mova	0x0024,	r9	;PC rel. 0x075ec
    75ca:	00 00       	bra	@r0		
    75cc:	00 00       	bra	@r0		
    75ce:	00 00       	bra	@r0		
    75d0:	44 00       	rrcm.a	#1,	r4	
    75d2:	3a 00 28 00 	mova	0x0028,	r10	;PC rel. 0x075fc
    75d6:	00 00       	bra	@r0		
    75d8:	00 00       	bra	@r0		
    75da:	00 00       	bra	@r0		
    75dc:	44 00       	rrcm.a	#1,	r4	
    75de:	3b 00 2e 00 	mova	0x002e,	r11	;PC rel. 0x0760e
    75e2:	00 00       	bra	@r0		
    75e4:	00 00       	bra	@r0		
    75e6:	00 00       	bra	@r0		
    75e8:	44 00       	rrcm.a	#1,	r4	
    75ea:	40 00       	rrcm.a	#1,	r0	
    75ec:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x075ee
    75f0:	00 00       	bra	@r0		
    75f2:	00 00       	bra	@r0		
    75f4:	44 00       	rrcm.a	#1,	r4	
    75f6:	3e 00 3e 00 	mova	0x003e,	r14	;PC rel. 0x07636
    75fa:	00 00       	bra	@r0		
    75fc:	00 00       	bra	@r0		
    75fe:	00 00       	bra	@r0		
    7600:	44 00       	rrcm.a	#1,	r4	
    7602:	40 00       	rrcm.a	#1,	r0	
    7604:	44 00       	rrcm.a	#1,	r4	
    7606:	00 00       	bra	@r0		
    7608:	00 00       	bra	@r0		
    760a:	00 00       	bra	@r0		
    760c:	24 00 00 00 	mova	&0x00000,r4	
    7610:	46 00       	rrcm.a	#1,	r6	
    7612:	00 00       	bra	@r0		
    7614:	fe 33       	jn	$-2      	;abs 0x7612
    7616:	00 00       	bra	@r0		
    7618:	20 00 12 00 	bra	&0x00012	
    761c:	00 00       	bra	@r0		
    761e:	00 00       	bra	@r0		
    7620:	09 34       	jge	$+20     	;abs 0x7634
    7622:	00 00       	bra	@r0		
    7624:	20 00 14 00 	bra	&0x00014	
    7628:	00 00       	bra	@r0		
    762a:	00 00       	bra	@r0		
    762c:	15 34       	jge	$+44     	;abs 0x7658
    762e:	00 00       	bra	@r0		
    7630:	20 00 16 00 	bra	&0x00016	
    7634:	00 00       	bra	@r0		
    7636:	00 00       	bra	@r0		
    7638:	20 34       	jge	$+66     	;abs 0x767a
    763a:	00 00       	bra	@r0		
    763c:	20 00 18 00 	bra	&0x00018	
    7640:	00 00       	bra	@r0		
    7642:	00 00       	bra	@r0		
    7644:	2c 34       	jge	$+90     	;abs 0x769e
    7646:	00 00       	bra	@r0		
    7648:	20 00 1a 00 	bra	&0x0001a	
    764c:	00 00       	bra	@r0		
    764e:	00 00       	bra	@r0		
    7650:	37 34       	jge	$+112    	;abs 0x76c0
    7652:	00 00       	bra	@r0		
    7654:	20 00 1c 00 	bra	&0x0001c	
    7658:	00 00       	bra	@r0		
    765a:	00 00       	bra	@r0		
    765c:	44 34       	jge	$+138    	;abs 0x76e6
    765e:	00 00       	bra	@r0		
    7660:	20 00 1e 00 	bra	&0x0001e	
    7664:	00 00       	bra	@r0		
    7666:	00 00       	bra	@r0		
    7668:	51 34       	jge	$+164    	;abs 0x770c
    766a:	00 00       	bra	@r0		
    766c:	20 00 20 00 	bra	&0x00020	
    7670:	00 00       	bra	@r0		
    7672:	00 00       	bra	@r0		
    7674:	5f 34       	jge	$+192    	;abs 0x7734
    7676:	00 00       	bra	@r0		
    7678:	20 00 88 00 	bra	&0x00088	
    767c:	00 00       	bra	@r0		
    767e:	00 00       	bra	@r0		
    7680:	6c 34       	jge	$+218    	;abs 0x775a
    7682:	00 00       	bra	@r0		
    7684:	20 00 8c 00 	bra	&0x0008c	
    7688:	00 00       	bra	@r0		
    768a:	00 00       	bra	@r0		
    768c:	79 34       	jge	$+244    	;abs 0x7780
    768e:	00 00       	bra	@r0		
    7690:	20 00 90 00 	bra	&0x00090	
    7694:	00 00       	bra	@r0		
    7696:	00 00       	bra	@r0		
    7698:	86 34       	jge	$+270    	;abs 0x77a6
    769a:	00 00       	bra	@r0		
    769c:	20 00 94 00 	bra	&0x00094	
    76a0:	00 00       	bra	@r0		
    76a2:	00 00       	bra	@r0		
    76a4:	93 34       	jge	$+296    	;abs 0x77cc
    76a6:	00 00       	bra	@r0		
    76a8:	20 00 98 00 	bra	&0x00098	
    76ac:	00 00       	bra	@r0		
    76ae:	00 00       	bra	@r0		
    76b0:	a0 34       	jge	$+322    	;abs 0x77f2
    76b2:	00 00       	bra	@r0		
    76b4:	20 00 9c 00 	bra	&0x0009c	
    76b8:	00 00       	bra	@r0		
    76ba:	00 00       	bra	@r0		
    76bc:	ad 34       	jge	$+348    	;abs 0x7818
    76be:	00 00       	bra	@r0		
    76c0:	20 00 7a 00 	bra	&0x0007a	
    76c4:	00 00       	bra	@r0		
    76c6:	00 00       	bra	@r0		
    76c8:	c1 34       	jge	$+388    	;abs 0x784c
    76ca:	00 00       	bra	@r0		
    76cc:	20 00 7c 00 	bra	&0x0007c	
    76d0:	00 00       	bra	@r0		
    76d2:	00 00       	bra	@r0		
    76d4:	ce 34       	jge	$+414    	;abs 0x7872
    76d6:	00 00       	bra	@r0		
    76d8:	20 00 7e 00 	bra	&0x0007e	
    76dc:	00 00       	bra	@r0		
    76de:	00 00       	bra	@r0		
    76e0:	db 34       	jge	$+440    	;abs 0x7898
    76e2:	00 00       	bra	@r0		
    76e4:	20 00 80 00 	bra	&0x00080	
    76e8:	00 00       	bra	@r0		
    76ea:	00 00       	bra	@r0		
    76ec:	e8 34       	jge	$+466    	;abs 0x78be
    76ee:	00 00       	bra	@r0		
    76f0:	20 00 82 00 	bra	&0x00082	
    76f4:	00 00       	bra	@r0		
    76f6:	00 00       	bra	@r0		
    76f8:	f5 34       	jge	$+492    	;abs 0x78e4
    76fa:	00 00       	bra	@r0		
    76fc:	20 00 84 00 	bra	&0x00084	
    7700:	00 00       	bra	@r0		
    7702:	00 00       	bra	@r0		
    7704:	01 35       	jge	$+516    	;abs 0x7908
    7706:	00 00       	bra	@r0		
    7708:	20 00 86 00 	bra	&0x00086	
    770c:	00 00       	bra	@r0		
    770e:	00 00       	bra	@r0		
    7710:	0e 35       	jge	$+542    	;abs 0x792e
    7712:	00 00       	bra	@r0		
    7714:	20 00 89 00 	bra	&0x00089	
    7718:	00 00       	bra	@r0		
    771a:	00 00       	bra	@r0		
    771c:	1b 35       	jge	$+568    	;abs 0x7954
    771e:	00 00       	bra	@r0		
    7720:	20 00 8f 00 	bra	&0x0008f	
    7724:	00 00       	bra	@r0		
    7726:	00 00       	bra	@r0		
    7728:	27 35       	jge	$+592    	;abs 0x7978
    772a:	00 00       	bra	@r0		
    772c:	20 00 91 00 	bra	&0x00091	
    7730:	00 00       	bra	@r0		
    7732:	00 00       	bra	@r0		
    7734:	34 35       	jge	$+618    	;abs 0x799e
    7736:	00 00       	bra	@r0		
    7738:	20 00 93 00 	bra	&0x00093	
    773c:	00 00       	bra	@r0		
    773e:	00 00       	bra	@r0		
    7740:	41 35       	jge	$+644    	;abs 0x79c4
    7742:	00 00       	bra	@r0		
    7744:	20 00 95 00 	bra	&0x00095	
    7748:	00 00       	bra	@r0		
    774a:	00 00       	bra	@r0		
    774c:	4e 35       	jge	$+670    	;abs 0x79ea
    774e:	00 00       	bra	@r0		
    7750:	20 00 97 00 	bra	&0x00097	
    7754:	00 00       	bra	@r0		
    7756:	00 00       	bra	@r0		
    7758:	5b 35       	jge	$+696    	;abs 0x7a10
    775a:	00 00       	bra	@r0		
    775c:	20 00 99 00 	bra	&0x00099	
    7760:	00 00       	bra	@r0		
    7762:	00 00       	bra	@r0		
    7764:	67 35       	jge	$+720    	;abs 0x7a34
    7766:	00 00       	bra	@r0		
    7768:	20 00 9b 00 	bra	&0x0009b	
    776c:	00 00       	bra	@r0		
    776e:	00 00       	bra	@r0		
    7770:	74 35       	jge	$+746    	;abs 0x7a5a
    7772:	00 00       	bra	@r0		
    7774:	20 00 9e 00 	bra	&0x0009e	
    7778:	00 00       	bra	@r0		
    777a:	00 00       	bra	@r0		
    777c:	81 35       	jge	$+772    	;abs 0x7a80
    777e:	00 00       	bra	@r0		
    7780:	20 00 a4 00 	bra	&0x000a4	
    7784:	00 00       	bra	@r0		
    7786:	00 00       	bra	@r0		
    7788:	8d 35       	jge	$+796    	;abs 0x7aa4
    778a:	00 00       	bra	@r0		
    778c:	20 00 a6 00 	bra	&0x000a6	
    7790:	00 00       	bra	@r0		
    7792:	00 00       	bra	@r0		
    7794:	9a 35       	jge	$+822    	;abs 0x7aca
    7796:	00 00       	bra	@r0		
    7798:	20 00 a8 00 	bra	&0x000a8	
    779c:	00 00       	bra	@r0		
    779e:	00 00       	bra	@r0		
    77a0:	a7 35       	jge	$+848    	;abs 0x7af0
    77a2:	00 00       	bra	@r0		
    77a4:	20 00 aa 00 	bra	&0x000aa	
    77a8:	00 00       	bra	@r0		
    77aa:	00 00       	bra	@r0		
    77ac:	b4 35       	jge	$+874    	;abs 0x7b16
    77ae:	00 00       	bra	@r0		
    77b0:	20 00 ad 00 	bra	&0x000ad	
    77b4:	00 00       	bra	@r0		
    77b6:	00 00       	bra	@r0		
    77b8:	c1 35       	jge	$+900    	;abs 0x7b3c
    77ba:	00 00       	bra	@r0		
    77bc:	20 00 b3 00 	bra	&0x000b3	
    77c0:	00 00       	bra	@r0		
    77c2:	00 00       	bra	@r0		
    77c4:	cd 35       	jge	$+924    	;abs 0x7b60
    77c6:	00 00       	bra	@r0		
    77c8:	20 00 b5 00 	bra	&0x000b5	
    77cc:	00 00       	bra	@r0		
    77ce:	00 00       	bra	@r0		
    77d0:	da 35       	jge	$+950    	;abs 0x7b86
    77d2:	00 00       	bra	@r0		
    77d4:	20 00 b7 00 	bra	&0x000b7	
    77d8:	00 00       	bra	@r0		
    77da:	00 00       	bra	@r0		
    77dc:	e7 35       	jge	$+976    	;abs 0x7bac
    77de:	00 00       	bra	@r0		
    77e0:	20 00 b9 00 	bra	&0x000b9	
    77e4:	00 00       	bra	@r0		
    77e6:	00 00       	bra	@r0		
    77e8:	f4 35       	jge	$+1002   	;abs 0x7bd2
    77ea:	00 00       	bra	@r0		
    77ec:	20 00 bc 00 	bra	&0x000bc	
    77f0:	00 00       	bra	@r0		
    77f2:	00 00       	bra	@r0		
    77f4:	01 36       	jge	$-1020   	;abs 0x73f8
    77f6:	00 00       	bra	@r0		
    77f8:	20 00 c2 00 	bra	&0x000c2	
    77fc:	00 00       	bra	@r0		
    77fe:	00 00       	bra	@r0		
    7800:	0d 36       	jge	$-996    	;abs 0x741c
    7802:	00 00       	bra	@r0		
    7804:	20 00 c4 00 	bra	&0x000c4	
    7808:	00 00       	bra	@r0		
    780a:	00 00       	bra	@r0		
    780c:	1a 36       	jge	$-970    	;abs 0x7442
    780e:	00 00       	bra	@r0		
    7810:	20 00 c6 00 	bra	&0x000c6	
    7814:	00 00       	bra	@r0		
    7816:	00 00       	bra	@r0		
    7818:	27 36       	jge	$-944    	;abs 0x7468
    781a:	00 00       	bra	@r0		
    781c:	20 00 c8 00 	bra	&0x000c8	
    7820:	00 00       	bra	@r0		
    7822:	00 00       	bra	@r0		
    7824:	34 36       	jge	$-918    	;abs 0x748e
    7826:	00 00       	bra	@r0		
    7828:	20 00 cb 00 	bra	&0x000cb	
    782c:	00 00       	bra	@r0		
    782e:	00 00       	bra	@r0		
    7830:	41 36       	jge	$-892    	;abs 0x74b4
    7832:	00 00       	bra	@r0		
    7834:	20 00 d1 00 	bra	&0x000d1	
    7838:	00 00       	bra	@r0		
    783a:	00 00       	bra	@r0		
    783c:	4d 36       	jge	$-868    	;abs 0x74d8
    783e:	00 00       	bra	@r0		
    7840:	20 00 d3 00 	bra	&0x000d3	
    7844:	00 00       	bra	@r0		
    7846:	00 00       	bra	@r0		
    7848:	5a 36       	jge	$-842    	;abs 0x74fe
    784a:	00 00       	bra	@r0		
    784c:	20 00 d5 00 	bra	&0x000d5	
    7850:	00 00       	bra	@r0		
    7852:	00 00       	bra	@r0		
    7854:	67 36       	jge	$-816    	;abs 0x7524
    7856:	00 00       	bra	@r0		
    7858:	20 00 d7 00 	bra	&0x000d7	
    785c:	00 00       	bra	@r0		
    785e:	00 00       	bra	@r0		
    7860:	74 36       	jge	$-790    	;abs 0x754a
    7862:	00 00       	bra	@r0		
    7864:	20 00 da 00 	bra	&0x000da	
    7868:	00 00       	bra	@r0		
    786a:	00 00       	bra	@r0		
    786c:	81 36       	jge	$-764    	;abs 0x7570
    786e:	00 00       	bra	@r0		
    7870:	20 00 e0 00 	bra	&0x000e0	
    7874:	00 00       	bra	@r0		
    7876:	00 00       	bra	@r0		
    7878:	8d 36       	jge	$-740    	;abs 0x7594
    787a:	00 00       	bra	@r0		
    787c:	20 00 e2 00 	bra	&0x000e2	
    7880:	00 00       	bra	@r0		
    7882:	00 00       	bra	@r0		
    7884:	9a 36       	jge	$-714    	;abs 0x75ba
    7886:	00 00       	bra	@r0		
    7888:	20 00 e4 00 	bra	&0x000e4	
    788c:	00 00       	bra	@r0		
    788e:	00 00       	bra	@r0		
    7890:	a7 36       	jge	$-688    	;abs 0x75e0
    7892:	00 00       	bra	@r0		
    7894:	20 00 e6 00 	bra	&0x000e6	
    7898:	00 00       	bra	@r0		
    789a:	00 00       	bra	@r0		
    789c:	b4 36       	jge	$-662    	;abs 0x7606
    789e:	00 00       	bra	@r0		
    78a0:	20 00 e9 00 	bra	&0x000e9	
    78a4:	00 00       	bra	@r0		
    78a6:	00 00       	bra	@r0		
    78a8:	c1 36       	jge	$-636    	;abs 0x762c
    78aa:	00 00       	bra	@r0		
    78ac:	20 00 ef 00 	bra	&0x000ef	
    78b0:	00 00       	bra	@r0		
    78b2:	00 00       	bra	@r0		
    78b4:	cd 36       	jge	$-612    	;abs 0x7650
    78b6:	00 00       	bra	@r0		
    78b8:	20 00 f1 00 	bra	&0x000f1	
    78bc:	00 00       	bra	@r0		
    78be:	00 00       	bra	@r0		
    78c0:	da 36       	jge	$-586    	;abs 0x7676
    78c2:	00 00       	bra	@r0		
    78c4:	20 00 f3 00 	bra	&0x000f3	
    78c8:	00 00       	bra	@r0		
    78ca:	00 00       	bra	@r0		
    78cc:	e7 36       	jge	$-560    	;abs 0x769c
    78ce:	00 00       	bra	@r0		
    78d0:	20 00 f5 00 	bra	&0x000f5	
    78d4:	00 00       	bra	@r0		
    78d6:	00 00       	bra	@r0		
    78d8:	f4 36       	jge	$-534    	;abs 0x76c2
    78da:	00 00       	bra	@r0		
    78dc:	20 00 f8 00 	bra	&0x000f8	
    78e0:	00 00       	bra	@r0		
    78e2:	00 00       	bra	@r0		
    78e4:	01 37       	jge	$-508    	;abs 0x76e8
    78e6:	00 00       	bra	@r0		
    78e8:	20 00 fc 00 	bra	&0x000fc	
    78ec:	00 00       	bra	@r0		
    78ee:	00 00       	bra	@r0		
    78f0:	11 37       	jge	$-476    	;abs 0x7714
    78f2:	00 00       	bra	@r0		
    78f4:	20 00 fe 00 	bra	&0x000fe	
    78f8:	00 00       	bra	@r0		
    78fa:	00 00       	bra	@r0		
    78fc:	21 37       	jge	$-444    	;abs 0x7740
    78fe:	00 00       	bra	@r0		
    7900:	20 00 00 01 	bra	&0x00100	
    7904:	00 00       	bra	@r0		
    7906:	00 00       	bra	@r0		
    7908:	30 37       	jge	$-414    	;abs 0x776a
    790a:	00 00       	bra	@r0		
    790c:	20 00 02 01 	bra	&0x00102	
    7910:	00 00       	bra	@r0		
    7912:	00 00       	bra	@r0		
    7914:	3f 37       	jge	$-384    	;abs 0x7794
    7916:	00 00       	bra	@r0		
    7918:	20 00 04 01 	bra	&0x00104	
    791c:	00 00       	bra	@r0		
    791e:	00 00       	bra	@r0		
    7920:	4f 37       	jge	$-352    	;abs 0x77c0
    7922:	00 00       	bra	@r0		
    7924:	20 00 06 01 	bra	&0x00106	
    7928:	00 00       	bra	@r0		
    792a:	00 00       	bra	@r0		
    792c:	5f 37       	jge	$-320    	;abs 0x77ec
    792e:	00 00       	bra	@r0		
    7930:	20 00 08 01 	bra	&0x00108	
    7934:	00 00       	bra	@r0		
    7936:	00 00       	bra	@r0		
    7938:	70 37       	jge	$-286    	;abs 0x781a
    793a:	00 00       	bra	@r0		
    793c:	20 00 0a 01 	bra	&0x0010a	
    7940:	00 00       	bra	@r0		
    7942:	00 00       	bra	@r0		
    7944:	81 37       	jge	$-252    	;abs 0x7848
    7946:	00 00       	bra	@r0		
    7948:	20 00 0c 01 	bra	&0x0010c	
    794c:	00 00       	bra	@r0		
    794e:	00 00       	bra	@r0		
    7950:	92 37       	jge	$-218    	;abs 0x7876
    7952:	00 00       	bra	@r0		
    7954:	20 00 0e 01 	bra	&0x0010e	
    7958:	00 00       	bra	@r0		
    795a:	00 00       	bra	@r0		
    795c:	a4 37       	jge	$-182    	;abs 0x78a6
    795e:	00 00       	bra	@r0		
    7960:	20 00 10 01 	bra	&0x00110	
    7964:	00 00       	bra	@r0		
    7966:	00 00       	bra	@r0		
    7968:	b6 37       	jge	$-146    	;abs 0x78d6
    796a:	00 00       	bra	@r0		
    796c:	20 00 13 01 	bra	&0x00113	
    7970:	00 00       	bra	@r0		
    7972:	00 00       	bra	@r0		
    7974:	c6 37       	jge	$-114    	;abs 0x7902
    7976:	00 00       	bra	@r0		
    7978:	20 00 15 01 	bra	&0x00115	
    797c:	00 00       	bra	@r0		
    797e:	00 00       	bra	@r0		
    7980:	d6 37       	jge	$-82     	;abs 0x792e
    7982:	00 00       	bra	@r0		
    7984:	20 00 17 01 	bra	&0x00117	
    7988:	00 00       	bra	@r0		
    798a:	00 00       	bra	@r0		
    798c:	e5 37       	jge	$-52     	;abs 0x7958
    798e:	00 00       	bra	@r0		
    7990:	20 00 19 01 	bra	&0x00119	
    7994:	00 00       	bra	@r0		
    7996:	00 00       	bra	@r0		
    7998:	f4 37       	jge	$-22     	;abs 0x7982
    799a:	00 00       	bra	@r0		
    799c:	20 00 1b 01 	bra	&0x0011b	
    79a0:	00 00       	bra	@r0		
    79a2:	00 00       	bra	@r0		
    79a4:	05 38       	jl	$+12     	;abs 0x79b0
    79a6:	00 00       	bra	@r0		
    79a8:	20 00 1d 01 	bra	&0x0011d	
    79ac:	00 00       	bra	@r0		
    79ae:	00 00       	bra	@r0		
    79b0:	15 38       	jl	$+44     	;abs 0x79dc
    79b2:	00 00       	bra	@r0		
    79b4:	20 00 1f 01 	bra	&0x0011f	
    79b8:	00 00       	bra	@r0		
    79ba:	00 00       	bra	@r0		
    79bc:	26 38       	jl	$+78     	;abs 0x7a0a
    79be:	00 00       	bra	@r0		
    79c0:	20 00 21 01 	bra	&0x00121	
    79c4:	00 00       	bra	@r0		
    79c6:	00 00       	bra	@r0		
    79c8:	37 38       	jl	$+112    	;abs 0x7a38
    79ca:	00 00       	bra	@r0		
    79cc:	20 00 23 01 	bra	&0x00123	
    79d0:	00 00       	bra	@r0		
    79d2:	00 00       	bra	@r0		
    79d4:	48 38       	jl	$+146    	;abs 0x7a66
    79d6:	00 00       	bra	@r0		
    79d8:	20 00 25 01 	bra	&0x00125	
    79dc:	00 00       	bra	@r0		
    79de:	00 00       	bra	@r0		
    79e0:	59 38       	jl	$+180    	;abs 0x7a94
    79e2:	00 00       	bra	@r0		
    79e4:	20 00 2c 01 	bra	&0x0012c	
    79e8:	00 00       	bra	@r0		
    79ea:	00 00       	bra	@r0		
    79ec:	69 38       	jl	$+212    	;abs 0x7ac0
    79ee:	00 00       	bra	@r0		
    79f0:	20 00 2e 01 	bra	&0x0012e	
    79f4:	00 00       	bra	@r0		
    79f6:	00 00       	bra	@r0		
    79f8:	79 38       	jl	$+244    	;abs 0x7aec
    79fa:	00 00       	bra	@r0		
    79fc:	20 00 30 01 	bra	&0x00130	
    7a00:	00 00       	bra	@r0		
    7a02:	00 00       	bra	@r0		
    7a04:	88 38       	jl	$+274    	;abs 0x7b16
    7a06:	00 00       	bra	@r0		
    7a08:	20 00 32 01 	bra	&0x00132	
    7a0c:	00 00       	bra	@r0		
    7a0e:	00 00       	bra	@r0		
    7a10:	97 38       	jl	$+304    	;abs 0x7b40
    7a12:	00 00       	bra	@r0		
    7a14:	20 00 34 01 	bra	&0x00134	
    7a18:	00 00       	bra	@r0		
    7a1a:	00 00       	bra	@r0		
    7a1c:	a7 38       	jl	$+336    	;abs 0x7b6c
    7a1e:	00 00       	bra	@r0		
    7a20:	20 00 36 01 	bra	&0x00136	
    7a24:	00 00       	bra	@r0		
    7a26:	00 00       	bra	@r0		
    7a28:	b7 38       	jl	$+368    	;abs 0x7b98
    7a2a:	00 00       	bra	@r0		
    7a2c:	20 00 38 01 	bra	&0x00138	
    7a30:	00 00       	bra	@r0		
    7a32:	00 00       	bra	@r0		
    7a34:	c8 38       	jl	$+402    	;abs 0x7bc6
    7a36:	00 00       	bra	@r0		
    7a38:	20 00 3a 01 	bra	&0x0013a	
    7a3c:	00 00       	bra	@r0		
    7a3e:	00 00       	bra	@r0		
    7a40:	d9 38       	jl	$+436    	;abs 0x7bf4
    7a42:	00 00       	bra	@r0		
    7a44:	20 00 3c 01 	bra	&0x0013c	
    7a48:	00 00       	bra	@r0		
    7a4a:	00 00       	bra	@r0		
    7a4c:	ea 38       	jl	$+470    	;abs 0x7c22
    7a4e:	00 00       	bra	@r0		
    7a50:	20 00 3e 01 	bra	&0x0013e	
    7a54:	00 00       	bra	@r0		
    7a56:	00 00       	bra	@r0		
    7a58:	fc 38       	jl	$+506    	;abs 0x7c52
    7a5a:	00 00       	bra	@r0		
    7a5c:	20 00 40 01 	bra	&0x00140	
    7a60:	00 00       	bra	@r0		
    7a62:	00 00       	bra	@r0		
    7a64:	0e 39       	jl	$+542    	;abs 0x7c82
    7a66:	00 00       	bra	@r0		
    7a68:	20 00 43 01 	bra	&0x00143	
    7a6c:	00 00       	bra	@r0		
    7a6e:	00 00       	bra	@r0		
    7a70:	1e 39       	jl	$+574    	;abs 0x7cae
    7a72:	00 00       	bra	@r0		
    7a74:	20 00 45 01 	bra	&0x00145	
    7a78:	00 00       	bra	@r0		
    7a7a:	00 00       	bra	@r0		
    7a7c:	2e 39       	jl	$+606    	;abs 0x7cda
    7a7e:	00 00       	bra	@r0		
    7a80:	20 00 47 01 	bra	&0x00147	
    7a84:	00 00       	bra	@r0		
    7a86:	00 00       	bra	@r0		
    7a88:	3d 39       	jl	$+636    	;abs 0x7d04
    7a8a:	00 00       	bra	@r0		
    7a8c:	20 00 49 01 	bra	&0x00149	
    7a90:	00 00       	bra	@r0		
    7a92:	00 00       	bra	@r0		
    7a94:	4c 39       	jl	$+666    	;abs 0x7d2e
    7a96:	00 00       	bra	@r0		
    7a98:	20 00 4b 01 	bra	&0x0014b	
    7a9c:	00 00       	bra	@r0		
    7a9e:	00 00       	bra	@r0		
    7aa0:	5d 39       	jl	$+700    	;abs 0x7d5c
    7aa2:	00 00       	bra	@r0		
    7aa4:	20 00 4d 01 	bra	&0x0014d	
    7aa8:	00 00       	bra	@r0		
    7aaa:	00 00       	bra	@r0		
    7aac:	6d 39       	jl	$+732    	;abs 0x7d88
    7aae:	00 00       	bra	@r0		
    7ab0:	20 00 4f 01 	bra	&0x0014f	
    7ab4:	00 00       	bra	@r0		
    7ab6:	00 00       	bra	@r0		
    7ab8:	7e 39       	jl	$+766    	;abs 0x7db6
    7aba:	00 00       	bra	@r0		
    7abc:	20 00 51 01 	bra	&0x00151	
    7ac0:	00 00       	bra	@r0		
    7ac2:	00 00       	bra	@r0		
    7ac4:	8f 39       	jl	$+800    	;abs 0x7de4
    7ac6:	00 00       	bra	@r0		
    7ac8:	20 00 53 01 	bra	&0x00153	
    7acc:	00 00       	bra	@r0		
    7ace:	00 00       	bra	@r0		
    7ad0:	a0 39       	jl	$+834    	;abs 0x7e12
    7ad2:	00 00       	bra	@r0		
    7ad4:	20 00 55 01 	bra	&0x00155	
    7ad8:	00 00       	bra	@r0		
    7ada:	00 00       	bra	@r0		
    7adc:	b1 39       	jl	$+868    	;abs 0x7e40
    7ade:	00 00       	bra	@r0		
    7ae0:	20 00 58 01 	bra	&0x00158	
    7ae4:	00 00       	bra	@r0		
    7ae6:	00 00       	bra	@r0		
    7ae8:	be 39       	jl	$+894    	;abs 0x7e66
    7aea:	00 00       	bra	@r0		
    7aec:	20 00 5a 01 	bra	&0x0015a	
    7af0:	00 00       	bra	@r0		
    7af2:	00 00       	bra	@r0		
    7af4:	cc 39       	jl	$+922    	;abs 0x7e8e
    7af6:	00 00       	bra	@r0		
    7af8:	20 00 1a 00 	bra	&0x0001a	
    7afc:	00 00       	bra	@r0		
    7afe:	00 00       	bra	@r0		
    7b00:	d9 39       	jl	$+948    	;abs 0x7eb4
    7b02:	00 00       	bra	@r0		
    7b04:	20 00 1c 00 	bra	&0x0001c	
    7b08:	00 00       	bra	@r0		
    7b0a:	00 00       	bra	@r0		
    7b0c:	e7 39       	jl	$+976    	;abs 0x7edc
    7b0e:	00 00       	bra	@r0		
    7b10:	20 00 1e 00 	bra	&0x0001e	
    7b14:	00 00       	bra	@r0		
    7b16:	00 00       	bra	@r0		
    7b18:	f3 39       	jl	$+1000   	;abs 0x7f00
    7b1a:	00 00       	bra	@r0		
    7b1c:	20 00 21 00 	bra	&0x00021	
    7b20:	00 00       	bra	@r0		
    7b22:	00 00       	bra	@r0		
    7b24:	03 3a       	jl	$-1016   	;abs 0x772c
    7b26:	00 00       	bra	@r0		
    7b28:	20 00 23 00 	bra	&0x00023	
    7b2c:	00 00       	bra	@r0		
    7b2e:	00 00       	bra	@r0		
    7b30:	13 3a       	jl	$-984    	;abs 0x7758
    7b32:	00 00       	bra	@r0		
    7b34:	20 00 25 00 	bra	&0x00025	
    7b38:	00 00       	bra	@r0		
    7b3a:	00 00       	bra	@r0		
    7b3c:	22 3a       	jl	$-954    	;abs 0x7782
    7b3e:	00 00       	bra	@r0		
    7b40:	20 00 27 00 	bra	&0x00027	
    7b44:	00 00       	bra	@r0		
    7b46:	00 00       	bra	@r0		
    7b48:	31 3a       	jl	$-924    	;abs 0x77ac
    7b4a:	00 00       	bra	@r0		
    7b4c:	20 00 47 00 	bra	&0x00047	
    7b50:	00 00       	bra	@r0		
    7b52:	00 00       	bra	@r0		
    7b54:	41 3a       	jl	$-892    	;abs 0x77d8
    7b56:	00 00       	bra	@r0		
    7b58:	20 00 49 00 	bra	&0x00049	
    7b5c:	00 00       	bra	@r0		
    7b5e:	00 00       	bra	@r0		
    7b60:	50 3a       	jl	$-862    	;abs 0x7802
    7b62:	00 00       	bra	@r0		
    7b64:	20 00 ac 00 	bra	&0x000ac	
    7b68:	00 00       	bra	@r0		
    7b6a:	00 00       	bra	@r0		
    7b6c:	5e 3a       	jl	$-834    	;abs 0x782a
    7b6e:	00 00       	bra	@r0		
    7b70:	20 00 16 00 	bra	&0x00016	
    7b74:	00 00       	bra	@r0		
    7b76:	00 00       	bra	@r0		
    7b78:	6a 3a       	jl	$-810    	;abs 0x784e
    7b7a:	00 00       	bra	@r0		
    7b7c:	20 00 18 00 	bra	&0x00018	
    7b80:	00 00       	bra	@r0		
    7b82:	00 00       	bra	@r0		
    7b84:	77 3a       	jl	$-784    	;abs 0x7874
    7b86:	00 00       	bra	@r0		
    7b88:	20 00 1a 00 	bra	&0x0001a	
    7b8c:	00 00       	bra	@r0		
    7b8e:	00 00       	bra	@r0		
    7b90:	82 3a       	jl	$-762    	;abs 0x7896
    7b92:	00 00       	bra	@r0		
    7b94:	20 00 1d 00 	bra	&0x0001d	
    7b98:	00 00       	bra	@r0		
    7b9a:	00 00       	bra	@r0		
    7b9c:	91 3a       	jl	$-732    	;abs 0x78c0
    7b9e:	00 00       	bra	@r0		
    7ba0:	20 00 1f 00 	bra	&0x0001f	
    7ba4:	00 00       	bra	@r0		
    7ba6:	00 00       	bra	@r0		
    7ba8:	a0 3a       	jl	$-702    	;abs 0x78ea
    7baa:	00 00       	bra	@r0		
    7bac:	20 00 21 00 	bra	&0x00021	
    7bb0:	00 00       	bra	@r0		
    7bb2:	00 00       	bra	@r0		
    7bb4:	af 3a       	jl	$-672    	;abs 0x7914
    7bb6:	00 00       	bra	@r0		
    7bb8:	20 00 23 00 	bra	&0x00023	
    7bbc:	00 00       	bra	@r0		
    7bbe:	00 00       	bra	@r0		
    7bc0:	bd 3a       	jl	$-644    	;abs 0x793c
    7bc2:	00 00       	bra	@r0		
    7bc4:	20 00 25 00 	bra	&0x00025	
    7bc8:	00 00       	bra	@r0		
    7bca:	00 00       	bra	@r0		
    7bcc:	cb 3a       	jl	$-616    	;abs 0x7964
    7bce:	00 00       	bra	@r0		
    7bd0:	20 00 27 00 	bra	&0x00027	
    7bd4:	00 00       	bra	@r0		
    7bd6:	00 00       	bra	@r0		
    7bd8:	d9 3a       	jl	$-588    	;abs 0x798c
    7bda:	00 00       	bra	@r0		
    7bdc:	20 00 2c 00 	bra	&0x0002c	
    7be0:	00 00       	bra	@r0		
    7be2:	00 00       	bra	@r0		
    7be4:	e8 3a       	jl	$-558    	;abs 0x79b6
    7be6:	00 00       	bra	@r0		
    7be8:	20 00 2e 00 	bra	&0x0002e	
    7bec:	00 00       	bra	@r0		
    7bee:	00 00       	bra	@r0		
    7bf0:	f7 3a       	jl	$-528    	;abs 0x79e0
    7bf2:	00 00       	bra	@r0		
    7bf4:	20 00 30 00 	bra	&0x00030	
    7bf8:	00 00       	bra	@r0		
    7bfa:	00 00       	bra	@r0		
    7bfc:	06 3b       	jl	$-498    	;abs 0x7a0a
    7bfe:	00 00       	bra	@r0		
    7c00:	20 00 32 00 	bra	&0x00032	
    7c04:	00 00       	bra	@r0		
    7c06:	00 00       	bra	@r0		
    7c08:	15 3b       	jl	$-468    	;abs 0x7a34
    7c0a:	00 00       	bra	@r0		
    7c0c:	20 00 34 00 	bra	&0x00034	
    7c10:	00 00       	bra	@r0		
    7c12:	00 00       	bra	@r0		
    7c14:	23 3b       	jl	$-440    	;abs 0x7a5c
    7c16:	00 00       	bra	@r0		
    7c18:	20 00 36 00 	bra	&0x00036	
    7c1c:	00 00       	bra	@r0		
    7c1e:	00 00       	bra	@r0		
    7c20:	31 3b       	jl	$-412    	;abs 0x7a84
    7c22:	00 00       	bra	@r0		
    7c24:	20 00 38 00 	bra	&0x00038	
    7c28:	00 00       	bra	@r0		
    7c2a:	00 00       	bra	@r0		
    7c2c:	3f 3b       	jl	$-384    	;abs 0x7aac
    7c2e:	00 00       	bra	@r0		
    7c30:	20 00 3a 00 	bra	&0x0003a	
    7c34:	00 00       	bra	@r0		
    7c36:	00 00       	bra	@r0		
    7c38:	4d 3b       	jl	$-356    	;abs 0x7ad4
    7c3a:	00 00       	bra	@r0		
    7c3c:	20 00 7a 00 	bra	&0x0007a	
    7c40:	00 00       	bra	@r0		
    7c42:	00 00       	bra	@r0		
    7c44:	5c 3b       	jl	$-326    	;abs 0x7afe
    7c46:	00 00       	bra	@r0		
    7c48:	20 00 14 00 	bra	&0x00014	
    7c4c:	00 00       	bra	@r0		
    7c4e:	00 00       	bra	@r0		
    7c50:	6a 3b       	jl	$-298    	;abs 0x7b26
    7c52:	00 00       	bra	@r0		
    7c54:	20 00 16 00 	bra	&0x00016	
    7c58:	00 00       	bra	@r0		
    7c5a:	00 00       	bra	@r0		
    7c5c:	79 3b       	jl	$-268    	;abs 0x7b50
    7c5e:	00 00       	bra	@r0		
    7c60:	20 00 18 00 	bra	&0x00018	
    7c64:	00 00       	bra	@r0		
    7c66:	00 00       	bra	@r0		
    7c68:	88 3b       	jl	$-238    	;abs 0x7b7a
    7c6a:	00 00       	bra	@r0		
    7c6c:	20 00 1b 00 	bra	&0x0001b	
    7c70:	00 00       	bra	@r0		
    7c72:	00 00       	bra	@r0		
    7c74:	97 3b       	jl	$-208    	;abs 0x7ba4
    7c76:	00 00       	bra	@r0		
    7c78:	20 00 14 00 	bra	&0x00014	
    7c7c:	00 00       	bra	@r0		
    7c7e:	00 00       	bra	@r0		
    7c80:	a4 3b       	jl	$-182    	;abs 0x7bca
    7c82:	00 00       	bra	@r0		
    7c84:	20 00 16 00 	bra	&0x00016	
    7c88:	00 00       	bra	@r0		
    7c8a:	00 00       	bra	@r0		
    7c8c:	b1 3b       	jl	$-156    	;abs 0x7bf0
    7c8e:	00 00       	bra	@r0		
    7c90:	20 00 18 00 	bra	&0x00018	
    7c94:	00 00       	bra	@r0		
    7c96:	00 00       	bra	@r0		
    7c98:	be 3b       	jl	$-130    	;abs 0x7c16
    7c9a:	00 00       	bra	@r0		
    7c9c:	20 00 14 00 	bra	&0x00014	
    7ca0:	00 00       	bra	@r0		
    7ca2:	00 00       	bra	@r0		
    7ca4:	cc 3b       	jl	$-102    	;abs 0x7c3e
    7ca6:	00 00       	bra	@r0		
    7ca8:	20 00 16 00 	bra	&0x00016	
    7cac:	00 00       	bra	@r0		
    7cae:	00 00       	bra	@r0		
    7cb0:	da 3b       	jl	$-74     	;abs 0x7c66
    7cb2:	00 00       	bra	@r0		
    7cb4:	20 00 18 00 	bra	&0x00018	
    7cb8:	00 00       	bra	@r0		
    7cba:	00 00       	bra	@r0		
    7cbc:	e6 3b       	jl	$-50     	;abs 0x7c8a
    7cbe:	00 00       	bra	@r0		
    7cc0:	20 00 12 00 	bra	&0x00012	
    7cc4:	00 00       	bra	@r0		
    7cc6:	00 00       	bra	@r0		
    7cc8:	f7 3b       	jl	$-16     	;abs 0x7cb8
    7cca:	00 00       	bra	@r0		
    7ccc:	20 00 14 00 	bra	&0x00014	
    7cd0:	00 00       	bra	@r0		
    7cd2:	00 00       	bra	@r0		
    7cd4:	08 3c       	jmp	$+18     	;abs 0x7ce6
    7cd6:	00 00       	bra	@r0		
    7cd8:	20 00 16 00 	bra	&0x00016	
    7cdc:	00 00       	bra	@r0		
    7cde:	00 00       	bra	@r0		
    7ce0:	18 3c       	jmp	$+50     	;abs 0x7d12
    7ce2:	00 00       	bra	@r0		
    7ce4:	20 00 18 00 	bra	&0x00018	
    7ce8:	00 00       	bra	@r0		
    7cea:	00 00       	bra	@r0		
    7cec:	27 3c       	jmp	$+80     	;abs 0x7d3c
    7cee:	00 00       	bra	@r0		
    7cf0:	20 00 1a 00 	bra	&0x0001a	
    7cf4:	00 00       	bra	@r0		
    7cf6:	00 00       	bra	@r0		
    7cf8:	36 3c       	jmp	$+110    	;abs 0x7d66
    7cfa:	00 00       	bra	@r0		
    7cfc:	20 00 58 00 	bra	&0x00058	
    7d00:	00 00       	bra	@r0		
    7d02:	00 00       	bra	@r0		
    7d04:	44 3c       	jmp	$+138    	;abs 0x7d8e
    7d06:	00 00       	bra	@r0		
    7d08:	20 00 64 00 	bra	&0x00064	
    7d0c:	00 00       	bra	@r0		
    7d0e:	00 00       	bra	@r0		
    7d10:	55 3c       	jmp	$+172    	;abs 0x7dbc
    7d12:	00 00       	bra	@r0		
    7d14:	20 00 66 00 	bra	&0x00066	
    7d18:	00 00       	bra	@r0		
    7d1a:	00 00       	bra	@r0		
    7d1c:	66 3c       	jmp	$+206    	;abs 0x7dea
    7d1e:	00 00       	bra	@r0		
    7d20:	20 00 68 00 	bra	&0x00068	
    7d24:	00 00       	bra	@r0		
    7d26:	00 00       	bra	@r0		
    7d28:	77 3c       	jmp	$+240    	;abs 0x7e18
    7d2a:	00 00       	bra	@r0		
    7d2c:	20 00 6a 00 	bra	&0x0006a	
    7d30:	00 00       	bra	@r0		
    7d32:	00 00       	bra	@r0		
    7d34:	88 3c       	jmp	$+274    	;abs 0x7e46
    7d36:	00 00       	bra	@r0		
    7d38:	20 00 6c 00 	bra	&0x0006c	
    7d3c:	00 00       	bra	@r0		
    7d3e:	00 00       	bra	@r0		
    7d40:	99 3c       	jmp	$+308    	;abs 0x7e74
    7d42:	00 00       	bra	@r0		
    7d44:	20 00 6e 00 	bra	&0x0006e	
    7d48:	00 00       	bra	@r0		
    7d4a:	00 00       	bra	@r0		
    7d4c:	aa 3c       	jmp	$+342    	;abs 0x7ea2
    7d4e:	00 00       	bra	@r0		
    7d50:	20 00 70 00 	bra	&0x00070	
    7d54:	00 00       	bra	@r0		
    7d56:	00 00       	bra	@r0		
    7d58:	bb 3c       	jmp	$+376    	;abs 0x7ed0
    7d5a:	00 00       	bra	@r0		
    7d5c:	20 00 72 00 	bra	&0x00072	
    7d60:	00 00       	bra	@r0		
    7d62:	00 00       	bra	@r0		
    7d64:	cc 3c       	jmp	$+410    	;abs 0x7efe
    7d66:	00 00       	bra	@r0		
    7d68:	20 00 74 00 	bra	&0x00074	
    7d6c:	00 00       	bra	@r0		
    7d6e:	00 00       	bra	@r0		
    7d70:	dd 3c       	jmp	$+444    	;abs 0x7f2c
    7d72:	00 00       	bra	@r0		
    7d74:	20 00 76 00 	bra	&0x00076	
    7d78:	00 00       	bra	@r0		
    7d7a:	00 00       	bra	@r0		
    7d7c:	ee 3c       	jmp	$+478    	;abs 0x7f5a
    7d7e:	00 00       	bra	@r0		
    7d80:	20 00 78 00 	bra	&0x00078	
    7d84:	00 00       	bra	@r0		
    7d86:	00 00       	bra	@r0		
    7d88:	00 3d       	jmp	$+514    	;abs 0x7f8a
    7d8a:	00 00       	bra	@r0		
    7d8c:	20 00 7a 00 	bra	&0x0007a	
    7d90:	00 00       	bra	@r0		
    7d92:	00 00       	bra	@r0		
    7d94:	12 3d       	jmp	$+550    	;abs 0x7fba
    7d96:	00 00       	bra	@r0		
    7d98:	20 00 7c 00 	bra	&0x0007c	
    7d9c:	00 00       	bra	@r0		
    7d9e:	00 00       	bra	@r0		
    7da0:	24 3d       	jmp	$+586    	;abs 0x7fea
    7da2:	00 00       	bra	@r0		
    7da4:	20 00 7e 00 	bra	&0x0007e	
    7da8:	00 00       	bra	@r0		
    7daa:	00 00       	bra	@r0		
    7dac:	36 3d       	jmp	$+622    	;abs 0x801a
    7dae:	00 00       	bra	@r0		
    7db0:	20 00 80 00 	bra	&0x00080	
    7db4:	00 00       	bra	@r0		
    7db6:	00 00       	bra	@r0		
    7db8:	48 3d       	jmp	$+658    	;abs 0x804a
    7dba:	00 00       	bra	@r0		
    7dbc:	20 00 82 00 	bra	&0x00082	
    7dc0:	00 00       	bra	@r0		
    7dc2:	00 00       	bra	@r0		
    7dc4:	5a 3d       	jmp	$+694    	;abs 0x807a
    7dc6:	00 00       	bra	@r0		
    7dc8:	20 00 8b 00 	bra	&0x0008b	
    7dcc:	00 00       	bra	@r0		
    7dce:	00 00       	bra	@r0		
    7dd0:	6c 3d       	jmp	$+730    	;abs 0x80aa
    7dd2:	00 00       	bra	@r0		
    7dd4:	20 00 8d 00 	bra	&0x0008d	
    7dd8:	00 00       	bra	@r0		
    7dda:	00 00       	bra	@r0		
    7ddc:	7e 3d       	jmp	$+766    	;abs 0x80da
    7dde:	00 00       	bra	@r0		
    7de0:	20 00 8f 00 	bra	&0x0008f	
    7de4:	00 00       	bra	@r0		
    7de6:	00 00       	bra	@r0		
    7de8:	90 3d       	jmp	$+802    	;abs 0x810a
    7dea:	00 00       	bra	@r0		
    7dec:	20 00 91 00 	bra	&0x00091	
    7df0:	00 00       	bra	@r0		
    7df2:	00 00       	bra	@r0		
    7df4:	a2 3d       	jmp	$+838    	;abs 0x813a
    7df6:	00 00       	bra	@r0		
    7df8:	20 00 93 00 	bra	&0x00093	
    7dfc:	00 00       	bra	@r0		
    7dfe:	00 00       	bra	@r0		
    7e00:	b4 3d       	jmp	$+874    	;abs 0x816a
    7e02:	00 00       	bra	@r0		
    7e04:	20 00 95 00 	bra	&0x00095	
    7e08:	00 00       	bra	@r0		
    7e0a:	00 00       	bra	@r0		
    7e0c:	c6 3d       	jmp	$+910    	;abs 0x819a
    7e0e:	00 00       	bra	@r0		
    7e10:	20 00 97 00 	bra	&0x00097	
    7e14:	00 00       	bra	@r0		
    7e16:	00 00       	bra	@r0		
    7e18:	d8 3d       	jmp	$+946    	;abs 0x81ca
    7e1a:	00 00       	bra	@r0		
    7e1c:	20 00 99 00 	bra	&0x00099	
    7e20:	00 00       	bra	@r0		
    7e22:	00 00       	bra	@r0		
    7e24:	ea 3d       	jmp	$+982    	;abs 0x81fa
    7e26:	00 00       	bra	@r0		
    7e28:	20 00 9b 00 	bra	&0x0009b	
    7e2c:	00 00       	bra	@r0		
    7e2e:	00 00       	bra	@r0		
    7e30:	fc 3d       	jmp	$+1018   	;abs 0x822a
    7e32:	00 00       	bra	@r0		
    7e34:	20 00 9d 00 	bra	&0x0009d	
    7e38:	00 00       	bra	@r0		
    7e3a:	00 00       	bra	@r0		
    7e3c:	0e 3e       	jmp	$-994    	;abs 0x7a5a
    7e3e:	00 00       	bra	@r0		
    7e40:	20 00 9f 00 	bra	&0x0009f	
    7e44:	00 00       	bra	@r0		
    7e46:	00 00       	bra	@r0		
    7e48:	21 3e       	jmp	$-956    	;abs 0x7a8c
    7e4a:	00 00       	bra	@r0		
    7e4c:	20 00 a1 00 	bra	&0x000a1	
    7e50:	00 00       	bra	@r0		
    7e52:	00 00       	bra	@r0		
    7e54:	34 3e       	jmp	$-918    	;abs 0x7abe
    7e56:	00 00       	bra	@r0		
    7e58:	20 00 a3 00 	bra	&0x000a3	
    7e5c:	00 00       	bra	@r0		
    7e5e:	00 00       	bra	@r0		
    7e60:	47 3e       	jmp	$-880    	;abs 0x7af0
    7e62:	00 00       	bra	@r0		
    7e64:	20 00 a5 00 	bra	&0x000a5	
    7e68:	00 00       	bra	@r0		
    7e6a:	00 00       	bra	@r0		
    7e6c:	5a 3e       	jmp	$-842    	;abs 0x7b22
    7e6e:	00 00       	bra	@r0		
    7e70:	20 00 a7 00 	bra	&0x000a7	
    7e74:	00 00       	bra	@r0		
    7e76:	00 00       	bra	@r0		
    7e78:	6d 3e       	jmp	$-804    	;abs 0x7b54
    7e7a:	00 00       	bra	@r0		
    7e7c:	20 00 a9 00 	bra	&0x000a9	
    7e80:	00 00       	bra	@r0		
    7e82:	00 00       	bra	@r0		
    7e84:	80 3e       	jmp	$-766    	;abs 0x7b86
    7e86:	00 00       	bra	@r0		
    7e88:	20 00 12 00 	bra	&0x00012	
    7e8c:	00 00       	bra	@r0		
    7e8e:	00 00       	bra	@r0		
    7e90:	92 3e       	jmp	$-730    	;abs 0x7bb6
    7e92:	00 00       	bra	@r0		
    7e94:	20 00 14 00 	bra	&0x00014	
    7e98:	00 00       	bra	@r0		
    7e9a:	00 00       	bra	@r0		
    7e9c:	a4 3e       	jmp	$-694    	;abs 0x7be6
    7e9e:	00 00       	bra	@r0		
    7ea0:	20 00 16 00 	bra	&0x00016	
    7ea4:	00 00       	bra	@r0		
    7ea6:	00 00       	bra	@r0		
    7ea8:	b6 3e       	jmp	$-658    	;abs 0x7c16
    7eaa:	00 00       	bra	@r0		
    7eac:	20 00 18 00 	bra	&0x00018	
    7eb0:	00 00       	bra	@r0		
    7eb2:	00 00       	bra	@r0		
    7eb4:	c8 3e       	jmp	$-622    	;abs 0x7c46
    7eb6:	00 00       	bra	@r0		
    7eb8:	20 00 18 00 	bra	&0x00018	
    7ebc:	00 00       	bra	@r0		
    7ebe:	00 00       	bra	@r0		
    7ec0:	d7 3e       	jmp	$-592    	;abs 0x7c70
    7ec2:	00 00       	bra	@r0		
    7ec4:	20 00 1a 00 	bra	&0x0001a	
    7ec8:	00 00       	bra	@r0		
    7eca:	00 00       	bra	@r0		
    7ecc:	e6 3e       	jmp	$-562    	;abs 0x7c9a
    7ece:	00 00       	bra	@r0		
    7ed0:	20 00 1d 00 	bra	&0x0001d	
    7ed4:	00 00       	bra	@r0		
    7ed6:	00 00       	bra	@r0		
    7ed8:	f3 3e       	jmp	$-536    	;abs 0x7cc0
    7eda:	00 00       	bra	@r0		
    7edc:	20 00 3f 00 	bra	&0x0003f	
    7ee0:	00 00       	bra	@r0		
    7ee2:	00 00       	bra	@r0		
    7ee4:	02 3f       	jmp	$-506    	;abs 0x7cea
    7ee6:	00 00       	bra	@r0		
    7ee8:	20 00 41 00 	bra	&0x00041	
    7eec:	00 00       	bra	@r0		
    7eee:	00 00       	bra	@r0		
    7ef0:	17 3f       	jmp	$-464    	;abs 0x7d20
    7ef2:	00 00       	bra	@r0		
    7ef4:	20 00 43 00 	bra	&0x00043	
    7ef8:	00 00       	bra	@r0		
    7efa:	00 00       	bra	@r0		
    7efc:	26 3f       	jmp	$-434    	;abs 0x7d4a
    7efe:	00 00       	bra	@r0		
    7f00:	20 00 45 00 	bra	&0x00045	
    7f04:	00 00       	bra	@r0		
    7f06:	00 00       	bra	@r0		
    7f08:	34 3f       	jmp	$-406    	;abs 0x7d72
    7f0a:	00 00       	bra	@r0		
    7f0c:	20 00 47 00 	bra	&0x00047	
    7f10:	00 00       	bra	@r0		
    7f12:	00 00       	bra	@r0		
    7f14:	43 3f       	jmp	$-376    	;abs 0x7d9c
    7f16:	00 00       	bra	@r0		
    7f18:	20 00 49 00 	bra	&0x00049	
    7f1c:	00 00       	bra	@r0		
    7f1e:	00 00       	bra	@r0		
    7f20:	51 3f       	jmp	$-348    	;abs 0x7dc4
    7f22:	00 00       	bra	@r0		
    7f24:	20 00 4c 00 	bra	&0x0004c	
    7f28:	00 00       	bra	@r0		
    7f2a:	00 00       	bra	@r0		
    7f2c:	60 3f       	jmp	$-318    	;abs 0x7dee
    7f2e:	00 00       	bra	@r0		
    7f30:	20 00 4e 00 	bra	&0x0004e	
    7f34:	00 00       	bra	@r0		
    7f36:	00 00       	bra	@r0		
    7f38:	6e 3f       	jmp	$-290    	;abs 0x7e16
    7f3a:	00 00       	bra	@r0		
    7f3c:	20 00 50 00 	bra	&0x00050	
    7f40:	00 00       	bra	@r0		
    7f42:	00 00       	bra	@r0		
    7f44:	7d 3f       	jmp	$-260    	;abs 0x7e40
    7f46:	00 00       	bra	@r0		
    7f48:	20 00 52 00 	bra	&0x00052	
    7f4c:	00 00       	bra	@r0		
    7f4e:	00 00       	bra	@r0		
    7f50:	8b 3f       	jmp	$-232    	;abs 0x7e68
    7f52:	00 00       	bra	@r0		
    7f54:	20 00 54 00 	bra	&0x00054	
    7f58:	00 00       	bra	@r0		
    7f5a:	00 00       	bra	@r0		
    7f5c:	9a 3f       	jmp	$-202    	;abs 0x7e92
    7f5e:	00 00       	bra	@r0		
    7f60:	20 00 56 00 	bra	&0x00056	
    7f64:	00 00       	bra	@r0		
    7f66:	00 00       	bra	@r0		
    7f68:	a8 3f       	jmp	$-174    	;abs 0x7eba
    7f6a:	00 00       	bra	@r0		
    7f6c:	20 00 59 00 	bra	&0x00059	
    7f70:	00 00       	bra	@r0		
    7f72:	00 00       	bra	@r0		
    7f74:	b7 3f       	jmp	$-144    	;abs 0x7ee4
    7f76:	00 00       	bra	@r0		
    7f78:	20 00 5b 00 	bra	&0x0005b	
    7f7c:	00 00       	bra	@r0		
    7f7e:	00 00       	bra	@r0		
    7f80:	c5 3f       	jmp	$-116    	;abs 0x7f0c
    7f82:	00 00       	bra	@r0		
    7f84:	20 00 5d 00 	bra	&0x0005d	
    7f88:	00 00       	bra	@r0		
    7f8a:	00 00       	bra	@r0		
    7f8c:	d4 3f       	jmp	$-86     	;abs 0x7f36
    7f8e:	00 00       	bra	@r0		
    7f90:	20 00 5f 00 	bra	&0x0005f	
    7f94:	00 00       	bra	@r0		
    7f96:	00 00       	bra	@r0		
    7f98:	e2 3f       	jmp	$-58     	;abs 0x7f5e
    7f9a:	00 00       	bra	@r0		
    7f9c:	20 00 61 00 	bra	&0x00061	
    7fa0:	00 00       	bra	@r0		
    7fa2:	00 00       	bra	@r0		
    7fa4:	f1 3f       	jmp	$-28     	;abs 0x7f88
    7fa6:	00 00       	bra	@r0		
    7fa8:	20 00 63 00 	bra	&0x00063	
    7fac:	00 00       	bra	@r0		
    7fae:	00 00       	bra	@r0		
    7fb0:	ff 3f       	jmp	$+0      	;abs 0x7fb0
    7fb2:	00 00       	bra	@r0		
    7fb4:	20 00 47 00 	bra	&0x00047	
    7fb8:	00 00       	bra	@r0		
    7fba:	00 00       	bra	@r0		
    7fbc:	0d 40       	mov	r0,	r13	
    7fbe:	00 00       	bra	@r0		
    7fc0:	20 00 45 00 	bra	&0x00045	
    7fc4:	00 00       	bra	@r0		
    7fc6:	00 00       	bra	@r0		
    7fc8:	18 40 00 00 	mov	0x0000,	r8	;PC rel. 0x07fcc
    7fcc:	20 00 4c 00 	bra	&0x0004c	
    7fd0:	00 00       	bra	@r0		
    7fd2:	00 00       	bra	@r0		
    7fd4:	24 40       	mov	@r0,	r4	
    7fd6:	00 00       	bra	@r0		
    7fd8:	20 00 54 00 	bra	&0x00054	
    7fdc:	00 00       	bra	@r0		
    7fde:	00 00       	bra	@r0		
    7fe0:	2f 40       	mov	@r0,	r15	
    7fe2:	00 00       	bra	@r0		
    7fe4:	20 00 5c 00 	bra	&0x0005c	
    7fe8:	00 00       	bra	@r0		
    7fea:	00 00       	bra	@r0		
    7fec:	3b 40 00 00 	mov	#0,	r11	;#0x0000
    7ff0:	20 00 6e 00 	bra	&0x0006e	
    7ff4:	00 00       	bra	@r0		
    7ff6:	00 00       	bra	@r0		
    7ff8:	4f 40       	mov.b	r0,	r15	
    7ffa:	00 00       	bra	@r0		
    7ffc:	20 00 70 00 	bra	&0x00070	
    8000:	00 00       	bra	@r0		
    8002:	00 00       	bra	@r0		
    8004:	65 40       	mov.b	@r0,	r5	
    8006:	00 00       	bra	@r0		
    8008:	20 00 72 00 	bra	&0x00072	
    800c:	00 00       	bra	@r0		
    800e:	00 00       	bra	@r0		
    8010:	7b 40 00 00 	mov.b	#0,	r11	;#0x0000
    8014:	20 00 74 00 	bra	&0x00074	
    8018:	00 00       	bra	@r0		
    801a:	00 00       	bra	@r0		
    801c:	92 40 00 00 	mov	0x0000,	&0x0020	;PC rel. 0x08020
    8020:	20 00 
    8022:	76 00 00 00 	mova	r0,	0(r6)	;0x0000(r6)
    8026:	00 00       	bra	@r0		
    8028:	a9 40 00 00 	mov	@r0,	0(r9)	;0x0000(r9)
    802c:	20 00 93 00 	bra	&0x00093	
    8030:	00 00       	bra	@r0		
    8032:	00 00       	bra	@r0		
    8034:	bd 40 00 00 	mov	#0,	32(r13)	;#0x0000, 0x0020(r13)
    8038:	20 00 
    803a:	95 00 00 00 	cmpa	#0x00000,r5	
    803e:	00 00       	bra	@r0		
    8040:	d1 40 00 00 	mov.b	0x0000,	32(r1)	;PC rel. 0x08044, 0x0020(r1)
    8044:	20 00 
    8046:	97 00 00 00 	cmpa	#0x00000,r7	
    804a:	00 00       	bra	@r0		
    804c:	e5 40 00 00 	mov.b	@r0,	0(r5)	;0x0000(r5)
    8050:	20 00 99 00 	bra	&0x00099	
    8054:	00 00       	bra	@r0		
    8056:	00 00       	bra	@r0		
    8058:	f9 40 00 00 	mov.b	#0,	32(r9)	;#0x0000, 0x0020(r9)
    805c:	20 00 
    805e:	9b 00 00 00 	cmpa	#0x00000,r11	
    8062:	00 00       	bra	@r0		
    8064:	0c 41       	mov	r1,	r12	
    8066:	00 00       	bra	@r0		
    8068:	20 00 9d 00 	bra	&0x0009d	
    806c:	00 00       	bra	@r0		
    806e:	00 00       	bra	@r0		
    8070:	1f 41 00 00 	mov	0(r1),	r15	;0x0000(r1)
    8074:	20 00 9f 00 	bra	&0x0009f	
    8078:	00 00       	bra	@r0		
    807a:	00 00       	bra	@r0		
    807c:	32 41       	pop	r2		
    807e:	00 00       	bra	@r0		
    8080:	20 00 a1 00 	bra	&0x000a1	
    8084:	00 00       	bra	@r0		
    8086:	00 00       	bra	@r0		
    8088:	8c 4a 00 00 	mov	r10,	0(r12)	;0x0000(r12)
    808c:	20 00 04 00 	bra	&0x00004	
    8090:	00 00       	bra	@r0		
    8092:	00 00       	bra	@r0		
    8094:	b2 4a 00 00 	mov	@r10+,	&0x0000	
    8098:	20 00 05 00 	bra	&0x00005	
	...
    80a4:	64 00 00 00 	mova	r0,	&0x40000
    80a8:	b8 52 00 00 	add	#8,	0(r8)	;r2 As==11, 0x0000(r8)
    80ac:	c5 4a 00 00 	mov.b	r10,	0(r5)	;0x0000(r5)
    80b0:	64 00 00 00 	mova	r0,	&0x40000
    80b4:	b8 52 00 00 	add	#8,	0(r8)	;r2 As==11, 0x0000(r8)
    80b8:	f6 4a 00 00 	mov.b	@r10+,	0(r6)	;0x0000(r6)
    80bc:	64 00 00 00 	mova	r0,	&0x40000
    80c0:	b8 52 00 00 	add	#8,	0(r8)	;r2 As==11, 0x0000(r8)
    80c4:	6a 00 00 00 	mova	r0,	&0xa0000
    80c8:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x080ca
    80cc:	00 00       	bra	@r0		
    80ce:	00 00       	bra	@r0		
    80d0:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    80d4:	80 00 00 00 	bra	#0x00000	
    80d8:	00 00       	bra	@r0		
    80da:	00 00       	bra	@r0		
    80dc:	99 00 00 00 	cmpa	#0x00000,r9	
    80e0:	80 00 00 00 	bra	#0x00000	
    80e4:	00 00       	bra	@r0		
    80e6:	00 00       	bra	@r0		
    80e8:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    80ea:	00 00       	bra	@r0		
    80ec:	80 00 00 00 	bra	#0x00000	
    80f0:	00 00       	bra	@r0		
    80f2:	00 00       	bra	@r0		
    80f4:	ec 00       	adda	r0,	r12	
    80f6:	00 00       	bra	@r0		
    80f8:	80 00 00 00 	bra	#0x00000	
    80fc:	00 00       	bra	@r0		
    80fe:	00 00       	bra	@r0		
    8100:	24 01 00 00 	mova	&0x10000,r4	
    8104:	80 00 00 00 	bra	#0x00000	
    8108:	00 00       	bra	@r0		
    810a:	00 00       	bra	@r0		
    810c:	66 01 00 00 	mova	r1,	&0x60000
    8110:	80 00 00 00 	bra	#0x00000	
    8114:	00 00       	bra	@r0		
    8116:	00 00       	bra	@r0		
    8118:	b7 01 00 00 	suba	#0x10000,r7	
    811c:	80 00 00 00 	bra	#0x00000	
    8120:	00 00       	bra	@r0		
    8122:	00 00       	bra	@r0		
    8124:	08 02       	mova	#4,	r8	;r2 As==10
    8126:	00 00       	bra	@r0		
    8128:	80 00 00 00 	bra	#0x00000	
    812c:	00 00       	bra	@r0		
    812e:	00 00       	bra	@r0		
    8130:	2e 02 00 00 	mova	&0x20000,r14	
    8134:	80 00 00 00 	bra	#0x00000	
    8138:	00 00       	bra	@r0		
    813a:	00 00       	bra	@r0		
    813c:	6c 02 00 00 	mova	r2,	&0xc0000
    8140:	80 00 00 00 	bra	#0x00000	
    8144:	00 00       	bra	@r0		
    8146:	00 00       	bra	@r0		
    8148:	96 02 00 00 	cmpa	#0x20000,r6	
    814c:	80 00 00 00 	bra	#0x00000	
    8150:	00 00       	bra	@r0		
    8152:	00 00       	bra	@r0		
    8154:	bf 02 00 00 	suba	#0x20000,r15	
    8158:	80 00 00 00 	bra	#0x00000	
    815c:	00 00       	bra	@r0		
    815e:	00 00       	bra	@r0		
    8160:	d9 02       	cmpa	r2,	r9	
    8162:	00 00       	bra	@r0		
    8164:	80 00 00 00 	bra	#0x00000	
    8168:	00 00       	bra	@r0		
    816a:	00 00       	bra	@r0		
    816c:	f4 02       	suba	r2,	r4	
    816e:	00 00       	bra	@r0		
    8170:	80 00 00 00 	bra	#0x00000	
    8174:	00 00       	bra	@r0		
    8176:	00 00       	bra	@r0		
    8178:	14 03       	mova	#-1,	r4	;r3 As==11
    817a:	00 00       	bra	@r0		
    817c:	80 00 00 00 	bra	#0x00000	
    8180:	00 00       	bra	@r0		
    8182:	00 00       	bra	@r0		
    8184:	4d 03       	rrum.a	#1,	r13	
    8186:	00 00       	bra	@r0		
    8188:	80 00 00 00 	bra	#0x00000	
    818c:	00 00       	bra	@r0		
    818e:	00 00       	bra	@r0		
    8190:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    8194:	80 00 00 00 	bra	#0x00000	
    8198:	00 00       	bra	@r0		
    819a:	00 00       	bra	@r0		
    819c:	8a 03 00 00 	mova	#0x30000,r10	
    81a0:	80 00 00 00 	bra	#0x00000	
    81a4:	00 00       	bra	@r0		
    81a6:	00 00       	bra	@r0		
    81a8:	ae 03 00 00 	adda	#0x30000,r14	
    81ac:	80 00 00 00 	bra	#0x00000	
    81b0:	00 00       	bra	@r0		
    81b2:	00 00       	bra	@r0		
    81b4:	d7 03       	tsta	r7		
    81b6:	00 00       	bra	@r0		
    81b8:	80 00 00 00 	bra	#0x00000	
    81bc:	00 00       	bra	@r0		
    81be:	00 00       	bra	@r0		
    81c0:	f6 4a 00 00 	mov.b	@r10+,	0(r6)	;0x0000(r6)
    81c4:	82 00 00 00 	mova	#0x00000,r2	
    81c8:	e4 07       	adda	r7,	r4	
    81ca:	00 00       	bra	@r0		
    81cc:	00 4b       	br	r11		
    81ce:	00 00       	bra	@r0		
    81d0:	82 00 00 00 	mova	#0x00000,r2	
    81d4:	e5 1d       	.word	0x1de5;	????	
    81d6:	00 00       	bra	@r0		
    81d8:	0a 4b       	mov	r11,	r10	
    81da:	00 00       	bra	@r0		
    81dc:	80 00 07 00 	bra	#0x00007	
    81e0:	00 00       	bra	@r0		
    81e2:	00 00       	bra	@r0		
    81e4:	2d 4b       	mov	@r11,	r13	
    81e6:	00 00       	bra	@r0		
    81e8:	80 00 09 00 	bra	#0x00009	
    81ec:	00 00       	bra	@r0		
    81ee:	00 00       	bra	@r0		
    81f0:	54 4b 00 00 	mov.b	0(r11),	r4	;0x0000(r11)
    81f4:	80 00 0b 00 	bra	#0x0000b	
    81f8:	00 00       	bra	@r0		
    81fa:	00 00       	bra	@r0		
    81fc:	7a 4b       	mov.b	@r11+,	r10	
    81fe:	00 00       	bra	@r0		
    8200:	82 00 00 00 	mova	#0x00000,r2	
	...
    820c:	a2 00 00 00 	adda	#0x00000,r2	
    8210:	00 00       	bra	@r0		
    8212:	00 00       	bra	@r0		
    8214:	90 4b 00 00 	mov	0(r11),	0x0082	;0x0000(r11), PC rel. 0x0829c
    8218:	82 00 
	...
    8222:	00 00       	bra	@r0		
    8224:	a2 00 00 00 	adda	#0x00000,r2	
    8228:	00 00       	bra	@r0		
    822a:	00 00       	bra	@r0		
    822c:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    8230:	82 00 00 00 	mova	#0x00000,r2	
    8234:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    8238:	c0 4b 00 00 	mov.b	r11,	0x0000	;PC rel. 0x0823c
    823c:	80 00 00 00 	bra	#0x00000	
    8240:	00 00       	bra	@r0		
    8242:	00 00       	bra	@r0		
    8244:	64 4c       	mov.b	@r12,	r4	
    8246:	00 00       	bra	@r0		
    8248:	80 00 00 00 	bra	#0x00000	
    824c:	00 00       	bra	@r0		
    824e:	00 00       	bra	@r0		
    8250:	9e 4c 00 00 	mov	0(r12),	128(r14);0x0000(r12), 0x0080(r14)
    8254:	80 00 
    8256:	49 04       	rrcm.a	#2,	r9	
    8258:	00 00       	bra	@r0		
    825a:	00 00       	bra	@r0		
    825c:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    8260:	82 00 00 00 	mova	#0x00000,r2	
	...
    826c:	a2 00 00 00 	adda	#0x00000,r2	
	...
    8278:	a2 00 00 00 	adda	#0x00000,r2	
    827c:	00 00       	bra	@r0		
    827e:	00 00       	bra	@r0		
    8280:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    8284:	82 00 00 00 	mova	#0x00000,r2	
	...
    8290:	a2 00 00 00 	adda	#0x00000,r2	
	...
    829c:	a2 00 00 00 	adda	#0x00000,r2	
    82a0:	00 00       	bra	@r0		
    82a2:	00 00       	bra	@r0		
    82a4:	d6 4c 00 00 	mov.b	0(r12),	130(r6)	;0x0000(r12), 0x0082(r6)
    82a8:	82 00 
    82aa:	00 00       	bra	@r0		
    82ac:	00 00       	bra	@r0		
    82ae:	00 00       	bra	@r0		
    82b0:	e0 4c 00 00 	mov.b	@r12,	0x0000	;PC rel. 0x082b4
    82b4:	82 00 00 00 	mova	#0x00000,r2	
    82b8:	13 10       	rrc	#1		;r3 As==01
    82ba:	00 00       	bra	@r0		
    82bc:	21 4d       	mov	@r13,	r1	
    82be:	00 00       	bra	@r0		
    82c0:	80 00 97 00 	bra	#0x00097	
    82c4:	00 00       	bra	@r0		
    82c6:	00 00       	bra	@r0		
    82c8:	38 4d       	mov	@r13+,	r8	
    82ca:	00 00       	bra	@r0		
    82cc:	80 00 d5 00 	bra	#0x000d5	
    82d0:	00 00       	bra	@r0		
    82d2:	00 00       	bra	@r0		
    82d4:	4c 4d       	mov.b	r13,	r12	
    82d6:	00 00       	bra	@r0		
    82d8:	80 00 45 01 	bra	#0x00145	
	...
    82e4:	a2 00 00 00 	adda	#0x00000,r2	
	...
    82f0:	a2 00 00 00 	adda	#0x00000,r2	
    82f4:	00 00       	bra	@r0		
    82f6:	00 00       	bra	@r0		
    82f8:	61 4d       	mov.b	@r13,	r1	
    82fa:	00 00       	bra	@r0		
    82fc:	82 00 00 00 	mova	#0x00000,r2	
    8300:	5f 50 00 00 	add.b	0x0000,	r15	;PC rel. 0x08304
    8304:	6b 4d       	mov.b	@r13,	r11	
    8306:	00 00       	bra	@r0		
    8308:	80 00 43 00 	bra	#0x00043	
    830c:	00 00       	bra	@r0		
    830e:	00 00       	bra	@r0		
    8310:	81 4d 00 00 	mov	r13,	0(r1)	;0x0000(r1)
    8314:	80 00 44 00 	bra	#0x00044	
    8318:	00 00       	bra	@r0		
    831a:	00 00       	bra	@r0		
    831c:	98 4d 00 00 	mov	0(r13),	128(r8)	;0x0000(r13), 0x0080(r8)
    8320:	80 00 
    8322:	45 00       	rrcm.a	#1,	r5	
    8324:	00 00       	bra	@r0		
    8326:	00 00       	bra	@r0		
    8328:	ad 4d 00 00 	mov	@r13,	0(r13)	;0x0000(r13)
    832c:	80 00 46 00 	bra	#0x00046	
    8330:	00 00       	bra	@r0		
    8332:	00 00       	bra	@r0		
    8334:	c3 4d       	mov.b	r13,	#1	;r3 As==01
    8336:	00 00       	bra	@r0		
    8338:	80 00 49 00 	bra	#0x00049	
    833c:	00 00       	bra	@r0		
    833e:	00 00       	bra	@r0		
    8340:	d8 4d 00 00 	mov.b	0(r13),	128(r8)	;0x0000(r13), 0x0080(r8)
    8344:	80 00 
    8346:	4a 00       	rrcm.a	#1,	r10	
    8348:	00 00       	bra	@r0		
    834a:	00 00       	bra	@r0		
    834c:	ee 4d 00 00 	mov.b	@r13,	0(r14)	;0x0000(r14)
    8350:	80 00 4d 00 	bra	#0x0004d	
    8354:	00 00       	bra	@r0		
    8356:	00 00       	bra	@r0		
    8358:	03 4e       	.word	0x4e03;	????	Illegal as 2-op instr
    835a:	00 00       	bra	@r0		
    835c:	80 00 4e 00 	bra	#0x0004e	
    8360:	00 00       	bra	@r0		
    8362:	00 00       	bra	@r0		
    8364:	19 4e 00 00 	mov	0(r14),	r9	;0x0000(r14)
    8368:	80 00 59 00 	bra	#0x00059	
    836c:	00 00       	bra	@r0		
    836e:	00 00       	bra	@r0		
    8370:	2f 4e       	mov	@r14,	r15	
    8372:	00 00       	bra	@r0		
    8374:	80 00 5a 00 	bra	#0x0005a	
    8378:	00 00       	bra	@r0		
    837a:	00 00       	bra	@r0		
    837c:	46 4e       	mov.b	r14,	r6	
    837e:	00 00       	bra	@r0		
    8380:	80 00 7a 00 	bra	#0x0007a	
    8384:	00 00       	bra	@r0		
    8386:	00 00       	bra	@r0		
    8388:	5f 4e 00 00 	mov.b	0(r14),	r15	;0x0000(r14)
    838c:	80 00 00 00 	bra	#0x00000	
    8390:	00 00       	bra	@r0		
    8392:	00 00       	bra	@r0		
    8394:	97 4e 00 00 	mov	0(r14),	128(r7)	;0x0000(r14), 0x0080(r7)
    8398:	80 00 
    839a:	29 01 00 00 	mova	&0x10000,r9	
    839e:	00 00       	bra	@r0		
    83a0:	d2 4e 00 00 	mov.b	0(r14),	&0x0082	;0x0000(r14)
    83a4:	82 00 
	...
    83ae:	00 00       	bra	@r0		
    83b0:	a2 00 00 00 	adda	#0x00000,r2	
	...
    83bc:	a2 00 00 00 	adda	#0x00000,r2	
    83c0:	00 00       	bra	@r0		
    83c2:	00 00       	bra	@r0		
    83c4:	dd 4e 00 00 	mov.b	0(r14),	130(r13);0x0000(r14), 0x0082(r13)
    83c8:	82 00 
	...
    83d2:	00 00       	bra	@r0		
    83d4:	a2 00 00 00 	adda	#0x00000,r2	
    83d8:	00 00       	bra	@r0		
    83da:	00 00       	bra	@r0		
    83dc:	1e 4f 00 00 	mov	0(r15),	r14	;0x0000(r15)
    83e0:	24 00 a8 04 	mova	&0x004a8,r4	
    83e4:	b8 52 00 00 	add	#8,	0(r8)	;r2 As==11, 0x0000(r8)
    83e8:	33 4f       	.word	0x4f33;	????	Illegal as 2-op instr
    83ea:	00 00       	bra	@r0		
    83ec:	40 00       	rrcm.a	#1,	r0	
    83ee:	a7 04 0a 00 	adda	#0x4000a,r7	
    83f2:	00 00       	bra	@r0		
    83f4:	00 00       	bra	@r0		
    83f6:	00 00       	bra	@r0		
    83f8:	44 00       	rrcm.a	#1,	r4	
    83fa:	a8 04 00 00 	adda	#0x40000,r8	
    83fe:	00 00       	bra	@r0		
    8400:	00 00       	bra	@r0		
    8402:	00 00       	bra	@r0		
    8404:	44 00       	rrcm.a	#1,	r4	
    8406:	a9 04 08 00 	adda	#0x40008,r9	
    840a:	00 00       	bra	@r0		
    840c:	00 00       	bra	@r0		
    840e:	00 00       	bra	@r0		
    8410:	44 00       	rrcm.a	#1,	r4	
    8412:	aa 04 16 00 	adda	#0x40016,r10	
    8416:	00 00       	bra	@r0		
    8418:	00 00       	bra	@r0		
    841a:	00 00       	bra	@r0		
    841c:	44 00       	rrcm.a	#1,	r4	
    841e:	ab 04 30 00 	adda	#0x40030,r11	
    8422:	00 00       	bra	@r0		
    8424:	00 00       	bra	@r0		
    8426:	00 00       	bra	@r0		
    8428:	44 00       	rrcm.a	#1,	r4	
    842a:	ac 04 38 00 	adda	#0x40038,r12	
    842e:	00 00       	bra	@r0		
    8430:	00 00       	bra	@r0		
    8432:	00 00       	bra	@r0		
    8434:	24 00 00 00 	mova	&0x00000,r4	
    8438:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x0843a
    843c:	00 00       	bra	@r0		
    843e:	00 00       	bra	@r0		
    8440:	64 00 00 00 	mova	r0,	&0x40000
    8444:	f6 52 00 00 	add.b	#8,	0(r6)	;r2 As==11, 0x0000(r6)
    8448:	c5 4a 00 00 	mov.b	r10,	0(r5)	;0x0000(r5)
    844c:	64 00 00 00 	mova	r0,	&0x40000
    8450:	f6 52 00 00 	add.b	#8,	0(r6)	;r2 As==11, 0x0000(r6)
    8454:	3d 4f       	mov	@r15+,	r13	
    8456:	00 00       	bra	@r0		
    8458:	64 00 00 00 	mova	r0,	&0x40000
    845c:	f6 52 00 00 	add.b	#8,	0(r6)	;r2 As==11, 0x0000(r6)
    8460:	6a 00 00 00 	mova	r0,	&0xa0000
    8464:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x08466
    8468:	00 00       	bra	@r0		
    846a:	00 00       	bra	@r0		
    846c:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    8470:	80 00 00 00 	bra	#0x00000	
    8474:	00 00       	bra	@r0		
    8476:	00 00       	bra	@r0		
    8478:	99 00 00 00 	cmpa	#0x00000,r9	
    847c:	80 00 00 00 	bra	#0x00000	
    8480:	00 00       	bra	@r0		
    8482:	00 00       	bra	@r0		
    8484:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    8486:	00 00       	bra	@r0		
    8488:	80 00 00 00 	bra	#0x00000	
    848c:	00 00       	bra	@r0		
    848e:	00 00       	bra	@r0		
    8490:	ec 00       	adda	r0,	r12	
    8492:	00 00       	bra	@r0		
    8494:	80 00 00 00 	bra	#0x00000	
    8498:	00 00       	bra	@r0		
    849a:	00 00       	bra	@r0		
    849c:	24 01 00 00 	mova	&0x10000,r4	
    84a0:	80 00 00 00 	bra	#0x00000	
    84a4:	00 00       	bra	@r0		
    84a6:	00 00       	bra	@r0		
    84a8:	66 01 00 00 	mova	r1,	&0x60000
    84ac:	80 00 00 00 	bra	#0x00000	
    84b0:	00 00       	bra	@r0		
    84b2:	00 00       	bra	@r0		
    84b4:	b7 01 00 00 	suba	#0x10000,r7	
    84b8:	80 00 00 00 	bra	#0x00000	
    84bc:	00 00       	bra	@r0		
    84be:	00 00       	bra	@r0		
    84c0:	08 02       	mova	#4,	r8	;r2 As==10
    84c2:	00 00       	bra	@r0		
    84c4:	80 00 00 00 	bra	#0x00000	
    84c8:	00 00       	bra	@r0		
    84ca:	00 00       	bra	@r0		
    84cc:	2e 02 00 00 	mova	&0x20000,r14	
    84d0:	80 00 00 00 	bra	#0x00000	
    84d4:	00 00       	bra	@r0		
    84d6:	00 00       	bra	@r0		
    84d8:	6c 02 00 00 	mova	r2,	&0xc0000
    84dc:	80 00 00 00 	bra	#0x00000	
    84e0:	00 00       	bra	@r0		
    84e2:	00 00       	bra	@r0		
    84e4:	96 02 00 00 	cmpa	#0x20000,r6	
    84e8:	80 00 00 00 	bra	#0x00000	
    84ec:	00 00       	bra	@r0		
    84ee:	00 00       	bra	@r0		
    84f0:	bf 02 00 00 	suba	#0x20000,r15	
    84f4:	80 00 00 00 	bra	#0x00000	
    84f8:	00 00       	bra	@r0		
    84fa:	00 00       	bra	@r0		
    84fc:	d9 02       	cmpa	r2,	r9	
    84fe:	00 00       	bra	@r0		
    8500:	80 00 00 00 	bra	#0x00000	
    8504:	00 00       	bra	@r0		
    8506:	00 00       	bra	@r0		
    8508:	f4 02       	suba	r2,	r4	
    850a:	00 00       	bra	@r0		
    850c:	80 00 00 00 	bra	#0x00000	
    8510:	00 00       	bra	@r0		
    8512:	00 00       	bra	@r0		
    8514:	14 03       	mova	#-1,	r4	;r3 As==11
    8516:	00 00       	bra	@r0		
    8518:	80 00 00 00 	bra	#0x00000	
    851c:	00 00       	bra	@r0		
    851e:	00 00       	bra	@r0		
    8520:	4d 03       	rrum.a	#1,	r13	
    8522:	00 00       	bra	@r0		
    8524:	80 00 00 00 	bra	#0x00000	
    8528:	00 00       	bra	@r0		
    852a:	00 00       	bra	@r0		
    852c:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    8530:	80 00 00 00 	bra	#0x00000	
    8534:	00 00       	bra	@r0		
    8536:	00 00       	bra	@r0		
    8538:	8a 03 00 00 	mova	#0x30000,r10	
    853c:	80 00 00 00 	bra	#0x00000	
    8540:	00 00       	bra	@r0		
    8542:	00 00       	bra	@r0		
    8544:	ae 03 00 00 	adda	#0x30000,r14	
    8548:	80 00 00 00 	bra	#0x00000	
    854c:	00 00       	bra	@r0		
    854e:	00 00       	bra	@r0		
    8550:	d7 03       	tsta	r7		
    8552:	00 00       	bra	@r0		
    8554:	80 00 00 00 	bra	#0x00000	
    8558:	00 00       	bra	@r0		
    855a:	00 00       	bra	@r0		
    855c:	3d 4f       	mov	@r15+,	r13	
    855e:	00 00       	bra	@r0		
    8560:	82 00 00 00 	mova	#0x00000,r2	
    8564:	36 5e       	add	@r14+,	r6	
    8566:	00 00       	bra	@r0		
    8568:	00 4b       	br	r11		
    856a:	00 00       	bra	@r0		
    856c:	c2 00       	mova	r0,	r2	
    856e:	00 00       	bra	@r0		
    8570:	e5 1d       	.word	0x1de5;	????	
    8572:	00 00       	bra	@r0		
    8574:	7a 4b       	mov.b	@r11+,	r10	
    8576:	00 00       	bra	@r0		
    8578:	c2 00       	mova	r0,	r2	
    857a:	00 00       	bra	@r0		
    857c:	00 00       	bra	@r0		
    857e:	00 00       	bra	@r0		
    8580:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x08648
    8584:	c2 00 
    8586:	00 00       	bra	@r0		
    8588:	00 00       	bra	@r0		
    858a:	00 00       	bra	@r0		
    858c:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    8590:	c2 00       	mova	r0,	r2	
    8592:	00 00       	bra	@r0		
    8594:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    8598:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    859c:	c2 00       	mova	r0,	r2	
    859e:	00 00       	bra	@r0		
    85a0:	00 00       	bra	@r0		
    85a2:	00 00       	bra	@r0		
    85a4:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    85a8:	c2 00       	mova	r0,	r2	
    85aa:	00 00       	bra	@r0		
    85ac:	00 00       	bra	@r0		
    85ae:	00 00       	bra	@r0		
    85b0:	46 4f       	mov.b	r15,	r6	
    85b2:	00 00       	bra	@r0		
    85b4:	82 00 00 00 	mova	#0x00000,r2	
    85b8:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    85bc:	56 4f 00 00 	mov.b	0(r15),	r6	;0x0000(r15)
    85c0:	80 00 5a 00 	bra	#0x0005a	
    85c4:	00 00       	bra	@r0		
    85c6:	00 00       	bra	@r0		
    85c8:	6b 4f       	mov.b	@r15,	r11	
    85ca:	00 00       	bra	@r0		
    85cc:	80 00 5b 00 	bra	#0x0005b	
    85d0:	00 00       	bra	@r0		
    85d2:	00 00       	bra	@r0		
    85d4:	80 4f 00 00 	mov	r15,	0x0000	;PC rel. 0x085d8
    85d8:	80 00 5d 00 	bra	#0x0005d	
    85dc:	00 00       	bra	@r0		
    85de:	00 00       	bra	@r0		
    85e0:	94 4f 00 00 	mov	0(r15),	128(r4)	;0x0000(r15), 0x0080(r4)
    85e4:	80 00 
    85e6:	5e 00       	rrcm	#1,	r14	
    85e8:	00 00       	bra	@r0		
    85ea:	00 00       	bra	@r0		
    85ec:	a8 4f 00 00 	mov	@r15,	0(r8)	;0x0000(r8)
    85f0:	80 00 5f 00 	bra	#0x0005f	
    85f4:	00 00       	bra	@r0		
    85f6:	00 00       	bra	@r0		
    85f8:	bc 4f 00 00 	mov	@r15+,	0(r12)	;0x0000(r12)
    85fc:	80 00 66 00 	bra	#0x00066	
    8600:	00 00       	bra	@r0		
    8602:	00 00       	bra	@r0		
    8604:	d1 4f 00 00 	mov.b	0(r15),	128(r1)	;0x0000(r15), 0x0080(r1)
    8608:	80 00 
    860a:	67 00 00 00 	mova	r0,	&0x70000
    860e:	00 00       	bra	@r0		
    8610:	e6 4f 00 00 	mov.b	@r15,	0(r6)	;0x0000(r6)
    8614:	80 00 68 00 	bra	#0x00068	
    8618:	00 00       	bra	@r0		
    861a:	00 00       	bra	@r0		
    861c:	fb 4f 00 00 	mov.b	@r15+,	0(r11)	;0x0000(r11)
    8620:	80 00 82 00 	bra	#0x00082	
    8624:	00 00       	bra	@r0		
    8626:	00 00       	bra	@r0		
    8628:	11 50 00 00 	add	0x0000,	r1	;PC rel. 0x0862c
    862c:	80 00 83 00 	bra	#0x00083	
    8630:	00 00       	bra	@r0		
    8632:	00 00       	bra	@r0		
    8634:	2c 50       	add	@r0,	r12	
    8636:	00 00       	bra	@r0		
    8638:	80 00 84 00 	bra	#0x00084	
    863c:	00 00       	bra	@r0		
    863e:	00 00       	bra	@r0		
    8640:	43 50       	.word	0x5043;	????	Illegal as 2-op instr
    8642:	00 00       	bra	@r0		
    8644:	80 00 85 00 	bra	#0x00085	
    8648:	00 00       	bra	@r0		
    864a:	00 00       	bra	@r0		
    864c:	59 50 00 00 	add.b	0x0000,	r9	;PC rel. 0x08650
    8650:	80 00 00 00 	bra	#0x00000	
    8654:	00 00       	bra	@r0		
    8656:	00 00       	bra	@r0		
    8658:	ad 50 00 00 	add	@r0,	0(r13)	;0x0000(r13)
    865c:	80 00 00 01 	bra	#0x00100	
    8660:	00 00       	bra	@r0		
    8662:	00 00       	bra	@r0		
    8664:	ca 50 00 00 	add.b	r0,	0(r10)	;0x0000(r10)
    8668:	80 00 13 01 	bra	#0x00113	
    866c:	00 00       	bra	@r0		
    866e:	00 00       	bra	@r0		
    8670:	92 51 00 00 	add	0(r1),	&0x0080	;0x0000(r1)
    8674:	80 00 
    8676:	3a 01 00 00 	mova	0(r1),	r10	;0x0000(r1)
    867a:	00 00       	bra	@r0		
    867c:	00 00       	bra	@r0		
    867e:	00 00       	bra	@r0		
    8680:	a2 00 00 00 	adda	#0x00000,r2	
    8684:	00 00       	bra	@r0		
    8686:	00 00       	bra	@r0		
    8688:	23 52       	.word	0x5223;	????	Illegal as 2-op instr
    868a:	00 00       	bra	@r0		
    868c:	24 00 97 01 	mova	&0x00197,r4	
    8690:	f6 52 00 00 	add.b	#8,	0(r6)	;r2 As==11, 0x0000(r6)
    8694:	3f 52       	add	#8,	r15	;r2 As==11
    8696:	00 00       	bra	@r0		
    8698:	40 00       	rrcm.a	#1,	r0	
    869a:	94 01 0b 00 	cmpa	#0x1000b,r4	
    869e:	00 00       	bra	@r0		
    86a0:	48 52       	add.b	r2,	r8	
    86a2:	00 00       	bra	@r0		
    86a4:	40 00       	rrcm.a	#1,	r0	
    86a6:	95 01 0a 00 	cmpa	#0x1000a,r5	
    86aa:	00 00       	bra	@r0		
    86ac:	51 52 00 00 	add.b	&0x0000,r1	
    86b0:	40 00       	rrcm.a	#1,	r0	
    86b2:	96 01 09 00 	cmpa	#0x10009,r6	
    86b6:	00 00       	bra	@r0		
    86b8:	00 00       	bra	@r0		
    86ba:	00 00       	bra	@r0		
    86bc:	44 00       	rrcm.a	#1,	r4	
    86be:	97 01 00 00 	cmpa	#0x10000,r7	
    86c2:	00 00       	bra	@r0		
    86c4:	00 00       	bra	@r0		
    86c6:	00 00       	bra	@r0		
    86c8:	44 00       	rrcm.a	#1,	r4	
    86ca:	9a 00 14 00 	cmpa	#0x00014,r10	
    86ce:	00 00       	bra	@r0		
    86d0:	00 00       	bra	@r0		
    86d2:	00 00       	bra	@r0		
    86d4:	44 00       	rrcm.a	#1,	r4	
    86d6:	99 00 1e 00 	cmpa	#0x0001e,r9	
    86da:	00 00       	bra	@r0		
    86dc:	00 00       	bra	@r0		
    86de:	00 00       	bra	@r0		
    86e0:	44 00       	rrcm.a	#1,	r4	
    86e2:	9a 00 22 00 	cmpa	#0x00022,r10	
    86e6:	00 00       	bra	@r0		
    86e8:	00 00       	bra	@r0		
    86ea:	00 00       	bra	@r0		
    86ec:	44 00       	rrcm.a	#1,	r4	
    86ee:	99 00 2c 00 	cmpa	#0x0002c,r9	
    86f2:	00 00       	bra	@r0		
    86f4:	00 00       	bra	@r0		
    86f6:	00 00       	bra	@r0		
    86f8:	44 00       	rrcm.a	#1,	r4	
    86fa:	a1 00 30 00 	adda	#0x00030,r1	
    86fe:	00 00       	bra	@r0		
    8700:	00 00       	bra	@r0		
    8702:	00 00       	bra	@r0		
    8704:	44 00       	rrcm.a	#1,	r4	
    8706:	a0 00 36 00 	adda	#0x00036,r0	
    870a:	00 00       	bra	@r0		
    870c:	00 00       	bra	@r0		
    870e:	00 00       	bra	@r0		
    8710:	44 00       	rrcm.a	#1,	r4	
    8712:	a1 00 3a 00 	adda	#0x0003a,r1	
    8716:	00 00       	bra	@r0		
    8718:	00 00       	bra	@r0		
    871a:	00 00       	bra	@r0		
    871c:	44 00       	rrcm.a	#1,	r4	
    871e:	a0 00 40 00 	adda	#0x00040,r0	
    8722:	00 00       	bra	@r0		
    8724:	00 00       	bra	@r0		
    8726:	00 00       	bra	@r0		
    8728:	44 00       	rrcm.a	#1,	r4	
    872a:	90 00 4c 00 	cmpa	#0x0004c,r0	
    872e:	00 00       	bra	@r0		
    8730:	00 00       	bra	@r0		
    8732:	00 00       	bra	@r0		
    8734:	44 00       	rrcm.a	#1,	r4	
    8736:	8d 00 50 00 	mova	#0x00050,r13	
    873a:	00 00       	bra	@r0		
    873c:	00 00       	bra	@r0		
    873e:	00 00       	bra	@r0		
    8740:	44 00       	rrcm.a	#1,	r4	
    8742:	bb 01 52 00 	suba	#0x10052,r11	
    8746:	00 00       	bra	@r0		
    8748:	00 00       	bra	@r0		
    874a:	00 00       	bra	@r0		
    874c:	44 00       	rrcm.a	#1,	r4	
    874e:	a1 00 5a 00 	adda	#0x0005a,r1	
    8752:	00 00       	bra	@r0		
    8754:	00 00       	bra	@r0		
    8756:	00 00       	bra	@r0		
    8758:	44 00       	rrcm.a	#1,	r4	
    875a:	a0 00 60 00 	adda	#0x00060,r0	
    875e:	00 00       	bra	@r0		
    8760:	00 00       	bra	@r0		
    8762:	00 00       	bra	@r0		
    8764:	44 00       	rrcm.a	#1,	r4	
    8766:	aa 00 64 00 	adda	#0x00064,r10	
    876a:	00 00       	bra	@r0		
    876c:	00 00       	bra	@r0		
    876e:	00 00       	bra	@r0		
    8770:	44 00       	rrcm.a	#1,	r4	
    8772:	a9 00 6a 00 	adda	#0x0006a,r9	
    8776:	00 00       	bra	@r0		
    8778:	00 00       	bra	@r0		
    877a:	00 00       	bra	@r0		
    877c:	44 00       	rrcm.a	#1,	r4	
    877e:	aa 00 6e 00 	adda	#0x0006e,r10	
    8782:	00 00       	bra	@r0		
    8784:	00 00       	bra	@r0		
    8786:	00 00       	bra	@r0		
    8788:	44 00       	rrcm.a	#1,	r4	
    878a:	a9 00 74 00 	adda	#0x00074,r9	
    878e:	00 00       	bra	@r0		
    8790:	00 00       	bra	@r0		
    8792:	00 00       	bra	@r0		
    8794:	44 00       	rrcm.a	#1,	r4	
    8796:	b7 01 78 00 	suba	#0x10078,r7	
    879a:	00 00       	bra	@r0		
    879c:	00 00       	bra	@r0		
    879e:	00 00       	bra	@r0		
    87a0:	44 00       	rrcm.a	#1,	r4	
    87a2:	b8 01 8a 00 	suba	#0x1008a,r8	
    87a6:	00 00       	bra	@r0		
    87a8:	00 00       	bra	@r0		
    87aa:	00 00       	bra	@r0		
    87ac:	44 00       	rrcm.a	#1,	r4	
    87ae:	1b 02       	mova	#8,	r11	;r2 As==11
    87b0:	96 00 00 00 	cmpa	#0x00000,r6	
    87b4:	00 00       	bra	@r0		
    87b6:	00 00       	bra	@r0		
    87b8:	44 00       	rrcm.a	#1,	r4	
    87ba:	aa 00 9e 00 	adda	#0x0009e,r10	
    87be:	00 00       	bra	@r0		
    87c0:	00 00       	bra	@r0		
    87c2:	00 00       	bra	@r0		
    87c4:	44 00       	rrcm.a	#1,	r4	
    87c6:	a9 00 a4 00 	adda	#0x000a4,r9	
    87ca:	00 00       	bra	@r0		
    87cc:	00 00       	bra	@r0		
    87ce:	00 00       	bra	@r0		
    87d0:	44 00       	rrcm.a	#1,	r4	
    87d2:	bf 01 a8 00 	suba	#0x100a8,r15	
    87d6:	00 00       	bra	@r0		
    87d8:	00 00       	bra	@r0		
    87da:	00 00       	bra	@r0		
    87dc:	44 00       	rrcm.a	#1,	r4	
    87de:	c7 01       	mova	r1,	r7	
    87e0:	ac 00 00 00 	adda	#0x00000,r12	
    87e4:	00 00       	bra	@r0		
    87e6:	00 00       	bra	@r0		
    87e8:	44 00       	rrcm.a	#1,	r4	
    87ea:	c8 01       	mova	r1,	r8	
    87ec:	b0 00 00 00 	suba	#0x00000,r0	
    87f0:	00 00       	bra	@r0		
    87f2:	00 00       	bra	@r0		
    87f4:	44 00       	rrcm.a	#1,	r4	
    87f6:	c9 01       	mova	r1,	r9	
    87f8:	b4 00 00 00 	suba	#0x00000,r4	
    87fc:	00 00       	bra	@r0		
    87fe:	00 00       	bra	@r0		
    8800:	44 00       	rrcm.a	#1,	r4	
    8802:	ca 01       	mova	r1,	r10	
    8804:	bc 00 00 00 	suba	#0x00000,r12	
    8808:	00 00       	bra	@r0		
    880a:	00 00       	bra	@r0		
    880c:	44 00       	rrcm.a	#1,	r4	
    880e:	cc 01       	mova	r1,	r12	
    8810:	c4 00       	mova	r0,	r4	
    8812:	00 00       	bra	@r0		
    8814:	00 00       	bra	@r0		
    8816:	00 00       	bra	@r0		
    8818:	44 00       	rrcm.a	#1,	r4	
    881a:	ce 01       	mova	r1,	r14	
    881c:	c8 00       	mova	r0,	r8	
    881e:	00 00       	bra	@r0		
    8820:	00 00       	bra	@r0		
    8822:	00 00       	bra	@r0		
    8824:	44 00       	rrcm.a	#1,	r4	
    8826:	d0 01       	cmpa	r1,	r0	
    8828:	ca 00       	mova	r0,	r10	
    882a:	00 00       	bra	@r0		
    882c:	00 00       	bra	@r0		
    882e:	00 00       	bra	@r0		
    8830:	44 00       	rrcm.a	#1,	r4	
    8832:	d3 01       	.word	0x01d3;	????	Illegal as address instr
    8834:	d0 00       	cmpa	r0,	r0	
    8836:	00 00       	bra	@r0		
    8838:	00 00       	bra	@r0		
    883a:	00 00       	bra	@r0		
    883c:	44 00       	rrcm.a	#1,	r4	
    883e:	d5 01       	cmpa	r1,	r5	
    8840:	da 00       	cmpa	r0,	r10	
    8842:	00 00       	bra	@r0		
    8844:	00 00       	bra	@r0		
    8846:	00 00       	bra	@r0		
    8848:	44 00       	rrcm.a	#1,	r4	
    884a:	d6 01       	cmpa	r1,	r6	
    884c:	dc 00       	cmpa	r0,	r12	
    884e:	00 00       	bra	@r0		
    8850:	00 00       	bra	@r0		
    8852:	00 00       	bra	@r0		
    8854:	44 00       	rrcm.a	#1,	r4	
    8856:	d8 01       	cmpa	r1,	r8	
    8858:	f4 00       	suba	r0,	r4	
    885a:	00 00       	bra	@r0		
    885c:	00 00       	bra	@r0		
    885e:	00 00       	bra	@r0		
    8860:	44 00       	rrcm.a	#1,	r4	
    8862:	da 01       	cmpa	r1,	r10	
    8864:	f8 00       	suba	r0,	r8	
    8866:	00 00       	bra	@r0		
    8868:	00 00       	bra	@r0		
    886a:	00 00       	bra	@r0		
    886c:	44 00       	rrcm.a	#1,	r4	
    886e:	db 01       	cmpa	r1,	r11	
    8870:	fa 00       	suba	r0,	r10	
    8872:	00 00       	bra	@r0		
    8874:	00 00       	bra	@r0		
    8876:	00 00       	bra	@r0		
    8878:	44 00       	rrcm.a	#1,	r4	
    887a:	ee 01       	adda	r1,	r14	
    887c:	10 01       	reta			
    887e:	00 00       	bra	@r0		
    8880:	00 00       	bra	@r0		
    8882:	00 00       	bra	@r0		
    8884:	44 00       	rrcm.a	#1,	r4	
    8886:	f0 01       	suba	r1,	r0	
    8888:	1a 01       	mova	@r1+,	r10	
    888a:	00 00       	bra	@r0		
    888c:	00 00       	bra	@r0		
    888e:	00 00       	bra	@r0		
    8890:	44 00       	rrcm.a	#1,	r4	
    8892:	f2 01       	suba	r1,	r2	
    8894:	1e 01       	mova	@r1+,	r14	
    8896:	00 00       	bra	@r0		
    8898:	00 00       	bra	@r0		
    889a:	00 00       	bra	@r0		
    889c:	44 00       	rrcm.a	#1,	r4	
    889e:	f8 01       	suba	r1,	r8	
    88a0:	26 01 00 00 	mova	&0x10000,r6	
    88a4:	00 00       	bra	@r0		
    88a6:	00 00       	bra	@r0		
    88a8:	44 00       	rrcm.a	#1,	r4	
    88aa:	fa 01       	suba	r1,	r10	
    88ac:	2a 01 00 00 	mova	&0x10000,r10	
    88b0:	00 00       	bra	@r0		
    88b2:	00 00       	bra	@r0		
    88b4:	44 00       	rrcm.a	#1,	r4	
    88b6:	fb 01       	suba	r1,	r11	
    88b8:	2e 01 00 00 	mova	&0x10000,r14	
    88bc:	00 00       	bra	@r0		
    88be:	00 00       	bra	@r0		
    88c0:	44 00       	rrcm.a	#1,	r4	
    88c2:	06 02       	mova	#4,	r6	;r2 As==10
    88c4:	3a 01 00 00 	mova	0(r1),	r10	;0x0000(r1)
    88c8:	00 00       	bra	@r0		
    88ca:	00 00       	bra	@r0		
    88cc:	44 00       	rrcm.a	#1,	r4	
    88ce:	08 02       	mova	#4,	r8	;r2 As==10
    88d0:	52 01       	rram	#1,	r2	
    88d2:	00 00       	bra	@r0		
    88d4:	00 00       	bra	@r0		
    88d6:	00 00       	bra	@r0		
    88d8:	44 00       	rrcm.a	#1,	r4	
    88da:	09 02       	mova	#4,	r9	;r2 As==10
    88dc:	62 01 00 00 	mova	r1,	&0x20000
    88e0:	00 00       	bra	@r0		
    88e2:	00 00       	bra	@r0		
    88e4:	44 00       	rrcm.a	#1,	r4	
    88e6:	12 02       	mova	#8,	r2	;r2 As==11
    88e8:	84 01 00 00 	mova	#0x10000,r4	
    88ec:	00 00       	bra	@r0		
    88ee:	00 00       	bra	@r0		
    88f0:	44 00       	rrcm.a	#1,	r4	
    88f2:	16 02       	mova	#8,	r6	;r2 As==11
    88f4:	8a 01 00 00 	mova	#0x10000,r10	
    88f8:	00 00       	bra	@r0		
    88fa:	00 00       	bra	@r0		
    88fc:	44 00       	rrcm.a	#1,	r4	
    88fe:	18 02       	mova	#8,	r8	;r2 As==11
    8900:	90 01 00 00 	cmpa	#0x10000,r0	
    8904:	00 00       	bra	@r0		
    8906:	00 00       	bra	@r0		
    8908:	44 00       	rrcm.a	#1,	r4	
    890a:	19 02       	mova	#8,	r9	;r2 As==11
    890c:	aa 01 00 00 	adda	#0x10000,r10	
    8910:	00 00       	bra	@r0		
    8912:	00 00       	bra	@r0		
    8914:	44 00       	rrcm.a	#1,	r4	
    8916:	00 02       	bra	#4		;r2 As==10
    8918:	b0 01 00 00 	suba	#0x10000,r0	
    891c:	00 00       	bra	@r0		
    891e:	00 00       	bra	@r0		
    8920:	44 00       	rrcm.a	#1,	r4	
    8922:	01 02       	mova	#4,	r1	;r2 As==10
    8924:	b4 01 00 00 	suba	#0x10000,r4	
    8928:	00 00       	bra	@r0		
    892a:	00 00       	bra	@r0		
    892c:	44 00       	rrcm.a	#1,	r4	
    892e:	02 02       	mova	#4,	r2	;r2 As==10
    8930:	b8 01 00 00 	suba	#0x10000,r8	
    8934:	00 00       	bra	@r0		
    8936:	00 00       	bra	@r0		
    8938:	44 00       	rrcm.a	#1,	r4	
    893a:	f6 01       	suba	r1,	r6	
    893c:	c2 01       	mova	r1,	r2	
    893e:	00 00       	bra	@r0		
    8940:	00 00       	bra	@r0		
    8942:	00 00       	bra	@r0		
    8944:	44 00       	rrcm.a	#1,	r4	
    8946:	0e 02       	mova	#4,	r14	;r2 As==10
    8948:	cc 01       	mova	r1,	r12	
    894a:	00 00       	bra	@r0		
    894c:	00 00       	bra	@r0		
    894e:	00 00       	bra	@r0		
    8950:	44 00       	rrcm.a	#1,	r4	
    8952:	0f 02       	mova	#4,	r15	;r2 As==10
    8954:	d2 01       	cmpa	r1,	r2	
    8956:	00 00       	bra	@r0		
    8958:	00 00       	bra	@r0		
    895a:	00 00       	bra	@r0		
    895c:	44 00       	rrcm.a	#1,	r4	
    895e:	10 02       	bra	#8		;r2 As==11
    8960:	d6 01       	cmpa	r1,	r6	
    8962:	00 00       	bra	@r0		
    8964:	00 00       	bra	@r0		
    8966:	00 00       	bra	@r0		
    8968:	44 00       	rrcm.a	#1,	r4	
    896a:	e1 01       	adda	r1,	r1	
    896c:	e8 01       	adda	r1,	r8	
    896e:	00 00       	bra	@r0		
    8970:	00 00       	bra	@r0		
    8972:	00 00       	bra	@r0		
    8974:	44 00       	rrcm.a	#1,	r4	
    8976:	e4 01       	adda	r1,	r4	
    8978:	ec 01       	adda	r1,	r12	
    897a:	00 00       	bra	@r0		
    897c:	00 00       	bra	@r0		
    897e:	00 00       	bra	@r0		
    8980:	44 00       	rrcm.a	#1,	r4	
    8982:	e8 01       	adda	r1,	r8	
    8984:	f2 01       	suba	r1,	r2	
    8986:	00 00       	bra	@r0		
    8988:	00 00       	bra	@r0		
    898a:	00 00       	bra	@r0		
    898c:	44 00       	rrcm.a	#1,	r4	
    898e:	e9 01       	adda	r1,	r9	
    8990:	f4 01       	suba	r1,	r4	
    8992:	00 00       	bra	@r0		
    8994:	00 00       	bra	@r0		
    8996:	00 00       	bra	@r0		
    8998:	44 00       	rrcm.a	#1,	r4	
    899a:	cf 01       	mova	r1,	r15	
    899c:	fa 01       	suba	r1,	r10	
    899e:	00 00       	bra	@r0		
    89a0:	00 00       	bra	@r0		
    89a2:	00 00       	bra	@r0		
    89a4:	44 00       	rrcm.a	#1,	r4	
    89a6:	1d 02       	mova	#8,	r13	;r2 As==11
    89a8:	10 02       	bra	#8		;r2 As==11
    89aa:	00 00       	bra	@r0		
    89ac:	5c 52 00 00 	add.b	&0x0000,r12	
    89b0:	40 00       	rrcm.a	#1,	r0	
    89b2:	98 01 0e 00 	cmpa	#0x1000e,r8	
    89b6:	00 00       	bra	@r0		
    89b8:	6e 52       	add.b	#4,	r14	;r2 As==10
    89ba:	00 00       	bra	@r0		
    89bc:	40 00       	rrcm.a	#1,	r0	
    89be:	9b 01 05 00 	cmpa	#0x10005,r11	
    89c2:	00 00       	bra	@r0		
    89c4:	82 52 00 00 	add	r2,	&0x0000	
    89c8:	40 00       	rrcm.a	#1,	r0	
    89ca:	9c 01 06 00 	cmpa	#0x10006,r12	
    89ce:	00 00       	bra	@r0		
    89d0:	96 52 00 00 	add	&0x0000,64(r6)	;0x0040(r6)
    89d4:	40 00 
    89d6:	9d 01 0c 00 	cmpa	#0x1000c,r13	
    89da:	00 00       	bra	@r0		
    89dc:	a8 52 00 00 	add	#4,	0(r8)	;r2 As==10, 0x0000(r8)
    89e0:	40 00       	rrcm.a	#1,	r0	
    89e2:	9e 01 07 00 	cmpa	#0x10007,r14	
    89e6:	00 00       	bra	@r0		
    89e8:	00 00       	bra	@r0		
    89ea:	00 00       	bra	@r0		
    89ec:	c0 00       	bra	r0		
    89ee:	00 00       	bra	@r0		
    89f0:	14 00       	mova	#0x00000,r4	
    89f2:	00 00       	bra	@r0		
    89f4:	ba 52 00 00 	add	#8,	0(r10)	;r2 As==11, 0x0000(r10)
    89f8:	40 00       	rrcm.a	#1,	r0	
    89fa:	c5 01       	mova	r1,	r5	
    89fc:	0f 00       	mova	@r0,	r15	
    89fe:	00 00       	bra	@r0		
    8a00:	00 00       	bra	@r0		
    8a02:	00 00       	bra	@r0		
    8a04:	c0 00       	bra	r0		
    8a06:	00 00       	bra	@r0		
    8a08:	ac 00 00 00 	adda	#0x00000,r12	
    8a0c:	00 00       	bra	@r0		
    8a0e:	00 00       	bra	@r0		
    8a10:	e0 00       	adda	r0,	r0	
    8a12:	00 00       	bra	@r0		
    8a14:	10 01       	reta			
    8a16:	00 00       	bra	@r0		
    8a18:	ba 52 00 00 	add	#8,	0(r10)	;r2 As==11, 0x0000(r10)
    8a1c:	40 00       	rrcm.a	#1,	r0	
    8a1e:	c5 01       	mova	r1,	r5	
    8a20:	0f 00       	mova	@r0,	r15	
    8a22:	00 00       	bra	@r0		
    8a24:	00 00       	bra	@r0		
    8a26:	00 00       	bra	@r0		
    8a28:	c0 00       	bra	r0		
    8a2a:	00 00       	bra	@r0		
    8a2c:	e8 01       	adda	r1,	r8	
    8a2e:	00 00       	bra	@r0		
    8a30:	00 00       	bra	@r0		
    8a32:	00 00       	bra	@r0		
    8a34:	e0 00       	adda	r0,	r0	
    8a36:	00 00       	bra	@r0		
    8a38:	00 02       	bra	#4		;r2 As==10
    8a3a:	00 00       	bra	@r0		
    8a3c:	00 00       	bra	@r0		
    8a3e:	00 00       	bra	@r0		
    8a40:	e0 00       	adda	r0,	r0	
    8a42:	00 00       	bra	@r0		
    8a44:	10 02       	bra	#8		;r2 As==11
    8a46:	00 00       	bra	@r0		
    8a48:	00 00       	bra	@r0		
    8a4a:	00 00       	bra	@r0		
    8a4c:	24 00 00 00 	mova	&0x00000,r4	
    8a50:	22 02 00 00 	mova	&0x20000,r2	
    8a54:	c6 52 00 00 	add.b	r2,	0(r6)	;0x0000(r6)
    8a58:	24 00 21 02 	mova	&0x00221,r4	
    8a5c:	18 55 00 00 	add	0(r5),	r8	;0x0000(r5)
    8a60:	d7 52 00 00 	add.b	&0x0000,64(r7)	;0x0040(r7)
    8a64:	40 00 
    8a66:	20 02 0e 00 	bra	&0x2000e	
    8a6a:	00 00       	bra	@r0		
    8a6c:	e5 52 00 00 	add.b	#4,	0(r5)	;r2 As==10, 0x0000(r5)
    8a70:	40 00       	rrcm.a	#1,	r0	
    8a72:	20 02 0c 00 	bra	&0x2000c	
    8a76:	00 00       	bra	@r0		
    8a78:	00 00       	bra	@r0		
    8a7a:	00 00       	bra	@r0		
    8a7c:	44 00       	rrcm.a	#1,	r4	
    8a7e:	21 02 00 00 	mova	&0x20000,r1	
    8a82:	00 00       	bra	@r0		
    8a84:	00 00       	bra	@r0		
    8a86:	00 00       	bra	@r0		
    8a88:	44 00       	rrcm.a	#1,	r4	
    8a8a:	28 02 06 00 	mova	&0x20006,r8	
    8a8e:	00 00       	bra	@r0		
    8a90:	00 00       	bra	@r0		
    8a92:	00 00       	bra	@r0		
    8a94:	44 00       	rrcm.a	#1,	r4	
    8a96:	29 02 0e 00 	mova	&0x2000e,r9	
    8a9a:	00 00       	bra	@r0		
    8a9c:	00 00       	bra	@r0		
    8a9e:	00 00       	bra	@r0		
    8aa0:	44 00       	rrcm.a	#1,	r4	
    8aa2:	2b 02 16 00 	mova	&0x20016,r11	
    8aa6:	00 00       	bra	@r0		
    8aa8:	00 00       	bra	@r0		
    8aaa:	00 00       	bra	@r0		
    8aac:	44 00       	rrcm.a	#1,	r4	
    8aae:	2c 02 22 00 	mova	&0x20022,r12	
    8ab2:	00 00       	bra	@r0		
    8ab4:	00 00       	bra	@r0		
    8ab6:	00 00       	bra	@r0		
    8ab8:	44 00       	rrcm.a	#1,	r4	
    8aba:	2e 02 32 00 	mova	&0x20032,r14	
    8abe:	00 00       	bra	@r0		
    8ac0:	00 00       	bra	@r0		
    8ac2:	00 00       	bra	@r0		
    8ac4:	44 00       	rrcm.a	#1,	r4	
    8ac6:	30 02 40 00 	bra	&0x0040	
    8aca:	00 00       	bra	@r0		
    8acc:	00 00       	bra	@r0		
    8ace:	00 00       	bra	@r0		
    8ad0:	44 00       	rrcm.a	#1,	r4	
    8ad2:	31 02 44 00 	mova	&0x0044,r1	
    8ad6:	00 00       	bra	@r0		
    8ad8:	f3 52       	add.b	#8,	#1	;r2 As==11, r3 As==01
    8ada:	00 00       	bra	@r0		
    8adc:	80 00 22 02 	bra	#0x00222	
    8ae0:	00 00       	bra	@r0		
    8ae2:	00 00       	bra	@r0		
    8ae4:	fc 52 00 00 	add.b	#8,	0(r12)	;r2 As==11, 0x0000(r12)
    8ae8:	80 00 23 02 	bra	#0x00223	
    8aec:	08 00       	mova	@r0,	r8	
    8aee:	00 00       	bra	@r0		
    8af0:	05 53       	add	#0,	r5	;r3 As==00
    8af2:	00 00       	bra	@r0		
    8af4:	80 00 24 02 	bra	#0x00224	
    8af8:	10 00       	bra	#0x00000	
    8afa:	00 00       	bra	@r0		
    8afc:	10 53       	inc	r0		
    8afe:	00 00       	bra	@r0		
    8b00:	40 00       	rrcm.a	#1,	r0	
    8b02:	25 02 0f 00 	mova	&0x2000f,r5	
    8b06:	00 00       	bra	@r0		
    8b08:	1b 53       	inc	r11		
    8b0a:	00 00       	bra	@r0		
    8b0c:	80 00 26 02 	bra	#0x00226	
    8b10:	18 00       	mova	#0x00000,r8	
    8b12:	00 00       	bra	@r0		
    8b14:	25 53       	incd	r5		
    8b16:	00 00       	bra	@r0		
    8b18:	80 00 26 02 	bra	#0x00226	
    8b1c:	1c 00       	mova	#0x00000,r12	
    8b1e:	00 00       	bra	@r0		
    8b20:	00 00       	bra	@r0		
    8b22:	00 00       	bra	@r0		
    8b24:	c0 00       	bra	r0		
    8b26:	00 00       	bra	@r0		
    8b28:	06 00       	mova	@r0,	r6	
    8b2a:	00 00       	bra	@r0		
    8b2c:	00 00       	bra	@r0		
    8b2e:	00 00       	bra	@r0		
    8b30:	e0 00       	adda	r0,	r0	
    8b32:	00 00       	bra	@r0		
    8b34:	44 00       	rrcm.a	#1,	r4	
    8b36:	00 00       	bra	@r0		
    8b38:	00 00       	bra	@r0		
    8b3a:	00 00       	bra	@r0		
    8b3c:	24 00 00 00 	mova	&0x00000,r4	
    8b40:	4c 00       	rrcm.a	#1,	r12	
    8b42:	00 00       	bra	@r0		
    8b44:	2f 53       	incd	r15		
    8b46:	00 00       	bra	@r0		
    8b48:	24 00 35 02 	mova	&0x00235,r4	
    8b4c:	64 55       	add.b	@r5,	r4	
    8b4e:	00 00       	bra	@r0		
    8b50:	d7 52 00 00 	add.b	&0x0000,64(r7)	;0x0040(r7)
    8b54:	40 00 
    8b56:	34 02 0e 00 	mova	&0x000e,r4	
    8b5a:	00 00       	bra	@r0		
    8b5c:	e5 52 00 00 	add.b	#4,	0(r5)	;r2 As==10, 0x0000(r5)
    8b60:	40 00       	rrcm.a	#1,	r0	
    8b62:	34 02 0c 00 	mova	&0x000c,r4	
    8b66:	00 00       	bra	@r0		
    8b68:	00 00       	bra	@r0		
    8b6a:	00 00       	bra	@r0		
    8b6c:	44 00       	rrcm.a	#1,	r4	
    8b6e:	35 02 00 00 	mova	&0x0000,r5	
    8b72:	00 00       	bra	@r0		
    8b74:	00 00       	bra	@r0		
    8b76:	00 00       	bra	@r0		
    8b78:	44 00       	rrcm.a	#1,	r4	
    8b7a:	3c 02 06 00 	mova	&0x0006,r12	
    8b7e:	00 00       	bra	@r0		
    8b80:	00 00       	bra	@r0		
    8b82:	00 00       	bra	@r0		
    8b84:	44 00       	rrcm.a	#1,	r4	
    8b86:	3d 02 0e 00 	mova	&0x000e,r13	
    8b8a:	00 00       	bra	@r0		
    8b8c:	00 00       	bra	@r0		
    8b8e:	00 00       	bra	@r0		
    8b90:	44 00       	rrcm.a	#1,	r4	
    8b92:	3f 02 16 00 	mova	&0x0016,r15	
    8b96:	00 00       	bra	@r0		
    8b98:	00 00       	bra	@r0		
    8b9a:	00 00       	bra	@r0		
    8b9c:	44 00       	rrcm.a	#1,	r4	
    8b9e:	40 02       	rlam.a	#1,	r0	
    8ba0:	22 00 00 00 	mova	&0x00000,r2	
    8ba4:	00 00       	bra	@r0		
    8ba6:	00 00       	bra	@r0		
    8ba8:	44 00       	rrcm.a	#1,	r4	
    8baa:	42 02       	rlam.a	#1,	r2	
    8bac:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x08bae
    8bb0:	00 00       	bra	@r0		
    8bb2:	00 00       	bra	@r0		
    8bb4:	44 00       	rrcm.a	#1,	r4	
    8bb6:	44 02       	rlam.a	#1,	r4	
    8bb8:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x08bba
    8bbc:	00 00       	bra	@r0		
    8bbe:	00 00       	bra	@r0		
    8bc0:	44 00       	rrcm.a	#1,	r4	
    8bc2:	46 02       	rlam.a	#1,	r6	
    8bc4:	44 00       	rrcm.a	#1,	r4	
    8bc6:	00 00       	bra	@r0		
    8bc8:	00 00       	bra	@r0		
    8bca:	00 00       	bra	@r0		
    8bcc:	44 00       	rrcm.a	#1,	r4	
    8bce:	47 02       	rlam.a	#1,	r7	
    8bd0:	48 00       	rrcm.a	#1,	r8	
    8bd2:	00 00       	bra	@r0		
    8bd4:	f3 52       	add.b	#8,	#1	;r2 As==11, r3 As==01
    8bd6:	00 00       	bra	@r0		
    8bd8:	80 00 36 02 	bra	#0x00236	
    8bdc:	00 00       	bra	@r0		
    8bde:	00 00       	bra	@r0		
    8be0:	fc 52 00 00 	add.b	#8,	0(r12)	;r2 As==11, 0x0000(r12)
    8be4:	80 00 37 02 	bra	#0x00237	
    8be8:	08 00       	mova	@r0,	r8	
    8bea:	00 00       	bra	@r0		
    8bec:	05 53       	add	#0,	r5	;r3 As==00
    8bee:	00 00       	bra	@r0		
    8bf0:	80 00 38 02 	bra	#0x00238	
    8bf4:	10 00       	bra	#0x00000	
    8bf6:	00 00       	bra	@r0		
    8bf8:	10 53       	inc	r0		
    8bfa:	00 00       	bra	@r0		
    8bfc:	40 00       	rrcm.a	#1,	r0	
    8bfe:	39 02 0f 00 	mova	&0x000f,r9	
    8c02:	00 00       	bra	@r0		
    8c04:	1b 53       	inc	r11		
    8c06:	00 00       	bra	@r0		
    8c08:	80 00 3a 02 	bra	#0x0023a	
    8c0c:	18 00       	mova	#0x00000,r8	
    8c0e:	00 00       	bra	@r0		
    8c10:	25 53       	incd	r5		
    8c12:	00 00       	bra	@r0		
    8c14:	80 00 3a 02 	bra	#0x0023a	
    8c18:	1c 00       	mova	#0x00000,r12	
    8c1a:	00 00       	bra	@r0		
    8c1c:	00 00       	bra	@r0		
    8c1e:	00 00       	bra	@r0		
    8c20:	c0 00       	bra	r0		
    8c22:	00 00       	bra	@r0		
    8c24:	06 00       	mova	@r0,	r6	
    8c26:	00 00       	bra	@r0		
    8c28:	00 00       	bra	@r0		
    8c2a:	00 00       	bra	@r0		
    8c2c:	e0 00       	adda	r0,	r0	
    8c2e:	00 00       	bra	@r0		
    8c30:	48 00       	rrcm.a	#1,	r8	
    8c32:	00 00       	bra	@r0		
    8c34:	00 00       	bra	@r0		
    8c36:	00 00       	bra	@r0		
    8c38:	24 00 00 00 	mova	&0x00000,r4	
    8c3c:	50 00       	rrcm	#1,	r0	
    8c3e:	00 00       	bra	@r0		
    8c40:	00 00       	bra	@r0		
    8c42:	00 00       	bra	@r0		
    8c44:	64 00 00 00 	mova	r0,	&0x40000
    8c48:	b4 55 00 00 	add	@r5+,	0(r4)	;0x0000(r4)
    8c4c:	c5 4a 00 00 	mov.b	r10,	0(r5)	;0x0000(r5)
    8c50:	64 00 00 00 	mova	r0,	&0x40000
    8c54:	b4 55 00 00 	add	@r5+,	0(r4)	;0x0000(r4)
    8c58:	3d 4f       	mov	@r15+,	r13	
    8c5a:	00 00       	bra	@r0		
    8c5c:	64 00 00 00 	mova	r0,	&0x40000
    8c60:	b4 55 00 00 	add	@r5+,	0(r4)	;0x0000(r4)
    8c64:	6a 00 00 00 	mova	r0,	&0xa0000
    8c68:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x08c6a
    8c6c:	00 00       	bra	@r0		
    8c6e:	00 00       	bra	@r0		
    8c70:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    8c74:	80 00 00 00 	bra	#0x00000	
    8c78:	00 00       	bra	@r0		
    8c7a:	00 00       	bra	@r0		
    8c7c:	99 00 00 00 	cmpa	#0x00000,r9	
    8c80:	80 00 00 00 	bra	#0x00000	
    8c84:	00 00       	bra	@r0		
    8c86:	00 00       	bra	@r0		
    8c88:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    8c8a:	00 00       	bra	@r0		
    8c8c:	80 00 00 00 	bra	#0x00000	
    8c90:	00 00       	bra	@r0		
    8c92:	00 00       	bra	@r0		
    8c94:	ec 00       	adda	r0,	r12	
    8c96:	00 00       	bra	@r0		
    8c98:	80 00 00 00 	bra	#0x00000	
    8c9c:	00 00       	bra	@r0		
    8c9e:	00 00       	bra	@r0		
    8ca0:	24 01 00 00 	mova	&0x10000,r4	
    8ca4:	80 00 00 00 	bra	#0x00000	
    8ca8:	00 00       	bra	@r0		
    8caa:	00 00       	bra	@r0		
    8cac:	66 01 00 00 	mova	r1,	&0x60000
    8cb0:	80 00 00 00 	bra	#0x00000	
    8cb4:	00 00       	bra	@r0		
    8cb6:	00 00       	bra	@r0		
    8cb8:	b7 01 00 00 	suba	#0x10000,r7	
    8cbc:	80 00 00 00 	bra	#0x00000	
    8cc0:	00 00       	bra	@r0		
    8cc2:	00 00       	bra	@r0		
    8cc4:	08 02       	mova	#4,	r8	;r2 As==10
    8cc6:	00 00       	bra	@r0		
    8cc8:	80 00 00 00 	bra	#0x00000	
    8ccc:	00 00       	bra	@r0		
    8cce:	00 00       	bra	@r0		
    8cd0:	2e 02 00 00 	mova	&0x20000,r14	
    8cd4:	80 00 00 00 	bra	#0x00000	
    8cd8:	00 00       	bra	@r0		
    8cda:	00 00       	bra	@r0		
    8cdc:	6c 02 00 00 	mova	r2,	&0xc0000
    8ce0:	80 00 00 00 	bra	#0x00000	
    8ce4:	00 00       	bra	@r0		
    8ce6:	00 00       	bra	@r0		
    8ce8:	96 02 00 00 	cmpa	#0x20000,r6	
    8cec:	80 00 00 00 	bra	#0x00000	
    8cf0:	00 00       	bra	@r0		
    8cf2:	00 00       	bra	@r0		
    8cf4:	bf 02 00 00 	suba	#0x20000,r15	
    8cf8:	80 00 00 00 	bra	#0x00000	
    8cfc:	00 00       	bra	@r0		
    8cfe:	00 00       	bra	@r0		
    8d00:	d9 02       	cmpa	r2,	r9	
    8d02:	00 00       	bra	@r0		
    8d04:	80 00 00 00 	bra	#0x00000	
    8d08:	00 00       	bra	@r0		
    8d0a:	00 00       	bra	@r0		
    8d0c:	f4 02       	suba	r2,	r4	
    8d0e:	00 00       	bra	@r0		
    8d10:	80 00 00 00 	bra	#0x00000	
    8d14:	00 00       	bra	@r0		
    8d16:	00 00       	bra	@r0		
    8d18:	14 03       	mova	#-1,	r4	;r3 As==11
    8d1a:	00 00       	bra	@r0		
    8d1c:	80 00 00 00 	bra	#0x00000	
    8d20:	00 00       	bra	@r0		
    8d22:	00 00       	bra	@r0		
    8d24:	4d 03       	rrum.a	#1,	r13	
    8d26:	00 00       	bra	@r0		
    8d28:	80 00 00 00 	bra	#0x00000	
    8d2c:	00 00       	bra	@r0		
    8d2e:	00 00       	bra	@r0		
    8d30:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    8d34:	80 00 00 00 	bra	#0x00000	
    8d38:	00 00       	bra	@r0		
    8d3a:	00 00       	bra	@r0		
    8d3c:	8a 03 00 00 	mova	#0x30000,r10	
    8d40:	80 00 00 00 	bra	#0x00000	
    8d44:	00 00       	bra	@r0		
    8d46:	00 00       	bra	@r0		
    8d48:	ae 03 00 00 	adda	#0x30000,r14	
    8d4c:	80 00 00 00 	bra	#0x00000	
    8d50:	00 00       	bra	@r0		
    8d52:	00 00       	bra	@r0		
    8d54:	d7 03       	tsta	r7		
    8d56:	00 00       	bra	@r0		
    8d58:	80 00 00 00 	bra	#0x00000	
    8d5c:	00 00       	bra	@r0		
    8d5e:	00 00       	bra	@r0		
    8d60:	3d 4f       	mov	@r15+,	r13	
    8d62:	00 00       	bra	@r0		
    8d64:	82 00 00 00 	mova	#0x00000,r2	
    8d68:	a2 37       	jge	$-186    	;abs 0x8cae
    8d6a:	00 00       	bra	@r0		
    8d6c:	00 4b       	br	r11		
    8d6e:	00 00       	bra	@r0		
    8d70:	c2 00       	mova	r0,	r2	
    8d72:	00 00       	bra	@r0		
    8d74:	e5 1d       	.word	0x1de5;	????	
    8d76:	00 00       	bra	@r0		
    8d78:	7a 4b       	mov.b	@r11+,	r10	
    8d7a:	00 00       	bra	@r0		
    8d7c:	c2 00       	mova	r0,	r2	
    8d7e:	00 00       	bra	@r0		
    8d80:	00 00       	bra	@r0		
    8d82:	00 00       	bra	@r0		
    8d84:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x08e4c
    8d88:	c2 00 
    8d8a:	00 00       	bra	@r0		
    8d8c:	00 00       	bra	@r0		
    8d8e:	00 00       	bra	@r0		
    8d90:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    8d94:	c2 00       	mova	r0,	r2	
    8d96:	00 00       	bra	@r0		
    8d98:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    8d9c:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    8da0:	c2 00       	mova	r0,	r2	
    8da2:	00 00       	bra	@r0		
    8da4:	00 00       	bra	@r0		
    8da6:	00 00       	bra	@r0		
    8da8:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    8dac:	c2 00       	mova	r0,	r2	
    8dae:	00 00       	bra	@r0		
    8db0:	00 00       	bra	@r0		
    8db2:	00 00       	bra	@r0		
    8db4:	46 4f       	mov.b	r15,	r6	
    8db6:	00 00       	bra	@r0		
    8db8:	c2 00       	mova	r0,	r2	
    8dba:	00 00       	bra	@r0		
    8dbc:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    8dc0:	40 53       	add.b	#0,	r0	;r3 As==00
    8dc2:	00 00       	bra	@r0		
    8dc4:	24 00 f7 02 	mova	&0x002f7,r4	
    8dc8:	b4 55 00 00 	add	@r5+,	0(r4)	;0x0000(r4)
    8dcc:	d7 52 00 00 	add.b	&0x0000,64(r7)	;0x0040(r7)
    8dd0:	40 00 
    8dd2:	f6 02       	suba	r2,	r6	
    8dd4:	0e 00       	mova	@r0,	r14	
    8dd6:	00 00       	bra	@r0		
    8dd8:	e5 52 00 00 	add.b	#4,	0(r5)	;r2 As==10, 0x0000(r5)
    8ddc:	40 00       	rrcm.a	#1,	r0	
    8dde:	f6 02       	suba	r2,	r6	
    8de0:	0c 00       	mova	@r0,	r12	
    8de2:	00 00       	bra	@r0		
    8de4:	00 00       	bra	@r0		
    8de6:	00 00       	bra	@r0		
    8de8:	44 00       	rrcm.a	#1,	r4	
    8dea:	f7 02       	suba	r2,	r7	
	...
    8df4:	44 00       	rrcm.a	#1,	r4	
    8df6:	fe 02       	suba	r2,	r14	
    8df8:	06 00       	mova	@r0,	r6	
    8dfa:	00 00       	bra	@r0		
    8dfc:	00 00       	bra	@r0		
    8dfe:	00 00       	bra	@r0		
    8e00:	44 00       	rrcm.a	#1,	r4	
    8e02:	ff 02       	suba	r2,	r15	
    8e04:	0e 00       	mova	@r0,	r14	
    8e06:	00 00       	bra	@r0		
    8e08:	00 00       	bra	@r0		
    8e0a:	00 00       	bra	@r0		
    8e0c:	44 00       	rrcm.a	#1,	r4	
    8e0e:	01 03       	mova	#2,	r1	;r3 As==10
    8e10:	16 00       	mova	#0x00000,r6	
    8e12:	00 00       	bra	@r0		
    8e14:	00 00       	bra	@r0		
    8e16:	00 00       	bra	@r0		
    8e18:	44 00       	rrcm.a	#1,	r4	
    8e1a:	02 03       	mova	#2,	r2	;r3 As==10
    8e1c:	22 00 00 00 	mova	&0x00000,r2	
    8e20:	00 00       	bra	@r0		
    8e22:	00 00       	bra	@r0		
    8e24:	44 00       	rrcm.a	#1,	r4	
    8e26:	04 03       	mova	#2,	r4	;r3 As==10
    8e28:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x08e2a
    8e2c:	00 00       	bra	@r0		
    8e2e:	00 00       	bra	@r0		
    8e30:	44 00       	rrcm.a	#1,	r4	
    8e32:	06 03       	mova	#2,	r6	;r3 As==10
    8e34:	40 00       	rrcm.a	#1,	r0	
    8e36:	00 00       	bra	@r0		
    8e38:	00 00       	bra	@r0		
    8e3a:	00 00       	bra	@r0		
    8e3c:	44 00       	rrcm.a	#1,	r4	
    8e3e:	07 03       	mova	#2,	r7	;r3 As==10
    8e40:	44 00       	rrcm.a	#1,	r4	
    8e42:	00 00       	bra	@r0		
    8e44:	f3 52       	add.b	#8,	#1	;r2 As==11, r3 As==01
    8e46:	00 00       	bra	@r0		
    8e48:	80 00 f8 02 	bra	#0x002f8	
    8e4c:	00 00       	bra	@r0		
    8e4e:	00 00       	bra	@r0		
    8e50:	fc 52 00 00 	add.b	#8,	0(r12)	;r2 As==11, 0x0000(r12)
    8e54:	80 00 f9 02 	bra	#0x002f9	
    8e58:	08 00       	mova	@r0,	r8	
    8e5a:	00 00       	bra	@r0		
    8e5c:	05 53       	add	#0,	r5	;r3 As==00
    8e5e:	00 00       	bra	@r0		
    8e60:	80 00 fa 02 	bra	#0x002fa	
    8e64:	10 00       	bra	#0x00000	
    8e66:	00 00       	bra	@r0		
    8e68:	51 53       	inc.b	r1		
    8e6a:	00 00       	bra	@r0		
    8e6c:	40 00       	rrcm.a	#1,	r0	
    8e6e:	fb 02       	suba	r2,	r11	
    8e70:	0f 00       	mova	@r0,	r15	
    8e72:	00 00       	bra	@r0		
    8e74:	1b 53       	inc	r11		
    8e76:	00 00       	bra	@r0		
    8e78:	80 00 fc 02 	bra	#0x002fc	
    8e7c:	18 00       	mova	#0x00000,r8	
    8e7e:	00 00       	bra	@r0		
    8e80:	25 53       	incd	r5		
    8e82:	00 00       	bra	@r0		
    8e84:	80 00 fc 02 	bra	#0x002fc	
    8e88:	1c 00       	mova	#0x00000,r12	
    8e8a:	00 00       	bra	@r0		
    8e8c:	00 00       	bra	@r0		
    8e8e:	00 00       	bra	@r0		
    8e90:	c0 00       	bra	r0		
    8e92:	00 00       	bra	@r0		
    8e94:	06 00       	mova	@r0,	r6	
    8e96:	00 00       	bra	@r0		
    8e98:	00 00       	bra	@r0		
    8e9a:	00 00       	bra	@r0		
    8e9c:	e0 00       	adda	r0,	r0	
    8e9e:	00 00       	bra	@r0		
    8ea0:	44 00       	rrcm.a	#1,	r4	
    8ea2:	00 00       	bra	@r0		
    8ea4:	00 00       	bra	@r0		
    8ea6:	00 00       	bra	@r0		
    8ea8:	24 00 00 00 	mova	&0x00000,r4	
    8eac:	4c 00       	rrcm.a	#1,	r12	
    8eae:	00 00       	bra	@r0		
    8eb0:	64 53       	incd.b	r4		
    8eb2:	00 00       	bra	@r0		
    8eb4:	24 00 4f 02 	mova	&0x0024f,r4	
    8eb8:	00 56       	add	r6,	r0	
    8eba:	00 00       	bra	@r0		
    8ebc:	3f 52       	add	#8,	r15	;r2 As==11
    8ebe:	00 00       	bra	@r0		
    8ec0:	40 00       	rrcm.a	#1,	r0	
    8ec2:	4c 02       	rlam.a	#1,	r12	
    8ec4:	09 00       	mova	@r0,	r9	
    8ec6:	00 00       	bra	@r0		
    8ec8:	48 52       	add.b	r2,	r8	
    8eca:	00 00       	bra	@r0		
    8ecc:	40 00       	rrcm.a	#1,	r0	
    8ece:	4d 02       	rlam.a	#1,	r13	
    8ed0:	06 00       	mova	@r0,	r6	
    8ed2:	00 00       	bra	@r0		
    8ed4:	78 53       	add.b	#-1,	r8	;r3 As==11
    8ed6:	00 00       	bra	@r0		
    8ed8:	a0 00 4e 02 	adda	#0x0024e,r0	
	...
    8ee4:	44 00       	rrcm.a	#1,	r4	
    8ee6:	4f 02       	rlam.a	#1,	r15	
	...
    8ef0:	44 00       	rrcm.a	#1,	r4	
    8ef2:	50 02       	rlam	#1,	r0	
    8ef4:	1c 00       	mova	#0x00000,r12	
    8ef6:	00 00       	bra	@r0		
    8ef8:	00 00       	bra	@r0		
    8efa:	00 00       	bra	@r0		
    8efc:	44 00       	rrcm.a	#1,	r4	
    8efe:	51 02       	rlam	#1,	r1	
    8f00:	24 00 00 00 	mova	&0x00000,r4	
    8f04:	00 00       	bra	@r0		
    8f06:	00 00       	bra	@r0		
    8f08:	44 00       	rrcm.a	#1,	r4	
    8f0a:	9a 00 28 00 	cmpa	#0x00028,r10	
    8f0e:	00 00       	bra	@r0		
    8f10:	00 00       	bra	@r0		
    8f12:	00 00       	bra	@r0		
    8f14:	44 00       	rrcm.a	#1,	r4	
    8f16:	99 00 32 00 	cmpa	#0x00032,r9	
    8f1a:	00 00       	bra	@r0		
    8f1c:	00 00       	bra	@r0		
    8f1e:	00 00       	bra	@r0		
    8f20:	44 00       	rrcm.a	#1,	r4	
    8f22:	9a 00 36 00 	cmpa	#0x00036,r10	
    8f26:	00 00       	bra	@r0		
    8f28:	00 00       	bra	@r0		
    8f2a:	00 00       	bra	@r0		
    8f2c:	44 00       	rrcm.a	#1,	r4	
    8f2e:	99 00 40 00 	cmpa	#0x00040,r9	
    8f32:	00 00       	bra	@r0		
    8f34:	00 00       	bra	@r0		
    8f36:	00 00       	bra	@r0		
    8f38:	44 00       	rrcm.a	#1,	r4	
    8f3a:	a1 00 44 00 	adda	#0x00044,r1	
    8f3e:	00 00       	bra	@r0		
    8f40:	00 00       	bra	@r0		
    8f42:	00 00       	bra	@r0		
    8f44:	44 00       	rrcm.a	#1,	r4	
    8f46:	a0 00 4a 00 	adda	#0x0004a,r0	
    8f4a:	00 00       	bra	@r0		
    8f4c:	00 00       	bra	@r0		
    8f4e:	00 00       	bra	@r0		
    8f50:	44 00       	rrcm.a	#1,	r4	
    8f52:	aa 00 4e 00 	adda	#0x0004e,r10	
    8f56:	00 00       	bra	@r0		
    8f58:	00 00       	bra	@r0		
    8f5a:	00 00       	bra	@r0		
    8f5c:	44 00       	rrcm.a	#1,	r4	
    8f5e:	a9 00 54 00 	adda	#0x00054,r9	
    8f62:	00 00       	bra	@r0		
    8f64:	00 00       	bra	@r0		
    8f66:	00 00       	bra	@r0		
    8f68:	44 00       	rrcm.a	#1,	r4	
    8f6a:	8d 00 58 00 	mova	#0x00058,r13	
    8f6e:	00 00       	bra	@r0		
    8f70:	00 00       	bra	@r0		
    8f72:	00 00       	bra	@r0		
    8f74:	44 00       	rrcm.a	#1,	r4	
    8f76:	6f 02 58 00 	mova	r2,	&0xf0058
    8f7a:	00 00       	bra	@r0		
    8f7c:	00 00       	bra	@r0		
    8f7e:	00 00       	bra	@r0		
    8f80:	44 00       	rrcm.a	#1,	r4	
    8f82:	70 02 68 00 	mova	r2,	0x0068	;PC rel. 0x08fec
    8f86:	00 00       	bra	@r0		
    8f88:	00 00       	bra	@r0		
    8f8a:	00 00       	bra	@r0		
    8f8c:	44 00       	rrcm.a	#1,	r4	
    8f8e:	90 00 6c 00 	cmpa	#0x0006c,r0	
    8f92:	00 00       	bra	@r0		
    8f94:	00 00       	bra	@r0		
    8f96:	00 00       	bra	@r0		
    8f98:	44 00       	rrcm.a	#1,	r4	
    8f9a:	8d 00 70 00 	mova	#0x00070,r13	
    8f9e:	00 00       	bra	@r0		
    8fa0:	00 00       	bra	@r0		
    8fa2:	00 00       	bra	@r0		
    8fa4:	44 00       	rrcm.a	#1,	r4	
    8fa6:	a1 00 76 00 	adda	#0x00076,r1	
    8faa:	00 00       	bra	@r0		
    8fac:	00 00       	bra	@r0		
    8fae:	00 00       	bra	@r0		
    8fb0:	44 00       	rrcm.a	#1,	r4	
    8fb2:	a0 00 7c 00 	adda	#0x0007c,r0	
    8fb6:	00 00       	bra	@r0		
    8fb8:	00 00       	bra	@r0		
    8fba:	00 00       	bra	@r0		
    8fbc:	44 00       	rrcm.a	#1,	r4	
    8fbe:	aa 00 80 00 	adda	#0x00080,r10	
    8fc2:	00 00       	bra	@r0		
    8fc4:	00 00       	bra	@r0		
    8fc6:	00 00       	bra	@r0		
    8fc8:	44 00       	rrcm.a	#1,	r4	
    8fca:	a9 00 86 00 	adda	#0x00086,r9	
    8fce:	00 00       	bra	@r0		
    8fd0:	00 00       	bra	@r0		
    8fd2:	00 00       	bra	@r0		
    8fd4:	44 00       	rrcm.a	#1,	r4	
    8fd6:	74 02 8a 00 	mova	r2,	138(r4)	;0x008a(r4)
    8fda:	00 00       	bra	@r0		
    8fdc:	00 00       	bra	@r0		
    8fde:	00 00       	bra	@r0		
    8fe0:	44 00       	rrcm.a	#1,	r4	
    8fe2:	75 02 9a 00 	mova	r2,	154(r5)	;0x009a(r5)
    8fe6:	00 00       	bra	@r0		
    8fe8:	00 00       	bra	@r0		
    8fea:	00 00       	bra	@r0		
    8fec:	44 00       	rrcm.a	#1,	r4	
    8fee:	aa 00 a2 00 	adda	#0x000a2,r10	
    8ff2:	00 00       	bra	@r0		
    8ff4:	00 00       	bra	@r0		
    8ff6:	00 00       	bra	@r0		
    8ff8:	44 00       	rrcm.a	#1,	r4	
    8ffa:	a9 00 a8 00 	adda	#0x000a8,r9	
    8ffe:	00 00       	bra	@r0		
    9000:	00 00       	bra	@r0		
    9002:	00 00       	bra	@r0		
    9004:	44 00       	rrcm.a	#1,	r4	
    9006:	aa 00 ac 00 	adda	#0x000ac,r10	
    900a:	00 00       	bra	@r0		
    900c:	00 00       	bra	@r0		
    900e:	00 00       	bra	@r0		
    9010:	44 00       	rrcm.a	#1,	r4	
    9012:	a9 00 b2 00 	adda	#0x000b2,r9	
    9016:	00 00       	bra	@r0		
    9018:	00 00       	bra	@r0		
    901a:	00 00       	bra	@r0		
    901c:	44 00       	rrcm.a	#1,	r4	
    901e:	7d 02 b6 00 	mova	r2,	182(r13);0x00b6(r13)
    9022:	00 00       	bra	@r0		
    9024:	00 00       	bra	@r0		
    9026:	00 00       	bra	@r0		
    9028:	44 00       	rrcm.a	#1,	r4	
    902a:	7e 02 be 00 	mova	r2,	190(r14);0x00be(r14)
    902e:	00 00       	bra	@r0		
    9030:	00 00       	bra	@r0		
    9032:	00 00       	bra	@r0		
    9034:	44 00       	rrcm.a	#1,	r4	
    9036:	7f 02 c6 00 	mova	r2,	198(r15);0x00c6(r15)
    903a:	00 00       	bra	@r0		
    903c:	00 00       	bra	@r0		
    903e:	00 00       	bra	@r0		
    9040:	44 00       	rrcm.a	#1,	r4	
    9042:	83 02       	.word	0x0283;	????	Illegal as address instr
    9044:	ca 00       	mova	r0,	r10	
    9046:	00 00       	bra	@r0		
    9048:	00 00       	bra	@r0		
    904a:	00 00       	bra	@r0		
    904c:	44 00       	rrcm.a	#1,	r4	
    904e:	87 02 d0 00 	mova	#0x200d0,r7	
    9052:	00 00       	bra	@r0		
    9054:	00 00       	bra	@r0		
    9056:	00 00       	bra	@r0		
    9058:	44 00       	rrcm.a	#1,	r4	
    905a:	89 02 dc 00 	mova	#0x200dc,r9	
    905e:	00 00       	bra	@r0		
    9060:	00 00       	bra	@r0		
    9062:	00 00       	bra	@r0		
    9064:	44 00       	rrcm.a	#1,	r4	
    9066:	8a 02 fa 00 	mova	#0x200fa,r10	
    906a:	00 00       	bra	@r0		
    906c:	00 00       	bra	@r0		
    906e:	00 00       	bra	@r0		
    9070:	44 00       	rrcm.a	#1,	r4	
    9072:	8c 02 0e 01 	mova	#0x2010e,r12	
    9076:	00 00       	bra	@r0		
    9078:	00 00       	bra	@r0		
    907a:	00 00       	bra	@r0		
    907c:	44 00       	rrcm.a	#1,	r4	
    907e:	8d 02 12 01 	mova	#0x20112,r13	
    9082:	00 00       	bra	@r0		
    9084:	00 00       	bra	@r0		
    9086:	00 00       	bra	@r0		
    9088:	44 00       	rrcm.a	#1,	r4	
    908a:	8f 02 18 01 	mova	#0x20118,r15	
    908e:	00 00       	bra	@r0		
    9090:	00 00       	bra	@r0		
    9092:	00 00       	bra	@r0		
    9094:	44 00       	rrcm.a	#1,	r4	
    9096:	91 02 1a 01 	cmpa	#0x2011a,r1	
    909a:	00 00       	bra	@r0		
    909c:	00 00       	bra	@r0		
    909e:	00 00       	bra	@r0		
    90a0:	44 00       	rrcm.a	#1,	r4	
    90a2:	92 02 1e 01 	cmpa	#0x2011e,r2	
    90a6:	00 00       	bra	@r0		
    90a8:	00 00       	bra	@r0		
    90aa:	00 00       	bra	@r0		
    90ac:	44 00       	rrcm.a	#1,	r4	
    90ae:	83 02       	.word	0x0283;	????	Illegal as address instr
    90b0:	24 01 00 00 	mova	&0x10000,r4	
    90b4:	00 00       	bra	@r0		
    90b6:	00 00       	bra	@r0		
    90b8:	44 00       	rrcm.a	#1,	r4	
    90ba:	ba 02 30 01 	suba	#0x20130,r10	
    90be:	00 00       	bra	@r0		
    90c0:	00 00       	bra	@r0		
    90c2:	00 00       	bra	@r0		
    90c4:	44 00       	rrcm.a	#1,	r4	
    90c6:	bb 02 3e 01 	suba	#0x2013e,r11	
    90ca:	00 00       	bra	@r0		
    90cc:	00 00       	bra	@r0		
    90ce:	00 00       	bra	@r0		
    90d0:	44 00       	rrcm.a	#1,	r4	
    90d2:	bd 02 50 01 	suba	#0x20150,r13	
    90d6:	00 00       	bra	@r0		
    90d8:	00 00       	bra	@r0		
    90da:	00 00       	bra	@r0		
    90dc:	44 00       	rrcm.a	#1,	r4	
    90de:	c1 02       	mova	r2,	r1	
    90e0:	56 01       	rram	#1,	r6	
    90e2:	00 00       	bra	@r0		
    90e4:	00 00       	bra	@r0		
    90e6:	00 00       	bra	@r0		
    90e8:	44 00       	rrcm.a	#1,	r4	
    90ea:	c3 02       	.word	0x02c3;	????	Illegal as address instr
    90ec:	5c 01       	rram	#1,	r12	
    90ee:	00 00       	bra	@r0		
    90f0:	00 00       	bra	@r0		
    90f2:	00 00       	bra	@r0		
    90f4:	44 00       	rrcm.a	#1,	r4	
    90f6:	c4 02       	mova	r2,	r4	
    90f8:	62 01 00 00 	mova	r1,	&0x20000
    90fc:	00 00       	bra	@r0		
    90fe:	00 00       	bra	@r0		
    9100:	44 00       	rrcm.a	#1,	r4	
    9102:	c6 02       	mova	r2,	r6	
    9104:	6e 01 00 00 	mova	r1,	&0xe0000
    9108:	00 00       	bra	@r0		
    910a:	00 00       	bra	@r0		
    910c:	44 00       	rrcm.a	#1,	r4	
    910e:	c7 02       	mova	r2,	r7	
    9110:	78 01 00 00 	mova	r1,	0(r8)	;0x0000(r8)
    9114:	00 00       	bra	@r0		
    9116:	00 00       	bra	@r0		
    9118:	44 00       	rrcm.a	#1,	r4	
    911a:	c9 02       	mova	r2,	r9	
    911c:	7e 01 00 00 	mova	r1,	0(r14)	;0x0000(r14)
    9120:	00 00       	bra	@r0		
    9122:	00 00       	bra	@r0		
    9124:	44 00       	rrcm.a	#1,	r4	
    9126:	cb 02       	mova	r2,	r11	
    9128:	8a 01 00 00 	mova	#0x10000,r10	
    912c:	00 00       	bra	@r0		
    912e:	00 00       	bra	@r0		
    9130:	44 00       	rrcm.a	#1,	r4	
    9132:	cd 02       	mova	r2,	r13	
    9134:	90 01 00 00 	cmpa	#0x10000,r0	
    9138:	00 00       	bra	@r0		
    913a:	00 00       	bra	@r0		
    913c:	44 00       	rrcm.a	#1,	r4	
    913e:	cf 02       	mova	r2,	r15	
    9140:	96 01 00 00 	cmpa	#0x10000,r6	
    9144:	00 00       	bra	@r0		
    9146:	00 00       	bra	@r0		
    9148:	44 00       	rrcm.a	#1,	r4	
    914a:	d0 02       	cmpa	r2,	r0	
    914c:	9a 01 00 00 	cmpa	#0x10000,r10	
    9150:	00 00       	bra	@r0		
    9152:	00 00       	bra	@r0		
    9154:	44 00       	rrcm.a	#1,	r4	
    9156:	d1 02       	cmpa	r2,	r1	
    9158:	a2 01 00 00 	adda	#0x10000,r2	
    915c:	00 00       	bra	@r0		
    915e:	00 00       	bra	@r0		
    9160:	44 00       	rrcm.a	#1,	r4	
    9162:	d2 02       	cmpa	r2,	r2	
    9164:	a4 01 00 00 	adda	#0x10000,r4	
    9168:	00 00       	bra	@r0		
    916a:	00 00       	bra	@r0		
    916c:	44 00       	rrcm.a	#1,	r4	
    916e:	e3 02       	.word	0x02e3;	????	Illegal as address instr
    9170:	b6 01 00 00 	suba	#0x10000,r6	
    9174:	00 00       	bra	@r0		
    9176:	00 00       	bra	@r0		
    9178:	44 00       	rrcm.a	#1,	r4	
    917a:	f0 02       	suba	r2,	r0	
    917c:	ca 01       	mova	r1,	r10	
    917e:	00 00       	bra	@r0		
    9180:	00 00       	bra	@r0		
    9182:	00 00       	bra	@r0		
    9184:	44 00       	rrcm.a	#1,	r4	
    9186:	f1 02       	suba	r2,	r1	
    9188:	d4 01       	cmpa	r1,	r4	
    918a:	00 00       	bra	@r0		
    918c:	00 00       	bra	@r0		
    918e:	00 00       	bra	@r0		
    9190:	44 00       	rrcm.a	#1,	r4	
    9192:	f2 02       	suba	r2,	r2	
    9194:	da 01       	cmpa	r1,	r10	
    9196:	00 00       	bra	@r0		
    9198:	00 00       	bra	@r0		
    919a:	00 00       	bra	@r0		
    919c:	44 00       	rrcm.a	#1,	r4	
    919e:	e5 02       	adda	r2,	r5	
    91a0:	de 01       	cmpa	r1,	r14	
    91a2:	00 00       	bra	@r0		
    91a4:	00 00       	bra	@r0		
    91a6:	00 00       	bra	@r0		
    91a8:	44 00       	rrcm.a	#1,	r4	
    91aa:	ea 02       	adda	r2,	r10	
    91ac:	e2 01       	adda	r1,	r2	
    91ae:	00 00       	bra	@r0		
    91b0:	00 00       	bra	@r0		
    91b2:	00 00       	bra	@r0		
    91b4:	44 00       	rrcm.a	#1,	r4	
    91b6:	ed 02       	adda	r2,	r13	
    91b8:	ee 01       	adda	r1,	r14	
    91ba:	00 00       	bra	@r0		
    91bc:	00 00       	bra	@r0		
    91be:	00 00       	bra	@r0		
    91c0:	44 00       	rrcm.a	#1,	r4	
    91c2:	f3 02       	.word	0x02f3;	????	Illegal as address instr
    91c4:	06 02       	mova	#4,	r6	;r2 As==10
    91c6:	00 00       	bra	@r0		
    91c8:	83 53       	add	#0,	#1	;r3 As==00, r3 As==01
    91ca:	00 00       	bra	@r0		
    91cc:	80 00 50 02 	bra	#0x00250	
    91d0:	02 00       	mova	@r0,	r2	
    91d2:	00 00       	bra	@r0		
    91d4:	8d 53 00 00 	add	#0,	0(r13)	;r3 As==00, 0x0000(r13)
    91d8:	40 00       	rrcm.a	#1,	r0	
    91da:	51 02       	rlam	#1,	r1	
    91dc:	04 00       	mova	@r0,	r4	
    91de:	00 00       	bra	@r0		
    91e0:	00 00       	bra	@r0		
    91e2:	00 00       	bra	@r0		
    91e4:	c0 00       	bra	r0		
    91e6:	00 00       	bra	@r0		
    91e8:	1c 00       	mova	#0x00000,r12	
    91ea:	00 00       	bra	@r0		
    91ec:	99 53 00 00 	inc	0(r9)		;0x0000(r9)
    91f0:	40 00       	rrcm.a	#1,	r0	
    91f2:	7d 02 0a 00 	mova	r2,	10(r13)	;0x000a(r13)
    91f6:	00 00       	bra	@r0		
    91f8:	a2 53 00 00 	incd	&0x0000	
    91fc:	40 00       	rrcm.a	#1,	r0	
    91fe:	7e 02 0c 00 	mova	r2,	12(r14)	;0x000c(r14)
    9202:	00 00       	bra	@r0		
    9204:	ae 53 00 00 	incd	0(r14)		;0x0000(r14)
    9208:	40 00       	rrcm.a	#1,	r0	
    920a:	7f 02 07 00 	mova	r2,	7(r15)	;0x0007(r15)
    920e:	00 00       	bra	@r0		
    9210:	bb 53 00 00 	add	#-1,	0(r11)	;r3 As==11, 0x0000(r11)
    9214:	80 00 80 02 	bra	#0x00280	
    9218:	06 00       	mova	@r0,	r6	
    921a:	00 00       	bra	@r0		
    921c:	00 00       	bra	@r0		
    921e:	00 00       	bra	@r0		
    9220:	c0 00       	bra	r0		
    9222:	00 00       	bra	@r0		
    9224:	b6 00 00 00 	suba	#0x00000,r6	
    9228:	c5 53 00 00 	add.b	#0,	0(r5)	;r3 As==00, 0x0000(r5)
    922c:	80 00 85 02 	bra	#0x00285	
    9230:	08 00       	mova	@r0,	r8	
    9232:	00 00       	bra	@r0		
    9234:	00 00       	bra	@r0		
    9236:	00 00       	bra	@r0		
    9238:	c0 00       	bra	r0		
    923a:	00 00       	bra	@r0		
    923c:	d0 00       	cmpa	r0,	r0	
    923e:	00 00       	bra	@r0		
    9240:	00 00       	bra	@r0		
    9242:	00 00       	bra	@r0		
    9244:	e0 00       	adda	r0,	r0	
    9246:	00 00       	bra	@r0		
    9248:	24 01 00 00 	mova	&0x10000,r4	
    924c:	00 00       	bra	@r0		
    924e:	00 00       	bra	@r0		
    9250:	e0 00       	adda	r0,	r0	
    9252:	00 00       	bra	@r0		
    9254:	30 01 00 00 	bra	0(r1)		;0x0000(r1)
    9258:	00 00       	bra	@r0		
    925a:	00 00       	bra	@r0		
    925c:	e0 00       	adda	r0,	r0	
    925e:	00 00       	bra	@r0		
    9260:	06 02       	mova	#4,	r6	;r2 As==10
    9262:	00 00       	bra	@r0		
    9264:	00 00       	bra	@r0		
    9266:	00 00       	bra	@r0		
    9268:	24 00 00 00 	mova	&0x00000,r4	
    926c:	1e 02       	mova	#8,	r14	;r2 As==11
    926e:	00 00       	bra	@r0		
    9270:	00 00       	bra	@r0		
    9272:	00 00       	bra	@r0		
    9274:	64 00 00 00 	mova	r0,	&0x40000
    9278:	1e 58 00 00 	add	0(r8),	r14	;0x0000(r8)
    927c:	c5 4a 00 00 	mov.b	r10,	0(r5)	;0x0000(r5)
    9280:	64 00 00 00 	mova	r0,	&0x40000
    9284:	1e 58 00 00 	add	0(r8),	r14	;0x0000(r8)
    9288:	3d 4f       	mov	@r15+,	r13	
    928a:	00 00       	bra	@r0		
    928c:	64 00 00 00 	mova	r0,	&0x40000
    9290:	1e 58 00 00 	add	0(r8),	r14	;0x0000(r8)
    9294:	6a 00 00 00 	mova	r0,	&0xa0000
    9298:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0929a
    929c:	00 00       	bra	@r0		
    929e:	00 00       	bra	@r0		
    92a0:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    92a4:	80 00 00 00 	bra	#0x00000	
    92a8:	00 00       	bra	@r0		
    92aa:	00 00       	bra	@r0		
    92ac:	99 00 00 00 	cmpa	#0x00000,r9	
    92b0:	80 00 00 00 	bra	#0x00000	
    92b4:	00 00       	bra	@r0		
    92b6:	00 00       	bra	@r0		
    92b8:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    92ba:	00 00       	bra	@r0		
    92bc:	80 00 00 00 	bra	#0x00000	
    92c0:	00 00       	bra	@r0		
    92c2:	00 00       	bra	@r0		
    92c4:	ec 00       	adda	r0,	r12	
    92c6:	00 00       	bra	@r0		
    92c8:	80 00 00 00 	bra	#0x00000	
    92cc:	00 00       	bra	@r0		
    92ce:	00 00       	bra	@r0		
    92d0:	24 01 00 00 	mova	&0x10000,r4	
    92d4:	80 00 00 00 	bra	#0x00000	
    92d8:	00 00       	bra	@r0		
    92da:	00 00       	bra	@r0		
    92dc:	66 01 00 00 	mova	r1,	&0x60000
    92e0:	80 00 00 00 	bra	#0x00000	
    92e4:	00 00       	bra	@r0		
    92e6:	00 00       	bra	@r0		
    92e8:	b7 01 00 00 	suba	#0x10000,r7	
    92ec:	80 00 00 00 	bra	#0x00000	
    92f0:	00 00       	bra	@r0		
    92f2:	00 00       	bra	@r0		
    92f4:	08 02       	mova	#4,	r8	;r2 As==10
    92f6:	00 00       	bra	@r0		
    92f8:	80 00 00 00 	bra	#0x00000	
    92fc:	00 00       	bra	@r0		
    92fe:	00 00       	bra	@r0		
    9300:	2e 02 00 00 	mova	&0x20000,r14	
    9304:	80 00 00 00 	bra	#0x00000	
    9308:	00 00       	bra	@r0		
    930a:	00 00       	bra	@r0		
    930c:	6c 02 00 00 	mova	r2,	&0xc0000
    9310:	80 00 00 00 	bra	#0x00000	
    9314:	00 00       	bra	@r0		
    9316:	00 00       	bra	@r0		
    9318:	96 02 00 00 	cmpa	#0x20000,r6	
    931c:	80 00 00 00 	bra	#0x00000	
    9320:	00 00       	bra	@r0		
    9322:	00 00       	bra	@r0		
    9324:	bf 02 00 00 	suba	#0x20000,r15	
    9328:	80 00 00 00 	bra	#0x00000	
    932c:	00 00       	bra	@r0		
    932e:	00 00       	bra	@r0		
    9330:	d9 02       	cmpa	r2,	r9	
    9332:	00 00       	bra	@r0		
    9334:	80 00 00 00 	bra	#0x00000	
    9338:	00 00       	bra	@r0		
    933a:	00 00       	bra	@r0		
    933c:	f4 02       	suba	r2,	r4	
    933e:	00 00       	bra	@r0		
    9340:	80 00 00 00 	bra	#0x00000	
    9344:	00 00       	bra	@r0		
    9346:	00 00       	bra	@r0		
    9348:	14 03       	mova	#-1,	r4	;r3 As==11
    934a:	00 00       	bra	@r0		
    934c:	80 00 00 00 	bra	#0x00000	
    9350:	00 00       	bra	@r0		
    9352:	00 00       	bra	@r0		
    9354:	4d 03       	rrum.a	#1,	r13	
    9356:	00 00       	bra	@r0		
    9358:	80 00 00 00 	bra	#0x00000	
    935c:	00 00       	bra	@r0		
    935e:	00 00       	bra	@r0		
    9360:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    9364:	80 00 00 00 	bra	#0x00000	
    9368:	00 00       	bra	@r0		
    936a:	00 00       	bra	@r0		
    936c:	8a 03 00 00 	mova	#0x30000,r10	
    9370:	80 00 00 00 	bra	#0x00000	
    9374:	00 00       	bra	@r0		
    9376:	00 00       	bra	@r0		
    9378:	ae 03 00 00 	adda	#0x30000,r14	
    937c:	80 00 00 00 	bra	#0x00000	
    9380:	00 00       	bra	@r0		
    9382:	00 00       	bra	@r0		
    9384:	d7 03       	tsta	r7		
    9386:	00 00       	bra	@r0		
    9388:	80 00 00 00 	bra	#0x00000	
    938c:	00 00       	bra	@r0		
    938e:	00 00       	bra	@r0		
    9390:	3d 4f       	mov	@r15+,	r13	
    9392:	00 00       	bra	@r0		
    9394:	82 00 00 00 	mova	#0x00000,r2	
    9398:	3c 32       	jn	$-902    	;abs 0x9012
    939a:	00 00       	bra	@r0		
    939c:	00 4b       	br	r11		
    939e:	00 00       	bra	@r0		
    93a0:	c2 00       	mova	r0,	r2	
    93a2:	00 00       	bra	@r0		
    93a4:	e5 1d       	.word	0x1de5;	????	
    93a6:	00 00       	bra	@r0		
    93a8:	7a 4b       	mov.b	@r11+,	r10	
    93aa:	00 00       	bra	@r0		
    93ac:	c2 00       	mova	r0,	r2	
    93ae:	00 00       	bra	@r0		
    93b0:	00 00       	bra	@r0		
    93b2:	00 00       	bra	@r0		
    93b4:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x0947c
    93b8:	c2 00 
    93ba:	00 00       	bra	@r0		
    93bc:	00 00       	bra	@r0		
    93be:	00 00       	bra	@r0		
    93c0:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    93c4:	c2 00       	mova	r0,	r2	
    93c6:	00 00       	bra	@r0		
    93c8:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    93cc:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    93d0:	c2 00       	mova	r0,	r2	
    93d2:	00 00       	bra	@r0		
    93d4:	00 00       	bra	@r0		
    93d6:	00 00       	bra	@r0		
    93d8:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    93dc:	c2 00       	mova	r0,	r2	
    93de:	00 00       	bra	@r0		
    93e0:	00 00       	bra	@r0		
    93e2:	00 00       	bra	@r0		
    93e4:	46 4f       	mov.b	r15,	r6	
    93e6:	00 00       	bra	@r0		
    93e8:	c2 00       	mova	r0,	r2	
    93ea:	00 00       	bra	@r0		
    93ec:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    93f0:	d1 53 00 00 	inc.b	0(r1)		;0x0000(r1)
    93f4:	24 00 66 03 	mova	&0x00366,r4	
    93f8:	1e 58 00 00 	add	0(r8),	r14	;0x0000(r8)
    93fc:	d7 52 00 00 	add.b	&0x0000,64(r7)	;0x0040(r7)
    9400:	40 00 
    9402:	65 03 0e 00 	mova	#0,	&0x5000e;r3 As==00
    9406:	00 00       	bra	@r0		
    9408:	e5 52 00 00 	add.b	#4,	0(r5)	;r2 As==10, 0x0000(r5)
    940c:	40 00       	rrcm.a	#1,	r0	
    940e:	65 03 0c 00 	mova	#0,	&0x5000c;r3 As==00
    9412:	00 00       	bra	@r0		
    9414:	00 00       	bra	@r0		
    9416:	00 00       	bra	@r0		
    9418:	44 00       	rrcm.a	#1,	r4	
    941a:	66 03 00 00 	mova	#0,	&0x60000;r3 As==00
    941e:	00 00       	bra	@r0		
    9420:	00 00       	bra	@r0		
    9422:	00 00       	bra	@r0		
    9424:	44 00       	rrcm.a	#1,	r4	
    9426:	6c 03 06 00 	mova	#0,	&0xc0006;r3 As==00
    942a:	00 00       	bra	@r0		
    942c:	00 00       	bra	@r0		
    942e:	00 00       	bra	@r0		
    9430:	44 00       	rrcm.a	#1,	r4	
    9432:	6d 03 0e 00 	mova	#0,	&0xd000e;r3 As==00
    9436:	00 00       	bra	@r0		
    9438:	00 00       	bra	@r0		
    943a:	00 00       	bra	@r0		
    943c:	44 00       	rrcm.a	#1,	r4	
    943e:	6f 03 16 00 	mova	#0,	&0xf0016;r3 As==00
    9442:	00 00       	bra	@r0		
    9444:	00 00       	bra	@r0		
    9446:	00 00       	bra	@r0		
    9448:	44 00       	rrcm.a	#1,	r4	
    944a:	70 03 22 00 	mova	#0,	0x0022	;r3 As==00, PC rel. 0x0946e
    944e:	00 00       	bra	@r0		
    9450:	00 00       	bra	@r0		
    9452:	00 00       	bra	@r0		
    9454:	44 00       	rrcm.a	#1,	r4	
    9456:	72 03 32 00 	mova	#0,	&0x0032	;r3 As==00
    945a:	00 00       	bra	@r0		
    945c:	00 00       	bra	@r0		
    945e:	00 00       	bra	@r0		
    9460:	44 00       	rrcm.a	#1,	r4	
    9462:	74 03 3a 00 	mova	#0,	58(r4)	;r3 As==00, 0x003a(r4)
    9466:	00 00       	bra	@r0		
    9468:	00 00       	bra	@r0		
    946a:	00 00       	bra	@r0		
    946c:	44 00       	rrcm.a	#1,	r4	
    946e:	75 03 3e 00 	mova	#0,	62(r5)	;r3 As==00, 0x003e(r5)
    9472:	00 00       	bra	@r0		
    9474:	f3 52       	add.b	#8,	#1	;r2 As==11, r3 As==01
    9476:	00 00       	bra	@r0		
    9478:	80 00 67 03 	bra	#0x00367	
    947c:	00 00       	bra	@r0		
    947e:	00 00       	bra	@r0		
    9480:	fc 52 00 00 	add.b	#8,	0(r12)	;r2 As==11, 0x0000(r12)
    9484:	80 00 68 03 	bra	#0x00368	
    9488:	08 00       	mova	@r0,	r8	
    948a:	00 00       	bra	@r0		
    948c:	51 53       	inc.b	r1		
    948e:	00 00       	bra	@r0		
    9490:	40 00       	rrcm.a	#1,	r0	
    9492:	69 03 0f 00 	mova	#0,	&0x9000f;r3 As==00
    9496:	00 00       	bra	@r0		
    9498:	1b 53       	inc	r11		
    949a:	00 00       	bra	@r0		
    949c:	80 00 6a 03 	bra	#0x0036a	
    94a0:	10 00       	bra	#0x00000	
    94a2:	00 00       	bra	@r0		
    94a4:	25 53       	incd	r5		
    94a6:	00 00       	bra	@r0		
    94a8:	80 00 6a 03 	bra	#0x0036a	
    94ac:	14 00       	mova	#0x00000,r4	
    94ae:	00 00       	bra	@r0		
    94b0:	00 00       	bra	@r0		
    94b2:	00 00       	bra	@r0		
    94b4:	c0 00       	bra	r0		
    94b6:	00 00       	bra	@r0		
    94b8:	06 00       	mova	@r0,	r6	
    94ba:	00 00       	bra	@r0		
    94bc:	00 00       	bra	@r0		
    94be:	00 00       	bra	@r0		
    94c0:	e0 00       	adda	r0,	r0	
    94c2:	00 00       	bra	@r0		
    94c4:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x094c6
    94c8:	00 00       	bra	@r0		
    94ca:	00 00       	bra	@r0		
    94cc:	24 00 00 00 	mova	&0x00000,r4	
    94d0:	46 00       	rrcm.a	#1,	r6	
    94d2:	00 00       	bra	@r0		
    94d4:	e2 53 00 00 	incd.b	&0x0000	
    94d8:	24 00 0e 03 	mova	&0x0030e,r4	
    94dc:	64 58       	add.b	@r8,	r4	
    94de:	00 00       	bra	@r0		
    94e0:	3f 52       	add	#8,	r15	;r2 As==11
    94e2:	00 00       	bra	@r0		
    94e4:	40 00       	rrcm.a	#1,	r0	
    94e6:	0c 03       	mova	#2,	r12	;r3 As==10
    94e8:	0b 00       	mova	@r0,	r11	
    94ea:	00 00       	bra	@r0		
    94ec:	48 52       	add.b	r2,	r8	
    94ee:	00 00       	bra	@r0		
    94f0:	40 00       	rrcm.a	#1,	r0	
    94f2:	0d 03       	mova	#2,	r13	;r3 As==10
    94f4:	0e 00       	mova	@r0,	r14	
    94f6:	00 00       	bra	@r0		
    94f8:	00 00       	bra	@r0		
    94fa:	00 00       	bra	@r0		
    94fc:	44 00       	rrcm.a	#1,	r4	
    94fe:	0e 03       	mova	#2,	r14	;r3 As==10
	...
    9508:	44 00       	rrcm.a	#1,	r4	
    950a:	9a 00 10 00 	cmpa	#0x00010,r10	
    950e:	00 00       	bra	@r0		
    9510:	00 00       	bra	@r0		
    9512:	00 00       	bra	@r0		
    9514:	44 00       	rrcm.a	#1,	r4	
    9516:	99 00 1a 00 	cmpa	#0x0001a,r9	
    951a:	00 00       	bra	@r0		
    951c:	00 00       	bra	@r0		
    951e:	00 00       	bra	@r0		
    9520:	44 00       	rrcm.a	#1,	r4	
    9522:	9a 00 1e 00 	cmpa	#0x0001e,r10	
    9526:	00 00       	bra	@r0		
    9528:	00 00       	bra	@r0		
    952a:	00 00       	bra	@r0		
    952c:	44 00       	rrcm.a	#1,	r4	
    952e:	99 00 28 00 	cmpa	#0x00028,r9	
    9532:	00 00       	bra	@r0		
    9534:	00 00       	bra	@r0		
    9536:	00 00       	bra	@r0		
    9538:	44 00       	rrcm.a	#1,	r4	
    953a:	1d 03       	mova	#-1,	r13	;r3 As==11
    953c:	2c 00 00 00 	mova	&0x00000,r12	
    9540:	00 00       	bra	@r0		
    9542:	00 00       	bra	@r0		
    9544:	44 00       	rrcm.a	#1,	r4	
    9546:	a1 00 32 00 	adda	#0x00032,r1	
    954a:	00 00       	bra	@r0		
    954c:	00 00       	bra	@r0		
    954e:	00 00       	bra	@r0		
    9550:	44 00       	rrcm.a	#1,	r4	
    9552:	a0 00 38 00 	adda	#0x00038,r0	
    9556:	00 00       	bra	@r0		
    9558:	00 00       	bra	@r0		
    955a:	00 00       	bra	@r0		
    955c:	44 00       	rrcm.a	#1,	r4	
    955e:	aa 00 3c 00 	adda	#0x0003c,r10	
    9562:	00 00       	bra	@r0		
    9564:	00 00       	bra	@r0		
    9566:	00 00       	bra	@r0		
    9568:	44 00       	rrcm.a	#1,	r4	
    956a:	a9 00 42 00 	adda	#0x00042,r9	
    956e:	00 00       	bra	@r0		
    9570:	00 00       	bra	@r0		
    9572:	00 00       	bra	@r0		
    9574:	44 00       	rrcm.a	#1,	r4	
    9576:	21 03 46 00 	mova	&0x30046,r1	
    957a:	00 00       	bra	@r0		
    957c:	00 00       	bra	@r0		
    957e:	00 00       	bra	@r0		
    9580:	44 00       	rrcm.a	#1,	r4	
    9582:	60 03 4a 00 	mova	#0,	&0x0004a;r3 As==00
    9586:	00 00       	bra	@r0		
    9588:	00 00       	bra	@r0		
    958a:	00 00       	bra	@r0		
    958c:	44 00       	rrcm.a	#1,	r4	
    958e:	90 00 4e 00 	cmpa	#0x0004e,r0	
    9592:	00 00       	bra	@r0		
    9594:	00 00       	bra	@r0		
    9596:	00 00       	bra	@r0		
    9598:	44 00       	rrcm.a	#1,	r4	
    959a:	8d 00 52 00 	mova	#0x00052,r13	
    959e:	00 00       	bra	@r0		
    95a0:	00 00       	bra	@r0		
    95a2:	00 00       	bra	@r0		
    95a4:	44 00       	rrcm.a	#1,	r4	
    95a6:	a1 00 54 00 	adda	#0x00054,r1	
    95aa:	00 00       	bra	@r0		
    95ac:	00 00       	bra	@r0		
    95ae:	00 00       	bra	@r0		
    95b0:	44 00       	rrcm.a	#1,	r4	
    95b2:	a0 00 5a 00 	adda	#0x0005a,r0	
    95b6:	00 00       	bra	@r0		
    95b8:	00 00       	bra	@r0		
    95ba:	00 00       	bra	@r0		
    95bc:	44 00       	rrcm.a	#1,	r4	
    95be:	28 03 5e 00 	mova	&0x3005e,r8	
    95c2:	00 00       	bra	@r0		
    95c4:	00 00       	bra	@r0		
    95c6:	00 00       	bra	@r0		
    95c8:	44 00       	rrcm.a	#1,	r4	
    95ca:	29 03 66 00 	mova	&0x30066,r9	
    95ce:	00 00       	bra	@r0		
    95d0:	00 00       	bra	@r0		
    95d2:	00 00       	bra	@r0		
    95d4:	44 00       	rrcm.a	#1,	r4	
    95d6:	2a 03 6a 00 	mova	&0x3006a,r10	
    95da:	00 00       	bra	@r0		
    95dc:	00 00       	bra	@r0		
    95de:	00 00       	bra	@r0		
    95e0:	44 00       	rrcm.a	#1,	r4	
    95e2:	aa 00 6c 00 	adda	#0x0006c,r10	
    95e6:	00 00       	bra	@r0		
    95e8:	00 00       	bra	@r0		
    95ea:	00 00       	bra	@r0		
    95ec:	44 00       	rrcm.a	#1,	r4	
    95ee:	a9 00 72 00 	adda	#0x00072,r9	
    95f2:	00 00       	bra	@r0		
    95f4:	00 00       	bra	@r0		
    95f6:	00 00       	bra	@r0		
    95f8:	44 00       	rrcm.a	#1,	r4	
    95fa:	2e 03 76 00 	mova	&0x30076,r14	
    95fe:	00 00       	bra	@r0		
    9600:	00 00       	bra	@r0		
    9602:	00 00       	bra	@r0		
    9604:	44 00       	rrcm.a	#1,	r4	
    9606:	2f 03 7a 00 	mova	&0x3007a,r15	
    960a:	00 00       	bra	@r0		
    960c:	00 00       	bra	@r0		
    960e:	00 00       	bra	@r0		
    9610:	44 00       	rrcm.a	#1,	r4	
    9612:	39 03 7c 00 	mova	#1,	r9	;r3 As==01
    9616:	00 00       	bra	@r0		
    9618:	00 00       	bra	@r0		
    961a:	00 00       	bra	@r0		
    961c:	44 00       	rrcm.a	#1,	r4	
    961e:	3a 03 88 00 	mova	#1,	r10	;r3 As==01
    9622:	00 00       	bra	@r0		
    9624:	00 00       	bra	@r0		
    9626:	00 00       	bra	@r0		
    9628:	44 00       	rrcm.a	#1,	r4	
    962a:	3b 03 90 00 	mova	#1,	r11	;r3 As==01
    962e:	00 00       	bra	@r0		
    9630:	00 00       	bra	@r0		
    9632:	00 00       	bra	@r0		
    9634:	44 00       	rrcm.a	#1,	r4	
    9636:	3d 03 98 00 	mova	#1,	r13	;r3 As==01
    963a:	00 00       	bra	@r0		
    963c:	00 00       	bra	@r0		
    963e:	00 00       	bra	@r0		
    9640:	44 00       	rrcm.a	#1,	r4	
    9642:	40 03       	rrum.a	#1,	r0	
    9644:	a2 00 00 00 	adda	#0x00000,r2	
    9648:	00 00       	bra	@r0		
    964a:	00 00       	bra	@r0		
    964c:	44 00       	rrcm.a	#1,	r4	
    964e:	41 03       	rrum.a	#1,	r1	
    9650:	a6 00 00 00 	adda	#0x00000,r6	
    9654:	00 00       	bra	@r0		
    9656:	00 00       	bra	@r0		
    9658:	44 00       	rrcm.a	#1,	r4	
    965a:	43 03       	rrum.a	#1,	#0	;r3 As==00
    965c:	ac 00 00 00 	adda	#0x00000,r12	
    9660:	00 00       	bra	@r0		
    9662:	00 00       	bra	@r0		
    9664:	44 00       	rrcm.a	#1,	r4	
    9666:	44 03       	rrum.a	#1,	r4	
    9668:	b2 00 00 00 	suba	#0x00000,r2	
    966c:	00 00       	bra	@r0		
    966e:	00 00       	bra	@r0		
    9670:	44 00       	rrcm.a	#1,	r4	
    9672:	48 03       	rrum.a	#1,	r8	
    9674:	b6 00 00 00 	suba	#0x00000,r6	
    9678:	00 00       	bra	@r0		
    967a:	00 00       	bra	@r0		
    967c:	44 00       	rrcm.a	#1,	r4	
    967e:	4a 03       	rrum.a	#1,	r10	
    9680:	c0 00       	bra	r0		
    9682:	00 00       	bra	@r0		
    9684:	00 00       	bra	@r0		
    9686:	00 00       	bra	@r0		
    9688:	44 00       	rrcm.a	#1,	r4	
    968a:	4b 03       	rrum.a	#1,	r11	
    968c:	c4 00       	mova	r0,	r4	
    968e:	00 00       	bra	@r0		
    9690:	00 00       	bra	@r0		
    9692:	00 00       	bra	@r0		
    9694:	44 00       	rrcm.a	#1,	r4	
    9696:	4d 03       	rrum.a	#1,	r13	
    9698:	c8 00       	mova	r0,	r8	
    969a:	00 00       	bra	@r0		
    969c:	00 00       	bra	@r0		
    969e:	00 00       	bra	@r0		
    96a0:	44 00       	rrcm.a	#1,	r4	
    96a2:	4e 03       	rrum.a	#1,	r14	
    96a4:	ce 00       	mova	r0,	r14	
    96a6:	00 00       	bra	@r0		
    96a8:	00 00       	bra	@r0		
    96aa:	00 00       	bra	@r0		
    96ac:	44 00       	rrcm.a	#1,	r4	
    96ae:	51 03       	rrum	#1,	r1	
    96b0:	da 00       	cmpa	r0,	r10	
    96b2:	00 00       	bra	@r0		
    96b4:	00 00       	bra	@r0		
    96b6:	00 00       	bra	@r0		
    96b8:	44 00       	rrcm.a	#1,	r4	
    96ba:	5f 03       	rrum	#1,	r15	
    96bc:	ee 00       	adda	r0,	r14	
    96be:	00 00       	bra	@r0		
    96c0:	00 00       	bra	@r0		
    96c2:	00 00       	bra	@r0		
    96c4:	44 00       	rrcm.a	#1,	r4	
    96c6:	53 03       	rrum	#1,	#0	;r3 As==00
    96c8:	f8 00       	suba	r0,	r8	
    96ca:	00 00       	bra	@r0		
    96cc:	00 00       	bra	@r0		
    96ce:	00 00       	bra	@r0		
    96d0:	44 00       	rrcm.a	#1,	r4	
    96d2:	58 03       	rrum	#1,	r8	
    96d4:	fc 00       	suba	r0,	r12	
    96d6:	00 00       	bra	@r0		
    96d8:	00 00       	bra	@r0		
    96da:	00 00       	bra	@r0		
    96dc:	44 00       	rrcm.a	#1,	r4	
    96de:	5b 03       	rrum	#1,	r11	
    96e0:	02 01       	mova	@r1,	r2	
    96e2:	00 00       	bra	@r0		
    96e4:	00 00       	bra	@r0		
    96e6:	00 00       	bra	@r0		
    96e8:	44 00       	rrcm.a	#1,	r4	
    96ea:	62 03 1a 01 	mova	#0,	&0x2011a;r3 As==00
    96ee:	00 00       	bra	@r0		
    96f0:	f6 53 00 00 	add.b	#-1,	0(r6)	;r3 As==11, 0x0000(r6)
    96f4:	40 00       	rrcm.a	#1,	r0	
    96f6:	0f 03       	mova	#2,	r15	;r3 As==10
    96f8:	0e 00       	mova	@r0,	r14	
    96fa:	00 00       	bra	@r0		
    96fc:	01 54       	add	r4,	r1	
    96fe:	00 00       	bra	@r0		
    9700:	40 00       	rrcm.a	#1,	r0	
    9702:	10 03       	bra	#-1		;r3 As==11
    9704:	09 00       	mova	@r0,	r9	
    9706:	00 00       	bra	@r0		
    9708:	12 54 00 00 	add	0(r4),	r2	;0x0000(r4)
    970c:	40 00       	rrcm.a	#1,	r0	
    970e:	11 03       	mova	#-1,	r1	;r3 As==11
    9710:	07 00       	mova	@r0,	r7	
    9712:	00 00       	bra	@r0		
    9714:	25 54       	add	@r4,	r5	
    9716:	00 00       	bra	@r0		
    9718:	40 00       	rrcm.a	#1,	r0	
    971a:	12 03       	mova	#-1,	r2	;r3 As==11
    971c:	05 00       	mova	@r0,	r5	
    971e:	00 00       	bra	@r0		
    9720:	00 00       	bra	@r0		
    9722:	00 00       	bra	@r0		
    9724:	c0 00       	bra	r0		
    9726:	00 00       	bra	@r0		
    9728:	10 00       	bra	#0x00000	
    972a:	00 00       	bra	@r0		
    972c:	00 00       	bra	@r0		
    972e:	00 00       	bra	@r0		
    9730:	e0 00       	adda	r0,	r0	
    9732:	00 00       	bra	@r0		
    9734:	1a 01       	mova	@r1+,	r10	
    9736:	00 00       	bra	@r0		
    9738:	00 00       	bra	@r0		
    973a:	00 00       	bra	@r0		
    973c:	24 00 00 00 	mova	&0x00000,r4	
    9740:	2c 01 00 00 	mova	&0x10000,r12	
    9744:	00 00       	bra	@r0		
    9746:	00 00       	bra	@r0		
    9748:	64 00 00 00 	mova	r0,	&0x40000
    974c:	90 59 00 00 	add	0(r9),	0x4ac5	;0x0000(r9), PC rel. 0x0e217
    9750:	c5 4a 
    9752:	00 00       	bra	@r0		
    9754:	64 00 00 00 	mova	r0,	&0x40000
    9758:	90 59 00 00 	add	0(r9),	0x4f3d	;0x0000(r9), PC rel. 0x0e69b
    975c:	3d 4f 
    975e:	00 00       	bra	@r0		
    9760:	64 00 00 00 	mova	r0,	&0x40000
    9764:	90 59 00 00 	add	0(r9),	0x006a	;0x0000(r9), PC rel. 0x097d4
    9768:	6a 00 
    976a:	00 00       	bra	@r0		
    976c:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0976e
    9770:	00 00       	bra	@r0		
    9772:	00 00       	bra	@r0		
    9774:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    9778:	80 00 00 00 	bra	#0x00000	
    977c:	00 00       	bra	@r0		
    977e:	00 00       	bra	@r0		
    9780:	99 00 00 00 	cmpa	#0x00000,r9	
    9784:	80 00 00 00 	bra	#0x00000	
    9788:	00 00       	bra	@r0		
    978a:	00 00       	bra	@r0		
    978c:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    978e:	00 00       	bra	@r0		
    9790:	80 00 00 00 	bra	#0x00000	
    9794:	00 00       	bra	@r0		
    9796:	00 00       	bra	@r0		
    9798:	ec 00       	adda	r0,	r12	
    979a:	00 00       	bra	@r0		
    979c:	80 00 00 00 	bra	#0x00000	
    97a0:	00 00       	bra	@r0		
    97a2:	00 00       	bra	@r0		
    97a4:	24 01 00 00 	mova	&0x10000,r4	
    97a8:	80 00 00 00 	bra	#0x00000	
    97ac:	00 00       	bra	@r0		
    97ae:	00 00       	bra	@r0		
    97b0:	66 01 00 00 	mova	r1,	&0x60000
    97b4:	80 00 00 00 	bra	#0x00000	
    97b8:	00 00       	bra	@r0		
    97ba:	00 00       	bra	@r0		
    97bc:	b7 01 00 00 	suba	#0x10000,r7	
    97c0:	80 00 00 00 	bra	#0x00000	
    97c4:	00 00       	bra	@r0		
    97c6:	00 00       	bra	@r0		
    97c8:	08 02       	mova	#4,	r8	;r2 As==10
    97ca:	00 00       	bra	@r0		
    97cc:	80 00 00 00 	bra	#0x00000	
    97d0:	00 00       	bra	@r0		
    97d2:	00 00       	bra	@r0		
    97d4:	2e 02 00 00 	mova	&0x20000,r14	
    97d8:	80 00 00 00 	bra	#0x00000	
    97dc:	00 00       	bra	@r0		
    97de:	00 00       	bra	@r0		
    97e0:	6c 02 00 00 	mova	r2,	&0xc0000
    97e4:	80 00 00 00 	bra	#0x00000	
    97e8:	00 00       	bra	@r0		
    97ea:	00 00       	bra	@r0		
    97ec:	96 02 00 00 	cmpa	#0x20000,r6	
    97f0:	80 00 00 00 	bra	#0x00000	
    97f4:	00 00       	bra	@r0		
    97f6:	00 00       	bra	@r0		
    97f8:	bf 02 00 00 	suba	#0x20000,r15	
    97fc:	80 00 00 00 	bra	#0x00000	
    9800:	00 00       	bra	@r0		
    9802:	00 00       	bra	@r0		
    9804:	d9 02       	cmpa	r2,	r9	
    9806:	00 00       	bra	@r0		
    9808:	80 00 00 00 	bra	#0x00000	
    980c:	00 00       	bra	@r0		
    980e:	00 00       	bra	@r0		
    9810:	f4 02       	suba	r2,	r4	
    9812:	00 00       	bra	@r0		
    9814:	80 00 00 00 	bra	#0x00000	
    9818:	00 00       	bra	@r0		
    981a:	00 00       	bra	@r0		
    981c:	14 03       	mova	#-1,	r4	;r3 As==11
    981e:	00 00       	bra	@r0		
    9820:	80 00 00 00 	bra	#0x00000	
    9824:	00 00       	bra	@r0		
    9826:	00 00       	bra	@r0		
    9828:	4d 03       	rrum.a	#1,	r13	
    982a:	00 00       	bra	@r0		
    982c:	80 00 00 00 	bra	#0x00000	
    9830:	00 00       	bra	@r0		
    9832:	00 00       	bra	@r0		
    9834:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    9838:	80 00 00 00 	bra	#0x00000	
    983c:	00 00       	bra	@r0		
    983e:	00 00       	bra	@r0		
    9840:	8a 03 00 00 	mova	#0x30000,r10	
    9844:	80 00 00 00 	bra	#0x00000	
    9848:	00 00       	bra	@r0		
    984a:	00 00       	bra	@r0		
    984c:	ae 03 00 00 	adda	#0x30000,r14	
    9850:	80 00 00 00 	bra	#0x00000	
    9854:	00 00       	bra	@r0		
    9856:	00 00       	bra	@r0		
    9858:	d7 03       	tsta	r7		
    985a:	00 00       	bra	@r0		
    985c:	80 00 00 00 	bra	#0x00000	
    9860:	00 00       	bra	@r0		
    9862:	00 00       	bra	@r0		
    9864:	3d 4f       	mov	@r15+,	r13	
    9866:	00 00       	bra	@r0		
    9868:	82 00 00 00 	mova	#0x00000,r2	
    986c:	77 11       	rra.b	@r7+		
    986e:	00 00       	bra	@r0		
    9870:	00 4b       	br	r11		
    9872:	00 00       	bra	@r0		
    9874:	c2 00       	mova	r0,	r2	
    9876:	00 00       	bra	@r0		
    9878:	e5 1d       	.word	0x1de5;	????	
    987a:	00 00       	bra	@r0		
    987c:	7a 4b       	mov.b	@r11+,	r10	
    987e:	00 00       	bra	@r0		
    9880:	c2 00       	mova	r0,	r2	
    9882:	00 00       	bra	@r0		
    9884:	00 00       	bra	@r0		
    9886:	00 00       	bra	@r0		
    9888:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x09950
    988c:	c2 00 
    988e:	00 00       	bra	@r0		
    9890:	00 00       	bra	@r0		
    9892:	00 00       	bra	@r0		
    9894:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    9898:	c2 00       	mova	r0,	r2	
    989a:	00 00       	bra	@r0		
    989c:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    98a0:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    98a4:	c2 00       	mova	r0,	r2	
    98a6:	00 00       	bra	@r0		
    98a8:	00 00       	bra	@r0		
    98aa:	00 00       	bra	@r0		
    98ac:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    98b0:	c2 00       	mova	r0,	r2	
    98b2:	00 00       	bra	@r0		
    98b4:	00 00       	bra	@r0		
    98b6:	00 00       	bra	@r0		
    98b8:	46 4f       	mov.b	r15,	r6	
    98ba:	00 00       	bra	@r0		
    98bc:	c2 00       	mova	r0,	r2	
    98be:	00 00       	bra	@r0		
    98c0:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    98c4:	35 54       	add	@r4+,	r5	
    98c6:	00 00       	bra	@r0		
    98c8:	24 00 10 04 	mova	&0x00410,r4	
    98cc:	90 59 00 00 	add	0(r9),	0x52d7	;0x0000(r9), PC rel. 0x0eba9
    98d0:	d7 52 
    98d2:	00 00       	bra	@r0		
    98d4:	40 00       	rrcm.a	#1,	r0	
    98d6:	0f 04       	mova	@r4,	r15	
    98d8:	0e 00       	mova	@r0,	r14	
    98da:	00 00       	bra	@r0		
    98dc:	e5 52 00 00 	add.b	#4,	0(r5)	;r2 As==10, 0x0000(r5)
    98e0:	40 00       	rrcm.a	#1,	r0	
    98e2:	0f 04       	mova	@r4,	r15	
    98e4:	0c 00       	mova	@r0,	r12	
    98e6:	00 00       	bra	@r0		
    98e8:	00 00       	bra	@r0		
    98ea:	00 00       	bra	@r0		
    98ec:	44 00       	rrcm.a	#1,	r4	
    98ee:	10 04       	bra	@r4+		
	...
    98f8:	44 00       	rrcm.a	#1,	r4	
    98fa:	15 04       	mova	@r4+,	r5	
    98fc:	06 00       	mova	@r0,	r6	
    98fe:	00 00       	bra	@r0		
    9900:	00 00       	bra	@r0		
    9902:	00 00       	bra	@r0		
    9904:	44 00       	rrcm.a	#1,	r4	
    9906:	16 04       	mova	@r4+,	r6	
    9908:	0e 00       	mova	@r0,	r14	
    990a:	00 00       	bra	@r0		
    990c:	00 00       	bra	@r0		
    990e:	00 00       	bra	@r0		
    9910:	44 00       	rrcm.a	#1,	r4	
    9912:	18 04       	mova	@r4+,	r8	
    9914:	16 00       	mova	#0x00000,r6	
    9916:	00 00       	bra	@r0		
    9918:	00 00       	bra	@r0		
    991a:	00 00       	bra	@r0		
    991c:	44 00       	rrcm.a	#1,	r4	
    991e:	19 04       	mova	@r4+,	r9	
    9920:	22 00 00 00 	mova	&0x00000,r2	
    9924:	00 00       	bra	@r0		
    9926:	00 00       	bra	@r0		
    9928:	44 00       	rrcm.a	#1,	r4	
    992a:	9a 00 32 00 	cmpa	#0x00032,r10	
    992e:	00 00       	bra	@r0		
    9930:	00 00       	bra	@r0		
    9932:	00 00       	bra	@r0		
    9934:	44 00       	rrcm.a	#1,	r4	
    9936:	99 00 3c 00 	cmpa	#0x0003c,r9	
    993a:	00 00       	bra	@r0		
    993c:	00 00       	bra	@r0		
    993e:	00 00       	bra	@r0		
    9940:	44 00       	rrcm.a	#1,	r4	
    9942:	9a 00 40 00 	cmpa	#0x00040,r10	
    9946:	00 00       	bra	@r0		
    9948:	00 00       	bra	@r0		
    994a:	00 00       	bra	@r0		
    994c:	44 00       	rrcm.a	#1,	r4	
    994e:	99 00 4a 00 	cmpa	#0x0004a,r9	
    9952:	00 00       	bra	@r0		
    9954:	00 00       	bra	@r0		
    9956:	00 00       	bra	@r0		
    9958:	44 00       	rrcm.a	#1,	r4	
    995a:	1c 04       	mova	@r4+,	r12	
    995c:	4e 00       	rrcm.a	#1,	r14	
    995e:	00 00       	bra	@r0		
    9960:	00 00       	bra	@r0		
    9962:	00 00       	bra	@r0		
    9964:	44 00       	rrcm.a	#1,	r4	
    9966:	1e 04       	mova	@r4+,	r14	
    9968:	52 00       	rrcm	#1,	r2	
    996a:	00 00       	bra	@r0		
    996c:	00 00       	bra	@r0		
    996e:	00 00       	bra	@r0		
    9970:	44 00       	rrcm.a	#1,	r4	
    9972:	1f 04       	mova	@r4+,	r15	
    9974:	5a 00       	rrcm	#1,	r10	
    9976:	00 00       	bra	@r0		
    9978:	f3 52       	add.b	#8,	#1	;r2 As==11, r3 As==01
    997a:	00 00       	bra	@r0		
    997c:	80 00 11 04 	bra	#0x00411	
    9980:	00 00       	bra	@r0		
    9982:	00 00       	bra	@r0		
    9984:	fc 52 00 00 	add.b	#8,	0(r12)	;r2 As==11, 0x0000(r12)
    9988:	80 00 12 04 	bra	#0x00412	
    998c:	08 00       	mova	@r0,	r8	
    998e:	00 00       	bra	@r0		
    9990:	1b 53       	inc	r11		
    9992:	00 00       	bra	@r0		
    9994:	80 00 13 04 	bra	#0x00413	
    9998:	10 00       	bra	#0x00000	
    999a:	00 00       	bra	@r0		
    999c:	25 53       	incd	r5		
    999e:	00 00       	bra	@r0		
    99a0:	80 00 13 04 	bra	#0x00413	
    99a4:	14 00       	mova	#0x00000,r4	
    99a6:	00 00       	bra	@r0		
    99a8:	00 00       	bra	@r0		
    99aa:	00 00       	bra	@r0		
    99ac:	c0 00       	bra	r0		
    99ae:	00 00       	bra	@r0		
    99b0:	06 00       	mova	@r0,	r6	
    99b2:	00 00       	bra	@r0		
    99b4:	00 00       	bra	@r0		
    99b6:	00 00       	bra	@r0		
    99b8:	e0 00       	adda	r0,	r0	
    99ba:	00 00       	bra	@r0		
    99bc:	5a 00       	rrcm	#1,	r10	
    99be:	00 00       	bra	@r0		
    99c0:	00 00       	bra	@r0		
    99c2:	00 00       	bra	@r0		
    99c4:	24 00 00 00 	mova	&0x00000,r4	
    99c8:	62 00 00 00 	mova	r0,	&0x20000
    99cc:	00 00       	bra	@r0		
    99ce:	00 00       	bra	@r0		
    99d0:	64 00 00 00 	mova	r0,	&0x40000
    99d4:	f2 59 00 00 	add.b	@r9+,	&0x0000	
    99d8:	c5 4a 00 00 	mov.b	r10,	0(r5)	;0x0000(r5)
    99dc:	64 00 00 00 	mova	r0,	&0x40000
    99e0:	f2 59 00 00 	add.b	@r9+,	&0x0000	
    99e4:	3d 4f       	mov	@r15+,	r13	
    99e6:	00 00       	bra	@r0		
    99e8:	64 00 00 00 	mova	r0,	&0x40000
    99ec:	f2 59 00 00 	add.b	@r9+,	&0x0000	
    99f0:	6a 00 00 00 	mova	r0,	&0xa0000
    99f4:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x099f6
    99f8:	00 00       	bra	@r0		
    99fa:	00 00       	bra	@r0		
    99fc:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    9a00:	80 00 00 00 	bra	#0x00000	
    9a04:	00 00       	bra	@r0		
    9a06:	00 00       	bra	@r0		
    9a08:	99 00 00 00 	cmpa	#0x00000,r9	
    9a0c:	80 00 00 00 	bra	#0x00000	
    9a10:	00 00       	bra	@r0		
    9a12:	00 00       	bra	@r0		
    9a14:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    9a16:	00 00       	bra	@r0		
    9a18:	80 00 00 00 	bra	#0x00000	
    9a1c:	00 00       	bra	@r0		
    9a1e:	00 00       	bra	@r0		
    9a20:	ec 00       	adda	r0,	r12	
    9a22:	00 00       	bra	@r0		
    9a24:	80 00 00 00 	bra	#0x00000	
    9a28:	00 00       	bra	@r0		
    9a2a:	00 00       	bra	@r0		
    9a2c:	24 01 00 00 	mova	&0x10000,r4	
    9a30:	80 00 00 00 	bra	#0x00000	
    9a34:	00 00       	bra	@r0		
    9a36:	00 00       	bra	@r0		
    9a38:	66 01 00 00 	mova	r1,	&0x60000
    9a3c:	80 00 00 00 	bra	#0x00000	
    9a40:	00 00       	bra	@r0		
    9a42:	00 00       	bra	@r0		
    9a44:	b7 01 00 00 	suba	#0x10000,r7	
    9a48:	80 00 00 00 	bra	#0x00000	
    9a4c:	00 00       	bra	@r0		
    9a4e:	00 00       	bra	@r0		
    9a50:	08 02       	mova	#4,	r8	;r2 As==10
    9a52:	00 00       	bra	@r0		
    9a54:	80 00 00 00 	bra	#0x00000	
    9a58:	00 00       	bra	@r0		
    9a5a:	00 00       	bra	@r0		
    9a5c:	2e 02 00 00 	mova	&0x20000,r14	
    9a60:	80 00 00 00 	bra	#0x00000	
    9a64:	00 00       	bra	@r0		
    9a66:	00 00       	bra	@r0		
    9a68:	6c 02 00 00 	mova	r2,	&0xc0000
    9a6c:	80 00 00 00 	bra	#0x00000	
    9a70:	00 00       	bra	@r0		
    9a72:	00 00       	bra	@r0		
    9a74:	96 02 00 00 	cmpa	#0x20000,r6	
    9a78:	80 00 00 00 	bra	#0x00000	
    9a7c:	00 00       	bra	@r0		
    9a7e:	00 00       	bra	@r0		
    9a80:	bf 02 00 00 	suba	#0x20000,r15	
    9a84:	80 00 00 00 	bra	#0x00000	
    9a88:	00 00       	bra	@r0		
    9a8a:	00 00       	bra	@r0		
    9a8c:	d9 02       	cmpa	r2,	r9	
    9a8e:	00 00       	bra	@r0		
    9a90:	80 00 00 00 	bra	#0x00000	
    9a94:	00 00       	bra	@r0		
    9a96:	00 00       	bra	@r0		
    9a98:	f4 02       	suba	r2,	r4	
    9a9a:	00 00       	bra	@r0		
    9a9c:	80 00 00 00 	bra	#0x00000	
    9aa0:	00 00       	bra	@r0		
    9aa2:	00 00       	bra	@r0		
    9aa4:	14 03       	mova	#-1,	r4	;r3 As==11
    9aa6:	00 00       	bra	@r0		
    9aa8:	80 00 00 00 	bra	#0x00000	
    9aac:	00 00       	bra	@r0		
    9aae:	00 00       	bra	@r0		
    9ab0:	4d 03       	rrum.a	#1,	r13	
    9ab2:	00 00       	bra	@r0		
    9ab4:	80 00 00 00 	bra	#0x00000	
    9ab8:	00 00       	bra	@r0		
    9aba:	00 00       	bra	@r0		
    9abc:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    9ac0:	80 00 00 00 	bra	#0x00000	
    9ac4:	00 00       	bra	@r0		
    9ac6:	00 00       	bra	@r0		
    9ac8:	8a 03 00 00 	mova	#0x30000,r10	
    9acc:	80 00 00 00 	bra	#0x00000	
    9ad0:	00 00       	bra	@r0		
    9ad2:	00 00       	bra	@r0		
    9ad4:	ae 03 00 00 	adda	#0x30000,r14	
    9ad8:	80 00 00 00 	bra	#0x00000	
    9adc:	00 00       	bra	@r0		
    9ade:	00 00       	bra	@r0		
    9ae0:	d7 03       	tsta	r7		
    9ae2:	00 00       	bra	@r0		
    9ae4:	80 00 00 00 	bra	#0x00000	
    9ae8:	00 00       	bra	@r0		
    9aea:	00 00       	bra	@r0		
    9aec:	3d 4f       	mov	@r15+,	r13	
    9aee:	00 00       	bra	@r0		
    9af0:	82 00 00 00 	mova	#0x00000,r2	
    9af4:	68 11       	rra.b	@r8		
    9af6:	00 00       	bra	@r0		
    9af8:	00 4b       	br	r11		
    9afa:	00 00       	bra	@r0		
    9afc:	c2 00       	mova	r0,	r2	
    9afe:	00 00       	bra	@r0		
    9b00:	e5 1d       	.word	0x1de5;	????	
    9b02:	00 00       	bra	@r0		
    9b04:	7a 4b       	mov.b	@r11+,	r10	
    9b06:	00 00       	bra	@r0		
    9b08:	c2 00       	mova	r0,	r2	
    9b0a:	00 00       	bra	@r0		
    9b0c:	00 00       	bra	@r0		
    9b0e:	00 00       	bra	@r0		
    9b10:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x09bd8
    9b14:	c2 00 
    9b16:	00 00       	bra	@r0		
    9b18:	00 00       	bra	@r0		
    9b1a:	00 00       	bra	@r0		
    9b1c:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    9b20:	c2 00       	mova	r0,	r2	
    9b22:	00 00       	bra	@r0		
    9b24:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    9b28:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    9b2c:	c2 00       	mova	r0,	r2	
    9b2e:	00 00       	bra	@r0		
    9b30:	00 00       	bra	@r0		
    9b32:	00 00       	bra	@r0		
    9b34:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    9b38:	c2 00       	mova	r0,	r2	
    9b3a:	00 00       	bra	@r0		
    9b3c:	00 00       	bra	@r0		
    9b3e:	00 00       	bra	@r0		
    9b40:	46 4f       	mov.b	r15,	r6	
    9b42:	00 00       	bra	@r0		
    9b44:	c2 00       	mova	r0,	r2	
    9b46:	00 00       	bra	@r0		
    9b48:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    9b4c:	44 54       	rla.b	r4		
    9b4e:	00 00       	bra	@r0		
    9b50:	24 00 25 04 	mova	&0x00425,r4	
    9b54:	f2 59 00 00 	add.b	@r9+,	&0x0000	
    9b58:	d7 52 00 00 	add.b	&0x0000,64(r7)	;0x0040(r7)
    9b5c:	40 00 
    9b5e:	24 04 0e 00 	mova	&0x4000e,r4	
    9b62:	00 00       	bra	@r0		
    9b64:	e5 52 00 00 	add.b	#4,	0(r5)	;r2 As==10, 0x0000(r5)
    9b68:	40 00       	rrcm.a	#1,	r0	
    9b6a:	24 04 0c 00 	mova	&0x4000c,r4	
    9b6e:	00 00       	bra	@r0		
    9b70:	00 00       	bra	@r0		
    9b72:	00 00       	bra	@r0		
    9b74:	44 00       	rrcm.a	#1,	r4	
    9b76:	25 04 00 00 	mova	&0x40000,r5	
    9b7a:	00 00       	bra	@r0		
    9b7c:	00 00       	bra	@r0		
    9b7e:	00 00       	bra	@r0		
    9b80:	44 00       	rrcm.a	#1,	r4	
    9b82:	2a 04 06 00 	mova	&0x40006,r10	
    9b86:	00 00       	bra	@r0		
    9b88:	00 00       	bra	@r0		
    9b8a:	00 00       	bra	@r0		
    9b8c:	44 00       	rrcm.a	#1,	r4	
    9b8e:	2b 04 0e 00 	mova	&0x4000e,r11	
    9b92:	00 00       	bra	@r0		
    9b94:	00 00       	bra	@r0		
    9b96:	00 00       	bra	@r0		
    9b98:	44 00       	rrcm.a	#1,	r4	
    9b9a:	2d 04 16 00 	mova	&0x40016,r13	
    9b9e:	00 00       	bra	@r0		
    9ba0:	00 00       	bra	@r0		
    9ba2:	00 00       	bra	@r0		
    9ba4:	44 00       	rrcm.a	#1,	r4	
    9ba6:	2e 04 22 00 	mova	&0x40022,r14	
    9baa:	00 00       	bra	@r0		
    9bac:	00 00       	bra	@r0		
    9bae:	00 00       	bra	@r0		
    9bb0:	44 00       	rrcm.a	#1,	r4	
    9bb2:	9a 00 32 00 	cmpa	#0x00032,r10	
    9bb6:	00 00       	bra	@r0		
    9bb8:	00 00       	bra	@r0		
    9bba:	00 00       	bra	@r0		
    9bbc:	44 00       	rrcm.a	#1,	r4	
    9bbe:	99 00 3c 00 	cmpa	#0x0003c,r9	
    9bc2:	00 00       	bra	@r0		
    9bc4:	00 00       	bra	@r0		
    9bc6:	00 00       	bra	@r0		
    9bc8:	44 00       	rrcm.a	#1,	r4	
    9bca:	9a 00 40 00 	cmpa	#0x00040,r10	
    9bce:	00 00       	bra	@r0		
    9bd0:	00 00       	bra	@r0		
    9bd2:	00 00       	bra	@r0		
    9bd4:	44 00       	rrcm.a	#1,	r4	
    9bd6:	99 00 4a 00 	cmpa	#0x0004a,r9	
    9bda:	00 00       	bra	@r0		
    9bdc:	00 00       	bra	@r0		
    9bde:	00 00       	bra	@r0		
    9be0:	44 00       	rrcm.a	#1,	r4	
    9be2:	31 04 4e 00 	mova	78(r4),	r1	;0x004e(r4)
    9be6:	00 00       	bra	@r0		
    9be8:	00 00       	bra	@r0		
    9bea:	00 00       	bra	@r0		
    9bec:	44 00       	rrcm.a	#1,	r4	
    9bee:	32 04 52 00 	mova	82(r4),	r2	;0x0052(r4)
    9bf2:	00 00       	bra	@r0		
    9bf4:	00 00       	bra	@r0		
    9bf6:	00 00       	bra	@r0		
    9bf8:	44 00       	rrcm.a	#1,	r4	
    9bfa:	33 04       	.word	0x0433;	????	Illegal as address instr
    9bfc:	5a 00       	rrcm	#1,	r10	
    9bfe:	00 00       	bra	@r0		
    9c00:	f3 52       	add.b	#8,	#1	;r2 As==11, r3 As==01
    9c02:	00 00       	bra	@r0		
    9c04:	80 00 26 04 	bra	#0x00426	
    9c08:	00 00       	bra	@r0		
    9c0a:	00 00       	bra	@r0		
    9c0c:	fc 52 00 00 	add.b	#8,	0(r12)	;r2 As==11, 0x0000(r12)
    9c10:	80 00 27 04 	bra	#0x00427	
    9c14:	08 00       	mova	@r0,	r8	
    9c16:	00 00       	bra	@r0		
    9c18:	1b 53       	inc	r11		
    9c1a:	00 00       	bra	@r0		
    9c1c:	80 00 28 04 	bra	#0x00428	
    9c20:	10 00       	bra	#0x00000	
    9c22:	00 00       	bra	@r0		
    9c24:	25 53       	incd	r5		
    9c26:	00 00       	bra	@r0		
    9c28:	80 00 28 04 	bra	#0x00428	
    9c2c:	14 00       	mova	#0x00000,r4	
    9c2e:	00 00       	bra	@r0		
    9c30:	00 00       	bra	@r0		
    9c32:	00 00       	bra	@r0		
    9c34:	c0 00       	bra	r0		
    9c36:	00 00       	bra	@r0		
    9c38:	06 00       	mova	@r0,	r6	
    9c3a:	00 00       	bra	@r0		
    9c3c:	00 00       	bra	@r0		
    9c3e:	00 00       	bra	@r0		
    9c40:	e0 00       	adda	r0,	r0	
    9c42:	00 00       	bra	@r0		
    9c44:	5a 00       	rrcm	#1,	r10	
    9c46:	00 00       	bra	@r0		
    9c48:	00 00       	bra	@r0		
    9c4a:	00 00       	bra	@r0		
    9c4c:	24 00 00 00 	mova	&0x00000,r4	
    9c50:	62 00 00 00 	mova	r0,	&0x20000
    9c54:	00 00       	bra	@r0		
    9c56:	00 00       	bra	@r0		
    9c58:	64 00 00 00 	mova	r0,	&0x40000
    9c5c:	54 5a 00 00 	add.b	0(r10),	r4	;0x0000(r10)
    9c60:	c5 4a 00 00 	mov.b	r10,	0(r5)	;0x0000(r5)
    9c64:	64 00 00 00 	mova	r0,	&0x40000
    9c68:	54 5a 00 00 	add.b	0(r10),	r4	;0x0000(r10)
    9c6c:	3d 4f       	mov	@r15+,	r13	
    9c6e:	00 00       	bra	@r0		
    9c70:	64 00 00 00 	mova	r0,	&0x40000
    9c74:	54 5a 00 00 	add.b	0(r10),	r4	;0x0000(r10)
    9c78:	6a 00 00 00 	mova	r0,	&0xa0000
    9c7c:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x09c7e
    9c80:	00 00       	bra	@r0		
    9c82:	00 00       	bra	@r0		
    9c84:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    9c88:	80 00 00 00 	bra	#0x00000	
    9c8c:	00 00       	bra	@r0		
    9c8e:	00 00       	bra	@r0		
    9c90:	99 00 00 00 	cmpa	#0x00000,r9	
    9c94:	80 00 00 00 	bra	#0x00000	
    9c98:	00 00       	bra	@r0		
    9c9a:	00 00       	bra	@r0		
    9c9c:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    9c9e:	00 00       	bra	@r0		
    9ca0:	80 00 00 00 	bra	#0x00000	
    9ca4:	00 00       	bra	@r0		
    9ca6:	00 00       	bra	@r0		
    9ca8:	ec 00       	adda	r0,	r12	
    9caa:	00 00       	bra	@r0		
    9cac:	80 00 00 00 	bra	#0x00000	
    9cb0:	00 00       	bra	@r0		
    9cb2:	00 00       	bra	@r0		
    9cb4:	24 01 00 00 	mova	&0x10000,r4	
    9cb8:	80 00 00 00 	bra	#0x00000	
    9cbc:	00 00       	bra	@r0		
    9cbe:	00 00       	bra	@r0		
    9cc0:	66 01 00 00 	mova	r1,	&0x60000
    9cc4:	80 00 00 00 	bra	#0x00000	
    9cc8:	00 00       	bra	@r0		
    9cca:	00 00       	bra	@r0		
    9ccc:	b7 01 00 00 	suba	#0x10000,r7	
    9cd0:	80 00 00 00 	bra	#0x00000	
    9cd4:	00 00       	bra	@r0		
    9cd6:	00 00       	bra	@r0		
    9cd8:	08 02       	mova	#4,	r8	;r2 As==10
    9cda:	00 00       	bra	@r0		
    9cdc:	80 00 00 00 	bra	#0x00000	
    9ce0:	00 00       	bra	@r0		
    9ce2:	00 00       	bra	@r0		
    9ce4:	2e 02 00 00 	mova	&0x20000,r14	
    9ce8:	80 00 00 00 	bra	#0x00000	
    9cec:	00 00       	bra	@r0		
    9cee:	00 00       	bra	@r0		
    9cf0:	6c 02 00 00 	mova	r2,	&0xc0000
    9cf4:	80 00 00 00 	bra	#0x00000	
    9cf8:	00 00       	bra	@r0		
    9cfa:	00 00       	bra	@r0		
    9cfc:	96 02 00 00 	cmpa	#0x20000,r6	
    9d00:	80 00 00 00 	bra	#0x00000	
    9d04:	00 00       	bra	@r0		
    9d06:	00 00       	bra	@r0		
    9d08:	bf 02 00 00 	suba	#0x20000,r15	
    9d0c:	80 00 00 00 	bra	#0x00000	
    9d10:	00 00       	bra	@r0		
    9d12:	00 00       	bra	@r0		
    9d14:	d9 02       	cmpa	r2,	r9	
    9d16:	00 00       	bra	@r0		
    9d18:	80 00 00 00 	bra	#0x00000	
    9d1c:	00 00       	bra	@r0		
    9d1e:	00 00       	bra	@r0		
    9d20:	f4 02       	suba	r2,	r4	
    9d22:	00 00       	bra	@r0		
    9d24:	80 00 00 00 	bra	#0x00000	
    9d28:	00 00       	bra	@r0		
    9d2a:	00 00       	bra	@r0		
    9d2c:	14 03       	mova	#-1,	r4	;r3 As==11
    9d2e:	00 00       	bra	@r0		
    9d30:	80 00 00 00 	bra	#0x00000	
    9d34:	00 00       	bra	@r0		
    9d36:	00 00       	bra	@r0		
    9d38:	4d 03       	rrum.a	#1,	r13	
    9d3a:	00 00       	bra	@r0		
    9d3c:	80 00 00 00 	bra	#0x00000	
    9d40:	00 00       	bra	@r0		
    9d42:	00 00       	bra	@r0		
    9d44:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    9d48:	80 00 00 00 	bra	#0x00000	
    9d4c:	00 00       	bra	@r0		
    9d4e:	00 00       	bra	@r0		
    9d50:	8a 03 00 00 	mova	#0x30000,r10	
    9d54:	80 00 00 00 	bra	#0x00000	
    9d58:	00 00       	bra	@r0		
    9d5a:	00 00       	bra	@r0		
    9d5c:	ae 03 00 00 	adda	#0x30000,r14	
    9d60:	80 00 00 00 	bra	#0x00000	
    9d64:	00 00       	bra	@r0		
    9d66:	00 00       	bra	@r0		
    9d68:	d7 03       	tsta	r7		
    9d6a:	00 00       	bra	@r0		
    9d6c:	80 00 00 00 	bra	#0x00000	
    9d70:	00 00       	bra	@r0		
    9d72:	00 00       	bra	@r0		
    9d74:	3d 4f       	mov	@r15+,	r13	
    9d76:	00 00       	bra	@r0		
    9d78:	82 00 00 00 	mova	#0x00000,r2	
    9d7c:	7c 11       	rra.b	@r12+		
    9d7e:	00 00       	bra	@r0		
    9d80:	00 4b       	br	r11		
    9d82:	00 00       	bra	@r0		
    9d84:	c2 00       	mova	r0,	r2	
    9d86:	00 00       	bra	@r0		
    9d88:	e5 1d       	.word	0x1de5;	????	
    9d8a:	00 00       	bra	@r0		
    9d8c:	7a 4b       	mov.b	@r11+,	r10	
    9d8e:	00 00       	bra	@r0		
    9d90:	c2 00       	mova	r0,	r2	
    9d92:	00 00       	bra	@r0		
    9d94:	00 00       	bra	@r0		
    9d96:	00 00       	bra	@r0		
    9d98:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x09e60
    9d9c:	c2 00 
    9d9e:	00 00       	bra	@r0		
    9da0:	00 00       	bra	@r0		
    9da2:	00 00       	bra	@r0		
    9da4:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    9da8:	c2 00       	mova	r0,	r2	
    9daa:	00 00       	bra	@r0		
    9dac:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    9db0:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    9db4:	c2 00       	mova	r0,	r2	
    9db6:	00 00       	bra	@r0		
    9db8:	00 00       	bra	@r0		
    9dba:	00 00       	bra	@r0		
    9dbc:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    9dc0:	c2 00       	mova	r0,	r2	
    9dc2:	00 00       	bra	@r0		
    9dc4:	00 00       	bra	@r0		
    9dc6:	00 00       	bra	@r0		
    9dc8:	46 4f       	mov.b	r15,	r6	
    9dca:	00 00       	bra	@r0		
    9dcc:	c2 00       	mova	r0,	r2	
    9dce:	00 00       	bra	@r0		
    9dd0:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    9dd4:	53 54       	.word	0x5453;	????	Illegal as 2-op instr
    9dd6:	00 00       	bra	@r0		
    9dd8:	24 00 39 04 	mova	&0x00439,r4	
    9ddc:	54 5a 00 00 	add.b	0(r10),	r4	;0x0000(r10)
    9de0:	d7 52 00 00 	add.b	&0x0000,64(r7)	;0x0040(r7)
    9de4:	40 00 
    9de6:	38 04 0e 00 	mova	14(r4),	r8	;0x000e(r4)
    9dea:	00 00       	bra	@r0		
    9dec:	e5 52 00 00 	add.b	#4,	0(r5)	;r2 As==10, 0x0000(r5)
    9df0:	40 00       	rrcm.a	#1,	r0	
    9df2:	38 04 0c 00 	mova	12(r4),	r8	;0x000c(r4)
    9df6:	00 00       	bra	@r0		
    9df8:	00 00       	bra	@r0		
    9dfa:	00 00       	bra	@r0		
    9dfc:	44 00       	rrcm.a	#1,	r4	
    9dfe:	39 04 00 00 	mova	0(r4),	r9	;0x0000(r4)
    9e02:	00 00       	bra	@r0		
    9e04:	00 00       	bra	@r0		
    9e06:	00 00       	bra	@r0		
    9e08:	44 00       	rrcm.a	#1,	r4	
    9e0a:	3e 04 06 00 	mova	6(r4),	r14	;0x0006(r4)
    9e0e:	00 00       	bra	@r0		
    9e10:	00 00       	bra	@r0		
    9e12:	00 00       	bra	@r0		
    9e14:	44 00       	rrcm.a	#1,	r4	
    9e16:	3f 04 0e 00 	mova	14(r4),	r15	;0x000e(r4)
    9e1a:	00 00       	bra	@r0		
    9e1c:	00 00       	bra	@r0		
    9e1e:	00 00       	bra	@r0		
    9e20:	44 00       	rrcm.a	#1,	r4	
    9e22:	41 04       	rrcm.a	#2,	r1	
    9e24:	16 00       	mova	#0x00000,r6	
    9e26:	00 00       	bra	@r0		
    9e28:	00 00       	bra	@r0		
    9e2a:	00 00       	bra	@r0		
    9e2c:	44 00       	rrcm.a	#1,	r4	
    9e2e:	42 04       	rrcm.a	#2,	r2	
    9e30:	22 00 00 00 	mova	&0x00000,r2	
    9e34:	00 00       	bra	@r0		
    9e36:	00 00       	bra	@r0		
    9e38:	44 00       	rrcm.a	#1,	r4	
    9e3a:	9a 00 32 00 	cmpa	#0x00032,r10	
    9e3e:	00 00       	bra	@r0		
    9e40:	00 00       	bra	@r0		
    9e42:	00 00       	bra	@r0		
    9e44:	44 00       	rrcm.a	#1,	r4	
    9e46:	99 00 3c 00 	cmpa	#0x0003c,r9	
    9e4a:	00 00       	bra	@r0		
    9e4c:	00 00       	bra	@r0		
    9e4e:	00 00       	bra	@r0		
    9e50:	44 00       	rrcm.a	#1,	r4	
    9e52:	9a 00 40 00 	cmpa	#0x00040,r10	
    9e56:	00 00       	bra	@r0		
    9e58:	00 00       	bra	@r0		
    9e5a:	00 00       	bra	@r0		
    9e5c:	44 00       	rrcm.a	#1,	r4	
    9e5e:	99 00 4a 00 	cmpa	#0x0004a,r9	
    9e62:	00 00       	bra	@r0		
    9e64:	00 00       	bra	@r0		
    9e66:	00 00       	bra	@r0		
    9e68:	44 00       	rrcm.a	#1,	r4	
    9e6a:	45 04       	rrcm.a	#2,	r5	
    9e6c:	4e 00       	rrcm.a	#1,	r14	
    9e6e:	00 00       	bra	@r0		
    9e70:	00 00       	bra	@r0		
    9e72:	00 00       	bra	@r0		
    9e74:	44 00       	rrcm.a	#1,	r4	
    9e76:	47 04       	rrcm.a	#2,	r7	
    9e78:	52 00       	rrcm	#1,	r2	
    9e7a:	00 00       	bra	@r0		
    9e7c:	00 00       	bra	@r0		
    9e7e:	00 00       	bra	@r0		
    9e80:	44 00       	rrcm.a	#1,	r4	
    9e82:	48 04       	rrcm.a	#2,	r8	
    9e84:	5a 00       	rrcm	#1,	r10	
    9e86:	00 00       	bra	@r0		
    9e88:	f3 52       	add.b	#8,	#1	;r2 As==11, r3 As==01
    9e8a:	00 00       	bra	@r0		
    9e8c:	80 00 3a 04 	bra	#0x0043a	
    9e90:	00 00       	bra	@r0		
    9e92:	00 00       	bra	@r0		
    9e94:	fc 52 00 00 	add.b	#8,	0(r12)	;r2 As==11, 0x0000(r12)
    9e98:	80 00 3b 04 	bra	#0x0043b	
    9e9c:	08 00       	mova	@r0,	r8	
    9e9e:	00 00       	bra	@r0		
    9ea0:	1b 53       	inc	r11		
    9ea2:	00 00       	bra	@r0		
    9ea4:	80 00 3c 04 	bra	#0x0043c	
    9ea8:	10 00       	bra	#0x00000	
    9eaa:	00 00       	bra	@r0		
    9eac:	25 53       	incd	r5		
    9eae:	00 00       	bra	@r0		
    9eb0:	80 00 3c 04 	bra	#0x0043c	
    9eb4:	14 00       	mova	#0x00000,r4	
    9eb6:	00 00       	bra	@r0		
    9eb8:	00 00       	bra	@r0		
    9eba:	00 00       	bra	@r0		
    9ebc:	c0 00       	bra	r0		
    9ebe:	00 00       	bra	@r0		
    9ec0:	06 00       	mova	@r0,	r6	
    9ec2:	00 00       	bra	@r0		
    9ec4:	00 00       	bra	@r0		
    9ec6:	00 00       	bra	@r0		
    9ec8:	e0 00       	adda	r0,	r0	
    9eca:	00 00       	bra	@r0		
    9ecc:	5a 00       	rrcm	#1,	r10	
    9ece:	00 00       	bra	@r0		
    9ed0:	00 00       	bra	@r0		
    9ed2:	00 00       	bra	@r0		
    9ed4:	24 00 00 00 	mova	&0x00000,r4	
    9ed8:	62 00 00 00 	mova	r0,	&0x20000
    9edc:	00 00       	bra	@r0		
    9ede:	00 00       	bra	@r0		
    9ee0:	64 00 00 00 	mova	r0,	&0x40000
    9ee4:	b6 5a 00 00 	add	@r10+,	0(r6)	;0x0000(r6)
    9ee8:	c5 4a 00 00 	mov.b	r10,	0(r5)	;0x0000(r5)
    9eec:	64 00 00 00 	mova	r0,	&0x40000
    9ef0:	b6 5a 00 00 	add	@r10+,	0(r6)	;0x0000(r6)
    9ef4:	3d 4f       	mov	@r15+,	r13	
    9ef6:	00 00       	bra	@r0		
    9ef8:	64 00 00 00 	mova	r0,	&0x40000
    9efc:	b6 5a 00 00 	add	@r10+,	0(r6)	;0x0000(r6)
    9f00:	6a 00 00 00 	mova	r0,	&0xa0000
    9f04:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x09f06
    9f08:	00 00       	bra	@r0		
    9f0a:	00 00       	bra	@r0		
    9f0c:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    9f10:	80 00 00 00 	bra	#0x00000	
    9f14:	00 00       	bra	@r0		
    9f16:	00 00       	bra	@r0		
    9f18:	99 00 00 00 	cmpa	#0x00000,r9	
    9f1c:	80 00 00 00 	bra	#0x00000	
    9f20:	00 00       	bra	@r0		
    9f22:	00 00       	bra	@r0		
    9f24:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    9f26:	00 00       	bra	@r0		
    9f28:	80 00 00 00 	bra	#0x00000	
    9f2c:	00 00       	bra	@r0		
    9f2e:	00 00       	bra	@r0		
    9f30:	ec 00       	adda	r0,	r12	
    9f32:	00 00       	bra	@r0		
    9f34:	80 00 00 00 	bra	#0x00000	
    9f38:	00 00       	bra	@r0		
    9f3a:	00 00       	bra	@r0		
    9f3c:	24 01 00 00 	mova	&0x10000,r4	
    9f40:	80 00 00 00 	bra	#0x00000	
    9f44:	00 00       	bra	@r0		
    9f46:	00 00       	bra	@r0		
    9f48:	66 01 00 00 	mova	r1,	&0x60000
    9f4c:	80 00 00 00 	bra	#0x00000	
    9f50:	00 00       	bra	@r0		
    9f52:	00 00       	bra	@r0		
    9f54:	b7 01 00 00 	suba	#0x10000,r7	
    9f58:	80 00 00 00 	bra	#0x00000	
    9f5c:	00 00       	bra	@r0		
    9f5e:	00 00       	bra	@r0		
    9f60:	08 02       	mova	#4,	r8	;r2 As==10
    9f62:	00 00       	bra	@r0		
    9f64:	80 00 00 00 	bra	#0x00000	
    9f68:	00 00       	bra	@r0		
    9f6a:	00 00       	bra	@r0		
    9f6c:	2e 02 00 00 	mova	&0x20000,r14	
    9f70:	80 00 00 00 	bra	#0x00000	
    9f74:	00 00       	bra	@r0		
    9f76:	00 00       	bra	@r0		
    9f78:	6c 02 00 00 	mova	r2,	&0xc0000
    9f7c:	80 00 00 00 	bra	#0x00000	
    9f80:	00 00       	bra	@r0		
    9f82:	00 00       	bra	@r0		
    9f84:	96 02 00 00 	cmpa	#0x20000,r6	
    9f88:	80 00 00 00 	bra	#0x00000	
    9f8c:	00 00       	bra	@r0		
    9f8e:	00 00       	bra	@r0		
    9f90:	bf 02 00 00 	suba	#0x20000,r15	
    9f94:	80 00 00 00 	bra	#0x00000	
    9f98:	00 00       	bra	@r0		
    9f9a:	00 00       	bra	@r0		
    9f9c:	d9 02       	cmpa	r2,	r9	
    9f9e:	00 00       	bra	@r0		
    9fa0:	80 00 00 00 	bra	#0x00000	
    9fa4:	00 00       	bra	@r0		
    9fa6:	00 00       	bra	@r0		
    9fa8:	f4 02       	suba	r2,	r4	
    9faa:	00 00       	bra	@r0		
    9fac:	80 00 00 00 	bra	#0x00000	
    9fb0:	00 00       	bra	@r0		
    9fb2:	00 00       	bra	@r0		
    9fb4:	14 03       	mova	#-1,	r4	;r3 As==11
    9fb6:	00 00       	bra	@r0		
    9fb8:	80 00 00 00 	bra	#0x00000	
    9fbc:	00 00       	bra	@r0		
    9fbe:	00 00       	bra	@r0		
    9fc0:	4d 03       	rrum.a	#1,	r13	
    9fc2:	00 00       	bra	@r0		
    9fc4:	80 00 00 00 	bra	#0x00000	
    9fc8:	00 00       	bra	@r0		
    9fca:	00 00       	bra	@r0		
    9fcc:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    9fd0:	80 00 00 00 	bra	#0x00000	
    9fd4:	00 00       	bra	@r0		
    9fd6:	00 00       	bra	@r0		
    9fd8:	8a 03 00 00 	mova	#0x30000,r10	
    9fdc:	80 00 00 00 	bra	#0x00000	
    9fe0:	00 00       	bra	@r0		
    9fe2:	00 00       	bra	@r0		
    9fe4:	ae 03 00 00 	adda	#0x30000,r14	
    9fe8:	80 00 00 00 	bra	#0x00000	
    9fec:	00 00       	bra	@r0		
    9fee:	00 00       	bra	@r0		
    9ff0:	d7 03       	tsta	r7		
    9ff2:	00 00       	bra	@r0		
    9ff4:	80 00 00 00 	bra	#0x00000	
    9ff8:	00 00       	bra	@r0		
    9ffa:	00 00       	bra	@r0		
    9ffc:	3d 4f       	mov	@r15+,	r13	
    9ffe:	00 00       	bra	@r0		
    a000:	82 00 00 00 	mova	#0x00000,r2	
    a004:	11 0b       	mova	@r11+,	r1	
    a006:	00 00       	bra	@r0		
    a008:	00 4b       	br	r11		
    a00a:	00 00       	bra	@r0		
    a00c:	c2 00       	mova	r0,	r2	
    a00e:	00 00       	bra	@r0		
    a010:	e5 1d       	.word	0x1de5;	????	
    a012:	00 00       	bra	@r0		
    a014:	7a 4b       	mov.b	@r11+,	r10	
    a016:	00 00       	bra	@r0		
    a018:	c2 00       	mova	r0,	r2	
    a01a:	00 00       	bra	@r0		
    a01c:	00 00       	bra	@r0		
    a01e:	00 00       	bra	@r0		
    a020:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x0a0e8
    a024:	c2 00 
    a026:	00 00       	bra	@r0		
    a028:	00 00       	bra	@r0		
    a02a:	00 00       	bra	@r0		
    a02c:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    a030:	c2 00       	mova	r0,	r2	
    a032:	00 00       	bra	@r0		
    a034:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    a038:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    a03c:	c2 00       	mova	r0,	r2	
    a03e:	00 00       	bra	@r0		
    a040:	00 00       	bra	@r0		
    a042:	00 00       	bra	@r0		
    a044:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    a048:	c2 00       	mova	r0,	r2	
    a04a:	00 00       	bra	@r0		
    a04c:	00 00       	bra	@r0		
    a04e:	00 00       	bra	@r0		
    a050:	46 4f       	mov.b	r15,	r6	
    a052:	00 00       	bra	@r0		
    a054:	c2 00       	mova	r0,	r2	
    a056:	00 00       	bra	@r0		
    a058:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    a05c:	62 54       	add.b	@r4,	r2	
    a05e:	00 00       	bra	@r0		
    a060:	24 00 77 04 	mova	&0x00477,r4	
    a064:	b6 5a 00 00 	add	@r10+,	0(r6)	;0x0000(r6)
    a068:	76 54       	add.b	@r4+,	r6	
    a06a:	00 00       	bra	@r0		
    a06c:	40 00       	rrcm.a	#1,	r0	
    a06e:	76 04 0d 00 	mova	r4,	13(r6)	;0x000d(r6)
    a072:	00 00       	bra	@r0		
    a074:	00 00       	bra	@r0		
    a076:	00 00       	bra	@r0		
    a078:	44 00       	rrcm.a	#1,	r4	
    a07a:	77 04 00 00 	mova	r4,	0(r7)	;0x0000(r7)
    a07e:	00 00       	bra	@r0		
    a080:	00 00       	bra	@r0		
    a082:	00 00       	bra	@r0		
    a084:	44 00       	rrcm.a	#1,	r4	
    a086:	7a 04 08 00 	mova	r4,	8(r10)	;0x0008(r10)
    a08a:	00 00       	bra	@r0		
    a08c:	00 00       	bra	@r0		
    a08e:	00 00       	bra	@r0		
    a090:	44 00       	rrcm.a	#1,	r4	
    a092:	7b 04 0e 00 	mova	r4,	14(r11)	;0x000e(r11)
    a096:	00 00       	bra	@r0		
    a098:	00 00       	bra	@r0		
    a09a:	00 00       	bra	@r0		
    a09c:	44 00       	rrcm.a	#1,	r4	
    a09e:	7c 04 1a 00 	mova	r4,	26(r12)	;0x001a(r12)
    a0a2:	00 00       	bra	@r0		
    a0a4:	00 00       	bra	@r0		
    a0a6:	00 00       	bra	@r0		
    a0a8:	44 00       	rrcm.a	#1,	r4	
    a0aa:	7e 04 22 00 	mova	r4,	34(r14)	;0x0022(r14)
    a0ae:	00 00       	bra	@r0		
    a0b0:	00 00       	bra	@r0		
    a0b2:	00 00       	bra	@r0		
    a0b4:	44 00       	rrcm.a	#1,	r4	
    a0b6:	96 04 26 00 	cmpa	#0x40026,r6	
    a0ba:	00 00       	bra	@r0		
    a0bc:	00 00       	bra	@r0		
    a0be:	00 00       	bra	@r0		
    a0c0:	44 00       	rrcm.a	#1,	r4	
    a0c2:	82 04 2e 00 	mova	#0x4002e,r2	
    a0c6:	00 00       	bra	@r0		
    a0c8:	00 00       	bra	@r0		
    a0ca:	00 00       	bra	@r0		
    a0cc:	44 00       	rrcm.a	#1,	r4	
    a0ce:	83 04       	.word	0x0483;	????	Illegal as address instr
    a0d0:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0a0d2
    a0d4:	00 00       	bra	@r0		
    a0d6:	00 00       	bra	@r0		
    a0d8:	44 00       	rrcm.a	#1,	r4	
    a0da:	87 04 38 00 	mova	#0x40038,r7	
    a0de:	00 00       	bra	@r0		
    a0e0:	00 00       	bra	@r0		
    a0e2:	00 00       	bra	@r0		
    a0e4:	44 00       	rrcm.a	#1,	r4	
    a0e6:	8b 04 42 00 	mova	#0x40042,r11	
    a0ea:	00 00       	bra	@r0		
    a0ec:	00 00       	bra	@r0		
    a0ee:	00 00       	bra	@r0		
    a0f0:	44 00       	rrcm.a	#1,	r4	
    a0f2:	8e 04 4a 00 	mova	#0x4004a,r14	
    a0f6:	00 00       	bra	@r0		
    a0f8:	00 00       	bra	@r0		
    a0fa:	00 00       	bra	@r0		
    a0fc:	44 00       	rrcm.a	#1,	r4	
    a0fe:	90 04 52 00 	cmpa	#0x40052,r0	
    a102:	00 00       	bra	@r0		
    a104:	00 00       	bra	@r0		
    a106:	00 00       	bra	@r0		
    a108:	44 00       	rrcm.a	#1,	r4	
    a10a:	92 04 64 00 	cmpa	#0x40064,r2	
    a10e:	00 00       	bra	@r0		
    a110:	00 00       	bra	@r0		
    a112:	00 00       	bra	@r0		
    a114:	44 00       	rrcm.a	#1,	r4	
    a116:	93 04       	.word	0x0493;	????	Illegal as address instr
    a118:	6c 00 00 00 	mova	r0,	&0xc0000
    a11c:	00 00       	bra	@r0		
    a11e:	00 00       	bra	@r0		
    a120:	44 00       	rrcm.a	#1,	r4	
    a122:	89 04 86 00 	mova	#0x40086,r9	
    a126:	00 00       	bra	@r0		
    a128:	00 00       	bra	@r0		
    a12a:	00 00       	bra	@r0		
    a12c:	44 00       	rrcm.a	#1,	r4	
    a12e:	97 04 8c 00 	cmpa	#0x4008c,r7	
    a132:	00 00       	bra	@r0		
    a134:	83 54       	add	r4,	#1	;r3 As==01
    a136:	00 00       	bra	@r0		
    a138:	80 00 78 04 	bra	#0x00478	
	...
    a144:	c0 00       	bra	r0		
    a146:	00 00       	bra	@r0		
    a148:	08 00       	mova	@r0,	r8	
    a14a:	00 00       	bra	@r0		
    a14c:	00 00       	bra	@r0		
    a14e:	00 00       	bra	@r0		
    a150:	e0 00       	adda	r0,	r0	
    a152:	00 00       	bra	@r0		
    a154:	8c 00 00 00 	mova	#0x00000,r12	
    a158:	00 00       	bra	@r0		
    a15a:	00 00       	bra	@r0		
    a15c:	24 00 00 00 	mova	&0x00000,r4	
    a160:	92 00 00 00 	cmpa	#0x00000,r2	
    a164:	00 00       	bra	@r0		
    a166:	00 00       	bra	@r0		
    a168:	64 00 00 00 	mova	r0,	&0x40000
    a16c:	48 5b       	add.b	r11,	r8	
    a16e:	00 00       	bra	@r0		
    a170:	c5 4a 00 00 	mov.b	r10,	0(r5)	;0x0000(r5)
    a174:	64 00 00 00 	mova	r0,	&0x40000
    a178:	48 5b       	add.b	r11,	r8	
    a17a:	00 00       	bra	@r0		
    a17c:	3d 4f       	mov	@r15+,	r13	
    a17e:	00 00       	bra	@r0		
    a180:	64 00 00 00 	mova	r0,	&0x40000
    a184:	48 5b       	add.b	r11,	r8	
    a186:	00 00       	bra	@r0		
    a188:	6a 00 00 00 	mova	r0,	&0xa0000
    a18c:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0a18e
    a190:	00 00       	bra	@r0		
    a192:	00 00       	bra	@r0		
    a194:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    a198:	80 00 00 00 	bra	#0x00000	
    a19c:	00 00       	bra	@r0		
    a19e:	00 00       	bra	@r0		
    a1a0:	99 00 00 00 	cmpa	#0x00000,r9	
    a1a4:	80 00 00 00 	bra	#0x00000	
    a1a8:	00 00       	bra	@r0		
    a1aa:	00 00       	bra	@r0		
    a1ac:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    a1ae:	00 00       	bra	@r0		
    a1b0:	80 00 00 00 	bra	#0x00000	
    a1b4:	00 00       	bra	@r0		
    a1b6:	00 00       	bra	@r0		
    a1b8:	ec 00       	adda	r0,	r12	
    a1ba:	00 00       	bra	@r0		
    a1bc:	80 00 00 00 	bra	#0x00000	
    a1c0:	00 00       	bra	@r0		
    a1c2:	00 00       	bra	@r0		
    a1c4:	24 01 00 00 	mova	&0x10000,r4	
    a1c8:	80 00 00 00 	bra	#0x00000	
    a1cc:	00 00       	bra	@r0		
    a1ce:	00 00       	bra	@r0		
    a1d0:	66 01 00 00 	mova	r1,	&0x60000
    a1d4:	80 00 00 00 	bra	#0x00000	
    a1d8:	00 00       	bra	@r0		
    a1da:	00 00       	bra	@r0		
    a1dc:	b7 01 00 00 	suba	#0x10000,r7	
    a1e0:	80 00 00 00 	bra	#0x00000	
    a1e4:	00 00       	bra	@r0		
    a1e6:	00 00       	bra	@r0		
    a1e8:	08 02       	mova	#4,	r8	;r2 As==10
    a1ea:	00 00       	bra	@r0		
    a1ec:	80 00 00 00 	bra	#0x00000	
    a1f0:	00 00       	bra	@r0		
    a1f2:	00 00       	bra	@r0		
    a1f4:	2e 02 00 00 	mova	&0x20000,r14	
    a1f8:	80 00 00 00 	bra	#0x00000	
    a1fc:	00 00       	bra	@r0		
    a1fe:	00 00       	bra	@r0		
    a200:	6c 02 00 00 	mova	r2,	&0xc0000
    a204:	80 00 00 00 	bra	#0x00000	
    a208:	00 00       	bra	@r0		
    a20a:	00 00       	bra	@r0		
    a20c:	96 02 00 00 	cmpa	#0x20000,r6	
    a210:	80 00 00 00 	bra	#0x00000	
    a214:	00 00       	bra	@r0		
    a216:	00 00       	bra	@r0		
    a218:	bf 02 00 00 	suba	#0x20000,r15	
    a21c:	80 00 00 00 	bra	#0x00000	
    a220:	00 00       	bra	@r0		
    a222:	00 00       	bra	@r0		
    a224:	d9 02       	cmpa	r2,	r9	
    a226:	00 00       	bra	@r0		
    a228:	80 00 00 00 	bra	#0x00000	
    a22c:	00 00       	bra	@r0		
    a22e:	00 00       	bra	@r0		
    a230:	f4 02       	suba	r2,	r4	
    a232:	00 00       	bra	@r0		
    a234:	80 00 00 00 	bra	#0x00000	
    a238:	00 00       	bra	@r0		
    a23a:	00 00       	bra	@r0		
    a23c:	14 03       	mova	#-1,	r4	;r3 As==11
    a23e:	00 00       	bra	@r0		
    a240:	80 00 00 00 	bra	#0x00000	
    a244:	00 00       	bra	@r0		
    a246:	00 00       	bra	@r0		
    a248:	4d 03       	rrum.a	#1,	r13	
    a24a:	00 00       	bra	@r0		
    a24c:	80 00 00 00 	bra	#0x00000	
    a250:	00 00       	bra	@r0		
    a252:	00 00       	bra	@r0		
    a254:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    a258:	80 00 00 00 	bra	#0x00000	
    a25c:	00 00       	bra	@r0		
    a25e:	00 00       	bra	@r0		
    a260:	8a 03 00 00 	mova	#0x30000,r10	
    a264:	80 00 00 00 	bra	#0x00000	
    a268:	00 00       	bra	@r0		
    a26a:	00 00       	bra	@r0		
    a26c:	ae 03 00 00 	adda	#0x30000,r14	
    a270:	80 00 00 00 	bra	#0x00000	
    a274:	00 00       	bra	@r0		
    a276:	00 00       	bra	@r0		
    a278:	d7 03       	tsta	r7		
    a27a:	00 00       	bra	@r0		
    a27c:	80 00 00 00 	bra	#0x00000	
    a280:	00 00       	bra	@r0		
    a282:	00 00       	bra	@r0		
    a284:	3d 4f       	mov	@r15+,	r13	
    a286:	00 00       	bra	@r0		
    a288:	82 00 00 00 	mova	#0x00000,r2	
    a28c:	bb 0b 00 00 	suba	#0xb0000,r11	
    a290:	00 4b       	br	r11		
    a292:	00 00       	bra	@r0		
    a294:	c2 00       	mova	r0,	r2	
    a296:	00 00       	bra	@r0		
    a298:	e5 1d       	.word	0x1de5;	????	
    a29a:	00 00       	bra	@r0		
    a29c:	7a 4b       	mov.b	@r11+,	r10	
    a29e:	00 00       	bra	@r0		
    a2a0:	c2 00       	mova	r0,	r2	
    a2a2:	00 00       	bra	@r0		
    a2a4:	00 00       	bra	@r0		
    a2a6:	00 00       	bra	@r0		
    a2a8:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x0a370
    a2ac:	c2 00 
    a2ae:	00 00       	bra	@r0		
    a2b0:	00 00       	bra	@r0		
    a2b2:	00 00       	bra	@r0		
    a2b4:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    a2b8:	c2 00       	mova	r0,	r2	
    a2ba:	00 00       	bra	@r0		
    a2bc:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    a2c0:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    a2c4:	c2 00       	mova	r0,	r2	
    a2c6:	00 00       	bra	@r0		
    a2c8:	00 00       	bra	@r0		
    a2ca:	00 00       	bra	@r0		
    a2cc:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    a2d0:	c2 00       	mova	r0,	r2	
    a2d2:	00 00       	bra	@r0		
    a2d4:	00 00       	bra	@r0		
    a2d6:	00 00       	bra	@r0		
    a2d8:	46 4f       	mov.b	r15,	r6	
    a2da:	00 00       	bra	@r0		
    a2dc:	c2 00       	mova	r0,	r2	
    a2de:	00 00       	bra	@r0		
    a2e0:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    a2e4:	8d 54 00 00 	add	r4,	0(r13)	;0x0000(r13)
    a2e8:	24 00 bd 04 	mova	&0x004bd,r4	
    a2ec:	48 5b       	add.b	r11,	r8	
    a2ee:	00 00       	bra	@r0		
    a2f0:	d7 52 00 00 	add.b	&0x0000,64(r7)	;0x0040(r7)
    a2f4:	40 00 
    a2f6:	bc 04 0e 00 	suba	#0x4000e,r12	
    a2fa:	00 00       	bra	@r0		
    a2fc:	00 00       	bra	@r0		
    a2fe:	00 00       	bra	@r0		
    a300:	44 00       	rrcm.a	#1,	r4	
    a302:	bd 04 00 00 	suba	#0x40000,r13	
    a306:	00 00       	bra	@r0		
    a308:	00 00       	bra	@r0		
    a30a:	00 00       	bra	@r0		
    a30c:	44 00       	rrcm.a	#1,	r4	
    a30e:	c2 04       	mova	r4,	r2	
    a310:	04 00       	mova	@r0,	r4	
    a312:	00 00       	bra	@r0		
    a314:	00 00       	bra	@r0		
    a316:	00 00       	bra	@r0		
    a318:	44 00       	rrcm.a	#1,	r4	
    a31a:	c3 04       	.word	0x04c3;	????	Illegal as address instr
    a31c:	0c 00       	mova	@r0,	r12	
    a31e:	00 00       	bra	@r0		
    a320:	00 00       	bra	@r0		
    a322:	00 00       	bra	@r0		
    a324:	44 00       	rrcm.a	#1,	r4	
    a326:	aa 00 16 00 	adda	#0x00016,r10	
    a32a:	00 00       	bra	@r0		
    a32c:	00 00       	bra	@r0		
    a32e:	00 00       	bra	@r0		
    a330:	44 00       	rrcm.a	#1,	r4	
    a332:	a9 00 1e 00 	adda	#0x0001e,r9	
    a336:	00 00       	bra	@r0		
    a338:	00 00       	bra	@r0		
    a33a:	00 00       	bra	@r0		
    a33c:	44 00       	rrcm.a	#1,	r4	
    a33e:	9a 00 22 00 	cmpa	#0x00022,r10	
    a342:	00 00       	bra	@r0		
    a344:	00 00       	bra	@r0		
    a346:	00 00       	bra	@r0		
    a348:	44 00       	rrcm.a	#1,	r4	
    a34a:	99 00 2a 00 	cmpa	#0x0002a,r9	
    a34e:	00 00       	bra	@r0		
    a350:	00 00       	bra	@r0		
    a352:	00 00       	bra	@r0		
    a354:	44 00       	rrcm.a	#1,	r4	
    a356:	a1 00 2e 00 	adda	#0x0002e,r1	
    a35a:	00 00       	bra	@r0		
    a35c:	00 00       	bra	@r0		
    a35e:	00 00       	bra	@r0		
    a360:	44 00       	rrcm.a	#1,	r4	
    a362:	a0 00 34 00 	adda	#0x00034,r0	
    a366:	00 00       	bra	@r0		
    a368:	00 00       	bra	@r0		
    a36a:	00 00       	bra	@r0		
    a36c:	44 00       	rrcm.a	#1,	r4	
    a36e:	cd 04       	mova	r4,	r13	
    a370:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x0a372
    a374:	00 00       	bra	@r0		
    a376:	00 00       	bra	@r0		
    a378:	44 00       	rrcm.a	#1,	r4	
    a37a:	cf 04       	mova	r4,	r15	
    a37c:	40 00       	rrcm.a	#1,	r0	
    a37e:	00 00       	bra	@r0		
    a380:	00 00       	bra	@r0		
    a382:	00 00       	bra	@r0		
    a384:	44 00       	rrcm.a	#1,	r4	
    a386:	d0 04       	cmpa	r4,	r0	
    a388:	46 00       	rrcm.a	#1,	r6	
    a38a:	00 00       	bra	@r0		
    a38c:	00 00       	bra	@r0		
    a38e:	00 00       	bra	@r0		
    a390:	44 00       	rrcm.a	#1,	r4	
    a392:	d1 04       	cmpa	r4,	r1	
    a394:	5c 00       	rrcm	#1,	r12	
    a396:	00 00       	bra	@r0		
    a398:	00 00       	bra	@r0		
    a39a:	00 00       	bra	@r0		
    a39c:	44 00       	rrcm.a	#1,	r4	
    a39e:	d2 04       	cmpa	r4,	r2	
    a3a0:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
    a3a4:	00 00       	bra	@r0		
    a3a6:	00 00       	bra	@r0		
    a3a8:	44 00       	rrcm.a	#1,	r4	
    a3aa:	ce 04       	mova	r4,	r14	
    a3ac:	88 00 00 00 	mova	#0x00000,r8	
    a3b0:	00 00       	bra	@r0		
    a3b2:	00 00       	bra	@r0		
    a3b4:	44 00       	rrcm.a	#1,	r4	
    a3b6:	d3 04       	.word	0x04d3;	????	Illegal as address instr
    a3b8:	96 00 00 00 	cmpa	#0x00000,r6	
    a3bc:	f3 52       	add.b	#8,	#1	;r2 As==11, r3 As==01
    a3be:	00 00       	bra	@r0		
    a3c0:	80 00 be 04 	bra	#0x004be	
    a3c4:	00 00       	bra	@r0		
    a3c6:	00 00       	bra	@r0		
    a3c8:	1b 53       	inc	r11		
    a3ca:	00 00       	bra	@r0		
    a3cc:	80 00 c0 04 	bra	#0x004c0	
    a3d0:	08 00       	mova	@r0,	r8	
    a3d2:	00 00       	bra	@r0		
    a3d4:	00 00       	bra	@r0		
    a3d6:	00 00       	bra	@r0		
    a3d8:	c0 00       	bra	r0		
    a3da:	00 00       	bra	@r0		
    a3dc:	04 00       	mova	@r0,	r4	
    a3de:	00 00       	bra	@r0		
    a3e0:	00 00       	bra	@r0		
    a3e2:	00 00       	bra	@r0		
    a3e4:	e0 00       	adda	r0,	r0	
    a3e6:	00 00       	bra	@r0		
    a3e8:	96 00 00 00 	cmpa	#0x00000,r6	
    a3ec:	00 00       	bra	@r0		
    a3ee:	00 00       	bra	@r0		
    a3f0:	24 00 00 00 	mova	&0x00000,r4	
    a3f4:	9c 00 00 00 	cmpa	#0x00000,r12	
    a3f8:	00 00       	bra	@r0		
    a3fa:	00 00       	bra	@r0		
    a3fc:	64 00 00 00 	mova	r0,	&0x40000
    a400:	e4 5b 00 00 	add.b	@r11,	0(r4)	;0x0000(r4)
    a404:	c5 4a 00 00 	mov.b	r10,	0(r5)	;0x0000(r5)
    a408:	64 00 00 00 	mova	r0,	&0x40000
    a40c:	e4 5b 00 00 	add.b	@r11,	0(r4)	;0x0000(r4)
    a410:	3d 4f       	mov	@r15+,	r13	
    a412:	00 00       	bra	@r0		
    a414:	64 00 00 00 	mova	r0,	&0x40000
    a418:	e4 5b 00 00 	add.b	@r11,	0(r4)	;0x0000(r4)
    a41c:	6a 00 00 00 	mova	r0,	&0xa0000
    a420:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0a422
    a424:	00 00       	bra	@r0		
    a426:	00 00       	bra	@r0		
    a428:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    a42c:	80 00 00 00 	bra	#0x00000	
    a430:	00 00       	bra	@r0		
    a432:	00 00       	bra	@r0		
    a434:	99 00 00 00 	cmpa	#0x00000,r9	
    a438:	80 00 00 00 	bra	#0x00000	
    a43c:	00 00       	bra	@r0		
    a43e:	00 00       	bra	@r0		
    a440:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    a442:	00 00       	bra	@r0		
    a444:	80 00 00 00 	bra	#0x00000	
    a448:	00 00       	bra	@r0		
    a44a:	00 00       	bra	@r0		
    a44c:	ec 00       	adda	r0,	r12	
    a44e:	00 00       	bra	@r0		
    a450:	80 00 00 00 	bra	#0x00000	
    a454:	00 00       	bra	@r0		
    a456:	00 00       	bra	@r0		
    a458:	24 01 00 00 	mova	&0x10000,r4	
    a45c:	80 00 00 00 	bra	#0x00000	
    a460:	00 00       	bra	@r0		
    a462:	00 00       	bra	@r0		
    a464:	66 01 00 00 	mova	r1,	&0x60000
    a468:	80 00 00 00 	bra	#0x00000	
    a46c:	00 00       	bra	@r0		
    a46e:	00 00       	bra	@r0		
    a470:	b7 01 00 00 	suba	#0x10000,r7	
    a474:	80 00 00 00 	bra	#0x00000	
    a478:	00 00       	bra	@r0		
    a47a:	00 00       	bra	@r0		
    a47c:	08 02       	mova	#4,	r8	;r2 As==10
    a47e:	00 00       	bra	@r0		
    a480:	80 00 00 00 	bra	#0x00000	
    a484:	00 00       	bra	@r0		
    a486:	00 00       	bra	@r0		
    a488:	2e 02 00 00 	mova	&0x20000,r14	
    a48c:	80 00 00 00 	bra	#0x00000	
    a490:	00 00       	bra	@r0		
    a492:	00 00       	bra	@r0		
    a494:	6c 02 00 00 	mova	r2,	&0xc0000
    a498:	80 00 00 00 	bra	#0x00000	
    a49c:	00 00       	bra	@r0		
    a49e:	00 00       	bra	@r0		
    a4a0:	96 02 00 00 	cmpa	#0x20000,r6	
    a4a4:	80 00 00 00 	bra	#0x00000	
    a4a8:	00 00       	bra	@r0		
    a4aa:	00 00       	bra	@r0		
    a4ac:	bf 02 00 00 	suba	#0x20000,r15	
    a4b0:	80 00 00 00 	bra	#0x00000	
    a4b4:	00 00       	bra	@r0		
    a4b6:	00 00       	bra	@r0		
    a4b8:	d9 02       	cmpa	r2,	r9	
    a4ba:	00 00       	bra	@r0		
    a4bc:	80 00 00 00 	bra	#0x00000	
    a4c0:	00 00       	bra	@r0		
    a4c2:	00 00       	bra	@r0		
    a4c4:	f4 02       	suba	r2,	r4	
    a4c6:	00 00       	bra	@r0		
    a4c8:	80 00 00 00 	bra	#0x00000	
    a4cc:	00 00       	bra	@r0		
    a4ce:	00 00       	bra	@r0		
    a4d0:	14 03       	mova	#-1,	r4	;r3 As==11
    a4d2:	00 00       	bra	@r0		
    a4d4:	80 00 00 00 	bra	#0x00000	
    a4d8:	00 00       	bra	@r0		
    a4da:	00 00       	bra	@r0		
    a4dc:	4d 03       	rrum.a	#1,	r13	
    a4de:	00 00       	bra	@r0		
    a4e0:	80 00 00 00 	bra	#0x00000	
    a4e4:	00 00       	bra	@r0		
    a4e6:	00 00       	bra	@r0		
    a4e8:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    a4ec:	80 00 00 00 	bra	#0x00000	
    a4f0:	00 00       	bra	@r0		
    a4f2:	00 00       	bra	@r0		
    a4f4:	8a 03 00 00 	mova	#0x30000,r10	
    a4f8:	80 00 00 00 	bra	#0x00000	
    a4fc:	00 00       	bra	@r0		
    a4fe:	00 00       	bra	@r0		
    a500:	ae 03 00 00 	adda	#0x30000,r14	
    a504:	80 00 00 00 	bra	#0x00000	
    a508:	00 00       	bra	@r0		
    a50a:	00 00       	bra	@r0		
    a50c:	d7 03       	tsta	r7		
    a50e:	00 00       	bra	@r0		
    a510:	80 00 00 00 	bra	#0x00000	
    a514:	00 00       	bra	@r0		
    a516:	00 00       	bra	@r0		
    a518:	3d 4f       	mov	@r15+,	r13	
    a51a:	00 00       	bra	@r0		
    a51c:	82 00 00 00 	mova	#0x00000,r2	
    a520:	2e 07 00 00 	mova	&0x70000,r14	
    a524:	00 4b       	br	r11		
    a526:	00 00       	bra	@r0		
    a528:	c2 00       	mova	r0,	r2	
    a52a:	00 00       	bra	@r0		
    a52c:	e5 1d       	.word	0x1de5;	????	
    a52e:	00 00       	bra	@r0		
    a530:	7a 4b       	mov.b	@r11+,	r10	
    a532:	00 00       	bra	@r0		
    a534:	c2 00       	mova	r0,	r2	
    a536:	00 00       	bra	@r0		
    a538:	00 00       	bra	@r0		
    a53a:	00 00       	bra	@r0		
    a53c:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x0a604
    a540:	c2 00 
    a542:	00 00       	bra	@r0		
    a544:	00 00       	bra	@r0		
    a546:	00 00       	bra	@r0		
    a548:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    a54c:	c2 00       	mova	r0,	r2	
    a54e:	00 00       	bra	@r0		
    a550:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    a554:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    a558:	c2 00       	mova	r0,	r2	
    a55a:	00 00       	bra	@r0		
    a55c:	00 00       	bra	@r0		
    a55e:	00 00       	bra	@r0		
    a560:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    a564:	c2 00       	mova	r0,	r2	
    a566:	00 00       	bra	@r0		
    a568:	00 00       	bra	@r0		
    a56a:	00 00       	bra	@r0		
    a56c:	46 4f       	mov.b	r15,	r6	
    a56e:	00 00       	bra	@r0		
    a570:	c2 00       	mova	r0,	r2	
    a572:	00 00       	bra	@r0		
    a574:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    a578:	9e 54 00 00 	add	0(r4),	32(r14)	;0x0000(r4), 0x0020(r14)
    a57c:	20 00 
    a57e:	81 00 00 00 	mova	#0x00000,r1	
    a582:	00 00       	bra	@r0		
    a584:	00 00       	bra	@r0		
    a586:	00 00       	bra	@r0		
    a588:	64 00 00 00 	mova	r0,	&0x40000
    a58c:	ec 5b 00 00 	add.b	@r11,	0(r12)	;0x0000(r12)
    a590:	c5 4a 00 00 	mov.b	r10,	0(r5)	;0x0000(r5)
    a594:	64 00 00 00 	mova	r0,	&0x40000
    a598:	ec 5b 00 00 	add.b	@r11,	0(r12)	;0x0000(r12)
    a59c:	3d 4f       	mov	@r15+,	r13	
    a59e:	00 00       	bra	@r0		
    a5a0:	64 00 00 00 	mova	r0,	&0x40000
    a5a4:	ec 5b 00 00 	add.b	@r11,	0(r12)	;0x0000(r12)
    a5a8:	6a 00 00 00 	mova	r0,	&0xa0000
    a5ac:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0a5ae
    a5b0:	00 00       	bra	@r0		
    a5b2:	00 00       	bra	@r0		
    a5b4:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    a5b8:	80 00 00 00 	bra	#0x00000	
    a5bc:	00 00       	bra	@r0		
    a5be:	00 00       	bra	@r0		
    a5c0:	99 00 00 00 	cmpa	#0x00000,r9	
    a5c4:	80 00 00 00 	bra	#0x00000	
    a5c8:	00 00       	bra	@r0		
    a5ca:	00 00       	bra	@r0		
    a5cc:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    a5ce:	00 00       	bra	@r0		
    a5d0:	80 00 00 00 	bra	#0x00000	
    a5d4:	00 00       	bra	@r0		
    a5d6:	00 00       	bra	@r0		
    a5d8:	ec 00       	adda	r0,	r12	
    a5da:	00 00       	bra	@r0		
    a5dc:	80 00 00 00 	bra	#0x00000	
    a5e0:	00 00       	bra	@r0		
    a5e2:	00 00       	bra	@r0		
    a5e4:	24 01 00 00 	mova	&0x10000,r4	
    a5e8:	80 00 00 00 	bra	#0x00000	
    a5ec:	00 00       	bra	@r0		
    a5ee:	00 00       	bra	@r0		
    a5f0:	66 01 00 00 	mova	r1,	&0x60000
    a5f4:	80 00 00 00 	bra	#0x00000	
    a5f8:	00 00       	bra	@r0		
    a5fa:	00 00       	bra	@r0		
    a5fc:	b7 01 00 00 	suba	#0x10000,r7	
    a600:	80 00 00 00 	bra	#0x00000	
    a604:	00 00       	bra	@r0		
    a606:	00 00       	bra	@r0		
    a608:	08 02       	mova	#4,	r8	;r2 As==10
    a60a:	00 00       	bra	@r0		
    a60c:	80 00 00 00 	bra	#0x00000	
    a610:	00 00       	bra	@r0		
    a612:	00 00       	bra	@r0		
    a614:	2e 02 00 00 	mova	&0x20000,r14	
    a618:	80 00 00 00 	bra	#0x00000	
    a61c:	00 00       	bra	@r0		
    a61e:	00 00       	bra	@r0		
    a620:	6c 02 00 00 	mova	r2,	&0xc0000
    a624:	80 00 00 00 	bra	#0x00000	
    a628:	00 00       	bra	@r0		
    a62a:	00 00       	bra	@r0		
    a62c:	96 02 00 00 	cmpa	#0x20000,r6	
    a630:	80 00 00 00 	bra	#0x00000	
    a634:	00 00       	bra	@r0		
    a636:	00 00       	bra	@r0		
    a638:	bf 02 00 00 	suba	#0x20000,r15	
    a63c:	80 00 00 00 	bra	#0x00000	
    a640:	00 00       	bra	@r0		
    a642:	00 00       	bra	@r0		
    a644:	d9 02       	cmpa	r2,	r9	
    a646:	00 00       	bra	@r0		
    a648:	80 00 00 00 	bra	#0x00000	
    a64c:	00 00       	bra	@r0		
    a64e:	00 00       	bra	@r0		
    a650:	f4 02       	suba	r2,	r4	
    a652:	00 00       	bra	@r0		
    a654:	80 00 00 00 	bra	#0x00000	
    a658:	00 00       	bra	@r0		
    a65a:	00 00       	bra	@r0		
    a65c:	14 03       	mova	#-1,	r4	;r3 As==11
    a65e:	00 00       	bra	@r0		
    a660:	80 00 00 00 	bra	#0x00000	
    a664:	00 00       	bra	@r0		
    a666:	00 00       	bra	@r0		
    a668:	4d 03       	rrum.a	#1,	r13	
    a66a:	00 00       	bra	@r0		
    a66c:	80 00 00 00 	bra	#0x00000	
    a670:	00 00       	bra	@r0		
    a672:	00 00       	bra	@r0		
    a674:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    a678:	80 00 00 00 	bra	#0x00000	
    a67c:	00 00       	bra	@r0		
    a67e:	00 00       	bra	@r0		
    a680:	8a 03 00 00 	mova	#0x30000,r10	
    a684:	80 00 00 00 	bra	#0x00000	
    a688:	00 00       	bra	@r0		
    a68a:	00 00       	bra	@r0		
    a68c:	ae 03 00 00 	adda	#0x30000,r14	
    a690:	80 00 00 00 	bra	#0x00000	
    a694:	00 00       	bra	@r0		
    a696:	00 00       	bra	@r0		
    a698:	d7 03       	tsta	r7		
    a69a:	00 00       	bra	@r0		
    a69c:	80 00 00 00 	bra	#0x00000	
    a6a0:	00 00       	bra	@r0		
    a6a2:	00 00       	bra	@r0		
    a6a4:	3d 4f       	mov	@r15+,	r13	
    a6a6:	00 00       	bra	@r0		
    a6a8:	82 00 00 00 	mova	#0x00000,r2	
    a6ac:	f4 1f       	.word	0x1ff4;	????	
    a6ae:	00 00       	bra	@r0		
    a6b0:	00 4b       	br	r11		
    a6b2:	00 00       	bra	@r0		
    a6b4:	c2 00       	mova	r0,	r2	
    a6b6:	00 00       	bra	@r0		
    a6b8:	e5 1d       	.word	0x1de5;	????	
    a6ba:	00 00       	bra	@r0		
    a6bc:	7a 4b       	mov.b	@r11+,	r10	
    a6be:	00 00       	bra	@r0		
    a6c0:	c2 00       	mova	r0,	r2	
    a6c2:	00 00       	bra	@r0		
    a6c4:	00 00       	bra	@r0		
    a6c6:	00 00       	bra	@r0		
    a6c8:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x0a790
    a6cc:	c2 00 
    a6ce:	00 00       	bra	@r0		
    a6d0:	00 00       	bra	@r0		
    a6d2:	00 00       	bra	@r0		
    a6d4:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    a6d8:	c2 00       	mova	r0,	r2	
    a6da:	00 00       	bra	@r0		
    a6dc:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    a6e0:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    a6e4:	c2 00       	mova	r0,	r2	
    a6e6:	00 00       	bra	@r0		
    a6e8:	00 00       	bra	@r0		
    a6ea:	00 00       	bra	@r0		
    a6ec:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    a6f0:	c2 00       	mova	r0,	r2	
    a6f2:	00 00       	bra	@r0		
    a6f4:	00 00       	bra	@r0		
    a6f6:	00 00       	bra	@r0		
    a6f8:	46 4f       	mov.b	r15,	r6	
    a6fa:	00 00       	bra	@r0		
    a6fc:	c2 00       	mova	r0,	r2	
    a6fe:	00 00       	bra	@r0		
    a700:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    a704:	b9 54 00 00 	add	@r4+,	0(r9)	;0x0000(r9)
    a708:	24 00 b9 00 	mova	&0x000b9,r4	
    a70c:	ec 5b 00 00 	add.b	@r11,	0(r12)	;0x0000(r12)
    a710:	ca 54 00 00 	add.b	r4,	0(r10)	;0x0000(r10)
    a714:	40 00       	rrcm.a	#1,	r0	
    a716:	b8 00 0f 00 	suba	#0x0000f,r8	
    a71a:	00 00       	bra	@r0		
    a71c:	00 00       	bra	@r0		
    a71e:	00 00       	bra	@r0		
    a720:	44 00       	rrcm.a	#1,	r4	
    a722:	b9 00 00 00 	suba	#0x00000,r9	
    a726:	00 00       	bra	@r0		
    a728:	00 00       	bra	@r0		
    a72a:	00 00       	bra	@r0		
    a72c:	44 00       	rrcm.a	#1,	r4	
    a72e:	bb 00 0c 00 	suba	#0x0000c,r11	
    a732:	00 00       	bra	@r0		
    a734:	00 00       	bra	@r0		
    a736:	00 00       	bra	@r0		
    a738:	44 00       	rrcm.a	#1,	r4	
    a73a:	bc 00 14 00 	suba	#0x00014,r12	
    a73e:	00 00       	bra	@r0		
    a740:	00 00       	bra	@r0		
    a742:	00 00       	bra	@r0		
    a744:	44 00       	rrcm.a	#1,	r4	
    a746:	bd 00 18 00 	suba	#0x00018,r13	
    a74a:	00 00       	bra	@r0		
    a74c:	00 00       	bra	@r0		
    a74e:	00 00       	bra	@r0		
    a750:	44 00       	rrcm.a	#1,	r4	
    a752:	9a 00 1a 00 	cmpa	#0x0001a,r10	
    a756:	00 00       	bra	@r0		
    a758:	00 00       	bra	@r0		
    a75a:	00 00       	bra	@r0		
    a75c:	44 00       	rrcm.a	#1,	r4	
    a75e:	99 00 24 00 	cmpa	#0x00024,r9	
    a762:	00 00       	bra	@r0		
    a764:	00 00       	bra	@r0		
    a766:	00 00       	bra	@r0		
    a768:	44 00       	rrcm.a	#1,	r4	
    a76a:	c1 00       	mova	r0,	r1	
    a76c:	28 00 00 00 	mova	&0x00000,r8	
    a770:	00 00       	bra	@r0		
    a772:	00 00       	bra	@r0		
    a774:	44 00       	rrcm.a	#1,	r4	
    a776:	c4 00       	mova	r0,	r4	
    a778:	2c 00 00 00 	mova	&0x00000,r12	
    a77c:	00 00       	bra	@r0		
    a77e:	00 00       	bra	@r0		
    a780:	44 00       	rrcm.a	#1,	r4	
    a782:	a1 00 32 00 	adda	#0x00032,r1	
    a786:	00 00       	bra	@r0		
    a788:	00 00       	bra	@r0		
    a78a:	00 00       	bra	@r0		
    a78c:	44 00       	rrcm.a	#1,	r4	
    a78e:	a0 00 38 00 	adda	#0x00038,r0	
    a792:	00 00       	bra	@r0		
    a794:	00 00       	bra	@r0		
    a796:	00 00       	bra	@r0		
    a798:	44 00       	rrcm.a	#1,	r4	
    a79a:	aa 00 3c 00 	adda	#0x0003c,r10	
    a79e:	00 00       	bra	@r0		
    a7a0:	00 00       	bra	@r0		
    a7a2:	00 00       	bra	@r0		
    a7a4:	44 00       	rrcm.a	#1,	r4	
    a7a6:	a9 00 42 00 	adda	#0x00042,r9	
    a7aa:	00 00       	bra	@r0		
    a7ac:	00 00       	bra	@r0		
    a7ae:	00 00       	bra	@r0		
    a7b0:	44 00       	rrcm.a	#1,	r4	
    a7b2:	d1 00       	cmpa	r0,	r1	
    a7b4:	46 00       	rrcm.a	#1,	r6	
    a7b6:	00 00       	bra	@r0		
    a7b8:	00 00       	bra	@r0		
    a7ba:	00 00       	bra	@r0		
    a7bc:	44 00       	rrcm.a	#1,	r4	
    a7be:	d7 00       	cmpa	r0,	r7	
    a7c0:	4e 00       	rrcm.a	#1,	r14	
    a7c2:	00 00       	bra	@r0		
    a7c4:	00 00       	bra	@r0		
    a7c6:	00 00       	bra	@r0		
    a7c8:	44 00       	rrcm.a	#1,	r4	
    a7ca:	dd 00       	cmpa	r0,	r13	
    a7cc:	58 00       	rrcm	#1,	r8	
    a7ce:	00 00       	bra	@r0		
    a7d0:	00 00       	bra	@r0		
    a7d2:	00 00       	bra	@r0		
    a7d4:	44 00       	rrcm.a	#1,	r4	
    a7d6:	e1 00       	adda	r0,	r1	
    a7d8:	5e 00       	rrcm	#1,	r14	
    a7da:	00 00       	bra	@r0		
    a7dc:	00 00       	bra	@r0		
    a7de:	00 00       	bra	@r0		
    a7e0:	44 00       	rrcm.a	#1,	r4	
    a7e2:	e4 00       	adda	r0,	r4	
    a7e4:	64 00 00 00 	mova	r0,	&0x40000
    a7e8:	00 00       	bra	@r0		
    a7ea:	00 00       	bra	@r0		
    a7ec:	44 00       	rrcm.a	#1,	r4	
    a7ee:	eb 00       	adda	r0,	r11	
    a7f0:	68 00 00 00 	mova	r0,	&0x80000
    a7f4:	00 00       	bra	@r0		
    a7f6:	00 00       	bra	@r0		
    a7f8:	44 00       	rrcm.a	#1,	r4	
    a7fa:	f3 00       	.word	0x00f3;	????	Illegal as address instr
    a7fc:	7c 00 00 00 	mova	r0,	0(r12)	;0x0000(r12)
    a800:	00 00       	bra	@r0		
    a802:	00 00       	bra	@r0		
    a804:	44 00       	rrcm.a	#1,	r4	
    a806:	f7 00       	suba	r0,	r7	
    a808:	82 00 00 00 	mova	#0x00000,r2	
    a80c:	00 00       	bra	@r0		
    a80e:	00 00       	bra	@r0		
    a810:	44 00       	rrcm.a	#1,	r4	
    a812:	f9 00       	suba	r0,	r9	
    a814:	88 00 00 00 	mova	#0x00000,r8	
    a818:	00 00       	bra	@r0		
    a81a:	00 00       	bra	@r0		
    a81c:	44 00       	rrcm.a	#1,	r4	
    a81e:	fb 00       	suba	r0,	r11	
    a820:	8a 00 00 00 	mova	#0x00000,r10	
    a824:	00 00       	bra	@r0		
    a826:	00 00       	bra	@r0		
    a828:	44 00       	rrcm.a	#1,	r4	
    a82a:	17 01       	mova	@r1+,	r7	
    a82c:	8a 00 00 00 	mova	#0x00000,r10	
    a830:	00 00       	bra	@r0		
    a832:	00 00       	bra	@r0		
    a834:	44 00       	rrcm.a	#1,	r4	
    a836:	ed 00       	adda	r0,	r13	
    a838:	aa 00 00 00 	adda	#0x00000,r10	
    a83c:	00 00       	bra	@r0		
    a83e:	00 00       	bra	@r0		
    a840:	44 00       	rrcm.a	#1,	r4	
    a842:	ee 00       	adda	r0,	r14	
    a844:	ae 00 00 00 	adda	#0x00000,r14	
    a848:	00 00       	bra	@r0		
    a84a:	00 00       	bra	@r0		
    a84c:	44 00       	rrcm.a	#1,	r4	
    a84e:	e8 00       	adda	r0,	r8	
    a850:	b6 00 00 00 	suba	#0x00000,r6	
    a854:	00 00       	bra	@r0		
    a856:	00 00       	bra	@r0		
    a858:	44 00       	rrcm.a	#1,	r4	
    a85a:	e9 00       	adda	r0,	r9	
    a85c:	da 00       	cmpa	r0,	r10	
    a85e:	00 00       	bra	@r0		
    a860:	00 00       	bra	@r0		
    a862:	00 00       	bra	@r0		
    a864:	44 00       	rrcm.a	#1,	r4	
    a866:	fd 00       	suba	r0,	r13	
    a868:	fa 00       	suba	r0,	r10	
    a86a:	00 00       	bra	@r0		
    a86c:	00 00       	bra	@r0		
    a86e:	00 00       	bra	@r0		
    a870:	44 00       	rrcm.a	#1,	r4	
    a872:	ff 00       	suba	r0,	r15	
    a874:	00 01       	bra	@r1		
    a876:	00 00       	bra	@r0		
    a878:	00 00       	bra	@r0		
    a87a:	00 00       	bra	@r0		
    a87c:	44 00       	rrcm.a	#1,	r4	
    a87e:	00 01       	bra	@r1		
    a880:	04 01       	mova	@r1,	r4	
    a882:	00 00       	bra	@r0		
    a884:	00 00       	bra	@r0		
    a886:	00 00       	bra	@r0		
    a888:	44 00       	rrcm.a	#1,	r4	
    a88a:	04 01       	mova	@r1,	r4	
    a88c:	0a 01       	mova	@r1,	r10	
    a88e:	00 00       	bra	@r0		
    a890:	00 00       	bra	@r0		
    a892:	00 00       	bra	@r0		
    a894:	44 00       	rrcm.a	#1,	r4	
    a896:	08 01       	mova	@r1,	r8	
    a898:	10 01       	reta			
    a89a:	00 00       	bra	@r0		
    a89c:	00 00       	bra	@r0		
    a89e:	00 00       	bra	@r0		
    a8a0:	44 00       	rrcm.a	#1,	r4	
    a8a2:	10 01       	reta			
    a8a4:	24 01 00 00 	mova	&0x10000,r4	
    a8a8:	00 00       	bra	@r0		
    a8aa:	00 00       	bra	@r0		
    a8ac:	44 00       	rrcm.a	#1,	r4	
    a8ae:	12 01       	mova	@r1+,	r2	
    a8b0:	2a 01 00 00 	mova	&0x10000,r10	
    a8b4:	00 00       	bra	@r0		
    a8b6:	00 00       	bra	@r0		
    a8b8:	44 00       	rrcm.a	#1,	r4	
    a8ba:	14 01       	mova	@r1+,	r4	
    a8bc:	30 01 00 00 	bra	0(r1)		;0x0000(r1)
    a8c0:	00 00       	bra	@r0		
    a8c2:	00 00       	bra	@r0		
    a8c4:	44 00       	rrcm.a	#1,	r4	
    a8c6:	15 01       	mova	@r1+,	r5	
    a8c8:	36 01 00 00 	mova	0(r1),	r6	;0x0000(r1)
    a8cc:	00 00       	bra	@r0		
    a8ce:	00 00       	bra	@r0		
    a8d0:	44 00       	rrcm.a	#1,	r4	
    a8d2:	0a 01       	mova	@r1,	r10	
    a8d4:	3a 01 00 00 	mova	0(r1),	r10	;0x0000(r1)
    a8d8:	00 00       	bra	@r0		
    a8da:	00 00       	bra	@r0		
    a8dc:	44 00       	rrcm.a	#1,	r4	
    a8de:	0b 01       	mova	@r1,	r11	
    a8e0:	3e 01 00 00 	mova	0(r1),	r14	;0x0000(r1)
    a8e4:	00 00       	bra	@r0		
    a8e6:	00 00       	bra	@r0		
    a8e8:	44 00       	rrcm.a	#1,	r4	
    a8ea:	1f 01       	mova	@r1+,	r15	
    a8ec:	4e 01       	rram.a	#1,	r14	
    a8ee:	00 00       	bra	@r0		
    a8f0:	00 00       	bra	@r0		
    a8f2:	00 00       	bra	@r0		
    a8f4:	44 00       	rrcm.a	#1,	r4	
    a8f6:	20 01 66 01 	bra	&0x10166	
    a8fa:	00 00       	bra	@r0		
    a8fc:	00 00       	bra	@r0		
    a8fe:	00 00       	bra	@r0		
    a900:	44 00       	rrcm.a	#1,	r4	
    a902:	21 01 86 01 	mova	&0x10186,r1	
    a906:	00 00       	bra	@r0		
    a908:	00 00       	bra	@r0		
    a90a:	00 00       	bra	@r0		
    a90c:	44 00       	rrcm.a	#1,	r4	
    a90e:	31 01 9c 01 	mova	412(r1),r1	;0x019c(r1)
    a912:	00 00       	bra	@r0		
    a914:	dd 54 00 00 	add.b	0(r4),	128(r13);0x0000(r4), 0x0080(r13)
    a918:	80 00 
    a91a:	ba 00 00 00 	suba	#0x00000,r10	
    a91e:	00 00       	bra	@r0		
    a920:	e8 54 00 00 	add.b	@r4,	0(r8)	;0x0000(r8)
    a924:	40 00       	rrcm.a	#1,	r0	
    a926:	bb 00 0c 00 	suba	#0x0000c,r11	
    a92a:	00 00       	bra	@r0		
    a92c:	f8 54 00 00 	add.b	@r4+,	0(r8)	;0x0000(r8)
    a930:	40 00       	rrcm.a	#1,	r0	
    a932:	bc 00 09 00 	suba	#0x00009,r12	
    a936:	00 00       	bra	@r0		
    a938:	04 55       	add	r5,	r4	
    a93a:	00 00       	bra	@r0		
    a93c:	40 00       	rrcm.a	#1,	r0	
    a93e:	bd 00 0a 00 	suba	#0x0000a,r13	
    a942:	00 00       	bra	@r0		
    a944:	00 00       	bra	@r0		
    a946:	00 00       	bra	@r0		
    a948:	c0 00       	bra	r0		
    a94a:	00 00       	bra	@r0		
    a94c:	0c 00       	mova	@r0,	r12	
    a94e:	00 00       	bra	@r0		
    a950:	0f 55       	add	r5,	r15	
    a952:	00 00       	bra	@r0		
    a954:	40 00       	rrcm.a	#1,	r0	
    a956:	dd 00       	cmpa	r0,	r13	
    a958:	08 00       	mova	@r0,	r8	
    a95a:	00 00       	bra	@r0		
    a95c:	00 00       	bra	@r0		
    a95e:	00 00       	bra	@r0		
    a960:	c0 00       	bra	r0		
    a962:	00 00       	bra	@r0		
    a964:	58 00       	rrcm	#1,	r8	
    a966:	00 00       	bra	@r0		
    a968:	00 00       	bra	@r0		
    a96a:	00 00       	bra	@r0		
    a96c:	e0 00       	adda	r0,	r0	
    a96e:	00 00       	bra	@r0		
    a970:	8a 00 00 00 	mova	#0x00000,r10	
    a974:	0f 55       	add	r5,	r15	
    a976:	00 00       	bra	@r0		
    a978:	40 00       	rrcm.a	#1,	r0	
    a97a:	dd 00       	cmpa	r0,	r13	
    a97c:	08 00       	mova	@r0,	r8	
    a97e:	00 00       	bra	@r0		
    a980:	00 00       	bra	@r0		
    a982:	00 00       	bra	@r0		
    a984:	c0 00       	bra	r0		
    a986:	00 00       	bra	@r0		
    a988:	aa 00 00 00 	adda	#0x00000,r10	
    a98c:	1c 55 00 00 	add	0(r5),	r12	;0x0000(r5)
    a990:	40 00       	rrcm.a	#1,	r0	
    a992:	e8 00       	adda	r0,	r8	
    a994:	07 00       	mova	@r0,	r7	
    a996:	00 00       	bra	@r0		
    a998:	00 00       	bra	@r0		
    a99a:	00 00       	bra	@r0		
    a99c:	c0 00       	bra	r0		
    a99e:	00 00       	bra	@r0		
    a9a0:	b6 00 00 00 	suba	#0x00000,r6	
    a9a4:	00 00       	bra	@r0		
    a9a6:	00 00       	bra	@r0		
    a9a8:	e0 00       	adda	r0,	r0	
    a9aa:	00 00       	bra	@r0		
    a9ac:	fa 00       	suba	r0,	r10	
    a9ae:	00 00       	bra	@r0		
    a9b0:	00 00       	bra	@r0		
    a9b2:	00 00       	bra	@r0		
    a9b4:	e0 00       	adda	r0,	r0	
    a9b6:	00 00       	bra	@r0		
    a9b8:	fa 00       	suba	r0,	r10	
    a9ba:	00 00       	bra	@r0		
    a9bc:	00 00       	bra	@r0		
    a9be:	00 00       	bra	@r0		
    a9c0:	e0 00       	adda	r0,	r0	
    a9c2:	00 00       	bra	@r0		
    a9c4:	9c 01 00 00 	cmpa	#0x10000,r12	
    a9c8:	00 00       	bra	@r0		
    a9ca:	00 00       	bra	@r0		
    a9cc:	24 00 00 00 	mova	&0x00000,r4	
    a9d0:	b0 01 00 00 	suba	#0x10000,r0	
    a9d4:	00 00       	bra	@r0		
    a9d6:	00 00       	bra	@r0		
    a9d8:	64 00 00 00 	mova	r0,	&0x40000
    a9dc:	9c 5d 00 00 	add	0(r13),	19141(r12);0x0000(r13), 0x4ac5(r12)
    a9e0:	c5 4a 
    a9e2:	00 00       	bra	@r0		
    a9e4:	64 00 00 00 	mova	r0,	&0x40000
    a9e8:	9c 5d 00 00 	add	0(r13),	20285(r12);0x0000(r13), 0x4f3d(r12)
    a9ec:	3d 4f 
    a9ee:	00 00       	bra	@r0		
    a9f0:	64 00 00 00 	mova	r0,	&0x40000
    a9f4:	9c 5d 00 00 	add	0(r13),	106(r12);0x0000(r13), 0x006a(r12)
    a9f8:	6a 00 
    a9fa:	00 00       	bra	@r0		
    a9fc:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0a9fe
    aa00:	00 00       	bra	@r0		
    aa02:	00 00       	bra	@r0		
    aa04:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    aa08:	80 00 00 00 	bra	#0x00000	
    aa0c:	00 00       	bra	@r0		
    aa0e:	00 00       	bra	@r0		
    aa10:	99 00 00 00 	cmpa	#0x00000,r9	
    aa14:	80 00 00 00 	bra	#0x00000	
    aa18:	00 00       	bra	@r0		
    aa1a:	00 00       	bra	@r0		
    aa1c:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    aa1e:	00 00       	bra	@r0		
    aa20:	80 00 00 00 	bra	#0x00000	
    aa24:	00 00       	bra	@r0		
    aa26:	00 00       	bra	@r0		
    aa28:	ec 00       	adda	r0,	r12	
    aa2a:	00 00       	bra	@r0		
    aa2c:	80 00 00 00 	bra	#0x00000	
    aa30:	00 00       	bra	@r0		
    aa32:	00 00       	bra	@r0		
    aa34:	24 01 00 00 	mova	&0x10000,r4	
    aa38:	80 00 00 00 	bra	#0x00000	
    aa3c:	00 00       	bra	@r0		
    aa3e:	00 00       	bra	@r0		
    aa40:	66 01 00 00 	mova	r1,	&0x60000
    aa44:	80 00 00 00 	bra	#0x00000	
    aa48:	00 00       	bra	@r0		
    aa4a:	00 00       	bra	@r0		
    aa4c:	b7 01 00 00 	suba	#0x10000,r7	
    aa50:	80 00 00 00 	bra	#0x00000	
    aa54:	00 00       	bra	@r0		
    aa56:	00 00       	bra	@r0		
    aa58:	08 02       	mova	#4,	r8	;r2 As==10
    aa5a:	00 00       	bra	@r0		
    aa5c:	80 00 00 00 	bra	#0x00000	
    aa60:	00 00       	bra	@r0		
    aa62:	00 00       	bra	@r0		
    aa64:	2e 02 00 00 	mova	&0x20000,r14	
    aa68:	80 00 00 00 	bra	#0x00000	
    aa6c:	00 00       	bra	@r0		
    aa6e:	00 00       	bra	@r0		
    aa70:	6c 02 00 00 	mova	r2,	&0xc0000
    aa74:	80 00 00 00 	bra	#0x00000	
    aa78:	00 00       	bra	@r0		
    aa7a:	00 00       	bra	@r0		
    aa7c:	96 02 00 00 	cmpa	#0x20000,r6	
    aa80:	80 00 00 00 	bra	#0x00000	
    aa84:	00 00       	bra	@r0		
    aa86:	00 00       	bra	@r0		
    aa88:	bf 02 00 00 	suba	#0x20000,r15	
    aa8c:	80 00 00 00 	bra	#0x00000	
    aa90:	00 00       	bra	@r0		
    aa92:	00 00       	bra	@r0		
    aa94:	d9 02       	cmpa	r2,	r9	
    aa96:	00 00       	bra	@r0		
    aa98:	80 00 00 00 	bra	#0x00000	
    aa9c:	00 00       	bra	@r0		
    aa9e:	00 00       	bra	@r0		
    aaa0:	f4 02       	suba	r2,	r4	
    aaa2:	00 00       	bra	@r0		
    aaa4:	80 00 00 00 	bra	#0x00000	
    aaa8:	00 00       	bra	@r0		
    aaaa:	00 00       	bra	@r0		
    aaac:	14 03       	mova	#-1,	r4	;r3 As==11
    aaae:	00 00       	bra	@r0		
    aab0:	80 00 00 00 	bra	#0x00000	
    aab4:	00 00       	bra	@r0		
    aab6:	00 00       	bra	@r0		
    aab8:	4d 03       	rrum.a	#1,	r13	
    aaba:	00 00       	bra	@r0		
    aabc:	80 00 00 00 	bra	#0x00000	
    aac0:	00 00       	bra	@r0		
    aac2:	00 00       	bra	@r0		
    aac4:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    aac8:	80 00 00 00 	bra	#0x00000	
    aacc:	00 00       	bra	@r0		
    aace:	00 00       	bra	@r0		
    aad0:	8a 03 00 00 	mova	#0x30000,r10	
    aad4:	80 00 00 00 	bra	#0x00000	
    aad8:	00 00       	bra	@r0		
    aada:	00 00       	bra	@r0		
    aadc:	ae 03 00 00 	adda	#0x30000,r14	
    aae0:	80 00 00 00 	bra	#0x00000	
    aae4:	00 00       	bra	@r0		
    aae6:	00 00       	bra	@r0		
    aae8:	d7 03       	tsta	r7		
    aaea:	00 00       	bra	@r0		
    aaec:	80 00 00 00 	bra	#0x00000	
    aaf0:	00 00       	bra	@r0		
    aaf2:	00 00       	bra	@r0		
    aaf4:	3d 4f       	mov	@r15+,	r13	
    aaf6:	00 00       	bra	@r0		
    aaf8:	82 00 00 00 	mova	#0x00000,r2	
    aafc:	62 17       	popm	#7,	r8	
    aafe:	00 00       	bra	@r0		
    ab00:	00 4b       	br	r11		
    ab02:	00 00       	bra	@r0		
    ab04:	c2 00       	mova	r0,	r2	
    ab06:	00 00       	bra	@r0		
    ab08:	e5 1d       	.word	0x1de5;	????	
    ab0a:	00 00       	bra	@r0		
    ab0c:	7a 4b       	mov.b	@r11+,	r10	
    ab0e:	00 00       	bra	@r0		
    ab10:	c2 00       	mova	r0,	r2	
    ab12:	00 00       	bra	@r0		
    ab14:	00 00       	bra	@r0		
    ab16:	00 00       	bra	@r0		
    ab18:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x0abe0
    ab1c:	c2 00 
    ab1e:	00 00       	bra	@r0		
    ab20:	00 00       	bra	@r0		
    ab22:	00 00       	bra	@r0		
    ab24:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    ab28:	c2 00       	mova	r0,	r2	
    ab2a:	00 00       	bra	@r0		
    ab2c:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    ab30:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    ab34:	c2 00       	mova	r0,	r2	
    ab36:	00 00       	bra	@r0		
    ab38:	00 00       	bra	@r0		
    ab3a:	00 00       	bra	@r0		
    ab3c:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    ab40:	c2 00       	mova	r0,	r2	
    ab42:	00 00       	bra	@r0		
    ab44:	00 00       	bra	@r0		
    ab46:	00 00       	bra	@r0		
    ab48:	46 4f       	mov.b	r15,	r6	
    ab4a:	00 00       	bra	@r0		
    ab4c:	c2 00       	mova	r0,	r2	
    ab4e:	00 00       	bra	@r0		
    ab50:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    ab54:	2a 55       	add	@r5,	r10	
    ab56:	00 00       	bra	@r0		
    ab58:	24 00 37 01 	mova	&0x00137,r4	
    ab5c:	9c 5d 00 00 	add	0(r13),	21821(r12);0x0000(r13), 0x553d(r12)
    ab60:	3d 55 
    ab62:	00 00       	bra	@r0		
    ab64:	40 00       	rrcm.a	#1,	r0	
    ab66:	36 01 0f 00 	mova	15(r1),	r6	;0x000f(r1)
    ab6a:	00 00       	bra	@r0		
    ab6c:	50 55 00 00 	add.b	0(r5),	r0	;0x0000(r5)
    ab70:	40 00       	rrcm.a	#1,	r0	
    ab72:	36 01 0b 00 	mova	11(r1),	r6	;0x000b(r1)
    ab76:	00 00       	bra	@r0		
    ab78:	00 00       	bra	@r0		
    ab7a:	00 00       	bra	@r0		
    ab7c:	44 00       	rrcm.a	#1,	r4	
    ab7e:	37 01 00 00 	mova	0(r1),	r7	;0x0000(r1)
    ab82:	00 00       	bra	@r0		
    ab84:	00 00       	bra	@r0		
    ab86:	00 00       	bra	@r0		
    ab88:	44 00       	rrcm.a	#1,	r4	
    ab8a:	48 01       	rram.a	#1,	r8	
    ab8c:	04 00       	mova	@r0,	r4	
    ab8e:	00 00       	bra	@r0		
    ab90:	00 00       	bra	@r0		
    ab92:	00 00       	bra	@r0		
    ab94:	44 00       	rrcm.a	#1,	r4	
    ab96:	49 01       	rram.a	#1,	r9	
    ab98:	0e 00       	mova	@r0,	r14	
    ab9a:	00 00       	bra	@r0		
    ab9c:	00 00       	bra	@r0		
    ab9e:	00 00       	bra	@r0		
    aba0:	44 00       	rrcm.a	#1,	r4	
    aba2:	4a 01       	rram.a	#1,	r10	
    aba4:	24 00 00 00 	mova	&0x00000,r4	
    aba8:	00 00       	bra	@r0		
    abaa:	00 00       	bra	@r0		
    abac:	44 00       	rrcm.a	#1,	r4	
    abae:	51 01       	rram	#1,	r1	
    abb0:	2e 00 00 00 	mova	&0x00000,r14	
    abb4:	00 00       	bra	@r0		
    abb6:	00 00       	bra	@r0		
    abb8:	44 00       	rrcm.a	#1,	r4	
    abba:	52 01       	rram	#1,	r2	
    abbc:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x0abbe
    abc0:	00 00       	bra	@r0		
    abc2:	00 00       	bra	@r0		
    abc4:	44 00       	rrcm.a	#1,	r4	
    abc6:	55 01       	rram	#1,	r5	
    abc8:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x0abca
    abcc:	00 00       	bra	@r0		
    abce:	00 00       	bra	@r0		
    abd0:	44 00       	rrcm.a	#1,	r4	
    abd2:	5c 01       	rram	#1,	r12	
    abd4:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x0abd6
    abd8:	00 00       	bra	@r0		
    abda:	00 00       	bra	@r0		
    abdc:	44 00       	rrcm.a	#1,	r4	
    abde:	63 01 44 00 	mova	r1,	&0x30044
    abe2:	00 00       	bra	@r0		
    abe4:	00 00       	bra	@r0		
    abe6:	00 00       	bra	@r0		
    abe8:	44 00       	rrcm.a	#1,	r4	
    abea:	64 01 4a 00 	mova	r1,	&0x4004a
    abee:	00 00       	bra	@r0		
    abf0:	00 00       	bra	@r0		
    abf2:	00 00       	bra	@r0		
    abf4:	44 00       	rrcm.a	#1,	r4	
    abf6:	66 01 66 00 	mova	r1,	&0x60066
    abfa:	00 00       	bra	@r0		
    abfc:	00 00       	bra	@r0		
    abfe:	00 00       	bra	@r0		
    ac00:	44 00       	rrcm.a	#1,	r4	
    ac02:	68 01 6c 00 	mova	r1,	&0x8006c
    ac06:	00 00       	bra	@r0		
    ac08:	00 00       	bra	@r0		
    ac0a:	00 00       	bra	@r0		
    ac0c:	44 00       	rrcm.a	#1,	r4	
    ac0e:	6a 01 76 00 	mova	r1,	&0xa0076
    ac12:	00 00       	bra	@r0		
    ac14:	00 00       	bra	@r0		
    ac16:	00 00       	bra	@r0		
    ac18:	44 00       	rrcm.a	#1,	r4	
    ac1a:	6b 01 7a 00 	mova	r1,	&0xb007a
    ac1e:	00 00       	bra	@r0		
    ac20:	00 00       	bra	@r0		
    ac22:	00 00       	bra	@r0		
    ac24:	44 00       	rrcm.a	#1,	r4	
    ac26:	85 01 86 00 	mova	#0x10086,r5	
    ac2a:	00 00       	bra	@r0		
    ac2c:	00 00       	bra	@r0		
    ac2e:	00 00       	bra	@r0		
    ac30:	44 00       	rrcm.a	#1,	r4	
    ac32:	71 01 90 00 	mova	r1,	144(r1)	;0x0090(r1)
    ac36:	00 00       	bra	@r0		
    ac38:	00 00       	bra	@r0		
    ac3a:	00 00       	bra	@r0		
    ac3c:	44 00       	rrcm.a	#1,	r4	
    ac3e:	8b 01 96 00 	mova	#0x10096,r11	
    ac42:	00 00       	bra	@r0		
    ac44:	00 00       	bra	@r0		
    ac46:	00 00       	bra	@r0		
    ac48:	44 00       	rrcm.a	#1,	r4	
    ac4a:	8c 01 9e 00 	mova	#0x1009e,r12	
    ac4e:	00 00       	bra	@r0		
    ac50:	00 00       	bra	@r0		
    ac52:	00 00       	bra	@r0		
    ac54:	44 00       	rrcm.a	#1,	r4	
    ac56:	8d 01 a4 00 	mova	#0x100a4,r13	
    ac5a:	00 00       	bra	@r0		
    ac5c:	00 00       	bra	@r0		
    ac5e:	00 00       	bra	@r0		
    ac60:	44 00       	rrcm.a	#1,	r4	
    ac62:	74 01 d2 00 	mova	r1,	210(r4)	;0x00d2(r4)
    ac66:	00 00       	bra	@r0		
    ac68:	00 00       	bra	@r0		
    ac6a:	00 00       	bra	@r0		
    ac6c:	44 00       	rrcm.a	#1,	r4	
    ac6e:	77 01 da 00 	mova	r1,	218(r7)	;0x00da(r7)
    ac72:	00 00       	bra	@r0		
    ac74:	00 00       	bra	@r0		
    ac76:	00 00       	bra	@r0		
    ac78:	44 00       	rrcm.a	#1,	r4	
    ac7a:	7c 01 e0 00 	mova	r1,	224(r12);0x00e0(r12)
    ac7e:	00 00       	bra	@r0		
    ac80:	00 00       	bra	@r0		
    ac82:	00 00       	bra	@r0		
    ac84:	44 00       	rrcm.a	#1,	r4	
    ac86:	7e 01 e6 00 	mova	r1,	230(r14);0x00e6(r14)
    ac8a:	00 00       	bra	@r0		
    ac8c:	00 00       	bra	@r0		
    ac8e:	00 00       	bra	@r0		
    ac90:	44 00       	rrcm.a	#1,	r4	
    ac92:	82 01 ec 00 	mova	#0x100ec,r2	
    ac96:	00 00       	bra	@r0		
    ac98:	00 00       	bra	@r0		
    ac9a:	00 00       	bra	@r0		
    ac9c:	44 00       	rrcm.a	#1,	r4	
    ac9e:	8f 01 f2 00 	mova	#0x100f2,r15	
    aca2:	00 00       	bra	@r0		
    aca4:	e8 54 00 00 	add.b	@r4,	0(r8)	;0x0000(r8)
    aca8:	40 00       	rrcm.a	#1,	r0	
    acaa:	3b 01 0c 00 	mova	12(r1),	r11	;0x000c(r1)
    acae:	00 00       	bra	@r0		
    acb0:	04 55       	add	r5,	r4	
    acb2:	00 00       	bra	@r0		
    acb4:	40 00       	rrcm.a	#1,	r0	
    acb6:	3c 01 0e 00 	mova	14(r1),	r12	;0x000e(r1)
    acba:	00 00       	bra	@r0		
    acbc:	f8 54 00 00 	add.b	@r4+,	0(r8)	;0x0000(r8)
    acc0:	40 00       	rrcm.a	#1,	r0	
    acc2:	3d 01 0f 00 	mova	15(r1),	r13	;0x000f(r1)
    acc6:	00 00       	bra	@r0		
    acc8:	00 00       	bra	@r0		
    acca:	00 00       	bra	@r0		
    accc:	c0 00       	bra	r0		
    acce:	00 00       	bra	@r0		
    acd0:	04 00       	mova	@r0,	r4	
    acd2:	00 00       	bra	@r0		
    acd4:	00 00       	bra	@r0		
    acd6:	00 00       	bra	@r0		
    acd8:	e0 00       	adda	r0,	r0	
    acda:	00 00       	bra	@r0		
    acdc:	f2 00       	suba	r0,	r2	
    acde:	00 00       	bra	@r0		
    ace0:	00 00       	bra	@r0		
    ace2:	00 00       	bra	@r0		
    ace4:	24 00 00 00 	mova	&0x00000,r4	
    ace8:	f6 00       	suba	r0,	r6	
    acea:	00 00       	bra	@r0		
    acec:	00 00       	bra	@r0		
    acee:	00 00       	bra	@r0		
    acf0:	64 00 00 00 	mova	r0,	&0x40000
    acf4:	92 5e 00 00 	add	0(r14),	&0x4ac5	;0x0000(r14)
    acf8:	c5 4a 
    acfa:	00 00       	bra	@r0		
    acfc:	64 00 00 00 	mova	r0,	&0x40000
    ad00:	92 5e 00 00 	add	0(r14),	&0x4f3d	;0x0000(r14)
    ad04:	3d 4f 
    ad06:	00 00       	bra	@r0		
    ad08:	64 00 00 00 	mova	r0,	&0x40000
    ad0c:	92 5e 00 00 	add	0(r14),	&0x006a	;0x0000(r14)
    ad10:	6a 00 
    ad12:	00 00       	bra	@r0		
    ad14:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0ad16
    ad18:	00 00       	bra	@r0		
    ad1a:	00 00       	bra	@r0		
    ad1c:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    ad20:	80 00 00 00 	bra	#0x00000	
    ad24:	00 00       	bra	@r0		
    ad26:	00 00       	bra	@r0		
    ad28:	99 00 00 00 	cmpa	#0x00000,r9	
    ad2c:	80 00 00 00 	bra	#0x00000	
    ad30:	00 00       	bra	@r0		
    ad32:	00 00       	bra	@r0		
    ad34:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    ad36:	00 00       	bra	@r0		
    ad38:	80 00 00 00 	bra	#0x00000	
    ad3c:	00 00       	bra	@r0		
    ad3e:	00 00       	bra	@r0		
    ad40:	ec 00       	adda	r0,	r12	
    ad42:	00 00       	bra	@r0		
    ad44:	80 00 00 00 	bra	#0x00000	
    ad48:	00 00       	bra	@r0		
    ad4a:	00 00       	bra	@r0		
    ad4c:	24 01 00 00 	mova	&0x10000,r4	
    ad50:	80 00 00 00 	bra	#0x00000	
    ad54:	00 00       	bra	@r0		
    ad56:	00 00       	bra	@r0		
    ad58:	66 01 00 00 	mova	r1,	&0x60000
    ad5c:	80 00 00 00 	bra	#0x00000	
    ad60:	00 00       	bra	@r0		
    ad62:	00 00       	bra	@r0		
    ad64:	b7 01 00 00 	suba	#0x10000,r7	
    ad68:	80 00 00 00 	bra	#0x00000	
    ad6c:	00 00       	bra	@r0		
    ad6e:	00 00       	bra	@r0		
    ad70:	08 02       	mova	#4,	r8	;r2 As==10
    ad72:	00 00       	bra	@r0		
    ad74:	80 00 00 00 	bra	#0x00000	
    ad78:	00 00       	bra	@r0		
    ad7a:	00 00       	bra	@r0		
    ad7c:	2e 02 00 00 	mova	&0x20000,r14	
    ad80:	80 00 00 00 	bra	#0x00000	
    ad84:	00 00       	bra	@r0		
    ad86:	00 00       	bra	@r0		
    ad88:	6c 02 00 00 	mova	r2,	&0xc0000
    ad8c:	80 00 00 00 	bra	#0x00000	
    ad90:	00 00       	bra	@r0		
    ad92:	00 00       	bra	@r0		
    ad94:	96 02 00 00 	cmpa	#0x20000,r6	
    ad98:	80 00 00 00 	bra	#0x00000	
    ad9c:	00 00       	bra	@r0		
    ad9e:	00 00       	bra	@r0		
    ada0:	bf 02 00 00 	suba	#0x20000,r15	
    ada4:	80 00 00 00 	bra	#0x00000	
    ada8:	00 00       	bra	@r0		
    adaa:	00 00       	bra	@r0		
    adac:	d9 02       	cmpa	r2,	r9	
    adae:	00 00       	bra	@r0		
    adb0:	80 00 00 00 	bra	#0x00000	
    adb4:	00 00       	bra	@r0		
    adb6:	00 00       	bra	@r0		
    adb8:	f4 02       	suba	r2,	r4	
    adba:	00 00       	bra	@r0		
    adbc:	80 00 00 00 	bra	#0x00000	
    adc0:	00 00       	bra	@r0		
    adc2:	00 00       	bra	@r0		
    adc4:	14 03       	mova	#-1,	r4	;r3 As==11
    adc6:	00 00       	bra	@r0		
    adc8:	80 00 00 00 	bra	#0x00000	
    adcc:	00 00       	bra	@r0		
    adce:	00 00       	bra	@r0		
    add0:	4d 03       	rrum.a	#1,	r13	
    add2:	00 00       	bra	@r0		
    add4:	80 00 00 00 	bra	#0x00000	
    add8:	00 00       	bra	@r0		
    adda:	00 00       	bra	@r0		
    addc:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    ade0:	80 00 00 00 	bra	#0x00000	
    ade4:	00 00       	bra	@r0		
    ade6:	00 00       	bra	@r0		
    ade8:	8a 03 00 00 	mova	#0x30000,r10	
    adec:	80 00 00 00 	bra	#0x00000	
    adf0:	00 00       	bra	@r0		
    adf2:	00 00       	bra	@r0		
    adf4:	ae 03 00 00 	adda	#0x30000,r14	
    adf8:	80 00 00 00 	bra	#0x00000	
    adfc:	00 00       	bra	@r0		
    adfe:	00 00       	bra	@r0		
    ae00:	d7 03       	tsta	r7		
    ae02:	00 00       	bra	@r0		
    ae04:	80 00 00 00 	bra	#0x00000	
    ae08:	00 00       	bra	@r0		
    ae0a:	00 00       	bra	@r0		
    ae0c:	3d 4f       	mov	@r15+,	r13	
    ae0e:	00 00       	bra	@r0		
    ae10:	82 00 00 00 	mova	#0x00000,r2	
    ae14:	cd 0b       	mova	r11,	r13	
    ae16:	00 00       	bra	@r0		
    ae18:	00 4b       	br	r11		
    ae1a:	00 00       	bra	@r0		
    ae1c:	c2 00       	mova	r0,	r2	
    ae1e:	00 00       	bra	@r0		
    ae20:	e5 1d       	.word	0x1de5;	????	
    ae22:	00 00       	bra	@r0		
    ae24:	7a 4b       	mov.b	@r11+,	r10	
    ae26:	00 00       	bra	@r0		
    ae28:	c2 00       	mova	r0,	r2	
    ae2a:	00 00       	bra	@r0		
    ae2c:	00 00       	bra	@r0		
    ae2e:	00 00       	bra	@r0		
    ae30:	90 4b 00 00 	mov	0(r11),	0x00c2	;0x0000(r11), PC rel. 0x0aef8
    ae34:	c2 00 
    ae36:	00 00       	bra	@r0		
    ae38:	00 00       	bra	@r0		
    ae3a:	00 00       	bra	@r0		
    ae3c:	a9 4b 00 00 	mov	@r11,	0(r9)	;0x0000(r9)
    ae40:	c2 00       	mova	r0,	r2	
    ae42:	00 00       	bra	@r0		
    ae44:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    ae48:	bb 4c 00 00 	mov	@r12+,	0(r11)	;0x0000(r11)
    ae4c:	c2 00       	mova	r0,	r2	
    ae4e:	00 00       	bra	@r0		
    ae50:	00 00       	bra	@r0		
    ae52:	00 00       	bra	@r0		
    ae54:	cb 4c 00 00 	mov.b	r12,	0(r11)	;0x0000(r11)
    ae58:	c2 00       	mova	r0,	r2	
    ae5a:	00 00       	bra	@r0		
    ae5c:	00 00       	bra	@r0		
    ae5e:	00 00       	bra	@r0		
    ae60:	46 4f       	mov.b	r15,	r6	
    ae62:	00 00       	bra	@r0		
    ae64:	c2 00       	mova	r0,	r2	
    ae66:	00 00       	bra	@r0		
    ae68:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    ae6c:	63 55       	.word	0x5563;	????	Illegal as 2-op instr
    ae6e:	00 00       	bra	@r0		
    ae70:	24 00 81 03 	mova	&0x00381,r4	
    ae74:	92 5e 00 00 	add	0(r14),	&0x557a	;0x0000(r14)
    ae78:	7a 55 
    ae7a:	00 00       	bra	@r0		
    ae7c:	40 00       	rrcm.a	#1,	r0	
    ae7e:	80 03 0f 00 	bra	#0x3000f	
    ae82:	00 00       	bra	@r0		
    ae84:	48 52       	add.b	r2,	r8	
    ae86:	00 00       	bra	@r0		
    ae88:	40 00       	rrcm.a	#1,	r0	
    ae8a:	80 03 0e 00 	bra	#0x3000e	
    ae8e:	00 00       	bra	@r0		
    ae90:	00 00       	bra	@r0		
    ae92:	00 00       	bra	@r0		
    ae94:	44 00       	rrcm.a	#1,	r4	
    ae96:	81 03 00 00 	mova	#0x30000,r1	
    ae9a:	00 00       	bra	@r0		
    ae9c:	00 00       	bra	@r0		
    ae9e:	00 00       	bra	@r0		
    aea0:	44 00       	rrcm.a	#1,	r4	
    aea2:	9a 00 08 00 	cmpa	#0x00008,r10	
    aea6:	00 00       	bra	@r0		
    aea8:	00 00       	bra	@r0		
    aeaa:	00 00       	bra	@r0		
    aeac:	44 00       	rrcm.a	#1,	r4	
    aeae:	99 00 12 00 	cmpa	#0x00012,r9	
    aeb2:	00 00       	bra	@r0		
    aeb4:	00 00       	bra	@r0		
    aeb6:	00 00       	bra	@r0		
    aeb8:	44 00       	rrcm.a	#1,	r4	
    aeba:	9a 00 16 00 	cmpa	#0x00016,r10	
    aebe:	00 00       	bra	@r0		
    aec0:	00 00       	bra	@r0		
    aec2:	00 00       	bra	@r0		
    aec4:	44 00       	rrcm.a	#1,	r4	
    aec6:	99 00 20 00 	cmpa	#0x00020,r9	
    aeca:	00 00       	bra	@r0		
    aecc:	00 00       	bra	@r0		
    aece:	00 00       	bra	@r0		
    aed0:	44 00       	rrcm.a	#1,	r4	
    aed2:	8c 03 24 00 	mova	#0x30024,r12	
    aed6:	00 00       	bra	@r0		
    aed8:	00 00       	bra	@r0		
    aeda:	00 00       	bra	@r0		
    aedc:	44 00       	rrcm.a	#1,	r4	
    aede:	a1 00 28 00 	adda	#0x00028,r1	
    aee2:	00 00       	bra	@r0		
    aee4:	00 00       	bra	@r0		
    aee6:	00 00       	bra	@r0		
    aee8:	44 00       	rrcm.a	#1,	r4	
    aeea:	a0 00 2e 00 	adda	#0x0002e,r0	
    aeee:	00 00       	bra	@r0		
    aef0:	00 00       	bra	@r0		
    aef2:	00 00       	bra	@r0		
    aef4:	44 00       	rrcm.a	#1,	r4	
    aef6:	a1 00 32 00 	adda	#0x00032,r1	
    aefa:	00 00       	bra	@r0		
    aefc:	00 00       	bra	@r0		
    aefe:	00 00       	bra	@r0		
    af00:	44 00       	rrcm.a	#1,	r4	
    af02:	a0 00 38 00 	adda	#0x00038,r0	
    af06:	00 00       	bra	@r0		
    af08:	00 00       	bra	@r0		
    af0a:	00 00       	bra	@r0		
    af0c:	44 00       	rrcm.a	#1,	r4	
    af0e:	99 03 3c 00 	cmpa	#0x3003c,r9	
    af12:	00 00       	bra	@r0		
    af14:	00 00       	bra	@r0		
    af16:	00 00       	bra	@r0		
    af18:	44 00       	rrcm.a	#1,	r4	
    af1a:	a1 00 48 00 	adda	#0x00048,r1	
    af1e:	00 00       	bra	@r0		
    af20:	00 00       	bra	@r0		
    af22:	00 00       	bra	@r0		
    af24:	44 00       	rrcm.a	#1,	r4	
    af26:	a0 00 4e 00 	adda	#0x0004e,r0	
    af2a:	00 00       	bra	@r0		
    af2c:	00 00       	bra	@r0		
    af2e:	00 00       	bra	@r0		
    af30:	44 00       	rrcm.a	#1,	r4	
    af32:	a1 00 52 00 	adda	#0x00052,r1	
    af36:	00 00       	bra	@r0		
    af38:	00 00       	bra	@r0		
    af3a:	00 00       	bra	@r0		
    af3c:	44 00       	rrcm.a	#1,	r4	
    af3e:	a0 00 58 00 	adda	#0x00058,r0	
    af42:	00 00       	bra	@r0		
    af44:	00 00       	bra	@r0		
    af46:	00 00       	bra	@r0		
    af48:	44 00       	rrcm.a	#1,	r4	
    af4a:	aa 00 5c 00 	adda	#0x0005c,r10	
    af4e:	00 00       	bra	@r0		
    af50:	00 00       	bra	@r0		
    af52:	00 00       	bra	@r0		
    af54:	44 00       	rrcm.a	#1,	r4	
    af56:	a9 00 62 00 	adda	#0x00062,r9	
    af5a:	00 00       	bra	@r0		
    af5c:	00 00       	bra	@r0		
    af5e:	00 00       	bra	@r0		
    af60:	44 00       	rrcm.a	#1,	r4	
    af62:	aa 00 66 00 	adda	#0x00066,r10	
    af66:	00 00       	bra	@r0		
    af68:	00 00       	bra	@r0		
    af6a:	00 00       	bra	@r0		
    af6c:	44 00       	rrcm.a	#1,	r4	
    af6e:	a9 00 6c 00 	adda	#0x0006c,r9	
    af72:	00 00       	bra	@r0		
    af74:	00 00       	bra	@r0		
    af76:	00 00       	bra	@r0		
    af78:	44 00       	rrcm.a	#1,	r4	
    af7a:	a6 03 70 00 	adda	#0x30070,r6	
    af7e:	00 00       	bra	@r0		
    af80:	00 00       	bra	@r0		
    af82:	00 00       	bra	@r0		
    af84:	44 00       	rrcm.a	#1,	r4	
    af86:	aa 00 74 00 	adda	#0x00074,r10	
    af8a:	00 00       	bra	@r0		
    af8c:	00 00       	bra	@r0		
    af8e:	00 00       	bra	@r0		
    af90:	44 00       	rrcm.a	#1,	r4	
    af92:	a9 00 7a 00 	adda	#0x0007a,r9	
    af96:	00 00       	bra	@r0		
    af98:	00 00       	bra	@r0		
    af9a:	00 00       	bra	@r0		
    af9c:	44 00       	rrcm.a	#1,	r4	
    af9e:	aa 03 7e 00 	adda	#0x3007e,r10	
    afa2:	00 00       	bra	@r0		
    afa4:	00 00       	bra	@r0		
    afa6:	00 00       	bra	@r0		
    afa8:	44 00       	rrcm.a	#1,	r4	
    afaa:	aa 00 8e 00 	adda	#0x0008e,r10	
    afae:	00 00       	bra	@r0		
    afb0:	00 00       	bra	@r0		
    afb2:	00 00       	bra	@r0		
    afb4:	44 00       	rrcm.a	#1,	r4	
    afb6:	a9 00 94 00 	adda	#0x00094,r9	
    afba:	00 00       	bra	@r0		
    afbc:	00 00       	bra	@r0		
    afbe:	00 00       	bra	@r0		
    afc0:	44 00       	rrcm.a	#1,	r4	
    afc2:	ae 03 98 00 	adda	#0x30098,r14	
    afc6:	00 00       	bra	@r0		
    afc8:	00 00       	bra	@r0		
    afca:	00 00       	bra	@r0		
    afcc:	44 00       	rrcm.a	#1,	r4	
    afce:	b1 03 a0 00 	suba	#0x300a0,r1	
    afd2:	00 00       	bra	@r0		
    afd4:	00 00       	bra	@r0		
    afd6:	00 00       	bra	@r0		
    afd8:	44 00       	rrcm.a	#1,	r4	
    afda:	c2 03       	mova	#0,	r2	;r3 As==00
    afdc:	aa 00 00 00 	adda	#0x00000,r10	
    afe0:	00 00       	bra	@r0		
    afe2:	00 00       	bra	@r0		
    afe4:	44 00       	rrcm.a	#1,	r4	
    afe6:	b7 03 b0 00 	suba	#0x300b0,r7	
    afea:	00 00       	bra	@r0		
    afec:	00 00       	bra	@r0		
    afee:	00 00       	bra	@r0		
    aff0:	44 00       	rrcm.a	#1,	r4	
    aff2:	bb 03 bc 00 	suba	#0x300bc,r11	
    aff6:	00 00       	bra	@r0		
    aff8:	00 00       	bra	@r0		
    affa:	00 00       	bra	@r0		
    affc:	44 00       	rrcm.a	#1,	r4	
    affe:	c0 03       	bra	#0		;r3 As==00
    b000:	c0 00       	bra	r0		
    b002:	00 00       	bra	@r0		
    b004:	00 00       	bra	@r0		
    b006:	00 00       	bra	@r0		
    b008:	44 00       	rrcm.a	#1,	r4	
    b00a:	c4 03       	mova	#0,	r4	;r3 As==00
    b00c:	da 00       	cmpa	r0,	r10	
    b00e:	00 00       	bra	@r0		
    b010:	00 00       	bra	@r0		
    b012:	00 00       	bra	@r0		
    b014:	44 00       	rrcm.a	#1,	r4	
    b016:	c9 03       	mova	#0,	r9	;r3 As==00
    b018:	de 00       	cmpa	r0,	r14	
    b01a:	00 00       	bra	@r0		
    b01c:	00 00       	bra	@r0		
    b01e:	00 00       	bra	@r0		
    b020:	44 00       	rrcm.a	#1,	r4	
    b022:	c6 03       	mova	#0,	r6	;r3 As==00
    b024:	e6 00       	adda	r0,	r6	
    b026:	00 00       	bra	@r0		
    b028:	00 00       	bra	@r0		
    b02a:	00 00       	bra	@r0		
    b02c:	44 00       	rrcm.a	#1,	r4	
    b02e:	ca 03       	mova	#0,	r10	;r3 As==00
    b030:	0c 01       	mova	@r1,	r12	
    b032:	00 00       	bra	@r0		
    b034:	00 00       	bra	@r0		
    b036:	00 00       	bra	@r0		
    b038:	24 00 00 00 	mova	&0x00000,r4	
    b03c:	18 01       	mova	@r1+,	r8	
    b03e:	00 00       	bra	@r0		
    b040:	00 00       	bra	@r0		
    b042:	00 00       	bra	@r0		
    b044:	64 00 00 00 	mova	r0,	&0x40000
    b048:	aa 5f 00 00 	add	@r15,	0(r10)	;0x0000(r10)
    b04c:	8b 55 00 00 	add	r5,	0(r11)	;0x0000(r11)
    b050:	64 00 00 00 	mova	r0,	&0x40000
    b054:	aa 5f 00 00 	add	@r15,	0(r10)	;0x0000(r10)
    b058:	be 55 00 00 	add	@r5+,	0(r14)	;0x0000(r14)
    b05c:	64 00 00 00 	mova	r0,	&0x40000
    b060:	aa 5f 00 00 	add	@r15,	0(r10)	;0x0000(r10)
    b064:	6a 00 00 00 	mova	r0,	&0xa0000
    b068:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0b06a
    b06c:	00 00       	bra	@r0		
    b06e:	00 00       	bra	@r0		
    b070:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    b074:	80 00 00 00 	bra	#0x00000	
    b078:	00 00       	bra	@r0		
    b07a:	00 00       	bra	@r0		
    b07c:	99 00 00 00 	cmpa	#0x00000,r9	
    b080:	80 00 00 00 	bra	#0x00000	
    b084:	00 00       	bra	@r0		
    b086:	00 00       	bra	@r0		
    b088:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    b08a:	00 00       	bra	@r0		
    b08c:	80 00 00 00 	bra	#0x00000	
    b090:	00 00       	bra	@r0		
    b092:	00 00       	bra	@r0		
    b094:	ec 00       	adda	r0,	r12	
    b096:	00 00       	bra	@r0		
    b098:	80 00 00 00 	bra	#0x00000	
    b09c:	00 00       	bra	@r0		
    b09e:	00 00       	bra	@r0		
    b0a0:	24 01 00 00 	mova	&0x10000,r4	
    b0a4:	80 00 00 00 	bra	#0x00000	
    b0a8:	00 00       	bra	@r0		
    b0aa:	00 00       	bra	@r0		
    b0ac:	66 01 00 00 	mova	r1,	&0x60000
    b0b0:	80 00 00 00 	bra	#0x00000	
    b0b4:	00 00       	bra	@r0		
    b0b6:	00 00       	bra	@r0		
    b0b8:	b7 01 00 00 	suba	#0x10000,r7	
    b0bc:	80 00 00 00 	bra	#0x00000	
    b0c0:	00 00       	bra	@r0		
    b0c2:	00 00       	bra	@r0		
    b0c4:	08 02       	mova	#4,	r8	;r2 As==10
    b0c6:	00 00       	bra	@r0		
    b0c8:	80 00 00 00 	bra	#0x00000	
    b0cc:	00 00       	bra	@r0		
    b0ce:	00 00       	bra	@r0		
    b0d0:	2e 02 00 00 	mova	&0x20000,r14	
    b0d4:	80 00 00 00 	bra	#0x00000	
    b0d8:	00 00       	bra	@r0		
    b0da:	00 00       	bra	@r0		
    b0dc:	6c 02 00 00 	mova	r2,	&0xc0000
    b0e0:	80 00 00 00 	bra	#0x00000	
    b0e4:	00 00       	bra	@r0		
    b0e6:	00 00       	bra	@r0		
    b0e8:	96 02 00 00 	cmpa	#0x20000,r6	
    b0ec:	80 00 00 00 	bra	#0x00000	
    b0f0:	00 00       	bra	@r0		
    b0f2:	00 00       	bra	@r0		
    b0f4:	bf 02 00 00 	suba	#0x20000,r15	
    b0f8:	80 00 00 00 	bra	#0x00000	
    b0fc:	00 00       	bra	@r0		
    b0fe:	00 00       	bra	@r0		
    b100:	d9 02       	cmpa	r2,	r9	
    b102:	00 00       	bra	@r0		
    b104:	80 00 00 00 	bra	#0x00000	
    b108:	00 00       	bra	@r0		
    b10a:	00 00       	bra	@r0		
    b10c:	f4 02       	suba	r2,	r4	
    b10e:	00 00       	bra	@r0		
    b110:	80 00 00 00 	bra	#0x00000	
    b114:	00 00       	bra	@r0		
    b116:	00 00       	bra	@r0		
    b118:	14 03       	mova	#-1,	r4	;r3 As==11
    b11a:	00 00       	bra	@r0		
    b11c:	80 00 00 00 	bra	#0x00000	
    b120:	00 00       	bra	@r0		
    b122:	00 00       	bra	@r0		
    b124:	4d 03       	rrum.a	#1,	r13	
    b126:	00 00       	bra	@r0		
    b128:	80 00 00 00 	bra	#0x00000	
    b12c:	00 00       	bra	@r0		
    b12e:	00 00       	bra	@r0		
    b130:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    b134:	80 00 00 00 	bra	#0x00000	
    b138:	00 00       	bra	@r0		
    b13a:	00 00       	bra	@r0		
    b13c:	8a 03 00 00 	mova	#0x30000,r10	
    b140:	80 00 00 00 	bra	#0x00000	
    b144:	00 00       	bra	@r0		
    b146:	00 00       	bra	@r0		
    b148:	ae 03 00 00 	adda	#0x30000,r14	
    b14c:	80 00 00 00 	bra	#0x00000	
    b150:	00 00       	bra	@r0		
    b152:	00 00       	bra	@r0		
    b154:	d7 03       	tsta	r7		
    b156:	00 00       	bra	@r0		
    b158:	80 00 00 00 	bra	#0x00000	
    b15c:	00 00       	bra	@r0		
    b15e:	00 00       	bra	@r0		
    b160:	be 55 00 00 	add	@r5+,	0(r14)	;0x0000(r14)
    b164:	82 00 00 00 	mova	#0x00000,r2	
    b168:	aa 0e 00 00 	adda	#0xe0000,r10	
    b16c:	ce 55 00 00 	add.b	r5,	0(r14)	;0x0000(r14)
    b170:	82 00 00 00 	mova	#0x00000,r2	
    b174:	00 00       	bra	@r0		
    b176:	00 00       	bra	@r0		
    b178:	e1 55 00 00 	add.b	@r5,	0(r1)	;0x0000(r1)
    b17c:	82 00 00 00 	mova	#0x00000,r2	
    b180:	13 10       	rrc	#1		;r3 As==01
    b182:	00 00       	bra	@r0		
    b184:	43 04       	rrcm.a	#2,	#0	;r3 As==00
    b186:	00 00       	bra	@r0		
    b188:	80 00 97 00 	bra	#0x00097	
    b18c:	00 00       	bra	@r0		
    b18e:	00 00       	bra	@r0		
    b190:	5a 04       	rrcm	#2,	r10	
    b192:	00 00       	bra	@r0		
    b194:	80 00 d5 00 	bra	#0x000d5	
    b198:	00 00       	bra	@r0		
    b19a:	00 00       	bra	@r0		
    b19c:	6e 04 00 00 	mova	r4,	&0xe0000
    b1a0:	80 00 45 01 	bra	#0x00145	
	...
    b1ac:	a2 00 00 00 	adda	#0x00000,r2	
    b1b0:	00 00       	bra	@r0		
    b1b2:	00 00       	bra	@r0		
    b1b4:	37 56       	add	@r6+,	r7	
    b1b6:	00 00       	bra	@r0		
    b1b8:	82 00 00 00 	mova	#0x00000,r2	
    b1bc:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
    b1c0:	4e 56       	add.b	r6,	r14	
    b1c2:	00 00       	bra	@r0		
    b1c4:	82 00 00 00 	mova	#0x00000,r2	
	...
    b1d0:	a2 00 00 00 	adda	#0x00000,r2	
    b1d4:	00 00       	bra	@r0		
    b1d6:	00 00       	bra	@r0		
    b1d8:	65 56       	add.b	@r6,	r5	
    b1da:	00 00       	bra	@r0		
    b1dc:	82 00 00 00 	mova	#0x00000,r2	
    b1e0:	91 34       	jge	$+292    	;abs 0xb304
    b1e2:	00 00       	bra	@r0		
    b1e4:	f5 04       	suba	r4,	r5	
    b1e6:	00 00       	bra	@r0		
    b1e8:	80 00 26 00 	bra	#0x00026	
    b1ec:	00 00       	bra	@r0		
    b1ee:	00 00       	bra	@r0		
    b1f0:	0a 05       	mova	@r5,	r10	
    b1f2:	00 00       	bra	@r0		
    b1f4:	80 00 27 00 	bra	#0x00027	
    b1f8:	00 00       	bra	@r0		
    b1fa:	00 00       	bra	@r0		
    b1fc:	20 05 00 00 	bra	&0x50000	
    b200:	80 00 29 00 	bra	#0x00029	
    b204:	00 00       	bra	@r0		
    b206:	00 00       	bra	@r0		
    b208:	35 05 00 00 	mova	0(r5),	r5	;0x0000(r5)
    b20c:	80 00 2a 00 	bra	#0x0002a	
    b210:	00 00       	bra	@r0		
    b212:	00 00       	bra	@r0		
    b214:	4b 05       	rram.a	#2,	r11	
    b216:	00 00       	bra	@r0		
    b218:	80 00 2c 00 	bra	#0x0002c	
    b21c:	00 00       	bra	@r0		
    b21e:	00 00       	bra	@r0		
    b220:	60 05 00 00 	mova	r5,	&0x00000
    b224:	80 00 2d 00 	bra	#0x0002d	
    b228:	00 00       	bra	@r0		
    b22a:	00 00       	bra	@r0		
    b22c:	76 05 00 00 	mova	r5,	0(r6)	;0x0000(r6)
    b230:	80 00 2f 00 	bra	#0x0002f	
    b234:	00 00       	bra	@r0		
    b236:	00 00       	bra	@r0		
    b238:	8b 05 00 00 	mova	#0x50000,r11	
    b23c:	80 00 30 00 	bra	#0x00030	
    b240:	00 00       	bra	@r0		
    b242:	00 00       	bra	@r0		
    b244:	a1 05 00 00 	adda	#0x50000,r1	
    b248:	80 00 35 00 	bra	#0x00035	
    b24c:	00 00       	bra	@r0		
    b24e:	00 00       	bra	@r0		
    b250:	b7 05 00 00 	suba	#0x50000,r7	
    b254:	80 00 36 00 	bra	#0x00036	
	...
    b260:	a2 00 00 00 	adda	#0x00000,r2	
    b264:	00 00       	bra	@r0		
    b266:	00 00       	bra	@r0		
    b268:	cf 05       	mova	r5,	r15	
    b26a:	00 00       	bra	@r0		
    b26c:	80 00 29 00 	bra	#0x00029	
    b270:	00 00       	bra	@r0		
    b272:	00 00       	bra	@r0		
    b274:	e4 05       	adda	r5,	r4	
    b276:	00 00       	bra	@r0		
    b278:	80 00 2a 00 	bra	#0x0002a	
    b27c:	00 00       	bra	@r0		
    b27e:	00 00       	bra	@r0		
    b280:	f9 05       	suba	r5,	r9	
    b282:	00 00       	bra	@r0		
    b284:	80 00 2b 00 	bra	#0x0002b	
    b288:	00 00       	bra	@r0		
    b28a:	00 00       	bra	@r0		
    b28c:	0c 06       	mova	@r6,	r12	
    b28e:	00 00       	bra	@r0		
    b290:	80 00 2c 00 	bra	#0x0002c	
    b294:	00 00       	bra	@r0		
    b296:	00 00       	bra	@r0		
    b298:	20 06 00 00 	bra	&0x60000	
    b29c:	80 00 2d 00 	bra	#0x0002d	
    b2a0:	00 00       	bra	@r0		
    b2a2:	00 00       	bra	@r0		
    b2a4:	34 06 00 00 	mova	0(r6),	r4	;0x0000(r6)
    b2a8:	80 00 2e 00 	bra	#0x0002e	
    b2ac:	00 00       	bra	@r0		
    b2ae:	00 00       	bra	@r0		
    b2b0:	46 06       	rlam.a	#2,	r6	
    b2b2:	00 00       	bra	@r0		
    b2b4:	80 00 30 00 	bra	#0x00030	
    b2b8:	00 00       	bra	@r0		
    b2ba:	00 00       	bra	@r0		
    b2bc:	5c 06       	rlam	#2,	r12	
    b2be:	00 00       	bra	@r0		
    b2c0:	80 00 31 00 	bra	#0x00031	
    b2c4:	00 00       	bra	@r0		
    b2c6:	00 00       	bra	@r0		
    b2c8:	73 06       	.word	0x0673;	????	Illegal as address instr
    b2ca:	00 00       	bra	@r0		
    b2cc:	80 00 32 00 	bra	#0x00032	
    b2d0:	00 00       	bra	@r0		
    b2d2:	00 00       	bra	@r0		
    b2d4:	8a 06 00 00 	mova	#0x60000,r10	
    b2d8:	80 00 33 00 	bra	#0x00033	
    b2dc:	00 00       	bra	@r0		
    b2de:	00 00       	bra	@r0		
    b2e0:	a2 06 00 00 	adda	#0x60000,r2	
    b2e4:	80 00 35 00 	bra	#0x00035	
    b2e8:	00 00       	bra	@r0		
    b2ea:	00 00       	bra	@r0		
    b2ec:	ba 06 00 00 	suba	#0x60000,r10	
    b2f0:	80 00 36 00 	bra	#0x00036	
    b2f4:	00 00       	bra	@r0		
    b2f6:	00 00       	bra	@r0		
    b2f8:	cf 06       	mova	r6,	r15	
    b2fa:	00 00       	bra	@r0		
    b2fc:	80 00 37 00 	bra	#0x00037	
    b300:	00 00       	bra	@r0		
    b302:	00 00       	bra	@r0		
    b304:	ee 06       	adda	r6,	r14	
    b306:	00 00       	bra	@r0		
    b308:	80 00 39 00 	bra	#0x00039	
    b30c:	00 00       	bra	@r0		
    b30e:	00 00       	bra	@r0		
    b310:	0c 07       	mova	@r7,	r12	
    b312:	00 00       	bra	@r0		
    b314:	80 00 3a 00 	bra	#0x0003a	
    b318:	00 00       	bra	@r0		
    b31a:	00 00       	bra	@r0		
    b31c:	34 07 00 00 	mova	0(r7),	r4	;0x0000(r7)
    b320:	80 00 3b 00 	bra	#0x0003b	
    b324:	00 00       	bra	@r0		
    b326:	00 00       	bra	@r0		
    b328:	5c 07       	rrum	#2,	r12	
    b32a:	00 00       	bra	@r0		
    b32c:	80 00 3c 00 	bra	#0x0003c	
    b330:	00 00       	bra	@r0		
    b332:	00 00       	bra	@r0		
    b334:	72 07 00 00 	mova	r7,	&0x0000	
    b338:	80 00 3d 00 	bra	#0x0003d	
    b33c:	00 00       	bra	@r0		
    b33e:	00 00       	bra	@r0		
    b340:	86 07 00 00 	mova	#0x70000,r6	
    b344:	80 00 3e 00 	bra	#0x0003e	
    b348:	00 00       	bra	@r0		
    b34a:	00 00       	bra	@r0		
    b34c:	9e 07 00 00 	cmpa	#0x70000,r14	
    b350:	80 00 3f 00 	bra	#0x0003f	
    b354:	00 00       	bra	@r0		
    b356:	00 00       	bra	@r0		
    b358:	b6 07 00 00 	suba	#0x70000,r6	
    b35c:	80 00 40 00 	bra	#0x00040	
    b360:	00 00       	bra	@r0		
    b362:	00 00       	bra	@r0		
    b364:	ca 07       	mova	r7,	r10	
    b366:	00 00       	bra	@r0		
    b368:	80 00 41 00 	bra	#0x00041	
    b36c:	00 00       	bra	@r0		
    b36e:	00 00       	bra	@r0		
    b370:	de 07       	cmpa	r7,	r14	
    b372:	00 00       	bra	@r0		
    b374:	80 00 42 00 	bra	#0x00042	
    b378:	00 00       	bra	@r0		
    b37a:	00 00       	bra	@r0		
    b37c:	f3 07       	.word	0x07f3;	????	Illegal as address instr
    b37e:	00 00       	bra	@r0		
    b380:	80 00 43 00 	bra	#0x00043	
    b384:	00 00       	bra	@r0		
    b386:	00 00       	bra	@r0		
    b388:	09 08       	mova	@r8,	r9	
    b38a:	00 00       	bra	@r0		
    b38c:	80 00 44 00 	bra	#0x00044	
    b390:	00 00       	bra	@r0		
    b392:	00 00       	bra	@r0		
    b394:	1f 08       	mova	@r8+,	r15	
    b396:	00 00       	bra	@r0		
    b398:	80 00 45 00 	bra	#0x00045	
    b39c:	00 00       	bra	@r0		
    b39e:	00 00       	bra	@r0		
    b3a0:	35 08 00 00 	mova	0(r8),	r5	;0x0000(r8)
    b3a4:	80 00 46 00 	bra	#0x00046	
    b3a8:	00 00       	bra	@r0		
    b3aa:	00 00       	bra	@r0		
    b3ac:	4b 08       	rrcm.a	#3,	r11	
    b3ae:	00 00       	bra	@r0		
    b3b0:	80 00 47 00 	bra	#0x00047	
    b3b4:	00 00       	bra	@r0		
    b3b6:	00 00       	bra	@r0		
    b3b8:	65 08 00 00 	mova	r8,	&0x50000
    b3bc:	80 00 48 00 	bra	#0x00048	
    b3c0:	00 00       	bra	@r0		
    b3c2:	00 00       	bra	@r0		
    b3c4:	7e 08 00 00 	mova	r8,	0(r14)	;0x0000(r14)
    b3c8:	80 00 49 00 	bra	#0x00049	
	...
    b3d4:	a2 00 00 00 	adda	#0x00000,r2	
    b3d8:	00 00       	bra	@r0		
    b3da:	00 00       	bra	@r0		
    b3dc:	7f 56       	add.b	@r6+,	r15	
    b3de:	00 00       	bra	@r0		
    b3e0:	82 00 00 00 	mova	#0x00000,r2	
    b3e4:	76 0d 00 00 	mova	r13,	0(r6)	;0x0000(r6)
    b3e8:	c6 08       	mova	r8,	r6	
    b3ea:	00 00       	bra	@r0		
    b3ec:	80 00 2b 00 	bra	#0x0002b	
    b3f0:	00 00       	bra	@r0		
    b3f2:	00 00       	bra	@r0		
    b3f4:	e3 08       	.word	0x08e3;	????	Illegal as address instr
    b3f6:	00 00       	bra	@r0		
    b3f8:	80 00 6e 00 	bra	#0x0006e	
	...
    b404:	a2 00 00 00 	adda	#0x00000,r2	
	...
    b410:	a2 00 00 00 	adda	#0x00000,r2	
    b414:	00 00       	bra	@r0		
    b416:	00 00       	bra	@r0		
    b418:	d5 56 00 00 	add.b	0(r6),	36(r5)	;0x0000(r6), 0x0024(r5)
    b41c:	24 00 
    b41e:	23 00       	.word	0x0023;	????	Illegal as address instr
    b420:	aa 5f 00 00 	add	@r15,	0(r10)	;0x0000(r10)
    b424:	e3 56       	add.b	@r6,	#1	;r3 As==01
    b426:	00 00       	bra	@r0		
    b428:	a0 00 22 00 	adda	#0x00022,r0	
	...
    b434:	44 00       	rrcm.a	#1,	r4	
    b436:	23 00       	.word	0x0023;	????	Illegal as address instr
	...
    b440:	44 00       	rrcm.a	#1,	r4	
    b442:	27 00 06 00 	mova	&0x00006,r7	
    b446:	00 00       	bra	@r0		
    b448:	00 00       	bra	@r0		
    b44a:	00 00       	bra	@r0		
    b44c:	44 00       	rrcm.a	#1,	r4	
    b44e:	29 00 10 00 	mova	&0x00010,r9	
    b452:	00 00       	bra	@r0		
    b454:	00 00       	bra	@r0		
    b456:	00 00       	bra	@r0		
    b458:	44 00       	rrcm.a	#1,	r4	
    b45a:	2a 00 10 00 	mova	&0x00010,r10	
    b45e:	00 00       	bra	@r0		
    b460:	f2 56 00 00 	add.b	@r6+,	&0x0000	
    b464:	40 00       	rrcm.a	#1,	r0	
    b466:	22 00 0e 00 	mova	&0x0000e,r2	
    b46a:	00 00       	bra	@r0		
    b46c:	01 57       	add	r7,	r1	
    b46e:	00 00       	bra	@r0		
    b470:	40 00       	rrcm.a	#1,	r0	
    b472:	24 00 0f 00 	mova	&0x0000f,r4	
    b476:	00 00       	bra	@r0		
    b478:	00 00       	bra	@r0		
    b47a:	00 00       	bra	@r0		
    b47c:	c0 00       	bra	r0		
    b47e:	00 00       	bra	@r0		
    b480:	06 00       	mova	@r0,	r6	
    b482:	00 00       	bra	@r0		
    b484:	00 00       	bra	@r0		
    b486:	00 00       	bra	@r0		
    b488:	e0 00       	adda	r0,	r0	
    b48a:	00 00       	bra	@r0		
    b48c:	10 00       	bra	#0x00000	
    b48e:	00 00       	bra	@r0		
    b490:	00 00       	bra	@r0		
    b492:	00 00       	bra	@r0		
    b494:	24 00 00 00 	mova	&0x00000,r4	
    b498:	12 00       	mova	#0x00000,r2	
    b49a:	00 00       	bra	@r0		
    b49c:	00 00       	bra	@r0		
    b49e:	00 00       	bra	@r0		
    b4a0:	64 00 00 00 	mova	r0,	&0x40000
    b4a4:	bc 5f 00 00 	add	@r15+,	0(r12)	;0x0000(r12)
    b4a8:	8b 55 00 00 	add	r5,	0(r11)	;0x0000(r11)
    b4ac:	64 00 00 00 	mova	r0,	&0x40000
    b4b0:	bc 5f 00 00 	add	@r15+,	0(r12)	;0x0000(r12)
    b4b4:	0c 57       	add	r7,	r12	
    b4b6:	00 00       	bra	@r0		
    b4b8:	64 00 00 00 	mova	r0,	&0x40000
    b4bc:	bc 5f 00 00 	add	@r15+,	0(r12)	;0x0000(r12)
    b4c0:	6a 00 00 00 	mova	r0,	&0xa0000
    b4c4:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0b4c6
    b4c8:	00 00       	bra	@r0		
    b4ca:	00 00       	bra	@r0		
    b4cc:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    b4d0:	80 00 00 00 	bra	#0x00000	
    b4d4:	00 00       	bra	@r0		
    b4d6:	00 00       	bra	@r0		
    b4d8:	99 00 00 00 	cmpa	#0x00000,r9	
    b4dc:	80 00 00 00 	bra	#0x00000	
    b4e0:	00 00       	bra	@r0		
    b4e2:	00 00       	bra	@r0		
    b4e4:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    b4e6:	00 00       	bra	@r0		
    b4e8:	80 00 00 00 	bra	#0x00000	
    b4ec:	00 00       	bra	@r0		
    b4ee:	00 00       	bra	@r0		
    b4f0:	ec 00       	adda	r0,	r12	
    b4f2:	00 00       	bra	@r0		
    b4f4:	80 00 00 00 	bra	#0x00000	
    b4f8:	00 00       	bra	@r0		
    b4fa:	00 00       	bra	@r0		
    b4fc:	24 01 00 00 	mova	&0x10000,r4	
    b500:	80 00 00 00 	bra	#0x00000	
    b504:	00 00       	bra	@r0		
    b506:	00 00       	bra	@r0		
    b508:	66 01 00 00 	mova	r1,	&0x60000
    b50c:	80 00 00 00 	bra	#0x00000	
    b510:	00 00       	bra	@r0		
    b512:	00 00       	bra	@r0		
    b514:	b7 01 00 00 	suba	#0x10000,r7	
    b518:	80 00 00 00 	bra	#0x00000	
    b51c:	00 00       	bra	@r0		
    b51e:	00 00       	bra	@r0		
    b520:	08 02       	mova	#4,	r8	;r2 As==10
    b522:	00 00       	bra	@r0		
    b524:	80 00 00 00 	bra	#0x00000	
    b528:	00 00       	bra	@r0		
    b52a:	00 00       	bra	@r0		
    b52c:	2e 02 00 00 	mova	&0x20000,r14	
    b530:	80 00 00 00 	bra	#0x00000	
    b534:	00 00       	bra	@r0		
    b536:	00 00       	bra	@r0		
    b538:	6c 02 00 00 	mova	r2,	&0xc0000
    b53c:	80 00 00 00 	bra	#0x00000	
    b540:	00 00       	bra	@r0		
    b542:	00 00       	bra	@r0		
    b544:	96 02 00 00 	cmpa	#0x20000,r6	
    b548:	80 00 00 00 	bra	#0x00000	
    b54c:	00 00       	bra	@r0		
    b54e:	00 00       	bra	@r0		
    b550:	bf 02 00 00 	suba	#0x20000,r15	
    b554:	80 00 00 00 	bra	#0x00000	
    b558:	00 00       	bra	@r0		
    b55a:	00 00       	bra	@r0		
    b55c:	d9 02       	cmpa	r2,	r9	
    b55e:	00 00       	bra	@r0		
    b560:	80 00 00 00 	bra	#0x00000	
    b564:	00 00       	bra	@r0		
    b566:	00 00       	bra	@r0		
    b568:	f4 02       	suba	r2,	r4	
    b56a:	00 00       	bra	@r0		
    b56c:	80 00 00 00 	bra	#0x00000	
    b570:	00 00       	bra	@r0		
    b572:	00 00       	bra	@r0		
    b574:	14 03       	mova	#-1,	r4	;r3 As==11
    b576:	00 00       	bra	@r0		
    b578:	80 00 00 00 	bra	#0x00000	
    b57c:	00 00       	bra	@r0		
    b57e:	00 00       	bra	@r0		
    b580:	4d 03       	rrum.a	#1,	r13	
    b582:	00 00       	bra	@r0		
    b584:	80 00 00 00 	bra	#0x00000	
    b588:	00 00       	bra	@r0		
    b58a:	00 00       	bra	@r0		
    b58c:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    b590:	80 00 00 00 	bra	#0x00000	
    b594:	00 00       	bra	@r0		
    b596:	00 00       	bra	@r0		
    b598:	8a 03 00 00 	mova	#0x30000,r10	
    b59c:	80 00 00 00 	bra	#0x00000	
    b5a0:	00 00       	bra	@r0		
    b5a2:	00 00       	bra	@r0		
    b5a4:	ae 03 00 00 	adda	#0x30000,r14	
    b5a8:	80 00 00 00 	bra	#0x00000	
    b5ac:	00 00       	bra	@r0		
    b5ae:	00 00       	bra	@r0		
    b5b0:	d7 03       	tsta	r7		
    b5b2:	00 00       	bra	@r0		
    b5b4:	80 00 00 00 	bra	#0x00000	
    b5b8:	00 00       	bra	@r0		
    b5ba:	00 00       	bra	@r0		
    b5bc:	0c 57       	add	r7,	r12	
    b5be:	00 00       	bra	@r0		
    b5c0:	82 00 00 00 	mova	#0x00000,r2	
    b5c4:	ef 7f 00 00 	subc.b	@r15,	0(r15)	;0x0000(r15)
    b5c8:	1e 57 00 00 	add	0(r7),	r14	;0x0000(r7)
    b5cc:	82 00 00 00 	mova	#0x00000,r2	
    b5d0:	00 00       	bra	@r0		
    b5d2:	00 00       	bra	@r0		
    b5d4:	e1 55 00 00 	add.b	@r5,	0(r1)	;0x0000(r1)
    b5d8:	c2 00       	mova	r0,	r2	
    b5da:	00 00       	bra	@r0		
    b5dc:	13 10       	rrc	#1		;r3 As==01
    b5de:	00 00       	bra	@r0		
    b5e0:	37 56       	add	@r6+,	r7	
    b5e2:	00 00       	bra	@r0		
    b5e4:	c2 00       	mova	r0,	r2	
    b5e6:	00 00       	bra	@r0		
    b5e8:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
    b5ec:	4e 56       	add.b	r6,	r14	
    b5ee:	00 00       	bra	@r0		
    b5f0:	c2 00       	mova	r0,	r2	
    b5f2:	00 00       	bra	@r0		
    b5f4:	00 00       	bra	@r0		
    b5f6:	00 00       	bra	@r0		
    b5f8:	65 56       	add.b	@r6,	r5	
    b5fa:	00 00       	bra	@r0		
    b5fc:	c2 00       	mova	r0,	r2	
    b5fe:	00 00       	bra	@r0		
    b600:	91 34       	jge	$+292    	;abs 0xb724
    b602:	00 00       	bra	@r0		
    b604:	00 00       	bra	@r0		
    b606:	00 00       	bra	@r0		
    b608:	a2 00 00 00 	adda	#0x00000,r2	
    b60c:	00 00       	bra	@r0		
    b60e:	00 00       	bra	@r0		
    b610:	7f 56       	add.b	@r6+,	r15	
    b612:	00 00       	bra	@r0		
    b614:	c2 00       	mova	r0,	r2	
    b616:	00 00       	bra	@r0		
    b618:	76 0d 00 00 	mova	r13,	0(r6)	;0x0000(r6)
    b61c:	32 57       	add	@r7+,	r2	
    b61e:	00 00       	bra	@r0		
    b620:	24 00 6b 00 	mova	&0x0006b,r4	
    b624:	bc 5f 00 00 	add	@r15+,	0(r12)	;0x0000(r12)
    b628:	3f 57       	add	@r7+,	r15	
    b62a:	00 00       	bra	@r0		
    b62c:	40 00       	rrcm.a	#1,	r0	
    b62e:	6a 00 0a 00 	mova	r0,	&0xa000a
    b632:	00 00       	bra	@r0		
    b634:	4b 57       	add.b	r7,	r11	
    b636:	00 00       	bra	@r0		
    b638:	40 00       	rrcm.a	#1,	r0	
    b63a:	6a 00 0b 00 	mova	r0,	&0xa000b
    b63e:	00 00       	bra	@r0		
    b640:	00 00       	bra	@r0		
    b642:	00 00       	bra	@r0		
    b644:	44 00       	rrcm.a	#1,	r4	
    b646:	6b 00 00 00 	mova	r0,	&0xb0000
    b64a:	00 00       	bra	@r0		
    b64c:	00 00       	bra	@r0		
    b64e:	00 00       	bra	@r0		
    b650:	44 00       	rrcm.a	#1,	r4	
    b652:	6c 00 08 00 	mova	r0,	&0xc0008
    b656:	00 00       	bra	@r0		
    b658:	00 00       	bra	@r0		
    b65a:	00 00       	bra	@r0		
    b65c:	44 00       	rrcm.a	#1,	r4	
    b65e:	74 00 0c 00 	mova	r0,	12(r4)	;0x000c(r4)
    b662:	00 00       	bra	@r0		
    b664:	00 00       	bra	@r0		
    b666:	00 00       	bra	@r0		
    b668:	44 00       	rrcm.a	#1,	r4	
    b66a:	6e 00 10 00 	mova	r0,	&0xe0010
    b66e:	00 00       	bra	@r0		
    b670:	00 00       	bra	@r0		
    b672:	00 00       	bra	@r0		
    b674:	44 00       	rrcm.a	#1,	r4	
    b676:	72 00 1e 00 	mova	r0,	&0x001e	
    b67a:	00 00       	bra	@r0		
    b67c:	00 00       	bra	@r0		
    b67e:	00 00       	bra	@r0		
    b680:	44 00       	rrcm.a	#1,	r4	
    b682:	6c 00 22 00 	mova	r0,	&0xc0022
    b686:	00 00       	bra	@r0		
    b688:	00 00       	bra	@r0		
    b68a:	00 00       	bra	@r0		
    b68c:	44 00       	rrcm.a	#1,	r4	
    b68e:	70 00 28 00 	mova	r0,	0x0028	;PC rel. 0x0b6b8
    b692:	00 00       	bra	@r0		
    b694:	00 00       	bra	@r0		
    b696:	00 00       	bra	@r0		
    b698:	44 00       	rrcm.a	#1,	r4	
    b69a:	75 00 2a 00 	mova	r0,	42(r5)	;0x002a(r5)
    b69e:	00 00       	bra	@r0		
    b6a0:	00 00       	bra	@r0		
    b6a2:	00 00       	bra	@r0		
    b6a4:	24 00 00 00 	mova	&0x00000,r4	
    b6a8:	30 00 00 00 	bra	0x0000		;PC rel. 0x0b6aa
    b6ac:	56 57 00 00 	add.b	0(r7),	r6	;0x0000(r7)
    b6b0:	24 00 7b 00 	mova	&0x0007b,r4	
    b6b4:	ec 5f 00 00 	add.b	@r15,	0(r12)	;0x0000(r12)
    b6b8:	69 57       	add.b	@r7,	r9	
    b6ba:	00 00       	bra	@r0		
    b6bc:	40 00       	rrcm.a	#1,	r0	
    b6be:	7a 00 09 00 	mova	r0,	9(r10)	;0x0009(r10)
    b6c2:	00 00       	bra	@r0		
    b6c4:	72 57       	add.b	@r7+,	r2	
    b6c6:	00 00       	bra	@r0		
    b6c8:	40 00       	rrcm.a	#1,	r0	
    b6ca:	7a 00 0b 00 	mova	r0,	11(r10)	;0x000b(r10)
    b6ce:	00 00       	bra	@r0		
    b6d0:	00 00       	bra	@r0		
    b6d2:	00 00       	bra	@r0		
    b6d4:	44 00       	rrcm.a	#1,	r4	
    b6d6:	7b 00 00 00 	mova	r0,	0(r11)	;0x0000(r11)
    b6da:	00 00       	bra	@r0		
    b6dc:	00 00       	bra	@r0		
    b6de:	00 00       	bra	@r0		
    b6e0:	44 00       	rrcm.a	#1,	r4	
    b6e2:	7c 00 0a 00 	mova	r0,	10(r12)	;0x000a(r12)
    b6e6:	00 00       	bra	@r0		
    b6e8:	00 00       	bra	@r0		
    b6ea:	00 00       	bra	@r0		
    b6ec:	44 00       	rrcm.a	#1,	r4	
    b6ee:	7e 00 12 00 	mova	r0,	18(r14)	;0x0012(r14)
    b6f2:	00 00       	bra	@r0		
    b6f4:	00 00       	bra	@r0		
    b6f6:	00 00       	bra	@r0		
    b6f8:	44 00       	rrcm.a	#1,	r4	
    b6fa:	82 00 1c 00 	mova	#0x0001c,r2	
    b6fe:	00 00       	bra	@r0		
    b700:	00 00       	bra	@r0		
    b702:	00 00       	bra	@r0		
    b704:	44 00       	rrcm.a	#1,	r4	
    b706:	7c 00 20 00 	mova	r0,	32(r12)	;0x0020(r12)
    b70a:	00 00       	bra	@r0		
    b70c:	00 00       	bra	@r0		
    b70e:	00 00       	bra	@r0		
    b710:	44 00       	rrcm.a	#1,	r4	
    b712:	84 00 26 00 	mova	#0x00026,r4	
    b716:	00 00       	bra	@r0		
    b718:	00 00       	bra	@r0		
    b71a:	00 00       	bra	@r0		
    b71c:	44 00       	rrcm.a	#1,	r4	
    b71e:	80 00 2a 00 	bra	#0x0002a	
    b722:	00 00       	bra	@r0		
    b724:	00 00       	bra	@r0		
    b726:	00 00       	bra	@r0		
    b728:	44 00       	rrcm.a	#1,	r4	
    b72a:	85 00 2c 00 	mova	#0x0002c,r5	
    b72e:	00 00       	bra	@r0		
    b730:	00 00       	bra	@r0		
    b732:	00 00       	bra	@r0		
    b734:	24 00 00 00 	mova	&0x00000,r4	
    b738:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0b73a
    b73c:	82 57 00 00 	add	r7,	&0x0000	
    b740:	24 00 a1 00 	mova	&0x000a1,r4	
    b744:	20 60       	addc	@r0,	r0	
    b746:	00 00       	bra	@r0		
    b748:	92 57 00 00 	add	0(r7),	&0x0040	;0x0000(r7)
    b74c:	40 00 
    b74e:	a0 00 0f 00 	adda	#0x0000f,r0	
    b752:	00 00       	bra	@r0		
    b754:	ac 57 00 00 	add	@r7,	0(r12)	;0x0000(r12)
    b758:	40 00       	rrcm.a	#1,	r0	
    b75a:	a0 00 0e 00 	adda	#0x0000e,r0	
    b75e:	00 00       	bra	@r0		
    b760:	b9 57 00 00 	add	@r7+,	0(r9)	;0x0000(r9)
    b764:	40 00       	rrcm.a	#1,	r0	
    b766:	a0 00 05 00 	adda	#0x00005,r0	
    b76a:	00 00       	bra	@r0		
    b76c:	00 00       	bra	@r0		
    b76e:	00 00       	bra	@r0		
    b770:	44 00       	rrcm.a	#1,	r4	
    b772:	a1 00 00 00 	adda	#0x00000,r1	
    b776:	00 00       	bra	@r0		
    b778:	00 00       	bra	@r0		
    b77a:	00 00       	bra	@r0		
    b77c:	44 00       	rrcm.a	#1,	r4	
    b77e:	ab 00 16 00 	adda	#0x00016,r11	
    b782:	00 00       	bra	@r0		
    b784:	00 00       	bra	@r0		
    b786:	00 00       	bra	@r0		
    b788:	44 00       	rrcm.a	#1,	r4	
    b78a:	ba 00 1e 00 	suba	#0x0001e,r10	
    b78e:	00 00       	bra	@r0		
    b790:	00 00       	bra	@r0		
    b792:	00 00       	bra	@r0		
    b794:	44 00       	rrcm.a	#1,	r4	
    b796:	bb 00 22 00 	suba	#0x00022,r11	
    b79a:	00 00       	bra	@r0		
    b79c:	00 00       	bra	@r0		
    b79e:	00 00       	bra	@r0		
    b7a0:	44 00       	rrcm.a	#1,	r4	
    b7a2:	bd 00 26 00 	suba	#0x00026,r13	
    b7a6:	00 00       	bra	@r0		
    b7a8:	00 00       	bra	@r0		
    b7aa:	00 00       	bra	@r0		
    b7ac:	44 00       	rrcm.a	#1,	r4	
    b7ae:	c4 00       	mova	r0,	r4	
    b7b0:	28 00 00 00 	mova	&0x00000,r8	
    b7b4:	00 00       	bra	@r0		
    b7b6:	00 00       	bra	@r0		
    b7b8:	44 00       	rrcm.a	#1,	r4	
    b7ba:	c6 00       	mova	r0,	r6	
    b7bc:	44 00       	rrcm.a	#1,	r4	
    b7be:	00 00       	bra	@r0		
    b7c0:	00 00       	bra	@r0		
    b7c2:	00 00       	bra	@r0		
    b7c4:	44 00       	rrcm.a	#1,	r4	
    b7c6:	ca 00       	mova	r0,	r10	
    b7c8:	4e 00       	rrcm.a	#1,	r14	
    b7ca:	00 00       	bra	@r0		
    b7cc:	00 00       	bra	@r0		
    b7ce:	00 00       	bra	@r0		
    b7d0:	44 00       	rrcm.a	#1,	r4	
    b7d2:	cc 00       	mova	r0,	r12	
    b7d4:	56 00       	rrcm	#1,	r6	
    b7d6:	00 00       	bra	@r0		
    b7d8:	00 00       	bra	@r0		
    b7da:	00 00       	bra	@r0		
    b7dc:	44 00       	rrcm.a	#1,	r4	
    b7de:	ce 00       	mova	r0,	r14	
    b7e0:	58 00       	rrcm	#1,	r8	
    b7e2:	00 00       	bra	@r0		
    b7e4:	00 00       	bra	@r0		
    b7e6:	00 00       	bra	@r0		
    b7e8:	44 00       	rrcm.a	#1,	r4	
    b7ea:	cf 00       	mova	r0,	r15	
    b7ec:	5c 00       	rrcm	#1,	r12	
    b7ee:	00 00       	bra	@r0		
    b7f0:	00 00       	bra	@r0		
    b7f2:	00 00       	bra	@r0		
    b7f4:	44 00       	rrcm.a	#1,	r4	
    b7f6:	d0 00       	cmpa	r0,	r0	
    b7f8:	60 00 00 00 	mova	r0,	&0x00000
    b7fc:	00 00       	bra	@r0		
    b7fe:	00 00       	bra	@r0		
    b800:	44 00       	rrcm.a	#1,	r4	
    b802:	d1 00       	cmpa	r0,	r1	
    b804:	64 00 00 00 	mova	r0,	&0x40000
    b808:	00 00       	bra	@r0		
    b80a:	00 00       	bra	@r0		
    b80c:	44 00       	rrcm.a	#1,	r4	
    b80e:	d2 00       	cmpa	r0,	r2	
    b810:	66 00 00 00 	mova	r0,	&0x60000
    b814:	00 00       	bra	@r0		
    b816:	00 00       	bra	@r0		
    b818:	44 00       	rrcm.a	#1,	r4	
    b81a:	d5 00       	cmpa	r0,	r5	
    b81c:	6a 00 00 00 	mova	r0,	&0xa0000
    b820:	00 00       	bra	@r0		
    b822:	00 00       	bra	@r0		
    b824:	44 00       	rrcm.a	#1,	r4	
    b826:	d7 00       	cmpa	r0,	r7	
    b828:	6e 00 00 00 	mova	r0,	&0xe0000
    b82c:	00 00       	bra	@r0		
    b82e:	00 00       	bra	@r0		
    b830:	44 00       	rrcm.a	#1,	r4	
    b832:	e5 00       	adda	r0,	r5	
    b834:	88 00 00 00 	mova	#0x00000,r8	
    b838:	00 00       	bra	@r0		
    b83a:	00 00       	bra	@r0		
    b83c:	44 00       	rrcm.a	#1,	r4	
    b83e:	f0 00       	suba	r0,	r0	
    b840:	92 00 00 00 	cmpa	#0x00000,r2	
    b844:	00 00       	bra	@r0		
    b846:	00 00       	bra	@r0		
    b848:	44 00       	rrcm.a	#1,	r4	
    b84a:	f5 00       	suba	r0,	r5	
    b84c:	9c 00 00 00 	cmpa	#0x00000,r12	
    b850:	00 00       	bra	@r0		
    b852:	00 00       	bra	@r0		
    b854:	44 00       	rrcm.a	#1,	r4	
    b856:	07 01       	mova	@r1,	r7	
    b858:	b0 00 00 00 	suba	#0x00000,r0	
    b85c:	00 00       	bra	@r0		
    b85e:	00 00       	bra	@r0		
    b860:	44 00       	rrcm.a	#1,	r4	
    b862:	0c 01       	mova	@r1,	r12	
    b864:	ba 00 00 00 	suba	#0x00000,r10	
    b868:	00 00       	bra	@r0		
    b86a:	00 00       	bra	@r0		
    b86c:	44 00       	rrcm.a	#1,	r4	
    b86e:	1d 01       	mova	@r1+,	r13	
    b870:	c4 00       	mova	r0,	r4	
    b872:	00 00       	bra	@r0		
    b874:	00 00       	bra	@r0		
    b876:	00 00       	bra	@r0		
    b878:	44 00       	rrcm.a	#1,	r4	
    b87a:	28 01 ce 00 	mova	&0x100ce,r8	
    b87e:	00 00       	bra	@r0		
    b880:	00 00       	bra	@r0		
    b882:	00 00       	bra	@r0		
    b884:	44 00       	rrcm.a	#1,	r4	
    b886:	2a 01 da 00 	mova	&0x100da,r10	
    b88a:	00 00       	bra	@r0		
    b88c:	00 00       	bra	@r0		
    b88e:	00 00       	bra	@r0		
    b890:	44 00       	rrcm.a	#1,	r4	
    b892:	2d 01 dc 00 	mova	&0x100dc,r13	
    b896:	00 00       	bra	@r0		
    b898:	00 00       	bra	@r0		
    b89a:	00 00       	bra	@r0		
    b89c:	44 00       	rrcm.a	#1,	r4	
    b89e:	2e 01 f8 00 	mova	&0x100f8,r14	
    b8a2:	00 00       	bra	@r0		
    b8a4:	00 00       	bra	@r0		
    b8a6:	00 00       	bra	@r0		
    b8a8:	44 00       	rrcm.a	#1,	r4	
    b8aa:	2f 01 fc 00 	mova	&0x100fc,r15	
    b8ae:	00 00       	bra	@r0		
    b8b0:	00 00       	bra	@r0		
    b8b2:	00 00       	bra	@r0		
    b8b4:	44 00       	rrcm.a	#1,	r4	
    b8b6:	31 01 08 01 	mova	264(r1),r1	;0x0108(r1)
    b8ba:	00 00       	bra	@r0		
    b8bc:	00 00       	bra	@r0		
    b8be:	00 00       	bra	@r0		
    b8c0:	44 00       	rrcm.a	#1,	r4	
    b8c2:	32 01 0c 01 	mova	268(r1),r2	;0x010c(r1)
    b8c6:	00 00       	bra	@r0		
    b8c8:	00 00       	bra	@r0		
    b8ca:	00 00       	bra	@r0		
    b8cc:	44 00       	rrcm.a	#1,	r4	
    b8ce:	34 01 0e 01 	mova	270(r1),r4	;0x010e(r1)
    b8d2:	00 00       	bra	@r0		
    b8d4:	00 00       	bra	@r0		
    b8d6:	00 00       	bra	@r0		
    b8d8:	44 00       	rrcm.a	#1,	r4	
    b8da:	39 01 14 01 	mova	276(r1),r9	;0x0114(r1)
    b8de:	00 00       	bra	@r0		
    b8e0:	00 00       	bra	@r0		
    b8e2:	00 00       	bra	@r0		
    b8e4:	44 00       	rrcm.a	#1,	r4	
    b8e6:	3b 01 1a 01 	mova	282(r1),r11	;0x011a(r1)
    b8ea:	00 00       	bra	@r0		
    b8ec:	00 00       	bra	@r0		
    b8ee:	00 00       	bra	@r0		
    b8f0:	44 00       	rrcm.a	#1,	r4	
    b8f2:	3c 01 1e 01 	mova	286(r1),r12	;0x011e(r1)
    b8f6:	00 00       	bra	@r0		
    b8f8:	00 00       	bra	@r0		
    b8fa:	00 00       	bra	@r0		
    b8fc:	44 00       	rrcm.a	#1,	r4	
    b8fe:	3e 01 20 01 	mova	288(r1),r14	;0x0120(r1)
    b902:	00 00       	bra	@r0		
    b904:	00 00       	bra	@r0		
    b906:	00 00       	bra	@r0		
    b908:	44 00       	rrcm.a	#1,	r4	
    b90a:	44 01       	rram.a	#1,	r4	
    b90c:	26 01 00 00 	mova	&0x10000,r6	
    b910:	00 00       	bra	@r0		
    b912:	00 00       	bra	@r0		
    b914:	44 00       	rrcm.a	#1,	r4	
    b916:	5b 01       	rram	#1,	r11	
    b918:	38 01 00 00 	mova	0(r1),	r8	;0x0000(r1)
    b91c:	00 00       	bra	@r0		
    b91e:	00 00       	bra	@r0		
    b920:	44 00       	rrcm.a	#1,	r4	
    b922:	62 01 44 01 	mova	r1,	&0x20144
    b926:	00 00       	bra	@r0		
    b928:	00 00       	bra	@r0		
    b92a:	00 00       	bra	@r0		
    b92c:	44 00       	rrcm.a	#1,	r4	
    b92e:	72 01 4a 01 	mova	r1,	&0x014a	
    b932:	00 00       	bra	@r0		
    b934:	00 00       	bra	@r0		
    b936:	00 00       	bra	@r0		
    b938:	44 00       	rrcm.a	#1,	r4	
    b93a:	94 01 50 01 	cmpa	#0x10150,r4	
    b93e:	00 00       	bra	@r0		
    b940:	00 00       	bra	@r0		
    b942:	00 00       	bra	@r0		
    b944:	44 00       	rrcm.a	#1,	r4	
    b946:	9b 01 5c 01 	cmpa	#0x1015c,r11	
    b94a:	00 00       	bra	@r0		
    b94c:	00 00       	bra	@r0		
    b94e:	00 00       	bra	@r0		
    b950:	44 00       	rrcm.a	#1,	r4	
    b952:	d4 01       	cmpa	r1,	r4	
    b954:	68 01 00 00 	mova	r1,	&0x80000
    b958:	00 00       	bra	@r0		
    b95a:	00 00       	bra	@r0		
    b95c:	44 00       	rrcm.a	#1,	r4	
    b95e:	d7 01       	cmpa	r1,	r7	
    b960:	70 01 00 00 	mova	r1,	0x0000	;PC rel. 0x0b962
    b964:	00 00       	bra	@r0		
    b966:	00 00       	bra	@r0		
    b968:	44 00       	rrcm.a	#1,	r4	
    b96a:	d8 01       	cmpa	r1,	r8	
    b96c:	74 01 00 00 	mova	r1,	0(r4)	;0x0000(r4)
    b970:	00 00       	bra	@r0		
    b972:	00 00       	bra	@r0		
    b974:	44 00       	rrcm.a	#1,	r4	
    b976:	d9 01       	cmpa	r1,	r9	
    b978:	78 01 00 00 	mova	r1,	0(r8)	;0x0000(r8)
    b97c:	00 00       	bra	@r0		
    b97e:	00 00       	bra	@r0		
    b980:	44 00       	rrcm.a	#1,	r4	
    b982:	da 01       	cmpa	r1,	r10	
    b984:	7a 01 00 00 	mova	r1,	0(r10)	;0x0000(r10)
    b988:	00 00       	bra	@r0		
    b98a:	00 00       	bra	@r0		
    b98c:	44 00       	rrcm.a	#1,	r4	
    b98e:	ee 01       	adda	r1,	r14	
    b990:	7e 01 00 00 	mova	r1,	0(r14)	;0x0000(r14)
    b994:	00 00       	bra	@r0		
    b996:	00 00       	bra	@r0		
    b998:	44 00       	rrcm.a	#1,	r4	
    b99a:	f0 01       	suba	r1,	r0	
    b99c:	80 01 00 00 	bra	#0x10000	
    b9a0:	00 00       	bra	@r0		
    b9a2:	00 00       	bra	@r0		
    b9a4:	44 00       	rrcm.a	#1,	r4	
    b9a6:	f1 01       	suba	r1,	r1	
    b9a8:	86 01 00 00 	mova	#0x10000,r6	
    b9ac:	00 00       	bra	@r0		
    b9ae:	00 00       	bra	@r0		
    b9b0:	44 00       	rrcm.a	#1,	r4	
    b9b2:	f6 01       	suba	r1,	r6	
    b9b4:	88 01 00 00 	mova	#0x10000,r8	
    b9b8:	00 00       	bra	@r0		
    b9ba:	00 00       	bra	@r0		
    b9bc:	44 00       	rrcm.a	#1,	r4	
    b9be:	f8 01       	suba	r1,	r8	
    b9c0:	90 01 00 00 	cmpa	#0x10000,r0	
    b9c4:	00 00       	bra	@r0		
    b9c6:	00 00       	bra	@r0		
    b9c8:	44 00       	rrcm.a	#1,	r4	
    b9ca:	fe 01       	suba	r1,	r14	
    b9cc:	92 01 00 00 	cmpa	#0x10000,r2	
    b9d0:	00 00       	bra	@r0		
    b9d2:	00 00       	bra	@r0		
    b9d4:	44 00       	rrcm.a	#1,	r4	
    b9d6:	01 02       	mova	#4,	r1	;r2 As==10
    b9d8:	94 01 00 00 	cmpa	#0x10000,r4	
    b9dc:	00 00       	bra	@r0		
    b9de:	00 00       	bra	@r0		
    b9e0:	44 00       	rrcm.a	#1,	r4	
    b9e2:	03 02       	.word	0x0203;	????	Illegal as address instr
    b9e4:	9e 01 00 00 	cmpa	#0x10000,r14	
    b9e8:	00 00       	bra	@r0		
    b9ea:	00 00       	bra	@r0		
    b9ec:	44 00       	rrcm.a	#1,	r4	
    b9ee:	04 02       	mova	#4,	r4	;r2 As==10
    b9f0:	aa 01 00 00 	adda	#0x10000,r10	
    b9f4:	00 00       	bra	@r0		
    b9f6:	00 00       	bra	@r0		
    b9f8:	44 00       	rrcm.a	#1,	r4	
    b9fa:	06 02       	mova	#4,	r6	;r2 As==10
    b9fc:	ae 01 00 00 	adda	#0x10000,r14	
    ba00:	00 00       	bra	@r0		
    ba02:	00 00       	bra	@r0		
    ba04:	44 00       	rrcm.a	#1,	r4	
    ba06:	0b 02       	mova	#4,	r11	;r2 As==10
    ba08:	c4 01       	mova	r1,	r4	
    ba0a:	00 00       	bra	@r0		
    ba0c:	00 00       	bra	@r0		
    ba0e:	00 00       	bra	@r0		
    ba10:	44 00       	rrcm.a	#1,	r4	
    ba12:	0f 02       	mova	#4,	r15	;r2 As==10
    ba14:	c8 01       	mova	r1,	r8	
    ba16:	00 00       	bra	@r0		
    ba18:	00 00       	bra	@r0		
    ba1a:	00 00       	bra	@r0		
    ba1c:	44 00       	rrcm.a	#1,	r4	
    ba1e:	11 02       	mova	#8,	r1	;r2 As==11
    ba20:	d0 01       	cmpa	r1,	r0	
    ba22:	00 00       	bra	@r0		
    ba24:	00 00       	bra	@r0		
    ba26:	00 00       	bra	@r0		
    ba28:	44 00       	rrcm.a	#1,	r4	
    ba2a:	12 02       	mova	#8,	r2	;r2 As==11
    ba2c:	d6 01       	cmpa	r1,	r6	
    ba2e:	00 00       	bra	@r0		
    ba30:	00 00       	bra	@r0		
    ba32:	00 00       	bra	@r0		
    ba34:	44 00       	rrcm.a	#1,	r4	
    ba36:	13 02       	.word	0x0213;	????	Illegal as address instr
    ba38:	da 01       	cmpa	r1,	r10	
    ba3a:	00 00       	bra	@r0		
    ba3c:	00 00       	bra	@r0		
    ba3e:	00 00       	bra	@r0		
    ba40:	44 00       	rrcm.a	#1,	r4	
    ba42:	17 02       	mova	#8,	r7	;r2 As==11
    ba44:	ee 01       	adda	r1,	r14	
    ba46:	00 00       	bra	@r0		
    ba48:	00 00       	bra	@r0		
    ba4a:	00 00       	bra	@r0		
    ba4c:	44 00       	rrcm.a	#1,	r4	
    ba4e:	21 02 f4 01 	mova	&0x201f4,r1	
    ba52:	00 00       	bra	@r0		
    ba54:	00 00       	bra	@r0		
    ba56:	00 00       	bra	@r0		
    ba58:	44 00       	rrcm.a	#1,	r4	
    ba5a:	24 02 02 02 	mova	&0x20202,r4	
    ba5e:	00 00       	bra	@r0		
    ba60:	00 00       	bra	@r0		
    ba62:	00 00       	bra	@r0		
    ba64:	44 00       	rrcm.a	#1,	r4	
    ba66:	27 02 14 02 	mova	&0x20214,r7	
    ba6a:	00 00       	bra	@r0		
    ba6c:	00 00       	bra	@r0		
    ba6e:	00 00       	bra	@r0		
    ba70:	44 00       	rrcm.a	#1,	r4	
    ba72:	29 02 1c 02 	mova	&0x2021c,r9	
    ba76:	00 00       	bra	@r0		
    ba78:	00 00       	bra	@r0		
    ba7a:	00 00       	bra	@r0		
    ba7c:	44 00       	rrcm.a	#1,	r4	
    ba7e:	2a 02 28 02 	mova	&0x20228,r10	
    ba82:	00 00       	bra	@r0		
    ba84:	00 00       	bra	@r0		
    ba86:	00 00       	bra	@r0		
    ba88:	44 00       	rrcm.a	#1,	r4	
    ba8a:	2c 02 2c 02 	mova	&0x2022c,r12	
    ba8e:	00 00       	bra	@r0		
    ba90:	00 00       	bra	@r0		
    ba92:	00 00       	bra	@r0		
    ba94:	44 00       	rrcm.a	#1,	r4	
    ba96:	19 02       	mova	#8,	r9	;r2 As==11
    ba98:	3c 02 00 00 	mova	&0x0000,r12	
    ba9c:	00 00       	bra	@r0		
    ba9e:	00 00       	bra	@r0		
    baa0:	44 00       	rrcm.a	#1,	r4	
    baa2:	1a 02       	mova	#8,	r10	;r2 As==11
    baa4:	48 02       	rlam.a	#1,	r8	
    baa6:	00 00       	bra	@r0		
    baa8:	00 00       	bra	@r0		
    baaa:	00 00       	bra	@r0		
    baac:	44 00       	rrcm.a	#1,	r4	
    baae:	1c 02       	mova	#8,	r12	;r2 As==11
    bab0:	4c 02       	rlam.a	#1,	r12	
    bab2:	00 00       	bra	@r0		
    bab4:	00 00       	bra	@r0		
    bab6:	00 00       	bra	@r0		
    bab8:	44 00       	rrcm.a	#1,	r4	
    baba:	0d 02       	mova	#4,	r13	;r2 As==10
    babc:	5c 02       	rlam	#1,	r12	
    babe:	00 00       	bra	@r0		
    bac0:	00 00       	bra	@r0		
    bac2:	00 00       	bra	@r0		
    bac4:	44 00       	rrcm.a	#1,	r4	
    bac6:	fa 01       	suba	r1,	r10	
    bac8:	66 02 00 00 	mova	r2,	&0x60000
    bacc:	00 00       	bra	@r0		
    bace:	00 00       	bra	@r0		
    bad0:	44 00       	rrcm.a	#1,	r4	
    bad2:	fc 01       	suba	r1,	r12	
    bad4:	6e 02 00 00 	mova	r2,	&0xe0000
    bad8:	00 00       	bra	@r0		
    bada:	00 00       	bra	@r0		
    badc:	44 00       	rrcm.a	#1,	r4	
    bade:	f3 01       	.word	0x01f3;	????	Illegal as address instr
    bae0:	72 02 00 00 	mova	r2,	&0x0000	
    bae4:	00 00       	bra	@r0		
    bae6:	00 00       	bra	@r0		
    bae8:	44 00       	rrcm.a	#1,	r4	
    baea:	9d 01 76 02 	cmpa	#0x10276,r13	
    baee:	00 00       	bra	@r0		
    baf0:	00 00       	bra	@r0		
    baf2:	00 00       	bra	@r0		
    baf4:	44 00       	rrcm.a	#1,	r4	
    baf6:	9f 01 7c 02 	cmpa	#0x1027c,r15	
    bafa:	00 00       	bra	@r0		
    bafc:	00 00       	bra	@r0		
    bafe:	00 00       	bra	@r0		
    bb00:	44 00       	rrcm.a	#1,	r4	
    bb02:	a0 01 8e 02 	adda	#0x1028e,r0	
    bb06:	00 00       	bra	@r0		
    bb08:	00 00       	bra	@r0		
    bb0a:	00 00       	bra	@r0		
    bb0c:	44 00       	rrcm.a	#1,	r4	
    bb0e:	a4 01 94 02 	adda	#0x10294,r4	
    bb12:	00 00       	bra	@r0		
    bb14:	00 00       	bra	@r0		
    bb16:	00 00       	bra	@r0		
    bb18:	44 00       	rrcm.a	#1,	r4	
    bb1a:	ab 01 98 02 	adda	#0x10298,r11	
    bb1e:	00 00       	bra	@r0		
    bb20:	00 00       	bra	@r0		
    bb22:	00 00       	bra	@r0		
    bb24:	44 00       	rrcm.a	#1,	r4	
    bb26:	ac 01 a0 02 	adda	#0x102a0,r12	
    bb2a:	00 00       	bra	@r0		
    bb2c:	00 00       	bra	@r0		
    bb2e:	00 00       	bra	@r0		
    bb30:	44 00       	rrcm.a	#1,	r4	
    bb32:	b3 01       	.word	0x01b3;	????	Illegal as address instr
    bb34:	a6 02 00 00 	adda	#0x20000,r6	
    bb38:	00 00       	bra	@r0		
    bb3a:	00 00       	bra	@r0		
    bb3c:	44 00       	rrcm.a	#1,	r4	
    bb3e:	b4 01 b0 02 	suba	#0x102b0,r4	
    bb42:	00 00       	bra	@r0		
    bb44:	00 00       	bra	@r0		
    bb46:	00 00       	bra	@r0		
    bb48:	44 00       	rrcm.a	#1,	r4	
    bb4a:	b9 01 d0 02 	suba	#0x102d0,r9	
    bb4e:	00 00       	bra	@r0		
    bb50:	00 00       	bra	@r0		
    bb52:	00 00       	bra	@r0		
    bb54:	44 00       	rrcm.a	#1,	r4	
    bb56:	ba 01 ea 02 	suba	#0x102ea,r10	
    bb5a:	00 00       	bra	@r0		
    bb5c:	00 00       	bra	@r0		
    bb5e:	00 00       	bra	@r0		
    bb60:	44 00       	rrcm.a	#1,	r4	
    bb62:	bc 01 00 03 	suba	#0x10300,r12	
    bb66:	00 00       	bra	@r0		
    bb68:	00 00       	bra	@r0		
    bb6a:	00 00       	bra	@r0		
    bb6c:	44 00       	rrcm.a	#1,	r4	
    bb6e:	be 01 06 03 	suba	#0x10306,r14	
    bb72:	00 00       	bra	@r0		
    bb74:	00 00       	bra	@r0		
    bb76:	00 00       	bra	@r0		
    bb78:	44 00       	rrcm.a	#1,	r4	
    bb7a:	c5 01       	mova	r1,	r5	
    bb7c:	0a 03       	mova	#2,	r10	;r3 As==10
    bb7e:	00 00       	bra	@r0		
    bb80:	00 00       	bra	@r0		
    bb82:	00 00       	bra	@r0		
    bb84:	44 00       	rrcm.a	#1,	r4	
    bb86:	c6 01       	mova	r1,	r6	
    bb88:	16 03       	mova	#-1,	r6	;r3 As==11
    bb8a:	00 00       	bra	@r0		
    bb8c:	00 00       	bra	@r0		
    bb8e:	00 00       	bra	@r0		
    bb90:	44 00       	rrcm.a	#1,	r4	
    bb92:	c7 01       	mova	r1,	r7	
    bb94:	32 03 00 00 	mova	#1,	r2	;r3 As==01
    bb98:	00 00       	bra	@r0		
    bb9a:	00 00       	bra	@r0		
    bb9c:	44 00       	rrcm.a	#1,	r4	
    bb9e:	cb 01       	mova	r1,	r11	
    bba0:	38 03 00 00 	mova	#1,	r8	;r3 As==01
    bba4:	00 00       	bra	@r0		
    bba6:	00 00       	bra	@r0		
    bba8:	44 00       	rrcm.a	#1,	r4	
    bbaa:	cf 01       	mova	r1,	r15	
    bbac:	3e 03 00 00 	mova	#1,	r14	;r3 As==01
    bbb0:	00 00       	bra	@r0		
    bbb2:	00 00       	bra	@r0		
    bbb4:	44 00       	rrcm.a	#1,	r4	
    bbb6:	cc 01       	mova	r1,	r12	
    bbb8:	56 03       	rrum	#1,	r6	
    bbba:	00 00       	bra	@r0		
    bbbc:	00 00       	bra	@r0		
    bbbe:	00 00       	bra	@r0		
    bbc0:	44 00       	rrcm.a	#1,	r4	
    bbc2:	c2 01       	mova	r1,	r2	
    bbc4:	66 03 00 00 	mova	#0,	&0x60000;r3 As==00
    bbc8:	00 00       	bra	@r0		
    bbca:	00 00       	bra	@r0		
    bbcc:	44 00       	rrcm.a	#1,	r4	
    bbce:	c3 01       	.word	0x01c3;	????	Illegal as address instr
    bbd0:	6a 03 00 00 	mova	#0,	&0xa0000;r3 As==00
    bbd4:	00 00       	bra	@r0		
    bbd6:	00 00       	bra	@r0		
    bbd8:	44 00       	rrcm.a	#1,	r4	
    bbda:	96 01 76 03 	cmpa	#0x10376,r6	
    bbde:	00 00       	bra	@r0		
    bbe0:	00 00       	bra	@r0		
    bbe2:	00 00       	bra	@r0		
    bbe4:	44 00       	rrcm.a	#1,	r4	
    bbe6:	98 01 76 03 	cmpa	#0x10376,r8	
    bbea:	00 00       	bra	@r0		
    bbec:	00 00       	bra	@r0		
    bbee:	00 00       	bra	@r0		
    bbf0:	44 00       	rrcm.a	#1,	r4	
    bbf2:	99 01 7c 03 	cmpa	#0x1037c,r9	
    bbf6:	00 00       	bra	@r0		
    bbf8:	00 00       	bra	@r0		
    bbfa:	00 00       	bra	@r0		
    bbfc:	44 00       	rrcm.a	#1,	r4	
    bbfe:	97 01 7e 03 	cmpa	#0x1037e,r7	
    bc02:	00 00       	bra	@r0		
    bc04:	00 00       	bra	@r0		
    bc06:	00 00       	bra	@r0		
    bc08:	44 00       	rrcm.a	#1,	r4	
    bc0a:	74 01 84 03 	mova	r1,	900(r4)	;0x0384(r4)
    bc0e:	00 00       	bra	@r0		
    bc10:	00 00       	bra	@r0		
    bc12:	00 00       	bra	@r0		
    bc14:	44 00       	rrcm.a	#1,	r4	
    bc16:	7e 01 92 03 	mova	r1,	914(r14);0x0392(r14)
    bc1a:	00 00       	bra	@r0		
    bc1c:	00 00       	bra	@r0		
    bc1e:	00 00       	bra	@r0		
    bc20:	44 00       	rrcm.a	#1,	r4	
    bc22:	85 01 96 03 	mova	#0x10396,r5	
    bc26:	00 00       	bra	@r0		
    bc28:	00 00       	bra	@r0		
    bc2a:	00 00       	bra	@r0		
    bc2c:	44 00       	rrcm.a	#1,	r4	
    bc2e:	87 01 a6 03 	mova	#0x103a6,r7	
    bc32:	00 00       	bra	@r0		
    bc34:	00 00       	bra	@r0		
    bc36:	00 00       	bra	@r0		
    bc38:	44 00       	rrcm.a	#1,	r4	
    bc3a:	89 01 aa 03 	mova	#0x103aa,r9	
    bc3e:	00 00       	bra	@r0		
    bc40:	00 00       	bra	@r0		
    bc42:	00 00       	bra	@r0		
    bc44:	44 00       	rrcm.a	#1,	r4	
    bc46:	8a 01 b0 03 	mova	#0x103b0,r10	
    bc4a:	00 00       	bra	@r0		
    bc4c:	00 00       	bra	@r0		
    bc4e:	00 00       	bra	@r0		
    bc50:	44 00       	rrcm.a	#1,	r4	
    bc52:	8e 01 b4 03 	mova	#0x103b4,r14	
    bc56:	00 00       	bra	@r0		
    bc58:	00 00       	bra	@r0		
    bc5a:	00 00       	bra	@r0		
    bc5c:	44 00       	rrcm.a	#1,	r4	
    bc5e:	91 01 b8 03 	cmpa	#0x103b8,r1	
    bc62:	00 00       	bra	@r0		
    bc64:	00 00       	bra	@r0		
    bc66:	00 00       	bra	@r0		
    bc68:	44 00       	rrcm.a	#1,	r4	
    bc6a:	92 01 cc 03 	cmpa	#0x103cc,r2	
    bc6e:	00 00       	bra	@r0		
    bc70:	00 00       	bra	@r0		
    bc72:	00 00       	bra	@r0		
    bc74:	44 00       	rrcm.a	#1,	r4	
    bc76:	76 01 ce 03 	mova	r1,	974(r6)	;0x03ce(r6)
    bc7a:	00 00       	bra	@r0		
    bc7c:	00 00       	bra	@r0		
    bc7e:	00 00       	bra	@r0		
    bc80:	44 00       	rrcm.a	#1,	r4	
    bc82:	77 01 d2 03 	mova	r1,	978(r7)	;0x03d2(r7)
    bc86:	00 00       	bra	@r0		
    bc88:	00 00       	bra	@r0		
    bc8a:	00 00       	bra	@r0		
    bc8c:	44 00       	rrcm.a	#1,	r4	
    bc8e:	78 01 d8 03 	mova	r1,	984(r8)	;0x03d8(r8)
    bc92:	00 00       	bra	@r0		
    bc94:	00 00       	bra	@r0		
    bc96:	00 00       	bra	@r0		
    bc98:	44 00       	rrcm.a	#1,	r4	
    bc9a:	79 01 de 03 	mova	r1,	990(r9)	;0x03de(r9)
    bc9e:	00 00       	bra	@r0		
    bca0:	00 00       	bra	@r0		
    bca2:	00 00       	bra	@r0		
    bca4:	44 00       	rrcm.a	#1,	r4	
    bca6:	7a 01 e4 03 	mova	r1,	996(r10);0x03e4(r10)
    bcaa:	00 00       	bra	@r0		
    bcac:	00 00       	bra	@r0		
    bcae:	00 00       	bra	@r0		
    bcb0:	44 00       	rrcm.a	#1,	r4	
    bcb2:	7b 01 f0 03 	mova	r1,	1008(r11);0x03f0(r11)
    bcb6:	00 00       	bra	@r0		
    bcb8:	00 00       	bra	@r0		
    bcba:	00 00       	bra	@r0		
    bcbc:	44 00       	rrcm.a	#1,	r4	
    bcbe:	7c 01 f6 03 	mova	r1,	1014(r12);0x03f6(r12)
    bcc2:	00 00       	bra	@r0		
    bcc4:	00 00       	bra	@r0		
    bcc6:	00 00       	bra	@r0		
    bcc8:	44 00       	rrcm.a	#1,	r4	
    bcca:	6c 01 fc 03 	mova	r1,	&0xc03fc
    bcce:	00 00       	bra	@r0		
    bcd0:	00 00       	bra	@r0		
    bcd2:	00 00       	bra	@r0		
    bcd4:	44 00       	rrcm.a	#1,	r4	
    bcd6:	6d 01 08 04 	mova	r1,	&0xd0408
    bcda:	00 00       	bra	@r0		
    bcdc:	00 00       	bra	@r0		
    bcde:	00 00       	bra	@r0		
    bce0:	44 00       	rrcm.a	#1,	r4	
    bce2:	6e 01 0e 04 	mova	r1,	&0xe040e
    bce6:	00 00       	bra	@r0		
    bce8:	00 00       	bra	@r0		
    bcea:	00 00       	bra	@r0		
    bcec:	44 00       	rrcm.a	#1,	r4	
    bcee:	6f 01 14 04 	mova	r1,	&0xf0414
    bcf2:	00 00       	bra	@r0		
    bcf4:	00 00       	bra	@r0		
    bcf6:	00 00       	bra	@r0		
    bcf8:	44 00       	rrcm.a	#1,	r4	
    bcfa:	70 01 18 04 	mova	r1,	0x0418	;PC rel. 0x0c114
    bcfe:	00 00       	bra	@r0		
    bd00:	00 00       	bra	@r0		
    bd02:	00 00       	bra	@r0		
    bd04:	44 00       	rrcm.a	#1,	r4	
    bd06:	5d 01       	rram	#1,	r13	
    bd08:	1a 04       	mova	@r4+,	r10	
    bd0a:	00 00       	bra	@r0		
    bd0c:	00 00       	bra	@r0		
    bd0e:	00 00       	bra	@r0		
    bd10:	44 00       	rrcm.a	#1,	r4	
    bd12:	5f 01       	rram	#1,	r15	
    bd14:	1a 04       	mova	@r4+,	r10	
    bd16:	00 00       	bra	@r0		
    bd18:	00 00       	bra	@r0		
    bd1a:	00 00       	bra	@r0		
    bd1c:	44 00       	rrcm.a	#1,	r4	
    bd1e:	60 01 1e 04 	mova	r1,	&0x0041e
    bd22:	00 00       	bra	@r0		
    bd24:	00 00       	bra	@r0		
    bd26:	00 00       	bra	@r0		
    bd28:	44 00       	rrcm.a	#1,	r4	
    bd2a:	5e 01       	rram	#1,	r14	
    bd2c:	20 04 00 00 	bra	&0x40000	
    bd30:	00 00       	bra	@r0		
    bd32:	00 00       	bra	@r0		
    bd34:	44 00       	rrcm.a	#1,	r4	
    bd36:	46 01       	rram.a	#1,	r6	
    bd38:	26 04 00 00 	mova	&0x40000,r6	
    bd3c:	00 00       	bra	@r0		
    bd3e:	00 00       	bra	@r0		
    bd40:	44 00       	rrcm.a	#1,	r4	
    bd42:	48 01       	rram.a	#1,	r8	
    bd44:	26 04 00 00 	mova	&0x40000,r6	
    bd48:	00 00       	bra	@r0		
    bd4a:	00 00       	bra	@r0		
    bd4c:	44 00       	rrcm.a	#1,	r4	
    bd4e:	4a 01       	rram.a	#1,	r10	
    bd50:	2c 04 00 00 	mova	&0x40000,r12	
    bd54:	00 00       	bra	@r0		
    bd56:	00 00       	bra	@r0		
    bd58:	44 00       	rrcm.a	#1,	r4	
    bd5a:	53 01       	rram	#1,	#0	;r3 As==00
    bd5c:	38 04 00 00 	mova	0(r4),	r8	;0x0000(r4)
    bd60:	00 00       	bra	@r0		
    bd62:	00 00       	bra	@r0		
    bd64:	44 00       	rrcm.a	#1,	r4	
    bd66:	58 01       	rram	#1,	r8	
    bd68:	3e 04 00 00 	mova	0(r4),	r14	;0x0000(r4)
    bd6c:	00 00       	bra	@r0		
    bd6e:	00 00       	bra	@r0		
    bd70:	44 00       	rrcm.a	#1,	r4	
    bd72:	59 01       	rram	#1,	r9	
    bd74:	44 04       	rrcm.a	#2,	r4	
    bd76:	00 00       	bra	@r0		
    bd78:	00 00       	bra	@r0		
    bd7a:	00 00       	bra	@r0		
    bd7c:	44 00       	rrcm.a	#1,	r4	
    bd7e:	55 01       	rram	#1,	r5	
    bd80:	46 04       	rrcm.a	#2,	r6	
    bd82:	00 00       	bra	@r0		
    bd84:	00 00       	bra	@r0		
    bd86:	00 00       	bra	@r0		
    bd88:	44 00       	rrcm.a	#1,	r4	
    bd8a:	56 01       	rram	#1,	r6	
    bd8c:	56 04       	rrcm	#2,	r6	
    bd8e:	00 00       	bra	@r0		
    bd90:	00 00       	bra	@r0		
    bd92:	00 00       	bra	@r0		
    bd94:	44 00       	rrcm.a	#1,	r4	
    bd96:	4f 01       	rram.a	#1,	r15	
    bd98:	5e 04       	rrcm	#2,	r14	
    bd9a:	00 00       	bra	@r0		
    bd9c:	00 00       	bra	@r0		
    bd9e:	00 00       	bra	@r0		
    bda0:	44 00       	rrcm.a	#1,	r4	
    bda2:	50 01       	rram	#1,	r0	
    bda4:	62 04 00 00 	mova	r4,	&0x20000
    bda8:	00 00       	bra	@r0		
    bdaa:	00 00       	bra	@r0		
    bdac:	44 00       	rrcm.a	#1,	r4	
    bdae:	47 01       	rram.a	#1,	r7	
    bdb0:	7e 04 00 00 	mova	r4,	0(r14)	;0x0000(r14)
    bdb4:	00 00       	bra	@r0		
    bdb6:	00 00       	bra	@r0		
    bdb8:	44 00       	rrcm.a	#1,	r4	
    bdba:	40 01       	rram.a	#1,	r0	
    bdbc:	84 04 00 00 	mova	#0x40000,r4	
    bdc0:	00 00       	bra	@r0		
    bdc2:	00 00       	bra	@r0		
    bdc4:	44 00       	rrcm.a	#1,	r4	
    bdc6:	42 01       	rram.a	#1,	r2	
    bdc8:	90 04 00 00 	cmpa	#0x40000,r0	
    bdcc:	00 00       	bra	@r0		
    bdce:	00 00       	bra	@r0		
    bdd0:	44 00       	rrcm.a	#1,	r4	
    bdd2:	36 01 92 04 	mova	1170(r1),r6	;0x0492(r1)
    bdd6:	00 00       	bra	@r0		
    bdd8:	00 00       	bra	@r0		
    bdda:	00 00       	bra	@r0		
    bddc:	44 00       	rrcm.a	#1,	r4	
    bdde:	37 01 96 04 	mova	1174(r1),r7	;0x0496(r1)
    bde2:	00 00       	bra	@r0		
    bde4:	00 00       	bra	@r0		
    bde6:	00 00       	bra	@r0		
    bde8:	44 00       	rrcm.a	#1,	r4	
    bdea:	24 01 9a 04 	mova	&0x1049a,r4	
    bdee:	00 00       	bra	@r0		
    bdf0:	00 00       	bra	@r0		
    bdf2:	00 00       	bra	@r0		
    bdf4:	44 00       	rrcm.a	#1,	r4	
    bdf6:	25 01 a6 04 	mova	&0x104a6,r5	
    bdfa:	00 00       	bra	@r0		
    bdfc:	00 00       	bra	@r0		
    bdfe:	00 00       	bra	@r0		
    be00:	44 00       	rrcm.a	#1,	r4	
    be02:	26 01 ac 04 	mova	&0x104ac,r6	
    be06:	00 00       	bra	@r0		
    be08:	00 00       	bra	@r0		
    be0a:	00 00       	bra	@r0		
    be0c:	44 00       	rrcm.a	#1,	r4	
    be0e:	0e 01       	mova	@r1,	r14	
    be10:	b0 04 00 00 	suba	#0x40000,r0	
    be14:	00 00       	bra	@r0		
    be16:	00 00       	bra	@r0		
    be18:	44 00       	rrcm.a	#1,	r4	
    be1a:	14 01       	mova	@r1+,	r4	
    be1c:	ba 04 00 00 	suba	#0x40000,r10	
    be20:	00 00       	bra	@r0		
    be22:	00 00       	bra	@r0		
    be24:	44 00       	rrcm.a	#1,	r4	
    be26:	15 01       	mova	@r1+,	r5	
    be28:	bc 04 00 00 	suba	#0x40000,r12	
    be2c:	00 00       	bra	@r0		
    be2e:	00 00       	bra	@r0		
    be30:	44 00       	rrcm.a	#1,	r4	
    be32:	17 01       	mova	@r1+,	r7	
    be34:	c8 04       	mova	r4,	r8	
    be36:	00 00       	bra	@r0		
    be38:	00 00       	bra	@r0		
    be3a:	00 00       	bra	@r0		
    be3c:	44 00       	rrcm.a	#1,	r4	
    be3e:	18 01       	mova	@r1+,	r8	
    be40:	e4 04       	adda	r4,	r4	
    be42:	00 00       	bra	@r0		
    be44:	00 00       	bra	@r0		
    be46:	00 00       	bra	@r0		
    be48:	44 00       	rrcm.a	#1,	r4	
    be4a:	1a 01       	mova	@r1+,	r10	
    be4c:	f4 04       	suba	r4,	r4	
    be4e:	00 00       	bra	@r0		
    be50:	00 00       	bra	@r0		
    be52:	00 00       	bra	@r0		
    be54:	44 00       	rrcm.a	#1,	r4	
    be56:	1b 01       	mova	@r1+,	r11	
    be58:	fe 04       	suba	r4,	r14	
    be5a:	00 00       	bra	@r0		
    be5c:	00 00       	bra	@r0		
    be5e:	00 00       	bra	@r0		
    be60:	44 00       	rrcm.a	#1,	r4	
    be62:	10 01       	reta			
    be64:	02 05       	mova	@r5,	r2	
    be66:	00 00       	bra	@r0		
    be68:	00 00       	bra	@r0		
    be6a:	00 00       	bra	@r0		
    be6c:	44 00       	rrcm.a	#1,	r4	
    be6e:	11 01       	mova	@r1+,	r1	
    be70:	08 05       	mova	@r5,	r8	
    be72:	00 00       	bra	@r0		
    be74:	00 00       	bra	@r0		
    be76:	00 00       	bra	@r0		
    be78:	44 00       	rrcm.a	#1,	r4	
    be7a:	12 01       	mova	@r1+,	r2	
    be7c:	12 05       	mova	@r5+,	r2	
    be7e:	00 00       	bra	@r0		
    be80:	00 00       	bra	@r0		
    be82:	00 00       	bra	@r0		
    be84:	44 00       	rrcm.a	#1,	r4	
    be86:	09 01       	mova	@r1,	r9	
    be88:	16 05       	mova	@r5+,	r6	
    be8a:	00 00       	bra	@r0		
    be8c:	00 00       	bra	@r0		
    be8e:	00 00       	bra	@r0		
    be90:	44 00       	rrcm.a	#1,	r4	
    be92:	0a 01       	mova	@r1,	r10	
    be94:	1c 05       	mova	@r5+,	r12	
    be96:	00 00       	bra	@r0		
    be98:	00 00       	bra	@r0		
    be9a:	00 00       	bra	@r0		
    be9c:	44 00       	rrcm.a	#1,	r4	
    be9e:	f7 00       	suba	r0,	r7	
    bea0:	20 05 00 00 	bra	&0x50000	
    bea4:	00 00       	bra	@r0		
    bea6:	00 00       	bra	@r0		
    bea8:	44 00       	rrcm.a	#1,	r4	
    beaa:	03 01       	.word	0x0103;	????	Illegal as address instr
    beac:	20 05 00 00 	bra	&0x50000	
    beb0:	00 00       	bra	@r0		
    beb2:	00 00       	bra	@r0		
    beb4:	44 00       	rrcm.a	#1,	r4	
    beb6:	04 01       	mova	@r1,	r4	
    beb8:	26 05 00 00 	mova	&0x50000,r6	
    bebc:	00 00       	bra	@r0		
    bebe:	00 00       	bra	@r0		
    bec0:	44 00       	rrcm.a	#1,	r4	
    bec2:	05 01       	mova	@r1,	r5	
    bec4:	2c 05 00 00 	mova	&0x50000,r12	
    bec8:	00 00       	bra	@r0		
    beca:	00 00       	bra	@r0		
    becc:	44 00       	rrcm.a	#1,	r4	
    bece:	ff 00       	suba	r0,	r15	
    bed0:	30 05 00 00 	bra	0(r5)		;0x0000(r5)
    bed4:	00 00       	bra	@r0		
    bed6:	00 00       	bra	@r0		
    bed8:	44 00       	rrcm.a	#1,	r4	
    beda:	01 01       	mova	@r1,	r1	
    bedc:	42 05       	rram.a	#2,	r2	
    bede:	00 00       	bra	@r0		
    bee0:	00 00       	bra	@r0		
    bee2:	00 00       	bra	@r0		
    bee4:	44 00       	rrcm.a	#1,	r4	
    bee6:	f2 00       	suba	r0,	r2	
    bee8:	4c 05       	rram.a	#2,	r12	
    beea:	00 00       	bra	@r0		
    beec:	00 00       	bra	@r0		
    beee:	00 00       	bra	@r0		
    bef0:	44 00       	rrcm.a	#1,	r4	
    bef2:	f3 00       	.word	0x00f3;	????	Illegal as address instr
    bef4:	50 05       	rram	#2,	r0	
    bef6:	00 00       	bra	@r0		
    bef8:	00 00       	bra	@r0		
    befa:	00 00       	bra	@r0		
    befc:	44 00       	rrcm.a	#1,	r4	
    befe:	ec 00       	adda	r0,	r12	
    bf00:	54 05       	rram	#2,	r4	
    bf02:	00 00       	bra	@r0		
    bf04:	00 00       	bra	@r0		
    bf06:	00 00       	bra	@r0		
    bf08:	44 00       	rrcm.a	#1,	r4	
    bf0a:	ed 00       	adda	r0,	r13	
    bf0c:	5e 05       	rram	#2,	r14	
    bf0e:	00 00       	bra	@r0		
    bf10:	00 00       	bra	@r0		
    bf12:	00 00       	bra	@r0		
    bf14:	44 00       	rrcm.a	#1,	r4	
    bf16:	ee 00       	adda	r0,	r14	
    bf18:	64 05 00 00 	mova	r5,	&0x40000
    bf1c:	00 00       	bra	@r0		
    bf1e:	00 00       	bra	@r0		
    bf20:	44 00       	rrcm.a	#1,	r4	
    bf22:	d9 00       	cmpa	r0,	r9	
    bf24:	68 05 00 00 	mova	r5,	&0x80000
    bf28:	00 00       	bra	@r0		
    bf2a:	00 00       	bra	@r0		
    bf2c:	44 00       	rrcm.a	#1,	r4	
    bf2e:	db 00       	cmpa	r0,	r11	
    bf30:	6e 05 00 00 	mova	r5,	&0xe0000
    bf34:	00 00       	bra	@r0		
    bf36:	00 00       	bra	@r0		
    bf38:	44 00       	rrcm.a	#1,	r4	
    bf3a:	e0 00       	adda	r0,	r0	
    bf3c:	7e 05 00 00 	mova	r5,	0(r14)	;0x0000(r14)
    bf40:	00 00       	bra	@r0		
    bf42:	00 00       	bra	@r0		
    bf44:	44 00       	rrcm.a	#1,	r4	
    bf46:	e1 00       	adda	r0,	r1	
    bf48:	82 05 00 00 	mova	#0x50000,r2	
    bf4c:	00 00       	bra	@r0		
    bf4e:	00 00       	bra	@r0		
    bf50:	44 00       	rrcm.a	#1,	r4	
    bf52:	c8 00       	mova	r0,	r8	
    bf54:	8e 05 00 00 	mova	#0x50000,r14	
    bf58:	00 00       	bra	@r0		
    bf5a:	00 00       	bra	@r0		
    bf5c:	44 00       	rrcm.a	#1,	r4	
    bf5e:	c2 00       	mova	r0,	r2	
    bf60:	9c 05 00 00 	cmpa	#0x50000,r12	
    bf64:	00 00       	bra	@r0		
    bf66:	00 00       	bra	@r0		
    bf68:	44 00       	rrcm.a	#1,	r4	
    bf6a:	32 02 9c 05 	mova	&0x059c,r2	
    bf6e:	00 00       	bra	@r0		
    bf70:	c3 57       	add.b	r7,	#1	;r3 As==01
    bf72:	00 00       	bra	@r0		
    bf74:	40 00       	rrcm.a	#1,	r0	
    bf76:	a2 00 06 00 	adda	#0x00006,r2	
    bf7a:	00 00       	bra	@r0		
    bf7c:	cf 57 00 00 	add.b	r7,	0(r15)	;0x0000(r15)
    bf80:	40 00       	rrcm.a	#1,	r0	
    bf82:	a3 00       	.word	0x00a3;	????	Illegal as address instr
    bf84:	07 00       	mova	@r0,	r7	
    bf86:	00 00       	bra	@r0		
    bf88:	d9 57 00 00 	add.b	0(r7),	64(r9)	;0x0000(r7), 0x0040(r9)
    bf8c:	40 00 
    bf8e:	a4 00 0d 00 	adda	#0x0000d,r4	
    bf92:	00 00       	bra	@r0		
    bf94:	e2 57 00 00 	add.b	@r7,	&0x0000	
    bf98:	80 00 a5 00 	bra	#0x000a5	
    bf9c:	2c 00 00 00 	mova	&0x00000,r12	
    bfa0:	ec 57 00 00 	add.b	@r7,	0(r12)	;0x0000(r12)
    bfa4:	40 00       	rrcm.a	#1,	r0	
    bfa6:	a6 00 0f 00 	adda	#0x0000f,r6	
    bfaa:	00 00       	bra	@r0		
    bfac:	fa 57 00 00 	add.b	@r7+,	0(r10)	;0x0000(r10)
    bfb0:	80 00 a7 00 	bra	#0x000a7	
    bfb4:	2e 00 00 00 	mova	&0x00000,r14	
    bfb8:	07 58       	add	r8,	r7	
    bfba:	00 00       	bra	@r0		
    bfbc:	80 00 a8 00 	bra	#0x000a8	
    bfc0:	2f 00 00 00 	mova	&0x00000,r15	
    bfc4:	14 58 00 00 	add	0(r8),	r4	;0x0000(r8)
    bfc8:	40 00       	rrcm.a	#1,	r0	
    bfca:	a9 00 0b 00 	adda	#0x0000b,r9	
    bfce:	00 00       	bra	@r0		
    bfd0:	21 58       	add	@r8,	r1	
    bfd2:	00 00       	bra	@r0		
    bfd4:	80 00 aa 00 	bra	#0x000aa	
    bfd8:	2a 00 00 00 	mova	&0x00000,r10	
    bfdc:	2c 58       	add	@r8,	r12	
    bfde:	00 00       	bra	@r0		
    bfe0:	80 00 ab 00 	bra	#0x000ab	
    bfe4:	30 00 00 00 	bra	0x0000		;PC rel. 0x0bfe6
    bfe8:	39 58       	add	@r8+,	r9	
    bfea:	00 00       	bra	@r0		
    bfec:	80 00 af 00 	bra	#0x000af	
    bff0:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0bff2
    bff4:	45 58       	add.b	r8,	r5	
    bff6:	00 00       	bra	@r0		
    bff8:	80 00 b0 00 	bra	#0x000b0	
    bffc:	35 00 00 00 	mova	0x0000,	r5	;PC rel. 0x0bffe
    c000:	52 58 00 00 	add.b	0(r8),	r2	;0x0000(r8)
    c004:	40 00       	rrcm.a	#1,	r0	
    c006:	b1 00 0a 00 	suba	#0x0000a,r1	
    c00a:	00 00       	bra	@r0		
    c00c:	5f 58 00 00 	add.b	0(r8),	r15	;0x0000(r8)
    c010:	40 00       	rrcm.a	#1,	r0	
    c012:	b2 00 0b 00 	suba	#0x0000b,r2	
    c016:	00 00       	bra	@r0		
    c018:	6f 58       	add.b	@r8,	r15	
    c01a:	00 00       	bra	@r0		
    c01c:	40 00       	rrcm.a	#1,	r0	
    c01e:	b6 00 09 00 	suba	#0x00009,r6	
    c022:	00 00       	bra	@r0		
    c024:	7c 58       	add.b	@r8+,	r12	
    c026:	00 00       	bra	@r0		
    c028:	80 00 b7 00 	bra	#0x000b7	
    c02c:	00 00       	bra	@r0		
    c02e:	00 00       	bra	@r0		
    c030:	bd 58 00 00 	add	@r8+,	0(r13)	;0x0000(r13)
    c034:	80 00 b8 00 	bra	#0x000b8	
    c038:	28 00 00 00 	mova	&0x00000,r8	
    c03c:	00 00       	bra	@r0		
    c03e:	00 00       	bra	@r0		
    c040:	c0 00       	bra	r0		
    c042:	00 00       	bra	@r0		
    c044:	16 00       	mova	#0x00000,r6	
    c046:	00 00       	bra	@r0		
    c048:	d8 58 00 00 	add.b	0(r8),	64(r8)	;0x0000(r8), 0x0040(r8)
    c04c:	40 00 
    c04e:	b6 01 04 00 	suba	#0x10004,r6	
    c052:	00 00       	bra	@r0		
    c054:	e3 58       	add.b	@r8,	#1	;r3 As==01
    c056:	00 00       	bra	@r0		
    c058:	80 00 b6 01 	bra	#0x001b6	
    c05c:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x0c05e
    c060:	00 00       	bra	@r0		
    c062:	00 00       	bra	@r0		
    c064:	c0 00       	bra	r0		
    c066:	00 00       	bra	@r0		
    c068:	d0 02       	cmpa	r2,	r0	
    c06a:	00 00       	bra	@r0		
    c06c:	00 00       	bra	@r0		
    c06e:	00 00       	bra	@r0		
    c070:	e0 00       	adda	r0,	r0	
    c072:	00 00       	bra	@r0		
    c074:	3e 03 00 00 	mova	#1,	r14	;r3 As==01
    c078:	d8 58 00 00 	add.b	0(r8),	64(r8)	;0x0000(r8), 0x0040(r8)
    c07c:	40 00 
    c07e:	b6 01 04 00 	suba	#0x10004,r6	
    c082:	00 00       	bra	@r0		
    c084:	e3 58       	add.b	@r8,	#1	;r3 As==01
    c086:	00 00       	bra	@r0		
    c088:	80 00 b6 01 	bra	#0x001b6	
    c08c:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x0c08e
    c090:	00 00       	bra	@r0		
    c092:	00 00       	bra	@r0		
    c094:	c0 00       	bra	r0		
    c096:	00 00       	bra	@r0		
    c098:	4a 03       	rrum.a	#1,	r10	
    c09a:	00 00       	bra	@r0		
    c09c:	00 00       	bra	@r0		
    c09e:	00 00       	bra	@r0		
    c0a0:	e0 00       	adda	r0,	r0	
    c0a2:	00 00       	bra	@r0		
    c0a4:	76 03 00 00 	mova	#0,	0(r6)	;r3 As==00, 0x0000(r6)
    c0a8:	f7 58 00 00 	add.b	@r8+,	0(r7)	;0x0000(r7)
    c0ac:	40 00       	rrcm.a	#1,	r0	
    c0ae:	85 01 0f 00 	mova	#0x1000f,r5	
    c0b2:	00 00       	bra	@r0		
    c0b4:	00 00       	bra	@r0		
    c0b6:	00 00       	bra	@r0		
    c0b8:	c0 00       	bra	r0		
    c0ba:	00 00       	bra	@r0		
    c0bc:	96 03 00 00 	cmpa	#0x30000,r6	
    c0c0:	00 00       	bra	@r0		
    c0c2:	00 00       	bra	@r0		
    c0c4:	e0 00       	adda	r0,	r0	
    c0c6:	00 00       	bra	@r0		
    c0c8:	b6 03 00 00 	suba	#0x30000,r6	
    c0cc:	00 00       	bra	@r0		
    c0ce:	00 00       	bra	@r0		
    c0d0:	e0 00       	adda	r0,	r0	
    c0d2:	00 00       	bra	@r0		
    c0d4:	9c 05 00 00 	cmpa	#0x50000,r12	
    c0d8:	00 00       	bra	@r0		
    c0da:	00 00       	bra	@r0		
    c0dc:	24 00 00 00 	mova	&0x00000,r4	
    c0e0:	b6 05 00 00 	suba	#0x50000,r6	
    c0e4:	01 59       	add	r9,	r1	
    c0e6:	00 00       	bra	@r0		
    c0e8:	28 00 65 00 	mova	&0x00065,r8	
    c0ec:	b4 11       	sxt	@r4+		
    c0ee:	00 00       	bra	@r0		
    c0f0:	15 59 00 00 	add	0(r9),	r5	;0x0000(r9)
    c0f4:	26 00 66 00 	mova	&0x00066,r6	
    c0f8:	b2 11       	sxt	#8		;r2 As==11
    c0fa:	00 00       	bra	@r0		
    c0fc:	00 00       	bra	@r0		
    c0fe:	00 00       	bra	@r0		
    c100:	64 00 00 00 	mova	r0,	&0x40000
    c104:	d6 65 00 00 	addc.b	0(r5),	21899(r6);0x0000(r5), 0x558b(r6)
    c108:	8b 55 
    c10a:	00 00       	bra	@r0		
    c10c:	64 00 00 00 	mova	r0,	&0x40000
    c110:	d6 65 00 00 	addc.b	0(r5),	22822(r6);0x0000(r5), 0x5926(r6)
    c114:	26 59 
    c116:	00 00       	bra	@r0		
    c118:	64 00 00 00 	mova	r0,	&0x40000
    c11c:	d6 65 00 00 	addc.b	0(r5),	106(r6)	;0x0000(r5), 0x006a(r6)
    c120:	6a 00 
    c122:	00 00       	bra	@r0		
    c124:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0c126
    c128:	00 00       	bra	@r0		
    c12a:	00 00       	bra	@r0		
    c12c:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    c130:	80 00 00 00 	bra	#0x00000	
    c134:	00 00       	bra	@r0		
    c136:	00 00       	bra	@r0		
    c138:	99 00 00 00 	cmpa	#0x00000,r9	
    c13c:	80 00 00 00 	bra	#0x00000	
    c140:	00 00       	bra	@r0		
    c142:	00 00       	bra	@r0		
    c144:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    c146:	00 00       	bra	@r0		
    c148:	80 00 00 00 	bra	#0x00000	
    c14c:	00 00       	bra	@r0		
    c14e:	00 00       	bra	@r0		
    c150:	ec 00       	adda	r0,	r12	
    c152:	00 00       	bra	@r0		
    c154:	80 00 00 00 	bra	#0x00000	
    c158:	00 00       	bra	@r0		
    c15a:	00 00       	bra	@r0		
    c15c:	24 01 00 00 	mova	&0x10000,r4	
    c160:	80 00 00 00 	bra	#0x00000	
    c164:	00 00       	bra	@r0		
    c166:	00 00       	bra	@r0		
    c168:	66 01 00 00 	mova	r1,	&0x60000
    c16c:	80 00 00 00 	bra	#0x00000	
    c170:	00 00       	bra	@r0		
    c172:	00 00       	bra	@r0		
    c174:	b7 01 00 00 	suba	#0x10000,r7	
    c178:	80 00 00 00 	bra	#0x00000	
    c17c:	00 00       	bra	@r0		
    c17e:	00 00       	bra	@r0		
    c180:	08 02       	mova	#4,	r8	;r2 As==10
    c182:	00 00       	bra	@r0		
    c184:	80 00 00 00 	bra	#0x00000	
    c188:	00 00       	bra	@r0		
    c18a:	00 00       	bra	@r0		
    c18c:	2e 02 00 00 	mova	&0x20000,r14	
    c190:	80 00 00 00 	bra	#0x00000	
    c194:	00 00       	bra	@r0		
    c196:	00 00       	bra	@r0		
    c198:	6c 02 00 00 	mova	r2,	&0xc0000
    c19c:	80 00 00 00 	bra	#0x00000	
    c1a0:	00 00       	bra	@r0		
    c1a2:	00 00       	bra	@r0		
    c1a4:	96 02 00 00 	cmpa	#0x20000,r6	
    c1a8:	80 00 00 00 	bra	#0x00000	
    c1ac:	00 00       	bra	@r0		
    c1ae:	00 00       	bra	@r0		
    c1b0:	bf 02 00 00 	suba	#0x20000,r15	
    c1b4:	80 00 00 00 	bra	#0x00000	
    c1b8:	00 00       	bra	@r0		
    c1ba:	00 00       	bra	@r0		
    c1bc:	d9 02       	cmpa	r2,	r9	
    c1be:	00 00       	bra	@r0		
    c1c0:	80 00 00 00 	bra	#0x00000	
    c1c4:	00 00       	bra	@r0		
    c1c6:	00 00       	bra	@r0		
    c1c8:	f4 02       	suba	r2,	r4	
    c1ca:	00 00       	bra	@r0		
    c1cc:	80 00 00 00 	bra	#0x00000	
    c1d0:	00 00       	bra	@r0		
    c1d2:	00 00       	bra	@r0		
    c1d4:	14 03       	mova	#-1,	r4	;r3 As==11
    c1d6:	00 00       	bra	@r0		
    c1d8:	80 00 00 00 	bra	#0x00000	
    c1dc:	00 00       	bra	@r0		
    c1de:	00 00       	bra	@r0		
    c1e0:	4d 03       	rrum.a	#1,	r13	
    c1e2:	00 00       	bra	@r0		
    c1e4:	80 00 00 00 	bra	#0x00000	
    c1e8:	00 00       	bra	@r0		
    c1ea:	00 00       	bra	@r0		
    c1ec:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    c1f0:	80 00 00 00 	bra	#0x00000	
    c1f4:	00 00       	bra	@r0		
    c1f6:	00 00       	bra	@r0		
    c1f8:	8a 03 00 00 	mova	#0x30000,r10	
    c1fc:	80 00 00 00 	bra	#0x00000	
    c200:	00 00       	bra	@r0		
    c202:	00 00       	bra	@r0		
    c204:	ae 03 00 00 	adda	#0x30000,r14	
    c208:	80 00 00 00 	bra	#0x00000	
    c20c:	00 00       	bra	@r0		
    c20e:	00 00       	bra	@r0		
    c210:	d7 03       	tsta	r7		
    c212:	00 00       	bra	@r0		
    c214:	80 00 00 00 	bra	#0x00000	
    c218:	00 00       	bra	@r0		
    c21a:	00 00       	bra	@r0		
    c21c:	26 59       	add	@r9,	r6	
    c21e:	00 00       	bra	@r0		
    c220:	82 00 00 00 	mova	#0x00000,r2	
    c224:	11 07       	mova	@r7+,	r1	
    c226:	00 00       	bra	@r0		
    c228:	ce 55 00 00 	add.b	r5,	0(r14)	;0x0000(r14)
    c22c:	c2 00       	mova	r0,	r2	
    c22e:	00 00       	bra	@r0		
    c230:	00 00       	bra	@r0		
    c232:	00 00       	bra	@r0		
    c234:	e1 55 00 00 	add.b	@r5,	0(r1)	;0x0000(r1)
    c238:	c2 00       	mova	r0,	r2	
    c23a:	00 00       	bra	@r0		
    c23c:	13 10       	rrc	#1		;r3 As==01
    c23e:	00 00       	bra	@r0		
    c240:	37 56       	add	@r6+,	r7	
    c242:	00 00       	bra	@r0		
    c244:	c2 00       	mova	r0,	r2	
    c246:	00 00       	bra	@r0		
    c248:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
    c24c:	4e 56       	add.b	r6,	r14	
    c24e:	00 00       	bra	@r0		
    c250:	c2 00       	mova	r0,	r2	
    c252:	00 00       	bra	@r0		
    c254:	00 00       	bra	@r0		
    c256:	00 00       	bra	@r0		
    c258:	65 56       	add.b	@r6,	r5	
    c25a:	00 00       	bra	@r0		
    c25c:	c2 00       	mova	r0,	r2	
    c25e:	00 00       	bra	@r0		
    c260:	91 34       	jge	$+292    	;abs 0xc384
    c262:	00 00       	bra	@r0		
    c264:	7f 56       	add.b	@r6+,	r15	
    c266:	00 00       	bra	@r0		
    c268:	c2 00       	mova	r0,	r2	
    c26a:	00 00       	bra	@r0		
    c26c:	76 0d 00 00 	mova	r13,	0(r6)	;0x0000(r6)
    c270:	34 59       	add	@r9+,	r4	
    c272:	00 00       	bra	@r0		
    c274:	24 00 1d 00 	mova	&0x0001d,r4	
    c278:	d6 65 00 00 	addc.b	0(r5),	22848(r6);0x0000(r5), 0x5940(r6)
    c27c:	40 59 
    c27e:	00 00       	bra	@r0		
    c280:	40 00       	rrcm.a	#1,	r0	
    c282:	1d 00       	mova	#0x00000,r13	
    c284:	0b 00       	mova	@r0,	r11	
    c286:	00 00       	bra	@r0		
    c288:	00 00       	bra	@r0		
    c28a:	00 00       	bra	@r0		
    c28c:	44 00       	rrcm.a	#1,	r4	
    c28e:	1d 00       	mova	#0x00000,r13	
	...
    c298:	44 00       	rrcm.a	#1,	r4	
    c29a:	1e 00       	mova	#0x00000,r14	
    c29c:	04 00       	mova	@r0,	r4	
    c29e:	00 00       	bra	@r0		
    c2a0:	00 00       	bra	@r0		
    c2a2:	00 00       	bra	@r0		
    c2a4:	44 00       	rrcm.a	#1,	r4	
    c2a6:	1f 00       	mova	#0x00000,r15	
    c2a8:	06 00       	mova	@r0,	r6	
    c2aa:	00 00       	bra	@r0		
    c2ac:	00 00       	bra	@r0		
    c2ae:	00 00       	bra	@r0		
    c2b0:	44 00       	rrcm.a	#1,	r4	
    c2b2:	23 00       	.word	0x0023;	????	Illegal as address instr
    c2b4:	1a 00       	mova	#0x00000,r10	
    c2b6:	00 00       	bra	@r0		
    c2b8:	00 00       	bra	@r0		
    c2ba:	00 00       	bra	@r0		
    c2bc:	44 00       	rrcm.a	#1,	r4	
    c2be:	20 00 1e 00 	bra	&0x0001e	
    c2c2:	00 00       	bra	@r0		
    c2c4:	00 00       	bra	@r0		
    c2c6:	00 00       	bra	@r0		
    c2c8:	44 00       	rrcm.a	#1,	r4	
    c2ca:	21 00 22 00 	mova	&0x00022,r1	
    c2ce:	00 00       	bra	@r0		
    c2d0:	00 00       	bra	@r0		
    c2d2:	00 00       	bra	@r0		
    c2d4:	44 00       	rrcm.a	#1,	r4	
    c2d6:	25 00 2a 00 	mova	&0x0002a,r5	
    c2da:	00 00       	bra	@r0		
    c2dc:	4a 59       	add.b	r9,	r10	
    c2de:	00 00       	bra	@r0		
    c2e0:	40 00       	rrcm.a	#1,	r0	
    c2e2:	1e 00       	mova	#0x00000,r14	
    c2e4:	0e 00       	mova	@r0,	r14	
    c2e6:	00 00       	bra	@r0		
    c2e8:	00 00       	bra	@r0		
    c2ea:	00 00       	bra	@r0		
    c2ec:	c0 00       	bra	r0		
    c2ee:	00 00       	bra	@r0		
    c2f0:	04 00       	mova	@r0,	r4	
    c2f2:	00 00       	bra	@r0		
    c2f4:	00 00       	bra	@r0		
    c2f6:	00 00       	bra	@r0		
    c2f8:	e0 00       	adda	r0,	r0	
    c2fa:	00 00       	bra	@r0		
    c2fc:	2a 00 00 00 	mova	&0x00000,r10	
    c300:	00 00       	bra	@r0		
    c302:	00 00       	bra	@r0		
    c304:	24 00 00 00 	mova	&0x00000,r4	
    c308:	2e 00 00 00 	mova	&0x00000,r14	
    c30c:	00 00       	bra	@r0		
    c30e:	00 00       	bra	@r0		
    c310:	64 00 00 00 	mova	r0,	&0x40000
    c314:	04 66       	addc	r6,	r4	
    c316:	00 00       	bra	@r0		
    c318:	8b 55 00 00 	add	r5,	0(r11)	;0x0000(r11)
    c31c:	64 00 00 00 	mova	r0,	&0x40000
    c320:	04 66       	addc	r6,	r4	
    c322:	00 00       	bra	@r0		
    c324:	54 59 00 00 	add.b	0(r9),	r4	;0x0000(r9)
    c328:	64 00 00 00 	mova	r0,	&0x40000
    c32c:	04 66       	addc	r6,	r4	
    c32e:	00 00       	bra	@r0		
    c330:	6a 00 00 00 	mova	r0,	&0xa0000
    c334:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0c336
    c338:	00 00       	bra	@r0		
    c33a:	00 00       	bra	@r0		
    c33c:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    c340:	80 00 00 00 	bra	#0x00000	
    c344:	00 00       	bra	@r0		
    c346:	00 00       	bra	@r0		
    c348:	99 00 00 00 	cmpa	#0x00000,r9	
    c34c:	80 00 00 00 	bra	#0x00000	
    c350:	00 00       	bra	@r0		
    c352:	00 00       	bra	@r0		
    c354:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    c356:	00 00       	bra	@r0		
    c358:	80 00 00 00 	bra	#0x00000	
    c35c:	00 00       	bra	@r0		
    c35e:	00 00       	bra	@r0		
    c360:	ec 00       	adda	r0,	r12	
    c362:	00 00       	bra	@r0		
    c364:	80 00 00 00 	bra	#0x00000	
    c368:	00 00       	bra	@r0		
    c36a:	00 00       	bra	@r0		
    c36c:	24 01 00 00 	mova	&0x10000,r4	
    c370:	80 00 00 00 	bra	#0x00000	
    c374:	00 00       	bra	@r0		
    c376:	00 00       	bra	@r0		
    c378:	66 01 00 00 	mova	r1,	&0x60000
    c37c:	80 00 00 00 	bra	#0x00000	
    c380:	00 00       	bra	@r0		
    c382:	00 00       	bra	@r0		
    c384:	b7 01 00 00 	suba	#0x10000,r7	
    c388:	80 00 00 00 	bra	#0x00000	
    c38c:	00 00       	bra	@r0		
    c38e:	00 00       	bra	@r0		
    c390:	08 02       	mova	#4,	r8	;r2 As==10
    c392:	00 00       	bra	@r0		
    c394:	80 00 00 00 	bra	#0x00000	
    c398:	00 00       	bra	@r0		
    c39a:	00 00       	bra	@r0		
    c39c:	2e 02 00 00 	mova	&0x20000,r14	
    c3a0:	80 00 00 00 	bra	#0x00000	
    c3a4:	00 00       	bra	@r0		
    c3a6:	00 00       	bra	@r0		
    c3a8:	6c 02 00 00 	mova	r2,	&0xc0000
    c3ac:	80 00 00 00 	bra	#0x00000	
    c3b0:	00 00       	bra	@r0		
    c3b2:	00 00       	bra	@r0		
    c3b4:	96 02 00 00 	cmpa	#0x20000,r6	
    c3b8:	80 00 00 00 	bra	#0x00000	
    c3bc:	00 00       	bra	@r0		
    c3be:	00 00       	bra	@r0		
    c3c0:	bf 02 00 00 	suba	#0x20000,r15	
    c3c4:	80 00 00 00 	bra	#0x00000	
    c3c8:	00 00       	bra	@r0		
    c3ca:	00 00       	bra	@r0		
    c3cc:	d9 02       	cmpa	r2,	r9	
    c3ce:	00 00       	bra	@r0		
    c3d0:	80 00 00 00 	bra	#0x00000	
    c3d4:	00 00       	bra	@r0		
    c3d6:	00 00       	bra	@r0		
    c3d8:	f4 02       	suba	r2,	r4	
    c3da:	00 00       	bra	@r0		
    c3dc:	80 00 00 00 	bra	#0x00000	
    c3e0:	00 00       	bra	@r0		
    c3e2:	00 00       	bra	@r0		
    c3e4:	14 03       	mova	#-1,	r4	;r3 As==11
    c3e6:	00 00       	bra	@r0		
    c3e8:	80 00 00 00 	bra	#0x00000	
    c3ec:	00 00       	bra	@r0		
    c3ee:	00 00       	bra	@r0		
    c3f0:	4d 03       	rrum.a	#1,	r13	
    c3f2:	00 00       	bra	@r0		
    c3f4:	80 00 00 00 	bra	#0x00000	
    c3f8:	00 00       	bra	@r0		
    c3fa:	00 00       	bra	@r0		
    c3fc:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    c400:	80 00 00 00 	bra	#0x00000	
    c404:	00 00       	bra	@r0		
    c406:	00 00       	bra	@r0		
    c408:	8a 03 00 00 	mova	#0x30000,r10	
    c40c:	80 00 00 00 	bra	#0x00000	
    c410:	00 00       	bra	@r0		
    c412:	00 00       	bra	@r0		
    c414:	ae 03 00 00 	adda	#0x30000,r14	
    c418:	80 00 00 00 	bra	#0x00000	
    c41c:	00 00       	bra	@r0		
    c41e:	00 00       	bra	@r0		
    c420:	d7 03       	tsta	r7		
    c422:	00 00       	bra	@r0		
    c424:	80 00 00 00 	bra	#0x00000	
    c428:	00 00       	bra	@r0		
    c42a:	00 00       	bra	@r0		
    c42c:	54 59 00 00 	add.b	0(r9),	r4	;0x0000(r9)
    c430:	82 00 00 00 	mova	#0x00000,r2	
    c434:	e7 12       	.word	0x12e7;	????	
    c436:	00 00       	bra	@r0		
    c438:	4e 56       	add.b	r6,	r14	
    c43a:	00 00       	bra	@r0		
    c43c:	c2 00       	mova	r0,	r2	
    c43e:	00 00       	bra	@r0		
    c440:	00 00       	bra	@r0		
    c442:	00 00       	bra	@r0		
    c444:	1e 57 00 00 	add	0(r7),	r14	;0x0000(r7)
    c448:	c2 00       	mova	r0,	r2	
    c44a:	00 00       	bra	@r0		
    c44c:	00 00       	bra	@r0		
    c44e:	00 00       	bra	@r0		
    c450:	e1 55 00 00 	add.b	@r5,	0(r1)	;0x0000(r1)
    c454:	c2 00       	mova	r0,	r2	
    c456:	00 00       	bra	@r0		
    c458:	13 10       	rrc	#1		;r3 As==01
    c45a:	00 00       	bra	@r0		
    c45c:	37 56       	add	@r6+,	r7	
    c45e:	00 00       	bra	@r0		
    c460:	c2 00       	mova	r0,	r2	
    c462:	00 00       	bra	@r0		
    c464:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
    c468:	65 56       	add.b	@r6,	r5	
    c46a:	00 00       	bra	@r0		
    c46c:	c2 00       	mova	r0,	r2	
    c46e:	00 00       	bra	@r0		
    c470:	91 34       	jge	$+292    	;abs 0xc594
    c472:	00 00       	bra	@r0		
    c474:	64 59       	add.b	@r9,	r4	
    c476:	00 00       	bra	@r0		
    c478:	24 00 29 00 	mova	&0x00029,r4	
    c47c:	04 66       	addc	r6,	r4	
    c47e:	00 00       	bra	@r0		
    c480:	7a 59       	add.b	@r9+,	r10	
    c482:	00 00       	bra	@r0		
    c484:	40 00       	rrcm.a	#1,	r0	
    c486:	26 00 0b 00 	mova	&0x0000b,r6	
    c48a:	00 00       	bra	@r0		
    c48c:	88 2c       	jc	$+274    	;abs 0xc59e
    c48e:	00 00       	bra	@r0		
    c490:	40 00       	rrcm.a	#1,	r0	
    c492:	27 00 0c 00 	mova	&0x0000c,r7	
    c496:	00 00       	bra	@r0		
    c498:	92 59 00 00 	add	0(r9),	&0x0040	;0x0000(r9)
    c49c:	40 00 
    c49e:	28 00 0d 00 	mova	&0x0000d,r8	
    c4a2:	00 00       	bra	@r0		
    c4a4:	00 00       	bra	@r0		
    c4a6:	00 00       	bra	@r0		
    c4a8:	44 00       	rrcm.a	#1,	r4	
    c4aa:	29 00 00 00 	mova	&0x00000,r9	
    c4ae:	00 00       	bra	@r0		
    c4b0:	00 00       	bra	@r0		
    c4b2:	00 00       	bra	@r0		
    c4b4:	44 00       	rrcm.a	#1,	r4	
    c4b6:	2a 00 06 00 	mova	&0x00006,r10	
    c4ba:	00 00       	bra	@r0		
    c4bc:	00 00       	bra	@r0		
    c4be:	00 00       	bra	@r0		
    c4c0:	44 00       	rrcm.a	#1,	r4	
    c4c2:	2c 00 0a 00 	mova	&0x0000a,r12	
    c4c6:	00 00       	bra	@r0		
    c4c8:	00 00       	bra	@r0		
    c4ca:	00 00       	bra	@r0		
    c4cc:	44 00       	rrcm.a	#1,	r4	
    c4ce:	30 00 0c 00 	bra	0x000c		;PC rel. 0x0c4dc
    c4d2:	00 00       	bra	@r0		
    c4d4:	00 00       	bra	@r0		
    c4d6:	00 00       	bra	@r0		
    c4d8:	44 00       	rrcm.a	#1,	r4	
    c4da:	32 00 14 00 	mova	0x0014,	r2	;PC rel. 0x0c4f0
    c4de:	00 00       	bra	@r0		
    c4e0:	00 00       	bra	@r0		
    c4e2:	00 00       	bra	@r0		
    c4e4:	44 00       	rrcm.a	#1,	r4	
    c4e6:	35 00 18 00 	mova	0x0018,	r5	;PC rel. 0x0c500
    c4ea:	00 00       	bra	@r0		
    c4ec:	00 00       	bra	@r0		
    c4ee:	00 00       	bra	@r0		
    c4f0:	44 00       	rrcm.a	#1,	r4	
    c4f2:	31 00 1c 00 	mova	0x001c,	r1	;PC rel. 0x0c510
    c4f6:	00 00       	bra	@r0		
    c4f8:	00 00       	bra	@r0		
    c4fa:	00 00       	bra	@r0		
    c4fc:	44 00       	rrcm.a	#1,	r4	
    c4fe:	36 00 20 00 	mova	0x0020,	r6	;PC rel. 0x0c520
    c502:	00 00       	bra	@r0		
    c504:	9b 59 00 00 	add	0(r9),	64(r11)	;0x0000(r9), 0x0040(r11)
    c508:	40 00 
    c50a:	2c 00 0e 00 	mova	&0x0000e,r12	
    c50e:	00 00       	bra	@r0		
    c510:	00 00       	bra	@r0		
    c512:	00 00       	bra	@r0		
    c514:	c0 00       	bra	r0		
    c516:	00 00       	bra	@r0		
    c518:	0a 00       	mova	@r0,	r10	
    c51a:	00 00       	bra	@r0		
    c51c:	00 00       	bra	@r0		
    c51e:	00 00       	bra	@r0		
    c520:	e0 00       	adda	r0,	r0	
    c522:	00 00       	bra	@r0		
    c524:	18 00       	mova	#0x00000,r8	
    c526:	00 00       	bra	@r0		
    c528:	b3 59       	add	@r9+,	#1	;r3 As==01
    c52a:	00 00       	bra	@r0		
    c52c:	40 00       	rrcm.a	#1,	r0	
    c52e:	2c 00 0e 00 	mova	&0x0000e,r12	
    c532:	00 00       	bra	@r0		
    c534:	00 00       	bra	@r0		
    c536:	00 00       	bra	@r0		
    c538:	c0 00       	bra	r0		
    c53a:	00 00       	bra	@r0		
    c53c:	1c 00       	mova	#0x00000,r12	
    c53e:	00 00       	bra	@r0		
    c540:	00 00       	bra	@r0		
    c542:	00 00       	bra	@r0		
    c544:	e0 00       	adda	r0,	r0	
    c546:	00 00       	bra	@r0		
    c548:	20 00 00 00 	bra	&0x00000	
    c54c:	00 00       	bra	@r0		
    c54e:	00 00       	bra	@r0		
    c550:	24 00 00 00 	mova	&0x00000,r4	
    c554:	24 00 00 00 	mova	&0x00000,r4	
    c558:	00 00       	bra	@r0		
    c55a:	00 00       	bra	@r0		
    c55c:	64 00 00 00 	mova	r0,	&0x40000
    c560:	28 66       	addc	@r6,	r8	
	...
Disassembly of section .stabstr:

00000000 <.stabstr>:
       0:	00 43       	clr	r0		
       2:	3a 2f       	jc	$-394    	;abs 0xfe78
       4:	44 4f       	mov.b	r15,	r4	
       6:	4b 55       	add.b	r5,	r11	
       8:	4d 45       	mov.b	r5,	r13	
       a:	7e 31       	jn	$+766    	;abs 0x308
       c:	2f 77       	subc	@r7,	r15	
       e:	6f 72       	subc.b	#4,	r15	;r2 As==10
      10:	6b 2f       	jc	$-296    	;abs 0xfee8
      12:	4c 4f       	mov.b	r15,	r12	
      14:	4b 41       	mov.b	r1,	r11	
      16:	4c 45       	mov.b	r5,	r12	
      18:	7e 31       	jn	$+766    	;abs 0x316
      1a:	2f 54       	add	@r4,	r15	
      1c:	65 6d       	addc.b	@r13,	r5	
      1e:	70 2f       	jc	$-286    	;abs 0xff00
      20:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
      22:	51 50 44 58 	add.b	0x5844,	r1	;PC rel. 0x0586a
      26:	4b 36       	jge	$-872    	;abs 0xfcbe
      28:	2e 73       	subc	#2,	r14	;r3 As==10
      2a:	00 67       	addc	r7,	r0	
      2c:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
      2e:	74 30       	jn	$+234    	;abs 0x118
      30:	2e 53       	incd	r14		
      32:	00 43       	clr	r0		
      34:	3a 5c       	add	@r12+,	r10	
      36:	55 73       	subc.b	#1,	r5	;r3 As==01
      38:	65 72       	subc.b	#4,	r5	;r2 As==10
      3a:	73 5c       	.word	0x5c73;	????	Illegal as 2-op instr
      3c:	66 6c       	addc.b	@r12,	r6	
      3e:	61 76       	subc.b	@r6,	r1	
      40:	69 6f       	addc.b	@r15,	r9	
      42:	68 70       	subc.b	@r0,	r8	
      44:	6f 5c       	add.b	@r12,	r15	
      46:	44 65       	addc.b	r5,	r4	
      48:	73 6b       	.word	0x6b73;	????	Illegal as 2-op instr
      4a:	74 6f       	addc.b	@r15+,	r4	
      4c:	70 5c       	add.b	@r12+,	r0	
      4e:	6d 69       	addc.b	@r9,	r13	
      50:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
      52:	6f 71       	subc.b	@r1,	r15	
      54:	75 61       	addc.b	@r1+,	r5	
      56:	64 5c       	add.b	@r12,	r4	
      58:	6d 69       	addc.b	@r9,	r13	
      5a:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
      5c:	6f 71       	subc.b	@r1,	r15	
      5e:	75 61       	addc.b	@r1+,	r5	
      60:	64 2f       	jc	$-310    	;abs 0xff2a
      62:	00 6d       	addc	r13,	r0	
      64:	61 69       	addc.b	@r9,	r1	
      66:	6e 2e       	jc	$-802    	;abs 0xfd44
      68:	63 00 67 63 	mova	r0,	&0x36367
      6c:	63 32       	jn	$-824    	;abs 0xfd34
      6e:	5f 63       	addc.b	#1,	r15	;r3 As==01
      70:	6f 6d       	addc.b	@r13,	r15	
      72:	70 69       	addc.b	@r9+,	r0	
      74:	6c 65       	addc.b	@r5,	r12	
      76:	64 2e       	jc	$-822    	;abs 0xfd40
      78:	00 69       	addc	r9,	r0	
      7a:	6e 74       	subc.b	@r4,	r14	
      7c:	3a 74       	subc	@r4+,	r10	
      7e:	28 30       	jn	$+82     	;abs 0xd0
      80:	2c 31       	jn	$+602    	;abs 0x2da
      82:	29 3d       	jmp	$+596    	;abs 0x2d6
      84:	72 28       	jnc	$+230    	;abs 0x16a
      86:	30 2c       	jc	$+98     	;abs 0xe8
      88:	31 29       	jnc	$+612    	;abs 0x2ec
      8a:	3b 2d       	jc	$+632    	;abs 0x302
      8c:	33 32       	jn	$-920    	;abs 0xfcf4
      8e:	37 36       	jge	$-912    	;abs 0xfcfe
      90:	38 3b       	jl	$-398    	;abs 0xff02
      92:	33 32       	jn	$-920    	;abs 0xfcfa
      94:	37 36       	jge	$-912    	;abs 0xfd04
      96:	37 3b       	jl	$-400    	;abs 0xff06
      98:	00 63       	adc	r0		
      9a:	68 61       	addc.b	@r1,	r8	
      9c:	72 3a       	jl	$-794    	;abs 0xfd82
      9e:	74 28       	jnc	$+234    	;abs 0x188
      a0:	30 2c       	jc	$+98     	;abs 0x102
      a2:	32 29       	jnc	$+614    	;abs 0x308
      a4:	3d 72       	subc	#8,	r13	;r2 As==11
      a6:	28 30       	jn	$+82     	;abs 0xf8
      a8:	2c 32       	jn	$-934    	;abs 0xfd02
      aa:	29 3b       	jl	$-428    	;abs 0xfefe
      ac:	30 3b       	jl	$-414    	;abs 0xff0e
      ae:	31 32       	jn	$-924    	;abs 0xfd12
      b0:	37 3b       	jl	$-400    	;abs 0xff20
      b2:	00 6c       	addc	r12,	r0	
      b4:	6f 6e       	addc.b	@r14,	r15	
      b6:	67 20       	jnz	$+208    	;abs 0x186
      b8:	69 6e       	addc.b	@r14,	r9	
      ba:	74 3a       	jl	$-790    	;abs 0xfda4
      bc:	74 28       	jnc	$+234    	;abs 0x1a6
      be:	30 2c       	jc	$+98     	;abs 0x120
      c0:	33 29       	jnc	$+616    	;abs 0x328
      c2:	3d 40 73 33 	mov	#13171,	r13	;#0x3373
      c6:	32 3b       	jl	$-410    	;abs 0xff2c
      c8:	72 28       	jnc	$+230    	;abs 0x1ae
      ca:	30 2c       	jc	$+98     	;abs 0x12c
      cc:	33 29       	jnc	$+616    	;abs 0x334
      ce:	3b 30       	jn	$+120    	;abs 0x146
      d0:	30 32       	jn	$-926    	;abs 0xfd32
      d2:	30 30       	jn	$+98     	;abs 0x134
      d4:	30 30       	jn	$+98     	;abs 0x136
      d6:	30 30       	jn	$+98     	;abs 0x138
      d8:	30 30       	jn	$+98     	;abs 0x13a
      da:	30 30       	jn	$+98     	;abs 0x13c
      dc:	3b 30       	jn	$+120    	;abs 0x154
      de:	30 31       	jn	$+610    	;abs 0x340
      e0:	37 37       	jge	$-400    	;abs 0xff50
      e2:	37 37       	jge	$-400    	;abs 0xff52
      e4:	37 37       	jge	$-400    	;abs 0xff54
      e6:	37 37       	jge	$-400    	;abs 0xff56
      e8:	37 37       	jge	$-400    	;abs 0xff58
      ea:	3b 00 75 6e 	mova	0x6e75,	r11	;PC rel. 0x06f61
      ee:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
      f0:	67 6e       	addc.b	@r14,	r7	
      f2:	65 64       	addc.b	@r4,	r5	
      f4:	20 69       	addc	@r9,	r0	
      f6:	6e 74       	subc.b	@r4,	r14	
      f8:	3a 74       	subc	@r4+,	r10	
      fa:	28 30       	jn	$+82     	;abs 0x14c
      fc:	2c 34       	jge	$+90     	;abs 0x156
      fe:	29 3d       	jmp	$+596    	;abs 0x352
     100:	72 28       	jnc	$+230    	;abs 0x1e6
     102:	30 2c       	jc	$+98     	;abs 0x164
     104:	34 29       	jnc	$+618    	;abs 0x36e
     106:	3b 30       	jn	$+120    	;abs 0x17e
     108:	30 30       	jn	$+98     	;abs 0x16a
     10a:	30 30       	jn	$+98     	;abs 0x16c
     10c:	30 30       	jn	$+98     	;abs 0x16e
     10e:	30 30       	jn	$+98     	;abs 0x170
     110:	30 30       	jn	$+98     	;abs 0x172
     112:	30 30       	jn	$+98     	;abs 0x174
     114:	3b 30       	jn	$+120    	;abs 0x18c
     116:	30 30       	jn	$+98     	;abs 0x178
     118:	30 30       	jn	$+98     	;abs 0x17a
     11a:	30 30       	jn	$+98     	;abs 0x17c
     11c:	31 37       	jge	$-412    	;abs 0xff80
     11e:	37 37       	jge	$-400    	;abs 0xff8e
     120:	37 37       	jge	$-400    	;abs 0xff90
     122:	3b 00 6c 6f 	mova	0x6f6c,	r11	;PC rel. 0x07090
     126:	6e 67       	addc.b	@r7,	r14	
     128:	20 75       	subc	@r5,	r0	
     12a:	6e 73       	subc.b	#2,	r14	;r3 As==10
     12c:	69 67       	addc.b	@r7,	r9	
     12e:	6e 65       	addc.b	@r5,	r14	
     130:	64 20       	jnz	$+202    	;abs 0x1fa
     132:	69 6e       	addc.b	@r14,	r9	
     134:	74 3a       	jl	$-790    	;abs 0xfe1e
     136:	74 28       	jnc	$+234    	;abs 0x220
     138:	30 2c       	jc	$+98     	;abs 0x19a
     13a:	35 29       	jnc	$+620    	;abs 0x3a6
     13c:	3d 40 73 33 	mov	#13171,	r13	;#0x3373
     140:	32 3b       	jl	$-410    	;abs 0xffa6
     142:	72 28       	jnc	$+230    	;abs 0x228
     144:	30 2c       	jc	$+98     	;abs 0x1a6
     146:	35 29       	jnc	$+620    	;abs 0x3b2
     148:	3b 30       	jn	$+120    	;abs 0x1c0
     14a:	30 30       	jn	$+98     	;abs 0x1ac
     14c:	30 30       	jn	$+98     	;abs 0x1ae
     14e:	30 30       	jn	$+98     	;abs 0x1b0
     150:	30 30       	jn	$+98     	;abs 0x1b2
     152:	30 30       	jn	$+98     	;abs 0x1b4
     154:	30 30       	jn	$+98     	;abs 0x1b6
     156:	3b 30       	jn	$+120    	;abs 0x1ce
     158:	30 33       	jn	$-414    	;abs 0xffba
     15a:	37 37       	jge	$-400    	;abs 0xffca
     15c:	37 37       	jge	$-400    	;abs 0xffcc
     15e:	37 37       	jge	$-400    	;abs 0xffce
     160:	37 37       	jge	$-400    	;abs 0xffd0
     162:	37 37       	jge	$-400    	;abs 0xffd2
     164:	3b 00 6c 6f 	mova	0x6f6c,	r11	;PC rel. 0x070d2
     168:	6e 67       	addc.b	@r7,	r14	
     16a:	20 6c       	addc	@r12,	r0	
     16c:	6f 6e       	addc.b	@r14,	r15	
     16e:	67 20       	jnz	$+208    	;abs 0x23e
     170:	69 6e       	addc.b	@r14,	r9	
     172:	74 3a       	jl	$-790    	;abs 0xfe5c
     174:	74 28       	jnc	$+234    	;abs 0x25e
     176:	30 2c       	jc	$+98     	;abs 0x1d8
     178:	36 29       	jnc	$+622    	;abs 0x3e6
     17a:	3d 40 73 36 	mov	#13939,	r13	;#0x3673
     17e:	34 3b       	jl	$-406    	;abs 0xffe8
     180:	72 28       	jnc	$+230    	;abs 0x266
     182:	30 2c       	jc	$+98     	;abs 0x1e4
     184:	36 29       	jnc	$+622    	;abs 0x3f2
     186:	3b 30       	jn	$+120    	;abs 0x1fe
     188:	31 30       	jn	$+100    	;abs 0x1ec
     18a:	30 30       	jn	$+98     	;abs 0x1ec
     18c:	30 30       	jn	$+98     	;abs 0x1ee
     18e:	30 30       	jn	$+98     	;abs 0x1f0
     190:	30 30       	jn	$+98     	;abs 0x1f2
     192:	30 30       	jn	$+98     	;abs 0x1f4
     194:	30 30       	jn	$+98     	;abs 0x1f6
     196:	30 30       	jn	$+98     	;abs 0x1f8
     198:	30 30       	jn	$+98     	;abs 0x1fa
     19a:	30 30       	jn	$+98     	;abs 0x1fc
     19c:	30 30       	jn	$+98     	;abs 0x1fe
     19e:	3b 30       	jn	$+120    	;abs 0x216
     1a0:	37 37       	jge	$-400    	;abs 0x10
     1a2:	37 37       	jge	$-400    	;abs 0x12
     1a4:	37 37       	jge	$-400    	;abs 0x14
     1a6:	37 37       	jge	$-400    	;abs 0x16
     1a8:	37 37       	jge	$-400    	;abs 0x18
     1aa:	37 37       	jge	$-400    	;abs 0x1a
     1ac:	37 37       	jge	$-400    	;abs 0x1c
     1ae:	37 37       	jge	$-400    	;abs 0x1e
     1b0:	37 37       	jge	$-400    	;abs 0x20
     1b2:	37 37       	jge	$-400    	;abs 0x22
     1b4:	37 3b       	jl	$-400    	;abs 0x24
     1b6:	00 6c       	addc	r12,	r0	
     1b8:	6f 6e       	addc.b	@r14,	r15	
     1ba:	67 20       	jnz	$+208    	;abs 0x28a
     1bc:	6c 6f       	addc.b	@r15,	r12	
     1be:	6e 67       	addc.b	@r7,	r14	
     1c0:	20 75       	subc	@r5,	r0	
     1c2:	6e 73       	subc.b	#2,	r14	;r3 As==10
     1c4:	69 67       	addc.b	@r7,	r9	
     1c6:	6e 65       	addc.b	@r5,	r14	
     1c8:	64 20       	jnz	$+202    	;abs 0x292
     1ca:	69 6e       	addc.b	@r14,	r9	
     1cc:	74 3a       	jl	$-790    	;abs 0xfeb6
     1ce:	74 28       	jnc	$+234    	;abs 0x2b8
     1d0:	30 2c       	jc	$+98     	;abs 0x232
     1d2:	37 29       	jnc	$+624    	;abs 0x442
     1d4:	3d 40 73 36 	mov	#13939,	r13	;#0x3673
     1d8:	34 3b       	jl	$-406    	;abs 0x42
     1da:	72 28       	jnc	$+230    	;abs 0x2c0
     1dc:	30 2c       	jc	$+98     	;abs 0x23e
     1de:	37 29       	jnc	$+624    	;abs 0x44e
     1e0:	3b 30       	jn	$+120    	;abs 0x258
     1e2:	30 30       	jn	$+98     	;abs 0x244
     1e4:	30 30       	jn	$+98     	;abs 0x246
     1e6:	30 30       	jn	$+98     	;abs 0x248
     1e8:	30 30       	jn	$+98     	;abs 0x24a
     1ea:	30 30       	jn	$+98     	;abs 0x24c
     1ec:	30 30       	jn	$+98     	;abs 0x24e
     1ee:	3b 30       	jn	$+120    	;abs 0x266
     1f0:	31 37       	jge	$-412    	;abs 0x54
     1f2:	37 37       	jge	$-400    	;abs 0x62
     1f4:	37 37       	jge	$-400    	;abs 0x64
     1f6:	37 37       	jge	$-400    	;abs 0x66
     1f8:	37 37       	jge	$-400    	;abs 0x68
     1fa:	37 37       	jge	$-400    	;abs 0x6a
     1fc:	37 37       	jge	$-400    	;abs 0x6c
     1fe:	37 37       	jge	$-400    	;abs 0x6e
     200:	37 37       	jge	$-400    	;abs 0x70
     202:	37 37       	jge	$-400    	;abs 0x72
     204:	37 37       	jge	$-400    	;abs 0x74
     206:	3b 00 73 68 	mova	0x6873,	r11	;PC rel. 0x06a7b
     20a:	6f 72       	subc.b	#4,	r15	;r2 As==10
     20c:	74 20       	jnz	$+234    	;abs 0x2f6
     20e:	69 6e       	addc.b	@r14,	r9	
     210:	74 3a       	jl	$-790    	;abs 0xfefa
     212:	74 28       	jnc	$+234    	;abs 0x2fc
     214:	30 2c       	jc	$+98     	;abs 0x276
     216:	38 29       	jnc	$+626    	;abs 0x488
     218:	3d 72       	subc	#8,	r13	;r2 As==11
     21a:	28 30       	jn	$+82     	;abs 0x26c
     21c:	2c 38       	jl	$+90     	;abs 0x276
     21e:	29 3b       	jl	$-428    	;abs 0x72
     220:	2d 33       	jn	$-420    	;abs 0x7c
     222:	32 37       	jge	$-410    	;abs 0x88
     224:	36 38       	jl	$+110    	;abs 0x292
     226:	3b 33       	jn	$-392    	;abs 0x9e
     228:	32 37       	jge	$-410    	;abs 0x8e
     22a:	36 37       	jge	$-402    	;abs 0x98
     22c:	3b 00 73 68 	mova	0x6873,	r11	;PC rel. 0x06aa1
     230:	6f 72       	subc.b	#4,	r15	;r2 As==10
     232:	74 20       	jnz	$+234    	;abs 0x31c
     234:	75 6e       	addc.b	@r14+,	r5	
     236:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
     238:	67 6e       	addc.b	@r14,	r7	
     23a:	65 64       	addc.b	@r4,	r5	
     23c:	20 69       	addc	@r9,	r0	
     23e:	6e 74       	subc.b	@r4,	r14	
     240:	3a 74       	subc	@r4+,	r10	
     242:	28 30       	jn	$+82     	;abs 0x294
     244:	2c 39       	jl	$+602    	;abs 0x49e
     246:	29 3d       	jmp	$+596    	;abs 0x49a
     248:	72 28       	jnc	$+230    	;abs 0x32e
     24a:	30 2c       	jc	$+98     	;abs 0x2ac
     24c:	39 29       	jnc	$+628    	;abs 0x4c0
     24e:	3b 30       	jn	$+120    	;abs 0x2c6
     250:	30 30       	jn	$+98     	;abs 0x2b2
     252:	30 30       	jn	$+98     	;abs 0x2b4
     254:	30 30       	jn	$+98     	;abs 0x2b6
     256:	30 30       	jn	$+98     	;abs 0x2b8
     258:	30 30       	jn	$+98     	;abs 0x2ba
     25a:	30 30       	jn	$+98     	;abs 0x2bc
     25c:	3b 30       	jn	$+120    	;abs 0x2d4
     25e:	30 30       	jn	$+98     	;abs 0x2c0
     260:	30 30       	jn	$+98     	;abs 0x2c2
     262:	30 30       	jn	$+98     	;abs 0x2c4
     264:	31 37       	jge	$-412    	;abs 0xc8
     266:	37 37       	jge	$-400    	;abs 0xd6
     268:	37 37       	jge	$-400    	;abs 0xd8
     26a:	3b 00 73 69 	mova	0x6973,	r11	;PC rel. 0x06bdf
     26e:	67 6e       	addc.b	@r14,	r7	
     270:	65 64       	addc.b	@r4,	r5	
     272:	20 63       	addc	#2,	r0	;r3 As==10
     274:	68 61       	addc.b	@r1,	r8	
     276:	72 3a       	jl	$-794    	;abs 0xff5c
     278:	74 28       	jnc	$+234    	;abs 0x362
     27a:	30 2c       	jc	$+98     	;abs 0x2dc
     27c:	31 30       	jn	$+100    	;abs 0x2e0
     27e:	29 3d       	jmp	$+596    	;abs 0x4d2
     280:	40 73       	sbc.b	r0		
     282:	38 3b       	jl	$-398    	;abs 0xf4
     284:	72 28       	jnc	$+230    	;abs 0x36a
     286:	30 2c       	jc	$+98     	;abs 0x2e8
     288:	31 30       	jn	$+100    	;abs 0x2ec
     28a:	29 3b       	jl	$-428    	;abs 0xde
     28c:	2d 31       	jn	$+604    	;abs 0x4e8
     28e:	32 38       	jl	$+102    	;abs 0x2f4
     290:	3b 31       	jn	$+632    	;abs 0x508
     292:	32 37       	jge	$-410    	;abs 0xf8
     294:	3b 00 75 6e 	mova	0x6e75,	r11	;PC rel. 0x0710b
     298:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
     29a:	67 6e       	addc.b	@r14,	r7	
     29c:	65 64       	addc.b	@r4,	r5	
     29e:	20 63       	addc	#2,	r0	;r3 As==10
     2a0:	68 61       	addc.b	@r1,	r8	
     2a2:	72 3a       	jl	$-794    	;abs 0xff88
     2a4:	74 28       	jnc	$+234    	;abs 0x38e
     2a6:	30 2c       	jc	$+98     	;abs 0x308
     2a8:	31 31       	jn	$+612    	;abs 0x50c
     2aa:	29 3d       	jmp	$+596    	;abs 0x4fe
     2ac:	40 73       	sbc.b	r0		
     2ae:	38 3b       	jl	$-398    	;abs 0x120
     2b0:	72 28       	jnc	$+230    	;abs 0x396
     2b2:	30 2c       	jc	$+98     	;abs 0x314
     2b4:	31 31       	jn	$+612    	;abs 0x518
     2b6:	29 3b       	jl	$-428    	;abs 0x10a
     2b8:	30 3b       	jl	$-414    	;abs 0x11a
     2ba:	32 35       	jge	$+614    	;abs 0x520
     2bc:	35 3b       	jl	$-404    	;abs 0x128
     2be:	00 66       	addc	r6,	r0	
     2c0:	6c 6f       	addc.b	@r15,	r12	
     2c2:	61 74       	subc.b	@r4,	r1	
     2c4:	3a 74       	subc	@r4+,	r10	
     2c6:	28 30       	jn	$+82     	;abs 0x318
     2c8:	2c 31       	jn	$+602    	;abs 0x522
     2ca:	32 29       	jnc	$+614    	;abs 0x530
     2cc:	3d 72       	subc	#8,	r13	;r2 As==11
     2ce:	28 30       	jn	$+82     	;abs 0x320
     2d0:	2c 31       	jn	$+602    	;abs 0x52a
     2d2:	29 3b       	jl	$-428    	;abs 0x126
     2d4:	34 3b       	jl	$-406    	;abs 0x13e
     2d6:	30 3b       	jl	$-414    	;abs 0x138
     2d8:	00 64       	addc	r4,	r0	
     2da:	6f 75       	subc.b	@r5,	r15	
     2dc:	62 6c       	addc.b	@r12,	r2	
     2de:	65 3a       	jl	$-820    	;abs 0xffaa
     2e0:	74 28       	jnc	$+234    	;abs 0x3ca
     2e2:	30 2c       	jc	$+98     	;abs 0x344
     2e4:	31 33       	jn	$-412    	;abs 0x148
     2e6:	29 3d       	jmp	$+596    	;abs 0x53a
     2e8:	72 28       	jnc	$+230    	;abs 0x3ce
     2ea:	30 2c       	jc	$+98     	;abs 0x34c
     2ec:	31 29       	jnc	$+612    	;abs 0x550
     2ee:	3b 34       	jge	$+120    	;abs 0x366
     2f0:	3b 30       	jn	$+120    	;abs 0x368
     2f2:	3b 00 6c 6f 	mova	0x6f6c,	r11	;PC rel. 0x07260
     2f6:	6e 67       	addc.b	@r7,	r14	
     2f8:	20 64       	addc	@r4,	r0	
     2fa:	6f 75       	subc.b	@r5,	r15	
     2fc:	62 6c       	addc.b	@r12,	r2	
     2fe:	65 3a       	jl	$-820    	;abs 0xffca
     300:	74 28       	jnc	$+234    	;abs 0x3ea
     302:	30 2c       	jc	$+98     	;abs 0x364
     304:	31 34       	jge	$+100    	;abs 0x368
     306:	29 3d       	jmp	$+596    	;abs 0x55a
     308:	72 28       	jnc	$+230    	;abs 0x3ee
     30a:	30 2c       	jc	$+98     	;abs 0x36c
     30c:	31 29       	jnc	$+612    	;abs 0x570
     30e:	3b 34       	jge	$+120    	;abs 0x386
     310:	3b 30       	jn	$+120    	;abs 0x388
     312:	3b 00 63 6f 	mova	0x6f63,	r11	;PC rel. 0x07277
     316:	6d 70       	subc.b	@r0,	r13	
     318:	6c 65       	addc.b	@r5,	r12	
     31a:	78 20       	jnz	$+242    	;abs 0x40c
     31c:	69 6e       	addc.b	@r14,	r9	
     31e:	74 3a       	jl	$-790    	;abs 0x8
     320:	74 28       	jnc	$+234    	;abs 0x40a
     322:	30 2c       	jc	$+98     	;abs 0x384
     324:	31 35       	jge	$+612    	;abs 0x588
     326:	29 3d       	jmp	$+596    	;abs 0x57a
     328:	73 34       	jge	$+232    	;abs 0x410
     32a:	72 65       	addc.b	@r5+,	r2	
     32c:	61 6c       	addc.b	@r12,	r1	
     32e:	3a 28       	jnc	$+118    	;abs 0x3a4
     330:	30 2c       	jc	$+98     	;abs 0x392
     332:	31 29       	jnc	$+612    	;abs 0x596
     334:	2c 30       	jn	$+90     	;abs 0x38e
     336:	2c 31       	jn	$+602    	;abs 0x590
     338:	36 3b       	jl	$-402    	;abs 0x1a6
     33a:	69 6d       	addc.b	@r13,	r9	
     33c:	61 67       	addc.b	@r7,	r1	
     33e:	3a 28       	jnc	$+118    	;abs 0x3b4
     340:	30 2c       	jc	$+98     	;abs 0x3a2
     342:	31 29       	jnc	$+612    	;abs 0x5a6
     344:	2c 31       	jn	$+602    	;abs 0x59e
     346:	36 2c       	jc	$+110    	;abs 0x3b4
     348:	31 36       	jge	$-924    	;abs 0xffac
     34a:	3b 3b       	jl	$-392    	;abs 0x1c2
     34c:	00 63       	adc	r0		
     34e:	6f 6d       	addc.b	@r13,	r15	
     350:	70 6c       	addc.b	@r12+,	r0	
     352:	65 78       	subc.b	@r8,	r5	
     354:	20 66       	addc	@r6,	r0	
     356:	6c 6f       	addc.b	@r15,	r12	
     358:	61 74       	subc.b	@r4,	r1	
     35a:	3a 74       	subc	@r4+,	r10	
     35c:	28 30       	jn	$+82     	;abs 0x3ae
     35e:	2c 31       	jn	$+602    	;abs 0x5b8
     360:	36 29       	jnc	$+622    	;abs 0x5ce
     362:	3d 52       	add	#8,	r13	;r2 As==11
     364:	33 3b       	jl	$-408    	;abs 0x1cc
     366:	38 3b       	jl	$-398    	;abs 0x1d8
     368:	30 3b       	jl	$-414    	;abs 0x1ca
     36a:	00 63       	adc	r0		
     36c:	6f 6d       	addc.b	@r13,	r15	
     36e:	70 6c       	addc.b	@r12+,	r0	
     370:	65 78       	subc.b	@r8,	r5	
     372:	20 64       	addc	@r4,	r0	
     374:	6f 75       	subc.b	@r5,	r15	
     376:	62 6c       	addc.b	@r12,	r2	
     378:	65 3a       	jl	$-820    	;abs 0x44
     37a:	74 28       	jnc	$+234    	;abs 0x464
     37c:	30 2c       	jc	$+98     	;abs 0x3de
     37e:	31 37       	jge	$-412    	;abs 0x1e2
     380:	29 3d       	jmp	$+596    	;abs 0x5d4
     382:	52 33       	jn	$-346    	;abs 0x228
     384:	3b 38       	jl	$+120    	;abs 0x3fc
     386:	3b 30       	jn	$+120    	;abs 0x3fe
     388:	3b 00 63 6f 	mova	0x6f63,	r11	;PC rel. 0x072ed
     38c:	6d 70       	subc.b	@r0,	r13	
     38e:	6c 65       	addc.b	@r5,	r12	
     390:	78 20       	jnz	$+242    	;abs 0x482
     392:	6c 6f       	addc.b	@r15,	r12	
     394:	6e 67       	addc.b	@r7,	r14	
     396:	20 64       	addc	@r4,	r0	
     398:	6f 75       	subc.b	@r5,	r15	
     39a:	62 6c       	addc.b	@r12,	r2	
     39c:	65 3a       	jl	$-820    	;abs 0x68
     39e:	74 28       	jnc	$+234    	;abs 0x488
     3a0:	30 2c       	jc	$+98     	;abs 0x402
     3a2:	31 38       	jl	$+100    	;abs 0x406
     3a4:	29 3d       	jmp	$+596    	;abs 0x5f8
     3a6:	52 33       	jn	$-346    	;abs 0x24c
     3a8:	3b 38       	jl	$+120    	;abs 0x420
     3aa:	3b 30       	jn	$+120    	;abs 0x422
     3ac:	3b 00 5f 5f 	mova	0x5f5f,	r11	;PC rel. 0x0630d
     3b0:	62 75       	subc.b	@r5,	r2	
     3b2:	69 6c       	addc.b	@r12,	r9	
     3b4:	74 69       	addc.b	@r9+,	r4	
     3b6:	6e 5f       	add.b	@r15,	r14	
     3b8:	76 61       	addc.b	@r1+,	r6	
     3ba:	5f 6c 69 73 	addc.b	29545(r12),r15	;0x7369(r12)
     3be:	74 3a       	jl	$-790    	;abs 0xa8
     3c0:	74 28       	jnc	$+234    	;abs 0x4aa
     3c2:	30 2c       	jc	$+98     	;abs 0x424
     3c4:	31 39       	jl	$+612    	;abs 0x628
     3c6:	29 3d       	jmp	$+596    	;abs 0x61a
     3c8:	2a 28       	jnc	$+86     	;abs 0x41e
     3ca:	30 2c       	jc	$+98     	;abs 0x42c
     3cc:	32 30       	jn	$+102    	;abs 0x432
     3ce:	29 3d       	jmp	$+596    	;abs 0x622
     3d0:	28 30       	jn	$+82     	;abs 0x422
     3d2:	2c 32       	jn	$-934    	;abs 0x2c
     3d4:	30 29       	jnc	$+610    	;abs 0x636
     3d6:	00 5f       	add	r15,	r0	
     3d8:	42 6f       	addc.b	r15,	r2	
     3da:	6f 6c       	addc.b	@r12,	r15	
     3dc:	3a 74       	subc	@r4+,	r10	
     3de:	28 30       	jn	$+82     	;abs 0x430
     3e0:	2c 32       	jn	$-934    	;abs 0x3a
     3e2:	31 29       	jnc	$+612    	;abs 0x646
     3e4:	3d 40 73 38 	mov	#14451,	r13	;#0x3873
     3e8:	3b 2d       	jc	$+632    	;abs 0x660
     3ea:	31 36       	jge	$-924    	;abs 0x4e
     3ec:	3b 00 63 3a 	mova	0x3a63,	r11	;PC rel. 0x03e51
     3f0:	2f 6d       	addc	@r13,	r15	
     3f2:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     3f4:	67 63       	addc.b	#2,	r7	;r3 As==10
     3f6:	63 2f       	jc	$-312    	;abs 0x2be
     3f8:	6d 73       	subc.b	#2,	r13	;r3 As==10
     3fa:	70 34       	jge	$+226    	;abs 0x4dc
     3fc:	33 30       	jn	$+104    	;abs 0x464
     3fe:	2f 69       	addc	@r9,	r15	
     400:	6e 63       	addc.b	#2,	r14	;r3 As==10
     402:	6c 75       	subc.b	@r5,	r12	
     404:	64 65       	addc.b	@r5,	r4	
     406:	2f 73       	subc	#2,	r15	;r3 As==10
     408:	74 64       	addc.b	@r4+,	r4	
     40a:	69 6f       	addc.b	@r15,	r9	
     40c:	2e 68       	addc	@r8,	r14	
     40e:	00 63       	adc	r0		
     410:	3a 2f       	jc	$-394    	;abs 0x286
     412:	6d 73       	subc.b	#2,	r13	;r3 As==10
     414:	70 67       	addc.b	@r7+,	r0	
     416:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     418:	2f 6c       	addc	@r12,	r15	
     41a:	69 62       	addc.b	#4,	r9	;r2 As==10
     41c:	2f 67       	addc	@r7,	r15	
     41e:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     420:	2d 6c       	addc	@r12,	r13	
     422:	69 62       	addc.b	#4,	r9	;r2 As==10
     424:	2f 6d       	addc	@r13,	r15	
     426:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     428:	34 33       	jn	$-406    	;abs 0x292
     42a:	30 2f       	jc	$-414    	;abs 0x28c
     42c:	33 2e       	jc	$-920    	;abs 0x94
     42e:	32 2e       	jc	$-922    	;abs 0x94
     430:	33 2f       	jc	$-408    	;abs 0x298
     432:	69 6e       	addc.b	@r14,	r9	
     434:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     436:	75 64       	addc.b	@r4+,	r5	
     438:	65 2f       	jc	$-308    	;abs 0x304
     43a:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
     43c:	64 64       	addc.b	@r4,	r4	
     43e:	65 66       	addc.b	@r6,	r5	
     440:	2e 68       	addc	@r8,	r14	
     442:	00 70       	subc	r0,	r0	
     444:	74 72       	subc.b	#8,	r4	;r2 As==11
     446:	64 69       	addc.b	@r9,	r4	
     448:	66 66       	addc.b	@r6,	r6	
     44a:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     44e:	28 33       	jn	$-430    	;abs 0x2a0
     450:	2c 31       	jn	$+602    	;abs 0x6aa
     452:	29 3d       	jmp	$+596    	;abs 0x6a6
     454:	28 30       	jn	$+82     	;abs 0x4a6
     456:	2c 31       	jn	$+602    	;abs 0x6b0
     458:	29 00 73 69 	mova	&0x06973,r9	
     45c:	7a 65       	addc.b	@r5+,	r10	
     45e:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     462:	28 33       	jn	$-430    	;abs 0x2b4
     464:	2c 32       	jn	$-934    	;abs 0xbe
     466:	29 3d       	jmp	$+596    	;abs 0x6ba
     468:	28 30       	jn	$+82     	;abs 0x4ba
     46a:	2c 34       	jge	$+90     	;abs 0x4c4
     46c:	29 00 77 63 	mova	&0x06377,r9	
     470:	68 61       	addc.b	@r1,	r8	
     472:	72 5f       	add.b	@r15+,	r2	
     474:	74 3a       	jl	$-790    	;abs 0x15e
     476:	74 28       	jnc	$+234    	;abs 0x560
     478:	33 2c       	jc	$+104    	;abs 0x4e0
     47a:	33 29       	jnc	$+616    	;abs 0x6e2
     47c:	3d 28       	jnc	$+124    	;abs 0x4f8
     47e:	30 2c       	jc	$+98     	;abs 0x4e0
     480:	31 29       	jnc	$+612    	;abs 0x6e4
     482:	00 63       	adc	r0		
     484:	3a 2f       	jc	$-394    	;abs 0x2fa
     486:	6d 73       	subc.b	#2,	r13	;r3 As==10
     488:	70 67       	addc.b	@r7+,	r0	
     48a:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     48c:	2f 6d       	addc	@r13,	r15	
     48e:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     490:	34 33       	jn	$-406    	;abs 0x2fa
     492:	30 2f       	jc	$-414    	;abs 0x2f4
     494:	69 6e       	addc.b	@r14,	r9	
     496:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     498:	75 64       	addc.b	@r4+,	r5	
     49a:	65 2f       	jc	$-308    	;abs 0x366
     49c:	73 79       	.word	0x7973;	????	Illegal as 2-op instr
     49e:	73 2f       	jc	$-280    	;abs 0x386
     4a0:	74 79       	subc.b	@r9+,	r4	
     4a2:	70 65       	addc.b	@r5+,	r0	
     4a4:	73 2e       	jc	$-792    	;abs 0x18c
     4a6:	68 00 63 3a 	mova	r0,	&0x83a63
     4aa:	2f 6d       	addc	@r13,	r15	
     4ac:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     4ae:	67 63       	addc.b	#2,	r7	;r3 As==10
     4b0:	63 2f       	jc	$-312    	;abs 0x378
     4b2:	6d 73       	subc.b	#2,	r13	;r3 As==10
     4b4:	70 34       	jge	$+226    	;abs 0x596
     4b6:	33 30       	jn	$+104    	;abs 0x51e
     4b8:	2f 69       	addc	@r9,	r15	
     4ba:	6e 63       	addc.b	#2,	r14	;r3 As==10
     4bc:	6c 75       	subc.b	@r5,	r12	
     4be:	64 65       	addc.b	@r5,	r4	
     4c0:	2f 73       	subc	#2,	r15	;r3 As==10
     4c2:	79 73       	subc.b	#-1,	r9	;r3 As==11
     4c4:	2f 63       	addc	#2,	r15	;r3 As==10
     4c6:	64 65       	addc.b	@r5,	r4	
     4c8:	66 73       	subc.b	#2,	r6	;r3 As==10
     4ca:	2e 68       	addc	@r8,	r14	
     4cc:	00 63       	adc	r0		
     4ce:	3a 2f       	jc	$-394    	;abs 0x344
     4d0:	6d 73       	subc.b	#2,	r13	;r3 As==10
     4d2:	70 67       	addc.b	@r7+,	r0	
     4d4:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     4d6:	2f 6d       	addc	@r13,	r15	
     4d8:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     4da:	34 33       	jn	$-406    	;abs 0x344
     4dc:	30 2f       	jc	$-414    	;abs 0x33e
     4de:	69 6e       	addc.b	@r14,	r9	
     4e0:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     4e2:	75 64       	addc.b	@r4+,	r5	
     4e4:	65 2f       	jc	$-308    	;abs 0x3b0
     4e6:	73 79       	.word	0x7973;	????	Illegal as 2-op instr
     4e8:	73 2f       	jc	$-280    	;abs 0x3d0
     4ea:	69 6e       	addc.b	@r14,	r9	
     4ec:	74 74       	subc.b	@r4+,	r4	
     4ee:	79 70 65 73 	subc.b	#29541,	r9	;#0x7365
     4f2:	2e 68       	addc	@r8,	r14	
     4f4:	00 69       	addc	r9,	r0	
     4f6:	6e 74       	subc.b	@r4,	r14	
     4f8:	38 5f       	add	@r15+,	r8	
     4fa:	74 3a       	jl	$-790    	;abs 0x1e4
     4fc:	74 28       	jnc	$+234    	;abs 0x5e6
     4fe:	36 2c       	jc	$+110    	;abs 0x56c
     500:	31 29       	jnc	$+612    	;abs 0x764
     502:	3d 28       	jnc	$+124    	;abs 0x57e
     504:	30 2c       	jc	$+98     	;abs 0x566
     506:	31 30       	jn	$+100    	;abs 0x56a
     508:	29 00 75 69 	mova	&0x06975,r9	
     50c:	6e 74       	subc.b	@r4,	r14	
     50e:	38 5f       	add	@r15+,	r8	
     510:	74 3a       	jl	$-790    	;abs 0x1fa
     512:	74 28       	jnc	$+234    	;abs 0x5fc
     514:	36 2c       	jc	$+110    	;abs 0x582
     516:	32 29       	jnc	$+614    	;abs 0x77c
     518:	3d 28       	jnc	$+124    	;abs 0x594
     51a:	30 2c       	jc	$+98     	;abs 0x57c
     51c:	31 31       	jn	$+612    	;abs 0x780
     51e:	29 00 69 6e 	mova	&0x06e69,r9	
     522:	74 31       	jn	$+746    	;abs 0x80c
     524:	36 5f       	add	@r15+,	r6	
     526:	74 3a       	jl	$-790    	;abs 0x210
     528:	74 28       	jnc	$+234    	;abs 0x612
     52a:	36 2c       	jc	$+110    	;abs 0x598
     52c:	33 29       	jnc	$+616    	;abs 0x794
     52e:	3d 28       	jnc	$+124    	;abs 0x5aa
     530:	30 2c       	jc	$+98     	;abs 0x592
     532:	31 29       	jnc	$+612    	;abs 0x796
     534:	00 75       	subc	r5,	r0	
     536:	69 6e       	addc.b	@r14,	r9	
     538:	74 31       	jn	$+746    	;abs 0x822
     53a:	36 5f       	add	@r15+,	r6	
     53c:	74 3a       	jl	$-790    	;abs 0x226
     53e:	74 28       	jnc	$+234    	;abs 0x628
     540:	36 2c       	jc	$+110    	;abs 0x5ae
     542:	34 29       	jnc	$+618    	;abs 0x7ac
     544:	3d 28       	jnc	$+124    	;abs 0x5c0
     546:	30 2c       	jc	$+98     	;abs 0x5a8
     548:	34 29       	jnc	$+618    	;abs 0x7b2
     54a:	00 69       	addc	r9,	r0	
     54c:	6e 74       	subc.b	@r4,	r14	
     54e:	33 32       	jn	$-920    	;abs 0x1b6
     550:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     554:	28 36       	jge	$-942    	;abs 0x1a6
     556:	2c 35       	jge	$+602    	;abs 0x7b0
     558:	29 3d       	jmp	$+596    	;abs 0x7ac
     55a:	28 30       	jn	$+82     	;abs 0x5ac
     55c:	2c 33       	jn	$-422    	;abs 0x3b6
     55e:	29 00 75 69 	mova	&0x06975,r9	
     562:	6e 74       	subc.b	@r4,	r14	
     564:	33 32       	jn	$-920    	;abs 0x1cc
     566:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     56a:	28 36       	jge	$-942    	;abs 0x1bc
     56c:	2c 36       	jge	$-934    	;abs 0x1c6
     56e:	29 3d       	jmp	$+596    	;abs 0x7c2
     570:	28 30       	jn	$+82     	;abs 0x5c2
     572:	2c 35       	jge	$+602    	;abs 0x7cc
     574:	29 00 69 6e 	mova	&0x06e69,r9	
     578:	74 36       	jge	$-790    	;abs 0x262
     57a:	34 5f       	add	@r15+,	r4	
     57c:	74 3a       	jl	$-790    	;abs 0x266
     57e:	74 28       	jnc	$+234    	;abs 0x668
     580:	36 2c       	jc	$+110    	;abs 0x5ee
     582:	37 29       	jnc	$+624    	;abs 0x7f2
     584:	3d 28       	jnc	$+124    	;abs 0x600
     586:	30 2c       	jc	$+98     	;abs 0x5e8
     588:	36 29       	jnc	$+622    	;abs 0x7f6
     58a:	00 75       	subc	r5,	r0	
     58c:	69 6e       	addc.b	@r14,	r9	
     58e:	74 36       	jge	$-790    	;abs 0x278
     590:	34 5f       	add	@r15+,	r4	
     592:	74 3a       	jl	$-790    	;abs 0x27c
     594:	74 28       	jnc	$+234    	;abs 0x67e
     596:	36 2c       	jc	$+110    	;abs 0x604
     598:	38 29       	jnc	$+626    	;abs 0x80a
     59a:	3d 28       	jnc	$+124    	;abs 0x616
     59c:	30 2c       	jc	$+98     	;abs 0x5fe
     59e:	37 29       	jnc	$+624    	;abs 0x80e
     5a0:	00 69       	addc	r9,	r0	
     5a2:	6e 74       	subc.b	@r4,	r14	
     5a4:	70 74       	subc.b	@r4+,	r0	
     5a6:	72 5f       	add.b	@r15+,	r2	
     5a8:	74 3a       	jl	$-790    	;abs 0x292
     5aa:	74 28       	jnc	$+234    	;abs 0x694
     5ac:	36 2c       	jc	$+110    	;abs 0x61a
     5ae:	39 29       	jnc	$+628    	;abs 0x822
     5b0:	3d 28       	jnc	$+124    	;abs 0x62c
     5b2:	36 2c       	jc	$+110    	;abs 0x620
     5b4:	33 29       	jnc	$+616    	;abs 0x81c
     5b6:	00 75       	subc	r5,	r0	
     5b8:	69 6e       	addc.b	@r14,	r9	
     5ba:	74 70 74 72 	subc.b	#29300,	r4	;#0x7274
     5be:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     5c2:	28 36       	jge	$-942    	;abs 0x214
     5c4:	2c 31       	jn	$+602    	;abs 0x81e
     5c6:	30 29       	jnc	$+610    	;abs 0x828
     5c8:	3d 28       	jnc	$+124    	;abs 0x644
     5ca:	36 2c       	jc	$+110    	;abs 0x638
     5cc:	34 29       	jnc	$+618    	;abs 0x836
     5ce:	00 75       	subc	r5,	r0	
     5d0:	5f 63       	addc.b	#1,	r15	;r3 As==01
     5d2:	68 61       	addc.b	@r1,	r8	
     5d4:	72 3a       	jl	$-794    	;abs 0x2ba
     5d6:	74 28       	jnc	$+234    	;abs 0x6c0
     5d8:	34 2c       	jc	$+106    	;abs 0x642
     5da:	31 29       	jnc	$+612    	;abs 0x83e
     5dc:	3d 28       	jnc	$+124    	;abs 0x658
     5de:	30 2c       	jc	$+98     	;abs 0x640
     5e0:	31 31       	jn	$+612    	;abs 0x844
     5e2:	29 00 75 5f 	mova	&0x05f75,r9	
     5e6:	73 68       	.word	0x6873;	????	Illegal as 2-op instr
     5e8:	6f 72       	subc.b	#4,	r15	;r2 As==10
     5ea:	74 3a       	jl	$-790    	;abs 0x2d4
     5ec:	74 28       	jnc	$+234    	;abs 0x6d6
     5ee:	34 2c       	jc	$+106    	;abs 0x658
     5f0:	32 29       	jnc	$+614    	;abs 0x856
     5f2:	3d 28       	jnc	$+124    	;abs 0x66e
     5f4:	30 2c       	jc	$+98     	;abs 0x656
     5f6:	39 29       	jnc	$+628    	;abs 0x86a
     5f8:	00 75       	subc	r5,	r0	
     5fa:	5f 69 6e 74 	addc.b	29806(r9),r15	;0x746e(r9)
     5fe:	3a 74       	subc	@r4+,	r10	
     600:	28 34       	jge	$+82     	;abs 0x652
     602:	2c 33       	jn	$-422    	;abs 0x45c
     604:	29 3d       	jmp	$+596    	;abs 0x858
     606:	28 30       	jn	$+82     	;abs 0x658
     608:	2c 34       	jge	$+90     	;abs 0x662
     60a:	29 00 75 5f 	mova	&0x05f75,r9	
     60e:	6c 6f       	addc.b	@r15,	r12	
     610:	6e 67       	addc.b	@r7,	r14	
     612:	3a 74       	subc	@r4+,	r10	
     614:	28 34       	jge	$+82     	;abs 0x666
     616:	2c 34       	jge	$+90     	;abs 0x670
     618:	29 3d       	jmp	$+596    	;abs 0x86c
     61a:	28 30       	jn	$+82     	;abs 0x66c
     61c:	2c 35       	jge	$+602    	;abs 0x876
     61e:	29 00 75 73 	mova	&0x07375,r9	
     622:	68 6f       	addc.b	@r15,	r8	
     624:	72 74       	subc.b	@r4+,	r2	
     626:	3a 74       	subc	@r4+,	r10	
     628:	28 34       	jge	$+82     	;abs 0x67a
     62a:	2c 35       	jge	$+602    	;abs 0x884
     62c:	29 3d       	jmp	$+596    	;abs 0x880
     62e:	28 30       	jn	$+82     	;abs 0x680
     630:	2c 39       	jl	$+602    	;abs 0x88a
     632:	29 00 75 69 	mova	&0x06975,r9	
     636:	6e 74       	subc.b	@r4,	r14	
     638:	3a 74       	subc	@r4+,	r10	
     63a:	28 34       	jge	$+82     	;abs 0x68c
     63c:	2c 36       	jge	$-934    	;abs 0x296
     63e:	29 3d       	jmp	$+596    	;abs 0x892
     640:	28 30       	jn	$+82     	;abs 0x692
     642:	2c 34       	jge	$+90     	;abs 0x69c
     644:	29 00 75 5f 	mova	&0x05f75,r9	
     648:	69 6e       	addc.b	@r14,	r9	
     64a:	74 38       	jl	$+234    	;abs 0x734
     64c:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     650:	28 34       	jge	$+82     	;abs 0x6a2
     652:	2c 37       	jge	$-422    	;abs 0x4ac
     654:	29 3d       	jmp	$+596    	;abs 0x8a8
     656:	28 36       	jge	$-942    	;abs 0x2a8
     658:	2c 32       	jn	$-934    	;abs 0x2b2
     65a:	29 00 75 5f 	mova	&0x05f75,r9	
     65e:	69 6e       	addc.b	@r14,	r9	
     660:	74 31       	jn	$+746    	;abs 0x94a
     662:	36 5f       	add	@r15+,	r6	
     664:	74 3a       	jl	$-790    	;abs 0x34e
     666:	74 28       	jnc	$+234    	;abs 0x750
     668:	34 2c       	jc	$+106    	;abs 0x6d2
     66a:	38 29       	jnc	$+626    	;abs 0x8dc
     66c:	3d 28       	jnc	$+124    	;abs 0x6e8
     66e:	36 2c       	jc	$+110    	;abs 0x6dc
     670:	34 29       	jnc	$+618    	;abs 0x8da
     672:	00 75       	subc	r5,	r0	
     674:	5f 69 6e 74 	addc.b	29806(r9),r15	;0x746e(r9)
     678:	33 32       	jn	$-920    	;abs 0x2e0
     67a:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     67e:	28 34       	jge	$+82     	;abs 0x6d0
     680:	2c 39       	jl	$+602    	;abs 0x8da
     682:	29 3d       	jmp	$+596    	;abs 0x8d6
     684:	28 36       	jge	$-942    	;abs 0x2d6
     686:	2c 36       	jge	$-934    	;abs 0x2e0
     688:	29 00 75 5f 	mova	&0x05f75,r9	
     68c:	69 6e       	addc.b	@r14,	r9	
     68e:	74 36       	jge	$-790    	;abs 0x378
     690:	34 5f       	add	@r15+,	r4	
     692:	74 3a       	jl	$-790    	;abs 0x37c
     694:	74 28       	jnc	$+234    	;abs 0x77e
     696:	34 2c       	jc	$+106    	;abs 0x700
     698:	31 30       	jn	$+100    	;abs 0x6fc
     69a:	29 3d       	jmp	$+596    	;abs 0x8ee
     69c:	28 36       	jge	$-942    	;abs 0x2ee
     69e:	2c 38       	jl	$+90     	;abs 0x6f8
     6a0:	29 00 75 5f 	mova	&0x05f75,r9	
     6a4:	71 75       	subc.b	@r5+,	r1	
     6a6:	61 64       	addc.b	@r4,	r1	
     6a8:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     6ac:	28 34       	jge	$+82     	;abs 0x6fe
     6ae:	2c 31       	jn	$+602    	;abs 0x908
     6b0:	31 29       	jnc	$+612    	;abs 0x914
     6b2:	3d 28       	jnc	$+124    	;abs 0x72e
     6b4:	34 2c       	jc	$+106    	;abs 0x71e
     6b6:	31 30       	jn	$+100    	;abs 0x71a
     6b8:	29 00 71 75 	mova	&0x07571,r9	
     6bc:	61 64       	addc.b	@r4,	r1	
     6be:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     6c2:	28 34       	jge	$+82     	;abs 0x714
     6c4:	2c 31       	jn	$+602    	;abs 0x91e
     6c6:	32 29       	jnc	$+614    	;abs 0x92c
     6c8:	3d 28       	jnc	$+124    	;abs 0x744
     6ca:	36 2c       	jc	$+110    	;abs 0x738
     6cc:	37 29       	jnc	$+624    	;abs 0x93c
     6ce:	00 71       	subc	r1,	r0	
     6d0:	61 64       	addc.b	@r4,	r1	
     6d2:	64 72       	subc.b	#4,	r4	;r2 As==10
     6d4:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     6d8:	28 34       	jge	$+82     	;abs 0x72a
     6da:	2c 31       	jn	$+602    	;abs 0x934
     6dc:	33 29       	jnc	$+616    	;abs 0x944
     6de:	3d 28       	jnc	$+124    	;abs 0x75a
     6e0:	34 2c       	jc	$+106    	;abs 0x74a
     6e2:	31 34       	jge	$+100    	;abs 0x746
     6e4:	29 3d       	jmp	$+596    	;abs 0x938
     6e6:	2a 28       	jnc	$+86     	;abs 0x73c
     6e8:	34 2c       	jc	$+106    	;abs 0x752
     6ea:	31 32       	jn	$-924    	;abs 0x34e
     6ec:	29 00 63 61 	mova	&0x06163,r9	
     6f0:	64 64       	addc.b	@r4,	r4	
     6f2:	72 5f       	add.b	@r15+,	r2	
     6f4:	74 3a       	jl	$-790    	;abs 0x3de
     6f6:	74 28       	jnc	$+234    	;abs 0x7e0
     6f8:	34 2c       	jc	$+106    	;abs 0x762
     6fa:	31 35       	jge	$+612    	;abs 0x95e
     6fc:	29 3d       	jmp	$+596    	;abs 0x950
     6fe:	28 34       	jge	$+82     	;abs 0x750
     700:	2c 31       	jn	$+602    	;abs 0x95a
     702:	36 29       	jnc	$+622    	;abs 0x970
     704:	3d 2a       	jnc	$-900    	;abs 0x380
     706:	28 30       	jn	$+82     	;abs 0x758
     708:	2c 32       	jn	$-934    	;abs 0x362
     70a:	29 00 63 5f 	mova	&0x05f63,r9	
     70e:	63 61       	.word	0x6163;	????	Illegal as 2-op instr
     710:	64 64       	addc.b	@r4,	r4	
     712:	72 5f       	add.b	@r15+,	r2	
     714:	74 3a       	jl	$-790    	;abs 0x3fe
     716:	74 28       	jnc	$+234    	;abs 0x800
     718:	34 2c       	jc	$+106    	;abs 0x782
     71a:	31 37       	jge	$-412    	;abs 0x57e
     71c:	29 3d       	jmp	$+596    	;abs 0x970
     71e:	28 34       	jge	$+82     	;abs 0x770
     720:	2c 31       	jn	$+602    	;abs 0x97a
     722:	38 29       	jnc	$+626    	;abs 0x994
     724:	3d 2a       	jnc	$-900    	;abs 0x3a0
     726:	28 34       	jge	$+82     	;abs 0x778
     728:	2c 31       	jn	$+602    	;abs 0x982
     72a:	39 29       	jnc	$+628    	;abs 0x99e
     72c:	3d 6b       	addc	@r11+,	r13	
     72e:	28 30       	jn	$+82     	;abs 0x780
     730:	2c 32       	jn	$-934    	;abs 0x38a
     732:	29 00 76 5f 	mova	&0x05f76,r9	
     736:	63 61       	.word	0x6163;	????	Illegal as 2-op instr
     738:	64 64       	addc.b	@r4,	r4	
     73a:	72 5f       	add.b	@r15+,	r2	
     73c:	74 3a       	jl	$-790    	;abs 0x426
     73e:	74 28       	jnc	$+234    	;abs 0x828
     740:	34 2c       	jc	$+106    	;abs 0x7aa
     742:	32 30       	jn	$+102    	;abs 0x7a8
     744:	29 3d       	jmp	$+596    	;abs 0x998
     746:	28 34       	jge	$+82     	;abs 0x798
     748:	2c 32       	jn	$-934    	;abs 0x3a2
     74a:	31 29       	jnc	$+612    	;abs 0x9ae
     74c:	3d 2a       	jnc	$-900    	;abs 0x3c8
     74e:	28 34       	jge	$+82     	;abs 0x7a0
     750:	2c 32       	jn	$-934    	;abs 0x3aa
     752:	32 29       	jnc	$+614    	;abs 0x9b8
     754:	3d 42       	mov	#8,	r13	;r2 As==11
     756:	28 30       	jn	$+82     	;abs 0x7a8
     758:	2c 32       	jn	$-934    	;abs 0x3b2
     75a:	29 00 66 69 	mova	&0x06966,r9	
     75e:	78 70 74 5f 	subc.b	#24436,	r8	;#0x5f74
     762:	74 3a       	jl	$-790    	;abs 0x44c
     764:	74 28       	jnc	$+234    	;abs 0x84e
     766:	34 2c       	jc	$+106    	;abs 0x7d0
     768:	32 33       	jn	$-410    	;abs 0x5ce
     76a:	29 3d       	jmp	$+596    	;abs 0x9be
     76c:	28 34       	jge	$+82     	;abs 0x7be
     76e:	2c 39       	jl	$+602    	;abs 0x9c8
     770:	29 00 67 69 	mova	&0x06967,r9	
     774:	64 5f       	add.b	@r15,	r4	
     776:	74 3a       	jl	$-790    	;abs 0x460
     778:	74 28       	jnc	$+234    	;abs 0x862
     77a:	34 2c       	jc	$+106    	;abs 0x7e4
     77c:	32 34       	jge	$+102    	;abs 0x7e2
     77e:	29 3d       	jmp	$+596    	;abs 0x9d2
     780:	28 34       	jge	$+82     	;abs 0x7d2
     782:	2c 39       	jl	$+602    	;abs 0x9dc
     784:	29 00 69 6e 	mova	&0x06e69,r9	
     788:	5f 61 64 64 	addc.b	25700(r1),r15	;0x6464(r1)
     78c:	72 5f       	add.b	@r15+,	r2	
     78e:	74 3a       	jl	$-790    	;abs 0x478
     790:	74 28       	jnc	$+234    	;abs 0x87a
     792:	34 2c       	jc	$+106    	;abs 0x7fc
     794:	32 35       	jge	$+614    	;abs 0x9fa
     796:	29 3d       	jmp	$+596    	;abs 0x9ea
     798:	28 34       	jge	$+82     	;abs 0x7ea
     79a:	2c 39       	jl	$+602    	;abs 0x9f4
     79c:	29 00 69 6e 	mova	&0x06e69,r9	
     7a0:	5f 70 6f 72 	subc.b	0x726f,	r15	;PC rel. 0x07a13
     7a4:	74 5f       	add.b	@r15+,	r4	
     7a6:	74 3a       	jl	$-790    	;abs 0x490
     7a8:	74 28       	jnc	$+234    	;abs 0x892
     7aa:	34 2c       	jc	$+106    	;abs 0x814
     7ac:	32 36       	jge	$-922    	;abs 0x412
     7ae:	29 3d       	jmp	$+596    	;abs 0xa02
     7b0:	28 34       	jge	$+82     	;abs 0x802
     7b2:	2c 38       	jl	$+90     	;abs 0x80c
     7b4:	29 00 69 6e 	mova	&0x06e69,r9	
     7b8:	6f 5f       	add.b	@r15,	r15	
     7ba:	74 3a       	jl	$-790    	;abs 0x4a4
     7bc:	74 28       	jnc	$+234    	;abs 0x8a6
     7be:	34 2c       	jc	$+106    	;abs 0x828
     7c0:	32 37       	jge	$-410    	;abs 0x626
     7c2:	29 3d       	jmp	$+596    	;abs 0xa16
     7c4:	28 34       	jge	$+82     	;abs 0x816
     7c6:	2c 39       	jl	$+602    	;abs 0xa20
     7c8:	29 00 6b 65 	mova	&0x0656b,r9	
     7cc:	79 5f       	add.b	@r15+,	r9	
     7ce:	74 3a       	jl	$-790    	;abs 0x4b8
     7d0:	74 28       	jnc	$+234    	;abs 0x8ba
     7d2:	34 2c       	jc	$+106    	;abs 0x83c
     7d4:	32 38       	jl	$+102    	;abs 0x83a
     7d6:	29 3d       	jmp	$+596    	;abs 0xa2a
     7d8:	28 30       	jn	$+82     	;abs 0x82a
     7da:	2c 33       	jn	$-422    	;abs 0x634
     7dc:	29 00 6d 6f 	mova	&0x06f6d,r9	
     7e0:	64 65       	addc.b	@r5,	r4	
     7e2:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     7e6:	28 34       	jge	$+82     	;abs 0x838
     7e8:	2c 32       	jn	$-934    	;abs 0x442
     7ea:	39 29       	jnc	$+628    	;abs 0xa5e
     7ec:	3d 28       	jnc	$+124    	;abs 0x868
     7ee:	34 2c       	jc	$+106    	;abs 0x858
     7f0:	38 29       	jnc	$+626    	;abs 0xa62
     7f2:	00 6e       	addc	r14,	r0	
     7f4:	6c 69       	addc.b	@r9,	r12	
     7f6:	6e 6b       	addc.b	@r11,	r14	
     7f8:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     7fc:	28 34       	jge	$+82     	;abs 0x84e
     7fe:	2c 33       	jn	$-422    	;abs 0x658
     800:	30 29       	jnc	$+610    	;abs 0xa62
     802:	3d 28       	jnc	$+124    	;abs 0x87e
     804:	34 2c       	jc	$+106    	;abs 0x86e
     806:	38 29       	jnc	$+626    	;abs 0xa78
     808:	00 72       	subc	r2,	r0	
     80a:	6c 69       	addc.b	@r9,	r12	
     80c:	6d 5f       	add.b	@r15,	r13	
     80e:	74 3a       	jl	$-790    	;abs 0x4f8
     810:	74 28       	jnc	$+234    	;abs 0x8fa
     812:	34 2c       	jc	$+106    	;abs 0x87c
     814:	33 31       	jn	$+616    	;abs 0xa7c
     816:	29 3d       	jmp	$+596    	;abs 0xa6a
     818:	28 34       	jge	$+82     	;abs 0x86a
     81a:	2c 31       	jn	$+602    	;abs 0xa74
     81c:	32 29       	jnc	$+614    	;abs 0xa82
     81e:	00 73       	sbc	r0		
     820:	65 67       	addc.b	@r7,	r5	
     822:	73 7a       	.word	0x7a73;	????	Illegal as 2-op instr
     824:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     828:	28 34       	jge	$+82     	;abs 0x87a
     82a:	2c 33       	jn	$-422    	;abs 0x684
     82c:	32 29       	jnc	$+614    	;abs 0xa92
     82e:	3d 28       	jnc	$+124    	;abs 0x8aa
     830:	36 2c       	jc	$+110    	;abs 0x89e
     832:	35 29       	jnc	$+620    	;abs 0xa9e
     834:	00 73       	sbc	r0		
     836:	77 62       	addc.b	#8,	r7	;r2 As==11
     838:	6c 6b       	addc.b	@r11,	r12	
     83a:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     83e:	28 34       	jge	$+82     	;abs 0x890
     840:	2c 33       	jn	$-422    	;abs 0x69a
     842:	33 29       	jnc	$+616    	;abs 0xaaa
     844:	3d 28       	jnc	$+124    	;abs 0x8c0
     846:	36 2c       	jc	$+110    	;abs 0x8b4
     848:	35 29       	jnc	$+620    	;abs 0xab4
     84a:	00 75       	subc	r5,	r0	
     84c:	66 73       	subc.b	#2,	r6	;r3 As==10
     84e:	5f 64 61 64 	addc.b	25697(r4),r15	;0x6461(r4)
     852:	64 72       	subc.b	#4,	r4	;r2 As==10
     854:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     858:	28 34       	jge	$+82     	;abs 0x8aa
     85a:	2c 33       	jn	$-422    	;abs 0x6b4
     85c:	34 29       	jnc	$+618    	;abs 0xac6
     85e:	3d 28       	jnc	$+124    	;abs 0x8da
     860:	36 2c       	jc	$+110    	;abs 0x8ce
     862:	35 29       	jnc	$+620    	;abs 0xace
     864:	00 75       	subc	r5,	r0	
     866:	66 73       	subc.b	#2,	r6	;r3 As==10
     868:	5f 74 69 6d 	subc.b	28009(r4),r15	;0x6d69(r4)
     86c:	65 5f       	add.b	@r15,	r5	
     86e:	74 3a       	jl	$-790    	;abs 0x558
     870:	74 28       	jnc	$+234    	;abs 0x95a
     872:	34 2c       	jc	$+106    	;abs 0x8dc
     874:	33 35       	jge	$+616    	;abs 0xadc
     876:	29 3d       	jmp	$+596    	;abs 0xaca
     878:	28 36       	jge	$-942    	;abs 0x4ca
     87a:	2c 35       	jge	$+602    	;abs 0xad4
     87c:	29 00 75 69 	mova	&0x06975,r9	
     880:	64 5f       	add.b	@r15,	r4	
     882:	74 3a       	jl	$-790    	;abs 0x56c
     884:	74 28       	jnc	$+234    	;abs 0x96e
     886:	34 2c       	jc	$+106    	;abs 0x8f0
     888:	33 36       	jge	$-920    	;abs 0x4f0
     88a:	29 3d       	jmp	$+596    	;abs 0xade
     88c:	28 34       	jge	$+82     	;abs 0x8de
     88e:	2c 39       	jl	$+602    	;abs 0xae8
     890:	29 00 63 3a 	mova	&0x03a63,r9	
     894:	2f 6d       	addc	@r13,	r15	
     896:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     898:	67 63       	addc.b	#2,	r7	;r3 As==10
     89a:	63 2f       	jc	$-312    	;abs 0x762
     89c:	6c 69       	addc.b	@r9,	r12	
     89e:	62 2f       	jc	$-314    	;abs 0x764
     8a0:	67 63       	addc.b	#2,	r7	;r3 As==10
     8a2:	63 2d       	jc	$+712    	;abs 0xb6a
     8a4:	6c 69       	addc.b	@r9,	r12	
     8a6:	62 2f       	jc	$-314    	;abs 0x76c
     8a8:	6d 73       	subc.b	#2,	r13	;r3 As==10
     8aa:	70 34       	jge	$+226    	;abs 0x98c
     8ac:	33 30       	jn	$+104    	;abs 0x914
     8ae:	2f 33       	jn	$-416    	;abs 0x70e
     8b0:	2e 32       	jn	$-930    	;abs 0x50e
     8b2:	2e 33       	jn	$-418    	;abs 0x710
     8b4:	2f 69       	addc	@r9,	r15	
     8b6:	6e 63       	addc.b	#2,	r14	;r3 As==10
     8b8:	6c 75       	subc.b	@r5,	r12	
     8ba:	64 65       	addc.b	@r5,	r4	
     8bc:	2f 73       	subc	#2,	r15	;r3 As==10
     8be:	74 64       	addc.b	@r4+,	r4	
     8c0:	61 72       	subc.b	#4,	r1	;r2 As==10
     8c2:	67 2e       	jc	$-816    	;abs 0x592
     8c4:	68 00 5f 5f 	mova	r0,	&0x85f5f
     8c8:	67 6e       	addc.b	@r14,	r7	
     8ca:	75 63       	addc.b	#-1,	r5	;r3 As==11
     8cc:	5f 76 61 5f 	subc.b	24417(r6),r15	;0x5f61(r6)
     8d0:	6c 69       	addc.b	@r9,	r12	
     8d2:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
     8d4:	3a 74       	subc	@r4+,	r10	
     8d6:	28 37       	jge	$-430    	;abs 0x728
     8d8:	2c 31       	jn	$+602    	;abs 0xb32
     8da:	29 3d       	jmp	$+596    	;abs 0xb2e
     8dc:	28 30       	jn	$+82     	;abs 0x92e
     8de:	2c 31       	jn	$+602    	;abs 0xb38
     8e0:	39 29       	jnc	$+628    	;abs 0xb54
     8e2:	00 76       	subc	r6,	r0	
     8e4:	61 5f       	add.b	@r15,	r1	
     8e6:	6c 69       	addc.b	@r9,	r12	
     8e8:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
     8ea:	3a 74       	subc	@r4+,	r10	
     8ec:	28 37       	jge	$-430    	;abs 0x73e
     8ee:	2c 32       	jn	$-934    	;abs 0x548
     8f0:	29 3d       	jmp	$+596    	;abs 0xb44
     8f2:	28 37       	jge	$-430    	;abs 0x744
     8f4:	2c 31       	jn	$+602    	;abs 0xb4e
     8f6:	29 00 63 3a 	mova	&0x03a63,r9	
     8fa:	2f 6d       	addc	@r13,	r15	
     8fc:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     8fe:	67 63       	addc.b	#2,	r7	;r3 As==10
     900:	63 2f       	jc	$-312    	;abs 0x7c8
     902:	6d 73       	subc.b	#2,	r13	;r3 As==10
     904:	70 34       	jge	$+226    	;abs 0x9e6
     906:	33 30       	jn	$+104    	;abs 0x96e
     908:	2f 69       	addc	@r9,	r15	
     90a:	6e 63       	addc.b	#2,	r14	;r3 As==10
     90c:	6c 75       	subc.b	@r5,	r12	
     90e:	64 65       	addc.b	@r5,	r4	
     910:	2f 73       	subc	#2,	r15	;r3 As==10
     912:	74 64       	addc.b	@r4+,	r4	
     914:	6c 69       	addc.b	@r9,	r12	
     916:	62 2e       	jc	$-826    	;abs 0x5dc
     918:	68 00 64 69 	mova	r0,	&0x86964
     91c:	76 5f       	add.b	@r15+,	r6	
     91e:	74 3a       	jl	$-790    	;abs 0x608
     920:	74 28       	jnc	$+234    	;abs 0xa0a
     922:	38 2c       	jc	$+114    	;abs 0x994
     924:	31 29       	jnc	$+612    	;abs 0xb88
     926:	3d 28       	jnc	$+124    	;abs 0x9a2
     928:	38 2c       	jc	$+114    	;abs 0x99a
     92a:	32 29       	jnc	$+614    	;abs 0xb90
     92c:	3d 73       	subc	#-1,	r13	;r3 As==11
     92e:	34 71       	subc	@r1+,	r4	
     930:	75 6f       	addc.b	@r15+,	r5	
     932:	74 3a       	jl	$-790    	;abs 0x61c
     934:	28 30       	jn	$+82     	;abs 0x986
     936:	2c 31       	jn	$+602    	;abs 0xb90
     938:	29 2c       	jc	$+84     	;abs 0x98c
     93a:	30 2c       	jc	$+98     	;abs 0x99c
     93c:	31 36       	jge	$-924    	;abs 0x5a0
     93e:	3b 72       	subc	#8,	r11	;r2 As==11
     940:	65 6d       	addc.b	@r13,	r5	
     942:	3a 28       	jnc	$+118    	;abs 0x9b8
     944:	30 2c       	jc	$+98     	;abs 0x9a6
     946:	31 29       	jnc	$+612    	;abs 0xbaa
     948:	2c 31       	jn	$+602    	;abs 0xba2
     94a:	36 2c       	jc	$+110    	;abs 0x9b8
     94c:	31 36       	jge	$-924    	;abs 0x5b0
     94e:	3b 3b       	jl	$-392    	;abs 0x7c6
     950:	00 6c       	addc	r12,	r0	
     952:	64 69       	addc.b	@r9,	r4	
     954:	76 5f       	add.b	@r15+,	r6	
     956:	74 3a       	jl	$-790    	;abs 0x640
     958:	74 28       	jnc	$+234    	;abs 0xa42
     95a:	38 2c       	jc	$+114    	;abs 0x9cc
     95c:	33 29       	jnc	$+616    	;abs 0xbc4
     95e:	3d 28       	jnc	$+124    	;abs 0x9da
     960:	38 2c       	jc	$+114    	;abs 0x9d2
     962:	34 29       	jnc	$+618    	;abs 0xbcc
     964:	3d 73       	subc	#-1,	r13	;r3 As==11
     966:	38 71       	subc	@r1+,	r8	
     968:	75 6f       	addc.b	@r15+,	r5	
     96a:	74 3a       	jl	$-790    	;abs 0x654
     96c:	28 30       	jn	$+82     	;abs 0x9be
     96e:	2c 33       	jn	$-422    	;abs 0x7c8
     970:	29 2c       	jc	$+84     	;abs 0x9c4
     972:	30 2c       	jc	$+98     	;abs 0x9d4
     974:	33 32       	jn	$-920    	;abs 0x5dc
     976:	3b 72       	subc	#8,	r11	;r2 As==11
     978:	65 6d       	addc.b	@r13,	r5	
     97a:	3a 28       	jnc	$+118    	;abs 0x9f0
     97c:	30 2c       	jc	$+98     	;abs 0x9de
     97e:	33 29       	jnc	$+616    	;abs 0xbe6
     980:	2c 33       	jn	$-422    	;abs 0x7da
     982:	32 2c       	jc	$+102    	;abs 0x9e8
     984:	33 32       	jn	$-920    	;abs 0x5ec
     986:	3b 3b       	jl	$-392    	;abs 0x7fe
     988:	00 63       	adc	r0		
     98a:	3a 2f       	jc	$-394    	;abs 0x800
     98c:	6d 73       	subc.b	#2,	r13	;r3 As==10
     98e:	70 67       	addc.b	@r7+,	r0	
     990:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     992:	2f 6d       	addc	@r13,	r15	
     994:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     996:	34 33       	jn	$-406    	;abs 0x800
     998:	30 2f       	jc	$-414    	;abs 0x7fa
     99a:	69 6e       	addc.b	@r14,	r9	
     99c:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     99e:	75 64       	addc.b	@r4+,	r5	
     9a0:	65 2f       	jc	$-308    	;abs 0x86c
     9a2:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
     9a4:	67 6e       	addc.b	@r14,	r7	
     9a6:	61 6c       	addc.b	@r12,	r1	
     9a8:	2e 68       	addc	@r8,	r14	
     9aa:	00 63       	adc	r0		
     9ac:	3a 2f       	jc	$-394    	;abs 0x822
     9ae:	6d 73       	subc.b	#2,	r13	;r3 As==10
     9b0:	70 67       	addc.b	@r7+,	r0	
     9b2:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     9b4:	2f 6d       	addc	@r13,	r15	
     9b6:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     9b8:	34 33       	jn	$-406    	;abs 0x822
     9ba:	30 2f       	jc	$-414    	;abs 0x81c
     9bc:	69 6e       	addc.b	@r14,	r9	
     9be:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     9c0:	75 64       	addc.b	@r4+,	r5	
     9c2:	65 2f       	jc	$-308    	;abs 0x88e
     9c4:	69 6f       	addc.b	@r15,	r9	
     9c6:	6d 61       	addc.b	@r1,	r13	
     9c8:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
     9ca:	6f 73       	subc.b	#2,	r15	;r3 As==10
     9cc:	2e 68       	addc	@r8,	r14	
     9ce:	00 63       	adc	r0		
     9d0:	3a 2f       	jc	$-394    	;abs 0x846
     9d2:	6d 73       	subc.b	#2,	r13	;r3 As==10
     9d4:	70 67       	addc.b	@r7+,	r0	
     9d6:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     9d8:	2f 6d       	addc	@r13,	r15	
     9da:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     9dc:	34 33       	jn	$-406    	;abs 0x846
     9de:	30 2f       	jc	$-414    	;abs 0x840
     9e0:	69 6e       	addc.b	@r14,	r9	
     9e2:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     9e4:	75 64       	addc.b	@r4+,	r5	
     9e6:	65 2f       	jc	$-308    	;abs 0x8b2
     9e8:	6d 73       	subc.b	#2,	r13	;r3 As==10
     9ea:	70 34       	jge	$+226    	;abs 0xacc
     9ec:	33 30       	jn	$+104    	;abs 0xa54
     9ee:	78 32       	jn	$-782    	;abs 0x6e0
     9f0:	36 31       	jn	$+622    	;abs 0xc5e
     9f2:	78 2e       	jc	$-782    	;abs 0x6e4
     9f4:	68 00 63 3a 	mova	r0,	&0x83a63
     9f8:	2f 6d       	addc	@r13,	r15	
     9fa:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     9fc:	67 63       	addc.b	#2,	r7	;r3 As==10
     9fe:	63 2f       	jc	$-312    	;abs 0x8c6
     a00:	6d 73       	subc.b	#2,	r13	;r3 As==10
     a02:	70 34       	jge	$+226    	;abs 0xae4
     a04:	33 30       	jn	$+104    	;abs 0xa6c
     a06:	2f 69       	addc	@r9,	r15	
     a08:	6e 63       	addc.b	#2,	r14	;r3 As==10
     a0a:	6c 75       	subc.b	@r5,	r12	
     a0c:	64 65       	addc.b	@r5,	r4	
     a0e:	2f 6d       	addc	@r13,	r15	
     a10:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     a12:	34 33       	jn	$-406    	;abs 0x87c
     a14:	30 2f       	jc	$-414    	;abs 0x876
     a16:	6d 70       	subc.b	@r0,	r13	
     a18:	79 2e       	jc	$-780    	;abs 0x70c
     a1a:	68 00 63 3a 	mova	r0,	&0x83a63
     a1e:	2f 6d       	addc	@r13,	r15	
     a20:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     a22:	67 63       	addc.b	#2,	r7	;r3 As==10
     a24:	63 2f       	jc	$-312    	;abs 0x8ec
     a26:	6d 73       	subc.b	#2,	r13	;r3 As==10
     a28:	70 34       	jge	$+226    	;abs 0xb0a
     a2a:	33 30       	jn	$+104    	;abs 0xa92
     a2c:	2f 69       	addc	@r9,	r15	
     a2e:	6e 63       	addc.b	#2,	r14	;r3 As==10
     a30:	6c 75       	subc.b	@r5,	r12	
     a32:	64 65       	addc.b	@r5,	r4	
     a34:	2f 6d       	addc	@r13,	r15	
     a36:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     a38:	34 33       	jn	$-406    	;abs 0x8a2
     a3a:	30 2f       	jc	$-414    	;abs 0x89c
     a3c:	67 70       	subc.b	@r0,	r7	
     a3e:	69 6f       	addc.b	@r15,	r9	
     a40:	2e 68       	addc	@r8,	r14	
     a42:	00 63       	adc	r0		
     a44:	3a 2f       	jc	$-394    	;abs 0x8ba
     a46:	6d 73       	subc.b	#2,	r13	;r3 As==10
     a48:	70 67       	addc.b	@r7+,	r0	
     a4a:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     a4c:	2f 6d       	addc	@r13,	r15	
     a4e:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     a50:	34 33       	jn	$-406    	;abs 0x8ba
     a52:	30 2f       	jc	$-414    	;abs 0x8b4
     a54:	69 6e       	addc.b	@r14,	r9	
     a56:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     a58:	75 64       	addc.b	@r4+,	r5	
     a5a:	65 2f       	jc	$-308    	;abs 0x926
     a5c:	6d 73       	subc.b	#2,	r13	;r3 As==10
     a5e:	70 34       	jge	$+226    	;abs 0xb40
     a60:	33 30       	jn	$+104    	;abs 0xac8
     a62:	2f 69       	addc	@r9,	r15	
     a64:	6f 73       	subc.b	#2,	r15	;r3 As==10
     a66:	74 72       	subc.b	#8,	r4	;r2 As==11
     a68:	75 63       	addc.b	#-1,	r5	;r3 As==11
     a6a:	74 75       	subc.b	@r5+,	r4	
     a6c:	72 65       	addc.b	@r5+,	r2	
     a6e:	73 2e       	jc	$-792    	;abs 0x756
     a70:	68 00 70 6f 	mova	r0,	&0x86f70
     a74:	72 74       	subc.b	@r4+,	r2	
     a76:	3a 54       	add	@r4+,	r10	
     a78:	28 31       	jn	$+594    	;abs 0xcca
     a7a:	35 2c       	jc	$+108    	;abs 0xae6
     a7c:	31 29       	jnc	$+612    	;abs 0xce0
     a7e:	3d 75       	subc	@r5+,	r13	
     a80:	32 72       	subc	#8,	r2	;r2 As==11
     a82:	65 67       	addc.b	@r7,	r5	
     a84:	5f 70 3a 28 	subc.b	0x283a,	r15	;PC rel. 0x032c2
     a88:	30 2c       	jc	$+98     	;abs 0xaea
     a8a:	31 31       	jn	$+612    	;abs 0xcee
     a8c:	29 2c       	jc	$+84     	;abs 0xae0
     a8e:	30 2c       	jc	$+98     	;abs 0xaf0
     a90:	38 3b       	jl	$-398    	;abs 0x902
     a92:	5f 5f 70 69 	add.b	26992(r15),r15	;0x6970(r15)
     a96:	6e 3a       	jl	$-802    	;abs 0x774
     a98:	28 31       	jn	$+594    	;abs 0xcea
     a9a:	35 2c       	jc	$+108    	;abs 0xb06
     a9c:	32 29       	jnc	$+614    	;abs 0xd02
     a9e:	3d 73       	subc	#-1,	r13	;r3 As==11
     aa0:	32 5f       	add	@r15+,	r2	
     aa2:	5f 70 30 3a 	subc.b	0x3a30,	r15	;PC rel. 0x044d6
     aa6:	28 30       	jn	$+82     	;abs 0xaf8
     aa8:	2c 31       	jn	$+602    	;abs 0xd02
     aaa:	31 29       	jnc	$+612    	;abs 0xd0e
     aac:	2c 30       	jn	$+90     	;abs 0xb06
     aae:	2c 31       	jn	$+602    	;abs 0xd08
     ab0:	3b 5f       	add	@r15+,	r11	
     ab2:	5f 70 31 3a 	subc.b	0x3a31,	r15	;PC rel. 0x044e7
     ab6:	28 30       	jn	$+82     	;abs 0xb08
     ab8:	2c 31       	jn	$+602    	;abs 0xd12
     aba:	31 29       	jnc	$+612    	;abs 0xd1e
     abc:	2c 31       	jn	$+602    	;abs 0xd16
     abe:	2c 31       	jn	$+602    	;abs 0xd18
     ac0:	3b 5f       	add	@r15+,	r11	
     ac2:	5f 70 32 3a 	subc.b	0x3a32,	r15	;PC rel. 0x044f8
     ac6:	28 30       	jn	$+82     	;abs 0xb18
     ac8:	2c 31       	jn	$+602    	;abs 0xd22
     aca:	31 29       	jnc	$+612    	;abs 0xd2e
     acc:	2c 32       	jn	$-934    	;abs 0x726
     ace:	2c 31       	jn	$+602    	;abs 0xd28
     ad0:	3b 5f       	add	@r15+,	r11	
     ad2:	5f 70 33 3a 	subc.b	0x3a33,	r15	;PC rel. 0x04509
     ad6:	28 30       	jn	$+82     	;abs 0xb28
     ad8:	2c 31       	jn	$+602    	;abs 0xd32
     ada:	31 29       	jnc	$+612    	;abs 0xd3e
     adc:	2c 33       	jn	$-422    	;abs 0x936
     ade:	2c 31       	jn	$+602    	;abs 0xd38
     ae0:	3b 5f       	add	@r15+,	r11	
     ae2:	5f 70 34 3a 	subc.b	0x3a34,	r15	;PC rel. 0x0451a
     ae6:	28 30       	jn	$+82     	;abs 0xb38
     ae8:	2c 31       	jn	$+602    	;abs 0xd42
     aea:	31 29       	jnc	$+612    	;abs 0xd4e
     aec:	2c 34       	jge	$+90     	;abs 0xb46
     aee:	2c 31       	jn	$+602    	;abs 0xd48
     af0:	3b 5f       	add	@r15+,	r11	
     af2:	5f 70 35 3a 	subc.b	0x3a35,	r15	;PC rel. 0x0452b
     af6:	28 30       	jn	$+82     	;abs 0xb48
     af8:	2c 31       	jn	$+602    	;abs 0xd52
     afa:	31 29       	jnc	$+612    	;abs 0xd5e
     afc:	2c 35       	jge	$+602    	;abs 0xd56
     afe:	2c 31       	jn	$+602    	;abs 0xd58
     b00:	3b 5f       	add	@r15+,	r11	
     b02:	5f 70 36 3a 	subc.b	0x3a36,	r15	;PC rel. 0x0453c
     b06:	28 30       	jn	$+82     	;abs 0xb58
     b08:	2c 31       	jn	$+602    	;abs 0xd62
     b0a:	31 29       	jnc	$+612    	;abs 0xd6e
     b0c:	2c 36       	jge	$-934    	;abs 0x766
     b0e:	2c 31       	jn	$+602    	;abs 0xd68
     b10:	3b 5f       	add	@r15+,	r11	
     b12:	5f 70 37 3a 	subc.b	0x3a37,	r15	;PC rel. 0x0454d
     b16:	28 30       	jn	$+82     	;abs 0xb68
     b18:	2c 31       	jn	$+602    	;abs 0xd72
     b1a:	31 29       	jnc	$+612    	;abs 0xd7e
     b1c:	2c 37       	jge	$-422    	;abs 0x976
     b1e:	2c 31       	jn	$+602    	;abs 0xd78
     b20:	3b 3b       	jl	$-392    	;abs 0x998
     b22:	2c 30       	jn	$+90     	;abs 0xb7c
     b24:	2c 31       	jn	$+602    	;abs 0xd7e
     b26:	36 3b       	jl	$-402    	;abs 0x994
     b28:	3b 00 69 6f 	mova	0x6f69,	r11	;PC rel. 0x07a93
     b2c:	72 65       	addc.b	@r5+,	r2	
     b2e:	67 69       	addc.b	@r9,	r7	
     b30:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
     b32:	65 72       	subc.b	#4,	r5	;r2 As==10
     b34:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     b38:	28 31       	jn	$+594    	;abs 0xd8a
     b3a:	35 2c       	jc	$+108    	;abs 0xba6
     b3c:	33 29       	jnc	$+616    	;abs 0xda4
     b3e:	3d 28       	jnc	$+124    	;abs 0xbba
     b40:	31 35       	jge	$+612    	;abs 0xda4
     b42:	2c 31       	jn	$+602    	;abs 0xd9c
     b44:	29 00 70 6f 	mova	&0x06f70,r9	
     b48:	72 74       	subc.b	@r4+,	r2	
     b4a:	5f 66 75 6c 	addc.b	27765(r6),r15	;0x6c75(r6)
     b4e:	6c 5f       	add.b	@r15,	r12	
     b50:	74 3a       	jl	$-790    	;abs 0x83a
     b52:	54 28       	jnc	$+170    	;abs 0xbfc
     b54:	31 35       	jge	$+612    	;abs 0xdb8
     b56:	2c 34       	jge	$+90     	;abs 0xbb0
     b58:	29 3d       	jmp	$+596    	;abs 0xdac
     b5a:	73 31       	jn	$+744    	;abs 0xe42
     b5c:	36 69       	addc	@r9+,	r6	
     b5e:	6e 3a       	jl	$-802    	;abs 0x83c
     b60:	28 31       	jn	$+594    	;abs 0xdb2
     b62:	35 2c       	jc	$+108    	;abs 0xbce
     b64:	33 29       	jnc	$+616    	;abs 0xdcc
     b66:	2c 30       	jn	$+90     	;abs 0xbc0
     b68:	2c 31       	jn	$+602    	;abs 0xdc2
     b6a:	36 3b       	jl	$-402    	;abs 0x9d8
     b6c:	6f 75       	subc.b	@r5,	r15	
     b6e:	74 3a       	jl	$-790    	;abs 0x858
     b70:	28 31       	jn	$+594    	;abs 0xdc2
     b72:	35 2c       	jc	$+108    	;abs 0xbde
     b74:	33 29       	jnc	$+616    	;abs 0xddc
     b76:	2c 31       	jn	$+602    	;abs 0xdd0
     b78:	36 2c       	jc	$+110    	;abs 0xbe6
     b7a:	31 36       	jge	$-924    	;abs 0x7de
     b7c:	3b 64       	addc	@r4+,	r11	
     b7e:	69 72       	subc.b	#4,	r9	;r2 As==10
     b80:	3a 28       	jnc	$+118    	;abs 0xbf6
     b82:	31 35       	jge	$+612    	;abs 0xde6
     b84:	2c 33       	jn	$-422    	;abs 0x9de
     b86:	29 2c       	jc	$+84     	;abs 0xbda
     b88:	33 32       	jn	$-920    	;abs 0x7f0
     b8a:	2c 31       	jn	$+602    	;abs 0xde4
     b8c:	36 3b       	jl	$-402    	;abs 0x9fa
     b8e:	69 66       	addc.b	@r6,	r9	
     b90:	67 3a       	jl	$-816    	;abs 0x860
     b92:	28 31       	jn	$+594    	;abs 0xde4
     b94:	35 2c       	jc	$+108    	;abs 0xc00
     b96:	33 29       	jnc	$+616    	;abs 0xdfe
     b98:	2c 34       	jge	$+90     	;abs 0xbf2
     b9a:	38 2c       	jc	$+114    	;abs 0xc0c
     b9c:	31 36       	jge	$-924    	;abs 0x800
     b9e:	3b 69       	addc	@r9+,	r11	
     ba0:	65 73       	subc.b	#2,	r5	;r3 As==10
     ba2:	3a 28       	jnc	$+118    	;abs 0xc18
     ba4:	31 35       	jge	$+612    	;abs 0xe08
     ba6:	2c 33       	jn	$-422    	;abs 0xa00
     ba8:	29 2c       	jc	$+84     	;abs 0xbfc
     baa:	36 34       	jge	$+110    	;abs 0xc18
     bac:	2c 31       	jn	$+602    	;abs 0xe06
     bae:	36 3b       	jl	$-402    	;abs 0xa1c
     bb0:	69 65       	addc.b	@r5,	r9	
     bb2:	3a 28       	jnc	$+118    	;abs 0xc28
     bb4:	31 35       	jge	$+612    	;abs 0xe18
     bb6:	2c 33       	jn	$-422    	;abs 0xa10
     bb8:	29 2c       	jc	$+84     	;abs 0xc0c
     bba:	38 30       	jn	$+114    	;abs 0xc2c
     bbc:	2c 31       	jn	$+602    	;abs 0xe16
     bbe:	36 3b       	jl	$-402    	;abs 0xa2c
     bc0:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
     bc2:	6c 3a       	jl	$-806    	;abs 0x89c
     bc4:	28 31       	jn	$+594    	;abs 0xe16
     bc6:	35 2c       	jc	$+108    	;abs 0xc32
     bc8:	33 29       	jnc	$+616    	;abs 0xe30
     bca:	2c 39       	jl	$+602    	;abs 0xe24
     bcc:	36 2c       	jc	$+110    	;abs 0xc3a
     bce:	31 36       	jge	$-924    	;abs 0x832
     bd0:	3b 72       	subc	#8,	r11	;r2 As==11
     bd2:	65 6e       	addc.b	@r14,	r5	
     bd4:	3a 28       	jnc	$+118    	;abs 0xc4a
     bd6:	31 35       	jge	$+612    	;abs 0xe3a
     bd8:	2c 33       	jn	$-422    	;abs 0xa32
     bda:	29 2c       	jc	$+84     	;abs 0xc2e
     bdc:	31 31       	jn	$+612    	;abs 0xe40
     bde:	32 2c       	jc	$+102    	;abs 0xc44
     be0:	31 36       	jge	$-924    	;abs 0x844
     be2:	3b 3b       	jl	$-392    	;abs 0xa5a
     be4:	00 70       	subc	r0,	r0	
     be6:	6f 72       	subc.b	#4,	r15	;r2 As==10
     be8:	74 5f       	add.b	@r15+,	r4	
     bea:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
     bec:	6d 70       	subc.b	@r0,	r13	
     bee:	6c 65       	addc.b	@r5,	r12	
     bf0:	5f 74 3a 54 	subc.b	21562(r4),r15	;0x543a(r4)
     bf4:	28 31       	jn	$+594    	;abs 0xe46
     bf6:	35 2c       	jc	$+108    	;abs 0xc62
     bf8:	35 29       	jnc	$+620    	;abs 0xe64
     bfa:	3d 73       	subc	#-1,	r13	;r3 As==11
     bfc:	38 69       	addc	@r9+,	r8	
     bfe:	6e 3a       	jl	$-802    	;abs 0x8dc
     c00:	28 31       	jn	$+594    	;abs 0xe52
     c02:	35 2c       	jc	$+108    	;abs 0xc6e
     c04:	33 29       	jnc	$+616    	;abs 0xe6c
     c06:	2c 30       	jn	$+90     	;abs 0xc60
     c08:	2c 31       	jn	$+602    	;abs 0xe62
     c0a:	36 3b       	jl	$-402    	;abs 0xa78
     c0c:	6f 75       	subc.b	@r5,	r15	
     c0e:	74 3a       	jl	$-790    	;abs 0x8f8
     c10:	28 31       	jn	$+594    	;abs 0xe62
     c12:	35 2c       	jc	$+108    	;abs 0xc7e
     c14:	33 29       	jnc	$+616    	;abs 0xe7c
     c16:	2c 31       	jn	$+602    	;abs 0xe70
     c18:	36 2c       	jc	$+110    	;abs 0xc86
     c1a:	31 36       	jge	$-924    	;abs 0x87e
     c1c:	3b 64       	addc	@r4+,	r11	
     c1e:	69 72       	subc.b	#4,	r9	;r2 As==10
     c20:	3a 28       	jnc	$+118    	;abs 0xc96
     c22:	31 35       	jge	$+612    	;abs 0xe86
     c24:	2c 33       	jn	$-422    	;abs 0xa7e
     c26:	29 2c       	jc	$+84     	;abs 0xc7a
     c28:	33 32       	jn	$-920    	;abs 0x890
     c2a:	2c 31       	jn	$+602    	;abs 0xe84
     c2c:	36 3b       	jl	$-402    	;abs 0xa9a
     c2e:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
     c30:	6c 3a       	jl	$-806    	;abs 0x90a
     c32:	28 31       	jn	$+594    	;abs 0xe84
     c34:	35 2c       	jc	$+108    	;abs 0xca0
     c36:	33 29       	jnc	$+616    	;abs 0xe9e
     c38:	2c 34       	jge	$+90     	;abs 0xc92
     c3a:	38 2c       	jc	$+114    	;abs 0xcac
     c3c:	31 36       	jge	$-924    	;abs 0x8a0
     c3e:	3b 3b       	jl	$-392    	;abs 0xab6
     c40:	00 63       	adc	r0		
     c42:	3a 2f       	jc	$-394    	;abs 0xab8
     c44:	6d 73       	subc.b	#2,	r13	;r3 As==10
     c46:	70 67       	addc.b	@r7+,	r0	
     c48:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     c4a:	2f 6d       	addc	@r13,	r15	
     c4c:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     c4e:	34 33       	jn	$-406    	;abs 0xab8
     c50:	30 2f       	jc	$-414    	;abs 0xab2
     c52:	69 6e       	addc.b	@r14,	r9	
     c54:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     c56:	75 64       	addc.b	@r4+,	r5	
     c58:	65 2f       	jc	$-308    	;abs 0xb24
     c5a:	6d 73       	subc.b	#2,	r13	;r3 As==10
     c5c:	70 34       	jge	$+226    	;abs 0xd3e
     c5e:	33 30       	jn	$+104    	;abs 0xcc6
     c60:	2f 75       	subc	@r5,	r15	
     c62:	73 63       	.word	0x6373;	????	Illegal as 2-op instr
     c64:	69 2e       	jc	$-812    	;abs 0x938
     c66:	68 00 63 3a 	mova	r0,	&0x83a63
     c6a:	2f 6d       	addc	@r13,	r15	
     c6c:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     c6e:	67 63       	addc.b	#2,	r7	;r3 As==10
     c70:	63 2f       	jc	$-312    	;abs 0xb38
     c72:	6d 73       	subc.b	#2,	r13	;r3 As==10
     c74:	70 34       	jge	$+226    	;abs 0xd56
     c76:	33 30       	jn	$+104    	;abs 0xcde
     c78:	2f 69       	addc	@r9,	r15	
     c7a:	6e 63       	addc.b	#2,	r14	;r3 As==10
     c7c:	6c 75       	subc.b	@r5,	r12	
     c7e:	64 65       	addc.b	@r5,	r4	
     c80:	2f 6d       	addc	@r13,	r15	
     c82:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     c84:	34 33       	jn	$-406    	;abs 0xaee
     c86:	30 2f       	jc	$-414    	;abs 0xae8
     c88:	74 69       	addc.b	@r9+,	r4	
     c8a:	6d 65       	addc.b	@r5,	r13	
     c8c:	72 61       	addc.b	@r1+,	r2	
     c8e:	2e 68       	addc	@r8,	r14	
     c90:	00 74       	subc	r4,	r0	
     c92:	61 63       	addc.b	#2,	r1	;r3 As==10
     c94:	74 6c       	addc.b	@r12+,	r4	
     c96:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     c9a:	28 31       	jn	$+594    	;abs 0xeec
     c9c:	37 2c       	jc	$+112    	;abs 0xd0c
     c9e:	31 29       	jnc	$+612    	;abs 0xf02
     ca0:	3d 28       	jnc	$+124    	;abs 0xd1c
     ca2:	31 37       	jge	$-412    	;abs 0xb06
     ca4:	2c 32       	jn	$-934    	;abs 0x8fe
     ca6:	29 3d       	jmp	$+596    	;abs 0xefa
     ca8:	73 32       	jn	$-792    	;abs 0x990
     caa:	74 61       	addc.b	@r1+,	r4	
     cac:	69 66       	addc.b	@r6,	r9	
     cae:	67 3a       	jl	$-816    	;abs 0x97e
     cb0:	28 30       	jn	$+82     	;abs 0xd02
     cb2:	2c 34       	jge	$+90     	;abs 0xd0c
     cb4:	29 2c       	jc	$+84     	;abs 0xd08
     cb6:	30 2c       	jc	$+98     	;abs 0xd18
     cb8:	31 3b       	jl	$-412    	;abs 0xb1c
     cba:	74 61       	addc.b	@r1+,	r4	
     cbc:	69 65       	addc.b	@r5,	r9	
     cbe:	3a 28       	jnc	$+118    	;abs 0xd34
     cc0:	30 2c       	jc	$+98     	;abs 0xd22
     cc2:	34 29       	jnc	$+618    	;abs 0xf2c
     cc4:	2c 31       	jn	$+602    	;abs 0xf1e
     cc6:	2c 31       	jn	$+602    	;abs 0xf20
     cc8:	3b 74       	subc	@r4+,	r11	
     cca:	61 63       	addc.b	#2,	r1	;r3 As==10
     ccc:	6c 72       	subc.b	#4,	r12	;r2 As==10
     cce:	3a 28       	jnc	$+118    	;abs 0xd44
     cd0:	30 2c       	jc	$+98     	;abs 0xd32
     cd2:	34 29       	jnc	$+618    	;abs 0xf3c
     cd4:	2c 32       	jn	$-934    	;abs 0x92e
     cd6:	2c 31       	jn	$+602    	;abs 0xf30
     cd8:	3b 64       	addc	@r4+,	r11	
     cda:	75 6d       	addc.b	@r13+,	r5	
     cdc:	6d 79       	subc.b	@r9,	r13	
     cde:	3a 28       	jnc	$+118    	;abs 0xd54
     ce0:	30 2c       	jc	$+98     	;abs 0xd42
     ce2:	34 29       	jnc	$+618    	;abs 0xf4c
     ce4:	2c 33       	jn	$-422    	;abs 0xb3e
     ce6:	2c 31       	jn	$+602    	;abs 0xf40
     ce8:	3b 74       	subc	@r4+,	r11	
     cea:	61 6d       	addc.b	@r13,	r1	
     cec:	63 3a       	jl	$-824    	;abs 0x9b4
     cee:	28 30       	jn	$+82     	;abs 0xd40
     cf0:	2c 34       	jge	$+90     	;abs 0xd4a
     cf2:	29 2c       	jc	$+84     	;abs 0xd46
     cf4:	34 2c       	jc	$+106    	;abs 0xd5e
     cf6:	32 3b       	jl	$-410    	;abs 0xb5c
     cf8:	74 61       	addc.b	@r1+,	r4	
     cfa:	69 64       	addc.b	@r4,	r9	
     cfc:	3a 28       	jnc	$+118    	;abs 0xd72
     cfe:	30 2c       	jc	$+98     	;abs 0xd60
     d00:	34 29       	jnc	$+618    	;abs 0xf6a
     d02:	2c 36       	jge	$-934    	;abs 0x95c
     d04:	2c 32       	jn	$-934    	;abs 0x95e
     d06:	3b 74       	subc	@r4+,	r11	
     d08:	61 73       	subc.b	#2,	r1	;r3 As==10
     d0a:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
     d0c:	6c 3a       	jl	$-806    	;abs 0x9e6
     d0e:	28 30       	jn	$+82     	;abs 0xd60
     d10:	2c 34       	jge	$+90     	;abs 0xd6a
     d12:	29 2c       	jc	$+84     	;abs 0xd66
     d14:	38 2c       	jc	$+114    	;abs 0xd86
     d16:	32 3b       	jl	$-410    	;abs 0xb7c
     d18:	3b 00 74 61 	mova	0x6174,	r11	;PC rel. 0x06e8e
     d1c:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     d1e:	74 6c       	addc.b	@r12+,	r4	
     d20:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     d24:	28 31       	jn	$+594    	;abs 0xf76
     d26:	37 2c       	jc	$+112    	;abs 0xd96
     d28:	33 29       	jnc	$+616    	;abs 0xf90
     d2a:	3d 28       	jnc	$+124    	;abs 0xda6
     d2c:	31 37       	jge	$-412    	;abs 0xb90
     d2e:	2c 34       	jge	$+90     	;abs 0xd88
     d30:	29 3d       	jmp	$+596    	;abs 0xf84
     d32:	73 32       	jn	$-792    	;abs 0xa1a
     d34:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     d36:	69 66       	addc.b	@r6,	r9	
     d38:	67 3a       	jl	$-816    	;abs 0xa08
     d3a:	28 30       	jn	$+82     	;abs 0xd8c
     d3c:	2c 34       	jge	$+90     	;abs 0xd96
     d3e:	29 2c       	jc	$+84     	;abs 0xd92
     d40:	30 2c       	jc	$+98     	;abs 0xda2
     d42:	31 3b       	jl	$-412    	;abs 0xba6
     d44:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
     d46:	76 3a       	jl	$-786    	;abs 0xa34
     d48:	28 30       	jn	$+82     	;abs 0xd9a
     d4a:	2c 34       	jge	$+90     	;abs 0xda4
     d4c:	29 2c       	jc	$+84     	;abs 0xda0
     d4e:	31 2c       	jc	$+100    	;abs 0xdb2
     d50:	31 3b       	jl	$-412    	;abs 0xbb4
     d52:	6f 75       	subc.b	@r5,	r15	
     d54:	74 3a       	jl	$-790    	;abs 0xa3e
     d56:	28 30       	jn	$+82     	;abs 0xda8
     d58:	2c 34       	jge	$+90     	;abs 0xdb2
     d5a:	29 2c       	jc	$+84     	;abs 0xdae
     d5c:	32 2c       	jc	$+102    	;abs 0xdc2
     d5e:	31 3b       	jl	$-412    	;abs 0xbc2
     d60:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     d62:	69 3a       	jl	$-812    	;abs 0xa36
     d64:	28 30       	jn	$+82     	;abs 0xdb6
     d66:	2c 34       	jge	$+90     	;abs 0xdc0
     d68:	29 2c       	jc	$+84     	;abs 0xdbc
     d6a:	33 2c       	jc	$+104    	;abs 0xdd2
     d6c:	31 3b       	jl	$-412    	;abs 0xbd0
     d6e:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     d70:	69 65       	addc.b	@r5,	r9	
     d72:	3a 28       	jnc	$+118    	;abs 0xde8
     d74:	30 2c       	jc	$+98     	;abs 0xdd6
     d76:	34 29       	jnc	$+618    	;abs 0xfe0
     d78:	2c 34       	jge	$+90     	;abs 0xdd2
     d7a:	2c 31       	jn	$+602    	;abs 0xfd4
     d7c:	3b 6f       	addc	@r15+,	r11	
     d7e:	75 74       	subc.b	@r4+,	r5	
     d80:	6d 6f       	addc.b	@r15,	r13	
     d82:	64 3a       	jl	$-822    	;abs 0xa4c
     d84:	28 30       	jn	$+82     	;abs 0xdd6
     d86:	2c 34       	jge	$+90     	;abs 0xde0
     d88:	29 2c       	jc	$+84     	;abs 0xddc
     d8a:	35 2c       	jc	$+108    	;abs 0xdf6
     d8c:	33 3b       	jl	$-408    	;abs 0xbf4
     d8e:	63 61       	.word	0x6163;	????	Illegal as 2-op instr
     d90:	70 3a       	jl	$-798    	;abs 0xa72
     d92:	28 30       	jn	$+82     	;abs 0xde4
     d94:	2c 34       	jge	$+90     	;abs 0xdee
     d96:	29 2c       	jc	$+84     	;abs 0xdea
     d98:	38 2c       	jc	$+114    	;abs 0xe0a
     d9a:	31 3b       	jl	$-412    	;abs 0xbfe
     d9c:	64 75       	subc.b	@r5,	r4	
     d9e:	6d 6d       	addc.b	@r13,	r13	
     da0:	79 3a       	jl	$-780    	;abs 0xa94
     da2:	28 30       	jn	$+82     	;abs 0xdf4
     da4:	2c 34       	jge	$+90     	;abs 0xdfe
     da6:	29 2c       	jc	$+84     	;abs 0xdfa
     da8:	39 2c       	jc	$+116    	;abs 0xe1c
     daa:	31 3b       	jl	$-412    	;abs 0xc0e
     dac:	73 63       	.word	0x6373;	????	Illegal as 2-op instr
     dae:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
     db0:	3a 28       	jnc	$+118    	;abs 0xe26
     db2:	30 2c       	jc	$+98     	;abs 0xe14
     db4:	34 29       	jnc	$+618    	;abs 0x101e
     db6:	2c 31       	jn	$+602    	;abs 0x1010
     db8:	30 2c       	jc	$+98     	;abs 0xe1a
     dba:	31 3b       	jl	$-412    	;abs 0xc1e
     dbc:	73 63       	.word	0x6373;	????	Illegal as 2-op instr
     dbe:	73 3a       	jl	$-792    	;abs 0xaa6
     dc0:	28 30       	jn	$+82     	;abs 0xe12
     dc2:	2c 34       	jge	$+90     	;abs 0xe1c
     dc4:	29 2c       	jc	$+84     	;abs 0xe18
     dc6:	31 31       	jn	$+612    	;abs 0x102a
     dc8:	2c 31       	jn	$+602    	;abs 0x1022
     dca:	3b 63       	addc	#-1,	r11	;r3 As==11
     dcc:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
     dce:	73 3a       	jl	$-792    	;abs 0xab6
     dd0:	28 30       	jn	$+82     	;abs 0xe22
     dd2:	2c 34       	jge	$+90     	;abs 0xe2c
     dd4:	29 2c       	jc	$+84     	;abs 0xe28
     dd6:	31 32       	jn	$-924    	;abs 0xa3a
     dd8:	2c 32       	jn	$-934    	;abs 0xa32
     dda:	3b 63       	addc	#-1,	r11	;r3 As==11
     ddc:	6d 3a       	jl	$-804    	;abs 0xab8
     dde:	28 30       	jn	$+82     	;abs 0xe30
     de0:	2c 34       	jge	$+90     	;abs 0xe3a
     de2:	29 2c       	jc	$+84     	;abs 0xe36
     de4:	31 34       	jge	$+100    	;abs 0xe48
     de6:	2c 32       	jn	$-934    	;abs 0xa40
     de8:	3b 3b       	jl	$-392    	;abs 0xc60
     dea:	00 74       	subc	r4,	r0	
     dec:	69 6d       	addc.b	@r13,	r9	
     dee:	65 72       	subc.b	#4,	r5	;r2 As==10
     df0:	61 5f       	add.b	@r15,	r1	
     df2:	74 3a       	jl	$-790    	;abs 0xadc
     df4:	54 28       	jnc	$+170    	;abs 0xe9e
     df6:	31 37       	jge	$-412    	;abs 0xc5a
     df8:	2c 35       	jge	$+602    	;abs 0x1052
     dfa:	29 3d       	jmp	$+596    	;abs 0x104e
     dfc:	73 32       	jn	$-792    	;abs 0xae4
     dfe:	34 63       	addc	#-1,	r4	;r3 As==11
     e00:	74 6c       	addc.b	@r12+,	r4	
     e02:	3a 28       	jnc	$+118    	;abs 0xe78
     e04:	31 37       	jge	$-412    	;abs 0xc68
     e06:	2c 31       	jn	$+602    	;abs 0x1060
     e08:	29 2c       	jc	$+84     	;abs 0xe5c
     e0a:	30 2c       	jc	$+98     	;abs 0xe6c
     e0c:	31 36       	jge	$-924    	;abs 0xa70
     e0e:	3b 63       	addc	#-1,	r11	;r3 As==11
     e10:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
     e12:	6c 30       	jn	$+218    	;abs 0xeec
     e14:	3a 28       	jnc	$+118    	;abs 0xe8a
     e16:	31 37       	jge	$-412    	;abs 0xc7a
     e18:	2c 33       	jn	$-422    	;abs 0xc72
     e1a:	29 2c       	jc	$+84     	;abs 0xe6e
     e1c:	31 36       	jge	$-924    	;abs 0xa80
     e1e:	2c 31       	jn	$+602    	;abs 0x1078
     e20:	36 3b       	jl	$-402    	;abs 0xc8e
     e22:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     e24:	74 6c       	addc.b	@r12+,	r4	
     e26:	31 3a       	jl	$-924    	;abs 0xa8a
     e28:	28 31       	jn	$+594    	;abs 0x107a
     e2a:	37 2c       	jc	$+112    	;abs 0xe9a
     e2c:	33 29       	jnc	$+616    	;abs 0x1094
     e2e:	2c 33       	jn	$-422    	;abs 0xc88
     e30:	32 2c       	jc	$+102    	;abs 0xe96
     e32:	31 36       	jge	$-924    	;abs 0xa96
     e34:	3b 63       	addc	#-1,	r11	;r3 As==11
     e36:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
     e38:	6c 32       	jn	$-806    	;abs 0xb12
     e3a:	3a 28       	jnc	$+118    	;abs 0xeb0
     e3c:	31 37       	jge	$-412    	;abs 0xca0
     e3e:	2c 33       	jn	$-422    	;abs 0xc98
     e40:	29 2c       	jc	$+84     	;abs 0xe94
     e42:	34 38       	jl	$+106    	;abs 0xeac
     e44:	2c 31       	jn	$+602    	;abs 0x109e
     e46:	36 3b       	jl	$-402    	;abs 0xcb4
     e48:	64 75       	subc.b	@r5,	r4	
     e4a:	6d 6d       	addc.b	@r13,	r13	
     e4c:	79 32       	jn	$-780    	;abs 0xb40
     e4e:	3a 28       	jnc	$+118    	;abs 0xec4
     e50:	31 37       	jge	$-412    	;abs 0xcb4
     e52:	2c 36       	jge	$-934    	;abs 0xaac
     e54:	29 3d       	jmp	$+596    	;abs 0x10a8
     e56:	61 72       	subc.b	#4,	r1	;r2 As==10
     e58:	28 31       	jn	$+594    	;abs 0x10aa
     e5a:	37 2c       	jc	$+112    	;abs 0xeca
     e5c:	37 29       	jnc	$+624    	;abs 0x10cc
     e5e:	3d 72       	subc	#8,	r13	;r2 As==11
     e60:	28 31       	jn	$+594    	;abs 0x10b2
     e62:	37 2c       	jc	$+112    	;abs 0xed2
     e64:	37 29       	jnc	$+624    	;abs 0x10d4
     e66:	3b 30       	jn	$+120    	;abs 0xede
     e68:	30 30       	jn	$+98     	;abs 0xeca
     e6a:	30 30       	jn	$+98     	;abs 0xecc
     e6c:	30 30       	jn	$+98     	;abs 0xece
     e6e:	30 30       	jn	$+98     	;abs 0xed0
     e70:	30 30       	jn	$+98     	;abs 0xed2
     e72:	30 30       	jn	$+98     	;abs 0xed4
     e74:	3b 30       	jn	$+120    	;abs 0xeec
     e76:	30 30       	jn	$+98     	;abs 0xed8
     e78:	30 30       	jn	$+98     	;abs 0xeda
     e7a:	30 30       	jn	$+98     	;abs 0xedc
     e7c:	31 37       	jge	$-412    	;abs 0xce0
     e7e:	37 37       	jge	$-400    	;abs 0xcee
     e80:	37 37       	jge	$-400    	;abs 0xcf0
     e82:	3b 3b       	jl	$-392    	;abs 0xcfa
     e84:	30 3b       	jl	$-414    	;abs 0xce6
     e86:	33 3b       	jl	$-408    	;abs 0xcee
     e88:	28 31       	jn	$+594    	;abs 0x10da
     e8a:	37 2c       	jc	$+112    	;abs 0xefa
     e8c:	38 29       	jnc	$+626    	;abs 0x10fe
     e8e:	3d 42       	mov	#8,	r13	;r2 As==11
     e90:	28 30       	jn	$+82     	;abs 0xee2
     e92:	2c 34       	jge	$+90     	;abs 0xeec
     e94:	29 2c       	jc	$+84     	;abs 0xee8
     e96:	36 34       	jge	$+110    	;abs 0xf04
     e98:	2c 36       	jge	$-934    	;abs 0xaf2
     e9a:	34 3b       	jl	$-406    	;abs 0xd04
     e9c:	74 61       	addc.b	@r1+,	r4	
     e9e:	72 3a       	jl	$-794    	;abs 0xb84
     ea0:	28 30       	jn	$+82     	;abs 0xef2
     ea2:	2c 34       	jge	$+90     	;abs 0xefc
     ea4:	29 2c       	jc	$+84     	;abs 0xef8
     ea6:	31 32       	jn	$-924    	;abs 0xb0a
     ea8:	38 2c       	jc	$+114    	;abs 0xf1a
     eaa:	31 36       	jge	$-924    	;abs 0xb0e
     eac:	3b 74       	subc	@r4+,	r11	
     eae:	61 63       	addc.b	#2,	r1	;r3 As==10
     eb0:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
     eb2:	30 3a       	jl	$-926    	;abs 0xb14
     eb4:	28 30       	jn	$+82     	;abs 0xf06
     eb6:	2c 34       	jge	$+90     	;abs 0xf10
     eb8:	29 2c       	jc	$+84     	;abs 0xf0c
     eba:	31 34       	jge	$+100    	;abs 0xf1e
     ebc:	34 2c       	jc	$+106    	;abs 0xf26
     ebe:	31 36       	jge	$-924    	;abs 0xb22
     ec0:	3b 74       	subc	@r4+,	r11	
     ec2:	61 63       	addc.b	#2,	r1	;r3 As==10
     ec4:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
     ec6:	31 3a       	jl	$-924    	;abs 0xb2a
     ec8:	28 30       	jn	$+82     	;abs 0xf1a
     eca:	2c 34       	jge	$+90     	;abs 0xf24
     ecc:	29 2c       	jc	$+84     	;abs 0xf20
     ece:	31 36       	jge	$-924    	;abs 0xb32
     ed0:	30 2c       	jc	$+98     	;abs 0xf32
     ed2:	31 36       	jge	$-924    	;abs 0xb36
     ed4:	3b 74       	subc	@r4+,	r11	
     ed6:	61 63       	addc.b	#2,	r1	;r3 As==10
     ed8:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
     eda:	32 3a       	jl	$-922    	;abs 0xb40
     edc:	28 30       	jn	$+82     	;abs 0xf2e
     ede:	2c 34       	jge	$+90     	;abs 0xf38
     ee0:	29 2c       	jc	$+84     	;abs 0xf34
     ee2:	31 37       	jge	$-412    	;abs 0xd46
     ee4:	36 2c       	jc	$+110    	;abs 0xf52
     ee6:	31 36       	jge	$-924    	;abs 0xb4a
     ee8:	3b 3b       	jl	$-392    	;abs 0xd60
     eea:	00 63       	adc	r0		
     eec:	3a 2f       	jc	$-394    	;abs 0xd62
     eee:	6d 73       	subc.b	#2,	r13	;r3 As==10
     ef0:	70 67       	addc.b	@r7+,	r0	
     ef2:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     ef4:	2f 6d       	addc	@r13,	r15	
     ef6:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     ef8:	34 33       	jn	$-406    	;abs 0xd62
     efa:	30 2f       	jc	$-414    	;abs 0xd5c
     efc:	69 6e       	addc.b	@r14,	r9	
     efe:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     f00:	75 64       	addc.b	@r4+,	r5	
     f02:	65 2f       	jc	$-308    	;abs 0xdce
     f04:	6d 73       	subc.b	#2,	r13	;r3 As==10
     f06:	70 34       	jge	$+226    	;abs 0xfe8
     f08:	33 30       	jn	$+104    	;abs 0xf70
     f0a:	2f 74       	subc	@r4,	r15	
     f0c:	69 6d       	addc.b	@r13,	r9	
     f0e:	65 72       	subc.b	#4,	r5	;r2 As==10
     f10:	62 2e       	jc	$-826    	;abs 0xbd6
     f12:	68 00 74 62 	mova	r0,	&0x86274
     f16:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
     f18:	6c 5f       	add.b	@r15,	r12	
     f1a:	74 3a       	jl	$-790    	;abs 0xc04
     f1c:	74 28       	jnc	$+234    	;abs 0x1006
     f1e:	31 38       	jl	$+100    	;abs 0xf82
     f20:	2c 31       	jn	$+602    	;abs 0x117a
     f22:	29 3d       	jmp	$+596    	;abs 0x1176
     f24:	28 31       	jn	$+594    	;abs 0x1176
     f26:	38 2c       	jc	$+114    	;abs 0xf98
     f28:	32 29       	jnc	$+614    	;abs 0x118e
     f2a:	3d 73       	subc	#-1,	r13	;r3 As==11
     f2c:	32 74       	subc	@r4+,	r2	
     f2e:	62 69       	addc.b	@r9,	r2	
     f30:	66 67       	addc.b	@r7,	r6	
     f32:	3a 28       	jnc	$+118    	;abs 0xfa8
     f34:	30 2c       	jc	$+98     	;abs 0xf96
     f36:	34 29       	jnc	$+618    	;abs 0x11a0
     f38:	2c 30       	jn	$+90     	;abs 0xf92
     f3a:	2c 31       	jn	$+602    	;abs 0x1194
     f3c:	3b 74       	subc	@r4+,	r11	
     f3e:	62 69       	addc.b	@r9,	r2	
     f40:	65 3a       	jl	$-820    	;abs 0xc0c
     f42:	28 30       	jn	$+82     	;abs 0xf94
     f44:	2c 34       	jge	$+90     	;abs 0xf9e
     f46:	29 2c       	jc	$+84     	;abs 0xf9a
     f48:	31 2c       	jc	$+100    	;abs 0xfac
     f4a:	31 3b       	jl	$-412    	;abs 0xdae
     f4c:	74 62       	addc.b	#8,	r4	;r2 As==11
     f4e:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     f50:	72 3a       	jl	$-794    	;abs 0xc36
     f52:	28 30       	jn	$+82     	;abs 0xfa4
     f54:	2c 34       	jge	$+90     	;abs 0xfae
     f56:	29 2c       	jc	$+84     	;abs 0xfaa
     f58:	32 2c       	jc	$+102    	;abs 0xfbe
     f5a:	31 3b       	jl	$-412    	;abs 0xdbe
     f5c:	64 75       	subc.b	@r5,	r4	
     f5e:	6d 6d       	addc.b	@r13,	r13	
     f60:	79 31       	jn	$+756    	;abs 0x1254
     f62:	3a 28       	jnc	$+118    	;abs 0xfd8
     f64:	30 2c       	jc	$+98     	;abs 0xfc6
     f66:	34 29       	jnc	$+618    	;abs 0x11d0
     f68:	2c 33       	jn	$-422    	;abs 0xdc2
     f6a:	2c 31       	jn	$+602    	;abs 0x11c4
     f6c:	3b 74       	subc	@r4+,	r11	
     f6e:	62 6d       	addc.b	@r13,	r2	
     f70:	63 3a       	jl	$-824    	;abs 0xc38
     f72:	28 30       	jn	$+82     	;abs 0xfc4
     f74:	2c 34       	jge	$+90     	;abs 0xfce
     f76:	29 2c       	jc	$+84     	;abs 0xfca
     f78:	34 2c       	jc	$+106    	;abs 0xfe2
     f7a:	32 3b       	jl	$-410    	;abs 0xde0
     f7c:	74 62       	addc.b	#8,	r4	;r2 As==11
     f7e:	69 64       	addc.b	@r4,	r9	
     f80:	3a 28       	jnc	$+118    	;abs 0xff6
     f82:	30 2c       	jc	$+98     	;abs 0xfe4
     f84:	34 29       	jnc	$+618    	;abs 0x11ee
     f86:	2c 36       	jge	$-934    	;abs 0xbe0
     f88:	2c 32       	jn	$-934    	;abs 0xbe2
     f8a:	3b 74       	subc	@r4+,	r11	
     f8c:	62 73       	subc.b	#2,	r2	;r3 As==10
     f8e:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
     f90:	6c 3a       	jl	$-806    	;abs 0xc6a
     f92:	28 30       	jn	$+82     	;abs 0xfe4
     f94:	2c 34       	jge	$+90     	;abs 0xfee
     f96:	29 2c       	jc	$+84     	;abs 0xfea
     f98:	38 2c       	jc	$+114    	;abs 0x100a
     f9a:	32 3b       	jl	$-410    	;abs 0xe00
     f9c:	64 75       	subc.b	@r5,	r4	
     f9e:	6d 6d       	addc.b	@r13,	r13	
     fa0:	79 32       	jn	$-780    	;abs 0xc94
     fa2:	3a 28       	jnc	$+118    	;abs 0x1018
     fa4:	30 2c       	jc	$+98     	;abs 0x1006
     fa6:	34 29       	jnc	$+618    	;abs 0x1210
     fa8:	2c 31       	jn	$+602    	;abs 0x1202
     faa:	30 2c       	jc	$+98     	;abs 0x100c
     fac:	31 3b       	jl	$-412    	;abs 0xe10
     fae:	74 62       	addc.b	#8,	r4	;r2 As==11
     fb0:	63 6e       	.word	0x6e63;	????	Illegal as 2-op instr
     fb2:	74 6c       	addc.b	@r12+,	r4	
     fb4:	3a 28       	jnc	$+118    	;abs 0x102a
     fb6:	30 2c       	jc	$+98     	;abs 0x1018
     fb8:	34 29       	jnc	$+618    	;abs 0x1222
     fba:	2c 31       	jn	$+602    	;abs 0x1214
     fbc:	31 2c       	jc	$+100    	;abs 0x1020
     fbe:	32 3b       	jl	$-410    	;abs 0xe24
     fc0:	74 62       	addc.b	#8,	r4	;r2 As==11
     fc2:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     fc4:	67 72       	subc.b	#4,	r7	;r2 As==10
     fc6:	70 3a       	jl	$-798    	;abs 0xca8
     fc8:	28 30       	jn	$+82     	;abs 0x101a
     fca:	2c 34       	jge	$+90     	;abs 0x1024
     fcc:	29 2c       	jc	$+84     	;abs 0x1020
     fce:	31 33       	jn	$-412    	;abs 0xe32
     fd0:	2c 32       	jn	$-934    	;abs 0xc2a
     fd2:	3b 3b       	jl	$-392    	;abs 0xe4a
     fd4:	00 74       	subc	r4,	r0	
     fd6:	62 63       	addc.b	#2,	r2	;r3 As==10
     fd8:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
     fda:	6c 5f       	add.b	@r15,	r12	
     fdc:	74 3a       	jl	$-790    	;abs 0xcc6
     fde:	74 28       	jnc	$+234    	;abs 0x10c8
     fe0:	31 38       	jl	$+100    	;abs 0x1044
     fe2:	2c 33       	jn	$-422    	;abs 0xe3c
     fe4:	29 3d       	jmp	$+596    	;abs 0x1238
     fe6:	28 31       	jn	$+594    	;abs 0x1238
     fe8:	38 2c       	jc	$+114    	;abs 0x105a
     fea:	34 29       	jnc	$+618    	;abs 0x1254
     fec:	3d 73       	subc	#-1,	r13	;r3 As==11
     fee:	32 63       	addc	#-1,	r2	;r3 As==11
     ff0:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
     ff2:	66 67       	addc.b	@r7,	r6	
     ff4:	3a 28       	jnc	$+118    	;abs 0x106a
     ff6:	30 2c       	jc	$+98     	;abs 0x1058
     ff8:	34 29       	jnc	$+618    	;abs 0x1262
     ffa:	2c 30       	jn	$+90     	;abs 0x1054
     ffc:	2c 31       	jn	$+602    	;abs 0x1256
     ffe:	3b 63       	addc	#-1,	r11	;r3 As==11
    1000:	6f 76       	subc.b	@r6,	r15	
    1002:	3a 28       	jnc	$+118    	;abs 0x1078
    1004:	30 2c       	jc	$+98     	;abs 0x1066
    1006:	34 29       	jnc	$+618    	;abs 0x1270
    1008:	2c 31       	jn	$+602    	;abs 0x1262
    100a:	2c 31       	jn	$+602    	;abs 0x1264
    100c:	3b 6f       	addc	@r15+,	r11	
    100e:	75 74       	subc.b	@r4+,	r5	
    1010:	3a 28       	jnc	$+118    	;abs 0x1086
    1012:	30 2c       	jc	$+98     	;abs 0x1074
    1014:	34 29       	jnc	$+618    	;abs 0x127e
    1016:	2c 32       	jn	$-934    	;abs 0xc70
    1018:	2c 31       	jn	$+602    	;abs 0x1272
    101a:	3b 63       	addc	#-1,	r11	;r3 As==11
    101c:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
    101e:	3a 28       	jnc	$+118    	;abs 0x1094
    1020:	30 2c       	jc	$+98     	;abs 0x1082
    1022:	34 29       	jnc	$+618    	;abs 0x128c
    1024:	2c 33       	jn	$-422    	;abs 0xe7e
    1026:	2c 31       	jn	$+602    	;abs 0x1280
    1028:	3b 63       	addc	#-1,	r11	;r3 As==11
    102a:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
    102c:	65 3a       	jl	$-820    	;abs 0xcf8
    102e:	28 30       	jn	$+82     	;abs 0x1080
    1030:	2c 34       	jge	$+90     	;abs 0x108a
    1032:	29 2c       	jc	$+84     	;abs 0x1086
    1034:	34 2c       	jc	$+106    	;abs 0x109e
    1036:	31 3b       	jl	$-412    	;abs 0xe9a
    1038:	6f 75       	subc.b	@r5,	r15	
    103a:	74 6d       	addc.b	@r13+,	r4	
    103c:	6f 64       	addc.b	@r4,	r15	
    103e:	3a 28       	jnc	$+118    	;abs 0x10b4
    1040:	30 2c       	jc	$+98     	;abs 0x10a2
    1042:	34 29       	jnc	$+618    	;abs 0x12ac
    1044:	2c 35       	jge	$+602    	;abs 0x129e
    1046:	2c 33       	jn	$-422    	;abs 0xea0
    1048:	3b 63       	addc	#-1,	r11	;r3 As==11
    104a:	61 70       	subc.b	@r0,	r1	
    104c:	3a 28       	jnc	$+118    	;abs 0x10c2
    104e:	30 2c       	jc	$+98     	;abs 0x10b0
    1050:	34 29       	jnc	$+618    	;abs 0x12ba
    1052:	2c 38       	jl	$+90     	;abs 0x10ac
    1054:	2c 31       	jn	$+602    	;abs 0x12ae
    1056:	3b 63       	addc	#-1,	r11	;r3 As==11
    1058:	6c 6c       	addc.b	@r12,	r12	
    105a:	64 3a       	jl	$-822    	;abs 0xd24
    105c:	28 30       	jn	$+82     	;abs 0x10ae
    105e:	2c 34       	jge	$+90     	;abs 0x10b8
    1060:	29 2c       	jc	$+84     	;abs 0x10b4
    1062:	39 2c       	jc	$+116    	;abs 0x10d6
    1064:	32 3b       	jl	$-410    	;abs 0xeca
    1066:	73 63       	.word	0x6373;	????	Illegal as 2-op instr
    1068:	73 3a       	jl	$-792    	;abs 0xd50
    106a:	28 30       	jn	$+82     	;abs 0x10bc
    106c:	2c 34       	jge	$+90     	;abs 0x10c6
    106e:	29 2c       	jc	$+84     	;abs 0x10c2
    1070:	31 31       	jn	$+612    	;abs 0x12d4
    1072:	2c 31       	jn	$+602    	;abs 0x12cc
    1074:	3b 63       	addc	#-1,	r11	;r3 As==11
    1076:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
    1078:	73 3a       	jl	$-792    	;abs 0xd60
    107a:	28 30       	jn	$+82     	;abs 0x10cc
    107c:	2c 34       	jge	$+90     	;abs 0x10d6
    107e:	29 2c       	jc	$+84     	;abs 0x10d2
    1080:	31 32       	jn	$-924    	;abs 0xce4
    1082:	2c 32       	jn	$-934    	;abs 0xcdc
    1084:	3b 63       	addc	#-1,	r11	;r3 As==11
    1086:	6d 3a       	jl	$-804    	;abs 0xd62
    1088:	28 30       	jn	$+82     	;abs 0x10da
    108a:	2c 34       	jge	$+90     	;abs 0x10e4
    108c:	29 2c       	jc	$+84     	;abs 0x10e0
    108e:	31 34       	jge	$+100    	;abs 0x10f2
    1090:	2c 32       	jn	$-934    	;abs 0xcea
    1092:	3b 3b       	jl	$-392    	;abs 0xf0a
    1094:	00 74       	subc	r4,	r0	
    1096:	69 6d       	addc.b	@r13,	r9	
    1098:	65 72       	subc.b	#4,	r5	;r2 As==10
    109a:	62 5f       	add.b	@r15,	r2	
    109c:	74 3a       	jl	$-790    	;abs 0xd86
    109e:	54 28       	jnc	$+170    	;abs 0x1148
    10a0:	31 38       	jl	$+100    	;abs 0x1104
    10a2:	2c 35       	jge	$+602    	;abs 0x12fc
    10a4:	29 3d       	jmp	$+596    	;abs 0x12f8
    10a6:	73 33       	jn	$-280    	;abs 0xf8e
    10a8:	32 63       	addc	#-1,	r2	;r3 As==11
    10aa:	74 6c       	addc.b	@r12+,	r4	
    10ac:	3a 28       	jnc	$+118    	;abs 0x1122
    10ae:	31 38       	jl	$+100    	;abs 0x1112
    10b0:	2c 31       	jn	$+602    	;abs 0x130a
    10b2:	29 2c       	jc	$+84     	;abs 0x1106
    10b4:	30 2c       	jc	$+98     	;abs 0x1116
    10b6:	31 36       	jge	$-924    	;abs 0xd1a
    10b8:	3b 63       	addc	#-1,	r11	;r3 As==11
    10ba:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    10bc:	6c 30       	jn	$+218    	;abs 0x1196
    10be:	3a 28       	jnc	$+118    	;abs 0x1134
    10c0:	31 38       	jl	$+100    	;abs 0x1124
    10c2:	2c 33       	jn	$-422    	;abs 0xf1c
    10c4:	29 2c       	jc	$+84     	;abs 0x1118
    10c6:	31 36       	jge	$-924    	;abs 0xd2a
    10c8:	2c 31       	jn	$+602    	;abs 0x1322
    10ca:	36 3b       	jl	$-402    	;abs 0xf38
    10cc:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    10ce:	74 6c       	addc.b	@r12+,	r4	
    10d0:	31 3a       	jl	$-924    	;abs 0xd34
    10d2:	28 31       	jn	$+594    	;abs 0x1324
    10d4:	38 2c       	jc	$+114    	;abs 0x1146
    10d6:	33 29       	jnc	$+616    	;abs 0x133e
    10d8:	2c 33       	jn	$-422    	;abs 0xf32
    10da:	32 2c       	jc	$+102    	;abs 0x1140
    10dc:	31 36       	jge	$-924    	;abs 0xd40
    10de:	3b 63       	addc	#-1,	r11	;r3 As==11
    10e0:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    10e2:	6c 32       	jn	$-806    	;abs 0xdbc
    10e4:	3a 28       	jnc	$+118    	;abs 0x115a
    10e6:	31 38       	jl	$+100    	;abs 0x114a
    10e8:	2c 33       	jn	$-422    	;abs 0xf42
    10ea:	29 2c       	jc	$+84     	;abs 0x113e
    10ec:	34 38       	jl	$+106    	;abs 0x1156
    10ee:	2c 31       	jn	$+602    	;abs 0x1348
    10f0:	36 3b       	jl	$-402    	;abs 0xf5e
    10f2:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    10f4:	74 6c       	addc.b	@r12+,	r4	
    10f6:	33 3a       	jl	$-920    	;abs 0xd5e
    10f8:	28 31       	jn	$+594    	;abs 0x134a
    10fa:	38 2c       	jc	$+114    	;abs 0x116c
    10fc:	33 29       	jnc	$+616    	;abs 0x1364
    10fe:	2c 36       	jge	$-934    	;abs 0xd58
    1100:	34 2c       	jc	$+106    	;abs 0x116a
    1102:	31 36       	jge	$-924    	;abs 0xd66
    1104:	3b 63       	addc	#-1,	r11	;r3 As==11
    1106:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    1108:	6c 34       	jge	$+218    	;abs 0x11e2
    110a:	3a 28       	jnc	$+118    	;abs 0x1180
    110c:	31 38       	jl	$+100    	;abs 0x1170
    110e:	2c 33       	jn	$-422    	;abs 0xf68
    1110:	29 2c       	jc	$+84     	;abs 0x1164
    1112:	38 30       	jn	$+114    	;abs 0x1184
    1114:	2c 31       	jn	$+602    	;abs 0x136e
    1116:	36 3b       	jl	$-402    	;abs 0xf84
    1118:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    111a:	74 6c       	addc.b	@r12+,	r4	
    111c:	35 3a       	jl	$-916    	;abs 0xd88
    111e:	28 31       	jn	$+594    	;abs 0x1370
    1120:	38 2c       	jc	$+114    	;abs 0x1192
    1122:	33 29       	jnc	$+616    	;abs 0x138a
    1124:	2c 39       	jl	$+602    	;abs 0x137e
    1126:	36 2c       	jc	$+110    	;abs 0x1194
    1128:	31 36       	jge	$-924    	;abs 0xd8c
    112a:	3b 63       	addc	#-1,	r11	;r3 As==11
    112c:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    112e:	6c 36       	jge	$-806    	;abs 0xe08
    1130:	3a 28       	jnc	$+118    	;abs 0x11a6
    1132:	31 38       	jl	$+100    	;abs 0x1196
    1134:	2c 33       	jn	$-422    	;abs 0xf8e
    1136:	29 2c       	jc	$+84     	;abs 0x118a
    1138:	31 31       	jn	$+612    	;abs 0x139c
    113a:	32 2c       	jc	$+102    	;abs 0x11a0
    113c:	31 36       	jge	$-924    	;abs 0xda0
    113e:	3b 74       	subc	@r4+,	r11	
    1140:	62 72       	subc.b	#4,	r2	;r2 As==10
    1142:	3a 28       	jnc	$+118    	;abs 0x11b8
    1144:	30 2c       	jc	$+98     	;abs 0x11a6
    1146:	34 29       	jnc	$+618    	;abs 0x13b0
    1148:	2c 31       	jn	$+602    	;abs 0x13a2
    114a:	32 38       	jl	$+102    	;abs 0x11b0
    114c:	2c 31       	jn	$+602    	;abs 0x13a6
    114e:	36 3b       	jl	$-402    	;abs 0xfbc
    1150:	74 62       	addc.b	#8,	r4	;r2 As==11
    1152:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    1154:	72 30       	jn	$+230    	;abs 0x123a
    1156:	3a 28       	jnc	$+118    	;abs 0x11cc
    1158:	30 2c       	jc	$+98     	;abs 0x11ba
    115a:	34 29       	jnc	$+618    	;abs 0x13c4
    115c:	2c 31       	jn	$+602    	;abs 0x13b6
    115e:	34 34       	jge	$+106    	;abs 0x11c8
    1160:	2c 31       	jn	$+602    	;abs 0x13ba
    1162:	36 3b       	jl	$-402    	;abs 0xfd0
    1164:	74 62       	addc.b	#8,	r4	;r2 As==11
    1166:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    1168:	72 31       	jn	$+742    	;abs 0x144e
    116a:	3a 28       	jnc	$+118    	;abs 0x11e0
    116c:	30 2c       	jc	$+98     	;abs 0x11ce
    116e:	34 29       	jnc	$+618    	;abs 0x13d8
    1170:	2c 31       	jn	$+602    	;abs 0x13ca
    1172:	36 30       	jn	$+110    	;abs 0x11e0
    1174:	2c 31       	jn	$+602    	;abs 0x13ce
    1176:	36 3b       	jl	$-402    	;abs 0xfe4
    1178:	74 62       	addc.b	#8,	r4	;r2 As==11
    117a:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    117c:	72 32       	jn	$-794    	;abs 0xe62
    117e:	3a 28       	jnc	$+118    	;abs 0x11f4
    1180:	30 2c       	jc	$+98     	;abs 0x11e2
    1182:	34 29       	jnc	$+618    	;abs 0x13ec
    1184:	2c 31       	jn	$+602    	;abs 0x13de
    1186:	37 36       	jge	$-912    	;abs 0xdf6
    1188:	2c 31       	jn	$+602    	;abs 0x13e2
    118a:	36 3b       	jl	$-402    	;abs 0xff8
    118c:	74 62       	addc.b	#8,	r4	;r2 As==11
    118e:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    1190:	72 33       	jn	$-282    	;abs 0x1076
    1192:	3a 28       	jnc	$+118    	;abs 0x1208
    1194:	30 2c       	jc	$+98     	;abs 0x11f6
    1196:	34 29       	jnc	$+618    	;abs 0x1400
    1198:	2c 31       	jn	$+602    	;abs 0x13f2
    119a:	39 32       	jn	$-908    	;abs 0xe0e
    119c:	2c 31       	jn	$+602    	;abs 0x13f6
    119e:	36 3b       	jl	$-402    	;abs 0x100c
    11a0:	74 62       	addc.b	#8,	r4	;r2 As==11
    11a2:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    11a4:	72 34       	jge	$+230    	;abs 0x128a
    11a6:	3a 28       	jnc	$+118    	;abs 0x121c
    11a8:	30 2c       	jc	$+98     	;abs 0x120a
    11aa:	34 29       	jnc	$+618    	;abs 0x1414
    11ac:	2c 32       	jn	$-934    	;abs 0xe06
    11ae:	30 38       	jl	$+98     	;abs 0x1210
    11b0:	2c 31       	jn	$+602    	;abs 0x140a
    11b2:	36 3b       	jl	$-402    	;abs 0x1020
    11b4:	74 62       	addc.b	#8,	r4	;r2 As==11
    11b6:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    11b8:	72 35       	jge	$+742    	;abs 0x149e
    11ba:	3a 28       	jnc	$+118    	;abs 0x1230
    11bc:	30 2c       	jc	$+98     	;abs 0x121e
    11be:	34 29       	jnc	$+618    	;abs 0x1428
    11c0:	2c 32       	jn	$-934    	;abs 0xe1a
    11c2:	32 34       	jge	$+102    	;abs 0x1228
    11c4:	2c 31       	jn	$+602    	;abs 0x141e
    11c6:	36 3b       	jl	$-402    	;abs 0x1034
    11c8:	74 62       	addc.b	#8,	r4	;r2 As==11
    11ca:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    11cc:	72 36       	jge	$-794    	;abs 0xeb2
    11ce:	3a 28       	jnc	$+118    	;abs 0x1244
    11d0:	30 2c       	jc	$+98     	;abs 0x1232
    11d2:	34 29       	jnc	$+618    	;abs 0x143c
    11d4:	2c 32       	jn	$-934    	;abs 0xe2e
    11d6:	34 30       	jn	$+106    	;abs 0x1240
    11d8:	2c 31       	jn	$+602    	;abs 0x1432
    11da:	36 3b       	jl	$-402    	;abs 0x1048
    11dc:	3b 00 63 3a 	mova	0x3a63,	r11	;PC rel. 0x04c41
    11e0:	2f 6d       	addc	@r13,	r15	
    11e2:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    11e4:	67 63       	addc.b	#2,	r7	;r3 As==10
    11e6:	63 2f       	jc	$-312    	;abs 0x10ae
    11e8:	6d 73       	subc.b	#2,	r13	;r3 As==10
    11ea:	70 34       	jge	$+226    	;abs 0x12cc
    11ec:	33 30       	jn	$+104    	;abs 0x1254
    11ee:	2f 69       	addc	@r9,	r15	
    11f0:	6e 63       	addc.b	#2,	r14	;r3 As==10
    11f2:	6c 75       	subc.b	@r5,	r12	
    11f4:	64 65       	addc.b	@r5,	r4	
    11f6:	2f 6d       	addc	@r13,	r15	
    11f8:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    11fa:	34 33       	jn	$-406    	;abs 0x1064
    11fc:	30 2f       	jc	$-414    	;abs 0x105e
    11fe:	62 61       	addc.b	@r1,	r2	
    1200:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
    1202:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    1204:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    1206:	6f 63       	addc.b	#2,	r15	;r3 As==10
    1208:	6b 2e       	jc	$-808    	;abs 0xee0
    120a:	68 00 63 3a 	mova	r0,	&0x83a63
    120e:	2f 6d       	addc	@r13,	r15	
    1210:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1212:	67 63       	addc.b	#2,	r7	;r3 As==10
    1214:	63 2f       	jc	$-312    	;abs 0x10dc
    1216:	6d 73       	subc.b	#2,	r13	;r3 As==10
    1218:	70 34       	jge	$+226    	;abs 0x12fa
    121a:	33 30       	jn	$+104    	;abs 0x1282
    121c:	2f 69       	addc	@r9,	r15	
    121e:	6e 63       	addc.b	#2,	r14	;r3 As==10
    1220:	6c 75       	subc.b	@r5,	r12	
    1222:	64 65       	addc.b	@r5,	r4	
    1224:	2f 6d       	addc	@r13,	r15	
    1226:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1228:	34 33       	jn	$-406    	;abs 0x1092
    122a:	30 2f       	jc	$-414    	;abs 0x108c
    122c:	66 6c       	addc.b	@r12,	r6	
    122e:	61 73       	subc.b	#2,	r1	;r3 As==10
    1230:	68 2e       	jc	$-814    	;abs 0xf02
    1232:	68 00 63 3a 	mova	r0,	&0x83a63
    1236:	2f 6d       	addc	@r13,	r15	
    1238:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    123a:	67 63       	addc.b	#2,	r7	;r3 As==10
    123c:	63 2f       	jc	$-312    	;abs 0x1104
    123e:	6d 73       	subc.b	#2,	r13	;r3 As==10
    1240:	70 34       	jge	$+226    	;abs 0x1322
    1242:	33 30       	jn	$+104    	;abs 0x12aa
    1244:	2f 69       	addc	@r9,	r15	
    1246:	6e 63       	addc.b	#2,	r14	;r3 As==10
    1248:	6c 75       	subc.b	@r5,	r12	
    124a:	64 65       	addc.b	@r5,	r4	
    124c:	2f 6d       	addc	@r13,	r15	
    124e:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1250:	34 33       	jn	$-406    	;abs 0x10ba
    1252:	30 2f       	jc	$-414    	;abs 0x10b4
    1254:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    1256:	6d 70       	subc.b	@r0,	r13	
    1258:	61 2e       	jc	$-828    	;abs 0xf1c
    125a:	68 00 63 3a 	mova	r0,	&0x83a63
    125e:	2f 6d       	addc	@r13,	r15	
    1260:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1262:	67 63       	addc.b	#2,	r7	;r3 As==10
    1264:	63 2f       	jc	$-312    	;abs 0x112c
    1266:	6d 73       	subc.b	#2,	r13	;r3 As==10
    1268:	70 34       	jge	$+226    	;abs 0x134a
    126a:	33 30       	jn	$+104    	;abs 0x12d2
    126c:	2f 69       	addc	@r9,	r15	
    126e:	6e 63       	addc.b	#2,	r14	;r3 As==10
    1270:	6c 75       	subc.b	@r5,	r12	
    1272:	64 65       	addc.b	@r5,	r4	
    1274:	2f 6d       	addc	@r13,	r15	
    1276:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1278:	34 33       	jn	$-406    	;abs 0x10e2
    127a:	30 2f       	jc	$-414    	;abs 0x10dc
    127c:	61 64       	addc.b	@r4,	r1	
    127e:	63 31       	jn	$+712    	;abs 0x1546
    1280:	32 2e       	jc	$-922    	;abs 0xee6
    1282:	68 00 61 64 	mova	r0,	&0x86461
    1286:	63 31       	jn	$+712    	;abs 0x154e
    1288:	32 63       	addc	#-1,	r2	;r3 As==11
    128a:	74 6c       	addc.b	@r12+,	r4	
    128c:	30 5f       	add	@r15+,	r0	
    128e:	74 3a       	jl	$-790    	;abs 0xf78
    1290:	74 28       	jnc	$+234    	;abs 0x137a
    1292:	32 32       	jn	$-922    	;abs 0xef8
    1294:	2c 31       	jn	$+602    	;abs 0x14ee
    1296:	29 3d       	jmp	$+596    	;abs 0x14ea
    1298:	28 32       	jn	$-942    	;abs 0xeea
    129a:	32 2c       	jc	$+102    	;abs 0x1300
    129c:	32 29       	jnc	$+614    	;abs 0x1502
    129e:	3d 73       	subc	#-1,	r13	;r3 As==11
    12a0:	32 61       	addc	@r1+,	r2	
    12a2:	64 63       	addc.b	#2,	r4	;r3 As==10
    12a4:	31 32       	jn	$-924    	;abs 0xf08
    12a6:	73 63       	.word	0x6373;	????	Illegal as 2-op instr
    12a8:	3a 28       	jnc	$+118    	;abs 0x131e
    12aa:	30 2c       	jc	$+98     	;abs 0x130c
    12ac:	34 29       	jnc	$+618    	;abs 0x1516
    12ae:	2c 30       	jn	$+90     	;abs 0x1308
    12b0:	2c 31       	jn	$+602    	;abs 0x150a
    12b2:	3b 65       	addc	@r5+,	r11	
    12b4:	6e 63       	addc.b	#2,	r14	;r3 As==10
    12b6:	3a 28       	jnc	$+118    	;abs 0x132c
    12b8:	30 2c       	jc	$+98     	;abs 0x131a
    12ba:	34 29       	jnc	$+618    	;abs 0x1524
    12bc:	2c 31       	jn	$+602    	;abs 0x1516
    12be:	2c 31       	jn	$+602    	;abs 0x1518
    12c0:	3b 61       	addc	@r1+,	r11	
    12c2:	64 63       	addc.b	#2,	r4	;r3 As==10
    12c4:	31 32       	jn	$-924    	;abs 0xf28
    12c6:	74 6f       	addc.b	@r15+,	r4	
    12c8:	76 69       	addc.b	@r9+,	r6	
    12ca:	65 3a       	jl	$-820    	;abs 0xf96
    12cc:	28 30       	jn	$+82     	;abs 0x131e
    12ce:	2c 34       	jge	$+90     	;abs 0x1328
    12d0:	29 2c       	jc	$+84     	;abs 0x1324
    12d2:	32 2c       	jc	$+102    	;abs 0x1338
    12d4:	31 3b       	jl	$-412    	;abs 0x1138
    12d6:	61 64       	addc.b	@r4,	r1	
    12d8:	63 31       	jn	$+712    	;abs 0x15a0
    12da:	32 6f       	addc	@r15+,	r2	
    12dc:	76 69       	addc.b	@r9+,	r6	
    12de:	65 3a       	jl	$-820    	;abs 0xfaa
    12e0:	28 30       	jn	$+82     	;abs 0x1332
    12e2:	2c 34       	jge	$+90     	;abs 0x133c
    12e4:	29 2c       	jc	$+84     	;abs 0x1338
    12e6:	33 2c       	jc	$+104    	;abs 0x134e
    12e8:	31 3b       	jl	$-412    	;abs 0x114c
    12ea:	61 64       	addc.b	@r4,	r1	
    12ec:	63 31       	jn	$+712    	;abs 0x15b4
    12ee:	32 6f       	addc	@r15+,	r2	
    12f0:	6e 3a       	jl	$-802    	;abs 0xfce
    12f2:	28 30       	jn	$+82     	;abs 0x1344
    12f4:	2c 34       	jge	$+90     	;abs 0x134e
    12f6:	29 2c       	jc	$+84     	;abs 0x134a
    12f8:	34 2c       	jc	$+106    	;abs 0x1362
    12fa:	31 3b       	jl	$-412    	;abs 0x115e
    12fc:	72 65       	addc.b	@r5+,	r2	
    12fe:	66 6f       	addc.b	@r15,	r6	
    1300:	6e 3a       	jl	$-802    	;abs 0xfde
    1302:	28 30       	jn	$+82     	;abs 0x1354
    1304:	2c 34       	jge	$+90     	;abs 0x135e
    1306:	29 2c       	jc	$+84     	;abs 0x135a
    1308:	35 2c       	jc	$+108    	;abs 0x1374
    130a:	31 3b       	jl	$-412    	;abs 0x116e
    130c:	72 32       	jn	$-794    	;abs 0xff2
    130e:	5f 35       	jge	$+704    	;abs 0x15ce
    1310:	76 3a       	jl	$-786    	;abs 0xffe
    1312:	28 30       	jn	$+82     	;abs 0x1364
    1314:	2c 34       	jge	$+90     	;abs 0x136e
    1316:	29 2c       	jc	$+84     	;abs 0x136a
    1318:	36 2c       	jc	$+110    	;abs 0x1386
    131a:	31 3b       	jl	$-412    	;abs 0x117e
    131c:	6d 73       	subc.b	#2,	r13	;r3 As==10
    131e:	63 3a       	jl	$-824    	;abs 0xfe6
    1320:	28 30       	jn	$+82     	;abs 0x1372
    1322:	2c 34       	jge	$+90     	;abs 0x137c
    1324:	29 2c       	jc	$+84     	;abs 0x1378
    1326:	37 2c       	jc	$+112    	;abs 0x1396
    1328:	31 3b       	jl	$-412    	;abs 0x118c
    132a:	73 68       	.word	0x6873;	????	Illegal as 2-op instr
    132c:	74 30       	jn	$+234    	;abs 0x1416
    132e:	3a 28       	jnc	$+118    	;abs 0x13a4
    1330:	30 2c       	jc	$+98     	;abs 0x1392
    1332:	34 29       	jnc	$+618    	;abs 0x159c
    1334:	2c 38       	jl	$+90     	;abs 0x138e
    1336:	2c 34       	jge	$+90     	;abs 0x1390
    1338:	3b 73       	subc	#-1,	r11	;r3 As==11
    133a:	68 74       	subc.b	@r4,	r8	
    133c:	31 3a       	jl	$-924    	;abs 0xfa0
    133e:	28 30       	jn	$+82     	;abs 0x1390
    1340:	2c 34       	jge	$+90     	;abs 0x139a
    1342:	29 2c       	jc	$+84     	;abs 0x1396
    1344:	31 32       	jn	$-924    	;abs 0xfa8
    1346:	2c 34       	jge	$+90     	;abs 0x13a0
    1348:	3b 3b       	jl	$-392    	;abs 0x11c0
    134a:	00 61       	addc	r1,	r0	
    134c:	64 63       	addc.b	#2,	r4	;r3 As==10
    134e:	31 32       	jn	$-924    	;abs 0xfb2
    1350:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    1352:	6c 31       	jn	$+730    	;abs 0x162c
    1354:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
    1358:	28 32       	jn	$-942    	;abs 0xfaa
    135a:	32 2c       	jc	$+102    	;abs 0x13c0
    135c:	33 29       	jnc	$+616    	;abs 0x15c4
    135e:	3d 28       	jnc	$+124    	;abs 0x13da
    1360:	32 32       	jn	$-922    	;abs 0xfc6
    1362:	2c 34       	jge	$+90     	;abs 0x13bc
    1364:	29 3d       	jmp	$+596    	;abs 0x15b8
    1366:	73 32       	jn	$-792    	;abs 0x104e
    1368:	61 64       	addc.b	@r4,	r1	
    136a:	63 31       	jn	$+712    	;abs 0x1632
    136c:	32 62       	addc	#8,	r2	;r2 As==11
    136e:	75 73       	subc.b	#-1,	r5	;r3 As==11
    1370:	79 3a       	jl	$-780    	;abs 0x1064
    1372:	28 30       	jn	$+82     	;abs 0x13c4
    1374:	2c 34       	jge	$+90     	;abs 0x13ce
    1376:	29 2c       	jc	$+84     	;abs 0x13ca
    1378:	30 2c       	jc	$+98     	;abs 0x13da
    137a:	31 3b       	jl	$-412    	;abs 0x11de
    137c:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    137e:	6e 73       	subc.b	#2,	r14	;r3 As==10
    1380:	65 71       	subc.b	@r1,	r5	
    1382:	3a 28       	jnc	$+118    	;abs 0x13f8
    1384:	30 2c       	jc	$+98     	;abs 0x13e6
    1386:	34 29       	jnc	$+618    	;abs 0x15f0
    1388:	2c 31       	jn	$+602    	;abs 0x15e2
    138a:	2c 32       	jn	$-934    	;abs 0xfe4
    138c:	3b 61       	addc	@r1+,	r11	
    138e:	64 63       	addc.b	#2,	r4	;r3 As==10
    1390:	31 32       	jn	$-924    	;abs 0xff4
    1392:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    1394:	65 6c       	addc.b	@r12,	r5	
    1396:	3a 28       	jnc	$+118    	;abs 0x140c
    1398:	30 2c       	jc	$+98     	;abs 0x13fa
    139a:	34 29       	jnc	$+618    	;abs 0x1604
    139c:	2c 33       	jn	$-422    	;abs 0x11f6
    139e:	2c 32       	jn	$-934    	;abs 0xff8
    13a0:	3b 61       	addc	@r1+,	r11	
    13a2:	64 63       	addc.b	#2,	r4	;r3 As==10
    13a4:	31 32       	jn	$-924    	;abs 0x1008
    13a6:	64 69       	addc.b	@r9,	r4	
    13a8:	76 3a       	jl	$-786    	;abs 0x1096
    13aa:	28 30       	jn	$+82     	;abs 0x13fc
    13ac:	2c 34       	jge	$+90     	;abs 0x1406
    13ae:	29 2c       	jc	$+84     	;abs 0x1402
    13b0:	35 2c       	jc	$+108    	;abs 0x141c
    13b2:	33 3b       	jl	$-408    	;abs 0x121a
    13b4:	69 73       	subc.b	#2,	r9	;r3 As==10
    13b6:	73 68       	.word	0x6873;	????	Illegal as 2-op instr
    13b8:	3a 28       	jnc	$+118    	;abs 0x142e
    13ba:	30 2c       	jc	$+98     	;abs 0x141c
    13bc:	34 29       	jnc	$+618    	;abs 0x1626
    13be:	2c 38       	jl	$+90     	;abs 0x1418
    13c0:	2c 31       	jn	$+602    	;abs 0x161a
    13c2:	3b 73       	subc	#-1,	r11	;r3 As==11
    13c4:	68 70       	subc.b	@r0,	r8	
    13c6:	3a 28       	jnc	$+118    	;abs 0x143c
    13c8:	30 2c       	jc	$+98     	;abs 0x142a
    13ca:	34 29       	jnc	$+618    	;abs 0x1634
    13cc:	2c 39       	jl	$+602    	;abs 0x1626
    13ce:	2c 31       	jn	$+602    	;abs 0x1628
    13d0:	3b 73       	subc	#-1,	r11	;r3 As==11
    13d2:	68 73       	subc.b	#2,	r8	;r3 As==10
    13d4:	3a 28       	jnc	$+118    	;abs 0x144a
    13d6:	30 2c       	jc	$+98     	;abs 0x1438
    13d8:	34 29       	jnc	$+618    	;abs 0x1642
    13da:	2c 31       	jn	$+602    	;abs 0x1634
    13dc:	30 2c       	jc	$+98     	;abs 0x143e
    13de:	32 3b       	jl	$-410    	;abs 0x1244
    13e0:	63 73       	.word	0x7363;	????	Illegal as 2-op instr
    13e2:	74 61       	addc.b	@r1+,	r4	
    13e4:	72 74       	subc.b	@r4+,	r2	
    13e6:	61 64       	addc.b	@r4,	r1	
    13e8:	64 3a       	jl	$-822    	;abs 0x10b2
    13ea:	28 30       	jn	$+82     	;abs 0x143c
    13ec:	2c 34       	jge	$+90     	;abs 0x1446
    13ee:	29 2c       	jc	$+84     	;abs 0x1442
    13f0:	31 32       	jn	$-924    	;abs 0x1054
    13f2:	2c 34       	jge	$+90     	;abs 0x144c
    13f4:	3b 3b       	jl	$-392    	;abs 0x126c
    13f6:	00 61       	addc	r1,	r0	
    13f8:	64 63       	addc.b	#2,	r4	;r3 As==10
    13fa:	31 32       	jn	$-924    	;abs 0x105e
    13fc:	78 66       	addc.b	@r6+,	r8	
    13fe:	6c 67       	addc.b	@r7,	r12	
    1400:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
    1404:	28 32       	jn	$-942    	;abs 0x1056
    1406:	32 2c       	jc	$+102    	;abs 0x146c
    1408:	35 29       	jnc	$+620    	;abs 0x1674
    140a:	3d 28       	jnc	$+124    	;abs 0x1486
    140c:	32 32       	jn	$-922    	;abs 0x1072
    140e:	2c 36       	jge	$-934    	;abs 0x1068
    1410:	29 3d       	jmp	$+596    	;abs 0x1664
    1412:	73 32       	jn	$-792    	;abs 0x10fa
    1414:	62 69       	addc.b	@r9,	r2	
    1416:	74 30       	jn	$+234    	;abs 0x1500
    1418:	3a 28       	jnc	$+118    	;abs 0x148e
    141a:	30 2c       	jc	$+98     	;abs 0x147c
    141c:	34 29       	jnc	$+618    	;abs 0x1686
    141e:	2c 30       	jn	$+90     	;abs 0x1478
    1420:	2c 31       	jn	$+602    	;abs 0x167a
    1422:	3b 62       	addc	#8,	r11	;r2 As==11
    1424:	69 74       	subc.b	@r4,	r9	
    1426:	31 3a       	jl	$-924    	;abs 0x108a
    1428:	28 30       	jn	$+82     	;abs 0x147a
    142a:	2c 34       	jge	$+90     	;abs 0x1484
    142c:	29 2c       	jc	$+84     	;abs 0x1480
    142e:	31 2c       	jc	$+100    	;abs 0x1492
    1430:	31 3b       	jl	$-412    	;abs 0x1294
    1432:	62 69       	addc.b	@r9,	r2	
    1434:	74 32       	jn	$-790    	;abs 0x111e
    1436:	3a 28       	jnc	$+118    	;abs 0x14ac
    1438:	30 2c       	jc	$+98     	;abs 0x149a
    143a:	34 29       	jnc	$+618    	;abs 0x16a4
    143c:	2c 32       	jn	$-934    	;abs 0x1096
    143e:	2c 31       	jn	$+602    	;abs 0x1698
    1440:	3b 62       	addc	#8,	r11	;r2 As==11
    1442:	69 74       	subc.b	@r4,	r9	
    1444:	33 3a       	jl	$-920    	;abs 0x10ac
    1446:	28 30       	jn	$+82     	;abs 0x1498
    1448:	2c 34       	jge	$+90     	;abs 0x14a2
    144a:	29 2c       	jc	$+84     	;abs 0x149e
    144c:	33 2c       	jc	$+104    	;abs 0x14b4
    144e:	31 3b       	jl	$-412    	;abs 0x12b2
    1450:	62 69       	addc.b	@r9,	r2	
    1452:	74 34       	jge	$+234    	;abs 0x153c
    1454:	3a 28       	jnc	$+118    	;abs 0x14ca
    1456:	30 2c       	jc	$+98     	;abs 0x14b8
    1458:	34 29       	jnc	$+618    	;abs 0x16c2
    145a:	2c 34       	jge	$+90     	;abs 0x14b4
    145c:	2c 31       	jn	$+602    	;abs 0x16b6
    145e:	3b 62       	addc	#8,	r11	;r2 As==11
    1460:	69 74       	subc.b	@r4,	r9	
    1462:	35 3a       	jl	$-916    	;abs 0x10ce
    1464:	28 30       	jn	$+82     	;abs 0x14b6
    1466:	2c 34       	jge	$+90     	;abs 0x14c0
    1468:	29 2c       	jc	$+84     	;abs 0x14bc
    146a:	35 2c       	jc	$+108    	;abs 0x14d6
    146c:	31 3b       	jl	$-412    	;abs 0x12d0
    146e:	62 69       	addc.b	@r9,	r2	
    1470:	74 36       	jge	$-790    	;abs 0x115a
    1472:	3a 28       	jnc	$+118    	;abs 0x14e8
    1474:	30 2c       	jc	$+98     	;abs 0x14d6
    1476:	34 29       	jnc	$+618    	;abs 0x16e0
    1478:	2c 36       	jge	$-934    	;abs 0x10d2
    147a:	2c 31       	jn	$+602    	;abs 0x16d4
    147c:	3b 62       	addc	#8,	r11	;r2 As==11
    147e:	69 74       	subc.b	@r4,	r9	
    1480:	37 3a       	jl	$-912    	;abs 0x10f0
    1482:	28 30       	jn	$+82     	;abs 0x14d4
    1484:	2c 34       	jge	$+90     	;abs 0x14de
    1486:	29 2c       	jc	$+84     	;abs 0x14da
    1488:	37 2c       	jc	$+112    	;abs 0x14f8
    148a:	31 3b       	jl	$-412    	;abs 0x12ee
    148c:	62 69       	addc.b	@r9,	r2	
    148e:	74 38       	jl	$+234    	;abs 0x1578
    1490:	3a 28       	jnc	$+118    	;abs 0x1506
    1492:	30 2c       	jc	$+98     	;abs 0x14f4
    1494:	34 29       	jnc	$+618    	;abs 0x16fe
    1496:	2c 38       	jl	$+90     	;abs 0x14f0
    1498:	2c 31       	jn	$+602    	;abs 0x16f2
    149a:	3b 62       	addc	#8,	r11	;r2 As==11
    149c:	69 74       	subc.b	@r4,	r9	
    149e:	39 3a       	jl	$-908    	;abs 0x1112
    14a0:	28 30       	jn	$+82     	;abs 0x14f2
    14a2:	2c 34       	jge	$+90     	;abs 0x14fc
    14a4:	29 2c       	jc	$+84     	;abs 0x14f8
    14a6:	39 2c       	jc	$+116    	;abs 0x151a
    14a8:	31 3b       	jl	$-412    	;abs 0x130c
    14aa:	62 69       	addc.b	@r9,	r2	
    14ac:	74 31       	jn	$+746    	;abs 0x1796
    14ae:	30 3a       	jl	$-926    	;abs 0x1110
    14b0:	28 30       	jn	$+82     	;abs 0x1502
    14b2:	2c 34       	jge	$+90     	;abs 0x150c
    14b4:	29 2c       	jc	$+84     	;abs 0x1508
    14b6:	31 30       	jn	$+100    	;abs 0x151a
    14b8:	2c 31       	jn	$+602    	;abs 0x1712
    14ba:	3b 62       	addc	#8,	r11	;r2 As==11
    14bc:	69 74       	subc.b	@r4,	r9	
    14be:	31 31       	jn	$+612    	;abs 0x1722
    14c0:	3a 28       	jnc	$+118    	;abs 0x1536
    14c2:	30 2c       	jc	$+98     	;abs 0x1524
    14c4:	34 29       	jnc	$+618    	;abs 0x172e
    14c6:	2c 31       	jn	$+602    	;abs 0x1720
    14c8:	31 2c       	jc	$+100    	;abs 0x152c
    14ca:	31 3b       	jl	$-412    	;abs 0x132e
    14cc:	62 69       	addc.b	@r9,	r2	
    14ce:	74 31       	jn	$+746    	;abs 0x17b8
    14d0:	32 3a       	jl	$-922    	;abs 0x1136
    14d2:	28 30       	jn	$+82     	;abs 0x1524
    14d4:	2c 34       	jge	$+90     	;abs 0x152e
    14d6:	29 2c       	jc	$+84     	;abs 0x152a
    14d8:	31 32       	jn	$-924    	;abs 0x113c
    14da:	2c 31       	jn	$+602    	;abs 0x1734
    14dc:	3b 62       	addc	#8,	r11	;r2 As==11
    14de:	69 74       	subc.b	@r4,	r9	
    14e0:	31 33       	jn	$-412    	;abs 0x1344
    14e2:	3a 28       	jnc	$+118    	;abs 0x1558
    14e4:	30 2c       	jc	$+98     	;abs 0x1546
    14e6:	34 29       	jnc	$+618    	;abs 0x1750
    14e8:	2c 31       	jn	$+602    	;abs 0x1742
    14ea:	33 2c       	jc	$+104    	;abs 0x1552
    14ec:	31 3b       	jl	$-412    	;abs 0x1350
    14ee:	62 69       	addc.b	@r9,	r2	
    14f0:	74 31       	jn	$+746    	;abs 0x17da
    14f2:	34 3a       	jl	$-918    	;abs 0x115c
    14f4:	28 30       	jn	$+82     	;abs 0x1546
    14f6:	2c 34       	jge	$+90     	;abs 0x1550
    14f8:	29 2c       	jc	$+84     	;abs 0x154c
    14fa:	31 34       	jge	$+100    	;abs 0x155e
    14fc:	2c 31       	jn	$+602    	;abs 0x1756
    14fe:	3b 62       	addc	#8,	r11	;r2 As==11
    1500:	69 74       	subc.b	@r4,	r9	
    1502:	31 35       	jge	$+612    	;abs 0x1766
    1504:	3a 28       	jnc	$+118    	;abs 0x157a
    1506:	30 2c       	jc	$+98     	;abs 0x1568
    1508:	34 29       	jnc	$+618    	;abs 0x1772
    150a:	2c 31       	jn	$+602    	;abs 0x1764
    150c:	35 2c       	jc	$+108    	;abs 0x1578
    150e:	31 3b       	jl	$-412    	;abs 0x1372
    1510:	3b 00 61 64 	mova	0x6461,	r11	;PC rel. 0x07973
    1514:	63 31       	jn	$+712    	;abs 0x17dc
    1516:	32 5f       	add	@r15+,	r2	
    1518:	74 3a       	jl	$-790    	;abs 0x1202
    151a:	54 28       	jnc	$+170    	;abs 0x15c4
    151c:	32 32       	jn	$-922    	;abs 0x1182
    151e:	2c 37       	jge	$-422    	;abs 0x1378
    1520:	29 3d       	jmp	$+596    	;abs 0x1774
    1522:	73 31       	jn	$+744    	;abs 0x180a
    1524:	30 63       	addc	#-1,	r0	;r3 As==11
    1526:	74 6c       	addc.b	@r12+,	r4	
    1528:	30 3a       	jl	$-926    	;abs 0x118a
    152a:	28 32       	jn	$-942    	;abs 0x117c
    152c:	32 2c       	jc	$+102    	;abs 0x1592
    152e:	31 29       	jnc	$+612    	;abs 0x1792
    1530:	2c 30       	jn	$+90     	;abs 0x158a
    1532:	2c 31       	jn	$+602    	;abs 0x178c
    1534:	36 3b       	jl	$-402    	;abs 0x13a2
    1536:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    1538:	6c 31       	jn	$+730    	;abs 0x1812
    153a:	3a 28       	jnc	$+118    	;abs 0x15b0
    153c:	32 32       	jn	$-922    	;abs 0x11a2
    153e:	2c 33       	jn	$-422    	;abs 0x1398
    1540:	29 2c       	jc	$+84     	;abs 0x1594
    1542:	31 36       	jge	$-924    	;abs 0x11a6
    1544:	2c 31       	jn	$+602    	;abs 0x179e
    1546:	36 3b       	jl	$-402    	;abs 0x13b4
    1548:	69 66       	addc.b	@r6,	r9	
    154a:	67 3a       	jl	$-816    	;abs 0x121a
    154c:	28 32       	jn	$-942    	;abs 0x119e
    154e:	32 2c       	jc	$+102    	;abs 0x15b4
    1550:	35 29       	jnc	$+620    	;abs 0x17bc
    1552:	2c 33       	jn	$-422    	;abs 0x13ac
    1554:	32 2c       	jc	$+102    	;abs 0x15ba
    1556:	31 36       	jge	$-924    	;abs 0x11ba
    1558:	3b 69       	addc	@r9+,	r11	
    155a:	65 3a       	jl	$-820    	;abs 0x1226
    155c:	28 32       	jn	$-942    	;abs 0x11ae
    155e:	32 2c       	jc	$+102    	;abs 0x15c4
    1560:	35 29       	jnc	$+620    	;abs 0x17cc
    1562:	2c 34       	jge	$+90     	;abs 0x15bc
    1564:	38 2c       	jc	$+114    	;abs 0x15d6
    1566:	31 36       	jge	$-924    	;abs 0x11ca
    1568:	3b 69       	addc	@r9+,	r11	
    156a:	76 3a       	jl	$-786    	;abs 0x1258
    156c:	28 32       	jn	$-942    	;abs 0x11be
    156e:	32 2c       	jc	$+102    	;abs 0x15d4
    1570:	35 29       	jnc	$+620    	;abs 0x17dc
    1572:	2c 36       	jge	$-934    	;abs 0x11cc
    1574:	34 2c       	jc	$+106    	;abs 0x15de
    1576:	31 36       	jge	$-924    	;abs 0x11da
    1578:	3b 3b       	jl	$-392    	;abs 0x13f0
    157a:	00 63       	adc	r0		
    157c:	3a 2f       	jc	$-394    	;abs 0x13f2
    157e:	6d 73       	subc.b	#2,	r13	;r3 As==10
    1580:	70 67       	addc.b	@r7+,	r0	
    1582:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    1584:	2f 6d       	addc	@r13,	r15	
    1586:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1588:	34 33       	jn	$-406    	;abs 0x13f2
    158a:	30 2f       	jc	$-414    	;abs 0x13ec
    158c:	69 6e       	addc.b	@r14,	r9	
    158e:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    1590:	75 64       	addc.b	@r4+,	r5	
    1592:	65 2f       	jc	$-308    	;abs 0x145e
    1594:	6d 73       	subc.b	#2,	r13	;r3 As==10
    1596:	70 34       	jge	$+226    	;abs 0x1678
    1598:	33 30       	jn	$+104    	;abs 0x1600
    159a:	2f 64       	addc	@r4,	r15	
    159c:	61 63       	addc.b	#2,	r1	;r3 As==10
    159e:	31 32       	jn	$-924    	;abs 0x1202
    15a0:	2e 68       	addc	@r8,	r14	
    15a2:	00 63       	adc	r0		
    15a4:	3a 2f       	jc	$-394    	;abs 0x141a
    15a6:	6d 73       	subc.b	#2,	r13	;r3 As==10
    15a8:	70 67       	addc.b	@r7+,	r0	
    15aa:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    15ac:	2f 6d       	addc	@r13,	r15	
    15ae:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    15b0:	34 33       	jn	$-406    	;abs 0x141a
    15b2:	30 2f       	jc	$-414    	;abs 0x1414
    15b4:	69 6e       	addc.b	@r14,	r9	
    15b6:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    15b8:	75 64       	addc.b	@r4+,	r5	
    15ba:	65 2f       	jc	$-308    	;abs 0x1486
    15bc:	6d 73       	subc.b	#2,	r13	;r3 As==10
    15be:	70 34       	jge	$+226    	;abs 0x16a0
    15c0:	33 30       	jn	$+104    	;abs 0x1628
    15c2:	2f 64       	addc	@r4,	r15	
    15c4:	6d 61       	addc.b	@r1,	r13	
    15c6:	2e 68       	addc	@r8,	r14	
    15c8:	00 63       	adc	r0		
    15ca:	3a 2f       	jc	$-394    	;abs 0x1440
    15cc:	6d 73       	subc.b	#2,	r13	;r3 As==10
    15ce:	70 67       	addc.b	@r7+,	r0	
    15d0:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    15d2:	2f 6d       	addc	@r13,	r15	
    15d4:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    15d6:	34 33       	jn	$-406    	;abs 0x1440
    15d8:	30 2f       	jc	$-414    	;abs 0x143a
    15da:	69 6e       	addc.b	@r14,	r9	
    15dc:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    15de:	75 64       	addc.b	@r4+,	r5	
    15e0:	65 2f       	jc	$-308    	;abs 0x14ac
    15e2:	6d 73       	subc.b	#2,	r13	;r3 As==10
    15e4:	70 34       	jge	$+226    	;abs 0x16c6
    15e6:	33 30       	jn	$+104    	;abs 0x164e
    15e8:	2f 63       	addc	#2,	r15	;r3 As==10
    15ea:	6f 6d       	addc.b	@r13,	r15	
    15ec:	6d 6f       	addc.b	@r15,	r13	
    15ee:	6e 2e       	jc	$-802    	;abs 0x12cc
    15f0:	68 00 64 65 	mova	r0,	&0x86564
    15f4:	6c 61       	addc.b	@r1,	r12	
    15f6:	79 2e       	jc	$-780    	;abs 0x12ea
    15f8:	68 00 61 6e 	mova	r0,	&0x86e61
    15fc:	61 6c       	addc.b	@r12,	r1	
    15fe:	6f 67       	addc.b	@r7,	r15	
    1600:	2e 68       	addc	@r8,	r14	
    1602:	00 6c       	addc	r12,	r0	
    1604:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    1606:	36 31       	jn	$+622    	;abs 0x1874
    1608:	30 30       	jn	$+98     	;abs 0x166a
    160a:	2e 68       	addc	@r8,	r14	
    160c:	00 65       	addc	r5,	r0	
    160e:	65 70       	subc.b	@r0,	r5	
    1610:	72 6f       	addc.b	@r15+,	r2	
    1612:	6d 2e       	jc	$-804    	;abs 0x12ee
    1614:	68 00 66 6f 	mova	r0,	&0x86f66
    1618:	75 72       	subc.b	#8,	r5	;r2 As==11
    161a:	62 79       	subc.b	@r9,	r2	
    161c:	74 65       	addc.b	@r5+,	r4	
    161e:	73 3a       	jl	$-792    	;abs 0x1306
    1620:	74 28       	jnc	$+234    	;abs 0x170a
    1622:	32 39       	jl	$+614    	;abs 0x1888
    1624:	2c 31       	jn	$+602    	;abs 0x187e
    1626:	29 3d       	jmp	$+596    	;abs 0x187a
    1628:	28 32       	jn	$-942    	;abs 0x127a
    162a:	39 2c       	jc	$+116    	;abs 0x169e
    162c:	32 29       	jnc	$+614    	;abs 0x1892
    162e:	3d 75       	subc	@r5+,	r13	
    1630:	34 66       	addc	@r6+,	r4	
    1632:	3a 28       	jnc	$+118    	;abs 0x16a8
    1634:	30 2c       	jc	$+98     	;abs 0x1696
    1636:	31 32       	jn	$-924    	;abs 0x129a
    1638:	29 2c       	jc	$+84     	;abs 0x168c
    163a:	30 2c       	jc	$+98     	;abs 0x169c
    163c:	33 32       	jn	$-920    	;abs 0x12a4
    163e:	3b 63       	addc	#-1,	r11	;r3 As==11
    1640:	3a 28       	jnc	$+118    	;abs 0x16b6
    1642:	32 39       	jl	$+614    	;abs 0x18a8
    1644:	2c 33       	jn	$-422    	;abs 0x149e
    1646:	29 3d       	jmp	$+596    	;abs 0x189a
    1648:	61 72       	subc.b	#4,	r1	;r2 As==10
    164a:	28 31       	jn	$+594    	;abs 0x189c
    164c:	37 2c       	jc	$+112    	;abs 0x16bc
    164e:	37 29       	jnc	$+624    	;abs 0x18be
    1650:	3b 30       	jn	$+120    	;abs 0x16c8
    1652:	3b 33       	jn	$-392    	;abs 0x14ca
    1654:	3b 28       	jnc	$+120    	;abs 0x16cc
    1656:	30 2c       	jc	$+98     	;abs 0x16b8
    1658:	32 29       	jnc	$+614    	;abs 0x18be
    165a:	2c 30       	jn	$+90     	;abs 0x16b4
    165c:	2c 33       	jn	$-422    	;abs 0x14b6
    165e:	32 3b       	jl	$-410    	;abs 0x14c4
    1660:	3b 00 69 32 	mova	0x3269,	r11	;PC rel. 0x048cb
    1664:	63 2e       	jc	$-824    	;abs 0x132c
    1666:	68 00 6d 69 	mova	r0,	&0x8696d
    166a:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
    166c:	6f 71       	subc.b	@r1,	r15	
    166e:	75 61       	addc.b	@r1+,	r5	
    1670:	64 2e       	jc	$-822    	;abs 0x133a
    1672:	68 00 20 3a 	mova	r0,	&0x83a20
    1676:	54 28       	jnc	$+170    	;abs 0x1720
    1678:	33 31       	jn	$+616    	;abs 0x18e0
    167a:	2c 31       	jn	$+602    	;abs 0x18d4
    167c:	29 3d       	jmp	$+596    	;abs 0x18d0
    167e:	65 44       	mov.b	@r4,	r5	
    1680:	49 53       	add.b	#0,	r9	;r3 As==00
    1682:	50 4c 41 59 	br	22849(r12)	;0x5941(r12)
    1686:	3a 30       	jn	$+118    	;abs 0x16fc
    1688:	2c 53       	incd	r12		
    168a:	45 4c       	mov.b	r12,	r5	
    168c:	45 43       	clr.b	r5		
    168e:	54 3a       	jl	$-854    	;abs 0x1338
    1690:	31 2c       	jc	$+100    	;abs 0x16f4
    1692:	57 41 49 54 	mov.b	21577(r1),r7	;0x5449(r1)
    1696:	5f 50 49 54 	add.b	0x5449,	r15	;PC rel. 0x06ae3
    169a:	43 48       	.word	0x4843;	????	Illegal as 2-op instr
    169c:	5f 44 4f 57 	mov.b	22351(r4),r15	;0x574f(r4)
    16a0:	4e 3a       	jl	$-866    	;abs 0x133e
    16a2:	32 2c       	jc	$+102    	;abs 0x1708
    16a4:	57 41 49 54 	mov.b	21577(r1),r7	;0x5449(r1)
    16a8:	5f 50 49 54 	add.b	0x5449,	r15	;PC rel. 0x06af5
    16ac:	43 48       	.word	0x4843;	????	Illegal as 2-op instr
    16ae:	5f 55 50 3a 	add.b	14928(r5),r15	;0x3a50(r5)
    16b2:	33 2c       	jc	$+104    	;abs 0x171a
    16b4:	57 41 49 54 	mov.b	21577(r1),r7	;0x5449(r1)
    16b8:	5f 43       	mov.b	#1,	r15	;r3 As==01
    16ba:	48 37       	jge	$-366    	;abs 0x154c
    16bc:	5f 42 41 43 	mov.b	&0x4341,r15	
    16c0:	4b 3a       	jl	$-872    	;abs 0x1358
    16c2:	34 2c       	jc	$+106    	;abs 0x172c
    16c4:	57 41 49 54 	mov.b	21577(r1),r7	;0x5449(r1)
    16c8:	5f 52 4f 4c 	add.b	&0x4c4f,r15	
    16cc:	4c 5f       	add.b	r15,	r12	
    16ce:	52 49 47 48 	mov.b	18503(r9),r2	;0x4847(r9)
    16d2:	54 3a       	jl	$-854    	;abs 0x137c
    16d4:	35 2c       	jc	$+108    	;abs 0x1740
    16d6:	57 41 49 54 	mov.b	21577(r1),r7	;0x5449(r1)
    16da:	5f 52 4f 4c 	add.b	&0x4c4f,r15	
    16de:	4c 5f       	add.b	r15,	r12	
    16e0:	4c 45       	mov.b	r5,	r12	
    16e2:	46 54       	add.b	r4,	r6	
    16e4:	3a 36       	jge	$-906    	;abs 0x135a
    16e6:	2c 50       	add	@r0,	r12	
    16e8:	52 4f 43 45 	mov.b	17731(r15),r2	;0x4543(r15)
    16ec:	53 53       	inc.b	#0		;r3 As==00
    16ee:	5f 4f 50 54 	mov.b	21584(r15),r15	;0x5450(r15)
    16f2:	49 4f       	mov.b	r15,	r9	
    16f4:	4e 3a       	jl	$-866    	;abs 0x1392
    16f6:	37 2c       	jc	$+112    	;abs 0x1766
    16f8:	3b 00 4d 45 	mova	0x454d,	r11	;PC rel. 0x05c47
    16fc:	4e 55       	add.b	r5,	r14	
    16fe:	5f 53       	inc.b	r15		
    1700:	54 45 50 53 	mov.b	21328(r5),r4	;0x5350(r5)
    1704:	45 54       	add.b	r4,	r5	
    1706:	3a 74       	subc	@r4+,	r10	
    1708:	28 33       	jn	$-430    	;abs 0x155a
    170a:	31 2c       	jc	$+100    	;abs 0x176e
    170c:	32 29       	jnc	$+614    	;abs 0x1972
    170e:	3d 28       	jnc	$+124    	;abs 0x178a
    1710:	33 31       	jn	$+616    	;abs 0x1978
    1712:	2c 31       	jn	$+602    	;abs 0x196c
    1714:	29 00 20 3a 	mova	&0x03a20,r9	
    1718:	54 28       	jnc	$+170    	;abs 0x17c2
    171a:	33 31       	jn	$+616    	;abs 0x1982
    171c:	2c 33       	jn	$-422    	;abs 0x1576
    171e:	29 3d       	jmp	$+596    	;abs 0x1972
    1720:	65 52       	add.b	#4,	r5	;r2 As==10
    1722:	41 44       	mov.b	r4,	r1	
    1724:	49 4f       	mov.b	r15,	r9	
    1726:	5f 52 41 57 	add.b	&0x5741,r15	
    172a:	3a 30       	jn	$+118    	;abs 0x17a0
    172c:	2c 52       	add	#4,	r12	;r2 As==10
    172e:	41 44       	mov.b	r4,	r1	
    1730:	49 4f       	mov.b	r15,	r9	
    1732:	5f 43       	mov.b	#1,	r15	;r3 As==01
    1734:	4f 52       	add.b	r2,	r15	
    1736:	52 45 43 54 	mov.b	21571(r5),r2	;0x5443(r5)
    173a:	3a 31       	jn	$+630    	;abs 0x19b0
    173c:	2c 41       	mov	@r1,	r12	
    173e:	4e 41       	mov.b	r1,	r14	
    1740:	4c 4f       	mov.b	r15,	r12	
    1742:	47 5f       	add.b	r15,	r7	
    1744:	4d 4f       	mov.b	r15,	r13	
    1746:	4e 49       	mov.b	r9,	r14	
    1748:	54 4f 52 3a 	mov.b	14930(r15),r4	;0x3a52(r15)
    174c:	32 2c       	jc	$+102    	;abs 0x17b2
    174e:	52 45 41 44 	mov.b	17473(r5),r2	;0x4441(r5)
    1752:	59 3a       	jl	$-844    	;abs 0x1406
    1754:	33 2c       	jc	$+104    	;abs 0x17bc
    1756:	49 4e       	mov.b	r14,	r9	
    1758:	49 54       	add.b	r4,	r9	
    175a:	49 41       	mov.b	r1,	r9	
    175c:	4c 5f       	add.b	r15,	r12	
    175e:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
    1760:	54 54 49 4e 	add.b	20041(r4),r4	;0x4e49(r4)
    1764:	47 53       	add.b	#0,	r7	;r3 As==00
    1766:	3a 34       	jge	$+118    	;abs 0x17dc
    1768:	2c 3b       	jl	$-422    	;abs 0x15c2
    176a:	00 4d       	br	r13		
    176c:	45 4e       	mov.b	r14,	r5	
    176e:	55 5f 4f 50 	add.b	20559(r15),r5	;0x504f(r15)
    1772:	54 49 4f 4e 	mov.b	20047(r9),r4	;0x4e4f(r9)
    1776:	3a 74       	subc	@r4+,	r10	
    1778:	28 33       	jn	$-430    	;abs 0x15ca
    177a:	31 2c       	jc	$+100    	;abs 0x17de
    177c:	34 29       	jnc	$+618    	;abs 0x19e6
    177e:	3d 28       	jnc	$+124    	;abs 0x17fa
    1780:	33 31       	jn	$+616    	;abs 0x19e8
    1782:	2c 33       	jn	$-422    	;abs 0x15dc
    1784:	29 00 6d 61 	mova	&0x0616d,r9	
    1788:	69 6e       	addc.b	@r14,	r9	
    178a:	3a 46       	mov	@r6+,	r10	
    178c:	28 30       	jn	$+82     	;abs 0x17de
    178e:	2c 31       	jn	$+602    	;abs 0x19e8
    1790:	29 00 70 72 	mova	&0x07270,r9	
    1794:	6f 63       	addc.b	#2,	r15	;r3 As==10
    1796:	65 73       	subc.b	#2,	r5	;r3 As==10
    1798:	73 5f       	.word	0x5f73;	????	Illegal as 2-op instr
    179a:	6d 65       	addc.b	@r5,	r13	
    179c:	6e 75       	subc.b	@r5,	r14	
    179e:	3a 46       	mov	@r6+,	r10	
    17a0:	28 30       	jn	$+82     	;abs 0x17f2
    17a2:	2c 32       	jn	$-934    	;abs 0x13fc
    17a4:	30 29       	jnc	$+610    	;abs 0x1a06
    17a6:	00 70       	subc	r0,	r0	
    17a8:	72 6f       	addc.b	@r15+,	r2	
    17aa:	63 65       	.word	0x6563;	????	Illegal as 2-op instr
    17ac:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    17ae:	5f 6f 70 74 	addc.b	29808(r15),r15	;0x7470(r15)
    17b2:	69 6f       	addc.b	@r15,	r9	
    17b4:	6e 3a       	jl	$-802    	;abs 0x1492
    17b6:	46 28       	jnc	$+142    	;abs 0x1844
    17b8:	30 2c       	jc	$+98     	;abs 0x181a
    17ba:	32 30       	jn	$+102    	;abs 0x1820
    17bc:	29 00 69 3a 	mova	&0x03a69,r9	
    17c0:	72 28       	jnc	$+230    	;abs 0x18a6
    17c2:	30 2c       	jc	$+98     	;abs 0x1824
    17c4:	31 29       	jnc	$+612    	;abs 0x1a28
    17c6:	00 64       	addc	r4,	r0	
    17c8:	72 61       	addc.b	@r1+,	r2	
    17ca:	77 5f       	add.b	@r15+,	r7	
    17cc:	61 6e       	addc.b	@r14,	r1	
    17ce:	61 6c       	addc.b	@r12,	r1	
    17d0:	6f 67       	addc.b	@r7,	r15	
    17d2:	5f 67 72 61 	addc.b	24946(r7),r15	;0x6172(r7)
    17d6:	70 68       	addc.b	@r8+,	r0	
    17d8:	3a 46       	mov	@r6+,	r10	
    17da:	28 30       	jn	$+82     	;abs 0x182c
    17dc:	2c 32       	jn	$-934    	;abs 0x1436
    17de:	30 29       	jnc	$+610    	;abs 0x1a40
    17e0:	00 70       	subc	r0,	r0	
    17e2:	72 6f       	addc.b	@r15+,	r2	
    17e4:	63 65       	.word	0x6563;	????	Illegal as 2-op instr
    17e6:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    17e8:	5f 61 6e 61 	addc.b	24942(r1),r15	;0x616e(r1)
    17ec:	6c 6f       	addc.b	@r15,	r12	
    17ee:	67 5f       	add.b	@r15,	r7	
    17f0:	6d 65       	addc.b	@r5,	r13	
    17f2:	6e 75       	subc.b	@r5,	r14	
    17f4:	3a 46       	mov	@r6+,	r10	
    17f6:	28 30       	jn	$+82     	;abs 0x1848
    17f8:	2c 32       	jn	$-934    	;abs 0x1452
    17fa:	30 29       	jnc	$+610    	;abs 0x1a5c
    17fc:	00 72       	subc	r2,	r0	
    17fe:	65 66       	addc.b	@r6,	r5	
    1800:	72 65       	addc.b	@r5+,	r2	
    1802:	73 68       	.word	0x6873;	????	Illegal as 2-op instr
    1804:	5f 61 6e 61 	addc.b	24942(r1),r15	;0x616e(r1)
    1808:	6c 6f       	addc.b	@r15,	r12	
    180a:	67 5f       	add.b	@r15,	r7	
    180c:	6d 65       	addc.b	@r5,	r13	
    180e:	6e 75       	subc.b	@r5,	r14	
    1810:	3a 46       	mov	@r6+,	r10	
    1812:	28 30       	jn	$+82     	;abs 0x1864
    1814:	2c 32       	jn	$-934    	;abs 0x146e
    1816:	30 29       	jnc	$+610    	;abs 0x1a78
    1818:	00 54       	add	r4,	r0	
    181a:	49 4d       	mov.b	r13,	r9	
    181c:	45 52       	add.b	r2,	r5	
    181e:	41 30       	jn	$+132    	;abs 0x18a2
    1820:	5f 49 53 52 	mov.b	21075(r9),r15	;0x5253(r9)
    1824:	5f 48 4f 4f 	mov.b	20303(r8),r15	;0x4f4f(r8)
    1828:	4b 3a       	jl	$-872    	;abs 0x14c0
    182a:	46 28       	jnc	$+142    	;abs 0x18b8
    182c:	30 2c       	jc	$+98     	;abs 0x188e
    182e:	32 30       	jn	$+102    	;abs 0x1894
    1830:	29 00 63 6c 	mova	&0x06c63,r9	
    1834:	6f 63       	addc.b	#2,	r15	;r3 As==10
    1836:	6b 5f       	add.b	@r15,	r11	
    1838:	69 6e       	addc.b	@r14,	r9	
    183a:	69 74       	subc.b	@r4,	r9	
    183c:	3a 46       	mov	@r6+,	r10	
    183e:	28 30       	jn	$+82     	;abs 0x1890
    1840:	2c 32       	jn	$-934    	;abs 0x149a
    1842:	30 29       	jnc	$+610    	;abs 0x1aa4
    1844:	00 70       	subc	r0,	r0	
    1846:	31 5f       	add	@r15+,	r1	
    1848:	69 6e       	addc.b	@r14,	r9	
    184a:	69 74       	subc.b	@r4,	r9	
    184c:	3a 46       	mov	@r6+,	r10	
    184e:	28 30       	jn	$+82     	;abs 0x18a0
    1850:	2c 32       	jn	$-934    	;abs 0x14aa
    1852:	30 29       	jnc	$+610    	;abs 0x1ab4
    1854:	00 74       	subc	r4,	r0	
    1856:	69 6d       	addc.b	@r13,	r9	
    1858:	65 72       	subc.b	#4,	r5	;r2 As==10
    185a:	5f 61 33 5f 	addc.b	24371(r1),r15	;0x5f33(r1)
    185e:	69 6e       	addc.b	@r14,	r9	
    1860:	69 74       	subc.b	@r4,	r9	
    1862:	3a 46       	mov	@r6+,	r10	
    1864:	28 30       	jn	$+82     	;abs 0x18b6
    1866:	2c 32       	jn	$-934    	;abs 0x14c0
    1868:	30 29       	jnc	$+610    	;abs 0x1aca
    186a:	00 50       	rla	r0		
    186c:	4f 52       	add.b	r2,	r15	
    186e:	54 31       	jn	$+682    	;abs 0x1b18
    1870:	5f 49 53 52 	mov.b	21075(r9),r15	;0x5253(r9)
    1874:	5f 48 4f 4f 	mov.b	20303(r8),r15	;0x4f4f(r8)
    1878:	4b 3a       	jl	$-872    	;abs 0x1510
    187a:	46 28       	jnc	$+142    	;abs 0x1908
    187c:	30 2c       	jc	$+98     	;abs 0x18de
    187e:	32 30       	jn	$+102    	;abs 0x18e4
    1880:	29 00 50 50 	mova	&0x05050,r9	
    1884:	4d 5f       	add.b	r15,	r13	
    1886:	61 75       	subc.b	@r5,	r1	
    1888:	78 3a       	jl	$-782    	;abs 0x157a
    188a:	72 28       	jnc	$+230    	;abs 0x1970
    188c:	30 2c       	jc	$+98     	;abs 0x18ee
    188e:	34 29       	jnc	$+618    	;abs 0x1af8
    1890:	00 63       	adc	r0		
    1892:	68 61       	addc.b	@r1,	r8	
    1894:	6e 6e       	addc.b	@r14,	r14	
    1896:	65 6c       	addc.b	@r12,	r5	
    1898:	5f 6e 75 6d 	addc.b	28021(r14),r15	;0x6d75(r14)
    189c:	3a 72       	subc	#8,	r10	;r2 As==11
    189e:	28 30       	jn	$+82     	;abs 0x18f0
    18a0:	2c 31       	jn	$+602    	;abs 0x1afa
    18a2:	29 00 50 50 	mova	&0x05050,r9	
    18a6:	4d 5f       	add.b	r15,	r13	
    18a8:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
    18aa:	5f 63       	addc.b	#1,	r15	;r3 As==01
    18ac:	6f 75       	subc.b	@r5,	r15	
    18ae:	6e 74       	subc.b	@r4,	r14	
    18b0:	65 72       	subc.b	#4,	r5	;r2 As==10
    18b2:	3a 72       	subc	#8,	r10	;r2 As==11
    18b4:	28 30       	jn	$+82     	;abs 0x1906
    18b6:	2c 31       	jn	$+602    	;abs 0x1b10
    18b8:	29 00 63 61 	mova	&0x06163,r9	
    18bc:	6c 69       	addc.b	@r9,	r12	
    18be:	62 72       	subc.b	#4,	r2	;r2 As==10
    18c0:	61 74       	subc.b	@r4,	r1	
    18c2:	65 5f       	add.b	@r15,	r5	
    18c4:	72 61       	addc.b	@r1+,	r2	
    18c6:	64 69       	addc.b	@r9,	r4	
    18c8:	6f 3a       	jl	$-800    	;abs 0x15a8
    18ca:	46 28       	jnc	$+142    	;abs 0x1958
    18cc:	30 2c       	jc	$+98     	;abs 0x192e
    18ce:	32 30       	jn	$+102    	;abs 0x1934
    18d0:	29 00 6b 3a 	mova	&0x03a6b,r9	
    18d4:	72 28       	jnc	$+230    	;abs 0x19ba
    18d6:	30 2c       	jc	$+98     	;abs 0x1938
    18d8:	31 29       	jnc	$+612    	;abs 0x1b3c
    18da:	00 50       	rla	r0		
    18dc:	50 4d 4d 69 	br	26957(r13)	;0x694d(r13)
    18e0:	6e 3a       	jl	$-802    	;abs 0x15be
    18e2:	28 31       	jn	$+594    	;abs 0x1b34
    18e4:	2c 31       	jn	$+602    	;abs 0x1b3e
    18e6:	29 3d       	jmp	$+596    	;abs 0x1b3a
    18e8:	61 72       	subc.b	#4,	r1	;r2 As==10
    18ea:	28 31       	jn	$+594    	;abs 0x1b3c
    18ec:	37 2c       	jc	$+112    	;abs 0x195c
    18ee:	37 29       	jnc	$+624    	;abs 0x1b5e
    18f0:	3b 30       	jn	$+120    	;abs 0x1968
    18f2:	3b 37       	jge	$-392    	;abs 0x176a
    18f4:	3b 28       	jnc	$+120    	;abs 0x196c
    18f6:	30 2c       	jc	$+98     	;abs 0x1958
    18f8:	31 32       	jn	$-924    	;abs 0x155c
    18fa:	29 00 50 50 	mova	&0x05050,r9	
    18fe:	4d 4d       	mov.b	r13,	r13	
    1900:	61 78       	subc.b	@r8,	r1	
    1902:	3a 28       	jnc	$+118    	;abs 0x1978
    1904:	31 2c       	jc	$+100    	;abs 0x1968
    1906:	31 29       	jnc	$+612    	;abs 0x1b6a
    1908:	00 56       	add	r6,	r0	
    190a:	61 6c       	addc.b	@r12,	r1	
    190c:	6f 72       	subc.b	#4,	r15	;r2 As==10
    190e:	41 75       	subc.b	r5,	r1	
    1910:	78 3a       	jl	$-782    	;abs 0x1602
    1912:	28 32       	jn	$-942    	;abs 0x1564
    1914:	39 2c       	jc	$+116    	;abs 0x1988
    1916:	31 29       	jnc	$+612    	;abs 0x1b7a
    1918:	00 70       	subc	r0,	r0	
    191a:	72 6f       	addc.b	@r15+,	r2	
    191c:	63 65       	.word	0x6563;	????	Illegal as 2-op instr
    191e:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    1920:	5f 72 63 3a 	subc.b	&0x3a63,r15	
    1924:	46 28       	jnc	$+142    	;abs 0x19b2
    1926:	30 2c       	jc	$+98     	;abs 0x1988
    1928:	32 30       	jn	$+102    	;abs 0x198e
    192a:	29 00 6c 6f 	mova	&0x06f6c,r9	
    192e:	61 64       	addc.b	@r4,	r1	
    1930:	5f 74 72 61 	subc.b	24946(r4),r15	;0x6172(r4)
    1934:	6e 73       	subc.b	#2,	r14	;r3 As==10
    1936:	6d 69       	addc.b	@r9,	r13	
    1938:	74 74       	subc.b	@r4+,	r4	
    193a:	65 72       	subc.b	#4,	r5	;r2 As==10
    193c:	5f 76 61 6c 	subc.b	27745(r6),r15	;0x6c61(r6)
    1940:	75 65       	addc.b	@r5+,	r5	
    1942:	73 3a       	jl	$-792    	;abs 0x162a
    1944:	46 28       	jnc	$+142    	;abs 0x19d2
    1946:	30 2c       	jc	$+98     	;abs 0x19a8
    1948:	32 30       	jn	$+102    	;abs 0x19ae
    194a:	29 00 64 72 	mova	&0x07264,r9	
    194e:	61 77       	subc.b	@r7,	r1	
    1950:	5f 72 63 5f 	subc.b	&0x5f63,r15	
    1954:	69 6e       	addc.b	@r14,	r9	
    1956:	70 75       	subc.b	@r5+,	r0	
    1958:	74 73       	subc.b	#-1,	r4	;r3 As==11
    195a:	3a 46       	mov	@r6+,	r10	
    195c:	28 30       	jn	$+82     	;abs 0x19ae
    195e:	2c 32       	jn	$-934    	;abs 0x15b8
    1960:	30 29       	jnc	$+610    	;abs 0x1bc2
    1962:	00 72       	subc	r2,	r0	
    1964:	61 77       	subc.b	@r7,	r1	
    1966:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    196a:	2c 32       	jn	$-934    	;abs 0x15c4
    196c:	29 00 69 3a 	mova	&0x03a69,r9	
    1970:	72 28       	jnc	$+230    	;abs 0x1a56
    1972:	30 2c       	jc	$+98     	;abs 0x19d4
    1974:	34 29       	jnc	$+618    	;abs 0x1bde
    1976:	00 6b       	addc	r11,	r0	
    1978:	3a 72       	subc	#8,	r10	;r2 As==11
    197a:	28 30       	jn	$+82     	;abs 0x19cc
    197c:	2c 34       	jge	$+90     	;abs 0x19d6
    197e:	29 00 68 3a 	mova	&0x03a68,r9	
    1982:	72 28       	jnc	$+230    	;abs 0x1a68
    1984:	30 2c       	jc	$+98     	;abs 0x19e6
    1986:	34 29       	jnc	$+618    	;abs 0x1bf0
    1988:	00 66       	addc	r6,	r0	
    198a:	69 6e       	addc.b	@r14,	r9	
    198c:	64 5f       	add.b	@r15,	r4	
    198e:	66 69       	addc.b	@r9,	r6	
    1990:	72 73       	subc.b	#-1,	r2	;r3 As==11
    1992:	74 3a       	jl	$-790    	;abs 0x167c
    1994:	46 28       	jnc	$+142    	;abs 0x1a22
    1996:	30 2c       	jc	$+98     	;abs 0x19f8
    1998:	31 29       	jnc	$+612    	;abs 0x1bfc
    199a:	00 73       	sbc	r0		
    199c:	74 61       	addc.b	@r1+,	r4	
    199e:	72 74       	subc.b	@r4+,	r2	
    19a0:	61 64       	addc.b	@r4,	r1	
    19a2:	64 72       	subc.b	#4,	r4	;r2 As==10
    19a4:	65 73       	subc.b	#2,	r5	;r3 As==10
    19a6:	73 3a       	jl	$-792    	;abs 0x168e
    19a8:	50 28       	jnc	$+162    	;abs 0x1a4a
    19aa:	30 2c       	jc	$+98     	;abs 0x1a0c
    19ac:	31 29       	jnc	$+612    	;abs 0x1c10
    19ae:	00 6d       	addc	r13,	r0	
    19b0:	61 69       	addc.b	@r9,	r1	
    19b2:	6e 5f       	add.b	@r15,	r14	
    19b4:	6c 6f       	addc.b	@r15,	r12	
    19b6:	6f 70       	subc.b	@r0,	r15	
    19b8:	3a 46       	mov	@r6+,	r10	
    19ba:	28 30       	jn	$+82     	;abs 0x1a0c
    19bc:	2c 32       	jn	$-934    	;abs 0x1616
    19be:	30 29       	jnc	$+610    	;abs 0x1c20
    19c0:	00 73       	sbc	r0		
    19c2:	65 74       	subc.b	@r4,	r5	
    19c4:	75 70 3a 46 	subc.b	#17978,	r5	;#0x463a
    19c8:	28 30       	jn	$+82     	;abs 0x1a1a
    19ca:	2c 32       	jn	$-934    	;abs 0x1624
    19cc:	30 29       	jnc	$+610    	;abs 0x1c2e
    19ce:	00 61       	addc	r1,	r0	
    19d0:	6e 61       	addc.b	@r1,	r14	
    19d2:	6c 6f       	addc.b	@r15,	r12	
    19d4:	67 5f       	add.b	@r15,	r7	
    19d6:	67 72       	subc.b	#4,	r7	;r2 As==10
    19d8:	61 70       	subc.b	@r0,	r1	
    19da:	68 5f       	add.b	@r15,	r8	
    19dc:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    19de:	65 61       	addc.b	@r1,	r5	
    19e0:	72 3a       	jl	$-794    	;abs 0x16c6
    19e2:	46 28       	jnc	$+142    	;abs 0x1a70
    19e4:	30 2c       	jc	$+98     	;abs 0x1a46
    19e6:	32 30       	jn	$+102    	;abs 0x1a4c
    19e8:	29 00 4d 50 	mova	&0x0504d,r9	
    19ec:	59 3a       	jl	$-844    	;abs 0x16a0
    19ee:	47 28       	jnc	$+144    	;abs 0x1a7e
    19f0:	31 37       	jge	$-412    	;abs 0x1854
    19f2:	2c 38       	jl	$+90     	;abs 0x1a4c
    19f4:	29 00 4d 50 	mova	&0x0504d,r9	
    19f8:	59 53       	inc.b	r9		
    19fa:	3a 47       	mov	@r7+,	r10	
    19fc:	28 31       	jn	$+594    	;abs 0x1c4e
    19fe:	37 2c       	jc	$+112    	;abs 0x1a6e
    1a00:	38 29       	jnc	$+626    	;abs 0x1c72
    1a02:	00 4d       	br	r13		
    1a04:	41 43       	clr.b	r1		
    1a06:	3a 47       	mov	@r7+,	r10	
    1a08:	28 31       	jn	$+594    	;abs 0x1c5a
    1a0a:	37 2c       	jc	$+112    	;abs 0x1a7a
    1a0c:	38 29       	jnc	$+626    	;abs 0x1c7e
    1a0e:	00 4d       	br	r13		
    1a10:	41 43       	clr.b	r1		
    1a12:	53 3a       	jl	$-856    	;abs 0x16ba
    1a14:	47 28       	jnc	$+144    	;abs 0x1aa4
    1a16:	31 37       	jge	$-412    	;abs 0x187a
    1a18:	2c 38       	jl	$+90     	;abs 0x1a72
    1a1a:	29 00 4f 50 	mova	&0x0504f,r9	
    1a1e:	32 3a       	jl	$-922    	;abs 0x1684
    1a20:	47 28       	jnc	$+144    	;abs 0x1ab0
    1a22:	31 37       	jge	$-412    	;abs 0x1886
    1a24:	2c 38       	jl	$+90     	;abs 0x1a7e
    1a26:	29 00 52 45 	mova	&0x04552,r9	
    1a2a:	53 4c       	.word	0x4c53;	????	Illegal as 2-op instr
    1a2c:	4f 3a       	jl	$-864    	;abs 0x16cc
    1a2e:	47 28       	jnc	$+144    	;abs 0x1abe
    1a30:	31 37       	jge	$-412    	;abs 0x1894
    1a32:	2c 38       	jl	$+90     	;abs 0x1a8c
    1a34:	29 00 52 45 	mova	&0x04552,r9	
    1a38:	53 48       	.word	0x4853;	????	Illegal as 2-op instr
    1a3a:	49 3a       	jl	$-876    	;abs 0x16ce
    1a3c:	47 28       	jnc	$+144    	;abs 0x1acc
    1a3e:	31 37       	jge	$-412    	;abs 0x18a2
    1a40:	2c 38       	jl	$+90     	;abs 0x1a9a
    1a42:	29 00 53 55 	mova	&0x05553,r9	
    1a46:	4d 45       	mov.b	r5,	r13	
    1a48:	58 54 3a 47 	add.b	18234(r4),r8	;0x473a(r4)
    1a4c:	28 31       	jn	$+594    	;abs 0x1c9e
    1a4e:	37 2c       	jc	$+112    	;abs 0x1abe
    1a50:	38 29       	jnc	$+626    	;abs 0x1cc2
    1a52:	00 70       	subc	r0,	r0	
    1a54:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1a56:	74 31       	jn	$+746    	;abs 0x1d40
    1a58:	3a 47       	mov	@r7+,	r10	
    1a5a:	28 31       	jn	$+594    	;abs 0x1cac
    1a5c:	35 2c       	jc	$+108    	;abs 0x1ac8
    1a5e:	34 29       	jnc	$+618    	;abs 0x1cc8
    1a60:	00 70       	subc	r0,	r0	
    1a62:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1a64:	74 32       	jn	$-790    	;abs 0x174e
    1a66:	3a 47       	mov	@r7+,	r10	
    1a68:	28 31       	jn	$+594    	;abs 0x1cba
    1a6a:	35 2c       	jc	$+108    	;abs 0x1ad6
    1a6c:	34 29       	jnc	$+618    	;abs 0x1cd6
    1a6e:	00 70       	subc	r0,	r0	
    1a70:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1a72:	74 33       	jn	$-278    	;abs 0x195c
    1a74:	3a 47       	mov	@r7+,	r10	
    1a76:	28 31       	jn	$+594    	;abs 0x1cc8
    1a78:	35 2c       	jc	$+108    	;abs 0x1ae4
    1a7a:	35 29       	jnc	$+620    	;abs 0x1ce6
    1a7c:	00 70       	subc	r0,	r0	
    1a7e:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1a80:	74 34       	jge	$+234    	;abs 0x1b6a
    1a82:	3a 47       	mov	@r7+,	r10	
    1a84:	28 31       	jn	$+594    	;abs 0x1cd6
    1a86:	35 2c       	jc	$+108    	;abs 0x1af2
    1a88:	35 29       	jnc	$+620    	;abs 0x1cf4
    1a8a:	00 70       	subc	r0,	r0	
    1a8c:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1a8e:	74 35       	jge	$+746    	;abs 0x1d78
    1a90:	3a 47       	mov	@r7+,	r10	
    1a92:	28 31       	jn	$+594    	;abs 0x1ce4
    1a94:	35 2c       	jc	$+108    	;abs 0x1b00
    1a96:	35 29       	jnc	$+620    	;abs 0x1d02
    1a98:	00 70       	subc	r0,	r0	
    1a9a:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1a9c:	74 36       	jge	$-790    	;abs 0x1786
    1a9e:	3a 47       	mov	@r7+,	r10	
    1aa0:	28 31       	jn	$+594    	;abs 0x1cf2
    1aa2:	35 2c       	jc	$+108    	;abs 0x1b0e
    1aa4:	35 29       	jnc	$+620    	;abs 0x1d10
    1aa6:	00 50       	rla	r0		
    1aa8:	31 49       	mov	@r9+,	r1	
    1aaa:	4e 3a       	jl	$-866    	;abs 0x1748
    1aac:	47 28       	jnc	$+144    	;abs 0x1b3c
    1aae:	31 2c       	jc	$+100    	;abs 0x1b12
    1ab0:	32 29       	jnc	$+614    	;abs 0x1d16
    1ab2:	3d 42       	mov	#8,	r13	;r2 As==11
    1ab4:	28 30       	jn	$+82     	;abs 0x1b06
    1ab6:	2c 31       	jn	$+602    	;abs 0x1d10
    1ab8:	31 29       	jnc	$+612    	;abs 0x1d1c
    1aba:	00 50       	rla	r0		
    1abc:	31 4f       	mov	@r15+,	r1	
    1abe:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1ac2:	28 31       	jn	$+594    	;abs 0x1d14
    1ac4:	2c 32       	jn	$-934    	;abs 0x171e
    1ac6:	29 00 50 31 	mova	&0x03150,r9	
    1aca:	44 49       	mov.b	r9,	r4	
    1acc:	52 3a       	jl	$-858    	;abs 0x1772
    1ace:	47 28       	jnc	$+144    	;abs 0x1b5e
    1ad0:	31 2c       	jc	$+100    	;abs 0x1b34
    1ad2:	32 29       	jnc	$+614    	;abs 0x1d38
    1ad4:	00 50       	rla	r0		
    1ad6:	31 49       	mov	@r9+,	r1	
    1ad8:	46 47       	mov.b	r7,	r6	
    1ada:	3a 47       	mov	@r7+,	r10	
    1adc:	28 31       	jn	$+594    	;abs 0x1d2e
    1ade:	2c 32       	jn	$-934    	;abs 0x1738
    1ae0:	29 00 50 31 	mova	&0x03150,r9	
    1ae4:	49 45       	mov.b	r5,	r9	
    1ae6:	53 3a       	jl	$-856    	;abs 0x178e
    1ae8:	47 28       	jnc	$+144    	;abs 0x1b78
    1aea:	31 2c       	jc	$+100    	;abs 0x1b4e
    1aec:	32 29       	jnc	$+614    	;abs 0x1d52
    1aee:	00 50       	rla	r0		
    1af0:	31 49       	mov	@r9+,	r1	
    1af2:	45 3a       	jl	$-884    	;abs 0x177e
    1af4:	47 28       	jnc	$+144    	;abs 0x1b84
    1af6:	31 2c       	jc	$+100    	;abs 0x1b5a
    1af8:	32 29       	jnc	$+614    	;abs 0x1d5e
    1afa:	00 50       	rla	r0		
    1afc:	31 53       	add	#-1,	r1	;r3 As==11
    1afe:	45 4c       	mov.b	r12,	r5	
    1b00:	3a 47       	mov	@r7+,	r10	
    1b02:	28 31       	jn	$+594    	;abs 0x1d54
    1b04:	2c 32       	jn	$-934    	;abs 0x175e
    1b06:	29 00 50 31 	mova	&0x03150,r9	
    1b0a:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1b0e:	47 28       	jnc	$+144    	;abs 0x1b9e
    1b10:	31 2c       	jc	$+100    	;abs 0x1b74
    1b12:	32 29       	jnc	$+614    	;abs 0x1d78
    1b14:	00 50       	rla	r0		
    1b16:	32 49       	mov	@r9+,	r2	
    1b18:	4e 3a       	jl	$-866    	;abs 0x17b6
    1b1a:	47 28       	jnc	$+144    	;abs 0x1baa
    1b1c:	31 2c       	jc	$+100    	;abs 0x1b80
    1b1e:	32 29       	jnc	$+614    	;abs 0x1d84
    1b20:	00 50       	rla	r0		
    1b22:	32 4f       	mov	@r15+,	r2	
    1b24:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1b28:	28 31       	jn	$+594    	;abs 0x1d7a
    1b2a:	2c 32       	jn	$-934    	;abs 0x1784
    1b2c:	29 00 50 32 	mova	&0x03250,r9	
    1b30:	44 49       	mov.b	r9,	r4	
    1b32:	52 3a       	jl	$-858    	;abs 0x17d8
    1b34:	47 28       	jnc	$+144    	;abs 0x1bc4
    1b36:	31 2c       	jc	$+100    	;abs 0x1b9a
    1b38:	32 29       	jnc	$+614    	;abs 0x1d9e
    1b3a:	00 50       	rla	r0		
    1b3c:	32 49       	mov	@r9+,	r2	
    1b3e:	46 47       	mov.b	r7,	r6	
    1b40:	3a 47       	mov	@r7+,	r10	
    1b42:	28 31       	jn	$+594    	;abs 0x1d94
    1b44:	2c 32       	jn	$-934    	;abs 0x179e
    1b46:	29 00 50 32 	mova	&0x03250,r9	
    1b4a:	49 45       	mov.b	r5,	r9	
    1b4c:	53 3a       	jl	$-856    	;abs 0x17f4
    1b4e:	47 28       	jnc	$+144    	;abs 0x1bde
    1b50:	31 2c       	jc	$+100    	;abs 0x1bb4
    1b52:	32 29       	jnc	$+614    	;abs 0x1db8
    1b54:	00 50       	rla	r0		
    1b56:	32 49       	mov	@r9+,	r2	
    1b58:	45 3a       	jl	$-884    	;abs 0x17e4
    1b5a:	47 28       	jnc	$+144    	;abs 0x1bea
    1b5c:	31 2c       	jc	$+100    	;abs 0x1bc0
    1b5e:	32 29       	jnc	$+614    	;abs 0x1dc4
    1b60:	00 50       	rla	r0		
    1b62:	32 53       	add	#-1,	r2	;r3 As==11
    1b64:	45 4c       	mov.b	r12,	r5	
    1b66:	3a 47       	mov	@r7+,	r10	
    1b68:	28 31       	jn	$+594    	;abs 0x1dba
    1b6a:	2c 32       	jn	$-934    	;abs 0x17c4
    1b6c:	29 00 50 32 	mova	&0x03250,r9	
    1b70:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1b74:	47 28       	jnc	$+144    	;abs 0x1c04
    1b76:	31 2c       	jc	$+100    	;abs 0x1bda
    1b78:	32 29       	jnc	$+614    	;abs 0x1dde
    1b7a:	00 50       	rla	r0		
    1b7c:	33 49       	.word	0x4933;	????	Illegal as 2-op instr
    1b7e:	4e 3a       	jl	$-866    	;abs 0x181c
    1b80:	47 28       	jnc	$+144    	;abs 0x1c10
    1b82:	31 2c       	jc	$+100    	;abs 0x1be6
    1b84:	32 29       	jnc	$+614    	;abs 0x1dea
    1b86:	00 50       	rla	r0		
    1b88:	33 4f       	.word	0x4f33;	????	Illegal as 2-op instr
    1b8a:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1b8e:	28 31       	jn	$+594    	;abs 0x1de0
    1b90:	2c 32       	jn	$-934    	;abs 0x17ea
    1b92:	29 00 50 33 	mova	&0x03350,r9	
    1b96:	44 49       	mov.b	r9,	r4	
    1b98:	52 3a       	jl	$-858    	;abs 0x183e
    1b9a:	47 28       	jnc	$+144    	;abs 0x1c2a
    1b9c:	31 2c       	jc	$+100    	;abs 0x1c00
    1b9e:	32 29       	jnc	$+614    	;abs 0x1e04
    1ba0:	00 50       	rla	r0		
    1ba2:	33 53       	.word	0x5333;	????	Illegal as 2-op instr
    1ba4:	45 4c       	mov.b	r12,	r5	
    1ba6:	3a 47       	mov	@r7+,	r10	
    1ba8:	28 31       	jn	$+594    	;abs 0x1dfa
    1baa:	2c 32       	jn	$-934    	;abs 0x1804
    1bac:	29 00 50 33 	mova	&0x03350,r9	
    1bb0:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1bb4:	47 28       	jnc	$+144    	;abs 0x1c44
    1bb6:	31 2c       	jc	$+100    	;abs 0x1c1a
    1bb8:	32 29       	jnc	$+614    	;abs 0x1e1e
    1bba:	00 50       	rla	r0		
    1bbc:	34 49       	mov	@r9+,	r4	
    1bbe:	4e 3a       	jl	$-866    	;abs 0x185c
    1bc0:	47 28       	jnc	$+144    	;abs 0x1c50
    1bc2:	31 2c       	jc	$+100    	;abs 0x1c26
    1bc4:	32 29       	jnc	$+614    	;abs 0x1e2a
    1bc6:	00 50       	rla	r0		
    1bc8:	34 4f       	mov	@r15+,	r4	
    1bca:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1bce:	28 31       	jn	$+594    	;abs 0x1e20
    1bd0:	2c 32       	jn	$-934    	;abs 0x182a
    1bd2:	29 00 50 34 	mova	&0x03450,r9	
    1bd6:	44 49       	mov.b	r9,	r4	
    1bd8:	52 3a       	jl	$-858    	;abs 0x187e
    1bda:	47 28       	jnc	$+144    	;abs 0x1c6a
    1bdc:	31 2c       	jc	$+100    	;abs 0x1c40
    1bde:	32 29       	jnc	$+614    	;abs 0x1e44
    1be0:	00 50       	rla	r0		
    1be2:	34 53       	add	#-1,	r4	;r3 As==11
    1be4:	45 4c       	mov.b	r12,	r5	
    1be6:	3a 47       	mov	@r7+,	r10	
    1be8:	28 31       	jn	$+594    	;abs 0x1e3a
    1bea:	2c 32       	jn	$-934    	;abs 0x1844
    1bec:	29 00 50 34 	mova	&0x03450,r9	
    1bf0:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1bf4:	47 28       	jnc	$+144    	;abs 0x1c84
    1bf6:	31 2c       	jc	$+100    	;abs 0x1c5a
    1bf8:	32 29       	jnc	$+614    	;abs 0x1e5e
    1bfa:	00 50       	rla	r0		
    1bfc:	35 49       	mov	@r9+,	r5	
    1bfe:	4e 3a       	jl	$-866    	;abs 0x189c
    1c00:	47 28       	jnc	$+144    	;abs 0x1c90
    1c02:	31 2c       	jc	$+100    	;abs 0x1c66
    1c04:	32 29       	jnc	$+614    	;abs 0x1e6a
    1c06:	00 50       	rla	r0		
    1c08:	35 4f       	mov	@r15+,	r5	
    1c0a:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1c0e:	28 31       	jn	$+594    	;abs 0x1e60
    1c10:	2c 32       	jn	$-934    	;abs 0x186a
    1c12:	29 00 50 35 	mova	&0x03550,r9	
    1c16:	44 49       	mov.b	r9,	r4	
    1c18:	52 3a       	jl	$-858    	;abs 0x18be
    1c1a:	47 28       	jnc	$+144    	;abs 0x1caa
    1c1c:	31 2c       	jc	$+100    	;abs 0x1c80
    1c1e:	32 29       	jnc	$+614    	;abs 0x1e84
    1c20:	00 50       	rla	r0		
    1c22:	35 53       	add	#-1,	r5	;r3 As==11
    1c24:	45 4c       	mov.b	r12,	r5	
    1c26:	3a 47       	mov	@r7+,	r10	
    1c28:	28 31       	jn	$+594    	;abs 0x1e7a
    1c2a:	2c 32       	jn	$-934    	;abs 0x1884
    1c2c:	29 00 50 35 	mova	&0x03550,r9	
    1c30:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1c34:	47 28       	jnc	$+144    	;abs 0x1cc4
    1c36:	31 2c       	jc	$+100    	;abs 0x1c9a
    1c38:	32 29       	jnc	$+614    	;abs 0x1e9e
    1c3a:	00 50       	rla	r0		
    1c3c:	36 49       	mov	@r9+,	r6	
    1c3e:	4e 3a       	jl	$-866    	;abs 0x18dc
    1c40:	47 28       	jnc	$+144    	;abs 0x1cd0
    1c42:	31 2c       	jc	$+100    	;abs 0x1ca6
    1c44:	32 29       	jnc	$+614    	;abs 0x1eaa
    1c46:	00 50       	rla	r0		
    1c48:	36 4f       	mov	@r15+,	r6	
    1c4a:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1c4e:	28 31       	jn	$+594    	;abs 0x1ea0
    1c50:	2c 32       	jn	$-934    	;abs 0x18aa
    1c52:	29 00 50 36 	mova	&0x03650,r9	
    1c56:	44 49       	mov.b	r9,	r4	
    1c58:	52 3a       	jl	$-858    	;abs 0x18fe
    1c5a:	47 28       	jnc	$+144    	;abs 0x1cea
    1c5c:	31 2c       	jc	$+100    	;abs 0x1cc0
    1c5e:	32 29       	jnc	$+614    	;abs 0x1ec4
    1c60:	00 50       	rla	r0		
    1c62:	36 53       	add	#-1,	r6	;r3 As==11
    1c64:	45 4c       	mov.b	r12,	r5	
    1c66:	3a 47       	mov	@r7+,	r10	
    1c68:	28 31       	jn	$+594    	;abs 0x1eba
    1c6a:	2c 32       	jn	$-934    	;abs 0x18c4
    1c6c:	29 00 50 36 	mova	&0x03650,r9	
    1c70:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1c74:	47 28       	jnc	$+144    	;abs 0x1d04
    1c76:	31 2c       	jc	$+100    	;abs 0x1cda
    1c78:	32 29       	jnc	$+614    	;abs 0x1ede
    1c7a:	00 50       	rla	r0		
    1c7c:	37 49       	mov	@r9+,	r7	
    1c7e:	4e 3a       	jl	$-866    	;abs 0x191c
    1c80:	47 28       	jnc	$+144    	;abs 0x1d10
    1c82:	31 2c       	jc	$+100    	;abs 0x1ce6
    1c84:	32 29       	jnc	$+614    	;abs 0x1eea
    1c86:	00 50       	rla	r0		
    1c88:	37 4f       	mov	@r15+,	r7	
    1c8a:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1c8e:	28 31       	jn	$+594    	;abs 0x1ee0
    1c90:	2c 32       	jn	$-934    	;abs 0x18ea
    1c92:	29 00 50 37 	mova	&0x03750,r9	
    1c96:	44 49       	mov.b	r9,	r4	
    1c98:	52 3a       	jl	$-858    	;abs 0x193e
    1c9a:	47 28       	jnc	$+144    	;abs 0x1d2a
    1c9c:	31 2c       	jc	$+100    	;abs 0x1d00
    1c9e:	32 29       	jnc	$+614    	;abs 0x1f04
    1ca0:	00 50       	rla	r0		
    1ca2:	37 53       	add	#-1,	r7	;r3 As==11
    1ca4:	45 4c       	mov.b	r12,	r5	
    1ca6:	3a 47       	mov	@r7+,	r10	
    1ca8:	28 31       	jn	$+594    	;abs 0x1efa
    1caa:	2c 32       	jn	$-934    	;abs 0x1904
    1cac:	29 00 50 37 	mova	&0x03750,r9	
    1cb0:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1cb4:	47 28       	jnc	$+144    	;abs 0x1d44
    1cb6:	31 2c       	jc	$+100    	;abs 0x1d1a
    1cb8:	32 29       	jnc	$+614    	;abs 0x1f1e
    1cba:	00 50       	rla	r0		
    1cbc:	38 49       	mov	@r9+,	r8	
    1cbe:	4e 3a       	jl	$-866    	;abs 0x195c
    1cc0:	47 28       	jnc	$+144    	;abs 0x1d50
    1cc2:	31 2c       	jc	$+100    	;abs 0x1d26
    1cc4:	32 29       	jnc	$+614    	;abs 0x1f2a
    1cc6:	00 50       	rla	r0		
    1cc8:	38 4f       	mov	@r15+,	r8	
    1cca:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1cce:	28 31       	jn	$+594    	;abs 0x1f20
    1cd0:	2c 32       	jn	$-934    	;abs 0x192a
    1cd2:	29 00 50 38 	mova	&0x03850,r9	
    1cd6:	44 49       	mov.b	r9,	r4	
    1cd8:	52 3a       	jl	$-858    	;abs 0x197e
    1cda:	47 28       	jnc	$+144    	;abs 0x1d6a
    1cdc:	31 2c       	jc	$+100    	;abs 0x1d40
    1cde:	32 29       	jnc	$+614    	;abs 0x1f44
    1ce0:	00 50       	rla	r0		
    1ce2:	38 53       	add	#-1,	r8	;r3 As==11
    1ce4:	45 4c       	mov.b	r12,	r5	
    1ce6:	3a 47       	mov	@r7+,	r10	
    1ce8:	28 31       	jn	$+594    	;abs 0x1f3a
    1cea:	2c 32       	jn	$-934    	;abs 0x1944
    1cec:	29 00 50 38 	mova	&0x03850,r9	
    1cf0:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1cf4:	47 28       	jnc	$+144    	;abs 0x1d84
    1cf6:	31 2c       	jc	$+100    	;abs 0x1d5a
    1cf8:	32 29       	jnc	$+614    	;abs 0x1f5e
    1cfa:	00 55       	add	r5,	r0	
    1cfc:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1cfe:	30 43       	br	#-1		;r3 As==11
    1d00:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    1d04:	47 28       	jnc	$+144    	;abs 0x1d94
    1d06:	31 2c       	jc	$+100    	;abs 0x1d6a
    1d08:	32 29       	jnc	$+614    	;abs 0x1f6e
    1d0a:	00 55       	add	r5,	r0	
    1d0c:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d0e:	30 43       	br	#-1		;r3 As==11
    1d10:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    1d14:	47 28       	jnc	$+144    	;abs 0x1da4
    1d16:	31 2c       	jc	$+100    	;abs 0x1d7a
    1d18:	32 29       	jnc	$+614    	;abs 0x1f7e
    1d1a:	00 55       	add	r5,	r0	
    1d1c:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d1e:	30 42       	br	#8		;r2 As==11
    1d20:	52 30       	jn	$+166    	;abs 0x1dc6
    1d22:	3a 47       	mov	@r7+,	r10	
    1d24:	28 31       	jn	$+594    	;abs 0x1f76
    1d26:	2c 32       	jn	$-934    	;abs 0x1980
    1d28:	29 00 55 43 	mova	&0x04355,r9	
    1d2c:	41 30       	jn	$+132    	;abs 0x1db0
    1d2e:	42 52       	rla.b	r2		
    1d30:	31 3a       	jl	$-924    	;abs 0x1994
    1d32:	47 28       	jnc	$+144    	;abs 0x1dc2
    1d34:	31 2c       	jc	$+100    	;abs 0x1d98
    1d36:	32 29       	jnc	$+614    	;abs 0x1f9c
    1d38:	00 55       	add	r5,	r0	
    1d3a:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d3c:	30 4d       	br	@r13+		
    1d3e:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1d40:	4c 3a       	jl	$-870    	;abs 0x19da
    1d42:	47 28       	jnc	$+144    	;abs 0x1dd2
    1d44:	31 2c       	jc	$+100    	;abs 0x1da8
    1d46:	32 29       	jnc	$+614    	;abs 0x1fac
    1d48:	00 55       	add	r5,	r0	
    1d4a:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d4c:	30 53       	add	#-1,	r0	;r3 As==11
    1d4e:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
    1d52:	47 28       	jnc	$+144    	;abs 0x1de2
    1d54:	31 2c       	jc	$+100    	;abs 0x1db8
    1d56:	32 29       	jnc	$+614    	;abs 0x1fbc
    1d58:	00 55       	add	r5,	r0	
    1d5a:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d5c:	30 52       	add	#8,	r0	;r2 As==11
    1d5e:	58 42 55 46 	mov.b	&0x4655,r8	
    1d62:	3a 47       	mov	@r7+,	r10	
    1d64:	28 31       	jn	$+594    	;abs 0x1fb6
    1d66:	2c 32       	jn	$-934    	;abs 0x19c0
    1d68:	29 00 55 43 	mova	&0x04355,r9	
    1d6c:	41 30       	jn	$+132    	;abs 0x1df0
    1d6e:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    1d72:	46 3a       	jl	$-882    	;abs 0x1a00
    1d74:	47 28       	jnc	$+144    	;abs 0x1e04
    1d76:	31 2c       	jc	$+100    	;abs 0x1dda
    1d78:	32 29       	jnc	$+614    	;abs 0x1fde
    1d7a:	00 55       	add	r5,	r0	
    1d7c:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d7e:	30 41       	ret			
    1d80:	42 43       	clr.b	r2		
    1d82:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1d86:	28 31       	jn	$+594    	;abs 0x1fd8
    1d88:	2c 32       	jn	$-934    	;abs 0x19e2
    1d8a:	29 00 55 43 	mova	&0x04355,r9	
    1d8e:	41 30       	jn	$+132    	;abs 0x1e12
    1d90:	49 52       	add.b	r2,	r9	
    1d92:	54 43       	mov.b	#1,	r4	;r3 As==01
    1d94:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1d98:	28 31       	jn	$+594    	;abs 0x1fea
    1d9a:	2c 32       	jn	$-934    	;abs 0x19f4
    1d9c:	29 00 55 43 	mova	&0x04355,r9	
    1da0:	41 30       	jn	$+132    	;abs 0x1e24
    1da2:	49 52       	add.b	r2,	r9	
    1da4:	52 43       	mov.b	#1,	r2	;r3 As==01
    1da6:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1daa:	28 31       	jn	$+594    	;abs 0x1ffc
    1dac:	2c 32       	jn	$-934    	;abs 0x1a06
    1dae:	29 00 55 43 	mova	&0x04355,r9	
    1db2:	42 30       	jn	$+134    	;abs 0x1e38
    1db4:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1db6:	4c 30       	jn	$+154    	;abs 0x1e50
    1db8:	3a 47       	mov	@r7+,	r10	
    1dba:	28 31       	jn	$+594    	;abs 0x200c
    1dbc:	2c 32       	jn	$-934    	;abs 0x1a16
    1dbe:	29 00 55 43 	mova	&0x04355,r9	
    1dc2:	42 30       	jn	$+134    	;abs 0x1e48
    1dc4:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1dc6:	4c 31       	jn	$+666    	;abs 0x2060
    1dc8:	3a 47       	mov	@r7+,	r10	
    1dca:	28 31       	jn	$+594    	;abs 0x201c
    1dcc:	2c 32       	jn	$-934    	;abs 0x1a26
    1dce:	29 00 55 43 	mova	&0x04355,r9	
    1dd2:	42 30       	jn	$+134    	;abs 0x1e58
    1dd4:	42 52       	rla.b	r2		
    1dd6:	30 3a       	jl	$-926    	;abs 0x1a38
    1dd8:	47 28       	jnc	$+144    	;abs 0x1e68
    1dda:	31 2c       	jc	$+100    	;abs 0x1e3e
    1ddc:	32 29       	jnc	$+614    	;abs 0x2042
    1dde:	00 55       	add	r5,	r0	
    1de0:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1de2:	30 42       	br	#8		;r2 As==11
    1de4:	52 31       	jn	$+678    	;abs 0x208a
    1de6:	3a 47       	mov	@r7+,	r10	
    1de8:	28 31       	jn	$+594    	;abs 0x203a
    1dea:	2c 32       	jn	$-934    	;abs 0x1a44
    1dec:	29 00 55 43 	mova	&0x04355,r9	
    1df0:	42 30       	jn	$+134    	;abs 0x1e76
    1df2:	49 32       	jn	$-876    	;abs 0x1a86
    1df4:	43 49       	.word	0x4943;	????	Illegal as 2-op instr
    1df6:	45 3a       	jl	$-884    	;abs 0x1a82
    1df8:	47 28       	jnc	$+144    	;abs 0x1e88
    1dfa:	31 2c       	jc	$+100    	;abs 0x1e5e
    1dfc:	32 29       	jnc	$+614    	;abs 0x2062
    1dfe:	00 55       	add	r5,	r0	
    1e00:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1e02:	30 53       	add	#-1,	r0	;r3 As==11
    1e04:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
    1e08:	47 28       	jnc	$+144    	;abs 0x1e98
    1e0a:	31 2c       	jc	$+100    	;abs 0x1e6e
    1e0c:	32 29       	jnc	$+614    	;abs 0x2072
    1e0e:	00 55       	add	r5,	r0	
    1e10:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1e12:	30 52       	add	#8,	r0	;r2 As==11
    1e14:	58 42 55 46 	mov.b	&0x4655,r8	
    1e18:	3a 47       	mov	@r7+,	r10	
    1e1a:	28 31       	jn	$+594    	;abs 0x206c
    1e1c:	2c 32       	jn	$-934    	;abs 0x1a76
    1e1e:	29 00 55 43 	mova	&0x04355,r9	
    1e22:	42 30       	jn	$+134    	;abs 0x1ea8
    1e24:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    1e28:	46 3a       	jl	$-882    	;abs 0x1ab6
    1e2a:	47 28       	jnc	$+144    	;abs 0x1eba
    1e2c:	31 2c       	jc	$+100    	;abs 0x1e90
    1e2e:	32 29       	jnc	$+614    	;abs 0x2094
    1e30:	00 55       	add	r5,	r0	
    1e32:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1e34:	30 49       	br	@r9+		
    1e36:	32 43       	mov	#-1,	r2	;r3 As==11
    1e38:	4f 41       	mov.b	r1,	r15	
    1e3a:	3a 47       	mov	@r7+,	r10	
    1e3c:	28 31       	jn	$+594    	;abs 0x208e
    1e3e:	37 2c       	jc	$+112    	;abs 0x1eae
    1e40:	38 29       	jnc	$+626    	;abs 0x20b2
    1e42:	00 55       	add	r5,	r0	
    1e44:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1e46:	30 49       	br	@r9+		
    1e48:	32 43       	mov	#-1,	r2	;r3 As==11
    1e4a:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    1e4c:	3a 47       	mov	@r7+,	r10	
    1e4e:	28 31       	jn	$+594    	;abs 0x20a0
    1e50:	37 2c       	jc	$+112    	;abs 0x1ec0
    1e52:	38 29       	jnc	$+626    	;abs 0x20c4
    1e54:	00 55       	add	r5,	r0	
    1e56:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1e58:	31 43       	mov	#-1,	r1	;r3 As==11
    1e5a:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    1e5e:	47 28       	jnc	$+144    	;abs 0x1eee
    1e60:	31 2c       	jc	$+100    	;abs 0x1ec4
    1e62:	32 29       	jnc	$+614    	;abs 0x20c8
    1e64:	00 55       	add	r5,	r0	
    1e66:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1e68:	31 43       	mov	#-1,	r1	;r3 As==11
    1e6a:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    1e6e:	47 28       	jnc	$+144    	;abs 0x1efe
    1e70:	31 2c       	jc	$+100    	;abs 0x1ed4
    1e72:	32 29       	jnc	$+614    	;abs 0x20d8
    1e74:	00 55       	add	r5,	r0	
    1e76:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1e78:	31 42       	mov	#8,	r1	;r2 As==11
    1e7a:	52 30       	jn	$+166    	;abs 0x1f20
    1e7c:	3a 47       	mov	@r7+,	r10	
    1e7e:	28 31       	jn	$+594    	;abs 0x20d0
    1e80:	2c 32       	jn	$-934    	;abs 0x1ada
    1e82:	29 00 55 43 	mova	&0x04355,r9	
    1e86:	41 31       	jn	$+644    	;abs 0x210a
    1e88:	42 52       	rla.b	r2		
    1e8a:	31 3a       	jl	$-924    	;abs 0x1aee
    1e8c:	47 28       	jnc	$+144    	;abs 0x1f1c
    1e8e:	31 2c       	jc	$+100    	;abs 0x1ef2
    1e90:	32 29       	jnc	$+614    	;abs 0x20f6
    1e92:	00 55       	add	r5,	r0	
    1e94:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1e96:	31 4d       	mov	@r13+,	r1	
    1e98:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1e9a:	4c 3a       	jl	$-870    	;abs 0x1b34
    1e9c:	47 28       	jnc	$+144    	;abs 0x1f2c
    1e9e:	31 2c       	jc	$+100    	;abs 0x1f02
    1ea0:	32 29       	jnc	$+614    	;abs 0x2106
    1ea2:	00 55       	add	r5,	r0	
    1ea4:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1ea6:	31 53       	add	#-1,	r1	;r3 As==11
    1ea8:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
    1eac:	47 28       	jnc	$+144    	;abs 0x1f3c
    1eae:	31 2c       	jc	$+100    	;abs 0x1f12
    1eb0:	32 29       	jnc	$+614    	;abs 0x2116
    1eb2:	00 55       	add	r5,	r0	
    1eb4:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1eb6:	31 52       	add	#8,	r1	;r2 As==11
    1eb8:	58 42 55 46 	mov.b	&0x4655,r8	
    1ebc:	3a 47       	mov	@r7+,	r10	
    1ebe:	28 31       	jn	$+594    	;abs 0x2110
    1ec0:	2c 32       	jn	$-934    	;abs 0x1b1a
    1ec2:	29 00 55 43 	mova	&0x04355,r9	
    1ec6:	41 31       	jn	$+644    	;abs 0x214a
    1ec8:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    1ecc:	46 3a       	jl	$-882    	;abs 0x1b5a
    1ece:	47 28       	jnc	$+144    	;abs 0x1f5e
    1ed0:	31 2c       	jc	$+100    	;abs 0x1f34
    1ed2:	32 29       	jnc	$+614    	;abs 0x2138
    1ed4:	00 55       	add	r5,	r0	
    1ed6:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1ed8:	31 41       	pop	r1		
    1eda:	42 43       	clr.b	r2		
    1edc:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1ee0:	28 31       	jn	$+594    	;abs 0x2132
    1ee2:	2c 32       	jn	$-934    	;abs 0x1b3c
    1ee4:	29 00 55 43 	mova	&0x04355,r9	
    1ee8:	41 31       	jn	$+644    	;abs 0x216c
    1eea:	49 52       	add.b	r2,	r9	
    1eec:	54 43       	mov.b	#1,	r4	;r3 As==01
    1eee:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1ef2:	28 31       	jn	$+594    	;abs 0x2144
    1ef4:	2c 32       	jn	$-934    	;abs 0x1b4e
    1ef6:	29 00 55 43 	mova	&0x04355,r9	
    1efa:	41 31       	jn	$+644    	;abs 0x217e
    1efc:	49 52       	add.b	r2,	r9	
    1efe:	52 43       	mov.b	#1,	r2	;r3 As==01
    1f00:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1f04:	28 31       	jn	$+594    	;abs 0x2156
    1f06:	2c 32       	jn	$-934    	;abs 0x1b60
    1f08:	29 00 55 43 	mova	&0x04355,r9	
    1f0c:	42 31       	jn	$+646    	;abs 0x2192
    1f0e:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1f10:	4c 30       	jn	$+154    	;abs 0x1faa
    1f12:	3a 47       	mov	@r7+,	r10	
    1f14:	28 31       	jn	$+594    	;abs 0x2166
    1f16:	2c 32       	jn	$-934    	;abs 0x1b70
    1f18:	29 00 55 43 	mova	&0x04355,r9	
    1f1c:	42 31       	jn	$+646    	;abs 0x21a2
    1f1e:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1f20:	4c 31       	jn	$+666    	;abs 0x21ba
    1f22:	3a 47       	mov	@r7+,	r10	
    1f24:	28 31       	jn	$+594    	;abs 0x2176
    1f26:	2c 32       	jn	$-934    	;abs 0x1b80
    1f28:	29 00 55 43 	mova	&0x04355,r9	
    1f2c:	42 31       	jn	$+646    	;abs 0x21b2
    1f2e:	42 52       	rla.b	r2		
    1f30:	30 3a       	jl	$-926    	;abs 0x1b92
    1f32:	47 28       	jnc	$+144    	;abs 0x1fc2
    1f34:	31 2c       	jc	$+100    	;abs 0x1f98
    1f36:	32 29       	jnc	$+614    	;abs 0x219c
    1f38:	00 55       	add	r5,	r0	
    1f3a:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1f3c:	31 42       	mov	#8,	r1	;r2 As==11
    1f3e:	52 31       	jn	$+678    	;abs 0x21e4
    1f40:	3a 47       	mov	@r7+,	r10	
    1f42:	28 31       	jn	$+594    	;abs 0x2194
    1f44:	2c 32       	jn	$-934    	;abs 0x1b9e
    1f46:	29 00 55 43 	mova	&0x04355,r9	
    1f4a:	42 31       	jn	$+646    	;abs 0x21d0
    1f4c:	49 32       	jn	$-876    	;abs 0x1be0
    1f4e:	43 49       	.word	0x4943;	????	Illegal as 2-op instr
    1f50:	45 3a       	jl	$-884    	;abs 0x1bdc
    1f52:	47 28       	jnc	$+144    	;abs 0x1fe2
    1f54:	31 2c       	jc	$+100    	;abs 0x1fb8
    1f56:	32 29       	jnc	$+614    	;abs 0x21bc
    1f58:	00 55       	add	r5,	r0	
    1f5a:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1f5c:	31 53       	add	#-1,	r1	;r3 As==11
    1f5e:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
    1f62:	47 28       	jnc	$+144    	;abs 0x1ff2
    1f64:	31 2c       	jc	$+100    	;abs 0x1fc8
    1f66:	32 29       	jnc	$+614    	;abs 0x21cc
    1f68:	00 55       	add	r5,	r0	
    1f6a:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1f6c:	31 52       	add	#8,	r1	;r2 As==11
    1f6e:	58 42 55 46 	mov.b	&0x4655,r8	
    1f72:	3a 47       	mov	@r7+,	r10	
    1f74:	28 31       	jn	$+594    	;abs 0x21c6
    1f76:	2c 32       	jn	$-934    	;abs 0x1bd0
    1f78:	29 00 55 43 	mova	&0x04355,r9	
    1f7c:	42 31       	jn	$+646    	;abs 0x2202
    1f7e:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    1f82:	46 3a       	jl	$-882    	;abs 0x1c10
    1f84:	47 28       	jnc	$+144    	;abs 0x2014
    1f86:	31 2c       	jc	$+100    	;abs 0x1fea
    1f88:	32 29       	jnc	$+614    	;abs 0x21ee
    1f8a:	00 55       	add	r5,	r0	
    1f8c:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1f8e:	31 49       	mov	@r9+,	r1	
    1f90:	32 43       	mov	#-1,	r2	;r3 As==11
    1f92:	4f 41       	mov.b	r1,	r15	
    1f94:	3a 47       	mov	@r7+,	r10	
    1f96:	28 31       	jn	$+594    	;abs 0x21e8
    1f98:	37 2c       	jc	$+112    	;abs 0x2008
    1f9a:	38 29       	jnc	$+626    	;abs 0x220c
    1f9c:	00 55       	add	r5,	r0	
    1f9e:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1fa0:	31 49       	mov	@r9+,	r1	
    1fa2:	32 43       	mov	#-1,	r2	;r3 As==11
    1fa4:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    1fa6:	3a 47       	mov	@r7+,	r10	
    1fa8:	28 31       	jn	$+594    	;abs 0x21fa
    1faa:	37 2c       	jc	$+112    	;abs 0x201a
    1fac:	38 29       	jnc	$+626    	;abs 0x221e
    1fae:	00 55       	add	r5,	r0	
    1fb0:	43 31       	jn	$+648    	;abs 0x2238
    1fb2:	49 45       	mov.b	r5,	r9	
    1fb4:	3a 47       	mov	@r7+,	r10	
    1fb6:	28 31       	jn	$+594    	;abs 0x2208
    1fb8:	2c 32       	jn	$-934    	;abs 0x1c12
    1fba:	29 00 55 43 	mova	&0x04355,r9	
    1fbe:	31 49       	mov	@r9+,	r1	
    1fc0:	46 47       	mov.b	r7,	r6	
    1fc2:	3a 47       	mov	@r7+,	r10	
    1fc4:	28 31       	jn	$+594    	;abs 0x2216
    1fc6:	2c 32       	jn	$-934    	;abs 0x1c20
    1fc8:	29 00 54 41 	mova	&0x04154,r9	
    1fcc:	30 49       	br	@r9+		
    1fce:	56 3a       	jl	$-850    	;abs 0x1c7c
    1fd0:	47 28       	jnc	$+144    	;abs 0x2060
    1fd2:	31 37       	jge	$-412    	;abs 0x1e36
    1fd4:	2c 38       	jl	$+90     	;abs 0x202e
    1fd6:	29 00 54 41 	mova	&0x04154,r9	
    1fda:	30 43       	br	#-1		;r3 As==11
    1fdc:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1fe0:	28 31       	jn	$+594    	;abs 0x2232
    1fe2:	37 2c       	jc	$+112    	;abs 0x2052
    1fe4:	38 29       	jnc	$+626    	;abs 0x2256
    1fe6:	00 54       	add	r4,	r0	
    1fe8:	41 30       	jn	$+132    	;abs 0x206c
    1fea:	52 3a       	jl	$-858    	;abs 0x1c90
    1fec:	47 28       	jnc	$+144    	;abs 0x207c
    1fee:	31 37       	jge	$-412    	;abs 0x1e52
    1ff0:	2c 38       	jl	$+90     	;abs 0x204a
    1ff2:	29 00 54 41 	mova	&0x04154,r9	
    1ff6:	30 43       	br	#-1		;r3 As==11
    1ff8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1ffa:	4c 30       	jn	$+154    	;abs 0x2094
    1ffc:	3a 47       	mov	@r7+,	r10	
    1ffe:	28 31       	jn	$+594    	;abs 0x2250
    2000:	37 2c       	jc	$+112    	;abs 0x2070
    2002:	38 29       	jnc	$+626    	;abs 0x2274
    2004:	00 54       	add	r4,	r0	
    2006:	41 30       	jn	$+132    	;abs 0x208a
    2008:	43 43       	clr.b	#0		;r3 As==00
    200a:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    200e:	47 28       	jnc	$+144    	;abs 0x209e
    2010:	31 37       	jge	$-412    	;abs 0x1e74
    2012:	2c 38       	jl	$+90     	;abs 0x206c
    2014:	29 00 54 41 	mova	&0x04154,r9	
    2018:	30 43       	br	#-1		;r3 As==11
    201a:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    201c:	30 3a       	jl	$-926    	;abs 0x1c7e
    201e:	47 28       	jnc	$+144    	;abs 0x20ae
    2020:	31 37       	jge	$-412    	;abs 0x1e84
    2022:	2c 38       	jl	$+90     	;abs 0x207c
    2024:	29 00 54 41 	mova	&0x04154,r9	
    2028:	30 43       	br	#-1		;r3 As==11
    202a:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    202c:	31 3a       	jl	$-924    	;abs 0x1c90
    202e:	47 28       	jnc	$+144    	;abs 0x20be
    2030:	31 37       	jge	$-412    	;abs 0x1e94
    2032:	2c 38       	jl	$+90     	;abs 0x208c
    2034:	29 00 54 41 	mova	&0x04154,r9	
    2038:	30 43       	br	#-1		;r3 As==11
    203a:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    203c:	4c 32       	jn	$-870    	;abs 0x1cd6
    203e:	3a 47       	mov	@r7+,	r10	
    2040:	28 31       	jn	$+594    	;abs 0x2292
    2042:	37 2c       	jc	$+112    	;abs 0x20b2
    2044:	38 29       	jnc	$+626    	;abs 0x22b6
    2046:	00 54       	add	r4,	r0	
    2048:	41 30       	jn	$+132    	;abs 0x20cc
    204a:	43 43       	clr.b	#0		;r3 As==00
    204c:	52 32       	jn	$-858    	;abs 0x1cf2
    204e:	3a 47       	mov	@r7+,	r10	
    2050:	28 31       	jn	$+594    	;abs 0x22a2
    2052:	37 2c       	jc	$+112    	;abs 0x20c2
    2054:	38 29       	jnc	$+626    	;abs 0x22c6
    2056:	00 74       	subc	r4,	r0	
    2058:	69 6d       	addc.b	@r13,	r9	
    205a:	65 72       	subc.b	#4,	r5	;r2 As==10
    205c:	61 3a       	jl	$-828    	;abs 0x1d20
    205e:	47 28       	jnc	$+144    	;abs 0x20ee
    2060:	31 37       	jge	$-412    	;abs 0x1ec4
    2062:	2c 35       	jge	$+602    	;abs 0x22bc
    2064:	29 00 54 42 	mova	&0x04254,r9	
    2068:	49 56       	add.b	r6,	r9	
    206a:	3a 47       	mov	@r7+,	r10	
    206c:	28 31       	jn	$+594    	;abs 0x22be
    206e:	37 2c       	jc	$+112    	;abs 0x20de
    2070:	38 29       	jnc	$+626    	;abs 0x22e2
    2072:	00 54       	add	r4,	r0	
    2074:	42 43       	clr.b	r2		
    2076:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    207a:	28 31       	jn	$+594    	;abs 0x22cc
    207c:	37 2c       	jc	$+112    	;abs 0x20ec
    207e:	38 29       	jnc	$+626    	;abs 0x22f0
    2080:	00 54       	add	r4,	r0	
    2082:	42 52       	rla.b	r2		
    2084:	3a 47       	mov	@r7+,	r10	
    2086:	28 31       	jn	$+594    	;abs 0x22d8
    2088:	37 2c       	jc	$+112    	;abs 0x20f8
    208a:	38 29       	jnc	$+626    	;abs 0x22fc
    208c:	00 54       	add	r4,	r0	
    208e:	42 43       	clr.b	r2		
    2090:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2092:	4c 30       	jn	$+154    	;abs 0x212c
    2094:	3a 47       	mov	@r7+,	r10	
    2096:	28 31       	jn	$+594    	;abs 0x22e8
    2098:	37 2c       	jc	$+112    	;abs 0x2108
    209a:	38 29       	jnc	$+626    	;abs 0x230c
    209c:	00 54       	add	r4,	r0	
    209e:	42 43       	clr.b	r2		
    20a0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    20a2:	4c 31       	jn	$+666    	;abs 0x233c
    20a4:	3a 47       	mov	@r7+,	r10	
    20a6:	28 31       	jn	$+594    	;abs 0x22f8
    20a8:	37 2c       	jc	$+112    	;abs 0x2118
    20aa:	38 29       	jnc	$+626    	;abs 0x231c
    20ac:	00 54       	add	r4,	r0	
    20ae:	42 43       	clr.b	r2		
    20b0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    20b2:	4c 32       	jn	$-870    	;abs 0x1d4c
    20b4:	3a 47       	mov	@r7+,	r10	
    20b6:	28 31       	jn	$+594    	;abs 0x2308
    20b8:	37 2c       	jc	$+112    	;abs 0x2128
    20ba:	38 29       	jnc	$+626    	;abs 0x232c
    20bc:	00 54       	add	r4,	r0	
    20be:	42 43       	clr.b	r2		
    20c0:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    20c2:	30 3a       	jl	$-926    	;abs 0x1d24
    20c4:	47 28       	jnc	$+144    	;abs 0x2154
    20c6:	31 37       	jge	$-412    	;abs 0x1f2a
    20c8:	2c 38       	jl	$+90     	;abs 0x2122
    20ca:	29 00 54 42 	mova	&0x04254,r9	
    20ce:	43 43       	clr.b	#0		;r3 As==00
    20d0:	52 31       	jn	$+678    	;abs 0x2376
    20d2:	3a 47       	mov	@r7+,	r10	
    20d4:	28 31       	jn	$+594    	;abs 0x2326
    20d6:	37 2c       	jc	$+112    	;abs 0x2146
    20d8:	38 29       	jnc	$+626    	;abs 0x234a
    20da:	00 54       	add	r4,	r0	
    20dc:	42 43       	clr.b	r2		
    20de:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    20e0:	32 3a       	jl	$-922    	;abs 0x1d46
    20e2:	47 28       	jnc	$+144    	;abs 0x2172
    20e4:	31 37       	jge	$-412    	;abs 0x1f48
    20e6:	2c 38       	jl	$+90     	;abs 0x2140
    20e8:	29 00 54 42 	mova	&0x04254,r9	
    20ec:	43 43       	clr.b	#0		;r3 As==00
    20ee:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    20f2:	47 28       	jnc	$+144    	;abs 0x2182
    20f4:	31 37       	jge	$-412    	;abs 0x1f58
    20f6:	2c 38       	jl	$+90     	;abs 0x2150
    20f8:	29 00 54 42 	mova	&0x04254,r9	
    20fc:	43 43       	clr.b	#0		;r3 As==00
    20fe:	54 4c 34 3a 	mov.b	14900(r12),r4	;0x3a34(r12)
    2102:	47 28       	jnc	$+144    	;abs 0x2192
    2104:	31 37       	jge	$-412    	;abs 0x1f68
    2106:	2c 38       	jl	$+90     	;abs 0x2160
    2108:	29 00 54 42 	mova	&0x04254,r9	
    210c:	43 43       	clr.b	#0		;r3 As==00
    210e:	54 4c 35 3a 	mov.b	14901(r12),r4	;0x3a35(r12)
    2112:	47 28       	jnc	$+144    	;abs 0x21a2
    2114:	31 37       	jge	$-412    	;abs 0x1f78
    2116:	2c 38       	jl	$+90     	;abs 0x2170
    2118:	29 00 54 42 	mova	&0x04254,r9	
    211c:	43 43       	clr.b	#0		;r3 As==00
    211e:	54 4c 36 3a 	mov.b	14902(r12),r4	;0x3a36(r12)
    2122:	47 28       	jnc	$+144    	;abs 0x21b2
    2124:	31 37       	jge	$-412    	;abs 0x1f88
    2126:	2c 38       	jl	$+90     	;abs 0x2180
    2128:	29 00 54 42 	mova	&0x04254,r9	
    212c:	43 43       	clr.b	#0		;r3 As==00
    212e:	52 33       	jn	$-346    	;abs 0x1fd4
    2130:	3a 47       	mov	@r7+,	r10	
    2132:	28 31       	jn	$+594    	;abs 0x2384
    2134:	37 2c       	jc	$+112    	;abs 0x21a4
    2136:	38 29       	jnc	$+626    	;abs 0x23a8
    2138:	00 54       	add	r4,	r0	
    213a:	42 43       	clr.b	r2		
    213c:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    213e:	34 3a       	jl	$-918    	;abs 0x1da8
    2140:	47 28       	jnc	$+144    	;abs 0x21d0
    2142:	31 37       	jge	$-412    	;abs 0x1fa6
    2144:	2c 38       	jl	$+90     	;abs 0x219e
    2146:	29 00 54 42 	mova	&0x04254,r9	
    214a:	43 43       	clr.b	#0		;r3 As==00
    214c:	52 35       	jge	$+678    	;abs 0x23f2
    214e:	3a 47       	mov	@r7+,	r10	
    2150:	28 31       	jn	$+594    	;abs 0x23a2
    2152:	37 2c       	jc	$+112    	;abs 0x21c2
    2154:	38 29       	jnc	$+626    	;abs 0x23c6
    2156:	00 54       	add	r4,	r0	
    2158:	42 43       	clr.b	r2		
    215a:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    215c:	36 3a       	jl	$-914    	;abs 0x1dca
    215e:	47 28       	jnc	$+144    	;abs 0x21ee
    2160:	31 37       	jge	$-412    	;abs 0x1fc4
    2162:	2c 38       	jl	$+90     	;abs 0x21bc
    2164:	29 00 74 69 	mova	&0x06974,r9	
    2168:	6d 65       	addc.b	@r5,	r13	
    216a:	72 62       	addc.b	#8,	r2	;r2 As==11
    216c:	3a 47       	mov	@r7+,	r10	
    216e:	28 31       	jn	$+594    	;abs 0x23c0
    2170:	38 2c       	jc	$+114    	;abs 0x21e2
    2172:	35 29       	jnc	$+620    	;abs 0x23de
    2174:	00 44       	br	r4		
    2176:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    2178:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    217a:	4c 3a       	jl	$-870    	;abs 0x1e14
    217c:	47 28       	jnc	$+144    	;abs 0x220c
    217e:	31 2c       	jc	$+100    	;abs 0x21e2
    2180:	32 29       	jnc	$+614    	;abs 0x23e6
    2182:	00 42       	br	r2		
    2184:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    2186:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2188:	4c 31       	jn	$+666    	;abs 0x2422
    218a:	3a 47       	mov	@r7+,	r10	
    218c:	28 31       	jn	$+594    	;abs 0x23de
    218e:	2c 32       	jn	$-934    	;abs 0x1de8
    2190:	29 00 42 43 	mova	&0x04342,r9	
    2194:	53 43       	.word	0x4353;	????	Illegal as 2-op instr
    2196:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    219a:	47 28       	jnc	$+144    	;abs 0x222a
    219c:	31 2c       	jc	$+100    	;abs 0x2200
    219e:	32 29       	jnc	$+614    	;abs 0x2404
    21a0:	00 42       	br	r2		
    21a2:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    21a4:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    21a6:	4c 33       	jn	$-358    	;abs 0x2040
    21a8:	3a 47       	mov	@r7+,	r10	
    21aa:	28 31       	jn	$+594    	;abs 0x23fc
    21ac:	2c 32       	jn	$-934    	;abs 0x1e06
    21ae:	29 00 46 43 	mova	&0x04346,r9	
    21b2:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    21b6:	47 28       	jnc	$+144    	;abs 0x2246
    21b8:	31 37       	jge	$-412    	;abs 0x201c
    21ba:	2c 38       	jl	$+90     	;abs 0x2214
    21bc:	29 00 46 43 	mova	&0x04346,r9	
    21c0:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    21c4:	47 28       	jnc	$+144    	;abs 0x2254
    21c6:	31 37       	jge	$-412    	;abs 0x202a
    21c8:	2c 38       	jl	$+90     	;abs 0x2222
    21ca:	29 00 46 43 	mova	&0x04346,r9	
    21ce:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    21d2:	47 28       	jnc	$+144    	;abs 0x2262
    21d4:	31 37       	jge	$-412    	;abs 0x2038
    21d6:	2c 38       	jl	$+90     	;abs 0x2230
    21d8:	29 00 43 41 	mova	&0x04143,r9	
    21dc:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    21de:	4c 31       	jn	$+666    	;abs 0x2478
    21e0:	3a 47       	mov	@r7+,	r10	
    21e2:	28 31       	jn	$+594    	;abs 0x2434
    21e4:	2c 32       	jn	$-934    	;abs 0x1e3e
    21e6:	29 00 43 41 	mova	&0x04143,r9	
    21ea:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    21ec:	4c 32       	jn	$-870    	;abs 0x1e86
    21ee:	3a 47       	mov	@r7+,	r10	
    21f0:	28 31       	jn	$+594    	;abs 0x2442
    21f2:	2c 32       	jn	$-934    	;abs 0x1e4c
    21f4:	29 00 43 41 	mova	&0x04143,r9	
    21f8:	50 44 3a 47 	br	18234(r4)	;0x473a(r4)
    21fc:	28 31       	jn	$+594    	;abs 0x244e
    21fe:	2c 32       	jn	$-934    	;abs 0x1e58
    2200:	29 00 41 44 	mova	&0x04441,r9	
    2204:	43 31       	jn	$+648    	;abs 0x248c
    2206:	32 43       	mov	#-1,	r2	;r3 As==11
    2208:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    220c:	47 28       	jnc	$+144    	;abs 0x229c
    220e:	31 37       	jge	$-412    	;abs 0x2072
    2210:	2c 38       	jl	$+90     	;abs 0x226a
    2212:	29 00 41 44 	mova	&0x04441,r9	
    2216:	43 31       	jn	$+648    	;abs 0x249e
    2218:	32 43       	mov	#-1,	r2	;r3 As==11
    221a:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    221e:	47 28       	jnc	$+144    	;abs 0x22ae
    2220:	31 37       	jge	$-412    	;abs 0x2084
    2222:	2c 38       	jl	$+90     	;abs 0x227c
    2224:	29 00 41 44 	mova	&0x04441,r9	
    2228:	43 31       	jn	$+648    	;abs 0x24b0
    222a:	32 49       	mov	@r9+,	r2	
    222c:	46 47       	mov.b	r7,	r6	
    222e:	3a 47       	mov	@r7+,	r10	
    2230:	28 31       	jn	$+594    	;abs 0x2482
    2232:	37 2c       	jc	$+112    	;abs 0x22a2
    2234:	38 29       	jnc	$+626    	;abs 0x24a6
    2236:	00 41       	br	r1		
    2238:	44 43       	clr.b	r4		
    223a:	31 32       	jn	$-924    	;abs 0x1e9e
    223c:	49 45       	mov.b	r5,	r9	
    223e:	3a 47       	mov	@r7+,	r10	
    2240:	28 31       	jn	$+594    	;abs 0x2492
    2242:	37 2c       	jc	$+112    	;abs 0x22b2
    2244:	38 29       	jnc	$+626    	;abs 0x24b6
    2246:	00 41       	br	r1		
    2248:	44 43       	clr.b	r4		
    224a:	31 32       	jn	$-924    	;abs 0x1eae
    224c:	49 56       	add.b	r6,	r9	
    224e:	3a 47       	mov	@r7+,	r10	
    2250:	28 31       	jn	$+594    	;abs 0x24a2
    2252:	37 2c       	jc	$+112    	;abs 0x22c2
    2254:	38 29       	jnc	$+626    	;abs 0x24c6
    2256:	00 61       	addc	r1,	r0	
    2258:	64 63       	addc.b	#2,	r4	;r3 As==10
    225a:	31 32       	jn	$-924    	;abs 0x1ebe
    225c:	3a 47       	mov	@r7+,	r10	
    225e:	28 32       	jn	$-942    	;abs 0x1eb0
    2260:	32 2c       	jc	$+102    	;abs 0x22c6
    2262:	37 29       	jnc	$+624    	;abs 0x24d2
    2264:	00 41       	br	r1		
    2266:	44 43       	clr.b	r4		
    2268:	31 32       	jn	$-924    	;abs 0x1ecc
    226a:	4d 45       	mov.b	r5,	r13	
    226c:	4d 30       	jn	$+156    	;abs 0x2308
    226e:	3a 47       	mov	@r7+,	r10	
    2270:	28 31       	jn	$+594    	;abs 0x24c2
    2272:	37 2c       	jc	$+112    	;abs 0x22e2
    2274:	38 29       	jnc	$+626    	;abs 0x24e6
    2276:	00 41       	br	r1		
    2278:	44 43       	clr.b	r4		
    227a:	31 32       	jn	$-924    	;abs 0x1ede
    227c:	4d 45       	mov.b	r5,	r13	
    227e:	4d 31       	jn	$+668    	;abs 0x251a
    2280:	3a 47       	mov	@r7+,	r10	
    2282:	28 31       	jn	$+594    	;abs 0x24d4
    2284:	37 2c       	jc	$+112    	;abs 0x22f4
    2286:	38 29       	jnc	$+626    	;abs 0x24f8
    2288:	00 41       	br	r1		
    228a:	44 43       	clr.b	r4		
    228c:	31 32       	jn	$-924    	;abs 0x1ef0
    228e:	4d 45       	mov.b	r5,	r13	
    2290:	4d 32       	jn	$-868    	;abs 0x1f2c
    2292:	3a 47       	mov	@r7+,	r10	
    2294:	28 31       	jn	$+594    	;abs 0x24e6
    2296:	37 2c       	jc	$+112    	;abs 0x2306
    2298:	38 29       	jnc	$+626    	;abs 0x250a
    229a:	00 41       	br	r1		
    229c:	44 43       	clr.b	r4		
    229e:	31 32       	jn	$-924    	;abs 0x1f02
    22a0:	4d 45       	mov.b	r5,	r13	
    22a2:	4d 33       	jn	$-356    	;abs 0x213e
    22a4:	3a 47       	mov	@r7+,	r10	
    22a6:	28 31       	jn	$+594    	;abs 0x24f8
    22a8:	37 2c       	jc	$+112    	;abs 0x2318
    22aa:	38 29       	jnc	$+626    	;abs 0x251c
    22ac:	00 41       	br	r1		
    22ae:	44 43       	clr.b	r4		
    22b0:	31 32       	jn	$-924    	;abs 0x1f14
    22b2:	4d 45       	mov.b	r5,	r13	
    22b4:	4d 34       	jge	$+156    	;abs 0x2350
    22b6:	3a 47       	mov	@r7+,	r10	
    22b8:	28 31       	jn	$+594    	;abs 0x250a
    22ba:	37 2c       	jc	$+112    	;abs 0x232a
    22bc:	38 29       	jnc	$+626    	;abs 0x252e
    22be:	00 41       	br	r1		
    22c0:	44 43       	clr.b	r4		
    22c2:	31 32       	jn	$-924    	;abs 0x1f26
    22c4:	4d 45       	mov.b	r5,	r13	
    22c6:	4d 35       	jge	$+668    	;abs 0x2562
    22c8:	3a 47       	mov	@r7+,	r10	
    22ca:	28 31       	jn	$+594    	;abs 0x251c
    22cc:	37 2c       	jc	$+112    	;abs 0x233c
    22ce:	38 29       	jnc	$+626    	;abs 0x2540
    22d0:	00 41       	br	r1		
    22d2:	44 43       	clr.b	r4		
    22d4:	31 32       	jn	$-924    	;abs 0x1f38
    22d6:	4d 45       	mov.b	r5,	r13	
    22d8:	4d 36       	jge	$-868    	;abs 0x1f74
    22da:	3a 47       	mov	@r7+,	r10	
    22dc:	28 31       	jn	$+594    	;abs 0x252e
    22de:	37 2c       	jc	$+112    	;abs 0x234e
    22e0:	38 29       	jnc	$+626    	;abs 0x2552
    22e2:	00 41       	br	r1		
    22e4:	44 43       	clr.b	r4		
    22e6:	31 32       	jn	$-924    	;abs 0x1f4a
    22e8:	4d 45       	mov.b	r5,	r13	
    22ea:	4d 37       	jge	$-356    	;abs 0x2186
    22ec:	3a 47       	mov	@r7+,	r10	
    22ee:	28 31       	jn	$+594    	;abs 0x2540
    22f0:	37 2c       	jc	$+112    	;abs 0x2360
    22f2:	38 29       	jnc	$+626    	;abs 0x2564
    22f4:	00 41       	br	r1		
    22f6:	44 43       	clr.b	r4		
    22f8:	31 32       	jn	$-924    	;abs 0x1f5c
    22fa:	4d 45       	mov.b	r5,	r13	
    22fc:	4d 38       	jl	$+156    	;abs 0x2398
    22fe:	3a 47       	mov	@r7+,	r10	
    2300:	28 31       	jn	$+594    	;abs 0x2552
    2302:	37 2c       	jc	$+112    	;abs 0x2372
    2304:	38 29       	jnc	$+626    	;abs 0x2576
    2306:	00 41       	br	r1		
    2308:	44 43       	clr.b	r4		
    230a:	31 32       	jn	$-924    	;abs 0x1f6e
    230c:	4d 45       	mov.b	r5,	r13	
    230e:	4d 39       	jl	$+668    	;abs 0x25aa
    2310:	3a 47       	mov	@r7+,	r10	
    2312:	28 31       	jn	$+594    	;abs 0x2564
    2314:	37 2c       	jc	$+112    	;abs 0x2384
    2316:	38 29       	jnc	$+626    	;abs 0x2588
    2318:	00 41       	br	r1		
    231a:	44 43       	clr.b	r4		
    231c:	31 32       	jn	$-924    	;abs 0x1f80
    231e:	4d 45       	mov.b	r5,	r13	
    2320:	4d 31       	jn	$+668    	;abs 0x25bc
    2322:	30 3a       	jl	$-926    	;abs 0x1f84
    2324:	47 28       	jnc	$+144    	;abs 0x23b4
    2326:	31 37       	jge	$-412    	;abs 0x218a
    2328:	2c 38       	jl	$+90     	;abs 0x2382
    232a:	29 00 41 44 	mova	&0x04441,r9	
    232e:	43 31       	jn	$+648    	;abs 0x25b6
    2330:	32 4d       	mov	@r13+,	r2	
    2332:	45 4d       	mov.b	r13,	r5	
    2334:	31 31       	jn	$+612    	;abs 0x2598
    2336:	3a 47       	mov	@r7+,	r10	
    2338:	28 31       	jn	$+594    	;abs 0x258a
    233a:	37 2c       	jc	$+112    	;abs 0x23aa
    233c:	38 29       	jnc	$+626    	;abs 0x25ae
    233e:	00 41       	br	r1		
    2340:	44 43       	clr.b	r4		
    2342:	31 32       	jn	$-924    	;abs 0x1fa6
    2344:	4d 45       	mov.b	r5,	r13	
    2346:	4d 31       	jn	$+668    	;abs 0x25e2
    2348:	32 3a       	jl	$-922    	;abs 0x1fae
    234a:	47 28       	jnc	$+144    	;abs 0x23da
    234c:	31 37       	jge	$-412    	;abs 0x21b0
    234e:	2c 38       	jl	$+90     	;abs 0x23a8
    2350:	29 00 41 44 	mova	&0x04441,r9	
    2354:	43 31       	jn	$+648    	;abs 0x25dc
    2356:	32 4d       	mov	@r13+,	r2	
    2358:	45 4d       	mov.b	r13,	r5	
    235a:	31 33       	jn	$-412    	;abs 0x21be
    235c:	3a 47       	mov	@r7+,	r10	
    235e:	28 31       	jn	$+594    	;abs 0x25b0
    2360:	37 2c       	jc	$+112    	;abs 0x23d0
    2362:	38 29       	jnc	$+626    	;abs 0x25d4
    2364:	00 41       	br	r1		
    2366:	44 43       	clr.b	r4		
    2368:	31 32       	jn	$-924    	;abs 0x1fcc
    236a:	4d 45       	mov.b	r5,	r13	
    236c:	4d 31       	jn	$+668    	;abs 0x2608
    236e:	34 3a       	jl	$-918    	;abs 0x1fd8
    2370:	47 28       	jnc	$+144    	;abs 0x2400
    2372:	31 37       	jge	$-412    	;abs 0x21d6
    2374:	2c 38       	jl	$+90     	;abs 0x23ce
    2376:	29 00 41 44 	mova	&0x04441,r9	
    237a:	43 31       	jn	$+648    	;abs 0x2602
    237c:	32 4d       	mov	@r13+,	r2	
    237e:	45 4d       	mov.b	r13,	r5	
    2380:	31 35       	jge	$+612    	;abs 0x25e4
    2382:	3a 47       	mov	@r7+,	r10	
    2384:	28 31       	jn	$+594    	;abs 0x25d6
    2386:	37 2c       	jc	$+112    	;abs 0x23f6
    2388:	38 29       	jnc	$+626    	;abs 0x25fa
    238a:	00 41       	br	r1		
    238c:	44 43       	clr.b	r4		
    238e:	31 32       	jn	$-924    	;abs 0x1ff2
    2390:	4d 43       	clr.b	r13		
    2392:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    2396:	47 28       	jnc	$+144    	;abs 0x2426
    2398:	31 2c       	jc	$+100    	;abs 0x23fc
    239a:	32 29       	jnc	$+614    	;abs 0x2600
    239c:	00 41       	br	r1		
    239e:	44 43       	clr.b	r4		
    23a0:	31 32       	jn	$-924    	;abs 0x2004
    23a2:	4d 43       	clr.b	r13		
    23a4:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    23a8:	47 28       	jnc	$+144    	;abs 0x2438
    23aa:	31 2c       	jc	$+100    	;abs 0x240e
    23ac:	32 29       	jnc	$+614    	;abs 0x2612
    23ae:	00 41       	br	r1		
    23b0:	44 43       	clr.b	r4		
    23b2:	31 32       	jn	$-924    	;abs 0x2016
    23b4:	4d 43       	clr.b	r13		
    23b6:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    23ba:	47 28       	jnc	$+144    	;abs 0x244a
    23bc:	31 2c       	jc	$+100    	;abs 0x2420
    23be:	32 29       	jnc	$+614    	;abs 0x2624
    23c0:	00 41       	br	r1		
    23c2:	44 43       	clr.b	r4		
    23c4:	31 32       	jn	$-924    	;abs 0x2028
    23c6:	4d 43       	clr.b	r13		
    23c8:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    23cc:	47 28       	jnc	$+144    	;abs 0x245c
    23ce:	31 2c       	jc	$+100    	;abs 0x2432
    23d0:	32 29       	jnc	$+614    	;abs 0x2636
    23d2:	00 41       	br	r1		
    23d4:	44 43       	clr.b	r4		
    23d6:	31 32       	jn	$-924    	;abs 0x203a
    23d8:	4d 43       	clr.b	r13		
    23da:	54 4c 34 3a 	mov.b	14900(r12),r4	;0x3a34(r12)
    23de:	47 28       	jnc	$+144    	;abs 0x246e
    23e0:	31 2c       	jc	$+100    	;abs 0x2444
    23e2:	32 29       	jnc	$+614    	;abs 0x2648
    23e4:	00 41       	br	r1		
    23e6:	44 43       	clr.b	r4		
    23e8:	31 32       	jn	$-924    	;abs 0x204c
    23ea:	4d 43       	clr.b	r13		
    23ec:	54 4c 35 3a 	mov.b	14901(r12),r4	;0x3a35(r12)
    23f0:	47 28       	jnc	$+144    	;abs 0x2480
    23f2:	31 2c       	jc	$+100    	;abs 0x2456
    23f4:	32 29       	jnc	$+614    	;abs 0x265a
    23f6:	00 41       	br	r1		
    23f8:	44 43       	clr.b	r4		
    23fa:	31 32       	jn	$-924    	;abs 0x205e
    23fc:	4d 43       	clr.b	r13		
    23fe:	54 4c 36 3a 	mov.b	14902(r12),r4	;0x3a36(r12)
    2402:	47 28       	jnc	$+144    	;abs 0x2492
    2404:	31 2c       	jc	$+100    	;abs 0x2468
    2406:	32 29       	jnc	$+614    	;abs 0x266c
    2408:	00 41       	br	r1		
    240a:	44 43       	clr.b	r4		
    240c:	31 32       	jn	$-924    	;abs 0x2070
    240e:	4d 43       	clr.b	r13		
    2410:	54 4c 37 3a 	mov.b	14903(r12),r4	;0x3a37(r12)
    2414:	47 28       	jnc	$+144    	;abs 0x24a4
    2416:	31 2c       	jc	$+100    	;abs 0x247a
    2418:	32 29       	jnc	$+614    	;abs 0x267e
    241a:	00 41       	br	r1		
    241c:	44 43       	clr.b	r4		
    241e:	31 32       	jn	$-924    	;abs 0x2082
    2420:	4d 43       	clr.b	r13		
    2422:	54 4c 38 3a 	mov.b	14904(r12),r4	;0x3a38(r12)
    2426:	47 28       	jnc	$+144    	;abs 0x24b6
    2428:	31 2c       	jc	$+100    	;abs 0x248c
    242a:	32 29       	jnc	$+614    	;abs 0x2690
    242c:	00 41       	br	r1		
    242e:	44 43       	clr.b	r4		
    2430:	31 32       	jn	$-924    	;abs 0x2094
    2432:	4d 43       	clr.b	r13		
    2434:	54 4c 39 3a 	mov.b	14905(r12),r4	;0x3a39(r12)
    2438:	47 28       	jnc	$+144    	;abs 0x24c8
    243a:	31 2c       	jc	$+100    	;abs 0x249e
    243c:	32 29       	jnc	$+614    	;abs 0x26a2
    243e:	00 41       	br	r1		
    2440:	44 43       	clr.b	r4		
    2442:	31 32       	jn	$-924    	;abs 0x20a6
    2444:	4d 43       	clr.b	r13		
    2446:	54 4c 31 30 	mov.b	12337(r12),r4	;0x3031(r12)
    244a:	3a 47       	mov	@r7+,	r10	
    244c:	28 31       	jn	$+594    	;abs 0x269e
    244e:	2c 32       	jn	$-934    	;abs 0x20a8
    2450:	29 00 41 44 	mova	&0x04441,r9	
    2454:	43 31       	jn	$+648    	;abs 0x26dc
    2456:	32 4d       	mov	@r13+,	r2	
    2458:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    245a:	4c 31       	jn	$+666    	;abs 0x26f4
    245c:	31 3a       	jl	$-924    	;abs 0x20c0
    245e:	47 28       	jnc	$+144    	;abs 0x24ee
    2460:	31 2c       	jc	$+100    	;abs 0x24c4
    2462:	32 29       	jnc	$+614    	;abs 0x26c8
    2464:	00 41       	br	r1		
    2466:	44 43       	clr.b	r4		
    2468:	31 32       	jn	$-924    	;abs 0x20cc
    246a:	4d 43       	clr.b	r13		
    246c:	54 4c 31 32 	mov.b	12849(r12),r4	;0x3231(r12)
    2470:	3a 47       	mov	@r7+,	r10	
    2472:	28 31       	jn	$+594    	;abs 0x26c4
    2474:	2c 32       	jn	$-934    	;abs 0x20ce
    2476:	29 00 41 44 	mova	&0x04441,r9	
    247a:	43 31       	jn	$+648    	;abs 0x2702
    247c:	32 4d       	mov	@r13+,	r2	
    247e:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2480:	4c 31       	jn	$+666    	;abs 0x271a
    2482:	33 3a       	jl	$-920    	;abs 0x20ea
    2484:	47 28       	jnc	$+144    	;abs 0x2514
    2486:	31 2c       	jc	$+100    	;abs 0x24ea
    2488:	32 29       	jnc	$+614    	;abs 0x26ee
    248a:	00 41       	br	r1		
    248c:	44 43       	clr.b	r4		
    248e:	31 32       	jn	$-924    	;abs 0x20f2
    2490:	4d 43       	clr.b	r13		
    2492:	54 4c 31 34 	mov.b	13361(r12),r4	;0x3431(r12)
    2496:	3a 47       	mov	@r7+,	r10	
    2498:	28 31       	jn	$+594    	;abs 0x26ea
    249a:	2c 32       	jn	$-934    	;abs 0x20f4
    249c:	29 00 41 44 	mova	&0x04441,r9	
    24a0:	43 31       	jn	$+648    	;abs 0x2728
    24a2:	32 4d       	mov	@r13+,	r2	
    24a4:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    24a6:	4c 31       	jn	$+666    	;abs 0x2740
    24a8:	35 3a       	jl	$-916    	;abs 0x2114
    24aa:	47 28       	jnc	$+144    	;abs 0x253a
    24ac:	31 2c       	jc	$+100    	;abs 0x2510
    24ae:	32 29       	jnc	$+614    	;abs 0x2714
    24b0:	00 44       	br	r4		
    24b2:	41 43       	clr.b	r1		
    24b4:	31 32       	jn	$-924    	;abs 0x2118
    24b6:	5f 30       	jn	$+192    	;abs 0x2576
    24b8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    24ba:	4c 3a       	jl	$-870    	;abs 0x2154
    24bc:	47 28       	jnc	$+144    	;abs 0x254c
    24be:	31 37       	jge	$-412    	;abs 0x2322
    24c0:	2c 38       	jl	$+90     	;abs 0x251a
    24c2:	29 00 44 41 	mova	&0x04144,r9	
    24c6:	43 31       	jn	$+648    	;abs 0x274e
    24c8:	32 5f       	add	@r15+,	r2	
    24ca:	31 43       	mov	#-1,	r1	;r3 As==11
    24cc:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    24d0:	28 31       	jn	$+594    	;abs 0x2722
    24d2:	37 2c       	jc	$+112    	;abs 0x2542
    24d4:	38 29       	jnc	$+626    	;abs 0x2746
    24d6:	00 44       	br	r4		
    24d8:	41 43       	clr.b	r1		
    24da:	31 32       	jn	$-924    	;abs 0x213e
    24dc:	5f 30       	jn	$+192    	;abs 0x259c
    24de:	44 41       	mov.b	r1,	r4	
    24e0:	54 3a       	jl	$-854    	;abs 0x218a
    24e2:	47 28       	jnc	$+144    	;abs 0x2572
    24e4:	31 37       	jge	$-412    	;abs 0x2348
    24e6:	2c 38       	jl	$+90     	;abs 0x2540
    24e8:	29 00 44 41 	mova	&0x04144,r9	
    24ec:	43 31       	jn	$+648    	;abs 0x2774
    24ee:	32 5f       	add	@r15+,	r2	
    24f0:	31 44       	mov	@r4+,	r1	
    24f2:	41 54       	add.b	r4,	r1	
    24f4:	3a 47       	mov	@r7+,	r10	
    24f6:	28 31       	jn	$+594    	;abs 0x2748
    24f8:	37 2c       	jc	$+112    	;abs 0x2568
    24fa:	38 29       	jnc	$+626    	;abs 0x276c
    24fc:	00 44       	br	r4		
    24fe:	4d 41       	mov.b	r1,	r13	
    2500:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2502:	4c 30       	jn	$+154    	;abs 0x259c
    2504:	3a 47       	mov	@r7+,	r10	
    2506:	28 31       	jn	$+594    	;abs 0x2758
    2508:	37 2c       	jc	$+112    	;abs 0x2578
    250a:	38 29       	jnc	$+626    	;abs 0x277c
    250c:	00 44       	br	r4		
    250e:	4d 41       	mov.b	r1,	r13	
    2510:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2512:	4c 31       	jn	$+666    	;abs 0x27ac
    2514:	3a 47       	mov	@r7+,	r10	
    2516:	28 31       	jn	$+594    	;abs 0x2768
    2518:	37 2c       	jc	$+112    	;abs 0x2588
    251a:	38 29       	jnc	$+626    	;abs 0x278c
    251c:	00 44       	br	r4		
    251e:	4d 41       	mov.b	r1,	r13	
    2520:	49 56       	add.b	r6,	r9	
    2522:	3a 47       	mov	@r7+,	r10	
    2524:	28 31       	jn	$+594    	;abs 0x2776
    2526:	37 2c       	jc	$+112    	;abs 0x2596
    2528:	38 29       	jnc	$+626    	;abs 0x279a
    252a:	00 44       	br	r4		
    252c:	4d 41       	mov.b	r1,	r13	
    252e:	30 43       	br	#-1		;r3 As==11
    2530:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    2534:	28 31       	jn	$+594    	;abs 0x2786
    2536:	37 2c       	jc	$+112    	;abs 0x25a6
    2538:	38 29       	jnc	$+626    	;abs 0x27aa
    253a:	00 44       	br	r4		
    253c:	4d 41       	mov.b	r1,	r13	
    253e:	30 53       	add	#-1,	r0	;r3 As==11
    2540:	41 3a       	jl	$-892    	;abs 0x21c4
    2542:	47 28       	jnc	$+144    	;abs 0x25d2
    2544:	31 2c       	jc	$+100    	;abs 0x25a8
    2546:	33 29       	jnc	$+616    	;abs 0x27ae
    2548:	3d 42       	mov	#8,	r13	;r2 As==11
    254a:	28 30       	jn	$+82     	;abs 0x259c
    254c:	2c 35       	jge	$+602    	;abs 0x27a6
    254e:	29 00 44 4d 	mova	&0x04d44,r9	
    2552:	41 30       	jn	$+132    	;abs 0x25d6
    2554:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    2556:	4c 3a       	jl	$-870    	;abs 0x21f0
    2558:	47 28       	jnc	$+144    	;abs 0x25e8
    255a:	31 37       	jge	$-412    	;abs 0x23be
    255c:	2c 38       	jl	$+90     	;abs 0x25b6
    255e:	29 00 44 4d 	mova	&0x04d44,r9	
    2562:	41 30       	jn	$+132    	;abs 0x25e6
    2564:	44 41       	mov.b	r1,	r4	
    2566:	3a 47       	mov	@r7+,	r10	
    2568:	28 31       	jn	$+594    	;abs 0x27ba
    256a:	2c 33       	jn	$-422    	;abs 0x23c4
    256c:	29 00 44 4d 	mova	&0x04d44,r9	
    2570:	41 30       	jn	$+132    	;abs 0x25f4
    2572:	44 41       	mov.b	r1,	r4	
    2574:	4c 3a       	jl	$-870    	;abs 0x220e
    2576:	47 28       	jnc	$+144    	;abs 0x2606
    2578:	31 37       	jge	$-412    	;abs 0x23dc
    257a:	2c 38       	jl	$+90     	;abs 0x25d4
    257c:	29 00 44 4d 	mova	&0x04d44,r9	
    2580:	41 30       	jn	$+132    	;abs 0x2604
    2582:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    2584:	3a 47       	mov	@r7+,	r10	
    2586:	28 31       	jn	$+594    	;abs 0x27d8
    2588:	37 2c       	jc	$+112    	;abs 0x25f8
    258a:	38 29       	jnc	$+626    	;abs 0x27fc
    258c:	00 44       	br	r4		
    258e:	4d 41       	mov.b	r1,	r13	
    2590:	31 43       	mov	#-1,	r1	;r3 As==11
    2592:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    2596:	28 31       	jn	$+594    	;abs 0x27e8
    2598:	37 2c       	jc	$+112    	;abs 0x2608
    259a:	38 29       	jnc	$+626    	;abs 0x280c
    259c:	00 44       	br	r4		
    259e:	4d 41       	mov.b	r1,	r13	
    25a0:	31 53       	add	#-1,	r1	;r3 As==11
    25a2:	41 3a       	jl	$-892    	;abs 0x2226
    25a4:	47 28       	jnc	$+144    	;abs 0x2634
    25a6:	31 2c       	jc	$+100    	;abs 0x260a
    25a8:	33 29       	jnc	$+616    	;abs 0x2810
    25aa:	00 44       	br	r4		
    25ac:	4d 41       	mov.b	r1,	r13	
    25ae:	31 53       	add	#-1,	r1	;r3 As==11
    25b0:	41 4c       	mov.b	r12,	r1	
    25b2:	3a 47       	mov	@r7+,	r10	
    25b4:	28 31       	jn	$+594    	;abs 0x2806
    25b6:	37 2c       	jc	$+112    	;abs 0x2626
    25b8:	38 29       	jnc	$+626    	;abs 0x282a
    25ba:	00 44       	br	r4		
    25bc:	4d 41       	mov.b	r1,	r13	
    25be:	31 44       	mov	@r4+,	r1	
    25c0:	41 3a       	jl	$-892    	;abs 0x2244
    25c2:	47 28       	jnc	$+144    	;abs 0x2652
    25c4:	31 37       	jge	$-412    	;abs 0x2428
    25c6:	2c 38       	jl	$+90     	;abs 0x2620
    25c8:	29 00 44 4d 	mova	&0x04d44,r9	
    25cc:	41 31       	jn	$+644    	;abs 0x2850
    25ce:	44 41       	mov.b	r1,	r4	
    25d0:	4c 3a       	jl	$-870    	;abs 0x226a
    25d2:	47 28       	jnc	$+144    	;abs 0x2662
    25d4:	31 37       	jge	$-412    	;abs 0x2438
    25d6:	2c 38       	jl	$+90     	;abs 0x2630
    25d8:	29 00 44 4d 	mova	&0x04d44,r9	
    25dc:	41 31       	jn	$+644    	;abs 0x2860
    25de:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    25e0:	3a 47       	mov	@r7+,	r10	
    25e2:	28 31       	jn	$+594    	;abs 0x2834
    25e4:	37 2c       	jc	$+112    	;abs 0x2654
    25e6:	38 29       	jnc	$+626    	;abs 0x2858
    25e8:	00 44       	br	r4		
    25ea:	4d 41       	mov.b	r1,	r13	
    25ec:	32 43       	mov	#-1,	r2	;r3 As==11
    25ee:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    25f2:	28 31       	jn	$+594    	;abs 0x2844
    25f4:	37 2c       	jc	$+112    	;abs 0x2664
    25f6:	38 29       	jnc	$+626    	;abs 0x2868
    25f8:	00 44       	br	r4		
    25fa:	4d 41       	mov.b	r1,	r13	
    25fc:	32 53       	add	#-1,	r2	;r3 As==11
    25fe:	41 3a       	jl	$-892    	;abs 0x2282
    2600:	47 28       	jnc	$+144    	;abs 0x2690
    2602:	31 2c       	jc	$+100    	;abs 0x2666
    2604:	33 29       	jnc	$+616    	;abs 0x286c
    2606:	00 44       	br	r4		
    2608:	4d 41       	mov.b	r1,	r13	
    260a:	32 53       	add	#-1,	r2	;r3 As==11
    260c:	41 4c       	mov.b	r12,	r1	
    260e:	3a 47       	mov	@r7+,	r10	
    2610:	28 31       	jn	$+594    	;abs 0x2862
    2612:	37 2c       	jc	$+112    	;abs 0x2682
    2614:	38 29       	jnc	$+626    	;abs 0x2886
    2616:	00 44       	br	r4		
    2618:	4d 41       	mov.b	r1,	r13	
    261a:	32 44       	mov	@r4+,	r2	
    261c:	41 3a       	jl	$-892    	;abs 0x22a0
    261e:	47 28       	jnc	$+144    	;abs 0x26ae
    2620:	31 2c       	jc	$+100    	;abs 0x2684
    2622:	33 29       	jnc	$+616    	;abs 0x288a
    2624:	00 44       	br	r4		
    2626:	4d 41       	mov.b	r1,	r13	
    2628:	32 44       	mov	@r4+,	r2	
    262a:	41 4c       	mov.b	r12,	r1	
    262c:	3a 47       	mov	@r7+,	r10	
    262e:	28 31       	jn	$+594    	;abs 0x2880
    2630:	37 2c       	jc	$+112    	;abs 0x26a0
    2632:	38 29       	jnc	$+626    	;abs 0x28a4
    2634:	00 44       	br	r4		
    2636:	4d 41       	mov.b	r1,	r13	
    2638:	32 53       	add	#-1,	r2	;r3 As==11
    263a:	5a 3a       	jl	$-842    	;abs 0x22f0
    263c:	47 28       	jnc	$+144    	;abs 0x26cc
    263e:	31 37       	jge	$-412    	;abs 0x24a2
    2640:	2c 38       	jl	$+90     	;abs 0x269a
    2642:	29 00 57 44 	mova	&0x04457,r9	
    2646:	54 43       	mov.b	#1,	r4	;r3 As==01
    2648:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    264c:	28 31       	jn	$+594    	;abs 0x289e
    264e:	37 2c       	jc	$+112    	;abs 0x26be
    2650:	38 29       	jnc	$+626    	;abs 0x28c2
    2652:	00 49       	br	r9		
    2654:	45 31       	jn	$+652    	;abs 0x28e0
    2656:	3a 47       	mov	@r7+,	r10	
    2658:	28 31       	jn	$+594    	;abs 0x28aa
    265a:	2c 32       	jn	$-934    	;abs 0x22b4
    265c:	29 00 49 46 	mova	&0x04649,r9	
    2660:	47 31       	jn	$+656    	;abs 0x28f0
    2662:	3a 47       	mov	@r7+,	r10	
    2664:	28 31       	jn	$+594    	;abs 0x28b6
    2666:	2c 32       	jn	$-934    	;abs 0x22c0
    2668:	29 00 49 45 	mova	&0x04549,r9	
    266c:	32 3a       	jl	$-922    	;abs 0x22d2
    266e:	47 28       	jnc	$+144    	;abs 0x26fe
    2670:	31 2c       	jc	$+100    	;abs 0x26d4
    2672:	32 29       	jnc	$+614    	;abs 0x28d8
    2674:	00 49       	br	r9		
    2676:	46 47       	mov.b	r7,	r6	
    2678:	32 3a       	jl	$-922    	;abs 0x22de
    267a:	47 28       	jnc	$+144    	;abs 0x270a
    267c:	31 2c       	jc	$+100    	;abs 0x26e0
    267e:	32 29       	jnc	$+614    	;abs 0x28e4
    2680:	00 54       	add	r4,	r0	
    2682:	4c 56       	add.b	r6,	r12	
    2684:	5f 43       	mov.b	#1,	r15	;r3 As==01
    2686:	48 45       	mov.b	r5,	r8	
    2688:	43 4b       	.word	0x4b43;	????	Illegal as 2-op instr
    268a:	53 55       	.word	0x5553;	????	Illegal as 2-op instr
    268c:	4d 3a       	jl	$-868    	;abs 0x2328
    268e:	47 28       	jnc	$+144    	;abs 0x271e
    2690:	31 37       	jge	$-412    	;abs 0x24f4
    2692:	2c 38       	jl	$+90     	;abs 0x26ec
    2694:	29 00 54 4c 	mova	&0x04c54,r9	
    2698:	56 5f 44 43 	add.b	17220(r15),r6	;0x4344(r15)
    269c:	4f 5f       	rla.b	r15		
    269e:	33 30       	jn	$+104    	;abs 0x2706
    26a0:	5f 54 41 47 	add.b	18241(r4),r15	;0x4741(r4)
    26a4:	3a 47       	mov	@r7+,	r10	
    26a6:	28 31       	jn	$+594    	;abs 0x28f8
    26a8:	2c 32       	jn	$-934    	;abs 0x2302
    26aa:	29 00 54 4c 	mova	&0x04c54,r9	
    26ae:	56 5f 44 43 	add.b	17220(r15),r6	;0x4344(r15)
    26b2:	4f 5f       	rla.b	r15		
    26b4:	33 30       	jn	$+104    	;abs 0x271c
    26b6:	5f 4c 45 4e 	mov.b	20037(r12),r15	;0x4e45(r12)
    26ba:	3a 47       	mov	@r7+,	r10	
    26bc:	28 31       	jn	$+594    	;abs 0x290e
    26be:	2c 32       	jn	$-934    	;abs 0x2318
    26c0:	29 00 54 4c 	mova	&0x04c54,r9	
    26c4:	56 5f 41 44 	add.b	17473(r15),r6	;0x4441(r15)
    26c8:	43 31       	jn	$+648    	;abs 0x2950
    26ca:	32 5f       	add	@r15+,	r2	
    26cc:	31 5f       	add	@r15+,	r1	
    26ce:	54 41 47 3a 	mov.b	14919(r1),r4	;0x3a47(r1)
    26d2:	47 28       	jnc	$+144    	;abs 0x2762
    26d4:	31 2c       	jc	$+100    	;abs 0x2738
    26d6:	32 29       	jnc	$+614    	;abs 0x293c
    26d8:	00 54       	add	r4,	r0	
    26da:	4c 56       	add.b	r6,	r12	
    26dc:	5f 41 44 43 	mov.b	17220(r1),r15	;0x4344(r1)
    26e0:	31 32       	jn	$-924    	;abs 0x2344
    26e2:	5f 31       	jn	$+704    	;abs 0x29a2
    26e4:	5f 4c 45 4e 	mov.b	20037(r12),r15	;0x4e45(r12)
    26e8:	3a 47       	mov	@r7+,	r10	
    26ea:	28 31       	jn	$+594    	;abs 0x293c
    26ec:	2c 32       	jn	$-934    	;abs 0x2346
    26ee:	29 00 43 41 	mova	&0x04143,r9	
    26f2:	4c 44       	mov.b	r4,	r12	
    26f4:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    26f6:	5f 31       	jn	$+704    	;abs 0x29b6
    26f8:	36 4d       	mov	@r13+,	r6	
    26fa:	48 5a       	add.b	r10,	r8	
    26fc:	3a 47       	mov	@r7+,	r10	
    26fe:	28 31       	jn	$+594    	;abs 0x2950
    2700:	2c 32       	jn	$-934    	;abs 0x235a
    2702:	29 00 43 41 	mova	&0x04143,r9	
    2706:	4c 42       	mov.b	r2,	r12	
    2708:	43 31       	jn	$+648    	;abs 0x2990
    270a:	5f 31       	jn	$+704    	;abs 0x29ca
    270c:	36 4d       	mov	@r13+,	r6	
    270e:	48 5a       	add.b	r10,	r8	
    2710:	3a 47       	mov	@r7+,	r10	
    2712:	28 31       	jn	$+594    	;abs 0x2964
    2714:	2c 32       	jn	$-934    	;abs 0x236e
    2716:	29 00 43 41 	mova	&0x04143,r9	
    271a:	4c 44       	mov.b	r4,	r12	
    271c:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    271e:	5f 31       	jn	$+704    	;abs 0x29de
    2720:	32 4d       	mov	@r13+,	r2	
    2722:	48 5a       	add.b	r10,	r8	
    2724:	3a 47       	mov	@r7+,	r10	
    2726:	28 31       	jn	$+594    	;abs 0x2978
    2728:	2c 32       	jn	$-934    	;abs 0x2382
    272a:	29 00 43 41 	mova	&0x04143,r9	
    272e:	4c 42       	mov.b	r2,	r12	
    2730:	43 31       	jn	$+648    	;abs 0x29b8
    2732:	5f 31       	jn	$+704    	;abs 0x29f2
    2734:	32 4d       	mov	@r13+,	r2	
    2736:	48 5a       	add.b	r10,	r8	
    2738:	3a 47       	mov	@r7+,	r10	
    273a:	28 31       	jn	$+594    	;abs 0x298c
    273c:	2c 32       	jn	$-934    	;abs 0x2396
    273e:	29 00 43 41 	mova	&0x04143,r9	
    2742:	4c 44       	mov.b	r4,	r12	
    2744:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    2746:	5f 38       	jl	$+192    	;abs 0x2806
    2748:	4d 48       	mov.b	r8,	r13	
    274a:	5a 3a       	jl	$-842    	;abs 0x2400
    274c:	47 28       	jnc	$+144    	;abs 0x27dc
    274e:	31 2c       	jc	$+100    	;abs 0x27b2
    2750:	32 29       	jnc	$+614    	;abs 0x29b6
    2752:	00 43       	clr	r0		
    2754:	41 4c       	mov.b	r12,	r1	
    2756:	42 43       	clr.b	r2		
    2758:	31 5f       	add	@r15+,	r1	
    275a:	38 4d       	mov	@r13+,	r8	
    275c:	48 5a       	add.b	r10,	r8	
    275e:	3a 47       	mov	@r7+,	r10	
    2760:	28 31       	jn	$+594    	;abs 0x29b2
    2762:	2c 32       	jn	$-934    	;abs 0x23bc
    2764:	29 00 43 41 	mova	&0x04143,r9	
    2768:	4c 44       	mov.b	r4,	r12	
    276a:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    276c:	5f 31       	jn	$+704    	;abs 0x2a2c
    276e:	4d 48       	mov.b	r8,	r13	
    2770:	5a 3a       	jl	$-842    	;abs 0x2426
    2772:	47 28       	jnc	$+144    	;abs 0x2802
    2774:	31 2c       	jc	$+100    	;abs 0x27d8
    2776:	32 29       	jnc	$+614    	;abs 0x29dc
    2778:	00 43       	clr	r0		
    277a:	41 4c       	mov.b	r12,	r1	
    277c:	42 43       	clr.b	r2		
    277e:	31 5f       	add	@r15+,	r1	
    2780:	31 4d       	mov	@r13+,	r1	
    2782:	48 5a       	add.b	r10,	r8	
    2784:	3a 47       	mov	@r7+,	r10	
    2786:	28 31       	jn	$+594    	;abs 0x29d8
    2788:	2c 32       	jn	$-934    	;abs 0x23e2
    278a:	29 00 43 6f 	mova	&0x06f43,r9	
    278e:	6e 74       	subc.b	@r4,	r14	
    2790:	72 6f       	addc.b	@r15+,	r2	
    2792:	6c 43       	mov.b	#2,	r12	;r3 As==10
    2794:	6f 75       	subc.b	@r5,	r15	
    2796:	6e 74       	subc.b	@r4,	r14	
    2798:	65 72       	subc.b	#4,	r5	;r2 As==10
    279a:	3a 47       	mov	@r7+,	r10	
    279c:	28 31       	jn	$+594    	;abs 0x29ee
    279e:	37 2c       	jc	$+112    	;abs 0x280e
    27a0:	38 29       	jnc	$+626    	;abs 0x2a12
    27a2:	00 52       	add	r2,	r0	
    27a4:	43 43       	clr.b	#0		;r3 As==00
    27a6:	6f 75       	subc.b	@r5,	r15	
    27a8:	6e 74       	subc.b	@r4,	r14	
    27aa:	65 72       	subc.b	#4,	r5	;r2 As==10
    27ac:	3a 47       	mov	@r7+,	r10	
    27ae:	28 31       	jn	$+594    	;abs 0x2a00
    27b0:	37 2c       	jc	$+112    	;abs 0x2820
    27b2:	38 29       	jnc	$+626    	;abs 0x2a24
    27b4:	00 4d       	br	r13		
    27b6:	65 6e       	addc.b	@r14,	r5	
    27b8:	75 43       	mov.b	#-1,	r5	;r3 As==11
    27ba:	6f 75       	subc.b	@r5,	r15	
    27bc:	6e 74       	subc.b	@r4,	r14	
    27be:	65 72       	subc.b	#4,	r5	;r2 As==10
    27c0:	3a 47       	mov	@r7+,	r10	
    27c2:	28 31       	jn	$+594    	;abs 0x2a14
    27c4:	37 2c       	jc	$+112    	;abs 0x2834
    27c6:	38 29       	jnc	$+626    	;abs 0x2a38
    27c8:	00 53       	add	#0,	r0	;r3 As==00
    27ca:	74 61       	addc.b	@r1+,	r4	
    27cc:	74 75       	subc.b	@r5+,	r4	
    27ce:	73 46       	.word	0x4673;	????	Illegal as 2-op instr
    27d0:	6c 61       	addc.b	@r1,	r12	
    27d2:	67 73       	subc.b	#2,	r7	;r3 As==10
    27d4:	3a 47       	mov	@r7+,	r10	
    27d6:	28 31       	jn	$+594    	;abs 0x2a28
    27d8:	2c 34       	jge	$+90     	;abs 0x2832
    27da:	29 3d       	jmp	$+596    	;abs 0x2a2e
    27dc:	61 72       	subc.b	#4,	r1	;r2 As==10
    27de:	28 31       	jn	$+594    	;abs 0x2a30
    27e0:	37 2c       	jc	$+112    	;abs 0x2850
    27e2:	37 29       	jnc	$+624    	;abs 0x2a52
    27e4:	3b 30       	jn	$+120    	;abs 0x285c
    27e6:	3b 32       	jn	$-904    	;abs 0x245e
    27e8:	3b 28       	jnc	$+120    	;abs 0x2860
    27ea:	30 2c       	jc	$+98     	;abs 0x284c
    27ec:	32 29       	jnc	$+614    	;abs 0x2a52
    27ee:	00 4d       	br	r13		
    27f0:	65 6e       	addc.b	@r14,	r5	
    27f2:	75 56       	add.b	@r6+,	r5	
    27f4:	69 73       	subc.b	#2,	r9	;r3 As==10
    27f6:	69 62       	addc.b	#4,	r9	;r2 As==10
    27f8:	6c 65       	addc.b	@r5,	r12	
    27fa:	3a 47       	mov	@r7+,	r10	
    27fc:	28 30       	jn	$+82     	;abs 0x284e
    27fe:	2c 32       	jn	$-934    	;abs 0x2458
    2800:	29 00 53 65 	mova	&0x06553,r9	
    2804:	74 75       	subc.b	@r5+,	r4	
    2806:	70 44       	br	@r4+		
    2808:	6f 6e       	addc.b	@r14,	r15	
    280a:	65 3a       	jl	$-820    	;abs 0x24d6
    280c:	47 28       	jnc	$+144    	;abs 0x289c
    280e:	30 2c       	jc	$+98     	;abs 0x2870
    2810:	32 29       	jnc	$+614    	;abs 0x2a76
    2812:	00 4d       	br	r13		
    2814:	6f 74       	subc.b	@r4,	r15	
    2816:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2818:	41 72       	subc.b	r2,	r1	
    281a:	6d 65       	addc.b	@r5,	r13	
    281c:	64 3a       	jl	$-822    	;abs 0x24e6
    281e:	47 28       	jnc	$+144    	;abs 0x28ae
    2820:	30 2c       	jc	$+98     	;abs 0x2882
    2822:	32 29       	jnc	$+614    	;abs 0x2a88
    2824:	00 4d       	br	r13		
    2826:	65 6e       	addc.b	@r14,	r5	
    2828:	75 53       	add.b	#-1,	r5	;r3 As==11
    282a:	74 65       	addc.b	@r5+,	r4	
    282c:	70 3a       	jl	$-798    	;abs 0x250e
    282e:	47 28       	jnc	$+144    	;abs 0x28be
    2830:	33 31       	jn	$+616    	;abs 0x2a98
    2832:	2c 32       	jn	$-934    	;abs 0x248c
    2834:	29 00 4d 65 	mova	&0x0654d,r9	
    2838:	6e 75       	subc.b	@r5,	r14	
    283a:	41 6e       	addc.b	r14,	r1	
    283c:	61 6c       	addc.b	@r12,	r1	
    283e:	6f 67       	addc.b	@r7,	r15	
    2840:	3a 47       	mov	@r7+,	r10	
    2842:	28 33       	jn	$-430    	;abs 0x2694
    2844:	31 2c       	jc	$+100    	;abs 0x28a8
    2846:	32 29       	jnc	$+614    	;abs 0x2aac
    2848:	00 4d       	br	r13		
    284a:	65 6e       	addc.b	@r14,	r5	
    284c:	75 4f       	mov.b	@r15+,	r5	
    284e:	70 74       	subc.b	@r4+,	r0	
    2850:	69 6f       	addc.b	@r15,	r9	
    2852:	6e 3a       	jl	$-802    	;abs 0x2530
    2854:	47 28       	jnc	$+144    	;abs 0x28e4
    2856:	33 31       	jn	$+616    	;abs 0x2abe
    2858:	2c 34       	jge	$+90     	;abs 0x28b2
    285a:	29 00 41 6e 	mova	&0x06e41,r9	
    285e:	61 6c       	addc.b	@r12,	r1	
    2860:	6f 67       	addc.b	@r7,	r15	
    2862:	53 65       	.word	0x6553;	????	Illegal as 2-op instr
    2864:	6c 65       	addc.b	@r5,	r12	
    2866:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    2868:	3a 47       	mov	@r7+,	r10	
    286a:	28 30       	jn	$+82     	;abs 0x28bc
    286c:	2c 32       	jn	$-934    	;abs 0x24c6
    286e:	29 00 41 6e 	mova	&0x06e41,r9	
    2872:	61 6c       	addc.b	@r12,	r1	
    2874:	6f 67       	addc.b	@r7,	r15	
    2876:	43 68       	.word	0x6843;	????	Illegal as 2-op instr
    2878:	65 63       	addc.b	#2,	r5	;r3 As==10
    287a:	6b 65       	addc.b	@r5,	r11	
    287c:	64 3a       	jl	$-822    	;abs 0x2546
    287e:	47 28       	jnc	$+144    	;abs 0x290e
    2880:	30 2c       	jc	$+98     	;abs 0x28e2
    2882:	32 29       	jnc	$+614    	;abs 0x2ae8
    2884:	00 41       	br	r1		
    2886:	6e 61       	addc.b	@r1,	r14	
    2888:	6c 6f       	addc.b	@r15,	r12	
    288a:	67 47       	mov.b	@r7,	r7	
    288c:	72 61       	addc.b	@r1+,	r2	
    288e:	70 68       	addc.b	@r8+,	r0	
    2890:	3a 47       	mov	@r7+,	r10	
    2892:	28 31       	jn	$+594    	;abs 0x2ae4
    2894:	2c 35       	jge	$+602    	;abs 0x2aee
    2896:	29 3d       	jmp	$+596    	;abs 0x2aea
    2898:	61 72       	subc.b	#4,	r1	;r2 As==10
    289a:	28 31       	jn	$+594    	;abs 0x2aec
    289c:	37 2c       	jc	$+112    	;abs 0x290c
    289e:	37 29       	jnc	$+624    	;abs 0x2b0e
    28a0:	3b 30       	jn	$+120    	;abs 0x2918
    28a2:	3b 37       	jge	$-392    	;abs 0x271a
    28a4:	3b 28       	jnc	$+120    	;abs 0x291c
    28a6:	31 2c       	jc	$+100    	;abs 0x290a
    28a8:	36 29       	jnc	$+622    	;abs 0x2b16
    28aa:	3d 61       	addc	@r1+,	r13	
    28ac:	72 28       	jnc	$+230    	;abs 0x2992
    28ae:	31 37       	jge	$-412    	;abs 0x2712
    28b0:	2c 37       	jge	$-422    	;abs 0x270a
    28b2:	29 3b       	jl	$-428    	;abs 0x2706
    28b4:	30 3b       	jl	$-414    	;abs 0x2716
    28b6:	39 39       	jl	$+628    	;abs 0x2b2a
    28b8:	3b 28       	jnc	$+120    	;abs 0x2930
    28ba:	30 2c       	jc	$+98     	;abs 0x291c
    28bc:	32 29       	jnc	$+614    	;abs 0x2b22
    28be:	00 41       	br	r1		
    28c0:	6e 61       	addc.b	@r1,	r14	
    28c2:	6c 6f       	addc.b	@r15,	r12	
    28c4:	67 43       	mov.b	#2,	r7	;r3 As==10
    28c6:	6f 6c       	addc.b	@r12,	r15	
    28c8:	6f 75       	subc.b	@r5,	r15	
    28ca:	72 73       	subc.b	#-1,	r2	;r3 As==11
    28cc:	3a 47       	mov	@r7+,	r10	
    28ce:	28 31       	jn	$+594    	;abs 0x2b20
    28d0:	2c 37       	jge	$-422    	;abs 0x272a
    28d2:	29 3d       	jmp	$+596    	;abs 0x2b26
    28d4:	61 72       	subc.b	#4,	r1	;r2 As==10
    28d6:	28 31       	jn	$+594    	;abs 0x2b28
    28d8:	37 2c       	jc	$+112    	;abs 0x2948
    28da:	37 29       	jnc	$+624    	;abs 0x2b4a
    28dc:	3b 30       	jn	$+120    	;abs 0x2954
    28de:	3b 37       	jge	$-392    	;abs 0x2756
    28e0:	3b 28       	jnc	$+120    	;abs 0x2958
    28e2:	30 2c       	jc	$+98     	;abs 0x2944
    28e4:	32 29       	jnc	$+614    	;abs 0x2b4a
    28e6:	00 50       	rla	r0		
    28e8:	50 4d 53 6c 	br	27731(r13)	;0x6c53(r13)
    28ec:	6f 70       	subc.b	@r0,	r15	
    28ee:	65 3a       	jl	$-820    	;abs 0x25ba
    28f0:	47 28       	jnc	$+144    	;abs 0x2980
    28f2:	31 2c       	jc	$+100    	;abs 0x2956
    28f4:	31 29       	jnc	$+612    	;abs 0x2b58
    28f6:	00 50       	rla	r0		
    28f8:	50 4d 4f 66 	br	26191(r13)	;0x664f(r13)
    28fc:	66 73       	subc.b	#2,	r6	;r3 As==10
    28fe:	65 74       	subc.b	@r4,	r5	
    2900:	3a 47       	mov	@r7+,	r10	
    2902:	28 31       	jn	$+594    	;abs 0x2b54
    2904:	2c 31       	jn	$+602    	;abs 0x2b5e
    2906:	29 00 54 69 	mova	&0x06954,r9	
    290a:	6d 65       	addc.b	@r5,	r13	
    290c:	55 70 45 64 	subc.b	0x6445,	r5	;PC rel. 0x08d55
    2910:	67 65       	addc.b	@r5,	r7	
    2912:	3a 47       	mov	@r7+,	r10	
    2914:	28 31       	jn	$+594    	;abs 0x2b66
    2916:	2c 38       	jl	$+90     	;abs 0x2970
    2918:	29 3d       	jmp	$+596    	;abs 0x2b6c
    291a:	61 72       	subc.b	#4,	r1	;r2 As==10
    291c:	28 31       	jn	$+594    	;abs 0x2b6e
    291e:	37 2c       	jc	$+112    	;abs 0x298e
    2920:	37 29       	jnc	$+624    	;abs 0x2b90
    2922:	3b 30       	jn	$+120    	;abs 0x299a
    2924:	3b 37       	jge	$-392    	;abs 0x279c
    2926:	3b 28       	jnc	$+120    	;abs 0x299e
    2928:	31 37       	jge	$-412    	;abs 0x278c
    292a:	2c 38       	jl	$+90     	;abs 0x2984
    292c:	29 00 50 50 	mova	&0x05050,r9	
    2930:	4d 56       	add.b	r6,	r13	
    2932:	61 6c       	addc.b	@r12,	r1	
    2934:	75 65       	addc.b	@r5+,	r5	
    2936:	3a 47       	mov	@r7+,	r10	
    2938:	28 31       	jn	$+594    	;abs 0x2b8a
    293a:	2c 38       	jl	$+90     	;abs 0x2994
    293c:	29 00 43 68 	mova	&0x06843,r9	
    2940:	61 6e       	addc.b	@r14,	r1	
    2942:	6e 65       	addc.b	@r5,	r14	
    2944:	6c 49       	mov.b	@r9,	r12	
    2946:	6e 70       	subc.b	@r0,	r14	
    2948:	75 74       	subc.b	@r4+,	r5	
    294a:	3a 47       	mov	@r7+,	r10	
    294c:	28 31       	jn	$+594    	;abs 0x2b9e
    294e:	2c 38       	jl	$+90     	;abs 0x29a8
    2950:	29 00 6c 63 	mova	&0x0636c,r9	
    2954:	64 36       	jge	$-822    	;abs 0x261e
    2956:	31 30       	jn	$+100    	;abs 0x29ba
    2958:	30 2e       	jc	$-926    	;abs 0x25ba
    295a:	63 00 70 75 	mova	r0,	&0x37570
    295e:	74 63       	addc.b	#-1,	r4	;r3 As==11
    2960:	68 61       	addc.b	@r1,	r8	
    2962:	72 3a       	jl	$-794    	;abs 0x2648
    2964:	46 28       	jnc	$+142    	;abs 0x29f2
    2966:	30 2c       	jc	$+98     	;abs 0x29c8
    2968:	31 29       	jnc	$+612    	;abs 0x2bcc
    296a:	00 63       	adc	r0		
    296c:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2970:	2c 31       	jn	$+602    	;abs 0x2bca
    2972:	29 00 6c 63 	mova	&0x0636c,r9	
    2976:	64 5f       	add.b	@r15,	r4	
    2978:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
    297a:	74 63       	addc.b	#-1,	r4	;r3 As==11
    297c:	6f 6c       	addc.b	@r12,	r15	
    297e:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2980:	3a 46       	mov	@r6+,	r10	
    2982:	28 30       	jn	$+82     	;abs 0x29d4
    2984:	2c 32       	jn	$-934    	;abs 0x25de
    2986:	30 29       	jnc	$+610    	;abs 0x2be8
    2988:	00 66       	addc	r6,	r0	
    298a:	6f 72       	subc.b	#4,	r15	;r2 As==10
    298c:	65 67       	addc.b	@r7,	r5	
    298e:	72 6f       	addc.b	@r15+,	r2	
    2990:	75 6e       	addc.b	@r14+,	r5	
    2992:	64 5f       	add.b	@r15,	r4	
    2994:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    2996:	6c 6f       	addc.b	@r15,	r12	
    2998:	72 3a       	jl	$-794    	;abs 0x267e
    299a:	50 28       	jnc	$+162    	;abs 0x2a3c
    299c:	30 2c       	jc	$+98     	;abs 0x29fe
    299e:	31 31       	jn	$+612    	;abs 0x2c02
    29a0:	29 00 62 61 	mova	&0x06162,r9	
    29a4:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr
    29a6:	67 72       	subc.b	#4,	r7	;r2 As==10
    29a8:	6f 75       	subc.b	@r5,	r15	
    29aa:	6e 64       	addc.b	@r4,	r14	
    29ac:	5f 63       	addc.b	#1,	r15	;r3 As==01
    29ae:	6f 6c       	addc.b	@r12,	r15	
    29b0:	6f 72       	subc.b	#4,	r15	;r2 As==10
    29b2:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    29b6:	2c 31       	jn	$+602    	;abs 0x2c10
    29b8:	31 29       	jnc	$+612    	;abs 0x2c1c
    29ba:	00 6e       	addc	r14,	r0	
    29bc:	36 31       	jn	$+622    	;abs 0x2c2a
    29be:	30 30       	jn	$+98     	;abs 0x2a20
    29c0:	5f 73       	subc.b	#1,	r15	;r3 As==01
    29c2:	65 6e       	addc.b	@r14,	r5	
    29c4:	64 3a       	jl	$-822    	;abs 0x268e
    29c6:	46 28       	jnc	$+142    	;abs 0x2a54
    29c8:	30 2c       	jc	$+98     	;abs 0x2a2a
    29ca:	32 30       	jn	$+102    	;abs 0x2a30
    29cc:	29 00 64 61 	mova	&0x06164,r9	
    29d0:	74 61       	addc.b	@r1+,	r4	
    29d2:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    29d6:	2c 31       	jn	$+602    	;abs 0x2c30
    29d8:	31 29       	jnc	$+612    	;abs 0x2c3c
    29da:	00 63       	adc	r0		
    29dc:	6d 64       	addc.b	@r4,	r13	
    29de:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    29e2:	2c 31       	jn	$+602    	;abs 0x2c3c
    29e4:	31 29       	jnc	$+612    	;abs 0x2c48
    29e6:	00 6d       	addc	r13,	r0	
    29e8:	61 73       	subc.b	#2,	r1	;r3 As==10
    29ea:	6b 3a       	jl	$-808    	;abs 0x26c2
    29ec:	72 28       	jnc	$+230    	;abs 0x2ad2
    29ee:	30 2c       	jc	$+98     	;abs 0x2a50
    29f0:	31 31       	jn	$+612    	;abs 0x2c54
    29f2:	29 00 69 3a 	mova	&0x03a69,r9	
    29f6:	72 28       	jnc	$+230    	;abs 0x2adc
    29f8:	30 2c       	jc	$+98     	;abs 0x2a5a
    29fa:	31 31       	jn	$+612    	;abs 0x2c5e
    29fc:	29 00 6c 63 	mova	&0x0636c,r9	
    2a00:	64 5f       	add.b	@r15,	r4	
    2a02:	69 6e       	addc.b	@r14,	r9	
    2a04:	69 74       	subc.b	@r4,	r9	
    2a06:	3a 46       	mov	@r6+,	r10	
    2a08:	28 30       	jn	$+82     	;abs 0x2a5a
    2a0a:	2c 32       	jn	$-934    	;abs 0x2664
    2a0c:	30 29       	jnc	$+610    	;abs 0x2c6e
    2a0e:	00 63       	adc	r0		
    2a10:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2a12:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2a16:	2c 31       	jn	$+602    	;abs 0x2c70
    2a18:	31 29       	jnc	$+612    	;abs 0x2c7c
    2a1a:	00 6c       	addc	r12,	r0	
    2a1c:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    2a1e:	5f 63       	addc.b	#1,	r15	;r3 As==01
    2a20:	6c 65       	addc.b	@r5,	r12	
    2a22:	61 72       	subc.b	#4,	r1	;r2 As==10
    2a24:	3a 46       	mov	@r6+,	r10	
    2a26:	28 30       	jn	$+82     	;abs 0x2a78
    2a28:	2c 32       	jn	$-934    	;abs 0x2682
    2a2a:	30 29       	jnc	$+610    	;abs 0x2c8c
    2a2c:	00 6e       	addc	r14,	r0	
    2a2e:	36 31       	jn	$+622    	;abs 0x2c9c
    2a30:	30 30       	jn	$+98     	;abs 0x2a92
    2a32:	5f 73       	subc.b	#1,	r15	;r3 As==01
    2a34:	65 6e       	addc.b	@r14,	r5	
    2a36:	64 63       	addc.b	#2,	r4	;r3 As==10
    2a38:	6f 6d       	addc.b	@r13,	r15	
    2a3a:	31 3a       	jl	$-924    	;abs 0x269e
    2a3c:	46 28       	jnc	$+142    	;abs 0x2aca
    2a3e:	30 2c       	jc	$+98     	;abs 0x2aa0
    2a40:	32 30       	jn	$+102    	;abs 0x2aa6
    2a42:	29 00 63 6f 	mova	&0x06f63,r9	
    2a46:	6d 6d       	addc.b	@r13,	r13	
    2a48:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2a4c:	2c 31       	jn	$+602    	;abs 0x2ca6
    2a4e:	31 29       	jnc	$+612    	;abs 0x2cb2
    2a50:	00 64       	addc	r4,	r0	
    2a52:	61 74       	subc.b	@r4,	r1	
    2a54:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2a58:	2c 31       	jn	$+602    	;abs 0x2cb2
    2a5a:	31 29       	jnc	$+612    	;abs 0x2cbe
    2a5c:	00 6e       	addc	r14,	r0	
    2a5e:	36 31       	jn	$+622    	;abs 0x2ccc
    2a60:	30 30       	jn	$+98     	;abs 0x2ac2
    2a62:	5f 73       	subc.b	#1,	r15	;r3 As==01
    2a64:	65 6e       	addc.b	@r14,	r5	
    2a66:	64 63       	addc.b	#2,	r4	;r3 As==10
    2a68:	6f 6d       	addc.b	@r13,	r15	
    2a6a:	32 3a       	jl	$-922    	;abs 0x26d0
    2a6c:	46 28       	jnc	$+142    	;abs 0x2afa
    2a6e:	30 2c       	jc	$+98     	;abs 0x2ad0
    2a70:	32 30       	jn	$+102    	;abs 0x2ad6
    2a72:	29 00 64 61 	mova	&0x06164,r9	
    2a76:	74 31       	jn	$+746    	;abs 0x2d60
    2a78:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2a7c:	2c 31       	jn	$+602    	;abs 0x2cd6
    2a7e:	31 29       	jnc	$+612    	;abs 0x2ce2
    2a80:	00 64       	addc	r4,	r0	
    2a82:	61 74       	subc.b	@r4,	r1	
    2a84:	32 3a       	jl	$-922    	;abs 0x26ea
    2a86:	50 28       	jnc	$+162    	;abs 0x2b28
    2a88:	30 2c       	jc	$+98     	;abs 0x2aea
    2a8a:	31 31       	jn	$+612    	;abs 0x2cee
    2a8c:	29 00 6c 63 	mova	&0x0636c,r9	
    2a90:	64 5f       	add.b	@r15,	r4	
    2a92:	66 69       	addc.b	@r9,	r6	
    2a94:	6c 6c       	addc.b	@r12,	r12	
    2a96:	72 65       	addc.b	@r5+,	r2	
    2a98:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    2a9a:	3a 46       	mov	@r6+,	r10	
    2a9c:	28 30       	jn	$+82     	;abs 0x2aee
    2a9e:	2c 32       	jn	$-934    	;abs 0x26f8
    2aa0:	30 29       	jnc	$+610    	;abs 0x2d02
    2aa2:	00 78       	subc	r8,	r0	
    2aa4:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2aa8:	2c 31       	jn	$+602    	;abs 0x2d02
    2aaa:	31 29       	jnc	$+612    	;abs 0x2d0e
    2aac:	00 79       	subc	r9,	r0	
    2aae:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2ab2:	2c 31       	jn	$+602    	;abs 0x2d0c
    2ab4:	31 29       	jnc	$+612    	;abs 0x2d18
    2ab6:	00 6c       	addc	r12,	r0	
    2ab8:	78 3a       	jl	$-782    	;abs 0x27aa
    2aba:	50 28       	jnc	$+162    	;abs 0x2b5c
    2abc:	30 2c       	jc	$+98     	;abs 0x2b1e
    2abe:	31 31       	jn	$+612    	;abs 0x2d22
    2ac0:	29 00 6c 79 	mova	&0x0796c,r9	
    2ac4:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2ac8:	2c 31       	jn	$+602    	;abs 0x2d22
    2aca:	31 29       	jnc	$+612    	;abs 0x2d2e
    2acc:	00 63       	adc	r0		
    2ace:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2ad0:	3a 70 28 30 	subc	#12328,	r10	;#0x3028
    2ad4:	2c 31       	jn	$+602    	;abs 0x2d2e
    2ad6:	31 29       	jnc	$+612    	;abs 0x2d3a
    2ad8:	00 63       	adc	r0		
    2ada:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2adc:	3a 72       	subc	#8,	r10	;r2 As==11
    2ade:	28 30       	jn	$+82     	;abs 0x2b30
    2ae0:	2c 31       	jn	$+602    	;abs 0x2d3a
    2ae2:	31 29       	jnc	$+612    	;abs 0x2d46
    2ae4:	00 61       	addc	r1,	r0	
    2ae6:	64 64       	addc.b	@r4,	r4	
    2ae8:	72 3a       	jl	$-794    	;abs 0x27ce
    2aea:	72 28       	jnc	$+230    	;abs 0x2bd0
    2aec:	30 2c       	jc	$+98     	;abs 0x2b4e
    2aee:	34 29       	jnc	$+618    	;abs 0x2d58
    2af0:	00 6d       	addc	r13,	r0	
    2af2:	61 78       	subc.b	@r8,	r1	
    2af4:	3a 72       	subc	#8,	r10	;r2 As==11
    2af6:	28 30       	jn	$+82     	;abs 0x2b48
    2af8:	2c 34       	jge	$+90     	;abs 0x2b52
    2afa:	29 00 6c 63 	mova	&0x0636c,r9	
    2afe:	64 5f       	add.b	@r15,	r4	
    2b00:	64 72       	subc.b	#4,	r4	;r2 As==10
    2b02:	61 77       	subc.b	@r7,	r1	
    2b04:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
    2b06:	72 63       	addc.b	#-1,	r2	;r3 As==11
    2b08:	6c 65       	addc.b	@r5,	r12	
    2b0a:	3a 46       	mov	@r6+,	r10	
    2b0c:	28 30       	jn	$+82     	;abs 0x2b5e
    2b0e:	2c 32       	jn	$-934    	;abs 0x2768
    2b10:	30 29       	jnc	$+610    	;abs 0x2d72
    2b12:	00 78       	subc	r8,	r0	
    2b14:	30 3a       	jl	$-926    	;abs 0x2776
    2b16:	50 28       	jnc	$+162    	;abs 0x2bb8
    2b18:	30 2c       	jc	$+98     	;abs 0x2b7a
    2b1a:	34 29       	jnc	$+618    	;abs 0x2d84
    2b1c:	00 79       	subc	r9,	r0	
    2b1e:	30 3a       	jl	$-926    	;abs 0x2780
    2b20:	50 28       	jnc	$+162    	;abs 0x2bc2
    2b22:	30 2c       	jc	$+98     	;abs 0x2b84
    2b24:	34 29       	jnc	$+618    	;abs 0x2d8e
    2b26:	00 72       	subc	r2,	r0	
    2b28:	61 64       	addc.b	@r4,	r1	
    2b2a:	69 75       	subc.b	@r5,	r9	
    2b2c:	73 3a       	jl	$-792    	;abs 0x2814
    2b2e:	50 28       	jnc	$+162    	;abs 0x2bd0
    2b30:	30 2c       	jc	$+98     	;abs 0x2b92
    2b32:	34 29       	jnc	$+618    	;abs 0x2d9c
    2b34:	00 63       	adc	r0		
    2b36:	6f 6c       	addc.b	@r12,	r15	
    2b38:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2b3a:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2b3e:	2c 31       	jn	$+602    	;abs 0x2d98
    2b40:	31 29       	jnc	$+612    	;abs 0x2da4
    2b42:	00 77       	subc	r7,	r0	
    2b44:	69 64       	addc.b	@r4,	r9	
    2b46:	74 68       	addc.b	@r8+,	r4	
    2b48:	3a 70 28 30 	subc	#12328,	r10	;#0x3028
    2b4c:	2c 31       	jn	$+602    	;abs 0x2da6
    2b4e:	29 00 77 69 	mova	&0x06977,r9	
    2b52:	64 74       	subc.b	@r4,	r4	
    2b54:	68 3a       	jl	$-814    	;abs 0x2826
    2b56:	72 28       	jnc	$+230    	;abs 0x2c3c
    2b58:	30 2c       	jc	$+98     	;abs 0x2bba
    2b5a:	31 29       	jnc	$+612    	;abs 0x2dbe
    2b5c:	00 66       	addc	r6,	r0	
    2b5e:	3a 28       	jnc	$+118    	;abs 0x2bd4
    2b60:	30 2c       	jc	$+98     	;abs 0x2bc2
    2b62:	31 29       	jnc	$+612    	;abs 0x2dc6
    2b64:	00 64       	addc	r4,	r0	
    2b66:	64 46       	mov.b	@r6,	r4	
    2b68:	5f 78 3a 28 	subc.b	10298(r8),r15	;0x283a(r8)
    2b6c:	30 2c       	jc	$+98     	;abs 0x2bce
    2b6e:	31 29       	jnc	$+612    	;abs 0x2dd2
    2b70:	00 64       	addc	r4,	r0	
    2b72:	64 46       	mov.b	@r6,	r4	
    2b74:	5f 79 3a 28 	subc.b	10298(r9),r15	;0x283a(r9)
    2b78:	30 2c       	jc	$+98     	;abs 0x2bda
    2b7a:	31 29       	jnc	$+612    	;abs 0x2dde
    2b7c:	00 78       	subc	r8,	r0	
    2b7e:	3a 72       	subc	#8,	r10	;r2 As==11
    2b80:	28 30       	jn	$+82     	;abs 0x2bd2
    2b82:	2c 31       	jn	$+602    	;abs 0x2ddc
    2b84:	29 00 79 3a 	mova	&0x03a79,r9	
    2b88:	72 28       	jnc	$+230    	;abs 0x2c6e
    2b8a:	30 2c       	jc	$+98     	;abs 0x2bec
    2b8c:	31 29       	jnc	$+612    	;abs 0x2df0
    2b8e:	00 6c       	addc	r12,	r0	
    2b90:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    2b92:	5f 64 72 61 	addc.b	24946(r4),r15	;0x6172(r4)
    2b96:	77 6c       	addc.b	@r12+,	r7	
    2b98:	69 6e       	addc.b	@r14,	r9	
    2b9a:	65 3a       	jl	$-820    	;abs 0x2866
    2b9c:	46 28       	jnc	$+142    	;abs 0x2c2a
    2b9e:	30 2c       	jc	$+98     	;abs 0x2c00
    2ba0:	32 30       	jn	$+102    	;abs 0x2c06
    2ba2:	29 00 78 30 	mova	&0x03078,r9	
    2ba6:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2baa:	2c 31       	jn	$+602    	;abs 0x2e04
    2bac:	29 00 79 30 	mova	&0x03079,r9	
    2bb0:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2bb4:	2c 31       	jn	$+602    	;abs 0x2e0e
    2bb6:	29 00 78 31 	mova	&0x03178,r9	
    2bba:	3a 70 28 30 	subc	#12328,	r10	;#0x3028
    2bbe:	2c 31       	jn	$+602    	;abs 0x2e18
    2bc0:	29 00 79 31 	mova	&0x03179,r9	
    2bc4:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2bc8:	2c 31       	jn	$+602    	;abs 0x2e22
    2bca:	29 00 63 6f 	mova	&0x06f63,r9	
    2bce:	6c 6f       	addc.b	@r15,	r12	
    2bd0:	72 3a       	jl	$-794    	;abs 0x28b6
    2bd2:	70 28       	jnc	$+226    	;abs 0x2cb4
    2bd4:	30 2c       	jc	$+98     	;abs 0x2c36
    2bd6:	31 29       	jnc	$+612    	;abs 0x2e3a
    2bd8:	00 63       	adc	r0		
    2bda:	6f 6c       	addc.b	@r12,	r15	
    2bdc:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2bde:	3a 72       	subc	#8,	r10	;r2 As==11
    2be0:	28 30       	jn	$+82     	;abs 0x2c32
    2be2:	2c 31       	jn	$+602    	;abs 0x2e3c
    2be4:	29 00 64 79 	mova	&0x07964,r9	
    2be8:	3a 72       	subc	#8,	r10	;r2 As==11
    2bea:	28 30       	jn	$+82     	;abs 0x2c3c
    2bec:	2c 31       	jn	$+602    	;abs 0x2e46
    2bee:	29 00 64 78 	mova	&0x07864,r9	
    2bf2:	3a 72       	subc	#8,	r10	;r2 As==11
    2bf4:	28 30       	jn	$+82     	;abs 0x2c46
    2bf6:	2c 31       	jn	$+602    	;abs 0x2e50
    2bf8:	29 00 73 74 	mova	&0x07473,r9	
    2bfc:	65 70       	subc.b	@r0,	r5	
    2bfe:	78 3a       	jl	$-782    	;abs 0x28f0
    2c00:	28 30       	jn	$+82     	;abs 0x2c52
    2c02:	2c 31       	jn	$+602    	;abs 0x2e5c
    2c04:	29 00 73 74 	mova	&0x07473,r9	
    2c08:	65 70       	subc.b	@r0,	r5	
    2c0a:	79 3a       	jl	$-780    	;abs 0x28fe
    2c0c:	28 30       	jn	$+82     	;abs 0x2c5e
    2c0e:	2c 31       	jn	$+602    	;abs 0x2e68
    2c10:	29 00 66 72 	mova	&0x07266,r9	
    2c14:	61 63       	addc.b	#2,	r1	;r3 As==10
    2c16:	74 69       	addc.b	@r9+,	r4	
    2c18:	6f 6e       	addc.b	@r14,	r15	
    2c1a:	3a 72       	subc	#8,	r10	;r2 As==11
    2c1c:	28 30       	jn	$+82     	;abs 0x2c6e
    2c1e:	2c 31       	jn	$+602    	;abs 0x2e78
    2c20:	29 00 6c 63 	mova	&0x0636c,r9	
    2c24:	64 5f       	add.b	@r15,	r4	
    2c26:	70 75       	subc.b	@r5+,	r0	
    2c28:	74 6c       	addc.b	@r12+,	r4	
    2c2a:	6f 67       	addc.b	@r7,	r15	
    2c2c:	6f 3a       	jl	$-800    	;abs 0x290c
    2c2e:	46 28       	jnc	$+142    	;abs 0x2cbc
    2c30:	30 2c       	jc	$+98     	;abs 0x2c92
    2c32:	32 30       	jn	$+102    	;abs 0x2c98
    2c34:	29 00 70 3a 	mova	&0x03a70,r9	
    2c38:	70 28       	jnc	$+226    	;abs 0x2d1a
    2c3a:	31 2c       	jc	$+100    	;abs 0x2c9e
    2c3c:	31 29       	jnc	$+612    	;abs 0x2ea0
    2c3e:	3d 2a       	jnc	$-900    	;abs 0x28ba
    2c40:	28 30       	jn	$+82     	;abs 0x2c92
    2c42:	2c 31       	jn	$+602    	;abs 0x2e9c
    2c44:	31 29       	jnc	$+612    	;abs 0x2ea8
    2c46:	00 70       	subc	r0,	r0	
    2c48:	3a 72       	subc	#8,	r10	;r2 As==11
    2c4a:	28 31       	jn	$+594    	;abs 0x2e9c
    2c4c:	2c 31       	jn	$+602    	;abs 0x2ea6
    2c4e:	29 00 6c 63 	mova	&0x0636c,r9	
    2c52:	64 5f       	add.b	@r15,	r4	
    2c54:	6e 65       	addc.b	@r5,	r14	
    2c56:	77 6c       	addc.b	@r12+,	r7	
    2c58:	69 6e       	addc.b	@r14,	r9	
    2c5a:	65 3a       	jl	$-820    	;abs 0x2926
    2c5c:	46 28       	jnc	$+142    	;abs 0x2cea
    2c5e:	30 2c       	jc	$+98     	;abs 0x2cc0
    2c60:	32 30       	jn	$+102    	;abs 0x2cc6
    2c62:	29 00 6c 63 	mova	&0x0636c,r9	
    2c66:	64 5f       	add.b	@r15,	r4	
    2c68:	67 6f       	addc.b	@r15,	r7	
    2c6a:	74 6f       	addc.b	@r15+,	r4	
    2c6c:	3a 46       	mov	@r6+,	r10	
    2c6e:	28 30       	jn	$+82     	;abs 0x2cc0
    2c70:	2c 32       	jn	$-934    	;abs 0x28ca
    2c72:	30 29       	jnc	$+610    	;abs 0x2ed4
    2c74:	00 6c       	addc	r12,	r0	
    2c76:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    2c78:	5f 77 72 63 	subc.b	25458(r7),r15	;0x6372(r7)
    2c7c:	68 61       	addc.b	@r1,	r8	
    2c7e:	72 3a       	jl	$-794    	;abs 0x2964
    2c80:	46 28       	jnc	$+142    	;abs 0x2d0e
    2c82:	30 2c       	jc	$+98     	;abs 0x2ce4
    2c84:	32 30       	jn	$+102    	;abs 0x2cea
    2c86:	29 00 63 3a 	mova	&0x03a63,r9	
    2c8a:	50 28       	jnc	$+162    	;abs 0x2d2c
    2c8c:	30 2c       	jc	$+98     	;abs 0x2cee
    2c8e:	31 31       	jn	$+612    	;abs 0x2ef2
    2c90:	29 00 6b 3a 	mova	&0x03a6b,r9	
    2c94:	72 28       	jnc	$+230    	;abs 0x2d7a
    2c96:	30 2c       	jc	$+98     	;abs 0x2cf8
    2c98:	31 31       	jn	$+612    	;abs 0x2efc
    2c9a:	29 00 6c 63 	mova	&0x0636c,r9	
    2c9e:	64 5f       	add.b	@r15,	r4	
    2ca0:	70 75       	subc.b	@r5+,	r0	
    2ca2:	74 63       	addc.b	#-1,	r4	;r3 As==11
    2ca4:	68 61       	addc.b	@r1,	r8	
    2ca6:	72 3a       	jl	$-794    	;abs 0x298c
    2ca8:	46 28       	jnc	$+142    	;abs 0x2d36
    2caa:	30 2c       	jc	$+98     	;abs 0x2d0c
    2cac:	32 30       	jn	$+102    	;abs 0x2d12
    2cae:	29 00 6c 63 	mova	&0x0636c,r9	
    2cb2:	64 5f       	add.b	@r15,	r4	
    2cb4:	64 72       	subc.b	#4,	r4	;r2 As==10
    2cb6:	61 77       	subc.b	@r7,	r1	
    2cb8:	70 72       	subc.b	#8,	r0	;r2 As==11
    2cba:	6f 67       	addc.b	@r7,	r15	
    2cbc:	72 65       	addc.b	@r5+,	r2	
    2cbe:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    2cc0:	62 61       	addc.b	@r1,	r2	
    2cc2:	72 3a       	jl	$-794    	;abs 0x29a8
    2cc4:	46 28       	jnc	$+142    	;abs 0x2d52
    2cc6:	30 2c       	jc	$+98     	;abs 0x2d28
    2cc8:	32 30       	jn	$+102    	;abs 0x2d2e
    2cca:	29 00 78 3a 	mova	&0x03a78,r9	
    2cce:	50 28       	jnc	$+162    	;abs 0x2d70
    2cd0:	30 2c       	jc	$+98     	;abs 0x2d32
    2cd2:	31 29       	jnc	$+612    	;abs 0x2f36
    2cd4:	00 79       	subc	r9,	r0	
    2cd6:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2cda:	2c 31       	jn	$+602    	;abs 0x2f34
    2cdc:	29 00 6c 78 	mova	&0x0786c,r9	
    2ce0:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2ce4:	2c 31       	jn	$+602    	;abs 0x2f3e
    2ce6:	29 00 6c 79 	mova	&0x0796c,r9	
    2cea:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2cee:	2c 31       	jn	$+602    	;abs 0x2f48
    2cf0:	29 00 63 6f 	mova	&0x06f63,r9	
    2cf4:	6c 6f       	addc.b	@r15,	r12	
    2cf6:	72 70 72 6f 	subc.b	#28530,	r2	;#0x6f72
    2cfa:	67 72       	subc.b	#4,	r7	;r2 As==10
    2cfc:	65 73       	subc.b	#2,	r5	;r3 As==10
    2cfe:	73 3a       	jl	$-792    	;abs 0x29e6
    2d00:	70 28       	jnc	$+226    	;abs 0x2de2
    2d02:	30 2c       	jc	$+98     	;abs 0x2d64
    2d04:	31 29       	jnc	$+612    	;abs 0x2f68
    2d06:	00 70       	subc	r0,	r0	
    2d08:	65 72       	subc.b	#4,	r5	;r2 As==10
    2d0a:	63 65       	.word	0x6563;	????	Illegal as 2-op instr
    2d0c:	6e 74       	subc.b	@r4,	r14	
    2d0e:	3a 70 28 30 	subc	#12328,	r10	;#0x3028
    2d12:	2c 31       	jn	$+602    	;abs 0x2f6c
    2d14:	29 00 63 6f 	mova	&0x06f63,r9	
    2d18:	6c 6f       	addc.b	@r15,	r12	
    2d1a:	72 70 72 6f 	subc.b	#28530,	r2	;#0x6f72
    2d1e:	67 72       	subc.b	#4,	r7	;r2 As==10
    2d20:	65 73       	subc.b	#2,	r5	;r3 As==10
    2d22:	73 3a       	jl	$-792    	;abs 0x2a0a
    2d24:	72 28       	jnc	$+230    	;abs 0x2e0a
    2d26:	30 2c       	jc	$+98     	;abs 0x2d88
    2d28:	31 29       	jnc	$+612    	;abs 0x2f8c
    2d2a:	00 70       	subc	r0,	r0	
    2d2c:	65 72       	subc.b	#4,	r5	;r2 As==10
    2d2e:	63 65       	.word	0x6563;	????	Illegal as 2-op instr
    2d30:	6e 74       	subc.b	@r4,	r14	
    2d32:	3a 72       	subc	#8,	r10	;r2 As==11
    2d34:	28 30       	jn	$+82     	;abs 0x2d86
    2d36:	2c 31       	jn	$+602    	;abs 0x2f90
    2d38:	29 00 4d 50 	mova	&0x0504d,r9	
    2d3c:	59 3a       	jl	$-844    	;abs 0x29f0
    2d3e:	47 28       	jnc	$+144    	;abs 0x2dce
    2d40:	31 36       	jge	$-924    	;abs 0x29a4
    2d42:	2c 38       	jl	$+90     	;abs 0x2d9c
    2d44:	29 00 4d 50 	mova	&0x0504d,r9	
    2d48:	59 53       	inc.b	r9		
    2d4a:	3a 47       	mov	@r7+,	r10	
    2d4c:	28 31       	jn	$+594    	;abs 0x2f9e
    2d4e:	36 2c       	jc	$+110    	;abs 0x2dbc
    2d50:	38 29       	jnc	$+626    	;abs 0x2fc2
    2d52:	00 4d       	br	r13		
    2d54:	41 43       	clr.b	r1		
    2d56:	3a 47       	mov	@r7+,	r10	
    2d58:	28 31       	jn	$+594    	;abs 0x2faa
    2d5a:	36 2c       	jc	$+110    	;abs 0x2dc8
    2d5c:	38 29       	jnc	$+626    	;abs 0x2fce
    2d5e:	00 4d       	br	r13		
    2d60:	41 43       	clr.b	r1		
    2d62:	53 3a       	jl	$-856    	;abs 0x2a0a
    2d64:	47 28       	jnc	$+144    	;abs 0x2df4
    2d66:	31 36       	jge	$-924    	;abs 0x29ca
    2d68:	2c 38       	jl	$+90     	;abs 0x2dc2
    2d6a:	29 00 4f 50 	mova	&0x0504f,r9	
    2d6e:	32 3a       	jl	$-922    	;abs 0x29d4
    2d70:	47 28       	jnc	$+144    	;abs 0x2e00
    2d72:	31 36       	jge	$-924    	;abs 0x29d6
    2d74:	2c 38       	jl	$+90     	;abs 0x2dce
    2d76:	29 00 52 45 	mova	&0x04552,r9	
    2d7a:	53 4c       	.word	0x4c53;	????	Illegal as 2-op instr
    2d7c:	4f 3a       	jl	$-864    	;abs 0x2a1c
    2d7e:	47 28       	jnc	$+144    	;abs 0x2e0e
    2d80:	31 36       	jge	$-924    	;abs 0x29e4
    2d82:	2c 38       	jl	$+90     	;abs 0x2ddc
    2d84:	29 00 52 45 	mova	&0x04552,r9	
    2d88:	53 48       	.word	0x4853;	????	Illegal as 2-op instr
    2d8a:	49 3a       	jl	$-876    	;abs 0x2a1e
    2d8c:	47 28       	jnc	$+144    	;abs 0x2e1c
    2d8e:	31 36       	jge	$-924    	;abs 0x29f2
    2d90:	2c 38       	jl	$+90     	;abs 0x2dea
    2d92:	29 00 53 55 	mova	&0x05553,r9	
    2d96:	4d 45       	mov.b	r5,	r13	
    2d98:	58 54 3a 47 	add.b	18234(r4),r8	;0x473a(r4)
    2d9c:	28 31       	jn	$+594    	;abs 0x2fee
    2d9e:	36 2c       	jc	$+110    	;abs 0x2e0c
    2da0:	38 29       	jnc	$+626    	;abs 0x3012
    2da2:	00 70       	subc	r0,	r0	
    2da4:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2da6:	74 31       	jn	$+746    	;abs 0x3090
    2da8:	3a 47       	mov	@r7+,	r10	
    2daa:	28 31       	jn	$+594    	;abs 0x2ffc
    2dac:	34 2c       	jc	$+106    	;abs 0x2e16
    2dae:	34 29       	jnc	$+618    	;abs 0x3018
    2db0:	00 70       	subc	r0,	r0	
    2db2:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2db4:	74 32       	jn	$-790    	;abs 0x2a9e
    2db6:	3a 47       	mov	@r7+,	r10	
    2db8:	28 31       	jn	$+594    	;abs 0x300a
    2dba:	34 2c       	jc	$+106    	;abs 0x2e24
    2dbc:	34 29       	jnc	$+618    	;abs 0x3026
    2dbe:	00 70       	subc	r0,	r0	
    2dc0:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2dc2:	74 33       	jn	$-278    	;abs 0x2cac
    2dc4:	3a 47       	mov	@r7+,	r10	
    2dc6:	28 31       	jn	$+594    	;abs 0x3018
    2dc8:	34 2c       	jc	$+106    	;abs 0x2e32
    2dca:	35 29       	jnc	$+620    	;abs 0x3036
    2dcc:	00 70       	subc	r0,	r0	
    2dce:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2dd0:	74 34       	jge	$+234    	;abs 0x2eba
    2dd2:	3a 47       	mov	@r7+,	r10	
    2dd4:	28 31       	jn	$+594    	;abs 0x3026
    2dd6:	34 2c       	jc	$+106    	;abs 0x2e40
    2dd8:	35 29       	jnc	$+620    	;abs 0x3044
    2dda:	00 70       	subc	r0,	r0	
    2ddc:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2dde:	74 35       	jge	$+746    	;abs 0x30c8
    2de0:	3a 47       	mov	@r7+,	r10	
    2de2:	28 31       	jn	$+594    	;abs 0x3034
    2de4:	34 2c       	jc	$+106    	;abs 0x2e4e
    2de6:	35 29       	jnc	$+620    	;abs 0x3052
    2de8:	00 70       	subc	r0,	r0	
    2dea:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2dec:	74 36       	jge	$-790    	;abs 0x2ad6
    2dee:	3a 47       	mov	@r7+,	r10	
    2df0:	28 31       	jn	$+594    	;abs 0x3042
    2df2:	34 2c       	jc	$+106    	;abs 0x2e5c
    2df4:	35 29       	jnc	$+620    	;abs 0x3060
    2df6:	00 55       	add	r5,	r0	
    2df8:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    2dfa:	30 49       	br	@r9+		
    2dfc:	32 43       	mov	#-1,	r2	;r3 As==11
    2dfe:	4f 41       	mov.b	r1,	r15	
    2e00:	3a 47       	mov	@r7+,	r10	
    2e02:	28 31       	jn	$+594    	;abs 0x3054
    2e04:	36 2c       	jc	$+110    	;abs 0x2e72
    2e06:	38 29       	jnc	$+626    	;abs 0x3078
    2e08:	00 55       	add	r5,	r0	
    2e0a:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    2e0c:	30 49       	br	@r9+		
    2e0e:	32 43       	mov	#-1,	r2	;r3 As==11
    2e10:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    2e12:	3a 47       	mov	@r7+,	r10	
    2e14:	28 31       	jn	$+594    	;abs 0x3066
    2e16:	36 2c       	jc	$+110    	;abs 0x2e84
    2e18:	38 29       	jnc	$+626    	;abs 0x308a
    2e1a:	00 55       	add	r5,	r0	
    2e1c:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    2e1e:	31 49       	mov	@r9+,	r1	
    2e20:	32 43       	mov	#-1,	r2	;r3 As==11
    2e22:	4f 41       	mov.b	r1,	r15	
    2e24:	3a 47       	mov	@r7+,	r10	
    2e26:	28 31       	jn	$+594    	;abs 0x3078
    2e28:	36 2c       	jc	$+110    	;abs 0x2e96
    2e2a:	38 29       	jnc	$+626    	;abs 0x309c
    2e2c:	00 55       	add	r5,	r0	
    2e2e:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    2e30:	31 49       	mov	@r9+,	r1	
    2e32:	32 43       	mov	#-1,	r2	;r3 As==11
    2e34:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    2e36:	3a 47       	mov	@r7+,	r10	
    2e38:	28 31       	jn	$+594    	;abs 0x308a
    2e3a:	36 2c       	jc	$+110    	;abs 0x2ea8
    2e3c:	38 29       	jnc	$+626    	;abs 0x30ae
    2e3e:	00 54       	add	r4,	r0	
    2e40:	41 30       	jn	$+132    	;abs 0x2ec4
    2e42:	49 56       	add.b	r6,	r9	
    2e44:	3a 47       	mov	@r7+,	r10	
    2e46:	28 31       	jn	$+594    	;abs 0x3098
    2e48:	36 2c       	jc	$+110    	;abs 0x2eb6
    2e4a:	38 29       	jnc	$+626    	;abs 0x30bc
    2e4c:	00 54       	add	r4,	r0	
    2e4e:	41 30       	jn	$+132    	;abs 0x2ed2
    2e50:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2e52:	4c 3a       	jl	$-870    	;abs 0x2aec
    2e54:	47 28       	jnc	$+144    	;abs 0x2ee4
    2e56:	31 36       	jge	$-924    	;abs 0x2aba
    2e58:	2c 38       	jl	$+90     	;abs 0x2eb2
    2e5a:	29 00 54 41 	mova	&0x04154,r9	
    2e5e:	30 52       	add	#8,	r0	;r2 As==11
    2e60:	3a 47       	mov	@r7+,	r10	
    2e62:	28 31       	jn	$+594    	;abs 0x30b4
    2e64:	36 2c       	jc	$+110    	;abs 0x2ed2
    2e66:	38 29       	jnc	$+626    	;abs 0x30d8
    2e68:	00 54       	add	r4,	r0	
    2e6a:	41 30       	jn	$+132    	;abs 0x2eee
    2e6c:	43 43       	clr.b	#0		;r3 As==00
    2e6e:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    2e72:	47 28       	jnc	$+144    	;abs 0x2f02
    2e74:	31 36       	jge	$-924    	;abs 0x2ad8
    2e76:	2c 38       	jl	$+90     	;abs 0x2ed0
    2e78:	29 00 54 41 	mova	&0x04154,r9	
    2e7c:	30 43       	br	#-1		;r3 As==11
    2e7e:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2e80:	4c 31       	jn	$+666    	;abs 0x311a
    2e82:	3a 47       	mov	@r7+,	r10	
    2e84:	28 31       	jn	$+594    	;abs 0x30d6
    2e86:	36 2c       	jc	$+110    	;abs 0x2ef4
    2e88:	38 29       	jnc	$+626    	;abs 0x30fa
    2e8a:	00 54       	add	r4,	r0	
    2e8c:	41 30       	jn	$+132    	;abs 0x2f10
    2e8e:	43 43       	clr.b	#0		;r3 As==00
    2e90:	52 30       	jn	$+166    	;abs 0x2f36
    2e92:	3a 47       	mov	@r7+,	r10	
    2e94:	28 31       	jn	$+594    	;abs 0x30e6
    2e96:	36 2c       	jc	$+110    	;abs 0x2f04
    2e98:	38 29       	jnc	$+626    	;abs 0x310a
    2e9a:	00 54       	add	r4,	r0	
    2e9c:	41 30       	jn	$+132    	;abs 0x2f20
    2e9e:	43 43       	clr.b	#0		;r3 As==00
    2ea0:	52 31       	jn	$+678    	;abs 0x3146
    2ea2:	3a 47       	mov	@r7+,	r10	
    2ea4:	28 31       	jn	$+594    	;abs 0x30f6
    2ea6:	36 2c       	jc	$+110    	;abs 0x2f14
    2ea8:	38 29       	jnc	$+626    	;abs 0x311a
    2eaa:	00 54       	add	r4,	r0	
    2eac:	41 30       	jn	$+132    	;abs 0x2f30
    2eae:	43 43       	clr.b	#0		;r3 As==00
    2eb0:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    2eb4:	47 28       	jnc	$+144    	;abs 0x2f44
    2eb6:	31 36       	jge	$-924    	;abs 0x2b1a
    2eb8:	2c 38       	jl	$+90     	;abs 0x2f12
    2eba:	29 00 54 41 	mova	&0x04154,r9	
    2ebe:	30 43       	br	#-1		;r3 As==11
    2ec0:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2ec2:	32 3a       	jl	$-922    	;abs 0x2b28
    2ec4:	47 28       	jnc	$+144    	;abs 0x2f54
    2ec6:	31 36       	jge	$-924    	;abs 0x2b2a
    2ec8:	2c 38       	jl	$+90     	;abs 0x2f22
    2eca:	29 00 74 69 	mova	&0x06974,r9	
    2ece:	6d 65       	addc.b	@r5,	r13	
    2ed0:	72 61       	addc.b	@r1+,	r2	
    2ed2:	3a 47       	mov	@r7+,	r10	
    2ed4:	28 31       	jn	$+594    	;abs 0x3126
    2ed6:	36 2c       	jc	$+110    	;abs 0x2f44
    2ed8:	35 29       	jnc	$+620    	;abs 0x3144
    2eda:	00 54       	add	r4,	r0	
    2edc:	42 49       	mov.b	r9,	r2	
    2ede:	56 3a       	jl	$-850    	;abs 0x2b8c
    2ee0:	47 28       	jnc	$+144    	;abs 0x2f70
    2ee2:	31 36       	jge	$-924    	;abs 0x2b46
    2ee4:	2c 38       	jl	$+90     	;abs 0x2f3e
    2ee6:	29 00 54 42 	mova	&0x04254,r9	
    2eea:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2eec:	4c 3a       	jl	$-870    	;abs 0x2b86
    2eee:	47 28       	jnc	$+144    	;abs 0x2f7e
    2ef0:	31 36       	jge	$-924    	;abs 0x2b54
    2ef2:	2c 38       	jl	$+90     	;abs 0x2f4c
    2ef4:	29 00 54 42 	mova	&0x04254,r9	
    2ef8:	52 3a       	jl	$-858    	;abs 0x2b9e
    2efa:	47 28       	jnc	$+144    	;abs 0x2f8a
    2efc:	31 36       	jge	$-924    	;abs 0x2b60
    2efe:	2c 38       	jl	$+90     	;abs 0x2f58
    2f00:	29 00 54 42 	mova	&0x04254,r9	
    2f04:	43 43       	clr.b	#0		;r3 As==00
    2f06:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    2f0a:	47 28       	jnc	$+144    	;abs 0x2f9a
    2f0c:	31 36       	jge	$-924    	;abs 0x2b70
    2f0e:	2c 38       	jl	$+90     	;abs 0x2f68
    2f10:	29 00 54 42 	mova	&0x04254,r9	
    2f14:	43 43       	clr.b	#0		;r3 As==00
    2f16:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    2f1a:	47 28       	jnc	$+144    	;abs 0x2faa
    2f1c:	31 36       	jge	$-924    	;abs 0x2b80
    2f1e:	2c 38       	jl	$+90     	;abs 0x2f78
    2f20:	29 00 54 42 	mova	&0x04254,r9	
    2f24:	43 43       	clr.b	#0		;r3 As==00
    2f26:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    2f2a:	47 28       	jnc	$+144    	;abs 0x2fba
    2f2c:	31 36       	jge	$-924    	;abs 0x2b90
    2f2e:	2c 38       	jl	$+90     	;abs 0x2f88
    2f30:	29 00 54 42 	mova	&0x04254,r9	
    2f34:	43 43       	clr.b	#0		;r3 As==00
    2f36:	52 30       	jn	$+166    	;abs 0x2fdc
    2f38:	3a 47       	mov	@r7+,	r10	
    2f3a:	28 31       	jn	$+594    	;abs 0x318c
    2f3c:	36 2c       	jc	$+110    	;abs 0x2faa
    2f3e:	38 29       	jnc	$+626    	;abs 0x31b0
    2f40:	00 54       	add	r4,	r0	
    2f42:	42 43       	clr.b	r2		
    2f44:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2f46:	31 3a       	jl	$-924    	;abs 0x2baa
    2f48:	47 28       	jnc	$+144    	;abs 0x2fd8
    2f4a:	31 36       	jge	$-924    	;abs 0x2bae
    2f4c:	2c 38       	jl	$+90     	;abs 0x2fa6
    2f4e:	29 00 54 42 	mova	&0x04254,r9	
    2f52:	43 43       	clr.b	#0		;r3 As==00
    2f54:	52 32       	jn	$-858    	;abs 0x2bfa
    2f56:	3a 47       	mov	@r7+,	r10	
    2f58:	28 31       	jn	$+594    	;abs 0x31aa
    2f5a:	36 2c       	jc	$+110    	;abs 0x2fc8
    2f5c:	38 29       	jnc	$+626    	;abs 0x31ce
    2f5e:	00 54       	add	r4,	r0	
    2f60:	42 43       	clr.b	r2		
    2f62:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2f64:	4c 33       	jn	$-358    	;abs 0x2dfe
    2f66:	3a 47       	mov	@r7+,	r10	
    2f68:	28 31       	jn	$+594    	;abs 0x31ba
    2f6a:	36 2c       	jc	$+110    	;abs 0x2fd8
    2f6c:	38 29       	jnc	$+626    	;abs 0x31de
    2f6e:	00 54       	add	r4,	r0	
    2f70:	42 43       	clr.b	r2		
    2f72:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2f74:	4c 34       	jge	$+154    	;abs 0x300e
    2f76:	3a 47       	mov	@r7+,	r10	
    2f78:	28 31       	jn	$+594    	;abs 0x31ca
    2f7a:	36 2c       	jc	$+110    	;abs 0x2fe8
    2f7c:	38 29       	jnc	$+626    	;abs 0x31ee
    2f7e:	00 54       	add	r4,	r0	
    2f80:	42 43       	clr.b	r2		
    2f82:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2f84:	4c 35       	jge	$+666    	;abs 0x321e
    2f86:	3a 47       	mov	@r7+,	r10	
    2f88:	28 31       	jn	$+594    	;abs 0x31da
    2f8a:	36 2c       	jc	$+110    	;abs 0x2ff8
    2f8c:	38 29       	jnc	$+626    	;abs 0x31fe
    2f8e:	00 54       	add	r4,	r0	
    2f90:	42 43       	clr.b	r2		
    2f92:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2f94:	4c 36       	jge	$-870    	;abs 0x2c2e
    2f96:	3a 47       	mov	@r7+,	r10	
    2f98:	28 31       	jn	$+594    	;abs 0x31ea
    2f9a:	36 2c       	jc	$+110    	;abs 0x3008
    2f9c:	38 29       	jnc	$+626    	;abs 0x320e
    2f9e:	00 54       	add	r4,	r0	
    2fa0:	42 43       	clr.b	r2		
    2fa2:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2fa4:	33 3a       	jl	$-920    	;abs 0x2c0c
    2fa6:	47 28       	jnc	$+144    	;abs 0x3036
    2fa8:	31 36       	jge	$-924    	;abs 0x2c0c
    2faa:	2c 38       	jl	$+90     	;abs 0x3004
    2fac:	29 00 54 42 	mova	&0x04254,r9	
    2fb0:	43 43       	clr.b	#0		;r3 As==00
    2fb2:	52 34       	jge	$+166    	;abs 0x3058
    2fb4:	3a 47       	mov	@r7+,	r10	
    2fb6:	28 31       	jn	$+594    	;abs 0x3208
    2fb8:	36 2c       	jc	$+110    	;abs 0x3026
    2fba:	38 29       	jnc	$+626    	;abs 0x322c
    2fbc:	00 54       	add	r4,	r0	
    2fbe:	42 43       	clr.b	r2		
    2fc0:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2fc2:	35 3a       	jl	$-916    	;abs 0x2c2e
    2fc4:	47 28       	jnc	$+144    	;abs 0x3054
    2fc6:	31 36       	jge	$-924    	;abs 0x2c2a
    2fc8:	2c 38       	jl	$+90     	;abs 0x3022
    2fca:	29 00 54 42 	mova	&0x04254,r9	
    2fce:	43 43       	clr.b	#0		;r3 As==00
    2fd0:	52 36       	jge	$-858    	;abs 0x2c76
    2fd2:	3a 47       	mov	@r7+,	r10	
    2fd4:	28 31       	jn	$+594    	;abs 0x3226
    2fd6:	36 2c       	jc	$+110    	;abs 0x3044
    2fd8:	38 29       	jnc	$+626    	;abs 0x324a
    2fda:	00 74       	subc	r4,	r0	
    2fdc:	69 6d       	addc.b	@r13,	r9	
    2fde:	65 72       	subc.b	#4,	r5	;r2 As==10
    2fe0:	62 3a       	jl	$-826    	;abs 0x2ca6
    2fe2:	47 28       	jnc	$+144    	;abs 0x3072
    2fe4:	31 37       	jge	$-412    	;abs 0x2e48
    2fe6:	2c 35       	jge	$+602    	;abs 0x3240
    2fe8:	29 00 46 43 	mova	&0x04346,r9	
    2fec:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    2ff0:	47 28       	jnc	$+144    	;abs 0x3080
    2ff2:	31 36       	jge	$-924    	;abs 0x2c56
    2ff4:	2c 38       	jl	$+90     	;abs 0x304e
    2ff6:	29 00 46 43 	mova	&0x04346,r9	
    2ffa:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    2ffe:	47 28       	jnc	$+144    	;abs 0x308e
    3000:	31 36       	jge	$-924    	;abs 0x2c64
    3002:	2c 38       	jl	$+90     	;abs 0x305c
    3004:	29 00 46 43 	mova	&0x04346,r9	
    3008:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    300c:	47 28       	jnc	$+144    	;abs 0x309c
    300e:	31 36       	jge	$-924    	;abs 0x2c72
    3010:	2c 38       	jl	$+90     	;abs 0x306a
    3012:	29 00 41 44 	mova	&0x04441,r9	
    3016:	43 31       	jn	$+648    	;abs 0x329e
    3018:	32 43       	mov	#-1,	r2	;r3 As==11
    301a:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    301e:	47 28       	jnc	$+144    	;abs 0x30ae
    3020:	31 36       	jge	$-924    	;abs 0x2c84
    3022:	2c 38       	jl	$+90     	;abs 0x307c
    3024:	29 00 41 44 	mova	&0x04441,r9	
    3028:	43 31       	jn	$+648    	;abs 0x32b0
    302a:	32 43       	mov	#-1,	r2	;r3 As==11
    302c:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    3030:	47 28       	jnc	$+144    	;abs 0x30c0
    3032:	31 36       	jge	$-924    	;abs 0x2c96
    3034:	2c 38       	jl	$+90     	;abs 0x308e
    3036:	29 00 41 44 	mova	&0x04441,r9	
    303a:	43 31       	jn	$+648    	;abs 0x32c2
    303c:	32 49       	mov	@r9+,	r2	
    303e:	46 47       	mov.b	r7,	r6	
    3040:	3a 47       	mov	@r7+,	r10	
    3042:	28 31       	jn	$+594    	;abs 0x3294
    3044:	36 2c       	jc	$+110    	;abs 0x30b2
    3046:	38 29       	jnc	$+626    	;abs 0x32b8
    3048:	00 41       	br	r1		
    304a:	44 43       	clr.b	r4		
    304c:	31 32       	jn	$-924    	;abs 0x2cb0
    304e:	49 45       	mov.b	r5,	r9	
    3050:	3a 47       	mov	@r7+,	r10	
    3052:	28 31       	jn	$+594    	;abs 0x32a4
    3054:	36 2c       	jc	$+110    	;abs 0x30c2
    3056:	38 29       	jnc	$+626    	;abs 0x32c8
    3058:	00 41       	br	r1		
    305a:	44 43       	clr.b	r4		
    305c:	31 32       	jn	$-924    	;abs 0x2cc0
    305e:	49 56       	add.b	r6,	r9	
    3060:	3a 47       	mov	@r7+,	r10	
    3062:	28 31       	jn	$+594    	;abs 0x32b4
    3064:	36 2c       	jc	$+110    	;abs 0x30d2
    3066:	38 29       	jnc	$+626    	;abs 0x32d8
    3068:	00 61       	addc	r1,	r0	
    306a:	64 63       	addc.b	#2,	r4	;r3 As==10
    306c:	31 32       	jn	$-924    	;abs 0x2cd0
    306e:	3a 47       	mov	@r7+,	r10	
    3070:	28 32       	jn	$-942    	;abs 0x2cc2
    3072:	31 2c       	jc	$+100    	;abs 0x30d6
    3074:	37 29       	jnc	$+624    	;abs 0x32e4
    3076:	00 41       	br	r1		
    3078:	44 43       	clr.b	r4		
    307a:	31 32       	jn	$-924    	;abs 0x2cde
    307c:	4d 45       	mov.b	r5,	r13	
    307e:	4d 30       	jn	$+156    	;abs 0x311a
    3080:	3a 47       	mov	@r7+,	r10	
    3082:	28 31       	jn	$+594    	;abs 0x32d4
    3084:	36 2c       	jc	$+110    	;abs 0x30f2
    3086:	38 29       	jnc	$+626    	;abs 0x32f8
    3088:	00 41       	br	r1		
    308a:	44 43       	clr.b	r4		
    308c:	31 32       	jn	$-924    	;abs 0x2cf0
    308e:	4d 45       	mov.b	r5,	r13	
    3090:	4d 31       	jn	$+668    	;abs 0x332c
    3092:	3a 47       	mov	@r7+,	r10	
    3094:	28 31       	jn	$+594    	;abs 0x32e6
    3096:	36 2c       	jc	$+110    	;abs 0x3104
    3098:	38 29       	jnc	$+626    	;abs 0x330a
    309a:	00 41       	br	r1		
    309c:	44 43       	clr.b	r4		
    309e:	31 32       	jn	$-924    	;abs 0x2d02
    30a0:	4d 45       	mov.b	r5,	r13	
    30a2:	4d 32       	jn	$-868    	;abs 0x2d3e
    30a4:	3a 47       	mov	@r7+,	r10	
    30a6:	28 31       	jn	$+594    	;abs 0x32f8
    30a8:	36 2c       	jc	$+110    	;abs 0x3116
    30aa:	38 29       	jnc	$+626    	;abs 0x331c
    30ac:	00 41       	br	r1		
    30ae:	44 43       	clr.b	r4		
    30b0:	31 32       	jn	$-924    	;abs 0x2d14
    30b2:	4d 45       	mov.b	r5,	r13	
    30b4:	4d 33       	jn	$-356    	;abs 0x2f50
    30b6:	3a 47       	mov	@r7+,	r10	
    30b8:	28 31       	jn	$+594    	;abs 0x330a
    30ba:	36 2c       	jc	$+110    	;abs 0x3128
    30bc:	38 29       	jnc	$+626    	;abs 0x332e
    30be:	00 41       	br	r1		
    30c0:	44 43       	clr.b	r4		
    30c2:	31 32       	jn	$-924    	;abs 0x2d26
    30c4:	4d 45       	mov.b	r5,	r13	
    30c6:	4d 34       	jge	$+156    	;abs 0x3162
    30c8:	3a 47       	mov	@r7+,	r10	
    30ca:	28 31       	jn	$+594    	;abs 0x331c
    30cc:	36 2c       	jc	$+110    	;abs 0x313a
    30ce:	38 29       	jnc	$+626    	;abs 0x3340
    30d0:	00 41       	br	r1		
    30d2:	44 43       	clr.b	r4		
    30d4:	31 32       	jn	$-924    	;abs 0x2d38
    30d6:	4d 45       	mov.b	r5,	r13	
    30d8:	4d 35       	jge	$+668    	;abs 0x3374
    30da:	3a 47       	mov	@r7+,	r10	
    30dc:	28 31       	jn	$+594    	;abs 0x332e
    30de:	36 2c       	jc	$+110    	;abs 0x314c
    30e0:	38 29       	jnc	$+626    	;abs 0x3352
    30e2:	00 41       	br	r1		
    30e4:	44 43       	clr.b	r4		
    30e6:	31 32       	jn	$-924    	;abs 0x2d4a
    30e8:	4d 45       	mov.b	r5,	r13	
    30ea:	4d 36       	jge	$-868    	;abs 0x2d86
    30ec:	3a 47       	mov	@r7+,	r10	
    30ee:	28 31       	jn	$+594    	;abs 0x3340
    30f0:	36 2c       	jc	$+110    	;abs 0x315e
    30f2:	38 29       	jnc	$+626    	;abs 0x3364
    30f4:	00 41       	br	r1		
    30f6:	44 43       	clr.b	r4		
    30f8:	31 32       	jn	$-924    	;abs 0x2d5c
    30fa:	4d 45       	mov.b	r5,	r13	
    30fc:	4d 37       	jge	$-356    	;abs 0x2f98
    30fe:	3a 47       	mov	@r7+,	r10	
    3100:	28 31       	jn	$+594    	;abs 0x3352
    3102:	36 2c       	jc	$+110    	;abs 0x3170
    3104:	38 29       	jnc	$+626    	;abs 0x3376
    3106:	00 41       	br	r1		
    3108:	44 43       	clr.b	r4		
    310a:	31 32       	jn	$-924    	;abs 0x2d6e
    310c:	4d 45       	mov.b	r5,	r13	
    310e:	4d 38       	jl	$+156    	;abs 0x31aa
    3110:	3a 47       	mov	@r7+,	r10	
    3112:	28 31       	jn	$+594    	;abs 0x3364
    3114:	36 2c       	jc	$+110    	;abs 0x3182
    3116:	38 29       	jnc	$+626    	;abs 0x3388
    3118:	00 41       	br	r1		
    311a:	44 43       	clr.b	r4		
    311c:	31 32       	jn	$-924    	;abs 0x2d80
    311e:	4d 45       	mov.b	r5,	r13	
    3120:	4d 39       	jl	$+668    	;abs 0x33bc
    3122:	3a 47       	mov	@r7+,	r10	
    3124:	28 31       	jn	$+594    	;abs 0x3376
    3126:	36 2c       	jc	$+110    	;abs 0x3194
    3128:	38 29       	jnc	$+626    	;abs 0x339a
    312a:	00 41       	br	r1		
    312c:	44 43       	clr.b	r4		
    312e:	31 32       	jn	$-924    	;abs 0x2d92
    3130:	4d 45       	mov.b	r5,	r13	
    3132:	4d 31       	jn	$+668    	;abs 0x33ce
    3134:	30 3a       	jl	$-926    	;abs 0x2d96
// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    3136:	47 28       	jnc	$+144    	;abs 0x31c6
    3138:	31 36       	jge	$-924    	;abs 0x2d9c
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    313a:	2c 38       	jl	$+90     	;abs 0x3194
    313c:	29 00 41 44 	mova	&0x04441,r9	

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    3140:	43 31       	jn	$+648    	;abs 0x33c8
    3142:	32 4d       	mov	@r13+,	r2	

    lcd_clear(BLACK);
    3144:	45 4d       	mov.b	r13,	r5	
    3146:	31 31       	jn	$+612    	;abs 0x33aa
    3148:	3a 47       	mov	@r7+,	r10	
    
    MenuOption = RADIO_RAW;
    314a:	28 31       	jn	$+594    	;abs 0x339c
    314c:	36 2c       	jc	$+110    	;abs 0x31ba
    MenuStep = DISPLAY;
    314e:	38 29       	jnc	$+626    	;abs 0x33c0
    3150:	00 41       	br	r1		
    MenuVisible = TRUE;     // inicializa mostrando o menu
    3152:	44 43       	clr.b	r4		
    3154:	31 32       	jn	$-924    	;abs 0x2db8
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(MotorArmed == TRUE){
    3156:	4d 45       	mov.b	r5,	r13	
    3158:	4d 31       	jn	$+668    	;abs 0x33f4
    315a:	32 3a       	jl	$-922    	;abs 0x2dc0
                main_loop();
                ControlCounter = 0;
            }
        }
        
        if(SetupDone == TRUE){
    315c:	47 28       	jnc	$+144    	;abs 0x31ec
    315e:	31 36       	jge	$-924    	;abs 0x2dc2
    3160:	2c 38       	jl	$+90     	;abs 0x31ba
                process_rc();
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
    3162:	29 00 41 44 	mova	&0x04441,r9	
    3166:	43 31       	jn	$+648    	;abs 0x33ee
                process_menu();
                MenuCounter = 0;   
            }
        }
        else{
            if(ChannelInput[CH6_CH] > 3500){
    3168:	32 4d       	mov	@r13+,	r2	
    316a:	45 4d       	mov.b	r13,	r5	
    316c:	31 33       	jn	$-412    	;abs 0x2fd0
    316e:	3a 47       	mov	@r7+,	r10	
                MenuVisible = TRUE;
    3170:	28 31       	jn	$+594    	;abs 0x33c2
    3172:	36 2c       	jc	$+110    	;abs 0x31e0
                MotorArmed = FALSE;
    3174:	38 29       	jnc	$+626    	;abs 0x33e6
    3176:	00 41       	br	r1		
    3178:	44 43       	clr.b	r4		
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
            if(MenuCounter >= MENU_PERIOD){
    317a:	31 32       	jn	$-924    	;abs 0x2dde
    317c:	4d 45       	mov.b	r5,	r13	
    317e:	4d 31       	jn	$+668    	;abs 0x341a
    3180:	34 3a       	jl	$-918    	;abs 0x2dea
                process_menu();
    3182:	47 28       	jnc	$+144    	;abs 0x3212
    3184:	31 36       	jge	$-924    	;abs 0x2de8
                MenuCounter = 0;   
    3186:	2c 38       	jl	$+90     	;abs 0x31e0
    3188:	29 00 41 44 	mova	&0x04441,r9	
                ControlCounter = 0;
            }
        }
        
        if(SetupDone == TRUE){
            if(RCCounter >= RC_PERIOD){
    318c:	43 31       	jn	$+648    	;abs 0x3414
    318e:	32 4d       	mov	@r13+,	r2	
    3190:	45 4d       	mov.b	r13,	r5	
    3192:	31 35       	jge	$+612    	;abs 0x33f6
                process_rc();
    3194:	3a 47       	mov	@r7+,	r10	
    3196:	28 31       	jn	$+594    	;abs 0x33e8
                RCCounter = 0;
    3198:	36 2c       	jc	$+110    	;abs 0x3206
    319a:	38 29       	jnc	$+626    	;abs 0x340c
    319c:	00 44       	br	r4		
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(MotorArmed == TRUE){
            if(ControlCounter >= CONTROL_PERIOD){
    319e:	41 43       	clr.b	r1		
    31a0:	31 32       	jn	$-924    	;abs 0x2e04
    31a2:	5f 30       	jn	$+192    	;abs 0x3262
    31a4:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
                main_loop();
    31a6:	4c 3a       	jl	$-870    	;abs 0x2e40
    31a8:	47 28       	jnc	$+144    	;abs 0x3238
                ControlCounter = 0;
    31aa:	31 36       	jge	$-924    	;abs 0x2e0e
    31ac:	2c 38       	jl	$+90     	;abs 0x3206
    31ae:	29 00 44 41 	mova	&0x04144,r9	
                MenuVisible = TRUE;
                MotorArmed = FALSE;
            }
        }
    }
}
    31b2:	43 31       	jn	$+648    	;abs 0x343a
    31b4:	32 5f       	add	@r15+,	r2	
    31b6:	31 43       	mov	#-1,	r1	;r3 As==11
    31b8:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    31bc:	28 31       	jn	$+594    	;abs 0x340e
    31be:	36 2c       	jc	$+110    	;abs 0x322c
    31c0:	38 29       	jnc	$+626    	;abs 0x3432
    31c2:	00 44       	br	r4		
    31c4:	41 43       	clr.b	r1		
    31c6:	31 32       	jn	$-924    	;abs 0x2e2a
    31c8:	5f 30       	jn	$+192    	;abs 0x3288
    31ca:	44 41       	mov.b	r1,	r4	
    31cc:	54 3a       	jl	$-854    	;abs 0x2e76
    31ce:	47 28       	jnc	$+144    	;abs 0x325e
    31d0:	31 36       	jge	$-924    	;abs 0x2e34
    31d2:	2c 38       	jl	$+90     	;abs 0x322c
    31d4:	29 00 44 41 	mova	&0x04144,r9	
    31d8:	43 31       	jn	$+648    	;abs 0x3460
    31da:	32 5f       	add	@r15+,	r2	
    31dc:	31 44       	mov	@r4+,	r1	
    31de:	41 54       	add.b	r4,	r1	
    31e0:	3a 47       	mov	@r7+,	r10	
    31e2:	28 31       	jn	$+594    	;abs 0x3434
    31e4:	36 2c       	jc	$+110    	;abs 0x3252
    31e6:	38 29       	jnc	$+626    	;abs 0x3458
    31e8:	00 44       	br	r4		
    31ea:	4d 41       	mov.b	r1,	r13	
    31ec:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    31ee:	4c 30       	jn	$+154    	;abs 0x3288
    31f0:	3a 47       	mov	@r7+,	r10	
    31f2:	28 31       	jn	$+594    	;abs 0x3444
    31f4:	36 2c       	jc	$+110    	;abs 0x3262
    31f6:	38 29       	jnc	$+626    	;abs 0x3468
    31f8:	00 44       	br	r4		
    31fa:	4d 41       	mov.b	r1,	r13	
    31fc:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    31fe:	4c 31       	jn	$+666    	;abs 0x3498
    3200:	3a 47       	mov	@r7+,	r10	
    3202:	28 31       	jn	$+594    	;abs 0x3454
    3204:	36 2c       	jc	$+110    	;abs 0x3272
    3206:	38 29       	jnc	$+626    	;abs 0x3478
    3208:	00 44       	br	r4		
    320a:	4d 41       	mov.b	r1,	r13	
    320c:	49 56       	add.b	r6,	r9	
    320e:	3a 47       	mov	@r7+,	r10	
    3210:	28 31       	jn	$+594    	;abs 0x3462
    3212:	36 2c       	jc	$+110    	;abs 0x3280
    3214:	38 29       	jnc	$+626    	;abs 0x3486
    3216:	00 44       	br	r4		
    3218:	4d 41       	mov.b	r1,	r13	
    321a:	30 43       	br	#-1		;r3 As==11
    321c:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    3220:	28 31       	jn	$+594    	;abs 0x3472
    3222:	36 2c       	jc	$+110    	;abs 0x3290
    3224:	38 29       	jnc	$+626    	;abs 0x3496
    3226:	00 44       	br	r4		
    3228:	4d 41       	mov.b	r1,	r13	
    322a:	30 53       	add	#-1,	r0	;r3 As==11
    322c:	41 4c       	mov.b	r12,	r1	
    322e:	3a 47       	mov	@r7+,	r10	
    3230:	28 31       	jn	$+594    	;abs 0x3482
    3232:	36 2c       	jc	$+110    	;abs 0x32a0
    3234:	38 29       	jnc	$+626    	;abs 0x34a6
    3236:	00 44       	br	r4		
    3238:	4d 41       	mov.b	r1,	r13	
    323a:	30 44       	br	@r4+		
    323c:	41 4c       	mov.b	r12,	r1	
    323e:	3a 47       	mov	@r7+,	r10	
    3240:	28 31       	jn	$+594    	;abs 0x3492
    3242:	36 2c       	jc	$+110    	;abs 0x32b0
    3244:	38 29       	jnc	$+626    	;abs 0x34b6
    3246:	00 44       	br	r4		
    3248:	4d 41       	mov.b	r1,	r13	
    324a:	30 53       	add	#-1,	r0	;r3 As==11
    324c:	5a 3a       	jl	$-842    	;abs 0x2f02
    324e:	47 28       	jnc	$+144    	;abs 0x32de
    3250:	31 36       	jge	$-924    	;abs 0x2eb4
    3252:	2c 38       	jl	$+90     	;abs 0x32ac
    3254:	29 00 44 4d 	mova	&0x04d44,r9	
    3258:	41 31       	jn	$+644    	;abs 0x34dc
    325a:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    325c:	4c 3a       	jl	$-870    	;abs 0x2ef6
    325e:	47 28       	jnc	$+144    	;abs 0x32ee
    3260:	31 36       	jge	$-924    	;abs 0x2ec4
    3262:	2c 38       	jl	$+90     	;abs 0x32bc
    3264:	29 00 44 4d 	mova	&0x04d44,r9	
    3268:	41 31       	jn	$+644    	;abs 0x34ec
    326a:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    326c:	4c 3a       	jl	$-870    	;abs 0x2f06
    326e:	47 28       	jnc	$+144    	;abs 0x32fe
    3270:	31 36       	jge	$-924    	;abs 0x2ed4
    3272:	2c 38       	jl	$+90     	;abs 0x32cc
    3274:	29 00 44 4d 	mova	&0x04d44,r9	
    3278:	41 31       	jn	$+644    	;abs 0x34fc
    327a:	44 41       	mov.b	r1,	r4	
    327c:	3a 47       	mov	@r7+,	r10	

void process_menu(void){
    switch(MenuStep){
    327e:	28 31       	jn	$+594    	;abs 0x34d0
    3280:	36 2c       	jc	$+110    	;abs 0x32ee
    3282:	38 29       	jnc	$+626    	;abs 0x34f4
    3284:	00 44       	br	r4		
    3286:	4d 41       	mov.b	r1,	r13	
    3288:	31 44       	mov	@r4+,	r1	
    328a:	41 4c       	mov.b	r12,	r1	
    328c:	3a 47       	mov	@r7+,	r10	
    328e:	28 31       	jn	$+594    	;abs 0x34e0
    3290:	36 2c       	jc	$+110    	;abs 0x32fe
    3292:	38 29       	jnc	$+626    	;abs 0x3504
    3294:	00 44       	br	r4		
    3296:	4d 41       	mov.b	r1,	r13	
    3298:	31 53       	add	#-1,	r1	;r3 As==11
    329a:	5a 3a       	jl	$-842    	;abs 0x2f50
        case DISPLAY:
            lcd_goto(0,14);
    329c:	47 28       	jnc	$+144    	;abs 0x332c
    329e:	31 36       	jge	$-924    	;abs 0x2f02
    32a0:	2c 38       	jl	$+90     	;abs 0x32fa
    32a2:	29 00 44 4d 	mova	&0x04d44,r9	
            printf("DISPLAY             ");
    32a6:	41 32       	jn	$-892    	;abs 0x2f2a
    32a8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    32aa:	4c 3a       	jl	$-870    	;abs 0x2f44
    32ac:	47 28       	jnc	$+144    	;abs 0x333c
            
            lcd_clear(BLACK);
    32ae:	31 36       	jge	$-924    	;abs 0x2f12
    32b0:	2c 38       	jl	$+90     	;abs 0x330a
    32b2:	29 00 44 4d 	mova	&0x04d44,r9	
            lcd_goto(0,0);
    32b6:	41 32       	jn	$-892    	;abs 0x2f3a
    32b8:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    32ba:	4c 3a       	jl	$-870    	;abs 0x2f54
            printf("   MAIN MENU\n\n");
    32bc:	47 28       	jnc	$+144    	;abs 0x334c
    32be:	31 36       	jge	$-924    	;abs 0x2f22
    32c0:	2c 38       	jl	$+90     	;abs 0x331a
    32c2:	29 00 44 4d 	mova	&0x04d44,r9	
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
    32c6:	41 32       	jn	$-892    	;abs 0x2f4a
    32c8:	44 41       	mov.b	r1,	r4	
    32ca:	4c 3a       	jl	$-870    	;abs 0x2f64
            MenuStep = SELECT;
    32cc:	47 28       	jnc	$+144    	;abs 0x335c
    32ce:	31 36       	jge	$-924    	;abs 0x2f32
            break;
    32d0:	2c 38       	jl	$+90     	;abs 0x332a
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    32d2:	29 00 44 4d 	mova	&0x04d44,r9	
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
            MenuStep = SELECT;
            break;
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
    32d6:	41 32       	jn	$-892    	;abs 0x2f5a
    32d8:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    32da:	3a 47       	mov	@r7+,	r10	
    32dc:	28 31       	jn	$+594    	;abs 0x352e
            printf("SELECT            ");
    32de:	36 2c       	jc	$+110    	;abs 0x334c
    32e0:	38 29       	jnc	$+626    	;abs 0x3552
    32e2:	00 57       	add	r7,	r0	
    32e4:	44 54       	rla.b	r4		
            
            lcd_goto(0,(int)MenuOption + 2);
    32e6:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    32e8:	4c 3a       	jl	$-870    	;abs 0x2f82
    32ea:	47 28       	jnc	$+144    	;abs 0x337a
    32ec:	31 36       	jge	$-924    	;abs 0x2f50
    32ee:	2c 38       	jl	$+90     	;abs 0x3348
    32f0:	29 00 54 4c 	mova	&0x04c54,r9	
            printf(">");
    32f4:	56 5f 43 48 	add.b	18499(r15),r6	;0x4843(r15)
    32f8:	45 43       	clr.b	r5		
    32fa:	4b 53       	add.b	#0,	r11	;r3 As==00
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    32fc:	55 4d 3a 47 	mov.b	18234(r13),r5	;0x473a(r13)
    3300:	28 31       	jn	$+594    	;abs 0x3552
    3302:	36 2c       	jc	$+110    	;abs 0x3370
    3304:	38 29       	jnc	$+626    	;abs 0x3576
                MenuStep = WAIT_PITCH_DOWN;
    3306:	00 4c       	br	r12		
    3308:	43 44       	.word	0x4443;	????	Illegal as 2-op instr
                    MenuStep = WAIT_PITCH_UP;
                }
            }
            
            // select
            if(ChannelInput[ROLL_CH] > 3500){
    330a:	5f 6c 69 6e 	addc.b	28265(r12),r15	;0x6e69(r12)
    330e:	65 63       	addc.b	#2,	r5	;r3 As==10
    3310:	6f 75       	subc.b	@r5,	r15	
                MenuStep = WAIT_ROLL_LEFT;
    3312:	6e 74       	subc.b	@r4,	r14	
    3314:	3a 47       	mov	@r7+,	r10	
    3316:	28 30       	jn	$+82     	;abs 0x3368
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3318:	2c 31       	jn	$+602    	;abs 0x3572
    331a:	31 29       	jnc	$+612    	;abs 0x357e
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    331c:	00 4c       	br	r12		
    331e:	43 44       	.word	0x4443;	????	Illegal as 2-op instr
    3320:	5f 63       	addc.b	#1,	r15	;r3 As==01
    3322:	68 61       	addc.b	@r1,	r8	
                    MenuStep = WAIT_PITCH_UP;
    3324:	72 63       	addc.b	#-1,	r2	;r3 As==11
    3326:	6f 75       	subc.b	@r5,	r15	
    3328:	6e 74       	subc.b	@r4,	r14	
    332a:	3a 47       	mov	@r7+,	r10	
            }
            
            break;
        
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    332c:	28 30       	jn	$+82     	;abs 0x337e
    332e:	2c 31       	jn	$+602    	;abs 0x3588
    3330:	31 29       	jnc	$+612    	;abs 0x3594
    3332:	00 63       	adc	r0		
    3334:	6f 6c       	addc.b	@r12,	r15	
            printf("WAIT PITCH DOWN    ");
    3336:	6f 72       	subc.b	#4,	r15	;r2 As==10
    3338:	5f 62 61 63 	addc.b	&0x6361,r15	
    333c:	6b 3a       	jl	$-808    	;abs 0x3014
            
            if(ChannelInput[PITCH_CH] > 2500){
    333e:	47 28       	jnc	$+144    	;abs 0x33ce
    3340:	30 2c       	jc	$+98     	;abs 0x33a2
    3342:	31 31       	jn	$+612    	;abs 0x35a6
    3344:	29 00 63 6f 	mova	&0x06f63,r9	
                lcd_goto(0,(int)MenuOption + 2);
    3348:	6c 6f       	addc.b	@r15,	r12	
    334a:	72 5f       	add.b	@r15+,	r2	
    334c:	66 6f       	addc.b	@r15,	r6	
    334e:	72 65       	addc.b	@r5+,	r2	
    3350:	3a 47       	mov	@r7+,	r10	
    3352:	28 30       	jn	$+82     	;abs 0x33a4
    3354:	2c 31       	jn	$+602    	;abs 0x35ae
                printf(" ");
    3356:	31 29       	jnc	$+612    	;abs 0x35ba
    3358:	00 61       	addc	r1,	r0	
    335a:	73 63       	.word	0x6373;	????	Illegal as 2-op instr
    335c:	69 69       	addc.b	@r9,	r9	
                if((int)MenuOption > 0){
    335e:	74 61       	addc.b	@r1+,	r4	
    3360:	62 6c       	addc.b	@r12,	r2	
    3362:	65 3a       	jl	$-820    	;abs 0x302e
    3364:	47 28       	jnc	$+144    	;abs 0x33f4
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
    3366:	31 2c       	jc	$+100    	;abs 0x33ca
    3368:	34 29       	jnc	$+618    	;abs 0x35d2
    336a:	3d 61       	addc	@r1+,	r13	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    336c:	72 28       	jnc	$+230    	;abs 0x3452
    336e:	31 36       	jge	$-924    	;abs 0x2fd2
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3370:	2c 37       	jge	$-422    	;abs 0x31ca
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    3372:	29 3b       	jl	$-428    	;abs 0x31c6
    3374:	30 3b       	jl	$-414    	;abs 0x31d6
    3376:	36 33       	jn	$-402    	;abs 0x31e4
    3378:	39 3b       	jl	$-396    	;abs 0x31ec
    337a:	28 34       	jge	$+82     	;abs 0x33cc
            printf("WAIT PITCH UP    ");
    337c:	2c 31       	jn	$+602    	;abs 0x35d6
    337e:	39 29       	jnc	$+628    	;abs 0x35f2
    3380:	00 43       	clr	r0		
    3382:	3a 5c       	add	@r12+,	r10	

            if(ChannelInput[PITCH_CH] < 3500){
    3384:	55 73       	subc.b	#1,	r5	;r3 As==01
    3386:	65 72       	subc.b	#4,	r5	;r2 As==10
    3388:	73 5c       	.word	0x5c73;	????	Illegal as 2-op instr
    338a:	66 6c       	addc.b	@r12,	r6	
    338c:	61 76       	subc.b	@r6,	r1	
                lcd_goto(0,(int)MenuOption + 2);
    338e:	69 6f       	addc.b	@r15,	r9	
    3390:	68 70       	subc.b	@r0,	r8	
    3392:	6f 5c       	add.b	@r12,	r15	
    3394:	44 65       	addc.b	r5,	r4	
    3396:	73 6b       	.word	0x6b73;	????	Illegal as 2-op instr
    3398:	74 6f       	addc.b	@r15+,	r4	
    339a:	70 5c       	add.b	@r12+,	r0	
                printf(" ");
    339c:	6d 69       	addc.b	@r9,	r13	
    339e:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
    33a0:	6f 71       	subc.b	@r1,	r15	
    33a2:	75 61       	addc.b	@r1+,	r5	
                if((int)MenuOption < MENU_LENGHT){
    33a4:	64 2f       	jc	$-310    	;abs 0x326e
    33a6:	00 64       	addc	r4,	r0	
    33a8:	65 6c       	addc.b	@r12,	r5	
    33aa:	61 79       	subc.b	@r9,	r1	
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    33ac:	2e 63       	addc	#2,	r14	;r3 As==10
    33ae:	00 64       	addc	r4,	r0	
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    33b0:	65 6c       	addc.b	@r12,	r5	
    33b2:	61 79       	subc.b	@r9,	r1	
    33b4:	32 75       	subc	@r5+,	r2	
    33b6:	73 3a       	jl	$-792    	;abs 0x309e
    33b8:	46 28       	jnc	$+142    	;abs 0x3446
            printf("WAIT CH7 BACK    ");
    33ba:	30 2c       	jc	$+98     	;abs 0x341c
    33bc:	32 30       	jn	$+102    	;abs 0x3422
    33be:	29 00 64 65 	mova	&0x06564,r9	
            
            if(ChannelInput[CH7_CH] < 2500){
    33c2:	6c 61       	addc.b	@r1,	r12	
    33c4:	79 35       	jge	$+756    	;abs 0x36b8
    33c6:	75 73       	subc.b	#-1,	r5	;r3 As==11
    33c8:	3a 46       	mov	@r6+,	r10	
    33ca:	28 30       	jn	$+82     	;abs 0x341c
                MenuStep = DISPLAY;
    33cc:	2c 32       	jn	$-934    	;abs 0x3026
    33ce:	30 29       	jnc	$+610    	;abs 0x3630
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    33d0:	00 64       	addc	r4,	r0	
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    33d2:	65 6c       	addc.b	@r12,	r5	
    33d4:	61 79       	subc.b	@r9,	r1	
    33d6:	75 73       	subc.b	#-1,	r5	;r3 As==11
    33d8:	3a 46       	mov	@r6+,	r10	
    33da:	28 30       	jn	$+82     	;abs 0x342c
            printf("WAIT ROLL LEFT    ");
    33dc:	2c 32       	jn	$-934    	;abs 0x3036
    33de:	30 29       	jnc	$+610    	;abs 0x3640
    33e0:	00 74       	subc	r4,	r0	
    33e2:	65 6d       	addc.b	@r13,	r5	
            
            if(ChannelInput[ROLL_CH] < 3500){
    33e4:	70 6f       	addc.b	@r15+,	r0	
    33e6:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    33ea:	2c 34       	jge	$+90     	;abs 0x3444
    33ec:	29 00 64 65 	mova	&0x06564,r9	
                lcd_clear(BLACK);
    33f0:	6c 61       	addc.b	@r1,	r12	
    33f2:	79 6d       	addc.b	@r13+,	r9	
                lcd_goto(0,0);  
    33f4:	73 3a       	jl	$-792    	;abs 0x30dc
    33f6:	46 28       	jnc	$+142    	;abs 0x3484
    33f8:	30 2c       	jc	$+98     	;abs 0x345a
    33fa:	32 30       	jn	$+102    	;abs 0x3460
                MenuStep = PROCESS_OPTION;
    33fc:	29 00 4d 50 	mova	&0x0504d,r9	
    3400:	59 3a       	jl	$-844    	;abs 0x30b4
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3402:	47 28       	jnc	$+144    	;abs 0x3492
                MenuStep = DISPLAY;
            }
            break;
                    
        case PROCESS_OPTION:
            process_option();
    3404:	39 2c       	jc	$+116    	;abs 0x3478
    3406:	38 29       	jnc	$+626    	;abs 0x3678
    3408:	00 4d       	br	r13		
    340a:	50 59 53 3a 	add.b	14931(r9),r0	;0x3a53(r9)
        case WAIT_ROLL_RIGHT:
            break;    
    }
}

void process_option(){
    340e:	47 28       	jnc	$+144    	;abs 0x349e
    int i;
    switch (MenuOption){
    3410:	39 2c       	jc	$+116    	;abs 0x3484
    3412:	38 29       	jnc	$+626    	;abs 0x3684
    3414:	00 4d       	br	r13		
    3416:	41 43       	clr.b	r1		
    3418:	3a 47       	mov	@r7+,	r10	
    341a:	28 39       	jl	$+594    	;abs 0x366c
    341c:	2c 38       	jl	$+90     	;abs 0x3476
    341e:	29 00 4d 41 	mova	&0x0414d,r9	
    3422:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    3424:	3a 47       	mov	@r7+,	r10	
        case INITIAL_SETTINGS:
            // seta o flag initial setup
            break;          
    }
    
    if(ChannelInput[CH7_CH] > 3500){
    3426:	28 39       	jl	$+594    	;abs 0x3678
    3428:	2c 38       	jl	$+90     	;abs 0x3482
    342a:	29 00 4f 50 	mova	&0x0504f,r9	
        MenuStep = WAIT_CH7_BACK;
    342e:	32 3a       	jl	$-922    	;abs 0x3094
    3430:	47 28       	jnc	$+144    	;abs 0x34c0
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    3432:	39 2c       	jc	$+116    	;abs 0x34a6
    3434:	38 29       	jnc	$+626    	;abs 0x36a6
        lcd_clear(BLACK);
    3436:	00 52       	add	r2,	r0	
    3438:	45 53       	add.b	#0,	r5	;r3 As==00
    343a:	4c 4f       	mov.b	r15,	r12	
    343c:	3a 47       	mov	@r7+,	r10	
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
    343e:	28 39       	jl	$+594    	;abs 0x3690
    3440:	2c 38       	jl	$+90     	;abs 0x349a
    3442:	29 00 52 45 	mova	&0x04552,r9	

void process_option(){
    int i;
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
    3446:	53 48       	.word	0x4853;	????	Illegal as 2-op instr
            break;
    3448:	49 3a       	jl	$-876    	;abs 0x30dc
    344a:	47 28       	jnc	$+144    	;abs 0x34da
    344c:	39 2c       	jc	$+116    	;abs 0x34c0
    344e:	38 29       	jnc	$+626    	;abs 0x36c0
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
    3450:	00 53       	add	#0,	r0	;r3 As==00
    3452:	55 4d 45 58 	mov.b	22597(r13),r5	;0x5845(r13)
            for(i = 5; i >= 0; i--){ // contagem regressiva
    3456:	54 3a       	jl	$-854    	;abs 0x3100
    3458:	47 28       	jnc	$+144    	;abs 0x34e8
                lcd_goto(8,8);
    345a:	39 2c       	jc	$+116    	;abs 0x34ce
    345c:	38 29       	jnc	$+626    	;abs 0x36ce
    345e:	00 70       	subc	r0,	r0	
    3460:	6f 72       	subc.b	#4,	r15	;r2 As==10
                printf("%d", i);
    3462:	74 31       	jn	$+746    	;abs 0x374c
    3464:	3a 47       	mov	@r7+,	r10	
    3466:	28 37       	jge	$-430    	;abs 0x32b8
    3468:	2c 34       	jge	$+90     	;abs 0x34c2
    346a:	29 00 70 6f 	mova	&0x06f70,r9	
                delayms(1000);
    346e:	72 74       	subc.b	@r4+,	r2	
    3470:	32 3a       	jl	$-922    	;abs 0x30d6
    3472:	47 28       	jnc	$+144    	;abs 0x3502
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    3474:	37 2c       	jc	$+112    	;abs 0x34e4
    3476:	34 29       	jnc	$+618    	;abs 0x36e0
    3478:	00 70       	subc	r0,	r0	
    347a:	6f 72       	subc.b	#4,	r15	;r2 As==10
    347c:	74 33       	jn	$-278    	;abs 0x3366
                lcd_goto(8,8);
                printf("%d", i);
                delayms(1000);
            }
            MotorArmed = TRUE;
    347e:	3a 47       	mov	@r7+,	r10	
    3480:	28 37       	jge	$-430    	;abs 0x32d2
            MenuVisible = FALSE;
    3482:	2c 35       	jge	$+602    	;abs 0x36dc
    3484:	29 00 70 6f 	mova	&0x06f70,r9	
            lcd_clear(BLACK);
    3488:	72 74       	subc.b	@r4+,	r2	
    348a:	34 3a       	jl	$-918    	;abs 0x30f4
            MenuStep = DISPLAY;
    348c:	47 28       	jnc	$+144    	;abs 0x351c
    348e:	37 2c       	jc	$+112    	;abs 0x34fe
    3490:	35 29       	jnc	$+620    	;abs 0x36fc
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
    3492:	00 70       	subc	r0,	r0	
    3494:	6f 72       	subc.b	#4,	r15	;r2 As==10
            break;
    3496:	74 35       	jge	$+746    	;abs 0x3780
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    }
}
    3498:	3a 47       	mov	@r7+,	r10	
    349a:	28 37       	jge	$-430    	;abs 0x32ec
    349c:	2c 35       	jge	$+602    	;abs 0x36f6
    349e:	29 00 70 6f 	mova	&0x06f70,r9	

void draw_analog_graph(void){
    lcd_goto(4,4);
    34a2:	72 74       	subc.b	@r4+,	r2	
    34a4:	36 3a       	jl	$-914    	;abs 0x3112
    34a6:	47 28       	jnc	$+144    	;abs 0x3536
    34a8:	37 2c       	jc	$+112    	;abs 0x3518
    printf("FAZER");
    34aa:	35 29       	jnc	$+620    	;abs 0x3716
    34ac:	00 50       	rla	r0		
    34ae:	31 49       	mov	@r9+,	r1	
    34b0:	4e 3a       	jl	$-866    	;abs 0x314e
    34b2:	47 28       	jnc	$+144    	;abs 0x3542
}
    34b4:	31 2c       	jc	$+100    	;abs 0x3518
    34b6:	31 29       	jnc	$+612    	;abs 0x371a
    34b8:	3d 42       	mov	#8,	r13	;r2 As==11
    34ba:	28 30       	jn	$+82     	;abs 0x350c
    34bc:	2c 31       	jn	$+602    	;abs 0x3716
    34be:	31 29       	jnc	$+612    	;abs 0x3722
    34c0:	00 50       	rla	r0		
    34c2:	31 4f       	mov	@r15+,	r1	
    34c4:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    34c8:	28 31       	jn	$+594    	;abs 0x371a
    34ca:	2c 31       	jn	$+602    	;abs 0x3724
    34cc:	29 00 50 31 	mova	&0x03150,r9	
    34d0:	44 49       	mov.b	r9,	r4	
    34d2:	52 3a       	jl	$-858    	;abs 0x3178
    34d4:	47 28       	jnc	$+144    	;abs 0x3564
    34d6:	31 2c       	jc	$+100    	;abs 0x353a
    34d8:	31 29       	jnc	$+612    	;abs 0x373c

void process_analog_menu(void){
    switch(MenuAnalog){
    34da:	00 50       	rla	r0		
    34dc:	31 49       	mov	@r9+,	r1	
    34de:	46 47       	mov.b	r7,	r6	
    34e0:	3a 47       	mov	@r7+,	r10	
    34e2:	28 31       	jn	$+594    	;abs 0x3734
    34e4:	2c 31       	jn	$+602    	;abs 0x373e
    34e6:	29 00 50 31 	mova	&0x03150,r9	
    34ea:	49 45       	mov.b	r5,	r9	
    34ec:	53 3a       	jl	$-856    	;abs 0x3194
    34ee:	47 28       	jnc	$+144    	;abs 0x357e
    34f0:	31 2c       	jc	$+100    	;abs 0x3554
    34f2:	31 29       	jnc	$+612    	;abs 0x3756
    34f4:	00 50       	rla	r0		
    34f6:	31 49       	mov	@r9+,	r1	
        case DISPLAY:
            lcd_goto(0,14);
    34f8:	45 3a       	jl	$-884    	;abs 0x3184
    34fa:	47 28       	jnc	$+144    	;abs 0x358a
    34fc:	31 2c       	jc	$+100    	;abs 0x3560
    34fe:	31 29       	jnc	$+612    	;abs 0x3762
    3500:	00 50       	rla	r0		
            printf("DISPLAY             ");
    3502:	31 53       	add	#-1,	r1	;r3 As==11
    3504:	45 4c       	mov.b	r12,	r5	
    3506:	3a 47       	mov	@r7+,	r10	
    3508:	28 31       	jn	$+594    	;abs 0x375a

            refresh_analog_menu();
    350a:	2c 31       	jn	$+602    	;abs 0x3764
    350c:	29 00 50 31 	mova	&0x03150,r9	
            MenuAnalog = SELECT;
    3510:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3514:	47 28       	jnc	$+144    	;abs 0x35a4

            refresh_analog_menu();
            MenuAnalog = SELECT;
            break;
        case SELECT:
            lcd_goto(0,14);
    3516:	31 2c       	jc	$+100    	;abs 0x357a
    3518:	31 29       	jnc	$+612    	;abs 0x377c
    351a:	00 50       	rla	r0		
    351c:	32 49       	mov	@r9+,	r2	
    351e:	4e 3a       	jl	$-866    	;abs 0x31bc
            printf("SELECT            ");
    3520:	47 28       	jnc	$+144    	;abs 0x35b0
    3522:	31 2c       	jc	$+100    	;abs 0x3586
    3524:	31 29       	jnc	$+612    	;abs 0x3788
    3526:	00 50       	rla	r0		

            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    3528:	32 4f       	mov	@r15+,	r2	
    352a:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    352e:	28 31       	jn	$+594    	;abs 0x3780
    3530:	2c 31       	jn	$+602    	;abs 0x378a
                MenuAnalog = WAIT_ROLL_LEFT;
    3532:	29 00 50 32 	mova	&0x03250,r9	
    3536:	44 49       	mov.b	r9,	r4	
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
            
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    3538:	52 3a       	jl	$-858    	;abs 0x31de
    353a:	47 28       	jnc	$+144    	;abs 0x35ca
    353c:	31 2c       	jc	$+100    	;abs 0x35a0
    353e:	31 29       	jnc	$+612    	;abs 0x37a2
                MenuAnalog = WAIT_PITCH_DOWN;
    3540:	00 50       	rla	r0		
    3542:	32 49       	mov	@r9+,	r2	
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3544:	46 47       	mov.b	r7,	r6	
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    3546:	3a 47       	mov	@r7+,	r10	
    3548:	28 31       	jn	$+594    	;abs 0x379a
    354a:	2c 31       	jn	$+602    	;abs 0x37a4
    354c:	29 00 50 32 	mova	&0x03250,r9	
                    MenuAnalog = WAIT_PITCH_UP;
    3550:	49 45       	mov.b	r5,	r9	
    3552:	53 3a       	jl	$-856    	;abs 0x31fa
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3554:	47 28       	jnc	$+144    	;abs 0x35e4
    3556:	31 2c       	jc	$+100    	;abs 0x35ba
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
            }
            else{
                if(ChannelInput[ROLL_CH] < 2500){
    3558:	31 29       	jnc	$+612    	;abs 0x37bc
    355a:	00 50       	rla	r0		
    355c:	32 49       	mov	@r9+,	r2	
    355e:	45 3a       	jl	$-884    	;abs 0x31ea
                    MenuAnalog = WAIT_ROLL_RIGHT;
    3560:	47 28       	jnc	$+144    	;abs 0x35f0
    3562:	31 2c       	jc	$+100    	;abs 0x35c6
    3564:	31 29       	jnc	$+612    	;abs 0x37c8
    3566:	00 50       	rla	r0		
                }
            }
            
            break;
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    3568:	32 53       	add	#-1,	r2	;r3 As==11
    356a:	45 4c       	mov.b	r12,	r5	
    356c:	3a 47       	mov	@r7+,	r10	
    356e:	28 31       	jn	$+594    	;abs 0x37c0
    3570:	2c 31       	jn	$+602    	;abs 0x37ca
            printf("WAIT PITCH DOWN    ");
    3572:	29 00 50 32 	mova	&0x03250,r9	
    3576:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)

            if(ChannelInput[PITCH_CH] > 2500){
    357a:	47 28       	jnc	$+144    	;abs 0x360a
    357c:	31 2c       	jc	$+100    	;abs 0x35e0
    357e:	31 29       	jnc	$+612    	;abs 0x37e2
    3580:	00 50       	rla	r0		
    3582:	33 49       	.word	0x4933;	????	Illegal as 2-op instr
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    3584:	4e 3a       	jl	$-866    	;abs 0x3222
    3586:	47 28       	jnc	$+144    	;abs 0x3616
    3588:	31 2c       	jc	$+100    	;abs 0x35ec
    358a:	31 29       	jnc	$+612    	;abs 0x37ee
    358c:	00 50       	rla	r0		
    358e:	33 4f       	.word	0x4f33;	????	Illegal as 2-op instr
    3590:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    3594:	28 31       	jn	$+594    	;abs 0x37e6
    3596:	2c 31       	jn	$+602    	;abs 0x37f0
    3598:	29 00 50 33 	mova	&0x03350,r9	

                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
                        AnalogSelect--;
                    }
                    MenuAnalog = DISPLAY;
    359c:	44 49       	mov.b	r9,	r4	
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    359e:	52 3a       	jl	$-858    	;abs 0x3244
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    35a0:	47 28       	jnc	$+144    	;abs 0x3630
    35a2:	31 2c       	jc	$+100    	;abs 0x3606
    35a4:	31 29       	jnc	$+612    	;abs 0x3808
    35a6:	00 50       	rla	r0		
    35a8:	33 53       	.word	0x5333;	????	Illegal as 2-op instr
            printf("WAIT PITCH UP    ");
    35aa:	45 4c       	mov.b	r12,	r5	
    35ac:	3a 47       	mov	@r7+,	r10	
    35ae:	28 31       	jn	$+594    	;abs 0x3800
    35b0:	2c 31       	jn	$+602    	;abs 0x380a

            if(ChannelInput[PITCH_CH] < 3500){
    35b2:	29 00 50 33 	mova	&0x03350,r9	
    35b6:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    35ba:	47 28       	jnc	$+144    	;abs 0x364a
    35bc:	31 2c       	jc	$+100    	;abs 0x3620
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
    35be:	31 29       	jnc	$+612    	;abs 0x3822
    35c0:	00 50       	rla	r0		
    35c2:	34 49       	mov	@r9+,	r4	
    35c4:	4e 3a       	jl	$-866    	;abs 0x3262
    35c6:	47 28       	jnc	$+144    	;abs 0x3656
                printf("WAIT ROLL RIGHT ");
    35c8:	31 2c       	jc	$+100    	;abs 0x362c
    35ca:	31 29       	jnc	$+612    	;abs 0x382e
    35cc:	00 50       	rla	r0		
    35ce:	34 4f       	mov	@r15+,	r4	

                if(ChannelInput[PITCH_CH] < 3500){
    35d0:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    35d4:	28 31       	jn	$+594    	;abs 0x3826
    35d6:	2c 31       	jn	$+602    	;abs 0x3830
    35d8:	29 00 50 34 	mova	&0x03450,r9	
                    if(AnalogSelect > 0){
    35dc:	44 49       	mov.b	r9,	r4	
    35de:	52 3a       	jl	$-858    	;abs 0x3284
    35e0:	47 28       	jnc	$+144    	;abs 0x3670
                        AnalogSelect--;
    35e2:	31 2c       	jc	$+100    	;abs 0x3646
    35e4:	31 29       	jnc	$+612    	;abs 0x3848
    35e6:	00 50       	rla	r0		
    35e8:	34 53       	add	#-1,	r4	;r3 As==11
                    MenuAnalog = DISPLAY;
                }
            break;
            
        case WAIT_ROLL_LEFT:
                lcd_goto(0,14);
    35ea:	45 4c       	mov.b	r12,	r5	
    35ec:	3a 47       	mov	@r7+,	r10	
    35ee:	28 31       	jn	$+594    	;abs 0x3840
    35f0:	2c 31       	jn	$+602    	;abs 0x384a
    35f2:	29 00 50 34 	mova	&0x03450,r9	
                printf("WAIT ROLL LEFT   ");
    35f6:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    35fa:	47 28       	jnc	$+144    	;abs 0x368a
        
                if(ChannelInput[PITCH_CH] > 2500){
    35fc:	31 2c       	jc	$+100    	;abs 0x3660
    35fe:	31 29       	jnc	$+612    	;abs 0x3862
    3600:	00 50       	rla	r0		
    3602:	35 49       	mov	@r9+,	r5	
    3604:	4e 3a       	jl	$-866    	;abs 0x32a2
                   if(AnalogSelect < 7){
    3606:	47 28       	jnc	$+144    	;abs 0x3696
    3608:	31 2c       	jc	$+100    	;abs 0x366c
    360a:	31 29       	jnc	$+612    	;abs 0x386e
    360c:	00 50       	rla	r0		
    360e:	35 4f       	mov	@r15+,	r5	
                        AnalogSelect++;
    3610:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    3614:	28 31       	jn	$+594    	;abs 0x3866
                    }
                    MenuAnalog = DISPLAY;
    3616:	2c 31       	jn	$+602    	;abs 0x3870
    3618:	29 00 50 35 	mova	&0x03550,r9	
    361c:	44 49       	mov.b	r9,	r4	
    361e:	52 3a       	jl	$-858    	;abs 0x32c4
    3620:	47 28       	jnc	$+144    	;abs 0x36b0
    3622:	31 2c       	jc	$+100    	;abs 0x3686
    3624:	31 29       	jnc	$+612    	;abs 0x3888
    3626:	00 50       	rla	r0		
    3628:	35 53       	add	#-1,	r5	;r3 As==11
    362a:	45 4c       	mov.b	r12,	r5	
    362c:	3a 47       	mov	@r7+,	r10	
    362e:	28 31       	jn	$+594    	;abs 0x3880
    3630:	2c 31       	jn	$+602    	;abs 0x388a
        case WAIT_CH7_BACK:
            break;
    }
}

void refresh_analog_menu(void){
    3632:	29 00 50 35 	mova	&0x03550,r9	
    int i;
    lcd_goto(1,12);
    3636:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    363a:	47 28       	jnc	$+144    	;abs 0x36ca
    363c:	31 2c       	jc	$+100    	;abs 0x36a0
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    363e:	31 29       	jnc	$+612    	;abs 0x38a2
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
    3640:	00 50       	rla	r0		
    3642:	36 49       	mov	@r9+,	r6	
    3644:	4e 3a       	jl	$-866    	;abs 0x32e2
    3646:	47 28       	jnc	$+144    	;abs 0x36d6
    3648:	31 2c       	jc	$+100    	;abs 0x36ac
    364a:	31 29       	jnc	$+612    	;abs 0x38ae
    364c:	00 50       	rla	r0		
    364e:	36 4f       	mov	@r15+,	r6	
    3650:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    3654:	28 31       	jn	$+594    	;abs 0x38a6
            color_back = LIME;          // a cor do fundo muda para azul
    3656:	2c 31       	jn	$+602    	;abs 0x38b0
    3658:	29 00 50 36 	mova	&0x03650,r9	
            color_fore = BLACK;
    365c:	44 49       	mov.b	r9,	r4	
    365e:	52 3a       	jl	$-858    	;abs 0x3304
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    3660:	47 28       	jnc	$+144    	;abs 0x36f0
    3662:	31 2c       	jc	$+100    	;abs 0x36c6
    3664:	31 29       	jnc	$+612    	;abs 0x38c8
    3666:	00 50       	rla	r0		
    3668:	36 53       	add	#-1,	r6	;r3 As==11
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
    366a:	45 4c       	mov.b	r12,	r5	
    366c:	3a 47       	mov	@r7+,	r10	
    366e:	28 31       	jn	$+594    	;abs 0x38c0
    3670:	2c 31       	jn	$+602    	;abs 0x38ca
                color_fore = BLACK;
            }
        }                               
        
        printf("%d",i);
    3672:	29 00 50 36 	mova	&0x03650,r9	
    3676:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    367a:	47 28       	jnc	$+144    	;abs 0x370a
        // ajusta as cores para o normal
        color_fore = LIME;
    367c:	31 2c       	jc	$+100    	;abs 0x36e0
    367e:	31 29       	jnc	$+612    	;abs 0x38e2
    3680:	00 50       	rla	r0		
        color_back = BLACK;
    3682:	37 49       	mov	@r9+,	r7	
    3684:	4e 3a       	jl	$-866    	;abs 0x3322
        printf(" ");
    3686:	47 28       	jnc	$+144    	;abs 0x3716
    3688:	31 2c       	jc	$+100    	;abs 0x36ec
    368a:	31 29       	jnc	$+612    	;abs 0x38ee
    368c:	00 50       	rla	r0		
}

void refresh_analog_menu(void){
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    368e:	37 4f       	mov	@r15+,	r7	
    3690:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    3694:	28 31       	jn	$+594    	;abs 0x38e6
    3696:	2c 31       	jn	$+602    	;abs 0x38f0
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
                color_fore = BLACK;
    3698:	29 00 50 37 	mova	&0x03750,r9	
    369c:	44 49       	mov.b	r9,	r4	
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
    369e:	52 3a       	jl	$-858    	;abs 0x3344
    36a0:	47 28       	jnc	$+144    	;abs 0x3730
    36a2:	31 2c       	jc	$+100    	;abs 0x3706
    36a4:	31 29       	jnc	$+612    	;abs 0x3908
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
            color_fore = BLACK;
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
    36a6:	00 50       	rla	r0		
    36a8:	37 53       	add	#-1,	r7	;r3 As==11
            color_fore = LIME;
    36aa:	45 4c       	mov.b	r12,	r5	
    36ac:	3a 47       	mov	@r7+,	r10	
    36ae:	28 31       	jn	$+594    	;abs 0x3900
    36b0:	2c 31       	jn	$+602    	;abs 0x390a
        // ajusta as cores para o normal
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
    36b2:	29 00 50 37 	mova	&0x03750,r9	
    36b6:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    36ba:	47 28       	jnc	$+144    	;abs 0x374a
}
    36bc:	31 2c       	jc	$+100    	;abs 0x3720
    36be:	31 29       	jnc	$+612    	;abs 0x3922

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    36c0:	00 50       	rla	r0		
    36c2:	38 49       	mov	@r9+,	r8	
    RCCounter++;
    36c4:	4e 3a       	jl	$-866    	;abs 0x3362
    36c6:	47 28       	jnc	$+144    	;abs 0x3756
    MenuCounter++;
    36c8:	31 2c       	jc	$+100    	;abs 0x372c
    36ca:	31 29       	jnc	$+612    	;abs 0x392e
}
    36cc:	00 50       	rla	r0		
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    36ce:	38 4f       	mov	@r15+,	r8	
    36d0:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    
    DCOCTL = 0x77;      
    36d4:	28 31       	jn	$+594    	;abs 0x3926
    36d6:	2c 31       	jn	$+602    	;abs 0x3930
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    BCSCTL1 = 0xcf;     
    36d8:	29 00 50 38 	mova	&0x03850,r9	
    36dc:	44 49       	mov.b	r9,	r4	
     * 
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
     * XCAP_0 -- ~1 pF
     */
    BCSCTL3 = 0xa0;
    36de:	52 3a       	jl	$-858    	;abs 0x3384
    36e0:	47 28       	jnc	$+144    	;abs 0x3770
    36e2:	31 2c       	jc	$+100    	;abs 0x3746
}
    36e4:	31 29       	jnc	$+612    	;abs 0x3948

void p1_init(){
        /* Port 1 Output Register */
    P1OUT = PPM_P1MASK;
    36e6:	00 50       	rla	r0		
    36e8:	38 53       	add	#-1,	r8	;r3 As==11

    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;
    36ea:	45 4c       	mov.b	r12,	r5	
    36ec:	3a 47       	mov	@r7+,	r10	

    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida
    36ee:	28 31       	jn	$+594    	;abs 0x3940
    36f0:	2c 31       	jn	$+602    	;abs 0x394a

    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;
    36f2:	29 00 50 38 	mova	&0x03850,r9	

    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;
    36f6:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)

}
    36fa:	47 28       	jnc	$+144    	;abs 0x378a
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    36fc:	31 2c       	jc	$+100    	;abs 0x3760
    36fe:	31 29       	jnc	$+612    	;abs 0x3962
    3700:	00 55       	add	r5,	r0	

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;
    3702:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    3704:	30 43       	br	#-1		;r3 As==11
    3706:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
     * 
     * TASSEL_2 -- SMCLK
     * ID_3 -- Divider - /8
     * MC_1 -- Up Mode
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
    370a:	47 28       	jnc	$+144    	;abs 0x379a
    370c:	31 2c       	jc	$+100    	;abs 0x3770
}
    370e:	31 29       	jnc	$+612    	;abs 0x3972

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    3710:	00 55       	add	r5,	r0	
    3712:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    3714:	30 43       	br	#-1		;r3 As==11
    3716:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    371a:	47 28       	jnc	$+144    	;abs 0x37aa
    371c:	31 2c       	jc	$+100    	;abs 0x3780
    371e:	31 29       	jnc	$+612    	;abs 0x3982
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    3720:	00 55       	add	r5,	r0	
    3722:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    3724:	30 42       	br	#8		;r2 As==11
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    3726:	52 30       	jn	$+166    	;abs 0x37cc
    3728:	3a 47       	mov	@r7+,	r10	
    372a:	28 31       	jn	$+594    	;abs 0x397c
    372c:	2c 31       	jn	$+602    	;abs 0x3986
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    372e:	29 00 55 43 	mova	&0x04355,r9	
    3732:	41 30       	jn	$+132    	;abs 0x37b6
    3734:	42 52       	rla.b	r2		
            if(!(P1IES & PPM_ch_counter)){ // low to high
    3736:	31 3a       	jl	$-924    	;abs 0x339a
    3738:	47 28       	jnc	$+144    	;abs 0x37c8
    373a:	31 2c       	jc	$+100    	;abs 0x379e
    373c:	31 29       	jnc	$+612    	;abs 0x39a0
    373e:	00 55       	add	r5,	r0	
                TimeUpEdge[channel_num] = PPM_aux;
    3740:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    3742:	30 4d       	br	@r13+		
    3744:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3746:	4c 3a       	jl	$-870    	;abs 0x33e0
    3748:	47 28       	jnc	$+144    	;abs 0x37d8
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    374a:	31 2c       	jc	$+100    	;abs 0x37ae
    374c:	31 29       	jnc	$+612    	;abs 0x39b0
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
    374e:	00 55       	add	r5,	r0	
    3750:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    3752:	30 53       	add	#-1,	r0	;r3 As==11
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
    3754:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
    3758:	47 28       	jnc	$+144    	;abs 0x37e8
    375a:	31 2c       	jc	$+100    	;abs 0x37be
    375c:	31 29       	jnc	$+612    	;abs 0x39c0
    375e:	00 55       	add	r5,	r0	
    3760:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    3762:	30 52       	add	#8,	r0	;r2 As==11
    3764:	58 42 55 46 	mov.b	&0x4655,r8	
    3768:	3a 47       	mov	@r7+,	r10	
    376a:	28 31       	jn	$+594    	;abs 0x39bc
    376c:	2c 31       	jn	$+602    	;abs 0x39c6
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
    376e:	29 00 55 43 	mova	&0x04355,r9	
    3772:	41 30       	jn	$+132    	;abs 0x37f6
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    3774:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    3778:	46 3a       	jl	$-882    	;abs 0x3406
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    377a:	47 28       	jnc	$+144    	;abs 0x380a

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    377c:	31 2c       	jc	$+100    	;abs 0x37e0
    377e:	31 29       	jnc	$+612    	;abs 0x39e2
    3780:	00 55       	add	r5,	r0	
    3782:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}
    3784:	30 41       	ret			
    3786:	42 43       	clr.b	r2		
    3788:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    378c:	28 31       	jn	$+594    	;abs 0x39de
    378e:	2c 31       	jn	$+602    	;abs 0x39e8
    3790:	29 00 55 43 	mova	&0x04355,r9	
    3794:	41 30       	jn	$+132    	;abs 0x3818
    3796:	49 52       	add.b	r2,	r9	
    3798:	54 43       	mov.b	#1,	r4	;r3 As==01
    379a:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    379e:	28 31       	jn	$+594    	;abs 0x39f0
    37a0:	2c 31       	jn	$+602    	;abs 0x39fa
    37a2:	29 00 55 43 	mova	&0x04355,r9	
    37a6:	41 30       	jn	$+132    	;abs 0x382a
    37a8:	49 52       	add.b	r2,	r9	
    37aa:	52 43       	mov.b	#1,	r2	;r3 As==01
    37ac:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    37b0:	28 31       	jn	$+594    	;abs 0x3a02
    37b2:	2c 31       	jn	$+602    	;abs 0x3a0c
    37b4:	29 00 55 43 	mova	&0x04355,r9	
    37b8:	42 30       	jn	$+134    	;abs 0x383e
    37ba:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    37bc:	4c 30       	jn	$+154    	;abs 0x3856
    37be:	3a 47       	mov	@r7+,	r10	
    37c0:	28 31       	jn	$+594    	;abs 0x3a12
    37c2:	2c 31       	jn	$+602    	;abs 0x3a1c

void calibrate_radio(void){
    37c4:	29 00 55 43 	mova	&0x04355,r9	
    37c8:	42 30       	jn	$+134    	;abs 0x384e
    37ca:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    37cc:	4c 31       	jn	$+666    	;abs 0x3a66
    37ce:	3a 47       	mov	@r7+,	r10	
    37d0:	28 31       	jn	$+594    	;abs 0x3a22
    37d2:	2c 31       	jn	$+602    	;abs 0x3a2c
    37d4:	29 00 55 43 	mova	&0x04355,r9	
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    37d8:	42 30       	jn	$+134    	;abs 0x385e
    37da:	42 52       	rla.b	r2		
    37dc:	30 3a       	jl	$-926    	;abs 0x343e
    37de:	47 28       	jnc	$+144    	;abs 0x386e
        return;
    }

    int i = 0, k;    
    37e0:	31 2c       	jc	$+100    	;abs 0x3844
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    37e2:	31 29       	jnc	$+612    	;abs 0x3a46
    37e4:	00 55       	add	r5,	r0	
    37e6:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    37e8:	30 42       	br	#8		;r2 As==11
    37ea:	52 31       	jn	$+678    	;abs 0x3a90
    37ec:	3a 47       	mov	@r7+,	r10	
    37ee:	28 31       	jn	$+594    	;abs 0x3a40
    37f0:	2c 31       	jn	$+602    	;abs 0x3a4a
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    37f2:	29 00 55 43 	mova	&0x04355,r9	
    37f6:	42 30       	jn	$+134    	;abs 0x387c
    37f8:	49 32       	jn	$-876    	;abs 0x348c
    37fa:	43 49       	.word	0x4943;	????	Illegal as 2-op instr
    37fc:	45 3a       	jl	$-884    	;abs 0x3488
    37fe:	47 28       	jnc	$+144    	;abs 0x388e
    3800:	31 2c       	jc	$+100    	;abs 0x3864
    3802:	31 29       	jnc	$+612    	;abs 0x3a66
    3804:	00 55       	add	r5,	r0	
    fourbytes ValorAux;        
    
    lcd_goto(2,5);
    3806:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    3808:	30 53       	add	#-1,	r0	;r3 As==11
    380a:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
    380e:	47 28       	jnc	$+144    	;abs 0x389e
    color_fore = RED;
    3810:	31 2c       	jc	$+100    	;abs 0x3874
    3812:	31 29       	jnc	$+612    	;abs 0x3a76
    3814:	00 55       	add	r5,	r0	
    printf("MOVE STICKS\nALL DIRECTIONS");
    3816:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    3818:	30 52       	add	#8,	r0	;r2 As==11
    381a:	58 42 55 46 	mov.b	&0x4655,r8	
    color_fore = LIME;
    381e:	3a 47       	mov	@r7+,	r10	
    3820:	28 31       	jn	$+594    	;abs 0x3a72
    3822:	2c 31       	jn	$+602    	;abs 0x3a7c
    delayms(3000);
    3824:	29 00 55 43 	mova	&0x04355,r9	
    3828:	42 30       	jn	$+134    	;abs 0x38ae
    382a:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    lcd_clear(BLACK);
    382e:	46 3a       	jl	$-882    	;abs 0x34bc
    3830:	47 28       	jnc	$+144    	;abs 0x38c0

    for(i = 0; i < 8; i++){ // zera offset e slope
    3832:	31 2c       	jc	$+100    	;abs 0x3896
    3834:	31 29       	jnc	$+612    	;abs 0x3a98
    3836:	00 55       	add	r5,	r0	
    3838:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    383a:	30 49       	br	@r9+		
        PPMOffset[i] = 0;
    383c:	32 43       	mov	#-1,	r2	;r3 As==11
    383e:	4f 41       	mov.b	r1,	r15	
    3840:	3a 47       	mov	@r7+,	r10	
    3842:	28 39       	jl	$+594    	;abs 0x3a94
    3844:	2c 38       	jl	$+90     	;abs 0x389e
    3846:	29 00 55 43 	mova	&0x04355,r9	
    384a:	42 30       	jn	$+134    	;abs 0x38d0
    384c:	49 32       	jn	$-876    	;abs 0x34e0
        PPMSlope[i] = 1;
    384e:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    3850:	41 3a       	jl	$-892    	;abs 0x34d4
    3852:	47 28       	jnc	$+144    	;abs 0x38e2
    3854:	39 2c       	jc	$+116    	;abs 0x38c8
    3856:	38 29       	jnc	$+626    	;abs 0x3ac8
    3858:	00 55       	add	r5,	r0	
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
    385a:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    385c:	31 43       	mov	#-1,	r1	;r3 As==11
    385e:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
    3862:	47 28       	jnc	$+144    	;abs 0x38f2
    3864:	31 2c       	jc	$+100    	;abs 0x38c8
    3866:	31 29       	jnc	$+612    	;abs 0x3aca
    3868:	00 55       	add	r5,	r0	
    386a:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    386c:	31 43       	mov	#-1,	r1	;r3 As==11
    386e:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    3872:	47 28       	jnc	$+144    	;abs 0x3902
    3874:	31 2c       	jc	$+100    	;abs 0x38d8
    3876:	31 29       	jnc	$+612    	;abs 0x3ada
    3878:	00 55       	add	r5,	r0	
    387a:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    387c:	31 42       	mov	#8,	r1	;r2 As==11
    387e:	52 30       	jn	$+166    	;abs 0x3924
    3880:	3a 47       	mov	@r7+,	r10	
    3882:	28 31       	jn	$+594    	;abs 0x3ad4
    3884:	2c 31       	jn	$+602    	;abs 0x3ade
    3886:	29 00 55 43 	mova	&0x04355,r9	
    388a:	41 31       	jn	$+644    	;abs 0x3b0e
        PPMMax[i] = PPMMin[i];
    388c:	42 52       	rla.b	r2		
    388e:	31 3a       	jl	$-924    	;abs 0x34f2
    3890:	47 28       	jnc	$+144    	;abs 0x3920
    3892:	31 2c       	jc	$+100    	;abs 0x38f6
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    3894:	31 29       	jnc	$+612    	;abs 0x3af8
    3896:	00 55       	add	r5,	r0	
    3898:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    389a:	31 4d       	mov	@r13+,	r1	
    389c:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
        draw_rc_inputs(1);
    389e:	4c 3a       	jl	$-870    	;abs 0x3538
    38a0:	47 28       	jnc	$+144    	;abs 0x3930
    38a2:	31 2c       	jc	$+100    	;abs 0x3906
        lcd_goto(0, 14);
    38a4:	31 29       	jnc	$+612    	;abs 0x3b08
    38a6:	00 55       	add	r5,	r0	
    38a8:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    38aa:	31 53       	add	#-1,	r1	;r3 As==11
    38ac:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
        printf("%d ", k);
    38b0:	47 28       	jnc	$+144    	;abs 0x3940
    38b2:	31 2c       	jc	$+100    	;abs 0x3916
    38b4:	31 29       	jnc	$+612    	;abs 0x3b18
    38b6:	00 55       	add	r5,	r0	
        delayms(1);
    38b8:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    38ba:	31 52       	add	#8,	r1	;r2 As==11
    38bc:	58 42 55 46 	mov.b	&0x4655,r8	
        for(i = 0; i < 8; i++){ // pega max min
    38c0:	3a 47       	mov	@r7+,	r10	
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    38c2:	28 31       	jn	$+594    	;abs 0x3b14
    38c4:	2c 31       	jn	$+602    	;abs 0x3b1e
    38c6:	29 00 55 43 	mova	&0x04355,r9	
    38ca:	41 31       	jn	$+644    	;abs 0x3b4e
    38cc:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    38d0:	46 3a       	jl	$-882    	;abs 0x355e
    38d2:	47 28       	jnc	$+144    	;abs 0x3962
    38d4:	31 2c       	jc	$+100    	;abs 0x3938
    38d6:	31 29       	jnc	$+612    	;abs 0x3b3a
    38d8:	00 55       	add	r5,	r0	
    38da:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    38dc:	31 41       	pop	r1		
    38de:	42 43       	clr.b	r2		
    38e0:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    38e4:	28 31       	jn	$+594    	;abs 0x3b36
    38e6:	2c 31       	jn	$+602    	;abs 0x3b40
    38e8:	29 00 55 43 	mova	&0x04355,r9	
    38ec:	41 31       	jn	$+644    	;abs 0x3b70
    38ee:	49 52       	add.b	r2,	r9	
    38f0:	54 43       	mov.b	#1,	r4	;r3 As==01
    38f2:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    38f6:	28 31       	jn	$+594    	;abs 0x3b48
    38f8:	2c 31       	jn	$+602    	;abs 0x3b52
    38fa:	29 00 55 43 	mova	&0x04355,r9	
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
    38fe:	41 31       	jn	$+644    	;abs 0x3b82
    3900:	49 52       	add.b	r2,	r9	
    3902:	52 43       	mov.b	#1,	r2	;r3 As==01
    3904:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    3908:	28 31       	jn	$+594    	;abs 0x3b5a
    390a:	2c 31       	jn	$+602    	;abs 0x3b64
    390c:	29 00 55 43 	mova	&0x04355,r9	
    3910:	42 31       	jn	$+646    	;abs 0x3b96
    3912:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3914:	4c 30       	jn	$+154    	;abs 0x39ae
    3916:	3a 47       	mov	@r7+,	r10	
    3918:	28 31       	jn	$+594    	;abs 0x3b6a
    391a:	2c 31       	jn	$+602    	;abs 0x3b74
    391c:	29 00 55 43 	mova	&0x04355,r9	
    3920:	42 31       	jn	$+646    	;abs 0x3ba6
    3922:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3924:	4c 31       	jn	$+666    	;abs 0x3bbe
    3926:	3a 47       	mov	@r7+,	r10	
    3928:	28 31       	jn	$+594    	;abs 0x3b7a
    392a:	2c 31       	jn	$+602    	;abs 0x3b84
    392c:	29 00 55 43 	mova	&0x04355,r9	
    3930:	42 31       	jn	$+646    	;abs 0x3bb6
                PPMMin[i] = PPMValue[i];
    3932:	42 52       	rla.b	r2		
    3934:	30 3a       	jl	$-926    	;abs 0x3596
    3936:	47 28       	jnc	$+144    	;abs 0x39c6
    3938:	31 2c       	jc	$+100    	;abs 0x399c
    393a:	31 29       	jnc	$+612    	;abs 0x3b9e
    393c:	00 55       	add	r5,	r0	
    393e:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    3940:	31 42       	mov	#8,	r1	;r2 As==11
    3942:	52 31       	jn	$+678    	;abs 0x3be8
    3944:	3a 47       	mov	@r7+,	r10	
    3946:	28 31       	jn	$+594    	;abs 0x3b98
    3948:	2c 31       	jn	$+602    	;abs 0x3ba2
    394a:	29 00 55 43 	mova	&0x04355,r9	
    394e:	42 31       	jn	$+646    	;abs 0x3bd4
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
    3950:	49 32       	jn	$-876    	;abs 0x35e4
    3952:	43 49       	.word	0x4943;	????	Illegal as 2-op instr
    3954:	45 3a       	jl	$-884    	;abs 0x35e0
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    3956:	47 28       	jnc	$+144    	;abs 0x39e6
    3958:	31 2c       	jc	$+100    	;abs 0x39bc
    395a:	31 29       	jnc	$+612    	;abs 0x3bbe
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    lcd_clear(BLACK);
    395c:	00 55       	add	r5,	r0	
    395e:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    3960:	31 53       	add	#-1,	r1	;r3 As==11
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
    3962:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
    3966:	47 28       	jnc	$+144    	;abs 0x39f6
    3968:	31 2c       	jc	$+100    	;abs 0x39cc
    396a:	31 29       	jnc	$+612    	;abs 0x3bce
    396c:	00 55       	add	r5,	r0	
    396e:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    3970:	31 52       	add	#8,	r1	;r2 As==11
    3972:	58 42 55 46 	mov.b	&0x4655,r8	
    3976:	3a 47       	mov	@r7+,	r10	
    3978:	28 31       	jn	$+594    	;abs 0x3bca
    397a:	2c 31       	jn	$+602    	;abs 0x3bd4
    397c:	29 00 55 43 	mova	&0x04355,r9	
    3980:	42 31       	jn	$+646    	;abs 0x3c06
    3982:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    3986:	46 3a       	jl	$-882    	;abs 0x3614
    3988:	47 28       	jnc	$+144    	;abs 0x3a18
    398a:	31 2c       	jc	$+100    	;abs 0x39ee
    398c:	31 29       	jnc	$+612    	;abs 0x3bf0
    398e:	00 55       	add	r5,	r0	
    3990:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    3992:	31 49       	mov	@r9+,	r1	
    3994:	32 43       	mov	#-1,	r2	;r3 As==11
    3996:	4f 41       	mov.b	r1,	r15	
    3998:	3a 47       	mov	@r7+,	r10	
    399a:	28 39       	jl	$+594    	;abs 0x3bec
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    399c:	2c 38       	jl	$+90     	;abs 0x39f6
    399e:	29 00 55 43 	mova	&0x04355,r9	
    39a2:	42 31       	jn	$+646    	;abs 0x3c28
    39a4:	49 32       	jn	$-876    	;abs 0x3638
    39a6:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    39a8:	41 3a       	jl	$-892    	;abs 0x362c
    39aa:	47 28       	jnc	$+144    	;abs 0x3a3a
    39ac:	39 2c       	jc	$+116    	;abs 0x3a20
    39ae:	38 29       	jnc	$+626    	;abs 0x3c20
    39b0:	00 55       	add	r5,	r0	
    39b2:	43 31       	jn	$+648    	;abs 0x3c3a
    39b4:	49 45       	mov.b	r5,	r9	
    39b6:	3a 47       	mov	@r7+,	r10	
    39b8:	28 31       	jn	$+594    	;abs 0x3c0a
        }
    }
    
    lcd_clear(BLACK);
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
    39ba:	2c 31       	jn	$+602    	;abs 0x3c14
    39bc:	29 00 55 43 	mova	&0x04355,r9	
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
    39c0:	31 49       	mov	@r9+,	r1	
    39c2:	46 47       	mov.b	r7,	r6	
    39c4:	3a 47       	mov	@r7+,	r10	
        i2c_change_address(EEPROM_I2C_ADDR);
    39c6:	28 31       	jn	$+594    	;abs 0x3c18
    39c8:	2c 31       	jn	$+602    	;abs 0x3c22
    39ca:	29 00 54 41 	mova	&0x04154,r9	
        
        // grava yaw slope 
        ValorAux.f = PPMSlope[YAW_CH];
    39ce:	30 49       	br	@r9+		
    39d0:	56 3a       	jl	$-850    	;abs 0x367e
    39d2:	47 28       	jnc	$+144    	;abs 0x3a62
    39d4:	39 2c       	jc	$+116    	;abs 0x3a48
    39d6:	38 29       	jnc	$+626    	;abs 0x3c48
    39d8:	00 54       	add	r4,	r0	
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    39da:	41 30       	jn	$+132    	;abs 0x3a5e
    39dc:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    39de:	4c 3a       	jl	$-870    	;abs 0x3678
    39e0:	47 28       	jnc	$+144    	;abs 0x3a70
    39e2:	39 2c       	jc	$+116    	;abs 0x3a56
    39e4:	38 29       	jnc	$+626    	;abs 0x3c56
    39e6:	00 54       	add	r4,	r0	
    39e8:	41 30       	jn	$+132    	;abs 0x3a6c
        
        delayms(100);
    39ea:	52 3a       	jl	$-858    	;abs 0x3690
    39ec:	47 28       	jnc	$+144    	;abs 0x3a7c
    39ee:	39 2c       	jc	$+116    	;abs 0x3a62
    39f0:	38 29       	jnc	$+626    	;abs 0x3c62
        
        // grava throttle slope 
        ValorAux.f = PPMSlope[THROTTLE_CH];
    39f2:	00 54       	add	r4,	r0	
    39f4:	41 30       	jn	$+132    	;abs 0x3a78
    39f6:	43 43       	clr.b	#0		;r3 As==00
    39f8:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    39fc:	47 28       	jnc	$+144    	;abs 0x3a8c
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    39fe:	39 2c       	jc	$+116    	;abs 0x3a72
    3a00:	38 29       	jnc	$+626    	;abs 0x3c72
    3a02:	00 54       	add	r4,	r0	
    3a04:	41 30       	jn	$+132    	;abs 0x3a88
    3a06:	43 43       	clr.b	#0		;r3 As==00
    3a08:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    3a0c:	47 28       	jnc	$+144    	;abs 0x3a9c
        
        delayms(100);
    3a0e:	39 2c       	jc	$+116    	;abs 0x3a82
    3a10:	38 29       	jnc	$+626    	;abs 0x3c82
    3a12:	00 54       	add	r4,	r0	
    3a14:	41 30       	jn	$+132    	;abs 0x3a98
        
        // grava pitch slope 
        ValorAux.f = PPMSlope[PITCH_CH];
    3a16:	43 43       	clr.b	#0		;r3 As==00
    3a18:	52 30       	jn	$+166    	;abs 0x3abe
    3a1a:	3a 47       	mov	@r7+,	r10	
    3a1c:	28 39       	jl	$+594    	;abs 0x3c6e
    3a1e:	2c 38       	jl	$+90     	;abs 0x3a78
    3a20:	29 00 54 41 	mova	&0x04154,r9	
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    3a24:	30 43       	br	#-1		;r3 As==11
    3a26:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    3a28:	31 3a       	jl	$-924    	;abs 0x368c
    3a2a:	47 28       	jnc	$+144    	;abs 0x3aba
    3a2c:	39 2c       	jc	$+116    	;abs 0x3aa0
    3a2e:	38 29       	jnc	$+626    	;abs 0x3ca0
    3a30:	00 54       	add	r4,	r0	
        
        delayms(100);
    3a32:	41 30       	jn	$+132    	;abs 0x3ab6
    3a34:	43 43       	clr.b	#0		;r3 As==00
    3a36:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
        
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
    3a3a:	47 28       	jnc	$+144    	;abs 0x3aca
    3a3c:	39 2c       	jc	$+116    	;abs 0x3ab0
    3a3e:	38 29       	jnc	$+626    	;abs 0x3cb0
    3a40:	00 54       	add	r4,	r0	
    3a42:	41 30       	jn	$+132    	;abs 0x3ac6
    3a44:	43 43       	clr.b	#0		;r3 As==00
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    3a46:	52 32       	jn	$-858    	;abs 0x36ec
    3a48:	3a 47       	mov	@r7+,	r10	
    3a4a:	28 39       	jl	$+594    	;abs 0x3c9c
    3a4c:	2c 38       	jl	$+90     	;abs 0x3aa6
    3a4e:	29 00 74 69 	mova	&0x06974,r9	
    3a52:	6d 65       	addc.b	@r5,	r13	
    3a54:	72 61       	addc.b	@r1+,	r2	
        
        delayms(100);
    3a56:	3a 47       	mov	@r7+,	r10	
    3a58:	28 39       	jl	$+594    	;abs 0x3caa
    3a5a:	2c 35       	jge	$+602    	;abs 0x3cb4
    3a5c:	29 00 54 42 	mova	&0x04254,r9	
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
    3a60:	49 56       	add.b	r6,	r9	
    3a62:	3a 47       	mov	@r7+,	r10	
    3a64:	28 39       	jl	$+594    	;abs 0x3cb6
    3a66:	2c 38       	jl	$+90     	;abs 0x3ac0
    3a68:	29 00 54 42 	mova	&0x04254,r9	
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    3a6c:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3a6e:	4c 3a       	jl	$-870    	;abs 0x3708
    3a70:	47 28       	jnc	$+144    	;abs 0x3b00
    3a72:	39 2c       	jc	$+116    	;abs 0x3ae6
    3a74:	38 29       	jnc	$+626    	;abs 0x3ce6
    3a76:	00 54       	add	r4,	r0	
    3a78:	42 52       	rla.b	r2		
        
        delayms(100);
    3a7a:	3a 47       	mov	@r7+,	r10	
    3a7c:	28 39       	jl	$+594    	;abs 0x3cce
    3a7e:	2c 38       	jl	$+90     	;abs 0x3ad8
    3a80:	29 00 54 42 	mova	&0x04254,r9	
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    3a84:	43 43       	clr.b	#0		;r3 As==00
    3a86:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    3a8a:	47 28       	jnc	$+144    	;abs 0x3b1a
    3a8c:	39 2c       	jc	$+116    	;abs 0x3b00
        i2c_write16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    3a8e:	38 29       	jnc	$+626    	;abs 0x3d00
    3a90:	00 54       	add	r4,	r0	
    3a92:	42 43       	clr.b	r2		
    3a94:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3a96:	4c 31       	jn	$+666    	;abs 0x3d30
    3a98:	3a 47       	mov	@r7+,	r10	
    3a9a:	28 39       	jl	$+594    	;abs 0x3cec
    3a9c:	2c 38       	jl	$+90     	;abs 0x3af6
        
        delayms(100);
    3a9e:	29 00 54 42 	mova	&0x04254,r9	
    3aa2:	43 43       	clr.b	#0		;r3 As==00
    3aa4:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
        
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
    3aa8:	47 28       	jnc	$+144    	;abs 0x3b38
    3aaa:	39 2c       	jc	$+116    	;abs 0x3b1e
    3aac:	38 29       	jnc	$+626    	;abs 0x3d1e
    3aae:	00 54       	add	r4,	r0	
    3ab0:	42 43       	clr.b	r2		
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    3ab2:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    3ab4:	30 3a       	jl	$-926    	;abs 0x3716
    3ab6:	47 28       	jnc	$+144    	;abs 0x3b46
    3ab8:	39 2c       	jc	$+116    	;abs 0x3b2c
    3aba:	38 29       	jnc	$+626    	;abs 0x3d2c
    3abc:	00 54       	add	r4,	r0	
    3abe:	42 43       	clr.b	r2		
    3ac0:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
        
        delayms(100);
    3ac2:	31 3a       	jl	$-924    	;abs 0x3726
    3ac4:	47 28       	jnc	$+144    	;abs 0x3b54
    3ac6:	39 2c       	jc	$+116    	;abs 0x3b3a
    3ac8:	38 29       	jnc	$+626    	;abs 0x3d3a
        
        // grava yaw offset 
        ValorAux.f = PPMOffset[YAW_CH];
    3aca:	00 54       	add	r4,	r0	
    3acc:	42 43       	clr.b	r2		
    3ace:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    3ad0:	32 3a       	jl	$-922    	;abs 0x3736
    3ad2:	47 28       	jnc	$+144    	;abs 0x3b62
    3ad4:	39 2c       	jc	$+116    	;abs 0x3b48
        i2c_write16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3ad6:	38 29       	jnc	$+626    	;abs 0x3d48
    3ad8:	00 54       	add	r4,	r0	
    3ada:	42 43       	clr.b	r2		
    3adc:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3ade:	4c 33       	jn	$-358    	;abs 0x3978
    3ae0:	3a 47       	mov	@r7+,	r10	
    3ae2:	28 39       	jl	$+594    	;abs 0x3d34
    3ae4:	2c 38       	jl	$+90     	;abs 0x3b3e
        
        delayms(100);
    3ae6:	29 00 54 42 	mova	&0x04254,r9	
    3aea:	43 43       	clr.b	#0		;r3 As==00
    3aec:	54 4c 34 3a 	mov.b	14900(r12),r4	;0x3a34(r12)
        
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
    3af0:	47 28       	jnc	$+144    	;abs 0x3b80
    3af2:	39 2c       	jc	$+116    	;abs 0x3b66
    3af4:	38 29       	jnc	$+626    	;abs 0x3d66
    3af6:	00 54       	add	r4,	r0	
    3af8:	42 43       	clr.b	r2		
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    3afa:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3afc:	4c 35       	jge	$+666    	;abs 0x3d96
    3afe:	3a 47       	mov	@r7+,	r10	
    3b00:	28 39       	jl	$+594    	;abs 0x3d52
    3b02:	2c 38       	jl	$+90     	;abs 0x3b5c
    3b04:	29 00 54 42 	mova	&0x04254,r9	
    3b08:	43 43       	clr.b	#0		;r3 As==00
        
        delayms(100);
    3b0a:	54 4c 36 3a 	mov.b	14902(r12),r4	;0x3a36(r12)
    3b0e:	47 28       	jnc	$+144    	;abs 0x3b9e
    3b10:	39 2c       	jc	$+116    	;abs 0x3b84
        
        // grava pitch offset 
        ValorAux.f = PPMOffset[PITCH_CH];
    3b12:	38 29       	jnc	$+626    	;abs 0x3d84
    3b14:	00 54       	add	r4,	r0	
    3b16:	42 43       	clr.b	r2		
    3b18:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    3b1a:	33 3a       	jl	$-920    	;abs 0x3782
    3b1c:	47 28       	jnc	$+144    	;abs 0x3bac
        i2c_write16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    3b1e:	39 2c       	jc	$+116    	;abs 0x3b92
    3b20:	38 29       	jnc	$+626    	;abs 0x3d92
    3b22:	00 54       	add	r4,	r0	
    3b24:	42 43       	clr.b	r2		
    3b26:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    3b28:	34 3a       	jl	$-918    	;abs 0x3792
    3b2a:	47 28       	jnc	$+144    	;abs 0x3bba
    3b2c:	39 2c       	jc	$+116    	;abs 0x3ba0
        
        delayms(100);
    3b2e:	38 29       	jnc	$+626    	;abs 0x3da0
    3b30:	00 54       	add	r4,	r0	
    3b32:	42 43       	clr.b	r2		
    3b34:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
        
        // grava roll offset 
        ValorAux.f = PPMOffset[ROLL_CH];
    3b36:	35 3a       	jl	$-916    	;abs 0x37a2
    3b38:	47 28       	jnc	$+144    	;abs 0x3bc8
    3b3a:	39 2c       	jc	$+116    	;abs 0x3bae
    3b3c:	38 29       	jnc	$+626    	;abs 0x3dae
    3b3e:	00 54       	add	r4,	r0	
    3b40:	42 43       	clr.b	r2		
        i2c_write16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    3b42:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    3b44:	36 3a       	jl	$-914    	;abs 0x37b2
    3b46:	47 28       	jnc	$+144    	;abs 0x3bd6
    3b48:	39 2c       	jc	$+116    	;abs 0x3bbc
    3b4a:	38 29       	jnc	$+626    	;abs 0x3dbc
    3b4c:	00 74       	subc	r4,	r0	
    3b4e:	69 6d       	addc.b	@r13,	r9	
    3b50:	65 72       	subc.b	#4,	r5	;r2 As==10
        
        delayms(100);
    3b52:	62 3a       	jl	$-826    	;abs 0x3818
    3b54:	47 28       	jnc	$+144    	;abs 0x3be4
    3b56:	31 30       	jn	$+100    	;abs 0x3bba
    3b58:	2c 35       	jge	$+602    	;abs 0x3db2
        
        // grava ch5 offset 
        ValorAux.f = PPMOffset[CH5_CH];
    3b5a:	29 00 44 43 	mova	&0x04344,r9	
    3b5e:	4f 43       	clr.b	r15		
    3b60:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    3b64:	28 31       	jn	$+594    	;abs 0x3db6
        i2c_write16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    3b66:	2c 31       	jn	$+602    	;abs 0x3dc0
    3b68:	29 00 42 43 	mova	&0x04342,r9	
    3b6c:	53 43       	.word	0x4353;	????	Illegal as 2-op instr
    3b6e:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    3b72:	47 28       	jnc	$+144    	;abs 0x3c02
    3b74:	31 2c       	jc	$+100    	;abs 0x3bd8
        
        delayms(100);
    3b76:	31 29       	jnc	$+612    	;abs 0x3dda
    3b78:	00 42       	br	r2		
    3b7a:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    3b7c:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
        
        // grava ch6 offset 
        ValorAux.f = PPMOffset[CH6_CH];
    3b7e:	4c 32       	jn	$-870    	;abs 0x3818
    3b80:	3a 47       	mov	@r7+,	r10	
    3b82:	28 31       	jn	$+594    	;abs 0x3dd4
    3b84:	2c 31       	jn	$+602    	;abs 0x3dde
    3b86:	29 00 42 43 	mova	&0x04342,r9	
        i2c_write16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    3b8a:	53 43       	.word	0x4353;	????	Illegal as 2-op instr
    3b8c:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    3b90:	47 28       	jnc	$+144    	;abs 0x3c20
    3b92:	31 2c       	jc	$+100    	;abs 0x3bf6
    3b94:	31 29       	jnc	$+612    	;abs 0x3df8
    3b96:	00 46       	br	r6		
    3b98:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
        
        delayms(100);
    3b9a:	4c 31       	jn	$+666    	;abs 0x3e34
    3b9c:	3a 47       	mov	@r7+,	r10	
    3b9e:	28 39       	jl	$+594    	;abs 0x3df0
    3ba0:	2c 38       	jl	$+90     	;abs 0x3bfa
        
        // grava ch7 offset 
        ValorAux.f = PPMOffset[CH7_CH];
    3ba2:	29 00 46 43 	mova	&0x04346,r9	
    3ba6:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    3baa:	47 28       	jnc	$+144    	;abs 0x3c3a
    3bac:	39 2c       	jc	$+116    	;abs 0x3c20
        i2c_write16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    3bae:	38 29       	jnc	$+626    	;abs 0x3e20
    3bb0:	00 46       	br	r6		
    3bb2:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3bb4:	4c 33       	jn	$-358    	;abs 0x3a4e
    3bb6:	3a 47       	mov	@r7+,	r10	
    3bb8:	28 39       	jl	$+594    	;abs 0x3e0a
    3bba:	2c 38       	jl	$+90     	;abs 0x3c14
    3bbc:	29 00 43 41 	mova	&0x04143,r9	
        
        delayms(100);
    3bc0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3bc2:	4c 31       	jn	$+666    	;abs 0x3e5c
    3bc4:	3a 47       	mov	@r7+,	r10	
        
        lcd_goto(2,2);
    3bc6:	28 31       	jn	$+594    	;abs 0x3e18
    3bc8:	2c 31       	jn	$+602    	;abs 0x3e22
    3bca:	29 00 43 41 	mova	&0x04143,r9	
        printf("Params saved.");
    3bce:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3bd0:	4c 32       	jn	$-870    	;abs 0x386a
    3bd2:	3a 47       	mov	@r7+,	r10	
    3bd4:	28 31       	jn	$+594    	;abs 0x3e26
        delayms(2000);
    3bd6:	2c 31       	jn	$+602    	;abs 0x3e30
    3bd8:	29 00 43 41 	mova	&0x04143,r9	
    3bdc:	50 44 3a 47 	br	18234(r4)	;0x473a(r4)
    3be0:	28 31       	jn	$+594    	;abs 0x3e32
    3be2:	2c 31       	jn	$+602    	;abs 0x3e3c
    3be4:	29 00 41 44 	mova	&0x04441,r9	
    3be8:	43 31       	jn	$+648    	;abs 0x3e70
    3bea:	32 43       	mov	#-1,	r2	;r3 As==11
    3bec:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    3bf0:	47 28       	jnc	$+144    	;abs 0x3c80
    3bf2:	39 2c       	jc	$+116    	;abs 0x3c66
    3bf4:	38 29       	jnc	$+626    	;abs 0x3e66
    3bf6:	00 41       	br	r1		
    3bf8:	44 43       	clr.b	r4		
    3bfa:	31 32       	jn	$-924    	;abs 0x385e
    3bfc:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
    3bfe:	4c 31       	jn	$+666    	;abs 0x3e98
    3c00:	3a 47       	mov	@r7+,	r10	
    3c02:	28 39       	jl	$+594    	;abs 0x3e54
    3c04:	2c 38       	jl	$+90     	;abs 0x3c5e
    3c06:	29 00 41 44 	mova	&0x04441,r9	
    3c0a:	43 31       	jn	$+648    	;abs 0x3e92
    3c0c:	32 49       	mov	@r9+,	r2	
    3c0e:	46 47       	mov.b	r7,	r6	
    3c10:	3a 47       	mov	@r7+,	r10	
    3c12:	28 39       	jl	$+594    	;abs 0x3e64
    3c14:	2c 38       	jl	$+90     	;abs 0x3c6e
    3c16:	29 00 41 44 	mova	&0x04441,r9	
    3c1a:	43 31       	jn	$+648    	;abs 0x3ea2
    3c1c:	32 49       	mov	@r9+,	r2	
    3c1e:	45 3a       	jl	$-884    	;abs 0x38aa
    3c20:	47 28       	jnc	$+144    	;abs 0x3cb0
    3c22:	39 2c       	jc	$+116    	;abs 0x3c96
    3c24:	38 29       	jnc	$+626    	;abs 0x3e96
    3c26:	00 41       	br	r1		
    3c28:	44 43       	clr.b	r4		
    3c2a:	31 32       	jn	$-924    	;abs 0x388e
    3c2c:	49 56       	add.b	r6,	r9	
    3c2e:	3a 47       	mov	@r7+,	r10	
    3c30:	28 39       	jl	$+594    	;abs 0x3e82
    3c32:	2c 38       	jl	$+90     	;abs 0x3c8c
    3c34:	29 00 61 64 	mova	&0x06461,r9	
    3c38:	63 31       	jn	$+712    	;abs 0x3f00
    3c3a:	32 3a       	jl	$-922    	;abs 0x38a0
    3c3c:	47 28       	jnc	$+144    	;abs 0x3ccc
    3c3e:	31 34       	jge	$+100    	;abs 0x3ca2
    3c40:	2c 37       	jge	$-422    	;abs 0x3a9a
    3c42:	29 00 41 44 	mova	&0x04441,r9	
        
        lcd_goto(2,2);
        printf("Params saved.");
        delayms(2000);
    }
}
    3c46:	43 31       	jn	$+648    	;abs 0x3ece
    3c48:	32 4d       	mov	@r13+,	r2	
    3c4a:	45 4d       	mov.b	r13,	r5	
    3c4c:	30 3a       	jl	$-926    	;abs 0x38ae
    3c4e:	47 28       	jnc	$+144    	;abs 0x3cde
    3c50:	39 2c       	jc	$+116    	;abs 0x3cc4
    3c52:	38 29       	jnc	$+626    	;abs 0x3ec4
    3c54:	00 41       	br	r1		
    3c56:	44 43       	clr.b	r4		
    3c58:	31 32       	jn	$-924    	;abs 0x38bc

void process_rc(void){
    3c5a:	4d 45       	mov.b	r5,	r13	
    ChannelInput[THROTTLE_CH] = PPMValue[THROTTLE_CH] * PPMSlope[THROTTLE_CH] + PPMOffset[THROTTLE_CH];
    3c5c:	4d 31       	jn	$+668    	;abs 0x3ef8
    3c5e:	3a 47       	mov	@r7+,	r10	
    3c60:	28 39       	jl	$+594    	;abs 0x3eb2
    3c62:	2c 38       	jl	$+90     	;abs 0x3cbc
    3c64:	29 00 41 44 	mova	&0x04441,r9	
    3c68:	43 31       	jn	$+648    	;abs 0x3ef0
    3c6a:	32 4d       	mov	@r13+,	r2	
    3c6c:	45 4d       	mov.b	r13,	r5	
    3c6e:	32 3a       	jl	$-922    	;abs 0x38d4
    3c70:	47 28       	jnc	$+144    	;abs 0x3d00
    3c72:	39 2c       	jc	$+116    	;abs 0x3ce6
    3c74:	38 29       	jnc	$+626    	;abs 0x3ee6
    3c76:	00 41       	br	r1		
    3c78:	44 43       	clr.b	r4		
    3c7a:	31 32       	jn	$-924    	;abs 0x38de
    3c7c:	4d 45       	mov.b	r5,	r13	
    3c7e:	4d 33       	jn	$-356    	;abs 0x3b1a
    3c80:	3a 47       	mov	@r7+,	r10	
    3c82:	28 39       	jl	$+594    	;abs 0x3ed4
    3c84:	2c 38       	jl	$+90     	;abs 0x3cde
    3c86:	29 00 41 44 	mova	&0x04441,r9	
    3c8a:	43 31       	jn	$+648    	;abs 0x3f12
    3c8c:	32 4d       	mov	@r13+,	r2	
    3c8e:	45 4d       	mov.b	r13,	r5	
    3c90:	34 3a       	jl	$-918    	;abs 0x38fa
    ChannelInput[YAW_CH] = PPMValue[YAW_CH] * PPMSlope[YAW_CH] + PPMOffset[YAW_CH];
    3c92:	47 28       	jnc	$+144    	;abs 0x3d22
    3c94:	39 2c       	jc	$+116    	;abs 0x3d08
    3c96:	38 29       	jnc	$+626    	;abs 0x3f08
    3c98:	00 41       	br	r1		
    3c9a:	44 43       	clr.b	r4		
    3c9c:	31 32       	jn	$-924    	;abs 0x3900
    3c9e:	4d 45       	mov.b	r5,	r13	
    3ca0:	4d 35       	jge	$+668    	;abs 0x3f3c
    3ca2:	3a 47       	mov	@r7+,	r10	
    3ca4:	28 39       	jl	$+594    	;abs 0x3ef6
    3ca6:	2c 38       	jl	$+90     	;abs 0x3d00
    3ca8:	29 00 41 44 	mova	&0x04441,r9	
    3cac:	43 31       	jn	$+648    	;abs 0x3f34
    3cae:	32 4d       	mov	@r13+,	r2	
    3cb0:	45 4d       	mov.b	r13,	r5	
    3cb2:	36 3a       	jl	$-914    	;abs 0x3920
    3cb4:	47 28       	jnc	$+144    	;abs 0x3d44
    3cb6:	39 2c       	jc	$+116    	;abs 0x3d2a
    3cb8:	38 29       	jnc	$+626    	;abs 0x3f2a
    3cba:	00 41       	br	r1		
    3cbc:	44 43       	clr.b	r4		
    3cbe:	31 32       	jn	$-924    	;abs 0x3922
    3cc0:	4d 45       	mov.b	r5,	r13	
    3cc2:	4d 37       	jge	$-356    	;abs 0x3b5e
    3cc4:	3a 47       	mov	@r7+,	r10	
    3cc6:	28 39       	jl	$+594    	;abs 0x3f18
    ChannelInput[PITCH_CH] = PPMValue[PITCH_CH] * PPMSlope[PITCH_CH] + PPMOffset[PITCH_CH]; // pitch invertido
    3cc8:	2c 38       	jl	$+90     	;abs 0x3d22
    3cca:	29 00 41 44 	mova	&0x04441,r9	
    3cce:	43 31       	jn	$+648    	;abs 0x3f56
    3cd0:	32 4d       	mov	@r13+,	r2	
    3cd2:	45 4d       	mov.b	r13,	r5	
    3cd4:	38 3a       	jl	$-910    	;abs 0x3946
    3cd6:	47 28       	jnc	$+144    	;abs 0x3d66
    3cd8:	39 2c       	jc	$+116    	;abs 0x3d4c
    3cda:	38 29       	jnc	$+626    	;abs 0x3f4c
    3cdc:	00 41       	br	r1		
    3cde:	44 43       	clr.b	r4		
    3ce0:	31 32       	jn	$-924    	;abs 0x3944
    3ce2:	4d 45       	mov.b	r5,	r13	
    3ce4:	4d 39       	jl	$+668    	;abs 0x3f80
    3ce6:	3a 47       	mov	@r7+,	r10	
    3ce8:	28 39       	jl	$+594    	;abs 0x3f3a
    3cea:	2c 38       	jl	$+90     	;abs 0x3d44
    3cec:	29 00 41 44 	mova	&0x04441,r9	
    3cf0:	43 31       	jn	$+648    	;abs 0x3f78
    3cf2:	32 4d       	mov	@r13+,	r2	
    3cf4:	45 4d       	mov.b	r13,	r5	
    3cf6:	31 30       	jn	$+100    	;abs 0x3d5a
    3cf8:	3a 47       	mov	@r7+,	r10	
    3cfa:	28 39       	jl	$+594    	;abs 0x3f4c
    3cfc:	2c 38       	jl	$+90     	;abs 0x3d56
    ChannelInput[ROLL_CH] = PPMValue[ROLL_CH] * PPMSlope[ROLL_CH] + PPMOffset[ROLL_CH];
    3cfe:	29 00 41 44 	mova	&0x04441,r9	
    3d02:	43 31       	jn	$+648    	;abs 0x3f8a
    3d04:	32 4d       	mov	@r13+,	r2	
    3d06:	45 4d       	mov.b	r13,	r5	
    3d08:	31 31       	jn	$+612    	;abs 0x3f6c
    3d0a:	3a 47       	mov	@r7+,	r10	
    3d0c:	28 39       	jl	$+594    	;abs 0x3f5e
    3d0e:	2c 38       	jl	$+90     	;abs 0x3d68
    3d10:	29 00 41 44 	mova	&0x04441,r9	
    3d14:	43 31       	jn	$+648    	;abs 0x3f9c
    3d16:	32 4d       	mov	@r13+,	r2	
    3d18:	45 4d       	mov.b	r13,	r5	
    3d1a:	31 32       	jn	$-924    	;abs 0x397e
    3d1c:	3a 47       	mov	@r7+,	r10	
    3d1e:	28 39       	jl	$+594    	;abs 0x3f70
    3d20:	2c 38       	jl	$+90     	;abs 0x3d7a
    3d22:	29 00 41 44 	mova	&0x04441,r9	
    3d26:	43 31       	jn	$+648    	;abs 0x3fae
    3d28:	32 4d       	mov	@r13+,	r2	
    3d2a:	45 4d       	mov.b	r13,	r5	
    3d2c:	31 33       	jn	$-412    	;abs 0x3b90
    3d2e:	3a 47       	mov	@r7+,	r10	
    3d30:	28 39       	jl	$+594    	;abs 0x3f82
    3d32:	2c 38       	jl	$+90     	;abs 0x3d8c
    ChannelInput[CH5_CH] = PPMValue[CH5_CH] * PPMSlope[CH5_CH] + PPMOffset[CH5_CH];
    3d34:	29 00 41 44 	mova	&0x04441,r9	
    3d38:	43 31       	jn	$+648    	;abs 0x3fc0
    3d3a:	32 4d       	mov	@r13+,	r2	
    3d3c:	45 4d       	mov.b	r13,	r5	
    3d3e:	31 34       	jge	$+100    	;abs 0x3da2
    3d40:	3a 47       	mov	@r7+,	r10	
    3d42:	28 39       	jl	$+594    	;abs 0x3f94
    3d44:	2c 38       	jl	$+90     	;abs 0x3d9e
    3d46:	29 00 41 44 	mova	&0x04441,r9	
    3d4a:	43 31       	jn	$+648    	;abs 0x3fd2
    3d4c:	32 4d       	mov	@r13+,	r2	
    3d4e:	45 4d       	mov.b	r13,	r5	
    3d50:	31 35       	jge	$+612    	;abs 0x3fb4
    3d52:	3a 47       	mov	@r7+,	r10	
    3d54:	28 39       	jl	$+594    	;abs 0x3fa6
    3d56:	2c 38       	jl	$+90     	;abs 0x3db0
    3d58:	29 00 41 44 	mova	&0x04441,r9	
    3d5c:	43 31       	jn	$+648    	;abs 0x3fe4
    3d5e:	32 4d       	mov	@r13+,	r2	
    3d60:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3d62:	4c 30       	jn	$+154    	;abs 0x3dfc
    3d64:	3a 47       	mov	@r7+,	r10	
    3d66:	28 31       	jn	$+594    	;abs 0x3fb8
    3d68:	2c 31       	jn	$+602    	;abs 0x3fc2
    ChannelInput[CH6_CH] = PPMValue[CH6_CH] * PPMSlope[CH6_CH] + PPMOffset[CH6_CH];
    3d6a:	29 00 41 44 	mova	&0x04441,r9	
    3d6e:	43 31       	jn	$+648    	;abs 0x3ff6
    3d70:	32 4d       	mov	@r13+,	r2	
    3d72:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3d74:	4c 31       	jn	$+666    	;abs 0x400e
    3d76:	3a 47       	mov	@r7+,	r10	
    3d78:	28 31       	jn	$+594    	;abs 0x3fca
    3d7a:	2c 31       	jn	$+602    	;abs 0x3fd4
    3d7c:	29 00 41 44 	mova	&0x04441,r9	
    3d80:	43 31       	jn	$+648    	;abs 0x4008
    3d82:	32 4d       	mov	@r13+,	r2	
    3d84:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3d86:	4c 32       	jn	$-870    	;abs 0x3a20
    3d88:	3a 47       	mov	@r7+,	r10	
    3d8a:	28 31       	jn	$+594    	;abs 0x3fdc
    3d8c:	2c 31       	jn	$+602    	;abs 0x3fe6
    3d8e:	29 00 41 44 	mova	&0x04441,r9	
    3d92:	43 31       	jn	$+648    	;abs 0x401a
    3d94:	32 4d       	mov	@r13+,	r2	
    3d96:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3d98:	4c 33       	jn	$-358    	;abs 0x3c32
    3d9a:	3a 47       	mov	@r7+,	r10	
    3d9c:	28 31       	jn	$+594    	;abs 0x3fee
    3d9e:	2c 31       	jn	$+602    	;abs 0x3ff8
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
    3da0:	29 00 41 44 	mova	&0x04441,r9	
    3da4:	43 31       	jn	$+648    	;abs 0x402c
    3da6:	32 4d       	mov	@r13+,	r2	
    3da8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3daa:	4c 34       	jge	$+154    	;abs 0x3e44
    3dac:	3a 47       	mov	@r7+,	r10	
    3dae:	28 31       	jn	$+594    	;abs 0x4000
    3db0:	2c 31       	jn	$+602    	;abs 0x400a
    3db2:	29 00 41 44 	mova	&0x04441,r9	
    3db6:	43 31       	jn	$+648    	;abs 0x403e
    3db8:	32 4d       	mov	@r13+,	r2	
    3dba:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3dbc:	4c 35       	jge	$+666    	;abs 0x4056
    3dbe:	3a 47       	mov	@r7+,	r10	
    3dc0:	28 31       	jn	$+594    	;abs 0x4012
    3dc2:	2c 31       	jn	$+602    	;abs 0x401c
    3dc4:	29 00 41 44 	mova	&0x04441,r9	
    3dc8:	43 31       	jn	$+648    	;abs 0x4050
    3dca:	32 4d       	mov	@r13+,	r2	
    3dcc:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3dce:	4c 36       	jge	$-870    	;abs 0x3a68
    3dd0:	3a 47       	mov	@r7+,	r10	
    3dd2:	28 31       	jn	$+594    	;abs 0x4024
    3dd4:	2c 31       	jn	$+602    	;abs 0x402e
    3dd6:	29 00 41 44 	mova	&0x04441,r9	
    3dda:	43 31       	jn	$+648    	;abs 0x4062
    3ddc:	32 4d       	mov	@r13+,	r2	
    3dde:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3de0:	4c 37       	jge	$-358    	;abs 0x3c7a
    3de2:	3a 47       	mov	@r7+,	r10	
    3de4:	28 31       	jn	$+594    	;abs 0x4036
    3de6:	2c 31       	jn	$+602    	;abs 0x4040
    3de8:	29 00 41 44 	mova	&0x04441,r9	
    3dec:	43 31       	jn	$+648    	;abs 0x4074
    3dee:	32 4d       	mov	@r13+,	r2	
    3df0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3df2:	4c 38       	jl	$+154    	;abs 0x3e8c
    3df4:	3a 47       	mov	@r7+,	r10	
    3df6:	28 31       	jn	$+594    	;abs 0x4048
    3df8:	2c 31       	jn	$+602    	;abs 0x4052
    3dfa:	29 00 41 44 	mova	&0x04441,r9	
    3dfe:	43 31       	jn	$+648    	;abs 0x4086
    3e00:	32 4d       	mov	@r13+,	r2	
    3e02:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3e04:	4c 39       	jl	$+666    	;abs 0x409e
    3e06:	3a 47       	mov	@r7+,	r10	
    3e08:	28 31       	jn	$+594    	;abs 0x405a
    3e0a:	2c 31       	jn	$+602    	;abs 0x4064
    3e0c:	29 00 41 44 	mova	&0x04441,r9	
    3e10:	43 31       	jn	$+648    	;abs 0x4098
    3e12:	32 4d       	mov	@r13+,	r2	
    3e14:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3e16:	4c 31       	jn	$+666    	;abs 0x40b0
    3e18:	30 3a       	jl	$-926    	;abs 0x3a7a
    3e1a:	47 28       	jnc	$+144    	;abs 0x3eaa
    3e1c:	31 2c       	jc	$+100    	;abs 0x3e80
    3e1e:	31 29       	jnc	$+612    	;abs 0x4082
    3e20:	00 41       	br	r1		
    3e22:	44 43       	clr.b	r4		
    3e24:	31 32       	jn	$-924    	;abs 0x3a88
    3e26:	4d 43       	clr.b	r13		
    3e28:	54 4c 31 31 	mov.b	12593(r12),r4	;0x3131(r12)
}
    3e2c:	3a 47       	mov	@r7+,	r10	

void load_transmitter_values(void){
    3e2e:	28 31       	jn	$+594    	;abs 0x4080
    fourbytes ValorAux;

    if(EEPROMFound == 1){
    3e30:	2c 31       	jn	$+602    	;abs 0x408a
    3e32:	29 00 41 44 	mova	&0x04441,r9	
        i2c_change_address(EEPROM_I2C_ADDR);    
    3e36:	43 31       	jn	$+648    	;abs 0x40be
    3e38:	32 4d       	mov	@r13+,	r2	
    3e3a:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3e3c:	4c 31       	jn	$+666    	;abs 0x40d6

        // load yaw slope e offset
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    3e3e:	32 3a       	jl	$-922    	;abs 0x3aa4
    3e40:	47 28       	jnc	$+144    	;abs 0x3ed0
    3e42:	31 2c       	jc	$+100    	;abs 0x3ea6
    3e44:	31 29       	jnc	$+612    	;abs 0x40a8
    3e46:	00 41       	br	r1		
    3e48:	44 43       	clr.b	r4		
        PPMSlope[YAW_CH] = ValorAux.f;
    3e4a:	31 32       	jn	$-924    	;abs 0x3aae
    3e4c:	4d 43       	clr.b	r13		
    3e4e:	54 4c 31 33 	mov.b	13105(r12),r4	;0x3331(r12)
    3e52:	3a 47       	mov	@r7+,	r10	
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3e54:	28 31       	jn	$+594    	;abs 0x40a6
    3e56:	2c 31       	jn	$+602    	;abs 0x40b0
    3e58:	29 00 41 44 	mova	&0x04441,r9	
    3e5c:	43 31       	jn	$+648    	;abs 0x40e4
    3e5e:	32 4d       	mov	@r13+,	r2	
        PPMOffset[YAW_CH] = ValorAux.f;
    3e60:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3e62:	4c 31       	jn	$+666    	;abs 0x40fc
    3e64:	34 3a       	jl	$-918    	;abs 0x3ace
    3e66:	47 28       	jnc	$+144    	;abs 0x3ef6
    3e68:	31 2c       	jc	$+100    	;abs 0x3ecc
        
        // load throttle slope  e offset
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    3e6a:	31 29       	jnc	$+612    	;abs 0x40ce
    3e6c:	00 41       	br	r1		
    3e6e:	44 43       	clr.b	r4		
    3e70:	31 32       	jn	$-924    	;abs 0x3ad4
    3e72:	4d 43       	clr.b	r13		
    3e74:	54 4c 31 35 	mov.b	13617(r12),r4	;0x3531(r12)
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    3e78:	3a 47       	mov	@r7+,	r10	
    3e7a:	28 31       	jn	$+594    	;abs 0x40cc
    3e7c:	2c 31       	jn	$+602    	;abs 0x40d6
    3e7e:	29 00 44 41 	mova	&0x04144,r9	
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    3e82:	43 31       	jn	$+648    	;abs 0x410a
    3e84:	32 5f       	add	@r15+,	r2	
    3e86:	30 43       	br	#-1		;r3 As==11
    3e88:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
        PPMOffset[THROTTLE_CH] = ValorAux.f;
    3e8c:	28 39       	jl	$+594    	;abs 0x40de
    3e8e:	2c 38       	jl	$+90     	;abs 0x3ee8
    3e90:	29 00 44 41 	mova	&0x04144,r9	
    3e94:	43 31       	jn	$+648    	;abs 0x411c
        
        // load pitch slope  e offset
        i2c_read16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    3e96:	32 5f       	add	@r15+,	r2	
    3e98:	31 43       	mov	#-1,	r1	;r3 As==11
    3e9a:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    3e9e:	28 39       	jl	$+594    	;abs 0x40f0
    3ea0:	2c 38       	jl	$+90     	;abs 0x3efa
        PPMSlope[PITCH_CH] = ValorAux.f;
    3ea2:	29 00 44 41 	mova	&0x04144,r9	
    3ea6:	43 31       	jn	$+648    	;abs 0x412e
    3ea8:	32 5f       	add	@r15+,	r2	
    3eaa:	30 44       	br	@r4+		
        i2c_read16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    3eac:	41 54       	add.b	r4,	r1	
    3eae:	3a 47       	mov	@r7+,	r10	
    3eb0:	28 39       	jl	$+594    	;abs 0x4102
    3eb2:	2c 38       	jl	$+90     	;abs 0x3f0c
    3eb4:	29 00 44 41 	mova	&0x04144,r9	
        PPMOffset[PITCH_CH] = ValorAux.f;
    3eb8:	43 31       	jn	$+648    	;abs 0x4140
    3eba:	32 5f       	add	@r15+,	r2	
    3ebc:	31 44       	mov	@r4+,	r1	
    3ebe:	41 54       	add.b	r4,	r1	
    3ec0:	3a 47       	mov	@r7+,	r10	
        
        // load roll slope  e offset
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    3ec2:	28 39       	jl	$+594    	;abs 0x4114
    3ec4:	2c 38       	jl	$+90     	;abs 0x3f1e
    3ec6:	29 00 44 4d 	mova	&0x04d44,r9	
    3eca:	41 43       	clr.b	r1		
    3ecc:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
        PPMSlope[ROLL_CH] = ValorAux.f;
    3ed0:	47 28       	jnc	$+144    	;abs 0x3f60
    3ed2:	39 2c       	jc	$+116    	;abs 0x3f46
    3ed4:	38 29       	jnc	$+626    	;abs 0x4146
    3ed6:	00 44       	br	r4		
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    3ed8:	4d 41       	mov.b	r1,	r13	
    3eda:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3edc:	4c 31       	jn	$+666    	;abs 0x4176
    3ede:	3a 47       	mov	@r7+,	r10	
    3ee0:	28 39       	jl	$+594    	;abs 0x4132
    3ee2:	2c 38       	jl	$+90     	;abs 0x3f3c
        PPMOffset[ROLL_CH] = ValorAux.f;
    3ee4:	29 00 44 4d 	mova	&0x04d44,r9	
    3ee8:	41 49       	mov.b	r9,	r1	
    3eea:	56 3a       	jl	$-850    	;abs 0x3b98
    3eec:	47 28       	jnc	$+144    	;abs 0x3f7c
    
        // load ch5 slope  e offset
        i2c_read16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    3eee:	39 2c       	jc	$+116    	;abs 0x3f62
    3ef0:	38 29       	jnc	$+626    	;abs 0x4162
    3ef2:	00 44       	br	r4		
    3ef4:	4d 41       	mov.b	r1,	r13	
    3ef6:	30 43       	br	#-1		;r3 As==11
    3ef8:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
        PPMSlope[CH5_CH] = ValorAux.f;
    3efc:	28 39       	jl	$+594    	;abs 0x414e
    3efe:	2c 38       	jl	$+90     	;abs 0x3f58
    3f00:	29 00 44 4d 	mova	&0x04d44,r9	
        i2c_read16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    3f04:	41 30       	jn	$+132    	;abs 0x3f88
    3f06:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    3f08:	3a 47       	mov	@r7+,	r10	
    3f0a:	28 31       	jn	$+594    	;abs 0x415c
    3f0c:	2c 32       	jn	$-934    	;abs 0x3b66
    3f0e:	29 3d       	jmp	$+596    	;abs 0x4162
        PPMOffset[CH5_CH] = ValorAux.f;
    3f10:	42 28       	jnc	$+134    	;abs 0x3f96
    3f12:	30 2c       	jc	$+98     	;abs 0x3f74
    3f14:	35 29       	jnc	$+620    	;abs 0x4180
    3f16:	00 44       	br	r4		
    3f18:	4d 41       	mov.b	r1,	r13	
    
        // load ch6 slope  e offset
        i2c_read16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    3f1a:	30 53       	add	#-1,	r0	;r3 As==11
    3f1c:	41 4c       	mov.b	r12,	r1	
    3f1e:	3a 47       	mov	@r7+,	r10	
    3f20:	28 39       	jl	$+594    	;abs 0x4172
    3f22:	2c 38       	jl	$+90     	;abs 0x3f7c
    3f24:	29 00 44 4d 	mova	&0x04d44,r9	
        PPMSlope[CH6_CH] = ValorAux.f;
    3f28:	41 30       	jn	$+132    	;abs 0x3fac
    3f2a:	44 41       	mov.b	r1,	r4	
    3f2c:	3a 47       	mov	@r7+,	r10	
    3f2e:	28 31       	jn	$+594    	;abs 0x4180
        i2c_read16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    3f30:	2c 32       	jn	$-934    	;abs 0x3b8a
    3f32:	29 00 44 4d 	mova	&0x04d44,r9	
    3f36:	41 30       	jn	$+132    	;abs 0x3fba
    3f38:	44 41       	mov.b	r1,	r4	
    3f3a:	4c 3a       	jl	$-870    	;abs 0x3bd4
        PPMOffset[CH6_CH] = ValorAux.f;
    3f3c:	47 28       	jnc	$+144    	;abs 0x3fcc
    3f3e:	39 2c       	jc	$+116    	;abs 0x3fb2
    3f40:	38 29       	jnc	$+626    	;abs 0x41b2
    3f42:	00 44       	br	r4		
    3f44:	4d 41       	mov.b	r1,	r13	
        
        // load ch7 slope  e offset
        i2c_read16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    3f46:	30 53       	add	#-1,	r0	;r3 As==11
    3f48:	5a 3a       	jl	$-842    	;abs 0x3bfe
    3f4a:	47 28       	jnc	$+144    	;abs 0x3fda
    3f4c:	39 2c       	jc	$+116    	;abs 0x3fc0
    3f4e:	38 29       	jnc	$+626    	;abs 0x41c0
    3f50:	00 44       	br	r4		
        PPMSlope[CH7_CH] = ValorAux.f;
    3f52:	4d 41       	mov.b	r1,	r13	
    3f54:	31 43       	mov	#-1,	r1	;r3 As==11
    3f56:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    3f5a:	28 39       	jl	$+594    	;abs 0x41ac
        i2c_read16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    3f5c:	2c 38       	jl	$+90     	;abs 0x3fb6
    3f5e:	29 00 44 4d 	mova	&0x04d44,r9	
    3f62:	41 31       	jn	$+644    	;abs 0x41e6
    3f64:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    3f66:	3a 47       	mov	@r7+,	r10	
        PPMOffset[CH7_CH] = ValorAux.f;
    3f68:	28 31       	jn	$+594    	;abs 0x41ba
    3f6a:	2c 32       	jn	$-934    	;abs 0x3bc4
    3f6c:	29 00 44 4d 	mova	&0x04d44,r9	
    3f70:	41 31       	jn	$+644    	;abs 0x41f4
    }
}
    3f72:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    3f74:	4c 3a       	jl	$-870    	;abs 0x3c0e
    3f76:	47 28       	jnc	$+144    	;abs 0x4006
    3f78:	39 2c       	jc	$+116    	;abs 0x3fec
    3f7a:	38 29       	jnc	$+626    	;abs 0x41ec
    3f7c:	00 44       	br	r4		
    3f7e:	4d 41       	mov.b	r1,	r13	
    3f80:	31 44       	mov	@r4+,	r1	
    3f82:	41 3a       	jl	$-892    	;abs 0x3c06
    3f84:	47 28       	jnc	$+144    	;abs 0x4014
    3f86:	39 2c       	jc	$+116    	;abs 0x3ffa
    3f88:	38 29       	jnc	$+626    	;abs 0x41fa
    3f8a:	00 44       	br	r4		
    3f8c:	4d 41       	mov.b	r1,	r13	
    3f8e:	31 44       	mov	@r4+,	r1	
    3f90:	41 4c       	mov.b	r12,	r1	
    3f92:	3a 47       	mov	@r7+,	r10	

void draw_rc_inputs(char raw){
    3f94:	28 39       	jl	$+594    	;abs 0x41e6
    3f96:	2c 38       	jl	$+90     	;abs 0x3ff0
    3f98:	29 00 44 4d 	mova	&0x04d44,r9	
    3f9c:	41 31       	jn	$+644    	;abs 0x4220
    3f9e:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    unsigned int i = 0, k = 0, h = 0;
    3fa0:	3a 47       	mov	@r7+,	r10	
    lcd_goto(0,0);
    3fa2:	28 39       	jl	$+594    	;abs 0x41f4
    3fa4:	2c 38       	jl	$+90     	;abs 0x3ffe
    3fa6:	29 00 44 4d 	mova	&0x04d44,r9	
    printf("     RC inputs");
    3faa:	41 32       	jn	$-892    	;abs 0x3c2e
    3fac:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3fae:	4c 3a       	jl	$-870    	;abs 0x3c48
    3fb0:	47 28       	jnc	$+144    	;abs 0x4040
    lcd_goto(0,2);
    3fb2:	39 2c       	jc	$+116    	;abs 0x4026
    3fb4:	38 29       	jnc	$+626    	;abs 0x4226
    3fb6:	00 44       	br	r4		
    3fb8:	4d 41       	mov.b	r1,	r13	
    
    for(i = 0; i < 8; i++){
    3fba:	32 53       	add	#-1,	r2	;r3 As==11
        if(!raw){
    3fbc:	41 3a       	jl	$-892    	;abs 0x3c40
    3fbe:	47 28       	jnc	$+144    	;abs 0x404e
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
    3fc0:	31 2c       	jc	$+100    	;abs 0x4024
    3fc2:	32 29       	jnc	$+614    	;abs 0x4228
    3fc4:	00 44       	br	r4		
    3fc6:	4d 41       	mov.b	r1,	r13	
    3fc8:	32 53       	add	#-1,	r2	;r3 As==11
    3fca:	41 4c       	mov.b	r12,	r1	
    3fcc:	3a 47       	mov	@r7+,	r10	
    3fce:	28 39       	jl	$+594    	;abs 0x4220
    3fd0:	2c 38       	jl	$+90     	;abs 0x402a
    3fd2:	29 00 44 4d 	mova	&0x04d44,r9	
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
        }
        k = 21 + (8 * i); //posicao inicial em y
    3fd6:	41 32       	jn	$-892    	;abs 0x3c5a
    3fd8:	44 41       	mov.b	r1,	r4	
    3fda:	3a 47       	mov	@r7+,	r10	
    3fdc:	28 31       	jn	$+594    	;abs 0x422e
    3fde:	2c 32       	jn	$-934    	;abs 0x3c38
        if(!raw){
    3fe0:	29 00 44 4d 	mova	&0x04d44,r9	
            if(ChannelInput[i] > 4000){
    3fe4:	41 32       	jn	$-892    	;abs 0x3c68
    3fe6:	44 41       	mov.b	r1,	r4	
    3fe8:	4c 3a       	jl	$-870    	;abs 0x3c82
    3fea:	47 28       	jnc	$+144    	;abs 0x407a
                h=100;
            }
            else{
                if(ChannelInput[i] < 2001){
    3fec:	39 2c       	jc	$+116    	;abs 0x4060
    3fee:	38 29       	jnc	$+626    	;abs 0x4260
    3ff0:	00 44       	br	r4		
    3ff2:	4d 41       	mov.b	r1,	r13	
                    h = 0;
                }
                else{
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
    3ff4:	32 53       	add	#-1,	r2	;r3 As==11
    3ff6:	5a 3a       	jl	$-842    	;abs 0x3cac
    3ff8:	47 28       	jnc	$+144    	;abs 0x4088
    3ffa:	39 2c       	jc	$+116    	;abs 0x406e
    3ffc:	38 29       	jnc	$+626    	;abs 0x426e
    3ffe:	00 57       	add	r7,	r0	
    4000:	44 54       	rla.b	r4		
    4002:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    4004:	4c 3a       	jl	$-870    	;abs 0x3c9e
    4006:	47 28       	jnc	$+144    	;abs 0x4096
    4008:	39 2c       	jc	$+116    	;abs 0x407c
    400a:	38 29       	jnc	$+626    	;abs 0x427c
    400c:	00 49       	br	r9		
    400e:	45 31       	jn	$+652    	;abs 0x429a
    4010:	3a 47       	mov	@r7+,	r10	
    4012:	28 31       	jn	$+594    	;abs 0x4264
    4014:	2c 31       	jn	$+602    	;abs 0x426e
            if(PPMValue[i] > 4000){
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
                    h = 0;
    4016:	29 00 49 46 	mova	&0x04649,r9	
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
                h=100;
    401a:	47 31       	jn	$+656    	;abs 0x42aa
    401c:	3a 47       	mov	@r7+,	r10	
    401e:	28 31       	jn	$+594    	;abs 0x4270
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
    4020:	2c 31       	jn	$+602    	;abs 0x427a
    4022:	29 00 49 45 	mova	&0x04549,r9	
    4026:	32 3a       	jl	$-922    	;abs 0x3c8c
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
    4028:	47 28       	jnc	$+144    	;abs 0x40b8
    402a:	31 2c       	jc	$+100    	;abs 0x408e
    402c:	31 29       	jnc	$+612    	;abs 0x4290
    402e:	00 49       	br	r9		
                    h = 0;
                }
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
    4030:	46 47       	mov.b	r7,	r6	
    4032:	32 3a       	jl	$-922    	;abs 0x3c98
    4034:	47 28       	jnc	$+144    	;abs 0x40c4
    for(i = 0; i < 8; i++){
        if(!raw){
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
    4036:	31 2c       	jc	$+100    	;abs 0x409a
    4038:	31 29       	jnc	$+612    	;abs 0x429c
    403a:	00 54       	add	r4,	r0	
    403c:	4c 56       	add.b	r6,	r12	
    403e:	5f 43       	mov.b	#1,	r15	;r3 As==01
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    4040:	48 45       	mov.b	r5,	r8	
    4042:	43 4b       	.word	0x4b43;	????	Illegal as 2-op instr
    4044:	53 55       	.word	0x5553;	????	Illegal as 2-op instr
    4046:	4d 3a       	jl	$-868    	;abs 0x3ce2
    4048:	47 28       	jnc	$+144    	;abs 0x40d8
    404a:	39 2c       	jc	$+116    	;abs 0x40be
    404c:	38 29       	jnc	$+626    	;abs 0x42be
    404e:	00 54       	add	r4,	r0	
    4050:	4c 56       	add.b	r6,	r12	
    4052:	5f 44 43 4f 	mov.b	20291(r4),r15	;0x4f43(r4)
    4056:	5f 33       	jn	$-320    	;abs 0x3f16
    4058:	30 5f       	add	@r15+,	r0	
    unsigned int i = 0, k = 0, h = 0;
    lcd_goto(0,0);
    printf("     RC inputs");
    lcd_goto(0,2);
    
    for(i = 0; i < 8; i++){
    405a:	54 41 47 3a 	mov.b	14919(r1),r4	;0x3a47(r1)
    405e:	47 28       	jnc	$+144    	;abs 0x40ee
    4060:	31 2c       	jc	$+100    	;abs 0x40c4
    4062:	31 29       	jnc	$+612    	;abs 0x42c6
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}
    4064:	00 54       	add	r4,	r0	
    4066:	4c 56       	add.b	r6,	r12	
    4068:	5f 44 43 4f 	mov.b	20291(r4),r15	;0x4f43(r4)
    406c:	5f 33       	jn	$-320    	;abs 0x3f2c
    406e:	30 5f       	add	@r15+,	r0	

int find_first(int startaddress){
    4070:	4c 45       	mov.b	r5,	r12	
    4072:	4e 3a       	jl	$-866    	;abs 0x3d10
    for(; startaddress < 255; startaddress++){
    4074:	47 28       	jnc	$+144    	;abs 0x4104
    4076:	31 2c       	jc	$+100    	;abs 0x40da
    4078:	31 29       	jnc	$+612    	;abs 0x42dc
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
        }
    }   
    return 0;
    407a:	00 54       	add	r4,	r0	
    407c:	4c 56       	add.b	r6,	r12	
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
    407e:	5f 41 44 43 	mov.b	17220(r1),r15	;0x4344(r1)
    4082:	31 32       	jn	$-924    	;abs 0x3ce6
        if(!i2c_find_device()){
    4084:	5f 31       	jn	$+704    	;abs 0x4344
    4086:	5f 54 41 47 	add.b	18241(r4),r15	;0x4741(r4)
    408a:	3a 47       	mov	@r7+,	r10	
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
    408c:	28 31       	jn	$+594    	;abs 0x42de
    408e:	2c 31       	jn	$+602    	;abs 0x42e8
    4090:	29 00 54 4c 	mova	&0x04c54,r9	
    4094:	56 5f 41 44 	add.b	17473(r15),r6	;0x4441(r15)
        if(!i2c_find_device()){
            return startaddress;
        }
    }   
    return 0;
}
    4098:	43 31       	jn	$+648    	;abs 0x4320
    409a:	32 5f       	add	@r15+,	r2	

// loop de controle
void main_loop(){
    
    
}
    409c:	31 5f       	add	@r15+,	r1	
    409e:	4c 45       	mov.b	r5,	r12	
    40a0:	4e 3a       	jl	$-866    	;abs 0x3d3e
    40a2:	47 28       	jnc	$+144    	;abs 0x4132
    40a4:	31 2c       	jc	$+100    	;abs 0x4108
    40a6:	31 29       	jnc	$+612    	;abs 0x430a
    40a8:	00 43       	clr	r0		
    40aa:	41 4c       	mov.b	r12,	r1	
    40ac:	44 43       	clr.b	r4		
    40ae:	4f 5f       	rla.b	r15		
    40b0:	31 36       	jge	$-924    	;abs 0x3d14
    40b2:	4d 48       	mov.b	r8,	r13	
    40b4:	5a 3a       	jl	$-842    	;abs 0x3d6a
    40b6:	47 28       	jnc	$+144    	;abs 0x4146
    40b8:	31 2c       	jc	$+100    	;abs 0x411c
    40ba:	31 29       	jnc	$+612    	;abs 0x431e
    40bc:	00 43       	clr	r0		
    40be:	41 4c       	mov.b	r12,	r1	
    40c0:	42 43       	clr.b	r2		
    40c2:	31 5f       	add	@r15+,	r1	
    40c4:	31 36       	jge	$-924    	;abs 0x3d28
    40c6:	4d 48       	mov.b	r8,	r13	
    40c8:	5a 3a       	jl	$-842    	;abs 0x3d7e
    40ca:	47 28       	jnc	$+144    	;abs 0x415a
    40cc:	31 2c       	jc	$+100    	;abs 0x4130
    40ce:	31 29       	jnc	$+612    	;abs 0x4332
    40d0:	00 43       	clr	r0		
    40d2:	41 4c       	mov.b	r12,	r1	
    40d4:	44 43       	clr.b	r4		
    40d6:	4f 5f       	rla.b	r15		
    40d8:	31 32       	jn	$-924    	;abs 0x3d3c
    40da:	4d 48       	mov.b	r8,	r13	
    40dc:	5a 3a       	jl	$-842    	;abs 0x3d92
    40de:	47 28       	jnc	$+144    	;abs 0x416e
    40e0:	31 2c       	jc	$+100    	;abs 0x4144
    40e2:	31 29       	jnc	$+612    	;abs 0x4346
    40e4:	00 43       	clr	r0		
    40e6:	41 4c       	mov.b	r12,	r1	
    40e8:	42 43       	clr.b	r2		
    40ea:	31 5f       	add	@r15+,	r1	
    40ec:	31 32       	jn	$-924    	;abs 0x3d50
    40ee:	4d 48       	mov.b	r8,	r13	

void setup(){
    40f0:	5a 3a       	jl	$-842    	;abs 0x3da6
    
    clock_init();
    40f2:	47 28       	jnc	$+144    	;abs 0x4182
    40f4:	31 2c       	jc	$+100    	;abs 0x4158
    
    timer_a3_init();
    40f6:	31 29       	jnc	$+612    	;abs 0x435a
    40f8:	00 43       	clr	r0		
    
    p1_init();
    40fa:	41 4c       	mov.b	r12,	r1	
    40fc:	44 43       	clr.b	r4		
    
    analog_init();
    40fe:	4f 5f       	rla.b	r15		
    4100:	38 4d       	mov	@r13+,	r8	
    
    i2c_init();
    4102:	48 5a       	add.b	r10,	r8	
    4104:	3a 47       	mov	@r7+,	r10	
    
    eint();
    4106:	28 31       	jn	$+594    	;abs 0x4358
    
    lcd_init(BLACK);
    4108:	2c 31       	jn	$+602    	;abs 0x4362
    410a:	29 00 43 41 	mova	&0x04143,r9	
    
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));

    i2c_config(EEPROM_I2C_ADDR);
    410e:	4c 42       	mov.b	r2,	r12	
    4110:	43 31       	jn	$+648    	;abs 0x4398
    4112:	5f 38       	jl	$+192    	;abs 0x41d2
    4114:	4d 48       	mov.b	r8,	r13	
    EEPROMFound = !(i2c_find_device());
    4116:	5a 3a       	jl	$-842    	;abs 0x3dcc
    4118:	47 28       	jnc	$+144    	;abs 0x41a8
    411a:	31 2c       	jc	$+100    	;abs 0x417e
    411c:	31 29       	jnc	$+612    	;abs 0x4380
    411e:	00 43       	clr	r0		
    4120:	41 4c       	mov.b	r12,	r1	
    4122:	44 43       	clr.b	r4		
    4124:	4f 5f       	rla.b	r15		
    
    if(EEPROMFound){
    4126:	31 4d       	mov	@r13+,	r1	
    4128:	48 5a       	add.b	r10,	r8	
        printf("EEPROM found\n");
    412a:	3a 47       	mov	@r7+,	r10	
    412c:	28 31       	jn	$+594    	;abs 0x437e
    412e:	2c 31       	jn	$+602    	;abs 0x4388
    4130:	29 00 43 41 	mova	&0x04143,r9	
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    4134:	4c 42       	mov.b	r2,	r12	
    4136:	43 31       	jn	$+648    	;abs 0x43be
    4138:	5f 31       	jn	$+704    	;abs 0x43f8
    413a:	4d 48       	mov.b	r8,	r13	
    413c:	5a 3a       	jl	$-842    	;abs 0x3df2
    413e:	47 28       	jnc	$+144    	;abs 0x41ce
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);
    4140:	31 2c       	jc	$+100    	;abs 0x41a4
    4142:	31 29       	jnc	$+612    	;abs 0x43a6
    4144:	00 65       	addc	r5,	r0	
    4146:	65 70       	subc.b	@r0,	r5	
    4148:	72 6f       	addc.b	@r15+,	r2	
    414a:	6d 2e       	jc	$-804    	;abs 0x3e26
    414c:	63 00 66 6f 	mova	r0,	&0x36f66
    4150:	75 72       	subc.b	#8,	r5	;r2 As==11
    4152:	62 79       	subc.b	@r9,	r2	
    4154:	74 65       	addc.b	@r5+,	r4	
    4156:	73 3a       	jl	$-792    	;abs 0x3e3e
    4158:	74 28       	jnc	$+234    	;abs 0x4242
    415a:	32 2c       	jc	$+102    	;abs 0x41c0
    415c:	31 29       	jnc	$+612    	;abs 0x43c0
    415e:	3d 28       	jnc	$+124    	;abs 0x41da

        //if(1){
        if(StatusFlags[0] != 0){
    4160:	32 2c       	jc	$+102    	;abs 0x41c6
    4162:	32 29       	jnc	$+614    	;abs 0x43c8
    4164:	3d 75       	subc	@r5+,	r13	
    4166:	34 66       	addc	@r6+,	r4	
            printf("Calibrando radio...\n");
    4168:	3a 28       	jnc	$+118    	;abs 0x41de
    416a:	30 2c       	jc	$+98     	;abs 0x41cc
    416c:	31 32       	jn	$-924    	;abs 0x3dd0
    416e:	29 2c       	jc	$+84     	;abs 0x41c2
            delayms(4000);
    4170:	30 2c       	jc	$+98     	;abs 0x41d2
    4172:	33 32       	jn	$-920    	;abs 0x3dda
    4174:	3b 63       	addc	#-1,	r11	;r3 As==11
    4176:	3a 28       	jnc	$+118    	;abs 0x41ec
            calibrate_radio();
    4178:	32 2c       	jc	$+102    	;abs 0x41de
    417a:	33 29       	jnc	$+616    	;abs 0x43e2
            StatusFlags[0] = 0;
    417c:	3d 61       	addc	@r1+,	r13	
    417e:	72 28       	jnc	$+230    	;abs 0x4264
            StatusFlags[1] = 0;
    4180:	32 2c       	jc	$+102    	;abs 0x41e6
    4182:	34 29       	jnc	$+618    	;abs 0x43ec
            StatusFlags[2] = 0;
    4184:	3d 72       	subc	#8,	r13	;r2 As==11
    4186:	28 32       	jn	$-942    	;abs 0x3dd8
            i2c_write16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    4188:	2c 34       	jge	$+90     	;abs 0x41e2
    418a:	29 3b       	jl	$-428    	;abs 0x3fde
    418c:	30 30       	jn	$+98     	;abs 0x41ee
    418e:	30 30       	jn	$+98     	;abs 0x41f0
    4190:	30 30       	jn	$+98     	;abs 0x41f2
    4192:	30 30       	jn	$+98     	;abs 0x41f4
    4194:	30 30       	jn	$+98     	;abs 0x41f6
    4196:	30 30       	jn	$+98     	;abs 0x41f8
        }
        else{
            load_transmitter_values();
    4198:	30 3b       	jl	$-414    	;abs 0x3ffa
    419a:	30 30       	jn	$+98     	;abs 0x41fc
            printf("RC params loaded\n");
    419c:	30 30       	jn	$+98     	;abs 0x41fe
    419e:	30 30       	jn	$+98     	;abs 0x4200
    41a0:	30 31       	jn	$+610    	;abs 0x4402
    41a2:	37 37       	jge	$-400    	;abs 0x4012
    41a4:	37 37       	jge	$-400    	;abs 0x4014
            //carregar os outros parametros
        }
    }
    else{
        color_fore = RED;
    41a6:	37 3b       	jl	$-400    	;abs 0x4016
    41a8:	3b 30       	jn	$+120    	;abs 0x4220
    41aa:	3b 33       	jn	$-392    	;abs 0x4022
        printf("EEPROM not found\n");
    41ac:	3b 28       	jnc	$+120    	;abs 0x4224
    41ae:	30 2c       	jc	$+98     	;abs 0x4210
    41b0:	32 29       	jnc	$+614    	;abs 0x4416
    41b2:	2c 30       	jn	$+90     	;abs 0x420c
        color_fore = LIME;
    41b4:	2c 33       	jn	$-422    	;abs 0x400e
    41b6:	32 3b       	jl	$-410    	;abs 0x401c
    41b8:	3b 00 45 45 	mova	0x4545,	r11	;PC rel. 0x086ff
    }
    
    delayms(5000);
    41bc:	50 52 4f 4d 	add.b	&0x4d4f,r0	
    41c0:	46 6f       	addc.b	r15,	r6	
    
    SetupDone = 1;
    41c2:	75 6e       	addc.b	@r14+,	r5	
    41c4:	64 3a       	jl	$-822    	;abs 0x3e8e
}
    41c6:	47 28       	jnc	$+144    	;abs 0x4256
    41c8:	30 2c       	jc	$+98     	;abs 0x422a

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
    41ca:	31 31       	jn	$+612    	;abs 0x442e
    41cc:	29 00 69 32 	mova	&0x03269,r9	
        for(k = 0; k < 100; k++){
    41d0:	63 2e       	jc	$-824    	;abs 0x3e98
            AnalogGraph[i][k] = 0;
    41d2:	63 00 69 32 	mova	r0,	&0x33269
    41d6:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    41d8:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    41da:	6e 66       	addc.b	@r6,	r14	
    41dc:	69 67       	addc.b	@r7,	r9	
    41de:	3a 46       	mov	@r6+,	r10	
    41e0:	28 30       	jn	$+82     	;abs 0x4232
    41e2:	2c 32       	jn	$-934    	;abs 0x3e3c
    41e4:	30 29       	jnc	$+610    	;abs 0x4446
    41e6:	00 73       	sbc	r0		
    41e8:	6c 61       	addc.b	@r1,	r12	
    41ea:	76 65       	addc.b	@r5+,	r6	
    41ec:	5f 61 64 64 	addc.b	25700(r1),r15	;0x6464(r1)
}

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
        for(k = 0; k < 100; k++){
    41f0:	72 3a       	jl	$-794    	;abs 0x3ed6
    41f2:	50 28       	jnc	$+162    	;abs 0x4294
    41f4:	30 2c       	jc	$+98     	;abs 0x4256
    41f6:	31 31       	jn	$+612    	;abs 0x445a
    SetupDone = 1;
}

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
    41f8:	29 00 69 32 	mova	&0x03269,r9	
    41fc:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
        for(k = 0; k < 100; k++){
            AnalogGraph[i][k] = 0;
        }
    }
}
    41fe:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
    4200:	61 6e       	addc.b	@r14,	r1	
    4202:	67 65       	addc.b	@r5,	r7	
    4204:	5f 61 64 64 	addc.b	25700(r1),r15	;0x6464(r1)
    4208:	72 65       	addc.b	@r5+,	r2	
    420a:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    420c:	3a 46       	mov	@r6+,	r10	
    420e:	28 30       	jn	$+82     	;abs 0x4260
    4210:	2c 32       	jn	$-934    	;abs 0x3e6a
    4212:	30 29       	jnc	$+610    	;abs 0x4474
    4214:	00 69       	addc	r9,	r0	
    4216:	32 63       	addc	#-1,	r2	;r3 As==11
    4218:	5f 69 6e 69 	addc.b	26990(r9),r15	;0x696e(r9)
    421c:	74 3a       	jl	$-790    	;abs 0x3f06
    421e:	46 28       	jnc	$+142    	;abs 0x42ac
    4220:	30 2c       	jc	$+98     	;abs 0x4282
    4222:	32 30       	jn	$+102    	;abs 0x4288
    4224:	29 00 69 32 	mova	&0x03269,r9	
    4228:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    422a:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    422c:	61 72       	subc.b	#4,	r1	;r2 As==10
    422e:	74 3a       	jl	$-790    	;abs 0x3f18
    4230:	46 28       	jnc	$+142    	;abs 0x42be
    4232:	30 2c       	jc	$+98     	;abs 0x4294
    4234:	32 30       	jn	$+102    	;abs 0x429a
    4236:	29 00 69 32 	mova	&0x03269,r9	
    423a:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    423c:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    423e:	6f 70       	subc.b	@r0,	r15	
    4240:	3a 46       	mov	@r6+,	r10	
    4242:	28 30       	jn	$+82     	;abs 0x4294
    4244:	2c 32       	jn	$-934    	;abs 0x3e9e
    4246:	30 29       	jnc	$+610    	;abs 0x44a8
    4248:	00 69       	addc	r9,	r0	
    424a:	32 63       	addc	#-1,	r2	;r3 As==11
    424c:	5f 72 65 63 	subc.b	&0x6365,r15	
    4250:	76 5f       	add.b	@r15+,	r6	
    4252:	61 63       	addc.b	#2,	r1	;r3 As==10
    4254:	6b 3a       	jl	$-808    	;abs 0x3f2c
    4256:	46 28       	jnc	$+142    	;abs 0x42e4
    4258:	30 2c       	jc	$+98     	;abs 0x42ba
    425a:	31 31       	jn	$+612    	;abs 0x44be
    425c:	29 00 69 32 	mova	&0x03269,r9	
    4260:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    4262:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
    4264:	6e 64       	addc.b	@r4,	r14	
    4266:	5f 61 63 6b 	addc.b	27491(r1),r15	;0x6b63(r1)
    426a:	3a 46       	mov	@r6+,	r10	
    426c:	28 30       	jn	$+82     	;abs 0x42be
    426e:	2c 32       	jn	$-934    	;abs 0x3ec8
    4270:	30 29       	jnc	$+610    	;abs 0x44d2
    4272:	00 63       	adc	r0		
    4274:	6f 6e       	addc.b	@r14,	r15	
    4276:	66 69       	addc.b	@r9,	r6	
    4278:	72 6d       	addc.b	@r13+,	r2	
    427a:	61 74       	subc.b	@r4,	r1	
    427c:	69 6f       	addc.b	@r15,	r9	
    427e:	6e 3a       	jl	$-802    	;abs 0x3f5c
    4280:	50 28       	jnc	$+162    	;abs 0x4322
    4282:	30 2c       	jc	$+98     	;abs 0x42e4
    4284:	31 31       	jn	$+612    	;abs 0x44e8
    4286:	29 00 69 32 	mova	&0x03269,r9	
    428a:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    428c:	62 77       	subc.b	@r7,	r2	
    428e:	72 69       	addc.b	@r9+,	r2	
    4290:	74 65       	addc.b	@r5+,	r4	
    4292:	3a 46       	mov	@r6+,	r10	
    4294:	28 30       	jn	$+82     	;abs 0x42e6
    4296:	2c 32       	jn	$-934    	;abs 0x3ef0
    4298:	30 29       	jnc	$+610    	;abs 0x44fa
    429a:	00 62       	addc	r2,	r0	
    429c:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    42a0:	2c 31       	jn	$+602    	;abs 0x44fa
    42a2:	31 29       	jnc	$+612    	;abs 0x4506
    42a4:	00 69       	addc	r9,	r0	
    42a6:	32 63       	addc	#-1,	r2	;r3 As==11
    42a8:	5f 62 72 65 	addc.b	&0x6572,r15	
    42ac:	61 64       	addc.b	@r4,	r1	
    42ae:	3a 46       	mov	@r6+,	r10	
    42b0:	28 30       	jn	$+82     	;abs 0x4302
    42b2:	2c 31       	jn	$+602    	;abs 0x450c
    42b4:	31 29       	jnc	$+612    	;abs 0x4518
    42b6:	00 62       	addc	r2,	r0	
    42b8:	69 6e       	addc.b	@r14,	r9	
    42ba:	3a 72       	subc	#8,	r10	;r2 As==11
    42bc:	28 30       	jn	$+82     	;abs 0x430e
    42be:	2c 31       	jn	$+602    	;abs 0x4518
    42c0:	31 29       	jnc	$+612    	;abs 0x4524
    42c2:	00 69       	addc	r9,	r0	
    42c4:	32 63       	addc	#-1,	r2	;r3 As==11
    42c6:	5f 66 69 6e 	addc.b	28265(r6),r15	;0x6e69(r6)
    42ca:	64 5f       	add.b	@r15,	r4	
    42cc:	64 65       	addc.b	@r5,	r4	
    42ce:	76 69       	addc.b	@r9+,	r6	
    42d0:	63 65       	.word	0x6563;	????	Illegal as 2-op instr
    42d2:	3a 46       	mov	@r6+,	r10	
    42d4:	28 30       	jn	$+82     	;abs 0x4326
    42d6:	2c 31       	jn	$+602    	;abs 0x4530
    42d8:	31 29       	jnc	$+612    	;abs 0x453c
    42da:	00 73       	sbc	r0		
    42dc:	74 61       	addc.b	@r1+,	r4	
    42de:	74 75       	subc.b	@r5+,	r4	
    42e0:	73 3a       	jl	$-792    	;abs 0x3fc8
    42e2:	72 28       	jnc	$+230    	;abs 0x43c8
    42e4:	30 2c       	jc	$+98     	;abs 0x4346
    42e6:	31 31       	jn	$+612    	;abs 0x454a
    42e8:	29 00 69 32 	mova	&0x03269,r9	
    42ec:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    42ee:	77 72       	subc.b	#8,	r7	;r2 As==11
    42f0:	69 74       	subc.b	@r4,	r9	
    42f2:	65 5f       	add.b	@r15,	r5	
    42f4:	64 75       	subc.b	@r5,	r4	
    42f6:	6d 6d       	addc.b	@r13,	r13	
    42f8:	79 3a       	jl	$-780    	;abs 0x3fec
    42fa:	46 28       	jnc	$+142    	;abs 0x4388
    42fc:	30 2c       	jc	$+98     	;abs 0x435e
    42fe:	31 31       	jn	$+612    	;abs 0x4562
    4300:	29 00 69 32 	mova	&0x03269,r9	
    4304:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    4306:	77 72       	subc.b	#8,	r7	;r2 As==11
    4308:	69 74       	subc.b	@r4,	r9	
    430a:	65 5f       	add.b	@r15,	r5	
    430c:	62 79       	subc.b	@r9,	r2	
    430e:	74 65       	addc.b	@r5+,	r4	
    4310:	3a 46       	mov	@r6+,	r10	
    4312:	28 30       	jn	$+82     	;abs 0x4364
    4314:	2c 31       	jn	$+602    	;abs 0x456e
    4316:	31 29       	jnc	$+612    	;abs 0x457a
    4318:	00 72       	subc	r2,	r0	
    431a:	65 67       	addc.b	@r7,	r5	
    431c:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    4320:	2c 31       	jn	$+602    	;abs 0x457a
    4322:	31 29       	jnc	$+612    	;abs 0x4586
    4324:	00 69       	addc	r9,	r0	
    4326:	32 63       	addc	#-1,	r2	;r3 As==11
    4328:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
    432c:	74 65       	addc.b	@r5+,	r4	
    432e:	5f 6d 75 6c 	addc.b	27765(r13),r15	;0x6c75(r13)
    4332:	74 69       	addc.b	@r9+,	r4	
    4334:	70 6c       	addc.b	@r12+,	r0	
    4336:	65 73       	subc.b	#2,	r5	;r3 As==10
    4338:	3a 46       	mov	@r6+,	r10	
    433a:	28 30       	jn	$+82     	;abs 0x438c
    433c:	2c 31       	jn	$+602    	;abs 0x4596
    433e:	31 29       	jnc	$+612    	;abs 0x45a2
    4340:	00 64       	addc	r4,	r0	
    4342:	61 74       	subc.b	@r4,	r1	
    4344:	3a 50 28 31 	add	#12584,	r10	;#0x3128
    4348:	2c 31       	jn	$+602    	;abs 0x45a2
    434a:	29 3d       	jmp	$+596    	;abs 0x459e
    434c:	2a 28       	jnc	$+86     	;abs 0x43a2
    434e:	30 2c       	jc	$+98     	;abs 0x43b0
    4350:	31 31       	jn	$+612    	;abs 0x45b4
    4352:	29 00 6c 65 	mova	&0x0656c,r9	
    4356:	6e 3a       	jl	$-802    	;abs 0x4034
    4358:	50 28       	jnc	$+162    	;abs 0x43fa
    435a:	30 2c       	jc	$+98     	;abs 0x43bc
    435c:	31 31       	jn	$+612    	;abs 0x45c0
    435e:	29 00 69 32 	mova	&0x03269,r9	
    4362:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    4364:	77 72       	subc.b	#8,	r7	;r2 As==11
    4366:	69 74       	subc.b	@r4,	r9	
    4368:	65 31       	jn	$+716    	;abs 0x4634
    436a:	36 5f       	add	@r15+,	r6	
    436c:	62 79       	subc.b	@r9,	r2	
    436e:	74 65       	addc.b	@r5+,	r4	
    4370:	3a 46       	mov	@r6+,	r10	
    4372:	28 30       	jn	$+82     	;abs 0x43c4
    4374:	2c 31       	jn	$+602    	;abs 0x45ce
    4376:	31 29       	jnc	$+612    	;abs 0x45da
    4378:	00 72       	subc	r2,	r0	
    437a:	65 67       	addc.b	@r7,	r5	
    437c:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    4380:	2c 34       	jge	$+90     	;abs 0x43da
    4382:	29 00 69 32 	mova	&0x03269,r9	
    4386:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    4388:	77 72       	subc.b	#8,	r7	;r2 As==11
    438a:	69 74       	subc.b	@r4,	r9	
    438c:	65 31       	jn	$+716    	;abs 0x4658
    438e:	36 5f       	add	@r15+,	r6	
    4390:	6d 75       	subc.b	@r5,	r13	
    4392:	6c 74       	subc.b	@r4,	r12	
    4394:	69 70       	subc.b	@r0,	r9	
    4396:	6c 65       	addc.b	@r5,	r12	
    4398:	73 3a       	jl	$-792    	;abs 0x4080
    439a:	46 28       	jnc	$+142    	;abs 0x4428
    439c:	30 2c       	jc	$+98     	;abs 0x43fe
    439e:	31 31       	jn	$+612    	;abs 0x4602
    43a0:	29 00 64 61 	mova	&0x06164,r9	
    43a4:	74 3a       	jl	$-790    	;abs 0x408e
    43a6:	50 28       	jnc	$+162    	;abs 0x4448
    43a8:	31 2c       	jc	$+100    	;abs 0x440c
    43aa:	31 29       	jnc	$+612    	;abs 0x460e
    43ac:	00 69       	addc	r9,	r0	
    43ae:	32 63       	addc	#-1,	r2	;r3 As==11
    43b0:	5f 72 65 61 	subc.b	&0x6165,r15	
    43b4:	64 5f       	add.b	@r15,	r4	
    43b6:	62 79       	subc.b	@r9,	r2	
    43b8:	74 65       	addc.b	@r5+,	r4	
    43ba:	3a 46       	mov	@r6+,	r10	
    43bc:	28 30       	jn	$+82     	;abs 0x440e
    43be:	2c 31       	jn	$+602    	;abs 0x4618
    43c0:	31 29       	jnc	$+612    	;abs 0x4624
    43c2:	00 69       	addc	r9,	r0	
    43c4:	32 63       	addc	#-1,	r2	;r3 As==11
    43c6:	5f 72 65 61 	subc.b	&0x6165,r15	
    43ca:	64 5f       	add.b	@r15,	r4	
    43cc:	6d 75       	subc.b	@r5,	r13	
    43ce:	6c 74       	subc.b	@r4,	r12	
    43d0:	69 70       	subc.b	@r0,	r9	
    43d2:	6c 65       	addc.b	@r5,	r12	
    43d4:	73 3a       	jl	$-792    	;abs 0x40bc
    43d6:	46 28       	jnc	$+142    	;abs 0x4464
    43d8:	30 2c       	jc	$+98     	;abs 0x443a
    43da:	31 31       	jn	$+612    	;abs 0x463e
    43dc:	29 00 69 32 	mova	&0x03269,r9	
    43e0:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    43e2:	72 65       	addc.b	@r5+,	r2	
    43e4:	61 64       	addc.b	@r4,	r1	
    43e6:	31 36       	jge	$-924    	;abs 0x404a
    43e8:	5f 62 79 74 	addc.b	&0x7479,r15	
    43ec:	65 3a       	jl	$-820    	;abs 0x40b8
    43ee:	46 28       	jnc	$+142    	;abs 0x447c
    43f0:	30 2c       	jc	$+98     	;abs 0x4452
    43f2:	31 31       	jn	$+612    	;abs 0x4656
    43f4:	29 00 69 32 	mova	&0x03269,r9	
    43f8:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    43fa:	72 65       	addc.b	@r5+,	r2	
    43fc:	61 64       	addc.b	@r4,	r1	
    43fe:	31 36       	jge	$-924    	;abs 0x4062
    4400:	5f 6d 75 6c 	addc.b	27765(r13),r15	;0x6c75(r13)
    4404:	74 69       	addc.b	@r9+,	r4	
    4406:	70 6c       	addc.b	@r12+,	r0	
    4408:	65 73       	subc.b	#2,	r5	;r3 As==10
    440a:	3a 46       	mov	@r6+,	r10	
    440c:	28 30       	jn	$+82     	;abs 0x445e
    440e:	2c 31       	jn	$+602    	;abs 0x4668
    4410:	31 29       	jnc	$+612    	;abs 0x4674
    4412:	00 4d       	br	r13		
    4414:	50 59 3a 47 	add.b	18234(r9),r0	;0x473a(r9)
    4418:	28 31       	jn	$+594    	;abs 0x466a
    441a:	30 2c       	jc	$+98     	;abs 0x447c
    441c:	38 29       	jnc	$+626    	;abs 0x468e
    441e:	00 4d       	br	r13		
    4420:	50 59 53 3a 	add.b	14931(r9),r0	;0x3a53(r9)
    4424:	47 28       	jnc	$+144    	;abs 0x44b4
    4426:	31 30       	jn	$+100    	;abs 0x448a
    4428:	2c 38       	jl	$+90     	;abs 0x4482
    442a:	29 00 4d 41 	mova	&0x0414d,r9	
    442e:	43 3a       	jl	$-888    	;abs 0x40b6
    4430:	47 28       	jnc	$+144    	;abs 0x44c0
    4432:	31 30       	jn	$+100    	;abs 0x4496
    4434:	2c 38       	jl	$+90     	;abs 0x448e
    4436:	29 00 4d 41 	mova	&0x0414d,r9	
    443a:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    443c:	3a 47       	mov	@r7+,	r10	
    443e:	28 31       	jn	$+594    	;abs 0x4690
    4440:	30 2c       	jc	$+98     	;abs 0x44a2
    4442:	38 29       	jnc	$+626    	;abs 0x46b4
    4444:	00 4f       	br	r15		
    4446:	50 32       	jn	$-862    	;abs 0x40e8
    4448:	3a 47       	mov	@r7+,	r10	
    444a:	28 31       	jn	$+594    	;abs 0x469c
    444c:	30 2c       	jc	$+98     	;abs 0x44ae
    444e:	38 29       	jnc	$+626    	;abs 0x46c0
    4450:	00 52       	add	r2,	r0	
    4452:	45 53       	add.b	#0,	r5	;r3 As==00
    4454:	4c 4f       	mov.b	r15,	r12	
    4456:	3a 47       	mov	@r7+,	r10	
    4458:	28 31       	jn	$+594    	;abs 0x46aa
    445a:	30 2c       	jc	$+98     	;abs 0x44bc
    445c:	38 29       	jnc	$+626    	;abs 0x46ce
    445e:	00 52       	add	r2,	r0	
    4460:	45 53       	add.b	#0,	r5	;r3 As==00
    4462:	48 49       	mov.b	r9,	r8	
    4464:	3a 47       	mov	@r7+,	r10	
    4466:	28 31       	jn	$+594    	;abs 0x46b8
    4468:	30 2c       	jc	$+98     	;abs 0x44ca
    446a:	38 29       	jnc	$+626    	;abs 0x46dc
    446c:	00 53       	add	#0,	r0	;r3 As==00
    446e:	55 4d 45 58 	mov.b	22597(r13),r5	;0x5845(r13)
    4472:	54 3a       	jl	$-854    	;abs 0x411c
    4474:	47 28       	jnc	$+144    	;abs 0x4504
    4476:	31 30       	jn	$+100    	;abs 0x44da
    4478:	2c 38       	jl	$+90     	;abs 0x44d2
    447a:	29 00 70 6f 	mova	&0x06f70,r9	
    447e:	72 74       	subc.b	@r4+,	r2	
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    4480:	31 3a       	jl	$-924    	;abs 0x40e4
    4482:	47 28       	jnc	$+144    	;abs 0x4512

void process_option(){
    4484:	38 2c       	jc	$+114    	;abs 0x44f6
    4486:	34 29       	jnc	$+618    	;abs 0x46f0
    int i;
    switch (MenuOption){
        case RADIO_RAW:
    4488:	00 70       	subc	r0,	r0	
            draw_rc_inputs(1);
    448a:	6f 72       	subc.b	#4,	r15	;r2 As==10
    448c:	74 32       	jn	$-790    	;abs 0x4176
            break;
    448e:	3a 47       	mov	@r7+,	r10	
    4490:	28 38       	jl	$+82     	;abs 0x44e2
        case RADIO_CORRECT:
    4492:	2c 34       	jge	$+90     	;abs 0x44ec
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    4494:	29 00 70 6f 	mova	&0x06f70,r9	
                lcd_goto(8,8);
    4498:	72 74       	subc.b	@r4+,	r2	
    449a:	33 3a       	jl	$-920    	;abs 0x4102
                printf("%d", i);
                delayms(1000);
            }
    449c:	47 28       	jnc	$+144    	;abs 0x452c
    449e:	38 2c       	jc	$+114    	;abs 0x4510
            MotorArmed = TRUE;
    44a0:	35 29       	jnc	$+620    	;abs 0x470c
    44a2:	00 70       	subc	r0,	r0	
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
            break;
            
        case INITIAL_SETTINGS:
    44a4:	6f 72       	subc.b	#4,	r15	;r2 As==10
    44a6:	74 34       	jge	$+234    	;abs 0x4590
            // seta o flag initial setup
    44a8:	3a 47       	mov	@r7+,	r10	
    44aa:	28 38       	jl	$+82     	;abs 0x44fc
            break;          
    44ac:	2c 35       	jge	$+602    	;abs 0x4706
    44ae:	29 00 70 6f 	mova	&0x06f70,r9	
    }
    
    if(ChannelInput[CH7_CH] > 3500){
    44b2:	72 74       	subc.b	@r4+,	r2	
    44b4:	35 3a       	jl	$-916    	;abs 0x4120
    44b6:	47 28       	jnc	$+144    	;abs 0x4546
        MenuStep = WAIT_CH7_BACK;
    44b8:	38 2c       	jc	$+114    	;abs 0x452a
    44ba:	35 29       	jnc	$+620    	;abs 0x4726
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    }
}

    44bc:	00 70       	subc	r0,	r0	
    44be:	6f 72       	subc.b	#4,	r15	;r2 As==10
void draw_analog_graph(void){
    44c0:	74 36       	jge	$-790    	;abs 0x41aa
    44c2:	3a 47       	mov	@r7+,	r10	
    lcd_goto(4,4);
    44c4:	28 38       	jl	$+82     	;abs 0x4516
    44c6:	2c 35       	jge	$+602    	;abs 0x4720
            
        case INITIAL_SETTINGS:
            // seta o flag initial setup
            break;          
    }
    
    44c8:	29 00 55 43 	mova	&0x04355,r9	
    44cc:	42 30       	jn	$+134    	;abs 0x4552

void draw_analog_graph(void){
    lcd_goto(4,4);
    printf("FAZER");
}

    44ce:	49 32       	jn	$-876    	;abs 0x4162
    44d0:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    44d2:	41 3a       	jl	$-892    	;abs 0x4156
    44d4:	47 28       	jnc	$+144    	;abs 0x4564
    44d6:	31 30       	jn	$+100    	;abs 0x453a
void process_analog_menu(void){
    switch(MenuAnalog){
        case DISPLAY:
    44d8:	2c 38       	jl	$+90     	;abs 0x4532
    44da:	29 00 55 43 	mova	&0x04355,r9	
            lcd_goto(0,14);
    44de:	42 30       	jn	$+134    	;abs 0x4564
    44e0:	49 32       	jn	$-876    	;abs 0x4174
    
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        lcd_clear(BLACK);
    }
    44e2:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    44e4:	41 3a       	jl	$-892    	;abs 0x4168
    44e6:	47 28       	jnc	$+144    	;abs 0x4576
                delayms(1000);
            }
            MotorArmed = TRUE;
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
    44e8:	31 30       	jn	$+100    	;abs 0x454c
    44ea:	2c 38       	jl	$+90     	;abs 0x4544
    44ec:	29 00 55 43 	mova	&0x04355,r9	

void process_analog_menu(void){
    switch(MenuAnalog){
        case DISPLAY:
            lcd_goto(0,14);
            printf("DISPLAY             ");
    44f0:	42 31       	jn	$+646    	;abs 0x4776

            refresh_analog_menu();
            MenuAnalog = SELECT;
    44f2:	49 32       	jn	$-876    	;abs 0x4186
    44f4:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
            break;
    44f6:	41 3a       	jl	$-892    	;abs 0x417a
    44f8:	47 28       	jnc	$+144    	;abs 0x4588
    44fa:	31 30       	jn	$+100    	;abs 0x455e
        case SELECT:
            lcd_goto(0,14);
    44fc:	2c 38       	jl	$+90     	;abs 0x4556
    44fe:	29 00 55 43 	mova	&0x04355,r9	
            printf("SELECT            ");
    4502:	42 31       	jn	$+646    	;abs 0x4788

    4504:	49 32       	jn	$-876    	;abs 0x4198
    4506:	43 53       	.word	0x5343;	????	Illegal as emulation instr
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    4508:	41 3a       	jl	$-892    	;abs 0x418c
    450a:	47 28       	jnc	$+144    	;abs 0x459a
                MenuAnalog = WAIT_ROLL_LEFT;
    450c:	31 30       	jn	$+100    	;abs 0x4570
    450e:	2c 38       	jl	$+90     	;abs 0x4568
    4510:	29 00 54 41 	mova	&0x04154,r9	
            }
    4514:	30 49       	br	@r9+		
    4516:	56 3a       	jl	$-850    	;abs 0x41c4
            else{
    4518:	47 28       	jnc	$+144    	;abs 0x45a8
    451a:	31 30       	jn	$+100    	;abs 0x457e
    451c:	2c 38       	jl	$+90     	;abs 0x4576
    451e:	29 00 54 41 	mova	&0x04154,r9	
                if(ChannelInput[ROLL_CH] < 2500){
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
    4522:	30 43       	br	#-1		;r3 As==11
    4524:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    4528:	28 31       	jn	$+594    	;abs 0x477a
            }
            
    452a:	30 2c       	jc	$+98     	;abs 0x458c
    452c:	38 29       	jnc	$+626    	;abs 0x479e
    452e:	00 54       	add	r4,	r0	
    4530:	41 30       	jn	$+132    	;abs 0x45b4
    4532:	52 3a       	jl	$-858    	;abs 0x41d8
    4534:	47 28       	jnc	$+144    	;abs 0x45c4
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    4536:	31 30       	jn	$+100    	;abs 0x459a
    4538:	2c 38       	jl	$+90     	;abs 0x4592
    453a:	29 00 54 41 	mova	&0x04154,r9	
    453e:	30 43       	br	#-1		;r3 As==11
                MenuAnalog = WAIT_PITCH_DOWN;
    4540:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    4542:	4c 30       	jn	$+154    	;abs 0x45dc
    4544:	3a 47       	mov	@r7+,	r10	
    4546:	28 31       	jn	$+594    	;abs 0x4798
    4548:	30 2c       	jc	$+98     	;abs 0x45aa
            }
    454a:	38 29       	jnc	$+626    	;abs 0x47bc
    454c:	00 54       	add	r4,	r0	
    454e:	41 30       	jn	$+132    	;abs 0x45d2
    4550:	43 43       	clr.b	#0		;r3 As==00
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
    4552:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    4556:	47 28       	jnc	$+144    	;abs 0x45e6
    4558:	31 30       	jn	$+100    	;abs 0x45bc
    455a:	2c 38       	jl	$+90     	;abs 0x45b4
                }
            }
    455c:	29 00 54 41 	mova	&0x04154,r9	
    4560:	30 43       	br	#-1		;r3 As==11
    4562:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    4564:	30 3a       	jl	$-926    	;abs 0x41c6
            
            break;
    4566:	47 28       	jnc	$+144    	;abs 0x45f6
    4568:	31 30       	jn	$+100    	;abs 0x45cc
    456a:	2c 38       	jl	$+90     	;abs 0x45c4
    456c:	29 00 54 41 	mova	&0x04154,r9	
        case WAIT_PITCH_DOWN:
    4570:	30 43       	br	#-1		;r3 As==11
    4572:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    4574:	31 3a       	jl	$-924    	;abs 0x41d8
            lcd_goto(0,14);
    4576:	47 28       	jnc	$+144    	;abs 0x4606
    4578:	31 30       	jn	$+100    	;abs 0x45dc
    457a:	2c 38       	jl	$+90     	;abs 0x45d4
    457c:	29 00 54 41 	mova	&0x04154,r9	
            printf("WAIT PITCH DOWN    ");
    4580:	30 43       	br	#-1		;r3 As==11
    4582:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    4584:	4c 32       	jn	$-870    	;abs 0x421e
    4586:	3a 47       	mov	@r7+,	r10	
    4588:	28 31       	jn	$+594    	;abs 0x47da

    458a:	30 2c       	jc	$+98     	;abs 0x45ec
    458c:	38 29       	jnc	$+626    	;abs 0x47fe
    458e:	00 54       	add	r4,	r0	
    4590:	41 30       	jn	$+132    	;abs 0x4614
    4592:	43 43       	clr.b	#0		;r3 As==00
            if(ChannelInput[PITCH_CH] > 2500){
    4594:	52 32       	jn	$-858    	;abs 0x423a
    4596:	3a 47       	mov	@r7+,	r10	
    4598:	28 31       	jn	$+594    	;abs 0x47ea
    459a:	30 2c       	jc	$+98     	;abs 0x45fc
    459c:	38 29       	jnc	$+626    	;abs 0x480e
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    459e:	00 74       	subc	r4,	r0	
    45a0:	69 6d       	addc.b	@r13,	r9	
    45a2:	65 72       	subc.b	#4,	r5	;r2 As==10
    45a4:	61 3a       	jl	$-828    	;abs 0x4268
    45a6:	47 28       	jnc	$+144    	;abs 0x4636
                MenuAnalog = DISPLAY;
    45a8:	31 30       	jn	$+100    	;abs 0x460c
    45aa:	2c 35       	jge	$+602    	;abs 0x4804
    45ac:	29 00 54 42 	mova	&0x04254,r9	
    45b0:	49 56       	add.b	r6,	r9	
            }
            break;
    45b2:	3a 47       	mov	@r7+,	r10	
    45b4:	28 31       	jn	$+594    	;abs 0x4806
    45b6:	30 2c       	jc	$+98     	;abs 0x4618
    45b8:	38 29       	jnc	$+626    	;abs 0x482a
            
    45ba:	00 54       	add	r4,	r0	
    45bc:	42 43       	clr.b	r2		
    45be:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
        case WAIT_PITCH_UP:
    45c2:	28 31       	jn	$+594    	;abs 0x4814
    45c4:	30 2c       	jc	$+98     	;abs 0x4626
    45c6:	38 29       	jnc	$+626    	;abs 0x4838
    45c8:	00 54       	add	r4,	r0	
    45ca:	42 52       	rla.b	r2		
            lcd_goto(0,14);
    45cc:	3a 47       	mov	@r7+,	r10	
    45ce:	28 31       	jn	$+594    	;abs 0x4820
    45d0:	30 2c       	jc	$+98     	;abs 0x4632
    45d2:	38 29       	jnc	$+626    	;abs 0x4844
    45d4:	00 54       	add	r4,	r0	
            printf("WAIT PITCH UP    ");
    45d6:	42 43       	clr.b	r2		
    45d8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    45da:	4c 30       	jn	$+154    	;abs 0x4674
    45dc:	3a 47       	mov	@r7+,	r10	
    45de:	28 31       	jn	$+594    	;abs 0x4830

    45e0:	30 2c       	jc	$+98     	;abs 0x4642
    45e2:	38 29       	jnc	$+626    	;abs 0x4854
    45e4:	00 54       	add	r4,	r0	
    45e6:	42 43       	clr.b	r2		
    45e8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
            if(ChannelInput[PITCH_CH] < 3500){
    45ea:	4c 31       	jn	$+666    	;abs 0x4884
    45ec:	3a 47       	mov	@r7+,	r10	
    45ee:	28 31       	jn	$+594    	;abs 0x4840
    45f0:	30 2c       	jc	$+98     	;abs 0x4652
    45f2:	38 29       	jnc	$+626    	;abs 0x4864
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    45f4:	00 54       	add	r4,	r0	
    45f6:	42 43       	clr.b	r2		
    45f8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    45fa:	4c 32       	jn	$-870    	;abs 0x4294
    45fc:	3a 47       	mov	@r7+,	r10	
                MenuAnalog = DISPLAY;
            }
    45fe:	28 31       	jn	$+594    	;abs 0x4850
    4600:	30 2c       	jc	$+98     	;abs 0x4662
    4602:	38 29       	jnc	$+626    	;abs 0x4874
    4604:	00 54       	add	r4,	r0	
            break;
    4606:	42 43       	clr.b	r2		
    4608:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    460a:	30 3a       	jl	$-926    	;abs 0x426c
    460c:	47 28       	jnc	$+144    	;abs 0x469c
    460e:	31 30       	jn	$+100    	;abs 0x4672
            
    4610:	2c 38       	jl	$+90     	;abs 0x466a
    4612:	29 00 54 42 	mova	&0x04254,r9	
    4616:	43 43       	clr.b	#0		;r3 As==00
    4618:	52 31       	jn	$+678    	;abs 0x48be
        case WAIT_ROLL_RIGHT:
    461a:	3a 47       	mov	@r7+,	r10	
    461c:	28 31       	jn	$+594    	;abs 0x486e
    461e:	30 2c       	jc	$+98     	;abs 0x4680
    4620:	38 29       	jnc	$+626    	;abs 0x4892
    4622:	00 54       	add	r4,	r0	
                lcd_goto(0,14);
                printf("WAIT ROLL RIGHT ");

    4624:	42 43       	clr.b	r2		
    4626:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    4628:	32 3a       	jl	$-922    	;abs 0x428e
    462a:	47 28       	jnc	$+144    	;abs 0x46ba
    462c:	31 30       	jn	$+100    	;abs 0x4690
                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
    462e:	2c 38       	jl	$+90     	;abs 0x4688
    4630:	29 00 54 42 	mova	&0x04254,r9	
    4634:	43 43       	clr.b	#0		;r3 As==00
    4636:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    463a:	47 28       	jnc	$+144    	;abs 0x46ca
    463c:	31 30       	jn	$+100    	;abs 0x46a0
    463e:	2c 38       	jl	$+90     	;abs 0x4698
    4640:	29 00 54 42 	mova	&0x04254,r9	
                        AnalogSelect--;
                    }
                    MenuAnalog = DISPLAY;
    4644:	43 43       	clr.b	#0		;r3 As==00
                }
            break;
            
        case WAIT_ROLL_LEFT:
    4646:	54 4c 34 3a 	mov.b	14900(r12),r4	;0x3a34(r12)
    464a:	47 28       	jnc	$+144    	;abs 0x46da
    464c:	31 30       	jn	$+100    	;abs 0x46b0
    464e:	2c 38       	jl	$+90     	;abs 0x46a8
    4650:	29 00 54 42 	mova	&0x04254,r9	
    4654:	43 43       	clr.b	#0		;r3 As==00
    4656:	54 4c 35 3a 	mov.b	14901(r12),r4	;0x3a35(r12)
                lcd_goto(0,14);
    465a:	47 28       	jnc	$+144    	;abs 0x46ea
                printf("WAIT ROLL LEFT   ");
        
                if(ChannelInput[PITCH_CH] > 2500){
    465c:	31 30       	jn	$+100    	;abs 0x46c0
    465e:	2c 38       	jl	$+90     	;abs 0x46b8
                   if(AnalogSelect < 7){
    4660:	29 00 54 42 	mova	&0x04254,r9	
    4664:	43 43       	clr.b	#0		;r3 As==00
    4666:	54 4c 36 3a 	mov.b	14902(r12),r4	;0x3a36(r12)
                        AnalogSelect++;
    466a:	47 28       	jnc	$+144    	;abs 0x46fa
    466c:	31 30       	jn	$+100    	;abs 0x46d0
    466e:	2c 38       	jl	$+90     	;abs 0x46c8
                    }
    4670:	29 00 54 42 	mova	&0x04254,r9	
                    MenuAnalog = DISPLAY;

                }
    4674:	43 43       	clr.b	#0		;r3 As==00
    4676:	52 33       	jn	$-346    	;abs 0x451c
    4678:	3a 47       	mov	@r7+,	r10	
    467a:	28 31       	jn	$+594    	;abs 0x48cc
            break;
    467c:	30 2c       	jc	$+98     	;abs 0x46de
    467e:	38 29       	jnc	$+626    	;abs 0x48f0
    4680:	00 54       	add	r4,	r0	
    4682:	42 43       	clr.b	r2		
            
    4684:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    4686:	34 3a       	jl	$-918    	;abs 0x42f0
    4688:	47 28       	jnc	$+144    	;abs 0x4718
    468a:	31 30       	jn	$+100    	;abs 0x46ee
        case PROCESS_OPTION:
    468c:	2c 38       	jl	$+90     	;abs 0x46e6
    468e:	29 00 54 42 	mova	&0x04254,r9	
    4692:	43 43       	clr.b	#0		;r3 As==00
            break;
    4694:	52 35       	jge	$+678    	;abs 0x493a
    4696:	3a 47       	mov	@r7+,	r10	
    4698:	28 31       	jn	$+594    	;abs 0x48ea
        case WAIT_CH7_BACK:
            break;
    }
    469a:	30 2c       	jc	$+98     	;abs 0x46fc
    469c:	38 29       	jnc	$+626    	;abs 0x490e
    469e:	00 54       	add	r4,	r0	
    46a0:	42 43       	clr.b	r2		
    46a2:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    46a4:	36 3a       	jl	$-914    	;abs 0x4312
    46a6:	47 28       	jnc	$+144    	;abs 0x4736
    46a8:	31 30       	jn	$+100    	;abs 0x470c
    46aa:	2c 38       	jl	$+90     	;abs 0x4704
    46ac:	29 00 74 69 	mova	&0x06974,r9	
    46b0:	6d 65       	addc.b	@r5,	r13	
    46b2:	72 62       	addc.b	#8,	r2	;r2 As==11
}

void refresh_analog_menu(void){
    46b4:	3a 47       	mov	@r7+,	r10	
    46b6:	28 31       	jn	$+594    	;abs 0x4908
    46b8:	31 2c       	jc	$+100    	;abs 0x471c
    46ba:	35 29       	jnc	$+620    	;abs 0x4926
    46bc:	00 46       	br	r6		
    46be:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    46c0:	4c 31       	jn	$+666    	;abs 0x495a
    46c2:	3a 47       	mov	@r7+,	r10	
    int i;
    46c4:	28 31       	jn	$+594    	;abs 0x4916
    46c6:	30 2c       	jc	$+98     	;abs 0x4728
    46c8:	38 29       	jnc	$+626    	;abs 0x493a
    46ca:	00 46       	br	r6		
    46cc:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    46ce:	4c 32       	jn	$-870    	;abs 0x4368
    46d0:	3a 47       	mov	@r7+,	r10	
    46d2:	28 31       	jn	$+594    	;abs 0x4924
    46d4:	30 2c       	jc	$+98     	;abs 0x4736
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    46d6:	38 29       	jnc	$+626    	;abs 0x4948
    46d8:	00 46       	br	r6		
    46da:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    46dc:	4c 33       	jn	$-358    	;abs 0x4576
    46de:	3a 47       	mov	@r7+,	r10	
    46e0:	28 31       	jn	$+594    	;abs 0x4932
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
    46e2:	30 2c       	jc	$+98     	;abs 0x4744
    46e4:	38 29       	jnc	$+626    	;abs 0x4956
    46e6:	00 41       	br	r1		
    46e8:	44 43       	clr.b	r4		
    46ea:	31 32       	jn	$-924    	;abs 0x434e
    46ec:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    46ee:	4c 30       	jn	$+154    	;abs 0x4788
    46f0:	3a 47       	mov	@r7+,	r10	
    46f2:	28 31       	jn	$+594    	;abs 0x4944
    46f4:	30 2c       	jc	$+98     	;abs 0x4756
            color_fore = BLACK;
    46f6:	38 29       	jnc	$+626    	;abs 0x4968
    46f8:	00 41       	br	r1		
    46fa:	44 43       	clr.b	r4		
        }
        else{                           // senao
    46fc:	31 32       	jn	$-924    	;abs 0x4360
    46fe:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    4700:	4c 31       	jn	$+666    	;abs 0x499a
    4702:	3a 47       	mov	@r7+,	r10	
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
            color_fore = BLACK;
    4704:	28 31       	jn	$+594    	;abs 0x4956
    4706:	30 2c       	jc	$+98     	;abs 0x4768
    4708:	38 29       	jnc	$+626    	;abs 0x497a
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
    470a:	00 41       	br	r1		
    470c:	44 43       	clr.b	r4		
        
    470e:	31 32       	jn	$-924    	;abs 0x4372
    4710:	49 46       	mov.b	r6,	r9	
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
    4712:	47 3a       	jl	$-880    	;abs 0x43a2
    4714:	47 28       	jnc	$+144    	;abs 0x47a4
    4716:	31 30       	jn	$+100    	;abs 0x477a
    4718:	2c 38       	jl	$+90     	;abs 0x4772
    471a:	29 00 41 44 	mova	&0x04441,r9	
    471e:	43 31       	jn	$+648    	;abs 0x49a6
        }                                                                
    4720:	32 49       	mov	@r9+,	r2	
    4722:	45 3a       	jl	$-884    	;abs 0x43ae
    4724:	47 28       	jnc	$+144    	;abs 0x47b4
    4726:	31 30       	jn	$+100    	;abs 0x478a
    4728:	2c 38       	jl	$+90     	;abs 0x4782
    472a:	29 00 41 44 	mova	&0x04441,r9	
        else{                           // se nao                        
    472e:	43 31       	jn	$+648    	;abs 0x49b6
    4730:	32 49       	mov	@r9+,	r2	
    4732:	56 3a       	jl	$-850    	;abs 0x43e0
    4734:	47 28       	jnc	$+144    	;abs 0x47c4
    4736:	31 30       	jn	$+100    	;abs 0x479a
    4738:	2c 38       	jl	$+90     	;abs 0x4792
            if(color_back == LIME){
                color_fore = BLACK;
            }
    473a:	29 00 61 64 	mova	&0x06461,r9	
    473e:	63 31       	jn	$+712    	;abs 0x4a06
    4740:	32 3a       	jl	$-922    	;abs 0x43a6
    4742:	47 28       	jnc	$+144    	;abs 0x47d2
    4744:	31 35       	jge	$+612    	;abs 0x49a8
    4746:	2c 37       	jge	$-422    	;abs 0x45a0
    4748:	29 00 41 44 	mova	&0x04441,r9	
    474c:	43 31       	jn	$+648    	;abs 0x49d4
    474e:	32 4d       	mov	@r13+,	r2	
    4750:	45 4d       	mov.b	r13,	r5	
    4752:	30 3a       	jl	$-926    	;abs 0x43b4
    4754:	47 28       	jnc	$+144    	;abs 0x47e4
    4756:	31 30       	jn	$+100    	;abs 0x47ba
    4758:	2c 38       	jl	$+90     	;abs 0x47b2
    475a:	29 00 41 44 	mova	&0x04441,r9	
        }                               
    475e:	43 31       	jn	$+648    	;abs 0x49e6
    4760:	32 4d       	mov	@r13+,	r2	
    4762:	45 4d       	mov.b	r13,	r5	
        
    4764:	31 3a       	jl	$-924    	;abs 0x43c8
    4766:	47 28       	jnc	$+144    	;abs 0x47f6
        printf("%d",i);
    4768:	31 30       	jn	$+100    	;abs 0x47cc
    476a:	2c 38       	jl	$+90     	;abs 0x47c4
    476c:	29 00 41 44 	mova	&0x04441,r9	
    4770:	43 31       	jn	$+648    	;abs 0x49f8
    4772:	32 4d       	mov	@r13+,	r2	
    4774:	45 4d       	mov.b	r13,	r5	
    4776:	32 3a       	jl	$-922    	;abs 0x43dc
        // ajusta as cores para o normal
    4778:	47 28       	jnc	$+144    	;abs 0x4808
        color_fore = LIME;
    477a:	31 30       	jn	$+100    	;abs 0x47de
        color_back = BLACK;
    477c:	2c 38       	jl	$+90     	;abs 0x47d6
    477e:	29 00 41 44 	mova	&0x04441,r9	
    4782:	43 31       	jn	$+648    	;abs 0x4a0a
    4784:	32 4d       	mov	@r13+,	r2	
    4786:	45 4d       	mov.b	r13,	r5	
    4788:	33 3a       	jl	$-920    	;abs 0x43f0
    478a:	47 28       	jnc	$+144    	;abs 0x481a
    478c:	31 30       	jn	$+100    	;abs 0x47f0
    478e:	2c 38       	jl	$+90     	;abs 0x47e8
    4790:	29 00 41 44 	mova	&0x04441,r9	
        printf(" ");
    4794:	43 31       	jn	$+648    	;abs 0x4a1c
    4796:	32 4d       	mov	@r13+,	r2	
    4798:	45 4d       	mov.b	r13,	r5	
    479a:	34 3a       	jl	$-918    	;abs 0x4404
    479c:	47 28       	jnc	$+144    	;abs 0x482c
    479e:	31 30       	jn	$+100    	;abs 0x4802
    47a0:	2c 38       	jl	$+90     	;abs 0x47fa
    47a2:	29 00 41 44 	mova	&0x04441,r9	
    47a6:	43 31       	jn	$+648    	;abs 0x4a2e
    47a8:	32 4d       	mov	@r13+,	r2	
    47aa:	45 4d       	mov.b	r13,	r5	
    }
    47ac:	35 3a       	jl	$-916    	;abs 0x4418
    47ae:	47 28       	jnc	$+144    	;abs 0x483e
    47b0:	31 30       	jn	$+100    	;abs 0x4814
    47b2:	2c 38       	jl	$+90     	;abs 0x480c
    47b4:	29 00 41 44 	mova	&0x04441,r9	
    47b8:	43 31       	jn	$+648    	;abs 0x4a40
    47ba:	32 4d       	mov	@r13+,	r2	
    47bc:	45 4d       	mov.b	r13,	r5	
    47be:	36 3a       	jl	$-914    	;abs 0x442c
    47c0:	47 28       	jnc	$+144    	;abs 0x4850
    47c2:	31 30       	jn	$+100    	;abs 0x4826
    printf("                    ");
    47c4:	2c 38       	jl	$+90     	;abs 0x481e
    47c6:	29 00 41 44 	mova	&0x04441,r9	
    47ca:	43 31       	jn	$+648    	;abs 0x4a52
    47cc:	32 4d       	mov	@r13+,	r2	
    47ce:	45 4d       	mov.b	r13,	r5	
    47d0:	37 3a       	jl	$-912    	;abs 0x4440
    47d2:	47 28       	jnc	$+144    	;abs 0x4862
    47d4:	31 30       	jn	$+100    	;abs 0x4838
    47d6:	2c 38       	jl	$+90     	;abs 0x4830
    47d8:	29 00 41 44 	mova	&0x04441,r9	
}
    47dc:	43 31       	jn	$+648    	;abs 0x4a64
    47de:	32 4d       	mov	@r13+,	r2	
    47e0:	45 4d       	mov.b	r13,	r5	

    47e2:	38 3a       	jl	$-910    	;abs 0x4454
    47e4:	47 28       	jnc	$+144    	;abs 0x4874
    47e6:	31 30       	jn	$+100    	;abs 0x484a
interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    47e8:	2c 38       	jl	$+90     	;abs 0x4842
    ControlCounter++;
    47ea:	29 00 41 44 	mova	&0x04441,r9	
    RCCounter++;
    47ee:	43 31       	jn	$+648    	;abs 0x4a76
    47f0:	32 4d       	mov	@r13+,	r2	
    47f2:	45 4d       	mov.b	r13,	r5	
    47f4:	39 3a       	jl	$-908    	;abs 0x4468
    47f6:	47 28       	jnc	$+144    	;abs 0x4886
    47f8:	31 30       	jn	$+100    	;abs 0x485c
    47fa:	2c 38       	jl	$+90     	;abs 0x4854
    47fc:	29 00 41 44 	mova	&0x04441,r9	
    4800:	43 31       	jn	$+648    	;abs 0x4a88
    4802:	32 4d       	mov	@r13+,	r2	
    4804:	45 4d       	mov.b	r13,	r5	
    4806:	31 30       	jn	$+100    	;abs 0x486a
    4808:	3a 47       	mov	@r7+,	r10	
    480a:	28 31       	jn	$+594    	;abs 0x4a5c
    480c:	30 2c       	jc	$+98     	;abs 0x486e
    480e:	38 29       	jnc	$+626    	;abs 0x4a80
    4810:	00 41       	br	r1		
    4812:	44 43       	clr.b	r4		
    MenuCounter++;
}
    4814:	31 32       	jn	$-924    	;abs 0x4478

    4816:	4d 45       	mov.b	r5,	r13	
    4818:	4d 31       	jn	$+668    	;abs 0x4ab4
void clock_init(void)
    481a:	31 3a       	jl	$-924    	;abs 0x447e
    481c:	47 28       	jnc	$+144    	;abs 0x48ac
    481e:	31 30       	jn	$+100    	;abs 0x4882
    4820:	2c 38       	jl	$+90     	;abs 0x487a
    4822:	29 00 41 44 	mova	&0x04441,r9	
{
    4826:	43 31       	jn	$+648    	;abs 0x4aae
    4828:	32 4d       	mov	@r13+,	r2	
    482a:	45 4d       	mov.b	r13,	r5	
    482c:	31 32       	jn	$-924    	;abs 0x4490
    482e:	3a 47       	mov	@r7+,	r10	
    4830:	28 31       	jn	$+594    	;abs 0x4a82
    4832:	30 2c       	jc	$+98     	;abs 0x4894
    4834:	38 29       	jnc	$+626    	;abs 0x4aa6
    4836:	00 41       	br	r1		
    /* 
    4838:	44 43       	clr.b	r4		
    483a:	31 32       	jn	$-924    	;abs 0x449e
    483c:	4d 45       	mov.b	r5,	r13	
    483e:	4d 31       	jn	$+668    	;abs 0x4ada
    4840:	33 3a       	jl	$-920    	;abs 0x44a8
    4842:	47 28       	jnc	$+144    	;abs 0x48d2
    4844:	31 30       	jn	$+100    	;abs 0x48a8
    4846:	2c 38       	jl	$+90     	;abs 0x48a0
    4848:	29 00 41 44 	mova	&0x04441,r9	
     * Basic Clock System Control 2
    484c:	43 31       	jn	$+648    	;abs 0x4ad4
    484e:	32 4d       	mov	@r13+,	r2	
    4850:	45 4d       	mov.b	r13,	r5	
    4852:	31 34       	jge	$+100    	;abs 0x48b6
    4854:	3a 47       	mov	@r7+,	r10	
    4856:	28 31       	jn	$+594    	;abs 0x4aa8
    4858:	30 2c       	jc	$+98     	;abs 0x48ba
    485a:	38 29       	jnc	$+626    	;abs 0x4acc
     * 
    485c:	00 41       	br	r1		
    485e:	44 43       	clr.b	r4		
    4860:	31 32       	jn	$-924    	;abs 0x44c4
    4862:	4d 45       	mov.b	r5,	r13	
    4864:	4d 31       	jn	$+668    	;abs 0x4b00
    4866:	35 3a       	jl	$-916    	;abs 0x44d2
    4868:	47 28       	jnc	$+144    	;abs 0x48f8
    486a:	31 30       	jn	$+100    	;abs 0x48ce
     * SELM_0 -- DCOCLK
    486c:	2c 38       	jl	$+90     	;abs 0x48c6
    486e:	29 00 44 41 	mova	&0x04144,r9	
    4872:	43 31       	jn	$+648    	;abs 0x4afa
    4874:	32 5f       	add	@r15+,	r2	
    4876:	30 43       	br	#-1		;r3 As==11
    4878:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    487c:	28 31       	jn	$+594    	;abs 0x4ace
    487e:	30 2c       	jc	$+98     	;abs 0x48e0
     * DIVM_0 -- Divide by 1
    4880:	38 29       	jnc	$+626    	;abs 0x4af2
    4882:	00 44       	br	r4		
    4884:	41 43       	clr.b	r1		
    4886:	31 32       	jn	$-924    	;abs 0x44ea
    4888:	5f 31       	jn	$+704    	;abs 0x4b48
    488a:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    488c:	4c 3a       	jl	$-870    	;abs 0x4526
    488e:	47 28       	jnc	$+144    	;abs 0x491e
     * ~SELS -- DCOCLK
    4890:	31 30       	jn	$+100    	;abs 0x48f4
    4892:	2c 38       	jl	$+90     	;abs 0x48ec
    4894:	29 00 44 41 	mova	&0x04144,r9	
    4898:	43 31       	jn	$+648    	;abs 0x4b20
    489a:	32 5f       	add	@r15+,	r2	
    489c:	30 44       	br	@r4+		
    489e:	41 54       	add.b	r4,	r1	
    48a0:	3a 47       	mov	@r7+,	r10	
    48a2:	28 31       	jn	$+594    	;abs 0x4af4
     * DIVS_0 -- Divide by 1
    48a4:	30 2c       	jc	$+98     	;abs 0x4906
    48a6:	38 29       	jnc	$+626    	;abs 0x4b18
    48a8:	00 44       	br	r4		
    48aa:	41 43       	clr.b	r1		
    48ac:	31 32       	jn	$-924    	;abs 0x4510
    48ae:	5f 31       	jn	$+704    	;abs 0x4b6e
    48b0:	44 41       	mov.b	r1,	r4	
    48b2:	54 3a       	jl	$-854    	;abs 0x455c
    48b4:	47 28       	jnc	$+144    	;abs 0x4944
    48b6:	31 30       	jn	$+100    	;abs 0x491a
    48b8:	2c 38       	jl	$+90     	;abs 0x4912
    48ba:	29 00 44 4d 	mova	&0x04d44,r9	
     * ~DCOR -- DCO uses internal resistor
     * 
    48be:	41 43       	clr.b	r1		
    48c0:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    48c4:	47 28       	jnc	$+144    	;abs 0x4954
    48c6:	31 30       	jn	$+100    	;abs 0x492a
    48c8:	2c 38       	jl	$+90     	;abs 0x4922
    48ca:	29 00 44 4d 	mova	&0x04d44,r9	
    48ce:	41 43       	clr.b	r1		
    48d0:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    48d4:	47 28       	jnc	$+144    	;abs 0x4964
    48d6:	31 30       	jn	$+100    	;abs 0x493a
    48d8:	2c 38       	jl	$+90     	;abs 0x4932
    48da:	29 00 44 4d 	mova	&0x04d44,r9	
    48de:	41 49       	mov.b	r9,	r1	
    48e0:	56 3a       	jl	$-850    	;abs 0x458e
    48e2:	47 28       	jnc	$+144    	;abs 0x4972
    48e4:	31 30       	jn	$+100    	;abs 0x4948
    48e6:	2c 38       	jl	$+90     	;abs 0x4940
    48e8:	29 00 44 4d 	mova	&0x04d44,r9	
    48ec:	41 30       	jn	$+132    	;abs 0x4970
    48ee:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    48f0:	4c 3a       	jl	$-870    	;abs 0x458a
    48f2:	47 28       	jnc	$+144    	;abs 0x4982
    48f4:	31 30       	jn	$+100    	;abs 0x4958
    48f6:	2c 38       	jl	$+90     	;abs 0x4950
    48f8:	29 00 44 4d 	mova	&0x04d44,r9	
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    48fc:	41 30       	jn	$+132    	;abs 0x4980
    48fe:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    
    4900:	4c 3a       	jl	$-870    	;abs 0x459a
    4902:	47 28       	jnc	$+144    	;abs 0x4992
    DCOCTL = 0x77;      
        /* 
    4904:	31 30       	jn	$+100    	;abs 0x4968
    4906:	2c 38       	jl	$+90     	;abs 0x4960
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
    4908:	29 00 44 4d 	mova	&0x04d44,r9	
     */
    BCSCTL1 = 0xcf;     
    490c:	41 30       	jn	$+132    	;abs 0x4990
    490e:	44 41       	mov.b	r1,	r4	

    /* 
     * Basic Clock System Control 3
     * 
     * XT2S_3 -- Digital input signal
    4910:	4c 3a       	jl	$-870    	;abs 0x45aa
    4912:	47 28       	jnc	$+144    	;abs 0x49a2
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
     * XCAP_0 -- ~1 pF
    4914:	31 30       	jn	$+100    	;abs 0x4978
     */
    4916:	2c 38       	jl	$+90     	;abs 0x4970
    BCSCTL3 = 0xa0;
    4918:	29 00 44 4d 	mova	&0x04d44,r9	
    491c:	41 30       	jn	$+132    	;abs 0x49a0
    491e:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    4920:	3a 47       	mov	@r7+,	r10	
    4922:	28 31       	jn	$+594    	;abs 0x4b74
    4924:	30 2c       	jc	$+98     	;abs 0x4986
}

    4926:	38 29       	jnc	$+626    	;abs 0x4b98
    4928:	00 44       	br	r4		
    492a:	4d 41       	mov.b	r1,	r13	
void p1_init(){
    492c:	31 43       	mov	#-1,	r1	;r3 As==11
    492e:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    4932:	28 31       	jn	$+594    	;abs 0x4b84
        /* Port 1 Output Register */
    4934:	30 2c       	jc	$+98     	;abs 0x4996
    4936:	38 29       	jnc	$+626    	;abs 0x4ba8
    P1OUT = PPM_P1MASK;
    4938:	00 44       	br	r4		
    493a:	4d 41       	mov.b	r1,	r13	

    493c:	31 53       	add	#-1,	r1	;r3 As==11
    493e:	41 4c       	mov.b	r12,	r1	
    /* Port 1 Resistor Enable Register */
    4940:	3a 47       	mov	@r7+,	r10	
    P1REN = PPM_P1MASK;

    4942:	28 31       	jn	$+594    	;abs 0x4b94
    4944:	30 2c       	jc	$+98     	;abs 0x49a6
    /* Port 1 Interrupt Edge Select Register */
    4946:	38 29       	jnc	$+626    	;abs 0x4bb8
    P1IES = 0; // subida
    4948:	00 44       	br	r4		
    494a:	4d 41       	mov.b	r1,	r13	
    494c:	31 44       	mov	@r4+,	r1	
    494e:	41 3a       	jl	$-892    	;abs 0x45d2
    4950:	47 28       	jnc	$+144    	;abs 0x49e0
    4952:	31 30       	jn	$+100    	;abs 0x49b6
    4954:	2c 38       	jl	$+90     	;abs 0x49ae
    4956:	29 00 44 4d 	mova	&0x04d44,r9	
    495a:	41 31       	jn	$+644    	;abs 0x4bde
    495c:	44 41       	mov.b	r1,	r4	

    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;

    495e:	4c 3a       	jl	$-870    	;abs 0x45f8
    4960:	47 28       	jnc	$+144    	;abs 0x49f0
    4962:	31 30       	jn	$+100    	;abs 0x49c6
    4964:	2c 38       	jl	$+90     	;abs 0x49be
    /* Port 1 Interrupt Enable Register */
    4966:	29 00 44 4d 	mova	&0x04d44,r9	
    P1IE = PPM_P1MASK;
    496a:	41 31       	jn	$+644    	;abs 0x4bee
    496c:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr

    496e:	3a 47       	mov	@r7+,	r10	
    4970:	28 31       	jn	$+594    	;abs 0x4bc2
}
    4972:	30 2c       	jc	$+98     	;abs 0x49d4

void timer_a3_init(void)
    4974:	38 29       	jnc	$+626    	;abs 0x4be6
    4976:	00 44       	br	r4		
{
    4978:	4d 41       	mov.b	r1,	r13	
    /* 
    497a:	32 43       	mov	#-1,	r2	;r3 As==11
    497c:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    4980:	28 31       	jn	$+594    	;abs 0x4bd2
    4982:	30 2c       	jc	$+98     	;abs 0x49e4
    4984:	38 29       	jnc	$+626    	;abs 0x4bf6
    4986:	00 44       	br	r4		
    4988:	4d 41       	mov.b	r1,	r13	
    498a:	32 53       	add	#-1,	r2	;r3 As==11
    498c:	41 4c       	mov.b	r12,	r1	
    498e:	3a 47       	mov	@r7+,	r10	
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    BCSCTL1 = 0xcf;     

    4990:	28 31       	jn	$+594    	;abs 0x4be2
    4992:	30 2c       	jc	$+98     	;abs 0x49f4
    /* 
    4994:	38 29       	jnc	$+626    	;abs 0x4c06
    4996:	00 44       	br	r4		
    4998:	4d 41       	mov.b	r1,	r13	
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    
    DCOCTL = 0x77;      
        /* 
     * Basic Clock System Control 1
    499a:	32 44       	mov	@r4+,	r2	
    499c:	41 4c       	mov.b	r12,	r1	
     * 
    499e:	3a 47       	mov	@r7+,	r10	
    49a0:	28 31       	jn	$+594    	;abs 0x4bf2
    49a2:	30 2c       	jc	$+98     	;abs 0x4a04
void timer_a3_init(void)
{
    /* 
     * TACCTL0, Capture/Compare Control Register 0
     * 
     * CM_0 -- No Capture
    49a4:	38 29       	jnc	$+626    	;abs 0x4c16
    49a6:	00 44       	br	r4		
    49a8:	4d 41       	mov.b	r1,	r13	
    49aa:	32 53       	add	#-1,	r2	;r3 As==11
    49ac:	5a 3a       	jl	$-842    	;abs 0x4662
    49ae:	47 28       	jnc	$+144    	;abs 0x4a3e
    49b0:	31 30       	jn	$+100    	;abs 0x4a14
    49b2:	2c 38       	jl	$+90     	;abs 0x4a0c
    49b4:	29 00 57 44 	mova	&0x04457,r9	
    49b8:	54 43       	mov.b	#1,	r4	;r3 As==01
     * CCIS_0 -- CCIxA
     * ~SCS -- Asynchronous Capture
     * ~SCCI -- Latched capture signal (read)
    49ba:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    49be:	28 31       	jn	$+594    	;abs 0x4c10
    49c0:	30 2c       	jc	$+98     	;abs 0x4a22
    49c2:	38 29       	jnc	$+626    	;abs 0x4c34
    49c4:	00 54       	add	r4,	r0	
    49c6:	4c 56       	add.b	r6,	r12	
    49c8:	5f 43       	mov.b	#1,	r15	;r3 As==01
    49ca:	48 45       	mov.b	r5,	r8	
    49cc:	43 4b       	.word	0x4b43;	????	Illegal as 2-op instr
    49ce:	53 55       	.word	0x5553;	????	Illegal as 2-op instr
    49d0:	4d 3a       	jl	$-868    	;abs 0x466c
    49d2:	47 28       	jnc	$+144    	;abs 0x4a62
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
    49d4:	31 30       	jn	$+100    	;abs 0x4a38
    49d6:	2c 38       	jl	$+90     	;abs 0x4a30
    49d8:	29 00 69 32 	mova	&0x03269,r9	
    49dc:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    49de:	73 6c       	.word	0x6c73;	????	Illegal as 2-op instr
    49e0:	61 76       	subc.b	@r6,	r1	
    49e2:	65 5f       	add.b	@r15,	r5	
     * Note: ~<BIT> indicates that <BIT> has value zero
    49e4:	61 64       	addc.b	@r4,	r1	
    49e6:	64 72       	subc.b	#4,	r4	;r2 As==10
    49e8:	65 73       	subc.b	#2,	r5	;r3 As==10
    49ea:	73 3a       	jl	$-792    	;abs 0x46d2
    49ec:	47 28       	jnc	$+144    	;abs 0x4a7c
    49ee:	30 2c       	jc	$+98     	;abs 0x4a50
    49f0:	31 31       	jn	$+612    	;abs 0x4c54
    49f2:	29 00 61 6e 	mova	&0x06e61,r9	
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    49f6:	61 6c       	addc.b	@r12,	r1	
    49f8:	6f 67       	addc.b	@r7,	r15	
    49fa:	2e 63       	addc	#2,	r14	;r3 As==10
    49fc:	00 61       	addc	r1,	r0	
    49fe:	6e 61       	addc.b	@r1,	r14	
    4a00:	6c 6f       	addc.b	@r15,	r12	

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    4a02:	67 5f       	add.b	@r15,	r7	
    4a04:	69 6e       	addc.b	@r14,	r9	
    4a06:	69 74       	subc.b	@r4,	r9	
    4a08:	3a 46       	mov	@r6+,	r10	
    4a0a:	28 30       	jn	$+82     	;abs 0x4a5c
    4a0c:	2c 32       	jn	$-934    	;abs 0x4666
    4a0e:	30 29       	jnc	$+610    	;abs 0x4c70
    4a10:	00 61       	addc	r1,	r0	
    4a12:	6e 61       	addc.b	@r1,	r14	
    4a14:	6c 6f       	addc.b	@r15,	r12	
    TACCR0 = 4001;
    4a16:	67 5f       	add.b	@r15,	r7	
    4a18:	63 61       	.word	0x6163;	????	Illegal as 2-op instr
    4a1a:	6c 69       	addc.b	@r9,	r12	

    /* 
    4a1c:	62 72       	subc.b	#4,	r2	;r2 As==10
    4a1e:	61 74       	subc.b	@r4,	r1	
    4a20:	65 5f       	add.b	@r15,	r5	
    4a22:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
    4a24:	61 6e       	addc.b	@r14,	r1	
    4a26:	6e 65       	addc.b	@r5,	r14	
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;
    4a28:	6c 3a       	jl	$-806    	;abs 0x4702
    4a2a:	46 28       	jnc	$+142    	;abs 0x4ab8
    4a2c:	30 2c       	jc	$+98     	;abs 0x4a8e

    /* 
     * TACTL, Timer_A3 Control Register
     * 
     * TASSEL_2 -- SMCLK
    4a2e:	32 30       	jn	$+102    	;abs 0x4a94
    4a30:	29 00 69 3a 	mova	&0x03a69,r9	
     * ID_3 -- Divider - /8
    4a34:	50 28       	jnc	$+162    	;abs 0x4ad6
     * MC_1 -- Up Mode
     */
    4a36:	30 2c       	jc	$+98     	;abs 0x4a98
    4a38:	31 29       	jnc	$+612    	;abs 0x4c9c
    4a3a:	00 6a       	addc	r10,	r0	
    4a3c:	3a 72       	subc	#8,	r10	;r2 As==11
    4a3e:	28 30       	jn	$+82     	;abs 0x4a90
    4a40:	2c 31       	jn	$+602    	;abs 0x4c9a
    4a42:	29 00 6d 65 	mova	&0x0656d,r9	
    TACTL = TASSEL_2 + ID_3 + MC_1;
    4a46:	64 69       	addc.b	@r9,	r4	
    4a48:	61 3a       	jl	$-828    	;abs 0x470c
    4a4a:	72 28       	jnc	$+230    	;abs 0x4b30
    4a4c:	30 2c       	jc	$+98     	;abs 0x4aae
    4a4e:	31 32       	jn	$-924    	;abs 0x46b2
    4a50:	29 00 61 6e 	mova	&0x06e61,r9	
}
    4a54:	61 6c       	addc.b	@r12,	r1	
    4a56:	6f 67       	addc.b	@r7,	r15	
    4a58:	5f 72 65 66 	subc.b	&0x6665,r15	
    4a5c:	72 65       	addc.b	@r5+,	r2	

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    4a5e:	73 68       	.word	0x6873;	????	Illegal as 2-op instr
    4a60:	5f 61 6c 6c 	addc.b	27756(r1),r15	;0x6c6c(r1)
    4a64:	3a 46       	mov	@r6+,	r10	
    4a66:	28 30       	jn	$+82     	;abs 0x4ab8
    4a68:	2c 32       	jn	$-934    	;abs 0x46c2
    int channel_num = 0, PPM_ch_counter;
    4a6a:	30 29       	jnc	$+610    	;abs 0x4ccc
    4a6c:	00 61       	addc	r1,	r0	
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    4a6e:	6e 61       	addc.b	@r1,	r14	
    4a70:	6c 6f       	addc.b	@r15,	r12	
            if(!(P1IES & PPM_ch_counter)){ // low to high
    4a72:	67 5f       	add.b	@r15,	r7	
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
    4a74:	72 65       	addc.b	@r5+,	r2	
    4a76:	66 72       	subc.b	#4,	r6	;r2 As==10
    4a78:	65 73       	subc.b	#2,	r5	;r3 As==10
    4a7a:	68 5f       	add.b	@r15,	r8	
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
    4a7c:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
    4a7e:	61 6e       	addc.b	@r14,	r1	
    4a80:	6e 65       	addc.b	@r5,	r14	
    4a82:	6c 3a       	jl	$-806    	;abs 0x475c
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
    4a84:	46 28       	jnc	$+142    	;abs 0x4b12
    4a86:	30 2c       	jc	$+98     	;abs 0x4ae8
                else{ // se nao deu overflow na contagem do timer
    4a88:	32 30       	jn	$+102    	;abs 0x4aee
    4a8a:	29 00 41 6e 	mova	&0x06e41,r9	
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
    4a8e:	61 6c       	addc.b	@r12,	r1	
    4a90:	6f 67       	addc.b	@r7,	r15	
    4a92:	4f 66       	addc.b	r6,	r15	
    4a94:	66 73       	subc.b	#2,	r6	;r3 As==10
    4a96:	65 74       	subc.b	@r4,	r5	
    4a98:	3a 47       	mov	@r7+,	r10	
    4a9a:	28 31       	jn	$+594    	;abs 0x4cec
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}
    4a9c:	2c 33       	jn	$-422    	;abs 0x48f6
    4a9e:	29 3d       	jmp	$+596    	;abs 0x4cf2
    4aa0:	61 72       	subc.b	#4,	r1	;r2 As==10
    4aa2:	28 39       	jl	$+594    	;abs 0x4cf4
    4aa4:	2c 37       	jge	$-422    	;abs 0x48fe
    4aa6:	29 3b       	jl	$-428    	;abs 0x48fa
    4aa8:	30 3b       	jl	$-414    	;abs 0x490a
    4aaa:	37 3b       	jl	$-400    	;abs 0x491a

    4aac:	28 30       	jn	$+82     	;abs 0x4afe
    4aae:	2c 31       	jn	$+602    	;abs 0x4d08
    4ab0:	29 00 41 6e 	mova	&0x06e41,r9	
    4ab4:	61 6c       	addc.b	@r12,	r1	
    4ab6:	6f 67       	addc.b	@r7,	r15	
    4ab8:	56 61 6c 75 	addc.b	30060(r1),r6	;0x756c(r1)
void calibrate_radio(void){
    4abc:	65 3a       	jl	$-820    	;abs 0x4788
    4abe:	47 28       	jnc	$+144    	;abs 0x4b4e
    4ac0:	31 2c       	jc	$+100    	;abs 0x4b24
    4ac2:	33 29       	jnc	$+616    	;abs 0x4d2a
    4ac4:	00 63       	adc	r0		
    4ac6:	3a 5c       	add	@r12+,	r10	
    
    4ac8:	77 6f       	addc.b	@r15+,	r7	
    4aca:	72 6b       	addc.b	@r11+,	r2	
    4acc:	5c 6d 73 70 	addc.b	28787(r13),r12	;0x7073(r13)
    4ad0:	67 63       	addc.b	#2,	r7	;r3 As==10
    4ad2:	63 5c       	.word	0x5c63;	????	Illegal as 2-op instr
    4ad4:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    4ad6:	5c 70 61 63 	subc.b	0x6361,	r12	;PC rel. 0x0ae3b
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    4ada:	6b 61       	addc.b	@r1,	r11	
    4adc:	67 69       	addc.b	@r9,	r7	
    4ade:	6e 67       	addc.b	@r7,	r14	
    4ae0:	5c 62 75 69 	addc.b	&0x6975,r12	
    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4ae4:	6c 64       	addc.b	@r4,	r12	
    4ae6:	5c 67 63 63 	addc.b	25443(r7),r12	;0x6363(r7)
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    4aea:	2d 33       	jn	$-420    	;abs 0x4946
    4aec:	2e 32       	jn	$-930    	;abs 0x474a
    4aee:	2e 33       	jn	$-418    	;abs 0x494c
    4af0:	5c 67 63 63 	addc.b	25443(r7),r12	;0x6363(r7)
    4af4:	2f 00 6c 69 	mova	&0x0696c,r15	
    
    4af8:	62 67       	addc.b	@r7,	r2	
    4afa:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    lcd_goto(2,5);
    color_fore = RED;
    4afc:	32 2e       	jc	$-922    	;abs 0x4762
    4afe:	63 00 74 63 	mova	r0,	&0x36374
    printf("MOVE STICKS\nALL DIRECTIONS");
    4b02:	6f 6e       	addc.b	@r14,	r15	
    4b04:	66 69       	addc.b	@r9,	r6	
    4b06:	67 2e       	jc	$-816    	;abs 0x47d6
    4b08:	68 00 72 74 	mova	r0,	&0x87472
    4b0c:	78 3a       	jl	$-782    	;abs 0x47fe

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    
    4b0e:	74 28       	jnc	$+234    	;abs 0x4bf8
    4b10:	32 2c       	jc	$+102    	;abs 0x4b76
    4b12:	31 29       	jnc	$+612    	;abs 0x4d76
    4b14:	3d 28       	jnc	$+124    	;abs 0x4b90
    4b16:	32 2c       	jc	$+102    	;abs 0x4b7c
    4b18:	32 29       	jnc	$+614    	;abs 0x4d7e
    4b1a:	3d 2a       	jnc	$-900    	;abs 0x4796
    4b1c:	28 32       	jn	$-942    	;abs 0x476e
    4b1e:	2c 33       	jn	$-422    	;abs 0x4978
    lcd_goto(2,5);
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);
    4b20:	29 3d       	jmp	$+596    	;abs 0x4d74
    4b22:	78 73       	subc.b	#-1,	r8	;r3 As==11
    4b24:	72 74       	subc.b	@r4+,	r2	
    4b26:	78 5f       	add.b	@r15+,	r8	
    4b28:	64 65       	addc.b	@r5,	r4	

    4b2a:	66 3a       	jl	$-818    	;abs 0x47f8
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4b2c:	00 72       	subc	r2,	r0	
    4b2e:	74 76       	subc.b	@r6+,	r4	
    4b30:	65 63       	addc.b	#2,	r5	;r3 As==10
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
    4b32:	3a 74       	subc	@r4+,	r10	
    4b34:	28 32       	jn	$-942    	;abs 0x4786
    4b36:	2c 34       	jge	$+90     	;abs 0x4b90
    4b38:	29 3d       	jmp	$+596    	;abs 0x4d8c
    4b3a:	28 32       	jn	$-942    	;abs 0x478c
    4b3c:	2c 35       	jge	$+602    	;abs 0x4d96
    4b3e:	29 3d       	jmp	$+596    	;abs 0x4d92
        PPMSlope[i] = 1;
    }

    4b40:	2a 28       	jnc	$+86     	;abs 0x4b96
    4b42:	32 2c       	jc	$+102    	;abs 0x4ba8
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    4b44:	36 29       	jnc	$+622    	;abs 0x4db2
    4b46:	3d 78       	subc	@r8+,	r13	
    4b48:	73 72       	.word	0x7273;	????	Illegal as 2-op instr
    4b4a:	74 76       	subc.b	@r6+,	r4	
    4b4c:	65 63       	addc.b	#2,	r5	;r3 As==10
    4b4e:	5f 64 65 66 	addc.b	26213(r4),r15	;0x6665(r4)
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
    4b52:	3a 00 74 72 	mova	0x7274,	r10	;PC rel. 0x0bdc8
    4b56:	65 65       	addc.b	@r5,	r5	
    4b58:	3a 74       	subc	@r4+,	r10	
    4b5a:	28 32       	jn	$-942    	;abs 0x47ac
    4b5c:	2c 37       	jge	$-422    	;abs 0x49b6
    4b5e:	29 3d       	jmp	$+596    	;abs 0x4db2
    4b60:	28 32       	jn	$-942    	;abs 0x47b2
    4b62:	2c 38       	jl	$+90     	;abs 0x4bbc
    4b64:	29 3d       	jmp	$+596    	;abs 0x4db8
    4b66:	2a 28       	jnc	$+86     	;abs 0x4bbc
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
    4b68:	32 2c       	jc	$+102    	;abs 0x4bce
    4b6a:	39 29       	jnc	$+628    	;abs 0x4dde
        for(i = 0; i < 8; i++){ // pega max min
    4b6c:	3d 78       	subc	@r8+,	r13	
    4b6e:	75 74       	subc.b	@r4+,	r5	
    4b70:	72 65       	addc.b	@r5+,	r2	
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    4b72:	65 5f       	add.b	@r15,	r5	
    4b74:	6e 6f       	addc.b	@r15,	r14	
    4b76:	64 65       	addc.b	@r5,	r4	

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    4b78:	3a 00 2e 2e 	mova	0x2e2e,	r10	;PC rel. 0x079a8
    for(k = 120; k > 0; k--){
    4b7c:	2f 69       	addc	@r9,	r15	
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    4b7e:	6e 63       	addc.b	#2,	r14	;r3 As==10
    4b80:	6c 75       	subc.b	@r5,	r12	
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
    4b82:	64 65       	addc.b	@r5,	r4	
    4b84:	2f 61       	addc	@r1,	r15	
                PPMMin[i] = PPMValue[i];
            }
    4b86:	6e 73       	subc.b	#2,	r14	;r3 As==10
    4b88:	69 64       	addc.b	@r4,	r9	
    4b8a:	65 63       	addc.b	#2,	r5	;r3 As==10
    4b8c:	6c 2e       	jc	$-806    	;abs 0x4866
    4b8e:	68 00 63 6f 	mova	r0,	&0x86f63
    4b92:	6e 66       	addc.b	@r6,	r14	
    4b94:	69 67       	addc.b	@r7,	r9	
    4b96:	2f 69       	addc	@r9,	r15	
    4b98:	33 38       	jl	$+104    	;abs 0x4c00
    4b9a:	36 2f       	jc	$-402    	;abs 0x4a08
    4b9c:	78 6d       	addc.b	@r13+,	r8	
    4b9e:	2d 6d       	addc	@r13,	r13	
    4ba0:	69 6e       	addc.b	@r14,	r9	
    4ba2:	67 77       	subc.b	@r7,	r7	
    4ba4:	33 32       	jn	$-920    	;abs 0x480c
    4ba6:	2e 68       	addc	@r8,	r14	
    4ba8:	00 63       	adc	r0		
    4baa:	6f 6e       	addc.b	@r14,	r15	
    4bac:	66 69       	addc.b	@r9,	r6	
        }
    4bae:	67 2f       	jc	$-304    	;abs 0x4a7e
    4bb0:	6d 73       	subc.b	#2,	r13	;r3 As==10
    4bb2:	70 34       	jge	$+226    	;abs 0x4c94
    4bb4:	33 30       	jn	$+104    	;abs 0x4c1c
    4bb6:	2f 6d       	addc	@r13,	r15	
    4bb8:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    4bba:	34 33       	jn	$-406    	;abs 0x4a24
    4bbc:	30 2e       	jc	$-926    	;abs 0x481e
    4bbe:	68 00 72 65 	mova	r0,	&0x86572
    4bc2:	67 5f       	add.b	@r15,	r7	
    4bc4:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    4bc6:	61 73       	subc.b	#2,	r1	;r3 As==10
    4bc8:	73 3a       	jl	$-792    	;abs 0x48b0
    4bca:	54 28       	jnc	$+170    	;abs 0x4c74
    4bcc:	35 2c       	jc	$+108    	;abs 0x4c38
    }
    4bce:	31 29       	jnc	$+612    	;abs 0x4e32
    4bd0:	3d 65       	addc	@r5+,	r13	
    4bd2:	4e 4f       	mov.b	r15,	r14	
    4bd4:	5f 52 45 47 	add.b	&0x4745,r15	
    4bd8:	53 3a       	jl	$-856    	;abs 0x4880
    4bda:	30 2c       	jc	$+98     	;abs 0x4c3c
    
    4bdc:	50 43       	br	#1		;r3 As==01
    4bde:	5f 52 45 47 	add.b	&0x4745,r15	
    4be2:	3a 31       	jn	$+630    	;abs 0x4e58
    4be4:	2c 53       	incd	r12		
    4be6:	50 5f 52 45 	add.b	17746(r15),r0	;0x4552(r15)
    4bea:	47 3a       	jl	$-880    	;abs 0x487a
    4bec:	32 2c       	jc	$+102    	;abs 0x4c52
    4bee:	53 54       	.word	0x5453;	????	Illegal as 2-op instr
    4bf0:	41 43       	clr.b	r1		
    lcd_clear(BLACK);
    4bf2:	4b 5f       	add.b	r15,	r11	
    4bf4:	52 45 47 53 	mov.b	21319(r5),r2	;0x5347(r5)
    4bf8:	3a 33       	jn	$-394    	;abs 0x4a6e
    4bfa:	2c 43       	mov	#2,	r12	;r3 As==10
    4bfc:	47 31       	jn	$+656    	;abs 0x4e8c
    4bfe:	5f 52 45 47 	add.b	&0x4745,r15	
    4c02:	3a 34       	jge	$+118    	;abs 0x4c78
/*
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
    4c04:	2c 43       	mov	#2,	r12	;r3 As==10
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE

MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

    4c06:	47 32       	jn	$-880    	;abs 0x4896
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    4c08:	5f 52 45 47 	add.b	&0x4745,r15	
    4c0c:	3a 35       	jge	$+630    	;abs 0x4e82
    4c0e:	2c 43       	mov	#2,	r12	;r3 As==10
    4c10:	47 5f       	add.b	r15,	r7	
    4c12:	52 45 47 53 	mov.b	21319(r5),r2	;0x5347(r5)
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    4c16:	3a 36       	jge	$-906    	;abs 0x488c

// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4c18:	2c 47       	mov	@r7,	r12	
    4c1a:	45 4e       	mov.b	r14,	r5	
    4c1c:	45 52       	add.b	r2,	r5	

int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    4c1e:	41 4c       	mov.b	r12,	r1	
    4c20:	5f 52 45 47 	add.b	&0x4745,r15	
    4c24:	53 3a       	jl	$-856    	;abs 0x48cc
    4c26:	37 2c       	jc	$+112    	;abs 0x4c96
    4c28:	50 4f 49 4e 	br	20041(r15)	;0x4e49(r15)
    4c2c:	54 45 52 5f 	mov.b	24402(r5),r4	;0x5f52(r5)
    4c30:	52 45 47 53 	mov.b	21319(r5),r2	;0x5347(r5)

    4c34:	3a 38       	jl	$+118    	;abs 0x4caa
    4c36:	2c 46       	mov	@r6,	r12	
    4c38:	46 4f       	mov.b	r15,	r6	
    4c3a:	55 52 5f 52 	add.b	&0x525f,r5	
    4c3e:	45 47       	mov.b	r7,	r5	
    4c40:	3a 39       	jl	$+630    	;abs 0x4eb6
    4c42:	2c 41       	mov	@r1,	r12	
    4c44:	4c 4c       	mov.b	r12,	r12	
    4c46:	5f 52 45 47 	add.b	&0x4745,r15	

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 
    4c4a:	53 3a       	jl	$-856    	;abs 0x48f2

    4c4c:	31 30       	jn	$+100    	;abs 0x4cb0
// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()

    4c4e:	2c 4c       	mov	@r12,	r12	
    4c50:	49 4d       	mov.b	r13,	r9	
    4c52:	5f 52 45 47 	add.b	&0x4745,r15	
// variaveis leitura radio raw
    4c56:	5f 43       	mov.b	#1,	r15	;r3 As==01
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    4c58:	4c 41       	mov.b	r1,	r12	
    4c5a:	53 53       	inc.b	#0		;r3 As==00
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    4c5c:	45 53       	add.b	#0,	r5	;r3 As==00
    4c5e:	3a 31       	jn	$+630    	;abs 0x4ed4
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4c60:	31 2c       	jc	$+100    	;abs 0x4cc4

int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    4c62:	3b 00 6d 73 	mova	0x736d,	r11	;PC rel. 0x0bfd1
    INICIO: //loop main, vir para ca no caso de um reset
    4c66:	70 34       	jge	$+226    	;abs 0x4d48
    4c68:	33 30       	jn	$+104    	;abs 0x4cd0
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    4c6a:	5f 61 72 67 	addc.b	26482(r1),r15	;0x6772(r1)

    4c6e:	73 3a       	jl	$-792    	;abs 0x4956
    4c70:	54 28       	jnc	$+170    	;abs 0x4d1a
    lcd_clear(BLACK);
    
    4c72:	35 2c       	jc	$+108    	;abs 0x4cde
    4c74:	32 29       	jnc	$+614    	;abs 0x4eda
    MenuOption = RADIO_RAW;
    4c76:	3d 73       	subc	#-1,	r13	;r3 As==11
    4c78:	34 6e       	addc	@r14+,	r4	
    MenuStep = DISPLAY;
    4c7a:	72 65       	addc.b	@r5+,	r2	
    4c7c:	67 73       	subc.b	#2,	r7	;r3 As==10
    MenuVisible = TRUE;     // inicializa mostrando o menu
    4c7e:	3a 28       	jnc	$+118    	;abs 0x4cf4
    4c80:	30 2c       	jc	$+98     	;abs 0x4ce2
        
    4c82:	31 29       	jnc	$+612    	;abs 0x4ee6
    while(1){
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
    4c84:	2c 30       	jn	$+90     	;abs 0x4cde
    4c86:	2c 31       	jn	$+602    	;abs 0x4ee0
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
    4c88:	36 3b       	jl	$-402    	;abs 0x4af6
    4c8a:	72 65       	addc.b	@r5+,	r2	
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
    4c8c:	67 6e       	addc.b	@r14,	r7	
    4c8e:	6f 3a       	jl	$-800    	;abs 0x496e
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
    4c90:	28 30       	jn	$+82     	;abs 0x4ce2
    4c92:	2c 31       	jn	$+602    	;abs 0x4eec
        P1 completa. */
    4c94:	29 2c       	jc	$+84     	;abs 0x4ce8
    4c96:	31 36       	jge	$-924    	;abs 0x48fa
        if(MotorArmed == TRUE){
    4c98:	2c 31       	jn	$+602    	;abs 0x4ef2
    4c9a:	36 3b       	jl	$-402    	;abs 0x4b08
            if(ControlCounter >= CONTROL_PERIOD){
    4c9c:	3b 00 43 55 	mova	0x5543,	r11	;PC rel. 0x0a1e1
                main_loop();
                ControlCounter = 0;
            }
        }
        
        if(SetupDone == TRUE){
    4ca0:	4d 55       	add.b	r5,	r13	
    4ca2:	4c 41       	mov.b	r1,	r12	
            if(RCCounter >= RC_PERIOD){
    4ca4:	54 49 56 45 	mov.b	17750(r9),r4	;0x4556(r9)
                process_rc();
    4ca8:	5f 41 52 47 	mov.b	18258(r1),r15	;0x4752(r1)
                RCCounter = 0;
    4cac:	53 3a       	jl	$-856    	;abs 0x4954
    4cae:	74 28       	jnc	$+234    	;abs 0x4d98
            }
    4cb0:	35 2c       	jc	$+108    	;abs 0x4d1c
    4cb2:	33 29       	jnc	$+616    	;abs 0x4f1a
    4cb4:	3d 28       	jnc	$+124    	;abs 0x4d30
    4cb6:	35 2c       	jc	$+108    	;abs 0x4d22
    4cb8:	32 29       	jnc	$+614    	;abs 0x4f1e
    4cba:	00 63       	adc	r0		
        }
    4cbc:	6f 6e       	addc.b	@r14,	r15	
    4cbe:	66 69       	addc.b	@r9,	r6	
    
    4cc0:	67 2f       	jc	$-304    	;abs 0x4b90
    4cc2:	64 62       	addc.b	#4,	r4	;r2 As==10
        if(MenuVisible == TRUE){
    4cc4:	78 65       	addc.b	@r5+,	r8	
    4cc6:	6c 66       	addc.b	@r6,	r12	
            if(MenuCounter >= MENU_PERIOD){
    4cc8:	2e 68       	addc	@r8,	r14	
    4cca:	00 64       	addc	r4,	r0	
    4ccc:	65 66       	addc.b	@r6,	r5	
                process_menu();
                MenuCounter = 0;   
    4cce:	61 75       	subc.b	@r5,	r1	
            }
    4cd0:	6c 74       	subc.b	@r4,	r12	
    4cd2:	73 2e       	jc	$-792    	;abs 0x49ba
        }
        else{
            if(ChannelInput[CH6_CH] > 3500){
                MenuVisible = TRUE;
    4cd4:	68 00 74 73 	mova	r0,	&0x87374
    4cd8:	79 73       	subc.b	#-1,	r9	;r3 As==11
                MotorArmed = FALSE;
    4cda:	74 65       	addc.b	@r5+,	r4	
    4cdc:	6d 2e       	jc	$-804    	;abs 0x49b8
    4cde:	68 00 63 3a 	mova	r0,	&0x83a63
    4ce2:	2f 77       	subc	@r7,	r15	
    4ce4:	6f 72       	subc.b	#4,	r15	;r2 As==10
    4ce6:	6b 2f       	jc	$-296    	;abs 0x4bbe
            }
    4ce8:	6d 73       	subc.b	#2,	r13	;r3 As==10
    4cea:	70 67       	addc.b	@r7+,	r0	
        }
    4cec:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    4cee:	2f 73       	subc	#2,	r15	;r3 As==10
    }
    4cf0:	66 2f       	jc	$-306    	;abs 0x4bbe
    4cf2:	70 61       	addc.b	@r1+,	r0	
}
    4cf4:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr
    4cf6:	61 67       	addc.b	@r7,	r1	

    4cf8:	69 6e       	addc.b	@r14,	r9	
    4cfa:	67 2f       	jc	$-304    	;abs 0x4bca
void process_menu(void){
    4cfc:	62 75       	subc.b	@r5,	r2	
    switch(MenuStep){
        case DISPLAY:
            lcd_goto(0,14);
    4cfe:	69 6c       	addc.b	@r12,	r9	
    4d00:	64 2f       	jc	$-310    	;abs 0x4bca
    4d02:	67 63       	addc.b	#2,	r7	;r3 As==10
    4d04:	63 2d       	jc	$+712    	;abs 0x4fcc
            printf("DISPLAY             ");
    4d06:	33 2e       	jc	$-920    	;abs 0x496e
    4d08:	32 2e       	jc	$-922    	;abs 0x496e
            
            lcd_clear(BLACK);
            lcd_goto(0,0);
    4d0a:	33 2f       	jc	$-408    	;abs 0x4b72
    4d0c:	67 63       	addc.b	#2,	r7	;r3 As==10
    4d0e:	63 2f       	jc	$-312    	;abs 0x4bd6
            printf("   MAIN MENU\n\n");
    4d10:	69 6e       	addc.b	@r14,	r9	
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
            MenuStep = SELECT;
    4d12:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    4d14:	75 64       	addc.b	@r4+,	r5	
    4d16:	65 2f       	jc	$-308    	;abs 0x4be2
    4d18:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    4d1a:	64 64       	addc.b	@r4,	r4	
    4d1c:	65 66       	addc.b	@r6,	r5	
    4d1e:	2e 68       	addc	@r8,	r14	
    4d20:	00 70       	subc	r0,	r0	
            break;
    4d22:	74 72       	subc.b	#8,	r4	;r2 As==11
    4d24:	64 69       	addc.b	@r9,	r4	
        
    4d26:	66 66       	addc.b	@r6,	r6	
    4d28:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
        case SELECT: // fica neste step a maior parte do tempo
    4d2c:	28 39       	jl	$+594    	;abs 0x4f7e
            lcd_goto(0,14);
    4d2e:	2c 31       	jn	$+602    	;abs 0x4f88
    4d30:	29 3d       	jmp	$+596    	;abs 0x4f84
            printf("SELECT            ");
    4d32:	28 30       	jn	$+82     	;abs 0x4d84
    4d34:	2c 31       	jn	$+602    	;abs 0x4f8e
            
    4d36:	29 00 73 69 	mova	&0x06973,r9	
            lcd_goto(0,14);
            printf("DISPLAY             ");
            
            lcd_clear(BLACK);
            lcd_goto(0,0);
            printf("   MAIN MENU\n\n");
    4d3a:	7a 65       	addc.b	@r5+,	r10	
    4d3c:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
            printf("SELECT            ");
            
            lcd_goto(0,(int)MenuOption + 2);
            printf(">");
    4d40:	28 39       	jl	$+594    	;abs 0x4f92
    4d42:	2c 32       	jn	$-934    	;abs 0x499c
    4d44:	29 3d       	jmp	$+596    	;abs 0x4f98
    4d46:	28 30       	jn	$+82     	;abs 0x4d98
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    4d48:	2c 34       	jge	$+90     	;abs 0x4da2
    4d4a:	29 00 77 63 	mova	&0x06377,r9	
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    4d4e:	68 61       	addc.b	@r1,	r8	
    4d50:	72 5f       	add.b	@r15+,	r2	
                    MenuStep = WAIT_PITCH_UP;
    4d52:	74 3a       	jl	$-790    	;abs 0x4a3c
                }
            }
    4d54:	74 28       	jnc	$+234    	;abs 0x4e3e
            
    4d56:	39 2c       	jc	$+116    	;abs 0x4dca
    4d58:	33 29       	jnc	$+616    	;abs 0x4fc0
            // select
    4d5a:	3d 28       	jnc	$+124    	;abs 0x4dd6
    4d5c:	30 2c       	jc	$+98     	;abs 0x4dbe
            if(ChannelInput[ROLL_CH] > 3500){
    4d5e:	31 29       	jnc	$+612    	;abs 0x4fc2
    4d60:	00 6c       	addc	r12,	r0	
    4d62:	69 62       	addc.b	#4,	r9	;r2 As==10
    4d64:	67 63       	addc.b	#2,	r7	;r3 As==10
                MenuStep = WAIT_ROLL_LEFT;
    4d66:	63 32       	jn	$-824    	;abs 0x4a2e
    4d68:	2e 68       	addc	@r8,	r14	
            }
    4d6a:	00 51       	add	r1,	r0	
    4d6c:	49 74       	subc.b	r4,	r9	
            
    4d6e:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuStep = WAIT_PITCH_UP;
    4d72:	74 28       	jnc	$+234    	;abs 0x4e5c
    4d74:	31 30       	jn	$+100    	;abs 0x4dd8
    4d76:	2c 31       	jn	$+602    	;abs 0x4fd0
                MenuStep = WAIT_ROLL_LEFT;
            }
            
            break;
        
        case WAIT_PITCH_DOWN:
    4d78:	29 3d       	jmp	$+596    	;abs 0x4fcc
            lcd_goto(0,14);
    4d7a:	28 30       	jn	$+82     	;abs 0x4dcc
    4d7c:	2c 31       	jn	$+602    	;abs 0x4fd6
    4d7e:	30 29       	jnc	$+610    	;abs 0x4fe0
            if(ChannelInput[PITCH_CH] > 2500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
    4d80:	00 55       	add	r5,	r0	
                MenuStep = SELECT;
            }
            break;
    4d82:	51 49 74 79 	mov.b	31092(r9),r1	;0x7974(r9)
        
    4d86:	70 65       	addc.b	@r5+,	r0	
    4d88:	3a 74       	subc	@r4+,	r10	
    4d8a:	28 31       	jn	$+594    	;abs 0x4fdc
    4d8c:	30 2c       	jc	$+98     	;abs 0x4dee
        case WAIT_PITCH_UP:
    4d8e:	32 29       	jnc	$+614    	;abs 0x4ff4
    4d90:	3d 28       	jnc	$+124    	;abs 0x4e0c
    4d92:	30 2c       	jc	$+98     	;abs 0x4df4
            lcd_goto(0,14);
    4d94:	31 31       	jn	$+612    	;abs 0x4ff8
    4d96:	29 00 48 49 	mova	&0x04948,r9	
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
    4d9a:	74 79       	subc.b	@r9+,	r4	
    4d9c:	70 65       	addc.b	@r5+,	r0	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    4d9e:	3a 74       	subc	@r4+,	r10	
    4da0:	28 31       	jn	$+594    	;abs 0x4ff2
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    4da2:	30 2c       	jc	$+98     	;abs 0x4e04
    4da4:	33 29       	jnc	$+616    	;abs 0x500c
            }
    4da6:	3d 28       	jnc	$+124    	;abs 0x4e22
    4da8:	30 2c       	jc	$+98     	;abs 0x4e0a
    4daa:	31 29       	jnc	$+612    	;abs 0x500e
            break;
    4dac:	00 55       	add	r5,	r0	
    4dae:	48 49       	mov.b	r9,	r8	
    4db0:	74 79       	subc.b	@r9+,	r4	
        
    4db2:	70 65       	addc.b	@r5+,	r0	
    4db4:	3a 74       	subc	@r4+,	r10	
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    4db6:	28 31       	jn	$+594    	;abs 0x5008
            printf("WAIT ROLL LEFT    ");
    4db8:	30 2c       	jc	$+98     	;abs 0x4e1a
    4dba:	34 29       	jnc	$+618    	;abs 0x5024
            
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
    4dbc:	3d 28       	jnc	$+124    	;abs 0x4e38
    4dbe:	30 2c       	jc	$+98     	;abs 0x4e20
    4dc0:	34 29       	jnc	$+618    	;abs 0x502a
    4dc2:	00 53       	add	#0,	r0	;r3 As==00
    4dc4:	49 74       	subc.b	r4,	r9	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
    4dc6:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
            break;
    4dca:	74 28       	jnc	$+234    	;abs 0x4eb4
    4dcc:	31 30       	jn	$+100    	;abs 0x4e30
    4dce:	2c 35       	jge	$+602    	;abs 0x5028
    4dd0:	29 3d       	jmp	$+596    	;abs 0x5024
            
    4dd2:	28 30       	jn	$+82     	;abs 0x4e24
    4dd4:	2c 33       	jn	$-422    	;abs 0x4c2e
    4dd6:	29 00 55 53 	mova	&0x05355,r9	
        case WAIT_CH7_BACK:
    4dda:	49 74       	subc.b	r4,	r9	
    4ddc:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
            lcd_goto(0,14);
    4de0:	74 28       	jnc	$+234    	;abs 0x4eca
    4de2:	31 30       	jn	$+100    	;abs 0x4e46
            printf("WAIT CH7 BACK    ");
    4de4:	2c 36       	jge	$-934    	;abs 0x4a3e
    4de6:	29 3d       	jmp	$+596    	;abs 0x503a
    4de8:	28 30       	jn	$+82     	;abs 0x4e3a
            
    4dea:	2c 35       	jge	$+602    	;abs 0x5044
    4dec:	29 00 44 49 	mova	&0x04944,r9	
            if(ChannelInput[CH7_CH] < 2500){
    4df0:	74 79       	subc.b	@r9+,	r4	
    4df2:	70 65       	addc.b	@r5+,	r0	
                MenuStep = DISPLAY;
            }
    4df4:	3a 74       	subc	@r4+,	r10	
            break;
    4df6:	28 31       	jn	$+594    	;abs 0x5048
    4df8:	30 2c       	jc	$+98     	;abs 0x4e5a
    4dfa:	37 29       	jnc	$+624    	;abs 0x506a
    4dfc:	3d 28       	jnc	$+124    	;abs 0x4e78
                    
        case PROCESS_OPTION:
            process_option();
    4dfe:	30 2c       	jc	$+98     	;abs 0x4e60
    4e00:	36 29       	jnc	$+622    	;abs 0x506e
    4e02:	00 55       	add	r5,	r0	
    4e04:	44 49       	mov.b	r9,	r4	
    4e06:	74 79       	subc.b	@r9+,	r4	
    4e08:	70 65       	addc.b	@r5+,	r0	
    4e0a:	3a 74       	subc	@r4+,	r10	
    4e0c:	28 31       	jn	$+594    	;abs 0x505e
            break;
    4e0e:	30 2c       	jc	$+98     	;abs 0x4e70
            
        case WAIT_ROLL_RIGHT:
    4e10:	38 29       	jnc	$+626    	;abs 0x5082
    4e12:	3d 28       	jnc	$+124    	;abs 0x4e8e
            break;    
    4e14:	30 2c       	jc	$+98     	;abs 0x4e76
    4e16:	37 29       	jnc	$+624    	;abs 0x5086
    4e18:	00 53       	add	#0,	r0	;r3 As==00
    4e1a:	46 74       	subc.b	r4,	r6	
    }
    4e1c:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    4e20:	74 28       	jnc	$+234    	;abs 0x4f0a
}
    4e22:	31 30       	jn	$+100    	;abs 0x4e86
    4e24:	2c 39       	jl	$+602    	;abs 0x507e
    4e26:	29 3d       	jmp	$+596    	;abs 0x507a

    4e28:	28 30       	jn	$+82     	;abs 0x4e7a
    4e2a:	2c 31       	jn	$+602    	;abs 0x5084
    4e2c:	32 29       	jnc	$+614    	;abs 0x5092
void process_option(){
    4e2e:	00 44       	br	r4		
    4e30:	46 74       	subc.b	r4,	r6	
    4e32:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    int i;
    switch (MenuOption){
    4e36:	74 28       	jnc	$+234    	;abs 0x4f20
    4e38:	31 30       	jn	$+100    	;abs 0x4e9c
    4e3a:	2c 31       	jn	$+602    	;abs 0x5094
    4e3c:	30 29       	jnc	$+610    	;abs 0x509e
    4e3e:	3d 28       	jnc	$+124    	;abs 0x4eba
        case RADIO_RAW:
    4e40:	30 2c       	jc	$+98     	;abs 0x4ea2
    4e42:	31 32       	jn	$-924    	;abs 0x4aa6
    4e44:	29 00 77 6f 	mova	&0x06f77,r9	
    4e48:	72 64       	addc.b	@r4+,	r2	
    4e4a:	5f 74 79 70 	subc.b	28793(r4),r15	;0x7079(r4)
            draw_rc_inputs(1);
            break;
    4e4e:	65 3a       	jl	$-820    	;abs 0x4b1a
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
    4e50:	74 28       	jnc	$+234    	;abs 0x4f3a
        case ANALOG_MONITOR:
    4e52:	31 30       	jn	$+100    	;abs 0x4eb6
    4e54:	2c 31       	jn	$+602    	;abs 0x50ae
    4e56:	31 29       	jnc	$+612    	;abs 0x50ba
    4e58:	3d 28       	jnc	$+124    	;abs 0x4ed4
    4e5a:	30 2c       	jc	$+98     	;abs 0x4ebc
    4e5c:	31 29       	jnc	$+612    	;abs 0x50c0
            process_analog_menu();
            break;
        
    4e5e:	00 44       	br	r4		
    4e60:	57 73       	subc.b	#1,	r7	;r3 As==01
    4e62:	74 72       	subc.b	#8,	r4	;r2 As==11
    4e64:	75 63       	addc.b	#-1,	r5	;r3 As==11
    4e66:	74 3a       	jl	$-790    	;abs 0x4b50
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    4e68:	54 28       	jnc	$+170    	;abs 0x4f12
    4e6a:	31 30       	jn	$+100    	;abs 0x4ece
                lcd_goto(8,8);
    4e6c:	2c 31       	jn	$+602    	;abs 0x50c6
    4e6e:	32 29       	jnc	$+614    	;abs 0x50d4
    4e70:	3d 73       	subc	#-1,	r13	;r3 As==11
    4e72:	38 6c       	addc	@r12+,	r8	
                printf("%d", i);
    4e74:	6f 77       	subc.b	@r7,	r15	
    4e76:	3a 28       	jnc	$+118    	;abs 0x4eec
    4e78:	31 30       	jn	$+100    	;abs 0x4edc
                delayms(1000);
    4e7a:	2c 35       	jge	$+602    	;abs 0x50d4
    4e7c:	29 2c       	jc	$+84     	;abs 0x4ed0
    4e7e:	30 2c       	jc	$+98     	;abs 0x4ee0
    4e80:	33 32       	jn	$-920    	;abs 0x4ae8
    4e82:	3b 68       	addc	@r8+,	r11	
            }
    4e84:	69 67       	addc.b	@r7,	r9	
    4e86:	68 3a       	jl	$-814    	;abs 0x4b58
    4e88:	28 31       	jn	$+594    	;abs 0x50da
            MotorArmed = TRUE;
    4e8a:	30 2c       	jc	$+98     	;abs 0x4eec
    4e8c:	35 29       	jnc	$+620    	;abs 0x50f8
    4e8e:	2c 33       	jn	$-422    	;abs 0x4ce8
    4e90:	32 2c       	jc	$+102    	;abs 0x4ef6
            MenuVisible = FALSE;
    4e92:	33 32       	jn	$-920    	;abs 0x4afa
    4e94:	3b 3b       	jl	$-392    	;abs 0x4d0c
    4e96:	00 44       	br	r4		
            lcd_clear(BLACK);
    4e98:	57 75 6e 69 	subc.b	26990(r5),r7	;0x696e(r5)
    4e9c:	6f 6e       	addc.b	@r14,	r15	
            MenuStep = DISPLAY;
    4e9e:	3a 74       	subc	@r4+,	r10	
    4ea0:	28 31       	jn	$+594    	;abs 0x50f2
    4ea2:	30 2c       	jc	$+98     	;abs 0x4f04
            break;
    4ea4:	31 33       	jn	$-412    	;abs 0x4d08
    4ea6:	29 3d       	jmp	$+596    	;abs 0x50fa
            
        case INITIAL_SETTINGS:
    4ea8:	28 31       	jn	$+594    	;abs 0x50fa
            // seta o flag initial setup
    4eaa:	30 2c       	jc	$+98     	;abs 0x4f0c
    4eac:	31 34       	jge	$+100    	;abs 0x4f10
    4eae:	29 3d       	jmp	$+596    	;abs 0x5102
    4eb0:	75 38       	jl	$+236    	;abs 0x4f9c
            break;          
    }
    
    4eb2:	73 3a       	jl	$-792    	;abs 0x4b9a
    4eb4:	28 31       	jn	$+594    	;abs 0x5106
    4eb6:	30 2c       	jc	$+98     	;abs 0x4f18
    4eb8:	31 32       	jn	$-924    	;abs 0x4b1c
    4eba:	29 2c       	jc	$+84     	;abs 0x4f0e
    4ebc:	30 2c       	jc	$+98     	;abs 0x4f1e
    4ebe:	36 34       	jge	$+110    	;abs 0x4f2c
    4ec0:	3b 6c       	addc	@r12+,	r11	
    if(ChannelInput[CH7_CH] > 3500){
    4ec2:	6c 3a       	jl	$-806    	;abs 0x4b9c
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    4ec4:	28 31       	jn	$+594    	;abs 0x5116
    4ec6:	30 2c       	jc	$+98     	;abs 0x4f28
        lcd_clear(BLACK);
    4ec8:	37 29       	jnc	$+624    	;abs 0x5138
    4eca:	2c 30       	jn	$+90     	;abs 0x4f24
    4ecc:	2c 36       	jge	$-934    	;abs 0x4b26
    4ece:	34 3b       	jl	$-406    	;abs 0x4d38
    }
    4ed0:	3b 00 6c 6f 	mova	0x6f6c,	r11	;PC rel. 0x0be3e
    4ed4:	6e 67       	addc.b	@r7,	r14	
}
    4ed6:	6c 6f       	addc.b	@r15,	r12	
    4ed8:	6e 67       	addc.b	@r7,	r14	
    4eda:	2e 68       	addc	@r8,	r14	
    4edc:	00 63       	adc	r0		
    4ede:	3a 2f       	jc	$-394    	;abs 0x4d54

    4ee0:	77 6f       	addc.b	@r15+,	r7	
    4ee2:	72 6b       	addc.b	@r11+,	r2	
    4ee4:	2f 6d       	addc	@r13,	r15	
void draw_analog_graph(void){
    4ee6:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    4ee8:	67 63       	addc.b	#2,	r7	;r3 As==10
    4eea:	63 2f       	jc	$-312    	;abs 0x4db2
    4eec:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    lcd_goto(4,4);
    4eee:	2f 70       	subc	@r0,	r15	
    4ef0:	61 63       	addc.b	#2,	r1	;r3 As==10
    4ef2:	6b 61       	addc.b	@r1,	r11	
    printf("FAZER");
    4ef4:	67 69       	addc.b	@r9,	r7	
    4ef6:	6e 67       	addc.b	@r7,	r14	
    4ef8:	2f 62       	addc	#4,	r15	;r2 As==10
}

    4efa:	75 69       	addc.b	@r9+,	r5	
    4efc:	6c 64       	addc.b	@r4,	r12	
    4efe:	2f 67       	addc	@r7,	r15	
    4f00:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    4f02:	2d 33       	jn	$-420    	;abs 0x4d5e
    4f04:	2e 32       	jn	$-930    	;abs 0x4b62
void process_analog_menu(void){
    4f06:	2e 33       	jn	$-418    	;abs 0x4d64
    4f08:	2f 67       	addc	@r7,	r15	
    4f0a:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    4f0c:	2f 69       	addc	@r9,	r15	
    4f0e:	6e 63       	addc.b	#2,	r14	;r3 As==10
    4f10:	6c 75       	subc.b	@r5,	r12	
    switch(MenuAnalog){
        case DISPLAY:
    4f12:	64 65       	addc.b	@r5,	r4	
    4f14:	2f 6c       	addc	@r12,	r15	
            lcd_goto(0,14);
            printf("DISPLAY             ");

    4f16:	69 6d       	addc.b	@r13,	r9	
            refresh_analog_menu();
    4f18:	69 74       	subc.b	@r4,	r9	
    4f1a:	73 2e       	jc	$-792    	;abs 0x4c02
    4f1c:	68 00 5f 5f 	mova	r0,	&0x85f5f
    4f20:	66 69       	addc.b	@r9,	r6	
    4f22:	78 75       	subc.b	@r5+,	r8	
            MenuAnalog = SELECT;
            break;
        case SELECT:
    4f24:	6e 73       	subc.b	#2,	r14	;r3 As==10
    4f26:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    4f28:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
    4f2a:	3a 46       	mov	@r6+,	r10	
    4f2c:	28 31       	jn	$+594    	;abs 0x517e
            lcd_goto(0,14);
            printf("SELECT            ");

    4f2e:	30 2c       	jc	$+98     	;abs 0x4f90
    4f30:	36 29       	jnc	$+622    	;abs 0x519e
            // move para os lados
    4f32:	00 61       	addc	r1,	r0	
    4f34:	3a 50 28 31 	add	#12584,	r10	;#0x3128
    4f38:	30 2c       	jc	$+98     	;abs 0x4f9a
            if(ChannelInput[ROLL_CH] > 3500){
    4f3a:	39 29       	jnc	$+628    	;abs 0x51ae
    4f3c:	00 66       	addc	r6,	r0	
    4f3e:	70 2d       	jc	$+738    	;abs 0x5220
                MenuAnalog = WAIT_ROLL_LEFT;
    4f40:	62 69       	addc.b	@r9,	r2	
    4f42:	74 2e       	jc	$-790    	;abs 0x4c2c
    4f44:	63 00 63 6f 	mova	r0,	&0x36f63
            }
    4f48:	6e 66       	addc.b	@r6,	r14	
    4f4a:	69 67       	addc.b	@r7,	r9	
            else{
    4f4c:	2f 66       	addc	@r6,	r15	
    4f4e:	70 2d       	jc	$+738    	;abs 0x5230
                if(ChannelInput[ROLL_CH] < 2500){
    4f50:	62 69       	addc.b	@r9,	r2	
    4f52:	74 2e       	jc	$-790    	;abs 0x4c3c
    4f54:	68 00 53 46 	mova	r0,	&0x84653
    4f58:	74 79       	subc.b	@r9+,	r4	
                    MenuAnalog = WAIT_ROLL_RIGHT;
    4f5a:	70 65       	addc.b	@r5+,	r0	
    4f5c:	3a 74       	subc	@r4+,	r10	
    4f5e:	28 38       	jl	$+82     	;abs 0x4fb0
                }
    4f60:	2c 31       	jn	$+602    	;abs 0x51ba
    4f62:	29 3d       	jmp	$+596    	;abs 0x51b6
    4f64:	28 30       	jn	$+82     	;abs 0x4fb6
    4f66:	2c 31       	jn	$+602    	;abs 0x51c0
            }
    4f68:	32 29       	jnc	$+614    	;abs 0x51ce
    4f6a:	00 44       	br	r4		
    4f6c:	46 74       	subc.b	r4,	r6	
            
    4f6e:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    4f72:	74 28       	jnc	$+234    	;abs 0x505c
                MenuAnalog = WAIT_PITCH_DOWN;
    4f74:	38 2c       	jc	$+114    	;abs 0x4fe6
    4f76:	32 29       	jnc	$+614    	;abs 0x51dc
    4f78:	3d 28       	jnc	$+124    	;abs 0x4ff4
    4f7a:	30 2c       	jc	$+98     	;abs 0x4fdc
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    4f7c:	31 32       	jn	$-924    	;abs 0x4be0
    4f7e:	29 00 48 49 	mova	&0x04948,r9	
    4f82:	74 79       	subc.b	@r9+,	r4	
    4f84:	70 65       	addc.b	@r5+,	r0	
    4f86:	3a 74       	subc	@r4+,	r10	
    4f88:	28 38       	jl	$+82     	;abs 0x4fda
    4f8a:	2c 33       	jn	$-422    	;abs 0x4de4
                    MenuAnalog = WAIT_PITCH_UP;
    4f8c:	29 3d       	jmp	$+596    	;abs 0x51e0
                }
            }
    4f8e:	28 30       	jn	$+82     	;abs 0x4fe0
    4f90:	2c 31       	jn	$+602    	;abs 0x51ea
            
    4f92:	29 00 53 49 	mova	&0x04953,r9	
    4f96:	74 79       	subc.b	@r9+,	r4	
    4f98:	70 65       	addc.b	@r5+,	r0	
            break;
    4f9a:	3a 74       	subc	@r4+,	r10	
    4f9c:	28 38       	jl	$+82     	;abs 0x4fee
    4f9e:	2c 34       	jge	$+90     	;abs 0x4ff8
        case WAIT_PITCH_DOWN:
    4fa0:	29 3d       	jmp	$+596    	;abs 0x51f4
    4fa2:	28 30       	jn	$+82     	;abs 0x4ff4
    4fa4:	2c 33       	jn	$-422    	;abs 0x4dfe
            lcd_goto(0,14);
    4fa6:	29 00 44 49 	mova	&0x04944,r9	
    4faa:	74 79       	subc.b	@r9+,	r4	
            printf("WAIT PITCH DOWN    ");
    4fac:	70 65       	addc.b	@r5+,	r0	
    4fae:	3a 74       	subc	@r4+,	r10	

    4fb0:	28 38       	jl	$+82     	;abs 0x5002
    4fb2:	2c 35       	jge	$+602    	;abs 0x520c
    4fb4:	29 3d       	jmp	$+596    	;abs 0x5208
    4fb6:	28 30       	jn	$+82     	;abs 0x5008
    4fb8:	2c 33       	jn	$-422    	;abs 0x4e12
            if(ChannelInput[PITCH_CH] > 2500){
    4fba:	29 00 55 48 	mova	&0x04855,r9	
    4fbe:	49 74       	subc.b	r4,	r9	
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
    4fc0:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    4fc4:	74 28       	jnc	$+234    	;abs 0x50ae
    4fc6:	38 2c       	jc	$+114    	;abs 0x5038
    4fc8:	36 29       	jnc	$+622    	;abs 0x5236
    4fca:	3d 28       	jnc	$+124    	;abs 0x5046
    4fcc:	30 2c       	jc	$+98     	;abs 0x502e
            }
            break;
    4fce:	34 29       	jnc	$+618    	;abs 0x5238
    4fd0:	00 55       	add	r5,	r0	
    4fd2:	53 49       	.word	0x4953;	????	Illegal as 2-op instr
    4fd4:	74 79       	subc.b	@r9+,	r4	
    4fd6:	70 65       	addc.b	@r5+,	r0	
    4fd8:	3a 74       	subc	@r4+,	r10	
    4fda:	28 38       	jl	$+82     	;abs 0x502c
            
    4fdc:	2c 37       	jge	$-422    	;abs 0x4e36
    4fde:	29 3d       	jmp	$+596    	;abs 0x5232
    4fe0:	28 30       	jn	$+82     	;abs 0x5032
        case WAIT_PITCH_UP:
    4fe2:	2c 35       	jge	$+602    	;abs 0x523c
    4fe4:	29 00 55 44 	mova	&0x04455,r9	
    4fe8:	49 74       	subc.b	r4,	r9	
    4fea:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    4fee:	74 28       	jnc	$+234    	;abs 0x50d8
    4ff0:	38 2c       	jc	$+114    	;abs 0x5062
    4ff2:	38 29       	jnc	$+626    	;abs 0x5264
    4ff4:	3d 28       	jnc	$+124    	;abs 0x5070
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");
    4ff6:	30 2c       	jc	$+98     	;abs 0x5058
    4ff8:	35 29       	jnc	$+620    	;abs 0x5264
    4ffa:	00 66       	addc	r6,	r0	
    4ffc:	72 61       	addc.b	@r1+,	r2	
    4ffe:	63 74       	.word	0x7463;	????	Illegal as 2-op instr

    5000:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    5004:	74 28       	jnc	$+234    	;abs 0x50ee
            if(ChannelInput[PITCH_CH] < 3500){
    5006:	38 2c       	jc	$+114    	;abs 0x5078
    5008:	39 29       	jnc	$+628    	;abs 0x527c
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
    500a:	3d 28       	jnc	$+124    	;abs 0x5086
            }
    500c:	38 2c       	jc	$+114    	;abs 0x507e
    500e:	37 29       	jnc	$+624    	;abs 0x527e
    5010:	00 68       	addc	r8,	r0	
    5012:	61 6c       	addc.b	@r12,	r1	
    5014:	66 66       	addc.b	@r6,	r6	
    5016:	72 61       	addc.b	@r1+,	r2	
            break;
            
        case WAIT_ROLL_RIGHT:
    5018:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    501a:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    501e:	74 28       	jnc	$+234    	;abs 0x5108
    5020:	38 2c       	jc	$+114    	;abs 0x5092
                lcd_goto(0,14);
                printf("WAIT ROLL RIGHT ");

    5022:	31 30       	jn	$+100    	;abs 0x5086
    5024:	29 3d       	jmp	$+596    	;abs 0x5278
                if(ChannelInput[PITCH_CH] < 3500){
    5026:	28 38       	jl	$+82     	;abs 0x5078
    5028:	2c 36       	jge	$-934    	;abs 0x4c82
    502a:	29 00 46 4c 	mova	&0x04c46,r9	
                    if(AnalogSelect > 0){
    502e:	4f 5f       	rla.b	r15		
    5030:	74 79       	subc.b	@r9+,	r4	
    5032:	70 65       	addc.b	@r5+,	r0	
                        AnalogSelect--;
    5034:	3a 74       	subc	@r4+,	r10	
    5036:	28 38       	jl	$+82     	;abs 0x5088
    5038:	2c 31       	jn	$+602    	;abs 0x5292
    503a:	31 29       	jnc	$+612    	;abs 0x529e
    503c:	3d 28       	jnc	$+124    	;abs 0x50b8
                    }
    503e:	38 2c       	jc	$+114    	;abs 0x50b0
    5040:	31 29       	jnc	$+612    	;abs 0x52a4
    5042:	00 69       	addc	r9,	r0	
                    MenuAnalog = DISPLAY;
    5044:	6e 74       	subc.b	@r4,	r14	
    5046:	66 72       	subc.b	#4,	r6	;r2 As==10
    5048:	61 63       	addc.b	#2,	r1	;r3 As==10
    504a:	3a 74       	subc	@r4+,	r10	
                }
    504c:	28 38       	jl	$+82     	;abs 0x509e
    504e:	2c 31       	jn	$+602    	;abs 0x52a8
    5050:	32 29       	jnc	$+614    	;abs 0x52b6
            break;
    5052:	3d 28       	jnc	$+124    	;abs 0x50ce
    5054:	38 2c       	jc	$+114    	;abs 0x50c6
            
    5056:	34 29       	jnc	$+618    	;abs 0x52c0
    5058:	00 20       	jnz	$+2      	;abs 0x505a
    505a:	3a 54       	add	@r4+,	r10	
    505c:	28 38       	jl	$+82     	;abs 0x50ae
    505e:	2c 31       	jn	$+602    	;abs 0x52b8
        case WAIT_ROLL_LEFT:
    5060:	33 29       	jnc	$+616    	;abs 0x52c8
    5062:	3d 65       	addc	@r5+,	r13	
    5064:	43 4c       	.word	0x4c43;	????	Illegal as 2-op instr
                lcd_goto(0,14);
    5066:	41 53       	add.b	#0,	r1	;r3 As==00
    5068:	53 5f       	.word	0x5f53;	????	Illegal as 2-op instr
    506a:	53 4e       	.word	0x4e53;	????	Illegal as 2-op instr
    506c:	41 4e       	mov.b	r14,	r1	
                printf("WAIT ROLL LEFT   ");
    506e:	3a 30       	jn	$+118    	;abs 0x50e4
    5070:	2c 43       	mov	#2,	r12	;r3 As==10
    5072:	4c 41       	mov.b	r1,	r12	
        
    5074:	53 53       	inc.b	#0		;r3 As==00
    5076:	5f 51 4e 41 	add.b	16718(r1),r15	;0x414e(r1)
                if(ChannelInput[PITCH_CH] > 2500){
                   if(AnalogSelect < 7){
                        AnalogSelect++;
    507a:	4e 3a       	jl	$-866    	;abs 0x4d18
    507c:	31 2c       	jc	$+100    	;abs 0x50e0
    507e:	43 4c       	.word	0x4c43;	????	Illegal as 2-op instr
    5080:	41 53       	add.b	#0,	r1	;r3 As==00
                    }
                    MenuAnalog = DISPLAY;

    5082:	53 5f       	.word	0x5f53;	????	Illegal as 2-op instr
    5084:	5a 45 52 4f 	mov.b	20306(r5),r10	;0x4f52(r5)
    5088:	3a 32       	jn	$-906    	;abs 0x4cfe
    508a:	2c 43       	mov	#2,	r12	;r3 As==10
    508c:	4c 41       	mov.b	r1,	r12	
    508e:	53 53       	inc.b	#0		;r3 As==00
    5090:	5f 4e 55 4d 	mov.b	19797(r14),r15	;0x4d55(r14)
                }
            break;
            
    5094:	42 45       	mov.b	r5,	r2	
    5096:	52 3a       	jl	$-858    	;abs 0x4d3c
        case PROCESS_OPTION:
    5098:	33 2c       	jc	$+104    	;abs 0x5100
    509a:	43 4c       	.word	0x4c43;	????	Illegal as 2-op instr
    509c:	41 53       	add.b	#0,	r1	;r3 As==00
    509e:	53 5f       	.word	0x5f53;	????	Illegal as 2-op instr
            break;
    50a0:	49 4e       	mov.b	r14,	r9	
    50a2:	46 49       	mov.b	r9,	r6	
    50a4:	4e 49       	mov.b	r9,	r14	
        case WAIT_CH7_BACK:
    50a6:	54 59 3a 34 	add.b	13370(r9),r4	;0x343a(r9)
    50aa:	2c 3b       	jl	$-422    	;abs 0x4f04
    50ac:	00 66       	addc	r6,	r0	
    50ae:	70 5f       	add.b	@r15+,	r0	
            break;
    50b0:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    50b2:	61 73       	subc.b	#2,	r1	;r3 As==10
    50b4:	73 5f       	.word	0x5f73;	????	Illegal as 2-op instr
    }
    50b6:	74 79       	subc.b	@r9+,	r4	
    50b8:	70 65       	addc.b	@r5+,	r0	
    50ba:	3a 74       	subc	@r4+,	r10	
    50bc:	28 38       	jl	$+82     	;abs 0x510e
}
    50be:	2c 31       	jn	$+602    	;abs 0x5318
    50c0:	34 29       	jnc	$+618    	;abs 0x532a
    50c2:	3d 28       	jnc	$+124    	;abs 0x513e

    50c4:	38 2c       	jc	$+114    	;abs 0x5136
    50c6:	31 33       	jn	$-412    	;abs 0x4f2a
void refresh_analog_menu(void){
    50c8:	29 00 66 70 	mova	&0x07066,r9	
    50cc:	5f 6e 75 6d 	addc.b	28021(r14),r15	;0x6d75(r14)
    50d0:	62 65       	addc.b	@r5,	r2	
    int i;
    50d2:	72 5f       	add.b	@r15+,	r2	
    50d4:	74 79       	subc.b	@r9+,	r4	
    50d6:	70 65       	addc.b	@r5+,	r0	
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    50d8:	3a 74       	subc	@r4+,	r10	
    50da:	28 38       	jl	$+82     	;abs 0x512c
    50dc:	2c 31       	jn	$+602    	;abs 0x5336
    50de:	35 29       	jnc	$+620    	;abs 0x534a
    50e0:	3d 28       	jnc	$+124    	;abs 0x515c
    50e2:	38 2c       	jc	$+114    	;abs 0x5154
    50e4:	31 36       	jge	$-924    	;abs 0x4d48
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
    50e6:	29 3d       	jmp	$+596    	;abs 0x533a
    50e8:	73 38       	jl	$+232    	;abs 0x51d0
    50ea:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    50ec:	61 73       	subc.b	#2,	r1	;r3 As==10
    50ee:	73 3a       	jl	$-792    	;abs 0x4dd6
    50f0:	28 30       	jn	$+82     	;abs 0x5142
    50f2:	2c 32       	jn	$-934    	;abs 0x4d4c
            color_fore = BLACK;
    50f4:	29 2c       	jc	$+84     	;abs 0x5148
    50f6:	30 2c       	jc	$+98     	;abs 0x5158
    50f8:	38 3b       	jl	$-398    	;abs 0x4f6a
        }
    50fa:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
    50fc:	67 6e       	addc.b	@r14,	r7	
    50fe:	3a 28       	jnc	$+118    	;abs 0x5174
    5100:	30 2c       	jc	$+98     	;abs 0x5162
    5102:	31 31       	jn	$+612    	;abs 0x5366
    5104:	29 2c       	jc	$+84     	;abs 0x5158
    5106:	38 2c       	jc	$+114    	;abs 0x5178
    5108:	38 3b       	jl	$-398    	;abs 0x4f7a
    510a:	6e 6f       	addc.b	@r15,	r14	
    510c:	72 6d       	addc.b	@r13+,	r2	
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
    510e:	61 6c       	addc.b	@r12,	r1	
    5110:	5f 65 78 70 	addc.b	28792(r5),r15	;0x7078(r5)
    5114:	3a 28       	jnc	$+118    	;abs 0x518a
    5116:	30 2c       	jc	$+98     	;abs 0x5178
            color_fore = LIME;
    5118:	38 29       	jnc	$+626    	;abs 0x538a
    511a:	2c 31       	jn	$+602    	;abs 0x5374
    511c:	36 2c       	jc	$+110    	;abs 0x518a
        }
    511e:	31 36       	jge	$-924    	;abs 0x4d82
    5120:	3b 66       	addc	@r6+,	r11	
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    5122:	72 61       	addc.b	@r1+,	r2	
            color_fore = RED;           // a cor da letra muda para vermelho 
    5124:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    5126:	69 6f       	addc.b	@r15,	r9	
    5128:	6e 3a       	jl	$-802    	;abs 0x4e06
    512a:	28 38       	jl	$+82     	;abs 0x517c
    512c:	2c 31       	jn	$+602    	;abs 0x5386
    512e:	37 29       	jnc	$+624    	;abs 0x539e
#include "signal.h"
#include "msp430x261x.h"
#include "delay.h"
#include "analog.h"
#include "lcd6100.h"
#include "eeprom.h"
    5130:	3d 75       	subc	@r5+,	r13	
    5132:	34 6c       	addc	@r12+,	r4	
#include "i2c.h"
#include "microquad.h"
    5134:	6c 3a       	jl	$-806    	;abs 0x4e0e
    5136:	28 38       	jl	$+82     	;abs 0x5188

    5138:	2c 39       	jl	$+602    	;abs 0x5392
    513a:	29 2c       	jc	$+84     	;abs 0x518e
    513c:	30 2c       	jc	$+98     	;abs 0x519e
volatile unsigned int ControlCounter = 0;
    513e:	33 32       	jn	$-920    	;abs 0x4da6
    5140:	3b 6c       	addc	@r12+,	r11	
    5142:	3a 28       	jnc	$+118    	;abs 0x51b8
volatile unsigned int RCCounter = 0;
    5144:	38 2c       	jc	$+114    	;abs 0x51b6
    5146:	31 38       	jl	$+100    	;abs 0x51aa
volatile unsigned int MenuCounter = 0;
    5148:	29 3d       	jmp	$+596    	;abs 0x539c
/*
    StatusFlags:
    514a:	61 72       	subc.b	#4,	r1	;r2 As==10
    514c:	28 38       	jl	$+82     	;abs 0x519e
    514e:	2c 31       	jn	$+602    	;abs 0x53a8
    5150:	39 29       	jnc	$+628    	;abs 0x53c4
    5152:	3d 72       	subc	#8,	r13	;r2 As==11
    5154:	28 38       	jl	$+82     	;abs 0x51a6
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
    5156:	2c 31       	jn	$+602    	;abs 0x53b0
    5158:	39 29       	jnc	$+628    	;abs 0x53cc
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
    515a:	3b 30       	jn	$+120    	;abs 0x51d2
    515c:	30 30       	jn	$+98     	;abs 0x51be
    515e:	30 30       	jn	$+98     	;abs 0x51c0
    5160:	30 30       	jn	$+98     	;abs 0x51c2
    5162:	30 30       	jn	$+98     	;abs 0x51c4
    5164:	30 30       	jn	$+98     	;abs 0x51c6
    5166:	30 30       	jn	$+98     	;abs 0x51c8
    5168:	3b 30       	jn	$+120    	;abs 0x51e0
    516a:	30 30       	jn	$+98     	;abs 0x51cc
    516c:	30 30       	jn	$+98     	;abs 0x51ce
    516e:	30 30       	jn	$+98     	;abs 0x51d0
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
    5170:	31 37       	jge	$-412    	;abs 0x4fd4
    5172:	37 37       	jge	$-400    	;abs 0x4fe2
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE
    5174:	37 37       	jge	$-400    	;abs 0x4fe4
    5176:	3b 3b       	jl	$-392    	;abs 0x4fee
    5178:	30 3b       	jl	$-414    	;abs 0x4fda
    517a:	31 3b       	jl	$-412    	;abs 0x4fde
    517c:	28 38       	jl	$+82     	;abs 0x51ce
    517e:	2c 31       	jn	$+602    	;abs 0x53d8
    5180:	30 29       	jnc	$+610    	;abs 0x53e2

    5182:	2c 30       	jn	$+90     	;abs 0x51dc
    5184:	2c 33       	jn	$-422    	;abs 0x4fde
MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
    5186:	32 3b       	jl	$-410    	;abs 0x4fec
    5188:	3b 2c       	jc	$+120    	;abs 0x5200
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
    518a:	33 32       	jn	$-920    	;abs 0x4df2
    518c:	2c 33       	jn	$-422    	;abs 0x4fe6
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal
    518e:	32 3b       	jl	$-410    	;abs 0x4ff4
    5190:	3b 00 46 4c 	mova	0x4c46,	r11	;PC rel. 0x09dd8

    5194:	4f 5f       	rla.b	r15		
    5196:	75 6e       	addc.b	@r14+,	r5	
// variaveis usadas no menu analog graph
    5198:	69 6f       	addc.b	@r15,	r9	
    519a:	6e 5f       	add.b	@r15,	r14	
    519c:	74 79       	subc.b	@r9+,	r4	
    519e:	70 65       	addc.b	@r5+,	r0	
    51a0:	3a 74       	subc	@r4+,	r10	
    51a2:	28 38       	jl	$+82     	;abs 0x51f4
    51a4:	2c 32       	jn	$-934    	;abs 0x4dfe
    51a6:	30 29       	jnc	$+610    	;abs 0x5408
    51a8:	3d 28       	jnc	$+124    	;abs 0x5224
    51aa:	38 2c       	jc	$+114    	;abs 0x521c
    51ac:	32 31       	jn	$+614    	;abs 0x5412
    51ae:	29 3d       	jmp	$+596    	;abs 0x5402
    51b0:	75 34       	jge	$+236    	;abs 0x529c
    51b2:	76 61       	addc.b	@r1+,	r6	
    51b4:	6c 75       	subc.b	@r5,	r12	
    51b6:	65 3a       	jl	$-820    	;abs 0x4e82
    51b8:	28 38       	jl	$+82     	;abs 0x520a
    51ba:	2c 31       	jn	$+602    	;abs 0x5414
    51bc:	31 29       	jnc	$+612    	;abs 0x5420
    51be:	2c 30       	jn	$+90     	;abs 0x5218
    51c0:	2c 33       	jn	$-422    	;abs 0x501a
    51c2:	32 3b       	jl	$-410    	;abs 0x5028
    51c4:	76 61       	addc.b	@r1+,	r6	
    51c6:	6c 75       	subc.b	@r5,	r12	
    51c8:	65 5f       	add.b	@r15,	r5	
    51ca:	72 61       	addc.b	@r1+,	r2	
    51cc:	77 3a       	jl	$-784    	;abs 0x4ebc
    51ce:	28 38       	jl	$+82     	;abs 0x5220
    51d0:	2c 39       	jl	$+602    	;abs 0x542a
    51d2:	29 2c       	jc	$+84     	;abs 0x5226
    51d4:	30 2c       	jc	$+98     	;abs 0x5236
    51d6:	33 32       	jn	$-920    	;abs 0x4e3e
    51d8:	3b 62       	addc	#8,	r11	;r2 As==11
    51da:	69 74       	subc.b	@r4,	r9	
    51dc:	73 3a       	jl	$-792    	;abs 0x4ec4
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
    51de:	28 38       	jl	$+82     	;abs 0x5230
    51e0:	2c 32       	jn	$-934    	;abs 0x4e3a
    51e2:	32 29       	jnc	$+614    	;abs 0x5448
    51e4:	3d 73       	subc	#-1,	r13	;r3 As==11
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
    51e6:	34 66       	addc	@r6+,	r4	
    51e8:	72 61       	addc.b	@r1+,	r2	
    51ea:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    51ec:	69 6f       	addc.b	@r15,	r9	
    51ee:	6e 3a       	jl	$-802    	;abs 0x4ecc
    51f0:	28 38       	jl	$+82     	;abs 0x5242
    51f2:	2c 39       	jl	$+602    	;abs 0x544c
    51f4:	29 2c       	jc	$+84     	;abs 0x5248
    51f6:	30 2c       	jc	$+98     	;abs 0x5258
    51f8:	32 33       	jn	$-410    	;abs 0x505e
    51fa:	3b 65       	addc	@r5+,	r11	
    51fc:	78 70 3a 28 	subc.b	#10298,	r8	;#0x283a
    5200:	30 2c       	jc	$+98     	;abs 0x5262
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 
    5202:	34 29       	jnc	$+618    	;abs 0x546c
    5204:	2c 32       	jn	$-934    	;abs 0x4e5e
    5206:	33 2c       	jc	$+104    	;abs 0x526e
    5208:	38 3b       	jl	$-398    	;abs 0x507a
    520a:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
    520c:	67 6e       	addc.b	@r14,	r7	

// variaveis ajuste radio
    520e:	3a 28       	jnc	$+118    	;abs 0x5284
    5210:	30 2c       	jc	$+98     	;abs 0x5272
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    5212:	34 29       	jnc	$+618    	;abs 0x547c
    5214:	2c 33       	jn	$-422    	;abs 0x506e
    5216:	31 2c       	jc	$+100    	;abs 0x527a
    5218:	31 3b       	jl	$-412    	;abs 0x507c

    521a:	3b 2c       	jc	$+120    	;abs 0x5292
    521c:	30 2c       	jc	$+98     	;abs 0x527e
    521e:	33 32       	jn	$-920    	;abs 0x4e86
    5220:	3b 3b       	jl	$-392    	;abs 0x5098
    5222:	00 5f       	add	r15,	r0	
    5224:	66 70       	subc.b	@r0,	r6	
    5226:	61 64       	addc.b	@r4,	r1	
    5228:	64 5f       	add.b	@r15,	r4	
    522a:	70 61       	addc.b	@r1+,	r0	
    522c:	72 74       	subc.b	@r4+,	r2	
    522e:	73 3a       	jl	$-792    	;abs 0x4f16
// variaveis leitura radio raw
    5230:	66 28       	jnc	$+206    	;abs 0x52fe
    5232:	31 2c       	jc	$+100    	;abs 0x5296
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    5234:	31 29       	jnc	$+612    	;abs 0x5498
    5236:	3d 2a       	jnc	$-900    	;abs 0x4eb2
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    5238:	28 38       	jl	$+82     	;abs 0x528a
    523a:	2c 31       	jn	$+602    	;abs 0x5494
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    523c:	35 29       	jnc	$+620    	;abs 0x54a8
    523e:	00 61       	addc	r1,	r0	

    5240:	3a 50 28 31 	add	#12584,	r10	;#0x3128
    5244:	2c 31       	jn	$+602    	;abs 0x549e
int main(){
    5246:	29 00 62 3a 	mova	&0x03a62,r9	
    524a:	50 28       	jnc	$+162    	;abs 0x52ec
    524c:	31 2c       	jc	$+100    	;abs 0x52b0
    524e:	31 29       	jnc	$+612    	;abs 0x54b2
    5250:	00 74       	subc	r4,	r0	
    5252:	6d 70       	subc.b	@r0,	r13	
    5254:	3a 50 28 31 	add	#12584,	r10	;#0x3128
    5258:	2c 31       	jn	$+602    	;abs 0x54b2
    525a:	29 00 74 66 	mova	&0x06674,r9	
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    INICIO: //loop main, vir para ca no caso de um reset
    525e:	72 61       	addc.b	@r1+,	r2	
    5260:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    5262:	69 6f       	addc.b	@r15,	r9	
    5264:	6e 3a       	jl	$-802    	;abs 0x4f42
char AnalogGraph[8][100];   // um vetor para cada entrada analogica, guarda as ultimas 100 leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    5266:	72 28       	jnc	$+230    	;abs 0x534c
    5268:	38 2c       	jc	$+114    	;abs 0x52da
    526a:	31 32       	jn	$-924    	;abs 0x4ece
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio

    lcd_clear(BLACK);
    526c:	29 00 61 5f 	mova	&0x05f61,r9	
    5270:	6e 6f       	addc.b	@r15,	r14	
    
    MenuOption = RADIO_RAW;
    5272:	72 6d       	addc.b	@r13+,	r2	
    MenuStep = DISPLAY;
    5274:	61 6c       	addc.b	@r12,	r1	
    5276:	5f 65 78 70 	addc.b	28792(r5),r15	;0x7078(r5)
    527a:	3a 72       	subc	#8,	r10	;r2 As==11
    527c:	28 30       	jn	$+82     	;abs 0x52ce
    527e:	2c 31       	jn	$+602    	;abs 0x54d8
    5280:	29 00 62 5f 	mova	&0x05f62,r9	
    5284:	6e 6f       	addc.b	@r15,	r14	
    5286:	72 6d       	addc.b	@r13+,	r2	
    5288:	61 6c       	addc.b	@r12,	r1	
    MenuVisible = TRUE;     // inicializa mostrando o menu
    528a:	5f 65 78 70 	addc.b	28792(r5),r15	;0x7078(r5)
        
    528e:	3a 72       	subc	#8,	r10	;r2 As==11
    5290:	28 30       	jn	$+82     	;abs 0x52e2
    while(1){
    5292:	2c 31       	jn	$+602    	;abs 0x54ec
    5294:	29 00 61 5f 	mova	&0x05f61,r9	
        /* os Counters sao incrementados na interrution do timerA
    5298:	66 72       	subc.b	#4,	r6	;r2 As==10
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
    529a:	61 63       	addc.b	#2,	r1	;r3 As==10
    529c:	74 69       	addc.b	@r9+,	r4	
    529e:	6f 6e       	addc.b	@r14,	r15	
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
    52a0:	3a 72       	subc	#8,	r10	;r2 As==11
    52a2:	28 38       	jl	$+82     	;abs 0x52f4
    52a4:	2c 39       	jl	$+602    	;abs 0x54fe
    52a6:	29 00 62 5f 	mova	&0x05f62,r9	
    52aa:	66 72       	subc.b	#4,	r6	;r2 As==10
    52ac:	61 63       	addc.b	#2,	r1	;r3 As==10
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(MotorArmed == TRUE){
    52ae:	74 69       	addc.b	@r9+,	r4	
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
    52b0:	6f 6e       	addc.b	@r14,	r15	
    52b2:	3a 72       	subc	#8,	r10	;r2 As==11
    52b4:	28 38       	jl	$+82     	;abs 0x5306
        P1 completa. */
        if(MotorArmed == TRUE){
    52b6:	2c 39       	jl	$+602    	;abs 0x5510
    52b8:	29 00 64 69 	mova	&0x06964,r9	
    52bc:	66 66       	addc.b	@r6,	r6	
    52be:	3a 72       	subc	#8,	r10	;r2 As==11
    52c0:	28 30       	jn	$+82     	;abs 0x5312
    52c2:	2c 31       	jn	$+602    	;abs 0x551c
    52c4:	29 00 5f 5f 	mova	&0x05f5f,r9	
    52c8:	61 64       	addc.b	@r4,	r1	
    52ca:	64 73       	subc.b	#2,	r4	;r3 As==10
    52cc:	66 33       	jn	$-306    	;abs 0x519a
    52ce:	3a 46       	mov	@r6+,	r10	
    52d0:	28 38       	jl	$+82     	;abs 0x5322
    52d2:	2c 31       	jn	$+602    	;abs 0x552c
    52d4:	31 29       	jnc	$+612    	;abs 0x5538
    52d6:	00 61       	addc	r1,	r0	
    52d8:	72 67       	addc.b	@r7+,	r2	
    52da:	5f 61 3a 50 	addc.b	20538(r1),r15	;0x503a(r1)
    52de:	28 38       	jl	$+82     	;abs 0x5330
    52e0:	2c 31       	jn	$+602    	;abs 0x553a
    52e2:	31 29       	jnc	$+612    	;abs 0x5546
    52e4:	00 61       	addc	r1,	r0	
    52e6:	72 67       	addc.b	@r7+,	r2	
    52e8:	5f 62 3a 50 	addc.b	&0x503a,r15	
    52ec:	28 38       	jl	$+82     	;abs 0x533e
    52ee:	2c 31       	jn	$+602    	;abs 0x5548
    52f0:	31 29       	jnc	$+612    	;abs 0x5554
    52f2:	00 61       	addc	r1,	r0	
    52f4:	3a 28       	jnc	$+118    	;abs 0x536a
    P1IE = PPM_P1MASK;

}

void timer_a3_init(void)
{
    52f6:	38 2c       	jc	$+114    	;abs 0x5368
    52f8:	31 35       	jge	$+612    	;abs 0x555c
    52fa:	29 00 62 3a 	mova	&0x03a62,r9	
    52fe:	28 38       	jl	$+82     	;abs 0x5350
    5300:	2c 31       	jn	$+602    	;abs 0x555a
    5302:	35 29       	jnc	$+620    	;abs 0x556e
    5304:	00 74       	subc	r4,	r0	
    5306:	6d 70       	subc.b	@r0,	r13	
    5308:	3a 28       	jnc	$+118    	;abs 0x537e
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    530a:	38 2c       	jc	$+114    	;abs 0x537c
    530c:	31 35       	jge	$+612    	;abs 0x5570
    530e:	29 00 72 65 	mova	&0x06572,r9	
    5312:	73 3a       	jl	$-792    	;abs 0x4ffa
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5314:	72 28       	jnc	$+230    	;abs 0x53fa
    5316:	31 2c       	jc	$+100    	;abs 0x537a
                MenuStep = SELECT;
    5318:	31 29       	jnc	$+612    	;abs 0x557c
    531a:	00 61       	addc	r1,	r0	
    531c:	75 3a       	jl	$-788    	;abs 0x5008
    531e:	28 38       	jl	$+82     	;abs 0x5370
    5320:	2c 32       	jn	$-934    	;abs 0x4f7a
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5322:	30 29       	jnc	$+610    	;abs 0x5584
    5324:	00 62       	addc	r2,	r0	
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5326:	75 3a       	jl	$-788    	;abs 0x5012
    5328:	28 38       	jl	$+82     	;abs 0x537a
    532a:	2c 32       	jn	$-934    	;abs 0x4f84
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    532c:	30 29       	jnc	$+610    	;abs 0x558e
    532e:	00 5f       	add	r15,	r0	
            
    5330:	5f 73       	subc.b	#1,	r15	;r3 As==01
    5332:	75 62       	addc.b	#8,	r5	;r2 As==11
    5334:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5336:	33 3a       	jl	$-920    	;abs 0x4f9e
    5338:	46 28       	jnc	$+142    	;abs 0x53c6
    533a:	38 2c       	jc	$+114    	;abs 0x53ac
    533c:	31 31       	jn	$+612    	;abs 0x55a0
    533e:	29 00 5f 5f 	mova	&0x05f5f,r9	
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
    5342:	6d 75       	subc.b	@r5,	r13	
    5344:	6c 73       	subc.b	#2,	r12	;r3 As==10
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
    5346:	66 33       	jn	$-306    	;abs 0x5214
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    5348:	3a 46       	mov	@r6+,	r10	
    534a:	28 38       	jl	$+82     	;abs 0x539c
    534c:	2c 31       	jn	$+602    	;abs 0x55a6
    534e:	31 29       	jnc	$+612    	;abs 0x55b2
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5350:	00 72       	subc	r2,	r0	
    5352:	65 73       	subc.b	#2,	r5	;r3 As==10
    5354:	3a 72       	subc	#8,	r10	;r2 As==11
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    5356:	28 31       	jn	$+594    	;abs 0x55a8
    5358:	2c 31       	jn	$+602    	;abs 0x55b2
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    535a:	29 3d       	jmp	$+596    	;abs 0x55ae
    535c:	2a 28       	jnc	$+86     	;abs 0x53b2
    535e:	38 2c       	jc	$+114    	;abs 0x53d0
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5360:	31 35       	jge	$+612    	;abs 0x55c4
    5362:	29 00 5f 66 	mova	&0x0665f,r9	
            lcd_goto(0,14);
    5366:	70 6d       	addc.b	@r13+,	r0	
    5368:	75 6c       	addc.b	@r12+,	r5	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    536a:	5f 70 61 72 	subc.b	0x7261,	r15	;PC rel. 0x0c5cf

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    536e:	74 73       	subc.b	#-1,	r4	;r3 As==11
    5370:	3a 66       	addc	@r6+,	r10	
    5372:	28 31       	jn	$+594    	;abs 0x55c4
    5374:	2c 31       	jn	$+602    	;abs 0x55ce
    5376:	29 00 74 6d 	mova	&0x06d74,r9	
    537a:	70 3a       	jl	$-798    	;abs 0x505c
    537c:	70 28       	jnc	$+226    	;abs 0x545e
    537e:	31 2c       	jc	$+100    	;abs 0x53e2
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    5380:	31 29       	jnc	$+612    	;abs 0x55e4
    5382:	00 6c       	addc	r12,	r0	
    5384:	6f 77       	subc.b	@r7,	r15	
    5386:	3a 28       	jnc	$+118    	;abs 0x53fc
    5388:	38 2c       	jc	$+114    	;abs 0x53fa
    538a:	39 29       	jnc	$+628    	;abs 0x55fe
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
    538c:	00 68       	addc	r8,	r0	
    538e:	69 67       	addc.b	@r7,	r9	
    5390:	68 3a       	jl	$-814    	;abs 0x5062
    5392:	72 28       	jnc	$+230    	;abs 0x5478
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5394:	38 2c       	jc	$+114    	;abs 0x5406
    5396:	39 29       	jnc	$+628    	;abs 0x560a
    5398:	00 78       	subc	r8,	r0	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    539a:	3a 72       	subc	#8,	r10	;r2 As==11
    539c:	28 38       	jl	$+82     	;abs 0x53ee
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    539e:	2c 39       	jl	$+602    	;abs 0x55f8
    53a0:	29 00 79 6c 	mova	&0x06c79,r9	
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
    53a4:	6f 77       	subc.b	@r7,	r15	
        channel_num++;
    53a6:	3a 72       	subc	#8,	r10	;r2 As==11
    53a8:	28 38       	jl	$+82     	;abs 0x53fa
    }
    53aa:	2c 39       	jl	$+602    	;abs 0x5604
    53ac:	29 00 79 68 	mova	&0x06879,r9	
    53b0:	69 67       	addc.b	@r7,	r9	
}
    53b2:	68 3a       	jl	$-814    	;abs 0x5084
    53b4:	72 28       	jnc	$+230    	;abs 0x549a
    53b6:	38 2c       	jc	$+114    	;abs 0x5428
    53b8:	39 29       	jnc	$+628    	;abs 0x562c

void calibrate_radio(void){
    53ba:	00 62       	addc	r2,	r0	
    53bc:	69 74       	subc.b	@r4,	r9	
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    53be:	3a 28       	jnc	$+118    	;abs 0x5434
        return;
    }
    53c0:	30 2c       	jc	$+98     	;abs 0x5422
    53c2:	31 29       	jnc	$+612    	;abs 0x5626
    53c4:	00 63       	adc	r0		

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    53c6:	61 72       	subc.b	#4,	r1	;r2 As==10
    53c8:	72 79       	subc.b	@r9+,	r2	
    53ca:	3a 28       	jnc	$+118    	;abs 0x5440
    53cc:	30 2c       	jc	$+98     	;abs 0x542e
    53ce:	31 29       	jnc	$+612    	;abs 0x5632
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    53d0:	00 5f       	add	r15,	r0	
    
    53d2:	5f 64 69 76 	addc.b	30313(r4),r15	;0x7669(r4)
    53d6:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    53d8:	33 3a       	jl	$-920    	;abs 0x5040
    53da:	46 28       	jnc	$+142    	;abs 0x5468
    53dc:	38 2c       	jc	$+114    	;abs 0x544e
    53de:	31 31       	jn	$+612    	;abs 0x5642
    53e0:	29 00 5f 66 	mova	&0x0665f,r9	
    53e4:	70 64       	addc.b	@r4+,	r0	
    53e6:	69 76       	subc.b	@r6,	r9	
    53e8:	5f 70 61 72 	subc.b	0x7261,	r15	;PC rel. 0x0c64d
    lcd_goto(2,5);
    color_fore = RED;
    53ec:	74 73       	subc.b	#-1,	r4	;r3 As==11
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    53ee:	3a 66       	addc	@r6+,	r10	
    delayms(3000);
    53f0:	28 31       	jn	$+594    	;abs 0x5642
    53f2:	2c 31       	jn	$+602    	;abs 0x564c
    53f4:	29 00 62 69 	mova	&0x06962,r9	
    53f8:	74 3a       	jl	$-790    	;abs 0x50e2
    53fa:	72 28       	jnc	$+230    	;abs 0x54e0
    53fc:	38 2c       	jc	$+114    	;abs 0x546e
    53fe:	39 29       	jnc	$+628    	;abs 0x5672
    5400:	00 6e       	addc	r14,	r0	
    5402:	75 6d       	addc.b	@r13+,	r5	
    5404:	65 72       	subc.b	#4,	r5	;r2 As==10
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    5406:	61 74       	subc.b	@r4,	r1	
    5408:	6f 72       	subc.b	#4,	r15	;r2 As==10
    540a:	3a 72       	subc	#8,	r10	;r2 As==11
    540c:	28 38       	jl	$+82     	;abs 0x545e
    540e:	2c 39       	jl	$+602    	;abs 0x5668
                PPMMax[i] = PPMValue[i];
            }
    5410:	29 00 64 65 	mova	&0x06564,r9	
            if(PPMMin[i] > PPMValue[i]){
                PPMMin[i] = PPMValue[i];
    5414:	6e 6f       	addc.b	@r15,	r14	
    5416:	6d 69       	addc.b	@r9,	r13	
    5418:	6e 61       	addc.b	@r1,	r14	
    541a:	74 6f       	addc.b	@r15+,	r4	
            }
        }
    }
    
    lcd_clear(BLACK);
    
    541c:	72 3a       	jl	$-794    	;abs 0x5102
    541e:	72 28       	jnc	$+230    	;abs 0x5504
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
    5420:	38 2c       	jc	$+114    	;abs 0x5492
    5422:	39 29       	jnc	$+628    	;abs 0x5696
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    5424:	00 71       	subc	r1,	r0	
    5426:	75 6f       	addc.b	@r15+,	r5	
    5428:	74 69       	addc.b	@r9+,	r4	
    542a:	65 6e       	addc.b	@r14,	r5	
    542c:	74 3a       	jl	$-790    	;abs 0x5116
    542e:	72 28       	jnc	$+230    	;abs 0x5514
        
        // grava yaw slope 
        ValorAux.f = PPMSlope[YAW_CH];
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        
        delayms(100);
    5430:	38 2c       	jc	$+114    	;abs 0x54a2
    5432:	39 29       	jnc	$+628    	;abs 0x56a6
    5434:	00 5f       	add	r15,	r0	
    5436:	5f 67 74 73 	addc.b	29556(r7),r15	;0x7374(r7)
    543a:	66 32       	jn	$-818    	;abs 0x5108
    543c:	3a 46       	mov	@r6+,	r10	
    543e:	28 38       	jl	$+82     	;abs 0x5490
    5440:	2c 33       	jn	$-422    	;abs 0x529a
    5442:	29 00 5f 5f 	mova	&0x05f5f,r9	
    5446:	67 65       	addc.b	@r5,	r7	
        
        // grava throttle slope 
    5448:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    544a:	32 3a       	jl	$-922    	;abs 0x50b0
    544c:	46 28       	jnc	$+142    	;abs 0x54da
    544e:	38 2c       	jc	$+114    	;abs 0x54c0
    5450:	33 29       	jnc	$+616    	;abs 0x56b8
    5452:	00 5f       	add	r15,	r0	
    5454:	5f 6c 74 73 	addc.b	29556(r12),r15	;0x7374(r12)
        ValorAux.f = PPMSlope[THROTTLE_CH];
    5458:	66 32       	jn	$-818    	;abs 0x5126
    545a:	3a 46       	mov	@r6+,	r10	
    545c:	28 38       	jl	$+82     	;abs 0x54ae
    545e:	2c 33       	jn	$-422    	;abs 0x52b8
    5460:	29 00 5f 5f 	mova	&0x05f5f,r9	
    5464:	66 6c       	addc.b	@r12,	r6	
    5466:	6f 61       	addc.b	@r1,	r15	
    5468:	74 73       	subc.b	#-1,	r4	;r3 As==11
    546a:	69 73       	subc.b	#2,	r9	;r3 As==10
    546c:	66 3a       	jl	$-818    	;abs 0x513a
    546e:	46 28       	jnc	$+142    	;abs 0x54fc
    5470:	38 2c       	jc	$+114    	;abs 0x54e2
    5472:	31 31       	jn	$+612    	;abs 0x56d6
    5474:	29 00 61 72 	mova	&0x07261,r9	
    5478:	67 5f       	add.b	@r15,	r7	
        
        // grava pitch slope 
        ValorAux.f = PPMSlope[PITCH_CH];
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
        
        delayms(100);
    547a:	61 3a       	jl	$-828    	;abs 0x513e
    547c:	50 28       	jnc	$+162    	;abs 0x551e
    547e:	38 2c       	jc	$+114    	;abs 0x54f0
        
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    5480:	34 29       	jnc	$+618    	;abs 0x56ea
    5482:	00 69       	addc	r9,	r0	
    5484:	6e 3a       	jl	$-802    	;abs 0x5162
        
        delayms(100);
    5486:	28 38       	jl	$+82     	;abs 0x54d8
    5488:	2c 31       	jn	$+602    	;abs 0x56e2
    548a:	35 29       	jnc	$+620    	;abs 0x56f6
    548c:	00 5f       	add	r15,	r0	
    548e:	5f 66 69 78 	addc.b	30825(r6),r15	;0x7869(r6)
    5492:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    5494:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
    5496:	3a 46       	mov	@r6+,	r10	
    5498:	28 38       	jl	$+82     	;abs 0x54ea
    549a:	2c 34       	jge	$+90     	;abs 0x54f4
    549c:	29 00 5f 5f 	mova	&0x05f5f,r9	
        
    54a0:	74 68       	addc.b	@r8+,	r4	
    54a2:	65 6e       	addc.b	@r14,	r5	
    54a4:	61 6e       	addc.b	@r14,	r1	
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
        i2c_change_address(EEPROM_I2C_ADDR);
    54a6:	5f 73       	subc.b	#1,	r15	;r3 As==01
    54a8:	66 3a       	jl	$-818    	;abs 0x5176
        
    54aa:	47 28       	jnc	$+144    	;abs 0x553a
    54ac:	31 2c       	jc	$+100    	;abs 0x5510
        // grava yaw slope 
    54ae:	31 29       	jnc	$+612    	;abs 0x5712
    54b0:	3d 6b       	addc	@r11+,	r13	
    54b2:	28 38       	jl	$+82     	;abs 0x5504
    54b4:	2c 31       	jn	$+602    	;abs 0x570e
    54b6:	35 29       	jnc	$+620    	;abs 0x5722
            if(PPMMin[i] > PPMValue[i]){
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    54b8:	00 5f       	add	r15,	r0	
    54ba:	5f 70 61 63 	subc.b	0x6361,	r15	;PC rel. 0x0b81f
    54be:	6b 5f       	add.b	@r15,	r11	
    54c0:	66 3a       	jl	$-818    	;abs 0x518e
        ValorAux.f = PPMSlope[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
        // grava pitch slope 
    54c2:	46 28       	jnc	$+142    	;abs 0x5550
    54c4:	38 2c       	jc	$+114    	;abs 0x5536
    54c6:	31 31       	jn	$+612    	;abs 0x572a
        ValorAux.f = PPMSlope[PITCH_CH];
    54c8:	29 00 73 72 	mova	&0x07273,r9	
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    54cc:	63 3a       	jl	$-824    	;abs 0x5194
    54ce:	50 28       	jnc	$+162    	;abs 0x5570
    54d0:	31 2c       	jc	$+100    	;abs 0x5534
    54d2:	31 29       	jnc	$+612    	;abs 0x5736
    54d4:	3d 2a       	jnc	$-900    	;abs 0x5150
    54d6:	28 38       	jl	$+82     	;abs 0x5528
    54d8:	2c 31       	jn	$+602    	;abs 0x5732
    54da:	35 29       	jnc	$+620    	;abs 0x5746
    54dc:	00 64       	addc	r4,	r0	
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }
    54de:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    54e0:	3a 28       	jnc	$+118    	;abs 0x5556

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
    54e2:	38 2c       	jc	$+114    	;abs 0x5554
    54e4:	32 30       	jn	$+102    	;abs 0x554a
    54e6:	29 00 66 72 	mova	&0x07266,r9	
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
    54ea:	61 63       	addc.b	#2,	r1	;r3 As==10
    54ec:	74 69       	addc.b	@r9+,	r4	
    54ee:	6f 6e       	addc.b	@r14,	r15	
}

void calibrate_radio(void){
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    54f0:	3a 72       	subc	#8,	r10	;r2 As==11
    54f2:	28 38       	jl	$+82     	;abs 0x5544
    54f4:	2c 39       	jl	$+602    	;abs 0x574e
    54f6:	29 00 73 69 	mova	&0x06973,r9	
    54fa:	67 6e       	addc.b	@r14,	r7	
    54fc:	3a 72       	subc	#8,	r10	;r2 As==11
    54fe:	28 30       	jn	$+82     	;abs 0x5550
    5500:	2c 31       	jn	$+602    	;abs 0x575a
    5502:	29 00 65 78 	mova	&0x07865,r9	
        delayms(100);
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
        
    5506:	70 3a       	jl	$-798    	;abs 0x51e8
    5508:	72 28       	jnc	$+230    	;abs 0x55ee
    550a:	30 2c       	jc	$+98     	;abs 0x556c
    550c:	31 29       	jnc	$+612    	;abs 0x5770
    550e:	00 73       	sbc	r0		
    5510:	68 69       	addc.b	@r9,	r8	
    5512:	66 74       	subc.b	@r4,	r6	
    5514:	3a 72       	subc	#8,	r10	;r2 As==11
    5516:	28 30       	jn	$+82     	;abs 0x5568
        delayms(100);
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    5518:	2c 31       	jn	$+602    	;abs 0x5772
    551a:	29 00 6c 6f 	mova	&0x06f6c,r9	
        
        delayms(100);
        
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    551e:	77 62       	addc.b	#8,	r7	;r2 As==11
    5520:	69 74       	subc.b	@r4,	r9	
    5522:	3a 72       	subc	#8,	r10	;r2 As==11
    5524:	28 30       	jn	$+82     	;abs 0x5576
        
    5526:	2c 31       	jn	$+602    	;abs 0x5780
    5528:	29 00 5f 5f 	mova	&0x05f5f,r9	
    552c:	75 6e       	addc.b	@r14+,	r5	
        delayms(100);
        
    552e:	70 61       	addc.b	@r1+,	r0	
    5530:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr
    5532:	5f 66 3a 46 	addc.b	17978(r6),r15	;0x463a(r6)
    5536:	28 30       	jn	$+82     	;abs 0x5588
    5538:	2c 32       	jn	$-934    	;abs 0x5192
        // grava yaw offset 
    553a:	30 29       	jnc	$+610    	;abs 0x579c
    553c:	00 73       	sbc	r0		
    553e:	72 63       	addc.b	#-1,	r2	;r3 As==11
    5540:	3a 50 28 31 	add	#12584,	r10	;#0x3128
    5544:	2c 31       	jn	$+602    	;abs 0x579e
    5546:	29 3d       	jmp	$+596    	;abs 0x579a
    5548:	2a 28       	jnc	$+86     	;abs 0x559e
        ValorAux.f = PPMOffset[YAW_CH];
        i2c_write16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    554a:	38 2c       	jc	$+114    	;abs 0x55bc
    554c:	32 30       	jn	$+102    	;abs 0x55b2
    554e:	29 00 64 73 	mova	&0x07364,r9	
    5552:	74 3a       	jl	$-790    	;abs 0x523c
    5554:	50 28       	jnc	$+162    	;abs 0x55f6
    5556:	31 2c       	jc	$+100    	;abs 0x55ba
        
        delayms(100);
    5558:	32 29       	jnc	$+614    	;abs 0x57be
    555a:	3d 2a       	jnc	$-900    	;abs 0x51d6
        
    555c:	28 38       	jl	$+82     	;abs 0x55ae
    555e:	2c 31       	jn	$+602    	;abs 0x57b8
    5560:	35 29       	jnc	$+620    	;abs 0x57cc
    5562:	00 5f       	add	r15,	r0	
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
        
    5564:	5f 66 70 63 	addc.b	25456(r6),r15	;0x6370(r6)
    5568:	6d 70       	subc.b	@r0,	r13	
        
        // grava pitch offset 
        ValorAux.f = PPMOffset[PITCH_CH];
        i2c_write16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
        
        delayms(100);
    556a:	5f 70 61 72 	subc.b	0x7261,	r15	;PC rel. 0x0c7cf
    556e:	74 73       	subc.b	#-1,	r4	;r3 As==11
    5570:	5f 66 3a 46 	addc.b	17978(r6),r15	;0x463a(r6)
        
    5574:	28 30       	jn	$+82     	;abs 0x55c6
    5576:	2c 31       	jn	$+602    	;abs 0x57d0
    5578:	29 00 61 3a 	mova	&0x03a61,r9	
        // grava roll offset 
        ValorAux.f = PPMOffset[ROLL_CH];
    557c:	50 28       	jnc	$+162    	;abs 0x561e
    557e:	31 2c       	jc	$+100    	;abs 0x55e2
    5580:	31 29       	jnc	$+612    	;abs 0x57e4
    5582:	3d 2a       	jnc	$-900    	;abs 0x51fe
    5584:	28 38       	jl	$+82     	;abs 0x55d6
        i2c_write16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    5586:	2c 31       	jn	$+602    	;abs 0x57e0
    5588:	35 29       	jnc	$+620    	;abs 0x57f4
    558a:	00 63       	adc	r0		
    558c:	3a 5c       	add	@r12+,	r10	
    558e:	77 6f       	addc.b	@r15+,	r7	
    5590:	72 6b       	addc.b	@r11+,	r2	
    5592:	5c 6d 73 70 	addc.b	28787(r13),r12	;0x7073(r13)
        
        delayms(100);
    5596:	67 63       	addc.b	#2,	r7	;r3 As==10
    5598:	63 5c       	.word	0x5c63;	????	Illegal as 2-op instr
        
        // grava ch5 offset 
    559a:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    559c:	5c 70 61 63 	subc.b	0x6361,	r12	;PC rel. 0x0b901
    55a0:	6b 61       	addc.b	@r1,	r11	
    55a2:	67 69       	addc.b	@r9,	r7	
    55a4:	6e 67       	addc.b	@r7,	r14	
    55a6:	5c 62 75 69 	addc.b	&0x6975,r12	
        ValorAux.f = PPMOffset[CH5_CH];
        i2c_write16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    55aa:	6c 64       	addc.b	@r4,	r12	
        
    55ac:	5c 6d 73 70 	addc.b	28787(r13),r12	;0x7073(r13)
    55b0:	34 33       	jn	$-406    	;abs 0x541a
    55b2:	30 2d       	jc	$+610    	;abs 0x5814
            delayms(4000);
            calibrate_radio();
            StatusFlags[0] = 0;
            StatusFlags[1] = 0;
            StatusFlags[2] = 0;
            i2c_write16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    55b4:	6c 69       	addc.b	@r9,	r12	
    55b6:	62 63       	addc.b	#2,	r2	;r3 As==10
    55b8:	5c 73       	subc.b	#1,	r12	;r3 As==01
        else{
            load_transmitter_values();
            printf("RC params loaded\n");
            //carregar os outros parametros
        }
    }
    55ba:	72 63       	addc.b	#-1,	r2	;r3 As==11
    55bc:	2f 00 73 74 	mova	&0x07473,r15	
    55c0:	64 6c       	addc.b	@r12,	r4	
    else{
    55c2:	69 62       	addc.b	#4,	r9	;r2 As==10
    55c4:	2f 70       	subc	@r0,	r15	
    55c6:	72 69       	addc.b	@r9+,	r2	
    55c8:	6e 74       	subc.b	@r4,	r14	
        color_fore = RED;
        printf("EEPROM not found\n");
    55ca:	66 2e       	jc	$-818    	;abs 0x5298
    55cc:	63 00 2e 2e 	mova	r0,	&0x32e2e
    55d0:	2f 69       	addc	@r9,	r15	
    55d2:	6e 63       	addc.b	#2,	r14	;r3 As==10
    55d4:	6c 75       	subc.b	@r5,	r12	
        color_fore = LIME;
    55d6:	64 65       	addc.b	@r5,	r4	
    55d8:	2f 73       	subc	#2,	r15	;r3 As==10
    55da:	74 64       	addc.b	@r4+,	r4	
    55dc:	69 6f       	addc.b	@r15,	r9	
    55de:	2e 68       	addc	@r8,	r14	
    55e0:	00 63       	adc	r0		
    55e2:	3a 2f       	jc	$-394    	;abs 0x5458
    55e4:	77 6f       	addc.b	@r15+,	r7	
    }
    
    55e6:	72 6b       	addc.b	@r11+,	r2	
    55e8:	2f 6d       	addc	@r13,	r15	
    55ea:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    55ec:	67 63       	addc.b	#2,	r7	;r3 As==10
    55ee:	63 2f       	jc	$-312    	;abs 0x54b6
    55f0:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    55f2:	2f 70       	subc	@r0,	r15	
    delayms(5000);
    
    55f4:	61 63       	addc.b	#2,	r1	;r3 As==10
    55f6:	6b 61       	addc.b	@r1,	r11	
    SetupDone = 1;
    55f8:	67 69       	addc.b	@r9,	r7	
    55fa:	6e 67       	addc.b	@r7,	r14	
    55fc:	2f 62       	addc	#4,	r15	;r2 As==10
    55fe:	75 69       	addc.b	@r9+,	r5	
        // grava ch6 offset 
        ValorAux.f = PPMOffset[CH6_CH];
        i2c_write16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
        
        delayms(100);
        
    5600:	6c 64       	addc.b	@r4,	r12	
    5602:	2f 69       	addc	@r9,	r15	
    5604:	6e 73       	subc.b	#2,	r14	;r3 As==10
    5606:	74 61       	addc.b	@r1+,	r4	
    5608:	6c 6c       	addc.b	@r12,	r12	
    560a:	65 64       	addc.b	@r4,	r5	
    560c:	2f 6c       	addc	@r12,	r15	
    560e:	69 62       	addc.b	#4,	r9	;r2 As==10
    5610:	2f 67       	addc	@r7,	r15	
    5612:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    5614:	2d 6c       	addc	@r12,	r13	
    5616:	69 62       	addc.b	#4,	r9	;r2 As==10
    5618:	2f 6d       	addc	@r13,	r15	
    561a:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
        // grava ch7 offset 
    561c:	34 33       	jn	$-406    	;abs 0x5486
    561e:	30 2f       	jc	$-414    	;abs 0x5480
    5620:	33 2e       	jc	$-920    	;abs 0x5288
    5622:	32 2e       	jc	$-922    	;abs 0x5288
        ValorAux.f = PPMOffset[CH7_CH];
    5624:	33 2f       	jc	$-408    	;abs 0x548c
    5626:	69 6e       	addc.b	@r14,	r9	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5628:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    562a:	75 64       	addc.b	@r4+,	r5	
    562c:	65 2f       	jc	$-308    	;abs 0x54f8
    562e:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    5630:	64 64       	addc.b	@r4,	r4	
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5632:	65 66       	addc.b	@r6,	r5	
    5634:	2e 68       	addc	@r8,	r14	
                MenuStep = SELECT;
    5636:	00 2e       	jc	$-1022   	;abs 0x5238
    5638:	2e 2f       	jc	$-418    	;abs 0x5496
    563a:	69 6e       	addc.b	@r14,	r9	
    563c:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    563e:	75 64       	addc.b	@r4+,	r5	
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    5640:	65 2f       	jc	$-308    	;abs 0x550c
    5642:	73 79       	.word	0x7973;	????	Illegal as 2-op instr
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5644:	73 2f       	jc	$-280    	;abs 0x552c
    5646:	74 79       	subc.b	@r9+,	r4	
    5648:	70 65       	addc.b	@r5+,	r0	
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    564a:	73 2e       	jc	$-792    	;abs 0x5332
    564c:	68 00 2e 2e 	mova	r0,	&0x82e2e
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5650:	2f 69       	addc	@r9,	r15	
    5652:	6e 63       	addc.b	#2,	r14	;r3 As==10
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5654:	6c 75       	subc.b	@r5,	r12	
    5656:	64 65       	addc.b	@r5,	r4	
        i2c_change_address(EEPROM_I2C_ADDR);    

        // load yaw slope e offset
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        PPMSlope[YAW_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    5658:	2f 73       	subc	#2,	r15	;r3 As==10
    565a:	79 73       	subc.b	#-1,	r9	;r3 As==11
    565c:	2f 63       	addc	#2,	r15	;r3 As==10
    565e:	64 65       	addc.b	@r5,	r4	
    5660:	66 73       	subc.b	#2,	r6	;r3 As==10
    5662:	2e 68       	addc	@r8,	r14	
    5664:	00 2e       	jc	$-1022   	;abs 0x5266
    5666:	2e 2f       	jc	$-418    	;abs 0x54c4
        PPMOffset[YAW_CH] = ValorAux.f;
    5668:	69 6e       	addc.b	@r14,	r9	
    566a:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
    566c:	75 64       	addc.b	@r4+,	r5	
    566e:	65 2f       	jc	$-308    	;abs 0x553a
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
    5670:	73 79       	.word	0x7973;	????	Illegal as 2-op instr
    5672:	73 2f       	jc	$-280    	;abs 0x555a
    5674:	69 6e       	addc.b	@r14,	r9	
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5676:	74 74       	subc.b	@r4+,	r4	
    5678:	79 70 65 73 	subc.b	#29541,	r9	;#0x7365
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    567c:	2e 68       	addc	@r8,	r14	
    567e:	00 63       	adc	r0		
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    5680:	3a 2f       	jc	$-394    	;abs 0x54f6
    5682:	77 6f       	addc.b	@r15+,	r7	
    5684:	72 6b       	addc.b	@r11+,	r2	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    5686:	2f 6d       	addc	@r13,	r15	
    5688:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
        PPMOffset[YAW_CH] = ValorAux.f;
        
        // load throttle slope  e offset
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    568a:	67 63       	addc.b	#2,	r7	;r3 As==10
    568c:	63 2f       	jc	$-312    	;abs 0x5554
    568e:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    5690:	2f 70       	subc	@r0,	r15	
    5692:	61 63       	addc.b	#2,	r1	;r3 As==10
    5694:	6b 61       	addc.b	@r1,	r11	
    5696:	67 69       	addc.b	@r9,	r7	
    5698:	6e 67       	addc.b	@r7,	r14	
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    569a:	2f 62       	addc	#4,	r15	;r2 As==10
    569c:	75 69       	addc.b	@r9+,	r5	
    569e:	6c 64       	addc.b	@r4,	r12	
    56a0:	2f 69       	addc	@r9,	r15	
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    56a2:	6e 73       	subc.b	#2,	r14	;r3 As==10
    56a4:	74 61       	addc.b	@r1+,	r4	
    56a6:	6c 6c       	addc.b	@r12,	r12	
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    56a8:	65 64       	addc.b	@r4,	r5	
    56aa:	2f 6c       	addc	@r12,	r15	
            lcd_goto(0,14);
    56ac:	69 62       	addc.b	#4,	r9	;r2 As==10
    56ae:	2f 67       	addc	@r7,	r15	
    56b0:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    56b2:	2d 6c       	addc	@r12,	r13	
    56b4:	69 62       	addc.b	#4,	r9	;r2 As==10
        // load pitch slope  e offset
        i2c_read16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
        PPMSlope[PITCH_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
        PPMOffset[PITCH_CH] = ValorAux.f;
        
    56b6:	2f 6d       	addc	@r13,	r15	
    56b8:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    56ba:	34 33       	jn	$-406    	;abs 0x5524
    56bc:	30 2f       	jc	$-414    	;abs 0x551e
        // load roll slope  e offset
    56be:	33 2e       	jc	$-920    	;abs 0x5326
    56c0:	32 2e       	jc	$-922    	;abs 0x5326
    56c2:	33 2f       	jc	$-408    	;abs 0x552a
    56c4:	69 6e       	addc.b	@r14,	r9	
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    56c6:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    56c8:	75 64       	addc.b	@r4+,	r5	
        PPMSlope[ROLL_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
        PPMOffset[ROLL_CH] = ValorAux.f;
    
    56ca:	65 2f       	jc	$-308    	;abs 0x5596
    56cc:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    56ce:	64 61       	addc.b	@r1,	r4	
        // load ch5 slope  e offset
        i2c_read16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
        PPMSlope[CH5_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    56d0:	72 67       	addc.b	@r7+,	r2	
    56d2:	2e 68       	addc	@r8,	r14	
    56d4:	00 70       	subc	r0,	r0	
    56d6:	72 69       	addc.b	@r9+,	r2	
    56d8:	6e 74       	subc.b	@r4,	r14	
    56da:	66 3a       	jl	$-818    	;abs 0x53a8
        PPMOffset[CH5_CH] = ValorAux.f;
    
    56dc:	46 28       	jnc	$+142    	;abs 0x576a
    56de:	30 2c       	jc	$+98     	;abs 0x5740
    56e0:	31 29       	jnc	$+612    	;abs 0x5944
    56e2:	00 73       	sbc	r0		
    56e4:	74 72       	subc.b	#8,	r4	;r2 As==11
    56e6:	69 6e       	addc.b	@r14,	r9	
    56e8:	67 3a       	jl	$-816    	;abs 0x53b8
    56ea:	70 28       	jnc	$+226    	;abs 0x57cc
    56ec:	34 2c       	jc	$+106    	;abs 0x5756
    56ee:	31 38       	jl	$+100    	;abs 0x5752
    56f0:	29 00 73 74 	mova	&0x07473,r9	
    56f4:	72 69       	addc.b	@r9+,	r2	
    56f6:	6e 67       	addc.b	@r7,	r14	
    56f8:	3a 72       	subc	#8,	r10	;r2 As==11
        // load ch6 slope  e offset
    56fa:	28 34       	jge	$+82     	;abs 0x574c
    56fc:	2c 31       	jn	$+602    	;abs 0x5956
    56fe:	38 29       	jnc	$+626    	;abs 0x5970
    5700:	00 6c       	addc	r12,	r0	
    5702:	65 6e       	addc.b	@r14,	r5	
    5704:	3a 72       	subc	#8,	r10	;r2 As==11
    5706:	28 30       	jn	$+82     	;abs 0x5758
    5708:	2c 31       	jn	$+602    	;abs 0x5962
    570a:	29 00 73 74 	mova	&0x07473,r9	
        i2c_read16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
        PPMSlope[CH6_CH] = ValorAux.f;
    570e:	64 6c       	addc.b	@r12,	r4	
    5710:	69 62       	addc.b	#4,	r9	;r2 As==10
        i2c_read16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    5712:	2f 76       	subc	@r6,	r15	
    5714:	75 70 72 69 	subc.b	#26994,	r5	;#0x6972
        PPMOffset[CH6_CH] = ValorAux.f;
        
    5718:	6e 74       	subc.b	@r4,	r14	
        // load ch7 slope  e offset
        i2c_read16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    571a:	66 2e       	jc	$-818    	;abs 0x53e8
    571c:	63 00 2e 2e 	mova	r0,	&0x32e2e
        PPMSlope[CH7_CH] = ValorAux.f;
    5720:	2f 69       	addc	@r9,	r15	
    5722:	6e 63       	addc.b	#2,	r14	;r3 As==10
        // load roll slope  e offset
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
        PPMSlope[ROLL_CH] = ValorAux.f;
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
        PPMOffset[ROLL_CH] = ValorAux.f;
    
    5724:	6c 75       	subc.b	@r5,	r12	
    5726:	64 65       	addc.b	@r5,	r4	
    5728:	2f 73       	subc	#2,	r15	;r3 As==10
    572a:	74 72       	subc.b	#8,	r4	;r2 As==11
    572c:	69 6e       	addc.b	@r14,	r9	
    572e:	67 2e       	jc	$-816    	;abs 0x53fe
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
                    h = 0;
                }
    5730:	68 00 50 52 	mova	r0,	&0x85250
    5734:	49 4e       	mov.b	r14,	r9	
    5736:	54 3a       	jl	$-854    	;abs 0x53e0
    5738:	66 28       	jnc	$+206    	;abs 0x5806
    573a:	30 2c       	jc	$+98     	;abs 0x579c
    573c:	31 29       	jnc	$+612    	;abs 0x59a0
                else{
    573e:	00 70       	subc	r0,	r0	
    5740:	74 72       	subc.b	#8,	r4	;r2 As==11
    5742:	3a 50 28 34 	add	#13352,	r10	;#0x3428
    5746:	2c 31       	jn	$+602    	;abs 0x59a0
    5748:	38 29       	jnc	$+626    	;abs 0x59ba
    574a:	00 6c       	addc	r12,	r0	
    574c:	65 6e       	addc.b	@r14,	r5	
    574e:	3a 50 28 30 	add	#12328,	r10	;#0x3028
                    h = ((PPMValue[i] - 2000) * 10) / 200;
                }
    5752:	2c 34       	jge	$+90     	;abs 0x57ac
    5754:	29 00 5f 5f 	mova	&0x05f5f,r9	
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
    5758:	77 72       	subc.b	#8,	r7	;r2 As==11
    575a:	69 74       	subc.b	@r4,	r9	
}

    575c:	65 5f       	add.b	@r15,	r5	
    575e:	70 61       	addc.b	@r1+,	r0	
    5760:	64 3a       	jl	$-822    	;abs 0x542a
int find_first(int startaddress){
    5762:	66 28       	jnc	$+206    	;abs 0x5830
    5764:	30 2c       	jc	$+98     	;abs 0x57c6
    5766:	31 29       	jnc	$+612    	;abs 0x59ca
    5768:	00 63       	adc	r0		
    576a:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
    576e:	2c 32       	jn	$-934    	;abs 0x53c8
    5770:	29 00 68 6f 	mova	&0x06f68,r9	
    5774:	77 6d       	addc.b	@r13+,	r7	
    5776:	61 6e       	addc.b	@r14,	r1	
        if(!i2c_find_device()){
    5778:	79 3a       	jl	$-780    	;abs 0x546c
    577a:	50 28       	jnc	$+162    	;abs 0x581c
    577c:	30 2c       	jc	$+98     	;abs 0x57de
            return startaddress;
        }
    577e:	31 30       	jn	$+100    	;abs 0x57e2
    5780:	29 00 76 75 	mova	&0x07576,r9	
    5784:	70 72       	subc.b	#8,	r0	;r2 As==11
    5786:	69 6e       	addc.b	@r14,	r9	
    5788:	74 66       	addc.b	@r6+,	r4	
    }   
    return 0;
    578a:	3a 46       	mov	@r6+,	r10	
    578c:	28 30       	jn	$+82     	;abs 0x57de
    578e:	2c 31       	jn	$+602    	;abs 0x59e8
}

    5790:	29 00 66 75 	mova	&0x07566,r9	
    5794:	6e 63       	addc.b	#2,	r14	;r3 As==10

// loop de controle
    5796:	3a 50 28 31 	add	#12584,	r10	;#0x3128
void main_loop(){
    579a:	2c 31       	jn	$+602    	;abs 0x59f4
    579c:	29 3d       	jmp	$+596    	;abs 0x59f0
    579e:	2a 28       	jnc	$+86     	;abs 0x57f4
    57a0:	31 2c       	jc	$+100    	;abs 0x5804
    
    57a2:	32 29       	jnc	$+614    	;abs 0x5a08
    
    57a4:	3d 66       	addc	@r6+,	r13	
    57a6:	28 30       	jn	$+82     	;abs 0x57f8
    57a8:	2c 31       	jn	$+602    	;abs 0x5a02
    57aa:	29 00 66 6d 	mova	&0x06d66,r9	
    57ae:	74 30       	jn	$+234    	;abs 0x5898
    57b0:	3a 50 28 34 	add	#13352,	r10	;#0x3428
    57b4:	2c 31       	jn	$+602    	;abs 0x5a0e
    
    i2c_init();
    
    eint();
    
    lcd_init(BLACK);
    57b6:	38 29       	jnc	$+626    	;abs 0x5a28
    57b8:	00 61       	addc	r1,	r0	
    57ba:	70 3a       	jl	$-798    	;abs 0x549c
    57bc:	50 28       	jnc	$+162    	;abs 0x585e
    57be:	37 2c       	jc	$+112    	;abs 0x582e
    57c0:	32 29       	jnc	$+614    	;abs 0x5a26
    57c2:	00 66       	addc	r6,	r0	
    57c4:	6d 74       	subc.b	@r4,	r13	
    57c6:	3a 72       	subc	#8,	r10	;r2 As==11
    57c8:	28 34       	jge	$+82     	;abs 0x581a
        printf("EEPROM found\n");
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);

        //if(1){
        if(StatusFlags[0] != 0){
    57ca:	2c 31       	jn	$+602    	;abs 0x5a24
    57cc:	38 29       	jnc	$+626    	;abs 0x5a3e
    57ce:	00 63       	adc	r0		
    57d0:	68 3a       	jl	$-814    	;abs 0x54a2
    57d2:	72 28       	jnc	$+230    	;abs 0x58b8
            printf("Calibrando radio...\n");
    57d4:	30 2c       	jc	$+98     	;abs 0x5836
    57d6:	32 29       	jnc	$+614    	;abs 0x5a3c
    57d8:	00 6e       	addc	r14,	r0	
            delayms(4000);
    57da:	3a 72       	subc	#8,	r10	;r2 As==11
    57dc:	28 30       	jn	$+82     	;abs 0x582e
    
    eint();
    
    lcd_init(BLACK);
    
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));
    57de:	2c 31       	jn	$+602    	;abs 0x5a38
    57e0:	29 00 63 70 	mova	&0x07063,r9	

    i2c_config(EEPROM_I2C_ADDR);
    EEPROMFound = !(i2c_find_device());
    
    if(EEPROMFound){
    57e4:	3a 28       	jnc	$+118    	;abs 0x585a
    57e6:	34 2c       	jc	$+106    	;abs 0x5850
    57e8:	31 36       	jge	$-924    	;abs 0x544c
    57ea:	29 00 66 6d 	mova	&0x06d66,r9	
        printf("EEPROM found\n");
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);
    57ee:	61 72       	subc.b	#4,	r1	;r2 As==10
    57f0:	6b 3a       	jl	$-808    	;abs 0x54c8
    57f2:	72 28       	jnc	$+230    	;abs 0x58d8
    57f4:	34 2c       	jc	$+106    	;abs 0x585e
    57f6:	31 38       	jl	$+100    	;abs 0x585a
    57f8:	29 00 66 6c 	mova	&0x06c66,r9	
    57fc:	61 67       	addc.b	@r7,	r1	
    57fe:	73 3a       	jl	$-792    	;abs 0x54e6
    5800:	28 30       	jn	$+82     	;abs 0x5852
    5802:	2c 31       	jn	$+602    	;abs 0x5a5c
    5804:	31 29       	jnc	$+612    	;abs 0x5a68

        //if(1){
        if(StatusFlags[0] != 0){
            printf("Calibrando radio...\n");
            delayms(4000);
            calibrate_radio();
    5806:	00 77       	subc	r7,	r0	
    5808:	69 64       	addc.b	@r4,	r9	
    580a:	74 68       	addc.b	@r8+,	r4	
    580c:	3a 28       	jnc	$+118    	;abs 0x5882
    580e:	30 2c       	jc	$+98     	;abs 0x5870
    5810:	31 30       	jn	$+100    	;abs 0x5874
    5812:	29 00 70 72 	mova	&0x07270,r9	
    5816:	65 63       	addc.b	#2,	r5	;r3 As==10
    5818:	3a 72       	subc	#8,	r10	;r2 As==11
    581a:	28 30       	jn	$+82     	;abs 0x586c
    581c:	2c 31       	jn	$+602    	;abs 0x5a76
    581e:	30 29       	jnc	$+610    	;abs 0x5a80
    5820:	00 73       	sbc	r0		
    5822:	69 67       	addc.b	@r7,	r9	
    5824:	6e 3a       	jl	$-802    	;abs 0x5502
    5826:	28 30       	jn	$+82     	;abs 0x5878
    5828:	2c 32       	jn	$-934    	;abs 0x5482
    582a:	29 00 5f 75 	mova	&0x0755f,r9	
    582e:	6c 6f       	addc.b	@r15,	r12	
    5830:	6e 67       	addc.b	@r7,	r14	
    5832:	3a 28       	jnc	$+118    	;abs 0x58a8
    5834:	30 2c       	jc	$+98     	;abs 0x5896
    5836:	35 29       	jnc	$+620    	;abs 0x5aa2
    5838:	00 62       	addc	r2,	r0	
    583a:	61 73       	subc.b	#2,	r1	;r3 As==10
    583c:	65 3a       	jl	$-820    	;abs 0x5508
    583e:	28 30       	jn	$+82     	;abs 0x5890
    5840:	2c 31       	jn	$+602    	;abs 0x5a9a
    5842:	31 29       	jnc	$+612    	;abs 0x5aa6
    5844:	00 64       	addc	r4,	r0	
    5846:	70 72       	subc.b	#8,	r0	;r2 As==11
    5848:	65 63       	addc.b	#2,	r5	;r3 As==10
    584a:	3a 28       	jnc	$+118    	;abs 0x58c0
    584c:	30 2c       	jc	$+98     	;abs 0x58ae
    584e:	31 30       	jn	$+100    	;abs 0x58b2
    5850:	29 00 64 70 	mova	&0x07064,r9	
    5854:	61 64       	addc.b	@r4,	r1	
    5856:	3a 72       	subc	#8,	r10	;r2 As==11
    5858:	28 30       	jn	$+82     	;abs 0x58aa
    585a:	2c 31       	jn	$+602    	;abs 0x5ab4
    585c:	30 29       	jnc	$+610    	;abs 0x5abe
    585e:	00 66       	addc	r6,	r0	
    5860:	69 65       	addc.b	@r5,	r9	
    5862:	6c 64       	addc.b	@r4,	r12	

void analog_graph_clear(void){
    int i, k;
    for(i = 0; i < 8; i++){
        for(k = 0; k < 100; k++){
            AnalogGraph[i][k] = 0;
    5864:	73 7a       	.word	0x7a73;	????	Illegal as 2-op instr
    5866:	3a 72       	subc	#8,	r10	;r2 As==11
    5868:	28 30       	jn	$+82     	;abs 0x58ba
    586a:	2c 31       	jn	$+602    	;abs 0x5ac4
    586c:	30 29       	jnc	$+610    	;abs 0x5ace
    586e:	00 73       	sbc	r0		
    5870:	69 7a       	subc.b	@r10,	r9	
    5872:	65 3a       	jl	$-820    	;abs 0x553e
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    5874:	72 28       	jnc	$+230    	;abs 0x595a
    5876:	30 2c       	jc	$+98     	;abs 0x58d8
    5878:	31 30       	jn	$+100    	;abs 0x58dc
    587a:	29 00 62 75 	mova	&0x07562,r9	
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    587e:	66 3a       	jl	$-818    	;abs 0x554c
    5880:	28 31       	jn	$+594    	;abs 0x5ad2
                MenuStep = SELECT;
    5882:	2c 33       	jn	$-422    	;abs 0x56dc
    5884:	29 3d       	jmp	$+596    	;abs 0x5ad8
    5886:	61 72       	subc.b	#4,	r1	;r2 As==10
    5888:	28 31       	jn	$+594    	;abs 0x5ada
    588a:	2c 34       	jge	$+90     	;abs 0x58e4
            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
    588c:	29 3d       	jmp	$+596    	;abs 0x5ae0
    588e:	72 28       	jnc	$+230    	;abs 0x5974
    5890:	31 2c       	jc	$+100    	;abs 0x58f4
    5892:	34 29       	jnc	$+618    	;abs 0x5afc
    5894:	3b 30       	jn	$+120    	;abs 0x590c
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    5896:	30 30       	jn	$+98     	;abs 0x58f8
    5898:	30 30       	jn	$+98     	;abs 0x58fa
    589a:	30 30       	jn	$+98     	;abs 0x58fc
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    589c:	30 30       	jn	$+98     	;abs 0x58fe
    589e:	30 30       	jn	$+98     	;abs 0x5900
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    58a0:	30 30       	jn	$+98     	;abs 0x5902
    58a2:	3b 30       	jn	$+120    	;abs 0x591a
    58a4:	30 30       	jn	$+98     	;abs 0x5906
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    58a6:	30 30       	jn	$+98     	;abs 0x5908
    58a8:	30 30       	jn	$+98     	;abs 0x590a
    58aa:	31 37       	jge	$-412    	;abs 0x570e
    58ac:	37 37       	jge	$-400    	;abs 0x571c
    58ae:	37 37       	jge	$-400    	;abs 0x571e
    58b0:	3b 3b       	jl	$-392    	;abs 0x5728
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
    58b2:	30 3b       	jl	$-414    	;abs 0x5714
    58b4:	33 39       	jl	$+616    	;abs 0x5b1c
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
    58b6:	3b 28       	jnc	$+120    	;abs 0x592e
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    58b8:	30 2c       	jc	$+98     	;abs 0x591a
    58ba:	32 29       	jnc	$+614    	;abs 0x5b20
    58bc:	00 6f       	addc	r15,	r0	
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
    58be:	78 3a       	jl	$-782    	;abs 0x55b0
    58c0:	28 31       	jn	$+594    	;abs 0x5b12
    58c2:	2c 35       	jge	$+602    	;abs 0x5b1c
    58c4:	29 3d       	jmp	$+596    	;abs 0x5b18
    58c6:	61 72       	subc.b	#4,	r1	;r2 As==10
    58c8:	28 31       	jn	$+594    	;abs 0x5b1a
    58ca:	2c 34       	jge	$+90     	;abs 0x5924
    58cc:	29 3b       	jl	$-428    	;abs 0x5720
    58ce:	30 3b       	jl	$-414    	;abs 0x5730
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    58d0:	31 3b       	jl	$-412    	;abs 0x5734
    58d2:	28 30       	jn	$+82     	;abs 0x5924
    58d4:	2c 32       	jn	$-934    	;abs 0x552e
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
    58d6:	29 00 5f 64 	mova	&0x0645f,r9	
    58da:	3a 72       	subc	#8,	r10	;r2 As==11
    58dc:	28 30       	jn	$+82     	;abs 0x592e
    58de:	2c 31       	jn	$+602    	;abs 0x5b38
    58e0:	31 29       	jnc	$+612    	;abs 0x5b44
    58e2:	00 6e       	addc	r14,	r0	
    58e4:	6f 74       	subc.b	@r4,	r15	
    58e6:	6c 61       	addc.b	@r1,	r12	
    58e8:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    58ea:	64 69       	addc.b	@r9,	r4	
    58ec:	67 69       	addc.b	@r9,	r7	
    58ee:	74 3a       	jl	$-790    	;abs 0x55d8
    58f0:	28 30       	jn	$+82     	;abs 0x5942
    58f2:	2c 31       	jn	$+602    	;abs 0x5b4c
    58f4:	31 29       	jnc	$+612    	;abs 0x5b58
    58f6:	00 70       	subc	r0,	r0	
    58f8:	3a 72       	subc	#8,	r10	;r2 As==11
    58fa:	28 34       	jge	$+82     	;abs 0x594c
    58fc:	2c 31       	jn	$+602    	;abs 0x5b56
    58fe:	36 29       	jnc	$+622    	;abs 0x5b6c
    5900:	00 5f       	add	r15,	r0	
    5902:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
    5906:	74 65       	addc.b	@r5+,	r4	
    5908:	5f 63       	addc.b	#1,	r15	;r3 As==01
    590a:	68 61       	addc.b	@r1,	r8	
    590c:	72 3a       	jl	$-794    	;abs 0x55f2
    590e:	53 28       	jnc	$+168    	;abs 0x59b6
    5910:	31 2c       	jc	$+100    	;abs 0x5974
    5912:	31 29       	jnc	$+612    	;abs 0x5b76
    5914:	00 74       	subc	r4,	r0	
    5916:	6f 74       	subc.b	@r4,	r15	
    5918:	61 6c       	addc.b	@r12,	r1	
    591a:	5f 6c 65 6e 	addc.b	28261(r12),r15	;0x6e65(r12)
    591e:	3a 53       	add	#-1,	r10	;r3 As==11
    5920:	28 30       	jn	$+82     	;abs 0x5972
    5922:	2c 31       	jn	$+602    	;abs 0x5b7c
    5924:	29 00 73 74 	mova	&0x07473,r9	
    5928:	64 6c       	addc.b	@r12,	r4	
    592a:	69 62       	addc.b	#4,	r9	;r2 As==10
    592c:	2f 70       	subc	@r0,	r15	
    592e:	75 74       	subc.b	@r4+,	r5	
    5930:	73 2e       	jc	$-792    	;abs 0x5618
    5932:	63 00 70 75 	mova	r0,	&0x37570
    5936:	74 73       	subc.b	#-1,	r4	;r3 As==11
    5938:	3a 46       	mov	@r6+,	r10	
    593a:	28 30       	jn	$+82     	;abs 0x598c
    593c:	2c 31       	jn	$+602    	;abs 0x5b96
    593e:	29 00 73 3a 	mova	&0x03a73,r9	
    5942:	50 28       	jnc	$+162    	;abs 0x59e4
    5944:	34 2c       	jc	$+106    	;abs 0x59ae
    5946:	31 38       	jl	$+100    	;abs 0x59aa
    5948:	29 00 6f 6b 	mova	&0x06b6f,r9	
    594c:	3a 72       	subc	#8,	r10	;r2 As==11
    594e:	28 30       	jn	$+82     	;abs 0x59a0
    5950:	2c 31       	jn	$+602    	;abs 0x5baa
    5952:	29 00 73 74 	mova	&0x07473,r9	
    5956:	72 69       	addc.b	@r9+,	r2	
    5958:	6e 67       	addc.b	@r7,	r14	
    595a:	2f 6d       	addc	@r13,	r15	
    595c:	65 6d       	addc.b	@r13,	r5	
    595e:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
    5960:	72 2e       	jc	$-794    	;abs 0x5646
    5962:	63 00 6d 65 	mova	r0,	&0x3656d
    5966:	6d 63       	addc.b	#2,	r13	;r3 As==10
    5968:	68 72       	subc.b	#4,	r8	;r2 As==10
    596a:	3a 46       	mov	@r6+,	r10	
    596c:	28 31       	jn	$+594    	;abs 0x5bbe
    596e:	2c 31       	jn	$+602    	;abs 0x5bc8
    5970:	29 3d       	jmp	$+596    	;abs 0x5bc4
    5972:	2a 28       	jnc	$+86     	;abs 0x59c8
    5974:	30 2c       	jc	$+98     	;abs 0x59d6
    5976:	32 30       	jn	$+102    	;abs 0x59dc
    5978:	29 00 73 3a 	mova	&0x03a73,r9	
    597c:	50 28       	jnc	$+162    	;abs 0x5a1e
    597e:	31 2c       	jc	$+100    	;abs 0x59e2
    5980:	32 29       	jnc	$+614    	;abs 0x5be6
    5982:	3d 2a       	jnc	$-900    	;abs 0x55fe
    5984:	28 31       	jn	$+594    	;abs 0x5bd6
    5986:	2c 33       	jn	$-422    	;abs 0x57e0
    5988:	29 3d       	jmp	$+596    	;abs 0x5bdc
    598a:	6b 28       	jnc	$+216    	;abs 0x5a62
    598c:	30 2c       	jc	$+98     	;abs 0x59ee
    598e:	32 30       	jn	$+102    	;abs 0x59f4
    5990:	29 00 6e 3a 	mova	&0x03a6e,r9	
    5994:	50 28       	jnc	$+162    	;abs 0x5a36
    5996:	34 2c       	jc	$+106    	;abs 0x5a00
    5998:	32 29       	jnc	$+614    	;abs 0x5bfe
    599a:	00 70       	subc	r0,	r0	
    599c:	3a 72       	subc	#8,	r10	;r2 As==11
    599e:	28 31       	jn	$+594    	;abs 0x5bf0
    59a0:	2c 34       	jge	$+90     	;abs 0x59fa
    59a2:	29 3d       	jmp	$+596    	;abs 0x5bf6
    59a4:	2a 28       	jnc	$+86     	;abs 0x59fa
    59a6:	31 2c       	jc	$+100    	;abs 0x5a0a
    59a8:	35 29       	jnc	$+620    	;abs 0x5c14
    59aa:	3d 6b       	addc	@r11+,	r13	
    59ac:	28 30       	jn	$+82     	;abs 0x59fe
    59ae:	2c 31       	jn	$+602    	;abs 0x5c08
    59b0:	31 29       	jnc	$+612    	;abs 0x5c14
    59b2:	00 70       	subc	r0,	r0	
    59b4:	3a 72       	subc	#8,	r10	;r2 As==11
    59b6:	28 31       	jn	$+594    	;abs 0x5c08
    59b8:	2c 34       	jge	$+90     	;abs 0x5a12
    59ba:	29 00 44 00 	Address 0x000059bc is out of bounds.
mova	&0x0ffff,r9	
