
main.o:     file format elf32-msp430

Disassembly of section .text:

00003100 <__init_stack>:
    3100:	31 40 00 31 	mov	#12544,	r1	;#0x3100

00003104 <__low_level_init>:
    3104:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    3108:	20 01 

0000310a <__do_copy_data>:
    310a:	3f 40 b4 00 	mov	#180,	r15	;#0x00b4
    310e:	0f 93       	tst	r15		
    3110:	05 24       	jz	$+12     	;abs 0x311c
    3112:	2f 83       	decd	r15		
    3114:	9f 4f 92 68 	mov	26770(r15),4352(r15);0x6892(r15), 0x1100(r15)
    3118:	00 11 
    311a:	fb 23       	jnz	$-8      	;abs 0x3112

0000311c <__do_clear_bss>:
    311c:	3f 40 22 03 	mov	#802,	r15	;#0x0322
    3120:	0f 93       	tst	r15		
    3122:	04 24       	jz	$+10     	;abs 0x312c
    3124:	1f 83       	dec	r15		
    3126:	cf 43 b4 11 	mov.b	#0,	4532(r15);r3 As==00, 0x11b4(r15)
    312a:	fc 23       	jnz	$-6      	;abs 0x3124

0000312c <__jump_to_main>:
    312c:	30 40 36 31 	br	#0x3136	

00003130 <__ctors_end>:
    3130:	30 40 34 31 	br	#0x3134	

00003134 <_unexpected_>:
    3134:	00 13       	reti			

00003136 <main>:
// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    3136:	31 40 00 31 	mov	#12544,	r1	;#0x3100
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    313a:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    313e:	20 01 

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    3140:	b0 12 8a 42 	call	#0x428a	

    lcd_clear(BLACK);
    3144:	4f 43       	clr.b	r15		
    3146:	b0 12 f4 47 	call	#0x47f4	
    
    MenuOption = RADIO_RAW;
    314a:	82 43 10 11 	mov	#0,	&0x1110	;r3 As==00
    MenuStep = DISPLAY;
    314e:	82 43 0c 11 	mov	#0,	&0x110c	;r3 As==00
    MenuVisible = TRUE;     // inicializa mostrando o menu
    3152:	d2 43 09 11 	mov.b	#1,	&0x1109	;r3 As==01
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(ControlCounter >= CONTROL_PERIOD){
    3156:	b2 90 05 00 	cmp	#5,	&0x1100	;#0x0005
    315a:	00 11 
    315c:	07 28       	jnc	$+16     	;abs 0x316c
            analog_refresh_all();
    315e:	b0 12 fa 53 	call	#0x53fa	
            if(MotorArmed == TRUE){
    3162:	d2 93 0b 11 	cmp.b	#1,	&0x110b	;r3 As==01
    3166:	23 24       	jz	$+72     	;abs 0x31ae
                main_loop();
            }
            ControlCounter = 0;
    3168:	82 43 00 11 	mov	#0,	&0x1100	;r3 As==00
        }
        
        if(SetupDone == TRUE){
    316c:	d2 93 0a 11 	cmp.b	#1,	&0x110a	;r3 As==01
    3170:	15 24       	jz	$+44     	;abs 0x319c
                process_rc();
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
    3172:	d2 93 09 11 	cmp.b	#1,	&0x1109	;r3 As==01
    3176:	09 24       	jz	$+20     	;abs 0x318a
                process_menu();
                MenuCounter = 0;   
            }
        }
        else{
            if(ChannelInput[CH6_CH] > 3500){
    3178:	b2 90 ad 0d 	cmp	#3501,	&0x1188	;#0x0dad
    317c:	88 11 
    317e:	eb 2b       	jnc	$-40     	;abs 0x3156
                MenuVisible = TRUE;
    3180:	d2 43 09 11 	mov.b	#1,	&0x1109	;r3 As==01
                MotorArmed = FALSE;
    3184:	c2 43 0b 11 	mov.b	#0,	&0x110b	;r3 As==00
    3188:	e6 3f       	jmp	$-50     	;abs 0x3156
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
            if(MenuCounter >= MENU_PERIOD){
    318a:	b2 90 45 00 	cmp	#69,	&0x1104	;#0x0045
    318e:	04 11 
    3190:	e2 2b       	jnc	$-58     	;abs 0x3156
                process_menu();
    3192:	b0 12 82 32 	call	#0x3282	
                MenuCounter = 0;   
    3196:	82 43 04 11 	mov	#0,	&0x1104	;r3 As==00
    319a:	dd 3f       	jmp	$-68     	;abs 0x3156
            }
            ControlCounter = 0;
        }
        
        if(SetupDone == TRUE){
            if(RCCounter >= RC_PERIOD){
    319c:	b2 90 13 00 	cmp	#19,	&0x1102	;#0x0013
    31a0:	02 11 
    31a2:	e7 2b       	jnc	$-48     	;abs 0x3172
                process_rc();
    31a4:	b0 12 f4 3d 	call	#0x3df4	
                RCCounter = 0;
    31a8:	82 43 02 11 	mov	#0,	&0x1102	;r3 As==00
    31ac:	e2 3f       	jmp	$-58     	;abs 0x3172
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(ControlCounter >= CONTROL_PERIOD){
            analog_refresh_all();
            if(MotorArmed == TRUE){
                main_loop();
    31ae:	b0 12 36 42 	call	#0x4236	
    31b2:	da 3f       	jmp	$-74     	;abs 0x3168
                MenuVisible = TRUE;
                MotorArmed = FALSE;
            }
        }
    }
}
    31b4:	30 40 90 68 	br	#0x6890	
    31b8:	44 49       	mov.b	r9,	r4	
    31ba:	53 50       	.word	0x5053;	????	Illegal as 2-op instr
    31bc:	4c 41       	mov.b	r1,	r12	
    31be:	59 20       	jnz	$+180    	;abs 0x3272
    31c0:	20 20       	jnz	$+66     	;abs 0x3202
    31c2:	20 20       	jnz	$+66     	;abs 0x3204
    31c4:	20 20       	jnz	$+66     	;abs 0x3206
    31c6:	20 20       	jnz	$+66     	;abs 0x3208
    31c8:	20 20       	jnz	$+66     	;abs 0x320a
    31ca:	20 20       	jnz	$+66     	;abs 0x320c
    31cc:	00 20       	jnz	$+2      	;abs 0x31ce
    31ce:	20 20       	jnz	$+66     	;abs 0x3210
    31d0:	4d 41       	mov.b	r1,	r13	
    31d2:	49 4e       	mov.b	r14,	r9	
    31d4:	20 4d       	br	@r13		
    31d6:	45 4e       	mov.b	r14,	r5	
    31d8:	55 0a       	rlam	#3,	r5	
    31da:	00 20       	jnz	$+2      	;abs 0x31dc
    31dc:	20 52       	add	#4,	r0	;r2 As==10
    31de:	61 64       	addc.b	@r4,	r1	
    31e0:	69 6f       	addc.b	@r15,	r9	
    31e2:	20 72       	subc	#4,	r0	;r2 As==10
    31e4:	61 77       	subc.b	@r7,	r1	
    31e6:	0a 20       	jnz	$+22     	;abs 0x31fc
    31e8:	20 52       	add	#4,	r0	;r2 As==10
    31ea:	61 64       	addc.b	@r4,	r1	
    31ec:	69 6f       	addc.b	@r15,	r9	
    31ee:	20 63       	addc	#2,	r0	;r3 As==10
    31f0:	6f 72       	subc.b	#4,	r15	;r2 As==10
    31f2:	72 65       	addc.b	@r5+,	r2	
    31f4:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    31f6:	0a 20       	jnz	$+22     	;abs 0x320c
    31f8:	20 41       	br	@r1		
    31fa:	6e 61       	addc.b	@r1,	r14	
    31fc:	6c 6f       	addc.b	@r15,	r12	
    31fe:	67 20       	jnz	$+208    	;abs 0x32ce
    3200:	4d 6f       	addc.b	r15,	r13	
    3202:	6e 69       	addc.b	@r9,	r14	
    3204:	74 6f       	addc.b	@r15+,	r4	
    3206:	72 0a 20 20 	mova	r10,	&0x2020	
    320a:	52 65 61 64 	addc.b	25697(r5),r2	;0x6461(r5)
    320e:	79 0a 20 20 	mova	r10,	8224(r9);0x2020(r9)
    3212:	53 65       	.word	0x6553;	????	Illegal as 2-op instr
    3214:	74 20       	jnz	$+234    	;abs 0x32fe
    3216:	69 6e       	addc.b	@r14,	r9	
    3218:	69 74       	subc.b	@r4,	r9	
    321a:	20 73       	subc	#2,	r0	;r3 As==10
    321c:	65 74       	subc.b	@r4,	r5	
    321e:	74 69       	addc.b	@r9+,	r4	
    3220:	6e 67       	addc.b	@r7,	r14	
    3222:	73 00       	.word	0x0073;	????	Illegal as address instr
    3224:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
    3226:	4c 45       	mov.b	r5,	r12	
    3228:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    322a:	20 20       	jnz	$+66     	;abs 0x326c
    322c:	20 20       	jnz	$+66     	;abs 0x326e
    322e:	20 20       	jnz	$+66     	;abs 0x3270
    3230:	20 20       	jnz	$+66     	;abs 0x3272
    3232:	20 20       	jnz	$+66     	;abs 0x3274
    3234:	20 20       	jnz	$+66     	;abs 0x3276
    3236:	00 57       	add	r7,	r0	
    3238:	41 49       	mov.b	r9,	r1	
    323a:	54 20       	jnz	$+170    	;abs 0x32e4
    323c:	50 49 54 43 	br	17236(r9)	;0x4354(r9)
    3240:	48 20       	jnz	$+146    	;abs 0x32d2
    3242:	44 4f       	mov.b	r15,	r4	
    3244:	57 4e 20 20 	mov.b	8224(r14),r7	;0x2020(r14)
    3248:	20 20       	jnz	$+66     	;abs 0x328a
    324a:	00 57       	add	r7,	r0	
    324c:	41 49       	mov.b	r9,	r1	
    324e:	54 20       	jnz	$+170    	;abs 0x32f8
    3250:	50 49 54 43 	br	17236(r9)	;0x4354(r9)
    3254:	48 20       	jnz	$+146    	;abs 0x32e6
    3256:	55 50 20 20 	add.b	0x2020,	r5	;PC rel. 0x0527a
    325a:	20 20       	jnz	$+66     	;abs 0x329c
    325c:	00 57       	add	r7,	r0	
    325e:	41 49       	mov.b	r9,	r1	
    3260:	54 20       	jnz	$+170    	;abs 0x330a
    3262:	43 48       	.word	0x4843;	????	Illegal as 2-op instr
    3264:	37 20       	jnz	$+112    	;abs 0x32d4
    3266:	42 41       	mov.b	r1,	r2	
    3268:	43 4b       	.word	0x4b43;	????	Illegal as 2-op instr
    326a:	20 20       	jnz	$+66     	;abs 0x32ac
    326c:	20 20       	jnz	$+66     	;abs 0x32ae
    326e:	00 57       	add	r7,	r0	
    3270:	41 49       	mov.b	r9,	r1	
    3272:	54 20       	jnz	$+170    	;abs 0x331c
    3274:	52 4f 4c 4c 	mov.b	19532(r15),r2	;0x4c4c(r15)
    3278:	20 4c       	br	@r12		
    327a:	45 46       	mov.b	r6,	r5	
    327c:	54 20       	jnz	$+170    	;abs 0x3326
    327e:	20 20       	jnz	$+66     	;abs 0x32c0
    3280:	20 00 1f 42 	bra	&0x0421f	

00003282 <process_menu>:

void process_menu(void){
    switch(MenuStep){
    3282:	1f 42 0c 11 	mov	&0x110c,r15	
    3286:	3f 92       	cmp	#8,	r15	;r2 As==11
    3288:	4a 2c       	jc	$+150    	;abs 0x331e
    328a:	0f 5f       	rla	r15		
    328c:	10 4f 90 32 	br	12944(r15)	;0x3290(r15)
    3290:	a0 32       	jn	$-702    	;abs 0x2fd2
    3292:	d8 32       	jn	$-590    	;abs 0x3044
    3294:	30 33       	jn	$-414    	;abs 0x30f6
    3296:	76 33       	jn	$-274    	;abs 0x3184
    3298:	b4 33       	jn	$-150    	;abs 0x3202
    329a:	1e 33       	jn	$-450    	;abs 0x30d8
    329c:	d6 33       	jn	$-82     	;abs 0x324a
    329e:	08 34       	jge	$+18     	;abs 0x32b0
        case DISPLAY:
            lcd_goto(0,14);
    32a0:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    32a4:	4f 43       	clr.b	r15		
    32a6:	b0 12 60 4c 	call	#0x4c60	
            printf("DISPLAY             ");
    32aa:	30 12 b8 31 	push	#12728		;#0x31b8
    32ae:	b0 12 96 61 	call	#0x6196	
            
            lcd_clear(BLACK);
    32b2:	4f 43       	clr.b	r15		
    32b4:	b0 12 f4 47 	call	#0x47f4	
            lcd_goto(0,0);
    32b8:	4e 43       	clr.b	r14		
    32ba:	4f 43       	clr.b	r15		
    32bc:	b0 12 60 4c 	call	#0x4c60	
            printf("   MAIN MENU\n\n");
    32c0:	3f 40 cd 31 	mov	#12749,	r15	;#0x31cd
    32c4:	b0 12 c2 67 	call	#0x67c2	
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
    32c8:	30 12 db 31 	push	#12763		;#0x31db
    32cc:	b0 12 96 61 	call	#0x6196	
            MenuStep = SELECT;
    32d0:	92 43 0c 11 	mov	#1,	&0x110c	;r3 As==01
            break;
    32d4:	21 52       	add	#4,	r1	;r2 As==10
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    32d6:	30 41       	ret			
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
            MenuStep = SELECT;
            break;
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
    32d8:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    32dc:	4f 43       	clr.b	r15		
    32de:	b0 12 60 4c 	call	#0x4c60	
            printf("SELECT            ");
    32e2:	30 12 24 32 	push	#12836		;#0x3224
    32e6:	b0 12 96 61 	call	#0x6196	
            
            lcd_goto(0,(int)MenuOption + 2);
    32ea:	5f 42 10 11 	mov.b	&0x1110,r15	
    32ee:	6f 53       	incd.b	r15		
    32f0:	4e 4f       	mov.b	r15,	r14	
    32f2:	4f 43       	clr.b	r15		
    32f4:	b0 12 60 4c 	call	#0x4c60	
            printf(">");
    32f8:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    32fc:	b0 12 2e 46 	call	#0x462e	
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    3300:	21 53       	incd	r1		
    3302:	b2 90 c4 09 	cmp	#2500,	&0x1180	;#0x09c4
    3306:	80 11 
    3308:	0b 2c       	jc	$+24     	;abs 0x3320
                MenuStep = WAIT_PITCH_DOWN;
    330a:	a2 43 0c 11 	mov	#2,	&0x110c	;r3 As==10
                    MenuStep = WAIT_PITCH_UP;
                }
            }
            
            // select
            if(ChannelInput[ROLL_CH] > 3500){
    330e:	b2 90 ad 0d 	cmp	#3501,	&0x117c	;#0x0dad
    3312:	7c 11 
    3314:	04 28       	jnc	$+10     	;abs 0x331e
                MenuStep = WAIT_ROLL_LEFT;
    3316:	b2 40 06 00 	mov	#6,	&0x110c	;#0x0006
    331a:	0c 11 
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    331c:	30 41       	ret			
    331e:	30 41       	ret			
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    3320:	b2 90 ad 0d 	cmp	#3501,	&0x1180	;#0x0dad
    3324:	80 11 
    3326:	f3 2b       	jnc	$-24     	;abs 0x330e
                    MenuStep = WAIT_PITCH_UP;
    3328:	b2 40 03 00 	mov	#3,	&0x110c	;#0x0003
    332c:	0c 11 
    332e:	ef 3f       	jmp	$-32     	;abs 0x330e
            }
            
            break;
        
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    3330:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    3334:	4f 43       	clr.b	r15		
    3336:	b0 12 60 4c 	call	#0x4c60	
            printf("WAIT PITCH DOWN    ");
    333a:	30 12 37 32 	push	#12855		;#0x3237
    333e:	b0 12 96 61 	call	#0x6196	
            
            if(ChannelInput[PITCH_CH] > 2500){
    3342:	21 53       	incd	r1		
    3344:	b2 90 c5 09 	cmp	#2501,	&0x1180	;#0x09c5
    3348:	80 11 
    334a:	e9 2b       	jnc	$-44     	;abs 0x331e
                lcd_goto(0,(int)MenuOption + 2);
    334c:	5f 42 10 11 	mov.b	&0x1110,r15	
    3350:	6f 53       	incd.b	r15		
    3352:	4e 4f       	mov.b	r15,	r14	
    3354:	4f 43       	clr.b	r15		
    3356:	b0 12 60 4c 	call	#0x4c60	
                printf(" ");
    335a:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    335e:	b0 12 2e 46 	call	#0x462e	
                if((int)MenuOption > 0){
    3362:	1f 42 10 11 	mov	&0x1110,r15	
    3366:	1f 93       	cmp	#1,	r15	;r3 As==01
    3368:	03 38       	jl	$+8      	;abs 0x3370
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
    336a:	3f 53       	add	#-1,	r15	;r3 As==11
    336c:	82 4f 10 11 	mov	r15,	&0x1110	
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    3370:	92 43 0c 11 	mov	#1,	&0x110c	;r3 As==01
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3374:	30 41       	ret			
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    3376:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    337a:	4f 43       	clr.b	r15		
    337c:	b0 12 60 4c 	call	#0x4c60	
            printf("WAIT PITCH UP    ");
    3380:	30 12 4b 32 	push	#12875		;#0x324b
    3384:	b0 12 96 61 	call	#0x6196	

            if(ChannelInput[PITCH_CH] < 3500){
    3388:	21 53       	incd	r1		
    338a:	b2 90 ac 0d 	cmp	#3500,	&0x1180	;#0x0dac
    338e:	80 11 
    3390:	c6 2f       	jc	$-114    	;abs 0x331e
                lcd_goto(0,(int)MenuOption + 2);
    3392:	5f 42 10 11 	mov.b	&0x1110,r15	
    3396:	6f 53       	incd.b	r15		
    3398:	4e 4f       	mov.b	r15,	r14	
    339a:	4f 43       	clr.b	r15		
    339c:	b0 12 60 4c 	call	#0x4c60	
                printf(" ");
    33a0:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    33a4:	b0 12 2e 46 	call	#0x462e	
                if((int)MenuOption < MENU_LENGHT){
    33a8:	1f 42 10 11 	mov	&0x1110,r15	
    33ac:	2f 92       	cmp	#4,	r15	;r2 As==10
    33ae:	e0 37       	jge	$-62     	;abs 0x3370
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    33b0:	1f 53       	inc	r15		
    33b2:	dc 3f       	jmp	$-70     	;abs 0x336c
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    33b4:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    33b8:	4f 43       	clr.b	r15		
    33ba:	b0 12 60 4c 	call	#0x4c60	
            printf("WAIT CH7 BACK    ");
    33be:	30 12 5d 32 	push	#12893		;#0x325d
    33c2:	b0 12 96 61 	call	#0x6196	
            
            if(ChannelInput[CH7_CH] < 2500){
    33c6:	21 53       	incd	r1		
    33c8:	b2 90 c4 09 	cmp	#2500,	&0x118a	;#0x09c4
    33cc:	8a 11 
    33ce:	a7 2f       	jc	$-176    	;abs 0x331e
                MenuStep = DISPLAY;
    33d0:	82 43 0c 11 	mov	#0,	&0x110c	;r3 As==00
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    33d4:	30 41       	ret			
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    33d6:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    33da:	4f 43       	clr.b	r15		
    33dc:	b0 12 60 4c 	call	#0x4c60	
            printf("WAIT ROLL LEFT    ");
    33e0:	30 12 6f 32 	push	#12911		;#0x326f
    33e4:	b0 12 96 61 	call	#0x6196	
            
            if(ChannelInput[ROLL_CH] < 3500){
    33e8:	21 53       	incd	r1		
    33ea:	b2 90 ac 0d 	cmp	#3500,	&0x117c	;#0x0dac
    33ee:	7c 11 
    33f0:	96 2f       	jc	$-210    	;abs 0x331e
                lcd_clear(BLACK);
    33f2:	4f 43       	clr.b	r15		
    33f4:	b0 12 f4 47 	call	#0x47f4	
                lcd_goto(0,0);  
    33f8:	4e 43       	clr.b	r14		
    33fa:	4f 43       	clr.b	r15		
    33fc:	b0 12 60 4c 	call	#0x4c60	
                MenuStep = PROCESS_OPTION;
    3400:	b2 40 07 00 	mov	#7,	&0x110c	;#0x0007
    3404:	0c 11 
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3406:	30 41       	ret			
                MenuStep = DISPLAY;
            }
            break;
                    
        case PROCESS_OPTION:
            process_option();
    3408:	b0 12 12 34 	call	#0x3412	
    340c:	88 3f       	jmp	$-238    	;abs 0x331e
    340e:	25 64       	addc	@r4,	r5	
	...

00003412 <process_option>:
        case WAIT_ROLL_RIGHT:
            break;    
    }
}

void process_option(){
    3412:	0b 12       	push	r11		
    int i;
    switch (MenuOption){
    3414:	1f 42 10 11 	mov	&0x1110,r15	
    3418:	2f 93       	cmp	#2,	r15	;r3 As==10
    341a:	3f 24       	jz	$+128    	;abs 0x349a
    341c:	3f 90 03 00 	cmp	#3,	r15	;#0x0003
    3420:	18 2c       	jc	$+50     	;abs 0x3452
    3422:	0f 93       	tst	r15		
    3424:	14 24       	jz	$+42     	;abs 0x344e
    3426:	1f 93       	cmp	#1,	r15	;r3 As==01
    3428:	0e 24       	jz	$+30     	;abs 0x3446
            
            // seta o flag initial setup
            break;          
    }
    
    if(ChannelInput[CH7_CH] > 3500){
    342a:	b2 90 ad 0d 	cmp	#3501,	&0x118a	;#0x0dad
    342e:	8a 11 
    3430:	37 28       	jnc	$+112    	;abs 0x34a0
        MenuStep = WAIT_CH7_BACK;
    3432:	a2 42 0c 11 	mov	#4,	&0x110c	;r2 As==10
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    3436:	82 43 0e 11 	mov	#0,	&0x110e	;r3 As==00
        analog_graph_clear_all();
    343a:	b0 12 9a 43 	call	#0x439a	
        lcd_clear(BLACK);
    343e:	4f 43       	clr.b	r15		
    3440:	b0 12 f4 47 	call	#0x47f4	
    3444:	2d 3c       	jmp	$+92     	;abs 0x34a0
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
    3446:	4f 43       	clr.b	r15		
    3448:	b0 12 2e 41 	call	#0x412e	
            break;
    344c:	ee 3f       	jmp	$-34     	;abs 0x342a

void process_option(){
    int i;
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
    344e:	5f 43       	mov.b	#1,	r15	;r3 As==01
            break;
    3450:	fb 3f       	jmp	$-8      	;abs 0x3448
    3452:	3f 90 03 00 	cmp	#3,	r15	;#0x0003
    3456:	e9 23       	jnz	$-44     	;abs 0x342a
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
    3458:	4f 43       	clr.b	r15		
    345a:	b0 12 f4 47 	call	#0x47f4	
            for(i = 5; i >= 0; i--){ // contagem regressiva
    345e:	3b 40 05 00 	mov	#5,	r11	;#0x0005
                lcd_goto(8,8);
    3462:	7e 42       	mov.b	#8,	r14	;r2 As==11
    3464:	7f 42       	mov.b	#8,	r15	;r2 As==11
    3466:	b0 12 60 4c 	call	#0x4c60	
                printf("%d", i);
    346a:	0b 12       	push	r11		
    346c:	30 12 0e 34 	push	#13326		;#0x340e
    3470:	b0 12 96 61 	call	#0x6196	
                delayms(1000);
    3474:	3f 40 e8 03 	mov	#1000,	r15	;#0x03e8
    3478:	b0 12 04 4e 	call	#0x4e04	
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    347c:	21 52       	add	#4,	r1	;r2 As==10
    347e:	3b 53       	add	#-1,	r11	;r3 As==11
    3480:	3b b0 00 80 	bit	#-32768,r11	;#0x8000
    3484:	ee 37       	jge	$-34     	;abs 0x3462
                lcd_goto(8,8);
                printf("%d", i);
                delayms(1000);
            }
            MotorArmed = TRUE;
    3486:	d2 43 0b 11 	mov.b	#1,	&0x110b	;r3 As==01
            MenuVisible = FALSE;
    348a:	c2 43 09 11 	mov.b	#0,	&0x1109	;r3 As==00
            lcd_clear(BLACK);
    348e:	4f 43       	clr.b	r15		
    3490:	b0 12 f4 47 	call	#0x47f4	
            MenuStep = DISPLAY;
    3494:	82 43 0c 11 	mov	#0,	&0x110c	;r3 As==00
    3498:	c8 3f       	jmp	$-110    	;abs 0x342a
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
    349a:	b0 12 42 36 	call	#0x3642	
            break;
    349e:	c5 3f       	jmp	$-116    	;abs 0x342a
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        analog_graph_clear_all();
        lcd_clear(BLACK);
    }
}
    34a0:	3b 41       	pop	r11		
    34a2:	30 41       	ret			

000034a4 <draw_analog_graph>:

void draw_analog_graph(void){
    34a4:	0b 12       	push	r11		
    34a6:	0a 12       	push	r10		
    34a8:	09 12       	push	r9		
    34aa:	08 12       	push	r8		
    int i, k;
    for(i = 0; i < 8; i++){
    34ac:	09 43       	clr	r9		
        if((1 << i) & AnalogChecked){
    34ae:	5f 42 13 11 	mov.b	&0x1113,r15	
    34b2:	8f 11       	sxt	r15		
    34b4:	0e 49       	mov	r9,	r14	
    34b6:	0e 93       	tst	r14		
    34b8:	03 24       	jz	$+8      	;abs 0x34c0
    34ba:	0f 11       	rra	r15		
    34bc:	1e 83       	dec	r14		
    34be:	fd 23       	jnz	$-4      	;abs 0x34ba
    34c0:	1f f3       	and	#1,	r15	;r3 As==01
    34c2:	6a 24       	jz	$+214    	;abs 0x3598
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
    34c4:	0a 43       	clr	r10		
    34c6:	38 40 b6 11 	mov	#4534,	r8	;#0x11b6
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
    34ca:	02 12       	push	r2		
    34cc:	32 c2       	dint			
    34ce:	03 43       	nop			
    34d0:	82 49 32 01 	mov	r9,	&0x0132	
    34d4:	b2 40 64 00 	mov	#100,	&0x0138	;#0x0064
    34d8:	38 01 
    34da:	1f 42 3a 01 	mov	&0x013a,r15	
    34de:	32 41       	pop	r2		
    34e0:	0f 5a       	add	r10,	r15	
    34e2:	0f 58       	add	r8,	r15	
    34e4:	4b 4a       	mov.b	r10,	r11	
    34e6:	7b 50 0a 00 	add.b	#10,	r11	;#0x000a
    34ea:	0d 43       	clr	r13		
    34ec:	6e 4f       	mov.b	@r15,	r14	
    34ee:	4f 4b       	mov.b	r11,	r15	
    34f0:	b0 12 48 4b 	call	#0x4b48	
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
    34f4:	02 12       	push	r2		
    34f6:	32 c2       	dint			
    34f8:	03 43       	nop			
    34fa:	82 49 32 01 	mov	r9,	&0x0132	
    34fe:	b2 40 64 00 	mov	#100,	&0x0138	;#0x0064
    3502:	38 01 
    3504:	1e 42 3a 01 	mov	&0x013a,r14	
    3508:	32 41       	pop	r2		
    350a:	0e 5a       	add	r10,	r14	
    350c:	0e 58       	add	r8,	r14	
    350e:	02 12       	push	r2		
    3510:	32 c2       	dint			
    3512:	03 43       	nop			
    3514:	82 49 32 01 	mov	r9,	&0x0132	
    3518:	b2 40 64 00 	mov	#100,	&0x0138	;#0x0064
    351c:	38 01 
    351e:	1f 42 3a 01 	mov	&0x013a,r15	
    3522:	32 41       	pop	r2		
    3524:	0f 5a       	add	r10,	r15	
    3526:	0f 58       	add	r8,	r15	
    3528:	de 4f 01 00 	mov.b	1(r15),	0(r14)	;0x0001(r15), 0x0000(r14)
    352c:	00 00 
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
    352e:	5e 49 14 11 	mov.b	4372(r9),r14	;0x1114(r9)
    3532:	8e 11       	sxt	r14		
    3534:	02 12       	push	r2		
    3536:	32 c2       	dint			
    3538:	03 43       	nop			
    353a:	82 49 32 01 	mov	r9,	&0x0132	
    353e:	b2 40 64 00 	mov	#100,	&0x0138	;#0x0064
    3542:	38 01 
    3544:	1f 42 3a 01 	mov	&0x013a,r15	
    3548:	32 41       	pop	r2		
    354a:	0f 5a       	add	r10,	r15	
    354c:	0f 58       	add	r8,	r15	
    354e:	0d 4e       	mov	r14,	r13	
    3550:	6e 4f       	mov.b	@r15,	r14	
    3552:	4f 4b       	mov.b	r11,	r15	
    3554:	b0 12 48 4b 	call	#0x4b48	

void draw_analog_graph(void){
    int i, k;
    for(i = 0; i < 8; i++){
        if((1 << i) & AnalogChecked){
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
    3558:	1a 53       	inc	r10		
    355a:	3a 90 63 00 	cmp	#99,	r10	;#0x0063
    355e:	b5 3b       	jl	$-148    	;abs 0x34ca
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
            }
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
    3560:	02 12       	push	r2		
    3562:	32 c2       	dint			
    3564:	03 43       	nop			
    3566:	82 49 32 01 	mov	r9,	&0x0132	
    356a:	b2 40 64 00 	mov	#100,	&0x0138	;#0x0064
    356e:	38 01 
    3570:	1d 42 3a 01 	mov	&0x013a,r13	
    3574:	32 41       	pop	r2		
    3576:	0f 49       	mov	r9,	r15	
    3578:	0f 5f       	rla	r15		
    357a:	1f 4f a2 11 	mov	4514(r15),r15	;0x11a2(r15)
    357e:	0f 11       	rra	r15		
    3580:	0f 11       	rra	r15		
    3582:	0f 11       	rra	r15		
    3584:	0f 11       	rra	r15		
    3586:	0f 11       	rra	r15		
    3588:	0e 4f       	mov	r15,	r14	
    358a:	12 c3       	clrc			
    358c:	0e 10       	rrc	r14		
    358e:	7f 40 55 00 	mov.b	#85,	r15	;#0x0055
    3592:	4f 8e       	sub.b	r14,	r15	
    3594:	cd 4f 19 12 	mov.b	r15,	4633(r13);0x1219(r13)
    }
}

void draw_analog_graph(void){
    int i, k;
    for(i = 0; i < 8; i++){
    3598:	19 53       	inc	r9		
    359a:	39 92       	cmp	#8,	r9	;r2 As==11
    359c:	88 3b       	jl	$-238    	;abs 0x34ae
            }
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
        }
    }
    
}
    359e:	38 41       	pop	r8		
    35a0:	39 41       	pop	r9		
    35a2:	3a 41       	pop	r10		
    35a4:	3b 41       	pop	r11		
    35a6:	30 41       	ret			

000035a8 <analog_graph_clear>:

void analog_graph_clear(int n){
    35a8:	0b 12       	push	r11		
    35aa:	0a 12       	push	r10		
    35ac:	09 12       	push	r9		
    35ae:	0a 4f       	mov	r15,	r10	
    int i;
    for(i = 0; i < GRAPH_LENGHT; i++){
    35b0:	0b 43       	clr	r11		
    35b2:	39 40 b6 11 	mov	#4534,	r9	;#0x11b6
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
    35b6:	02 12       	push	r2		
    35b8:	32 c2       	dint			
    35ba:	03 43       	nop			
    35bc:	82 4a 32 01 	mov	r10,	&0x0132	
    35c0:	b2 40 64 00 	mov	#100,	&0x0138	;#0x0064
    35c4:	38 01 
    35c6:	1f 42 3a 01 	mov	&0x013a,r15	
    35ca:	32 41       	pop	r2		
    35cc:	0f 5b       	add	r11,	r15	
    35ce:	0f 59       	add	r9,	r15	
    35d0:	4c 4b       	mov.b	r11,	r12	
    35d2:	7c 50 0a 00 	add.b	#10,	r12	;#0x000a
    35d6:	0d 43       	clr	r13		
    35d8:	6e 4f       	mov.b	@r15,	r14	
    35da:	4f 4c       	mov.b	r12,	r15	
    35dc:	b0 12 48 4b 	call	#0x4b48	
        AnalogGraph[n][i] = 0;
    35e0:	02 12       	push	r2		
    35e2:	32 c2       	dint			
    35e4:	03 43       	nop			
    35e6:	82 4a 32 01 	mov	r10,	&0x0132	
    35ea:	b2 40 64 00 	mov	#100,	&0x0138	;#0x0064
    35ee:	38 01 
    35f0:	1f 42 3a 01 	mov	&0x013a,r15	
    35f4:	32 41       	pop	r2		
    35f6:	0f 5b       	add	r11,	r15	
    35f8:	0f 59       	add	r9,	r15	
    35fa:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    
}

void analog_graph_clear(int n){
    int i;
    for(i = 0; i < GRAPH_LENGHT; i++){
    35fe:	1b 53       	inc	r11		
    3600:	3b 90 64 00 	cmp	#100,	r11	;#0x0064
    3604:	d8 3b       	jl	$-78     	;abs 0x35b6
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
        AnalogGraph[n][i] = 0;
    }
}
    3606:	39 41       	pop	r9		
    3608:	3a 41       	pop	r10		
    360a:	3b 41       	pop	r11		
    360c:	30 41       	ret			
    360e:	41 4e       	mov.b	r14,	r1	
    3610:	41 4c       	mov.b	r12,	r1	
    3612:	4f 47       	mov.b	r7,	r15	
    3614:	20 47       	br	@r7		
    3616:	52 41 50 48 	mov.b	18512(r1),r2	;0x4850(r1)
    361a:	20 20       	jnz	$+66     	;abs 0x365c
    361c:	20 00 57 41 	bra	&0x04157	
    3620:	49 54       	add.b	r4,	r9	
    3622:	20 52       	add	#4,	r0	;r2 As==10
    3624:	4f 4c       	mov.b	r12,	r15	
    3626:	4c 20       	jnz	$+154    	;abs 0x36c0
    3628:	52 49 47 48 	mov.b	18503(r9),r2	;0x4847(r9)
    362c:	54 20       	jnz	$+170    	;abs 0x36d6
    362e:	00 57       	add	r7,	r0	
    3630:	41 49       	mov.b	r9,	r1	
    3632:	54 20       	jnz	$+170    	;abs 0x36dc
    3634:	52 4f 4c 4c 	mov.b	19532(r15),r2	;0x4c4c(r15)
    3638:	20 4c       	br	@r12		
    363a:	45 46       	mov.b	r6,	r5	
    363c:	54 20       	jnz	$+170    	;abs 0x36e6
    363e:	20 20       	jnz	$+66     	;abs 0x3680
	...

00003642 <process_analog_menu>:

void process_analog_menu(void){
    draw_analog_graph();
    3642:	b0 12 a4 34 	call	#0x34a4	
    switch(MenuAnalog){
    3646:	1f 42 0e 11 	mov	&0x110e,r15	
    364a:	3f 92       	cmp	#8,	r15	;r2 As==11
    364c:	42 2c       	jc	$+134    	;abs 0x36d2
    364e:	0f 5f       	rla	r15		
    3650:	10 4f 54 36 	br	13908(r15)	;0x3654(r15)
    3654:	64 36       	jge	$-822    	;abs 0x331e
    3656:	92 36       	jge	$-730    	;abs 0x337c
    3658:	e4 36       	jge	$-566    	;abs 0x3422
    365a:	1c 37       	jge	$-454    	;abs 0x3494
    365c:	d2 36       	jge	$-602    	;abs 0x3402
    365e:	58 37       	jge	$-334    	;abs 0x3510
    3660:	84 37       	jge	$-246    	;abs 0x356a
    3662:	d2 36       	jge	$-602    	;abs 0x3408
        case DISPLAY:
            lcd_goto(4,0);
    3664:	4e 43       	clr.b	r14		
    3666:	6f 42       	mov.b	#4,	r15	;r2 As==10
    3668:	b0 12 60 4c 	call	#0x4c60	
            printf("ANALOG GRAPH   ");
    366c:	30 12 0e 36 	push	#13838		;#0x360e
    3670:	b0 12 96 61 	call	#0x6196	
            
            lcd_goto(0,14);
    3674:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    3678:	4f 43       	clr.b	r15		
    367a:	b0 12 60 4c 	call	#0x4c60	
            printf("DISPLAY             ");
    367e:	30 12 b8 31 	push	#12728		;#0x31b8
    3682:	b0 12 96 61 	call	#0x6196	

            refresh_analog_menu();
    3686:	b0 12 cc 37 	call	#0x37cc	
            MenuAnalog = SELECT;
    368a:	92 43 0e 11 	mov	#1,	&0x110e	;r3 As==01
            break;
    368e:	21 52       	add	#4,	r1	;r2 As==10
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3690:	30 41       	ret			

            refresh_analog_menu();
            MenuAnalog = SELECT;
            break;
        case SELECT:
            lcd_goto(0,14);
    3692:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    3696:	4f 43       	clr.b	r15		
    3698:	b0 12 60 4c 	call	#0x4c60	
            printf("SELECT            ");
    369c:	30 12 24 32 	push	#12836		;#0x3224
    36a0:	b0 12 96 61 	call	#0x6196	

            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    36a4:	21 53       	incd	r1		
    36a6:	b2 90 ad 0d 	cmp	#3501,	&0x117c	;#0x0dad
    36aa:	7c 11 
    36ac:	13 28       	jnc	$+40     	;abs 0x36d4
                MenuAnalog = WAIT_ROLL_LEFT;
    36ae:	b2 40 06 00 	mov	#6,	&0x110e	;#0x0006
    36b2:	0e 11 
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
            
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    36b4:	b2 90 c4 09 	cmp	#2500,	&0x1180	;#0x09c4
    36b8:	80 11 
    36ba:	03 2c       	jc	$+8      	;abs 0x36c2
                MenuAnalog = WAIT_PITCH_DOWN;
    36bc:	a2 43 0e 11 	mov	#2,	&0x110e	;r3 As==10
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    36c0:	30 41       	ret			
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    36c2:	b2 90 ad 0d 	cmp	#3501,	&0x1180	;#0x0dad
    36c6:	80 11 
    36c8:	04 28       	jnc	$+10     	;abs 0x36d2
                    MenuAnalog = WAIT_PITCH_UP;
    36ca:	b2 40 03 00 	mov	#3,	&0x110e	;#0x0003
    36ce:	0e 11 
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    36d0:	30 41       	ret			
    36d2:	30 41       	ret			
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
            }
            else{
                if(ChannelInput[ROLL_CH] < 2500){
    36d4:	b2 90 c4 09 	cmp	#2500,	&0x117c	;#0x09c4
    36d8:	7c 11 
    36da:	ec 2f       	jc	$-38     	;abs 0x36b4
                    MenuAnalog = WAIT_ROLL_RIGHT;
    36dc:	b2 40 05 00 	mov	#5,	&0x110e	;#0x0005
    36e0:	0e 11 
    36e2:	e8 3f       	jmp	$-46     	;abs 0x36b4
                }
            }
            
            break;
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    36e4:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    36e8:	4f 43       	clr.b	r15		
    36ea:	b0 12 60 4c 	call	#0x4c60	
            printf("WAIT PITCH DOWN    ");
    36ee:	30 12 37 32 	push	#12855		;#0x3237
    36f2:	b0 12 96 61 	call	#0x6196	

            if(ChannelInput[PITCH_CH] > 2500){
    36f6:	21 53       	incd	r1		
    36f8:	b2 90 c5 09 	cmp	#2501,	&0x1180	;#0x09c5
    36fc:	80 11 
    36fe:	e9 2b       	jnc	$-44     	;abs 0x36d2
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    3700:	1f 43       	mov	#1,	r15	;r3 As==01
    3702:	5e 42 12 11 	mov.b	&0x1112,r14	
    3706:	8e 11       	sxt	r14		
    3708:	0e 93       	tst	r14		
    370a:	03 24       	jz	$+8      	;abs 0x3712
    370c:	0f 5f       	rla	r15		
    370e:	1e 83       	dec	r14		
    3710:	fd 23       	jnz	$-4      	;abs 0x370c
    3712:	c2 ef 13 11 	xor.b	r15,	&0x1113	

                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
                        AnalogSelect--;
                    }
                    MenuAnalog = DISPLAY;
    3716:	82 43 0e 11 	mov	#0,	&0x110e	;r3 As==00
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    371a:	30 41       	ret			
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    371c:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    3720:	4f 43       	clr.b	r15		
    3722:	b0 12 60 4c 	call	#0x4c60	
            printf("WAIT PITCH UP    ");
    3726:	30 12 4b 32 	push	#12875		;#0x324b
    372a:	b0 12 96 61 	call	#0x6196	

            if(ChannelInput[PITCH_CH] < 3500){
    372e:	21 53       	incd	r1		
    3730:	b2 90 ac 0d 	cmp	#3500,	&0x1180	;#0x0dac
    3734:	80 11 
    3736:	cd 2f       	jc	$-100    	;abs 0x36d2
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    3738:	5e 42 12 11 	mov.b	&0x1112,r14	
    373c:	8e 11       	sxt	r14		
    373e:	1f 43       	mov	#1,	r15	;r3 As==01
    3740:	0d 4e       	mov	r14,	r13	
    3742:	0d 93       	tst	r13		
    3744:	03 24       	jz	$+8      	;abs 0x374c
    3746:	0f 5f       	rla	r15		
    3748:	1d 83       	dec	r13		
    374a:	fd 23       	jnz	$-4      	;abs 0x3746
    374c:	c2 ef 13 11 	xor.b	r15,	&0x1113	
                analog_graph_clear(AnalogSelect);
    3750:	0f 4e       	mov	r14,	r15	
    3752:	b0 12 a8 35 	call	#0x35a8	
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3756:	df 3f       	jmp	$-64     	;abs 0x3716
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
    3758:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    375c:	4f 43       	clr.b	r15		
    375e:	b0 12 60 4c 	call	#0x4c60	
                printf("WAIT ROLL RIGHT ");
    3762:	30 12 1e 36 	push	#13854		;#0x361e
    3766:	b0 12 96 61 	call	#0x6196	

                if(ChannelInput[PITCH_CH] < 3500){
    376a:	21 53       	incd	r1		
    376c:	b2 90 ac 0d 	cmp	#3500,	&0x1180	;#0x0dac
    3770:	80 11 
    3772:	af 2f       	jc	$-160    	;abs 0x36d2
                    if(AnalogSelect > 0){
    3774:	5f 42 12 11 	mov.b	&0x1112,r15	
    3778:	5f 93       	cmp.b	#1,	r15	;r3 As==01
    377a:	cd 3b       	jl	$-100    	;abs 0x3716
                        AnalogSelect--;
    377c:	7f 53       	add.b	#-1,	r15	;r3 As==11
    377e:	c2 4f 12 11 	mov.b	r15,	&0x1112	
    3782:	c9 3f       	jmp	$-108    	;abs 0x3716
                    MenuAnalog = DISPLAY;
                }
            break;
            
        case WAIT_ROLL_LEFT:
                lcd_goto(0,14);
    3784:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    3788:	4f 43       	clr.b	r15		
    378a:	b0 12 60 4c 	call	#0x4c60	
                printf("WAIT ROLL LEFT   ");
    378e:	30 12 2f 36 	push	#13871		;#0x362f
    3792:	b0 12 96 61 	call	#0x6196	
        
                if(ChannelInput[PITCH_CH] > 2500){
    3796:	21 53       	incd	r1		
    3798:	b2 90 c5 09 	cmp	#2501,	&0x1180	;#0x09c5
    379c:	80 11 
    379e:	99 2b       	jnc	$-204    	;abs 0x36d2
                   if(AnalogSelect < 7){
    37a0:	5f 42 12 11 	mov.b	&0x1112,r15	
    37a4:	7f 90 07 00 	cmp.b	#7,	r15	;#0x0007
    37a8:	03 34       	jge	$+8      	;abs 0x37b0
                        AnalogSelect++;
    37aa:	5f 53       	inc.b	r15		
    37ac:	c2 4f 12 11 	mov.b	r15,	&0x1112	
                    }
                    MenuAnalog = DISPLAY;
    37b0:	82 43 0e 11 	mov	#0,	&0x110e	;r3 As==00
    37b4:	8e 3f       	jmp	$-226    	;abs 0x36d2
    37b6:	20 20       	jnz	$+66     	;abs 0x37f8
    37b8:	20 20       	jnz	$+66     	;abs 0x37fa
    37ba:	20 20       	jnz	$+66     	;abs 0x37fc
    37bc:	20 20       	jnz	$+66     	;abs 0x37fe
    37be:	20 20       	jnz	$+66     	;abs 0x3800
    37c0:	20 20       	jnz	$+66     	;abs 0x3802
    37c2:	20 20       	jnz	$+66     	;abs 0x3804
    37c4:	20 20       	jnz	$+66     	;abs 0x3806
    37c6:	20 20       	jnz	$+66     	;abs 0x3808
    37c8:	20 20       	jnz	$+66     	;abs 0x380a
	...

000037cc <refresh_analog_menu>:
        case WAIT_CH7_BACK:
            break;
    }
}

void refresh_analog_menu(void){
    37cc:	0b 12       	push	r11		
    int i;
    lcd_goto(1,12);
    37ce:	7e 40 0c 00 	mov.b	#12,	r14	;#0x000c
    37d2:	5f 43       	mov.b	#1,	r15	;r3 As==01
    37d4:	b0 12 60 4c 	call	#0x4c60	
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    37d8:	0b 43       	clr	r11		
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
    37da:	5f 42 13 11 	mov.b	&0x1113,r15	
    37de:	8f 11       	sxt	r15		
    37e0:	0e 4b       	mov	r11,	r14	
    37e2:	0e 93       	tst	r14		
    37e4:	03 24       	jz	$+8      	;abs 0x37ec
    37e6:	0f 11       	rra	r15		
    37e8:	1e 83       	dec	r14		
    37ea:	fd 23       	jnz	$-4      	;abs 0x37e6
    37ec:	1f f3       	and	#1,	r15	;r3 As==01
    37ee:	28 24       	jz	$+82     	;abs 0x3840
            color_back = LIME;          // a cor do fundo muda para azul
    37f0:	f2 40 3c 00 	mov.b	#60,	&0x118e	;#0x003c
    37f4:	8e 11 
            color_fore = BLACK;
    37f6:	c2 43 8f 11 	mov.b	#0,	&0x118f	;r3 As==00
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    37fa:	5f 42 12 11 	mov.b	&0x1112,r15	
    37fe:	8f 11       	sxt	r15		
    3800:	0f 9b       	cmp	r11,	r15	
    3802:	1a 24       	jz	$+54     	;abs 0x3838
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
    3804:	f2 90 3c 00 	cmp.b	#60,	&0x118e	;#0x003c
    3808:	8e 11 
    380a:	13 24       	jz	$+40     	;abs 0x3832
                color_fore = BLACK;
            }
        }                               
        
        printf("%d",i);
    380c:	0b 12       	push	r11		
    380e:	30 12 0e 34 	push	#13326		;#0x340e
    3812:	b0 12 96 61 	call	#0x6196	
        // ajusta as cores para o normal
        color_fore = LIME;
    3816:	f2 40 3c 00 	mov.b	#60,	&0x118f	;#0x003c
    381a:	8f 11 
        color_back = BLACK;
    381c:	c2 43 8e 11 	mov.b	#0,	&0x118e	;r3 As==00
        printf(" ");
    3820:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    3824:	b0 12 2e 46 	call	#0x462e	
}

void refresh_analog_menu(void){
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    3828:	21 52       	add	#4,	r1	;r2 As==10
    382a:	1b 53       	inc	r11		
    382c:	3b 92       	cmp	#8,	r11	;r2 As==11
    382e:	d5 3b       	jl	$-84     	;abs 0x37da
    3830:	0d 3c       	jmp	$+28     	;abs 0x384c
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
                color_fore = BLACK;
    3832:	c2 43 8f 11 	mov.b	#0,	&0x118f	;r3 As==00
    3836:	ea 3f       	jmp	$-42     	;abs 0x380c
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
    3838:	f2 40 e0 ff 	mov.b	#-32,	&0x118f	;#0xffe0
    383c:	8f 11 
    383e:	e6 3f       	jmp	$-50     	;abs 0x380c
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
            color_fore = BLACK;
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
    3840:	c2 43 8e 11 	mov.b	#0,	&0x118e	;r3 As==00
            color_fore = LIME;
    3844:	f2 40 3c 00 	mov.b	#60,	&0x118f	;#0x003c
    3848:	8f 11 
    384a:	d7 3f       	jmp	$-80     	;abs 0x37fa
        // ajusta as cores para o normal
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
    384c:	30 12 b6 37 	push	#14262		;#0x37b6
    3850:	b0 12 96 61 	call	#0x6196	
    3854:	21 53       	incd	r1		
}
    3856:	3b 41       	pop	r11		
    3858:	30 41       	ret			

0000385a <TIMERA0_ISR_HOOK>:

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    385a:	92 53 00 11 	inc	&0x1100	
    RCCounter++;
    385e:	92 53 02 11 	inc	&0x1102	
    MenuCounter++;
    3862:	92 53 04 11 	inc	&0x1104	
}
    3866:	00 13       	reti			

00003868 <clock_init>:
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    3868:	c2 43 58 00 	mov.b	#0,	&0x0058	;r3 As==00
    
    DCOCTL = 0x77;      
    386c:	f2 40 77 00 	mov.b	#119,	&0x0056	;#0x0077
    3870:	56 00 
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    BCSCTL1 = 0xcf;     
    3872:	f2 40 cf ff 	mov.b	#-49,	&0x0057	;#0xffcf
    3876:	57 00 
     * 
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
     * XCAP_0 -- ~1 pF
     */
    BCSCTL3 = 0xa0;
    3878:	f2 40 a0 ff 	mov.b	#-96,	&0x0053	;#0xffa0
    387c:	53 00 
}
    387e:	30 41       	ret			

00003880 <p1_init>:

void p1_init(){
        /* Port 1 Output Register */
    P1OUT = PPM_P1MASK;
    3880:	f2 43 21 00 	mov.b	#-1,	&0x0021	;r3 As==11

    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;
    3884:	f2 43 27 00 	mov.b	#-1,	&0x0027	;r3 As==11

    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida
    3888:	c2 43 24 00 	mov.b	#0,	&0x0024	;r3 As==00

    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;
    388c:	c2 43 23 00 	mov.b	#0,	&0x0023	;r3 As==00

    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;
    3890:	f2 43 25 00 	mov.b	#-1,	&0x0025	;r3 As==11

}
    3894:	30 41       	ret			

00003896 <timer_a3_init>:
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    3896:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    389a:	62 01 

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;
    389c:	b2 40 a1 0f 	mov	#4001,	&0x0172	;#0x0fa1
    38a0:	72 01 
     * 
     * TASSEL_2 -- SMCLK
     * ID_3 -- Divider - /8
     * MC_1 -- Up Mode
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
    38a2:	b2 40 d0 02 	mov	#720,	&0x0160	;#0x02d0
    38a6:	60 01 
}
    38a8:	30 41       	ret			

000038aa <PORT1_ISR_HOOK>:

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    38aa:	0f 12       	push	r15		
    38ac:	0e 12       	push	r14		
    38ae:	0d 12       	push	r13		
    38b0:	0c 12       	push	r12		
    38b2:	0b 12       	push	r11		
    38b4:	0a 12       	push	r10		
    38b6:	09 12       	push	r9		
    38b8:	08 12       	push	r8		
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    38ba:	1a 42 70 01 	mov	&0x0170,r10	
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    38be:	0b 43       	clr	r11		
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    38c0:	1d 43       	mov	#1,	r13	;r3 As==01
    38c2:	39 40 5c 11 	mov	#4444,	r9	;#0x115c
    38c6:	08 49       	mov	r9,	r8	
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    38c8:	5f 42 23 00 	mov.b	&0x0023,r15	
    38cc:	4f fd       	and.b	r13,	r15	
    38ce:	22 24       	jz	$+70     	;abs 0x3914
            if(!(P1IES & PPM_ch_counter)){ // low to high
    38d0:	5f 42 24 00 	mov.b	&0x0024,r15	
    38d4:	7f f3       	and.b	#-1,	r15	;r3 As==11
    38d6:	0f fd       	and	r13,	r15	
    38d8:	0a 20       	jnz	$+22     	;abs 0x38ee
                TimeUpEdge[channel_num] = PPM_aux;
    38da:	0f 4b       	mov	r11,	r15	
    38dc:	0f 5f       	rla	r15		
    38de:	0f 58       	add	r8,	r15	
    38e0:	8f 4a 00 00 	mov	r10,	0(r15)	;0x0000(r15)
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    38e4:	c2 dd 24 00 	bis.b	r13,	&0x0024	
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
    38e8:	c2 cd 23 00 	bic.b	r13,	&0x0023	
    38ec:	13 3c       	jmp	$+40     	;abs 0x3914
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
    38ee:	0c 4b       	mov	r11,	r12	
    38f0:	0c 5c       	rla	r12		
    38f2:	0e 4c       	mov	r12,	r14	
    38f4:	0e 59       	add	r9,	r14	
    38f6:	2f 4e       	mov	@r14,	r15	
    38f8:	0a 9f       	cmp	r15,	r10	
    38fa:	09 2c       	jc	$+20     	;abs 0x390e
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    38fc:	1f 42 72 01 	mov	&0x0172,r15	
    3900:	2f 8e       	sub	@r14,	r15	
    3902:	0f 5a       	add	r10,	r15	
    3904:	8c 4f 6c 11 	mov	r15,	4460(r12);0x116c(r12)
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
    3908:	c2 cd 24 00 	bic.b	r13,	&0x0024	
    390c:	ed 3f       	jmp	$-36     	;abs 0x38e8
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    390e:	0f 4a       	mov	r10,	r15	
    3910:	2f 8e       	sub	@r14,	r15	
    3912:	f8 3f       	jmp	$-14     	;abs 0x3904
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    3914:	1b 53       	inc	r11		

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    3916:	0d 5d       	rla	r13		
    3918:	3d 90 81 00 	cmp	#129,	r13	;#0x0081
    391c:	d5 3b       	jl	$-84     	;abs 0x38c8
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}
    391e:	38 41       	pop	r8		
    3920:	39 41       	pop	r9		
    3922:	3a 41       	pop	r10		
    3924:	3b 41       	pop	r11		
    3926:	3c 41       	pop	r12		
    3928:	3d 41       	pop	r13		
    392a:	3e 41       	pop	r14		
    392c:	3f 41       	pop	r15		
    392e:	00 13       	reti			
    3930:	4d 4f       	mov.b	r15,	r13	
    3932:	56 45 20 53 	mov.b	21280(r5),r6	;0x5320(r5)
    3936:	54 49 43 4b 	mov.b	19267(r9),r4	;0x4b43(r9)
    393a:	53 0a       	rlam	#3,	#0	;r3 As==00
    393c:	41 4c       	mov.b	r12,	r1	
    393e:	4c 20       	jnz	$+154    	;abs 0x39d8
    3940:	44 49       	mov.b	r9,	r4	
    3942:	52 45 43 54 	mov.b	21571(r5),r2	;0x5443(r5)
    3946:	49 4f       	mov.b	r15,	r9	
    3948:	4e 53       	add.b	#0,	r14	;r3 As==00
    394a:	00 25       	jz	$+514    	;abs 0x3b4c
    394c:	64 20       	jnz	$+202    	;abs 0x3a16
    394e:	00 50       	rla	r0		
    3950:	61 72       	subc.b	#4,	r1	;r2 As==10
    3952:	61 6d       	addc.b	@r13,	r1	
    3954:	73 20       	jnz	$+232    	;abs 0x3a3c
    3956:	73 61       	.word	0x6173;	????	Illegal as 2-op instr
    3958:	76 65       	addc.b	@r5+,	r6	
    395a:	64 2e       	jc	$-822    	;abs 0x3624
	...

0000395e <calibrate_radio>:

void calibrate_radio(void){
    395e:	0b 12       	push	r11		
    3960:	0a 12       	push	r10		
    3962:	09 12       	push	r9		
    3964:	08 12       	push	r8		
    3966:	07 12       	push	r7		
    3968:	06 12       	push	r6		
    396a:	05 12       	push	r5		
    396c:	31 80 44 00 	sub	#68,	r1	;#0x0044
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    3970:	d2 93 0b 11 	cmp.b	#1,	&0x110b	;r3 As==01
    3974:	02 20       	jnz	$+6      	;abs 0x397a
    3976:	30 40 e0 3d 	br	#0x3de0	
        return;
    }

    int i = 0, k;    
    397a:	06 43       	clr	r6		
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    397c:	3e 40 20 00 	mov	#32,	r14	;#0x0020
    3980:	0f 41       	mov	r1,	r15	
    3982:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    3986:	1f 53       	inc	r15		
    3988:	1e 83       	dec	r14		
    398a:	fb 23       	jnz	$-8      	;abs 0x3982
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    398c:	3e 40 20 00 	mov	#32,	r14	;#0x0020
    3990:	0f 41       	mov	r1,	r15	
    3992:	3f 50 20 00 	add	#32,	r15	;#0x0020
    3996:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    399a:	1f 53       	inc	r15		
    399c:	1e 83       	dec	r14		
    399e:	fb 23       	jnz	$-8      	;abs 0x3996
    fourbytes ValorAux;        
    
    lcd_goto(2,5);
    39a0:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    39a4:	6f 43       	mov.b	#2,	r15	;r3 As==10
    39a6:	b0 12 60 4c 	call	#0x4c60	
    color_fore = RED;
    39aa:	f2 40 e0 ff 	mov.b	#-32,	&0x118f	;#0xffe0
    39ae:	8f 11 
    printf("MOVE STICKS\nALL DIRECTIONS");
    39b0:	30 12 30 39 	push	#14640		;#0x3930
    39b4:	b0 12 96 61 	call	#0x6196	
    color_fore = LIME;
    39b8:	f2 40 3c 00 	mov.b	#60,	&0x118f	;#0x003c
    39bc:	8f 11 
    delayms(3000);
    39be:	3f 40 b8 0b 	mov	#3000,	r15	;#0x0bb8
    39c2:	b0 12 04 4e 	call	#0x4e04	
    lcd_clear(BLACK);
    39c6:	4f 43       	clr.b	r15		
    39c8:	b0 12 f4 47 	call	#0x47f4	

    for(i = 0; i < 8; i++){ // zera offset e slope
    39cc:	21 53       	incd	r1		
    39ce:	3c 40 3c 11 	mov	#4412,	r12	;#0x113c
    39d2:	3d 40 1c 11 	mov	#4380,	r13	;#0x111c
        PPMOffset[i] = 0;
    39d6:	0f 46       	mov	r6,	r15	
    39d8:	0f 5f       	rla	r15		
    39da:	0f 5f       	rla	r15		
    39dc:	0e 4f       	mov	r15,	r14	
    39de:	0e 5c       	add	r12,	r14	
    39e0:	8e 43 00 00 	mov	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    39e4:	8e 43 02 00 	mov	#0,	2(r14)	;r3 As==00, 0x0002(r14)
        PPMSlope[i] = 1;
    39e8:	0f 5d       	add	r13,	r15	
    39ea:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    39ee:	bf 40 80 3f 	mov	#16256,	2(r15)	;#0x3f80, 0x0002(r15)
    39f2:	02 00 
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
    39f4:	16 53       	inc	r6		
    39f6:	36 92       	cmp	#8,	r6	;r2 As==11
    39f8:	ee 3b       	jl	$-34     	;abs 0x39d6
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    39fa:	06 43       	clr	r6		
        PPMMin[i] = PPMValue[i];
    39fc:	0a 46       	mov	r6,	r10	
    39fe:	0a 5a       	rla	r10		
    3a00:	0a 5a       	rla	r10		
    3a02:	0a 51       	add	r1,	r10	
    3a04:	0f 46       	mov	r6,	r15	
    3a06:	0f 5f       	rla	r15		
    3a08:	1b 4f 6c 11 	mov	4460(r15),r11	;0x116c(r15)
    3a0c:	0e 4b       	mov	r11,	r14	
    3a0e:	0f 4e       	mov	r14,	r15	
    3a10:	0f 5f       	rla	r15		
    3a12:	0f 7f       	subc	r15,	r15	
    3a14:	3f e3       	inv	r15		
    3a16:	b0 12 a2 5c 	call	#0x5ca2	
    3a1a:	0b 93       	tst	r11		
    3a1c:	db 39       	jl	$+952    	;abs 0x3dd4
    3a1e:	8a 4e 00 00 	mov	r14,	0(r10)	;0x0000(r10)
    3a22:	8a 4f 02 00 	mov	r15,	2(r10)	;0x0002(r10)
        PPMMax[i] = PPMMin[i];
    3a26:	8a 4e 20 00 	mov	r14,	32(r10)	;0x0020(r10)
    3a2a:	8a 4f 22 00 	mov	r15,	34(r10)	;0x0022(r10)
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    3a2e:	16 53       	inc	r6		
    3a30:	36 92       	cmp	#8,	r6	;r2 As==11
    3a32:	e4 3b       	jl	$-54     	;abs 0x39fc
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    3a34:	35 40 78 00 	mov	#120,	r5	;#0x0078
        draw_rc_inputs(1);
    3a38:	5f 43       	mov.b	#1,	r15	;r3 As==01
    3a3a:	b0 12 2e 41 	call	#0x412e	
        lcd_goto(0, 14);
    3a3e:	7e 40 0e 00 	mov.b	#14,	r14	;#0x000e
    3a42:	4f 43       	clr.b	r15		
    3a44:	b0 12 60 4c 	call	#0x4c60	
        printf("%d ", k);
    3a48:	05 12       	push	r5		
    3a4a:	30 12 4b 39 	push	#14667		;#0x394b
    3a4e:	b0 12 96 61 	call	#0x6196	
        delayms(1);
    3a52:	1f 43       	mov	#1,	r15	;r3 As==01
    3a54:	b0 12 04 4e 	call	#0x4e04	
        for(i = 0; i < 8; i++){ // pega max min
    3a58:	06 43       	clr	r6		
    3a5a:	21 52       	add	#4,	r1	;r2 As==10
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    3a5c:	0a 46       	mov	r6,	r10	
    3a5e:	0a 5a       	rla	r10		
    3a60:	0a 5a       	rla	r10		
    3a62:	0a 51       	add	r1,	r10	
    3a64:	09 46       	mov	r6,	r9	
    3a66:	09 59       	rla	r9		
    3a68:	1b 49 6c 11 	mov	4460(r9),r11	;0x116c(r9)
    3a6c:	0e 4b       	mov	r11,	r14	
    3a6e:	0f 4e       	mov	r14,	r15	
    3a70:	0f 5f       	rla	r15		
    3a72:	0f 7f       	subc	r15,	r15	
    3a74:	3f e3       	inv	r15		
    3a76:	b0 12 a2 5c 	call	#0x5ca2	
    3a7a:	07 4e       	mov	r14,	r7	
    3a7c:	08 4f       	mov	r15,	r8	
    3a7e:	0b 93       	tst	r11		
    3a80:	a1 39       	jl	$+836    	;abs 0x3dc4
    3a82:	1e 4a 20 00 	mov	32(r10),r14	;0x0020(r10)
    3a86:	1f 4a 22 00 	mov	34(r10),r15	;0x0022(r10)
    3a8a:	0c 47       	mov	r7,	r12	
    3a8c:	0d 48       	mov	r8,	r13	
    3a8e:	b0 12 40 5c 	call	#0x5c40	
    3a92:	0f 93       	tst	r15		
    3a94:	81 39       	jl	$+772    	;abs 0x3d98
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
    3a96:	0a 49       	mov	r9,	r10	
    3a98:	0a 5a       	rla	r10		
    3a9a:	0a 51       	add	r1,	r10	
    3a9c:	09 46       	mov	r6,	r9	
    3a9e:	09 59       	rla	r9		
    3aa0:	1b 49 6c 11 	mov	4460(r9),r11	;0x116c(r9)
    3aa4:	0e 4b       	mov	r11,	r14	
    3aa6:	0f 4e       	mov	r14,	r15	
    3aa8:	0f 5f       	rla	r15		
    3aaa:	0f 7f       	subc	r15,	r15	
    3aac:	3f e3       	inv	r15		
    3aae:	b0 12 a2 5c 	call	#0x5ca2	
    3ab2:	07 4e       	mov	r14,	r7	
    3ab4:	08 4f       	mov	r15,	r8	
    3ab6:	0b 93       	tst	r11		
    3ab8:	67 39       	jl	$+720    	;abs 0x3d88
    3aba:	3e 4a       	mov	@r10+,	r14	
    3abc:	3f 4a       	mov	@r10+,	r15	
    3abe:	2a 82       	sub	#4,	r10	;r2 As==10
    3ac0:	0c 47       	mov	r7,	r12	
    3ac2:	0d 48       	mov	r8,	r13	
    3ac4:	b0 12 7c 5b 	call	#0x5b7c	
    3ac8:	1f 93       	cmp	#1,	r15	;r3 As==01
    3aca:	0f 38       	jl	$+32     	;abs 0x3aea
                PPMMin[i] = PPMValue[i];
    3acc:	1b 49 6c 11 	mov	4460(r9),r11	;0x116c(r9)
    3ad0:	0e 4b       	mov	r11,	r14	
    3ad2:	0f 4e       	mov	r14,	r15	
    3ad4:	0f 5f       	rla	r15		
    3ad6:	0f 7f       	subc	r15,	r15	
    3ad8:	3f e3       	inv	r15		
    3ada:	b0 12 a2 5c 	call	#0x5ca2	
    3ade:	0b 93       	tst	r11		
    3ae0:	4d 39       	jl	$+668    	;abs 0x3d7c
    3ae2:	8a 4e 00 00 	mov	r14,	0(r10)	;0x0000(r10)
    3ae6:	8a 4f 02 00 	mov	r15,	2(r10)	;0x0002(r10)
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
    3aea:	16 53       	inc	r6		
    3aec:	36 92       	cmp	#8,	r6	;r2 As==11
    3aee:	b6 3b       	jl	$-146    	;abs 0x3a5c
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    3af0:	35 53       	add	#-1,	r5	;r3 As==11
    3af2:	15 93       	cmp	#1,	r5	;r3 As==01
    3af4:	a1 37       	jge	$-188    	;abs 0x3a38
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    lcd_clear(BLACK);
    3af6:	4f 43       	clr.b	r15		
    3af8:	b0 12 f4 47 	call	#0x47f4	
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
    3afc:	06 43       	clr	r6		
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
    3afe:	07 46       	mov	r6,	r7	
    3b00:	07 57       	rla	r7		
    3b02:	07 57       	rla	r7		
    3b04:	0f 47       	mov	r7,	r15	
    3b06:	0f 51       	add	r1,	r15	
    3b08:	1a 4f 20 00 	mov	32(r15),r10	;0x0020(r15)
    3b0c:	1b 4f 22 00 	mov	34(r15),r11	;0x0022(r15)
    3b10:	38 4f       	mov	@r15+,	r8	
    3b12:	39 4f       	mov	@r15+,	r9	
    3b14:	0c 48       	mov	r8,	r12	
    3b16:	0d 49       	mov	r9,	r13	
    3b18:	0e 4a       	mov	r10,	r14	
    3b1a:	0f 4b       	mov	r11,	r15	
    3b1c:	b0 12 50 57 	call	#0x5750	
    3b20:	0c 4e       	mov	r14,	r12	
    3b22:	0d 4f       	mov	r15,	r13	
    3b24:	0e 43       	clr	r14		
    3b26:	3f 40 fa 44 	mov	#17658,	r15	;#0x44fa
    3b2a:	b0 12 0a 5a 	call	#0x5a0a	
    3b2e:	87 4e 1c 11 	mov	r14,	4380(r7);0x111c(r7)
    3b32:	87 4f 1e 11 	mov	r15,	4382(r7);0x111e(r7)
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    3b36:	0c 48       	mov	r8,	r12	
    3b38:	0d 49       	mov	r9,	r13	
    3b3a:	b0 12 a0 57 	call	#0x57a0	
    3b3e:	0c 4e       	mov	r14,	r12	
    3b40:	0d 4f       	mov	r15,	r13	
    3b42:	0e 43       	clr	r14		
    3b44:	3f 40 fa 44 	mov	#17658,	r15	;#0x44fa
    3b48:	b0 12 50 57 	call	#0x5750	
    3b4c:	87 4e 3c 11 	mov	r14,	4412(r7);0x113c(r7)
    3b50:	87 4f 3e 11 	mov	r15,	4414(r7);0x113e(r7)
        }
    }
    
    lcd_clear(BLACK);
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
    3b54:	16 53       	inc	r6		
    3b56:	36 92       	cmp	#8,	r6	;r2 As==11
    3b58:	d2 3b       	jl	$-90     	;abs 0x3afe
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
    3b5a:	c2 93 90 11 	tst.b	&0x1190	
    3b5e:	40 25       	jz	$+642    	;abs 0x3de0
        i2c_change_address(EEPROM_I2C_ADDR);
    3b60:	7f 40 a6 ff 	mov.b	#-90,	r15	;#0xffa6
    3b64:	b0 12 34 4e 	call	#0x4e34	
        
        // grava yaw slope 
        ValorAux.f = PPMSlope[YAW_CH];
    3b68:	91 42 2c 11 	mov	&0x112c,64(r1)	;0x0040(r1)
    3b6c:	40 00 
    3b6e:	91 42 2e 11 	mov	&0x112e,66(r1)	;0x0042(r1)
    3b72:	42 00 
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    3b74:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3b76:	0e 41       	mov	r1,	r14	
    3b78:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3b7c:	3f 40 0c 00 	mov	#12,	r15	;#0x000c
    3b80:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3b84:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3b88:	b0 12 04 4e 	call	#0x4e04	
        
        // grava throttle slope 
        ValorAux.f = PPMSlope[THROTTLE_CH];
    3b8c:	91 42 28 11 	mov	&0x1128,64(r1)	;0x0040(r1)
    3b90:	40 00 
    3b92:	91 42 2a 11 	mov	&0x112a,66(r1)	;0x0042(r1)
    3b96:	42 00 
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    3b98:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3b9a:	0e 41       	mov	r1,	r14	
    3b9c:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3ba0:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    3ba4:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3ba8:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3bac:	b0 12 04 4e 	call	#0x4e04	
        
        // grava pitch slope 
        ValorAux.f = PPMSlope[PITCH_CH];
    3bb0:	91 42 24 11 	mov	&0x1124,64(r1)	;0x0040(r1)
    3bb4:	40 00 
    3bb6:	91 42 26 11 	mov	&0x1126,66(r1)	;0x0042(r1)
    3bba:	42 00 
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    3bbc:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3bbe:	0e 41       	mov	r1,	r14	
    3bc0:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3bc4:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    3bc8:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3bcc:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3bd0:	b0 12 04 4e 	call	#0x4e04	
        
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
    3bd4:	91 42 1c 11 	mov	&0x111c,64(r1)	;0x0040(r1)
    3bd8:	40 00 
    3bda:	91 42 1e 11 	mov	&0x111e,66(r1)	;0x0042(r1)
    3bde:	42 00 
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    3be0:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3be2:	0e 41       	mov	r1,	r14	
    3be4:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3be8:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    3bec:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3bf0:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3bf4:	b0 12 04 4e 	call	#0x4e04	
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
    3bf8:	91 42 30 11 	mov	&0x1130,64(r1)	;0x0040(r1)
    3bfc:	40 00 
    3bfe:	91 42 32 11 	mov	&0x1132,66(r1)	;0x0042(r1)
    3c02:	42 00 
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    3c04:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3c06:	0e 41       	mov	r1,	r14	
    3c08:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3c0c:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    3c10:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3c14:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3c18:	b0 12 04 4e 	call	#0x4e04	
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    3c1c:	91 42 34 11 	mov	&0x1134,64(r1)	;0x0040(r1)
    3c20:	40 00 
    3c22:	91 42 36 11 	mov	&0x1136,66(r1)	;0x0042(r1)
    3c26:	42 00 
        i2c_write16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    3c28:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3c2a:	0e 41       	mov	r1,	r14	
    3c2c:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3c30:	3f 40 18 00 	mov	#24,	r15	;#0x0018
    3c34:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3c38:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3c3c:	b0 12 04 4e 	call	#0x4e04	
        
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
    3c40:	91 42 38 11 	mov	&0x1138,64(r1)	;0x0040(r1)
    3c44:	40 00 
    3c46:	91 42 3a 11 	mov	&0x113a,66(r1)	;0x0042(r1)
    3c4a:	42 00 
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    3c4c:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3c4e:	0e 41       	mov	r1,	r14	
    3c50:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3c54:	3f 40 2c 00 	mov	#44,	r15	;#0x002c
    3c58:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3c5c:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3c60:	b0 12 04 4e 	call	#0x4e04	
        
        // grava yaw offset 
        ValorAux.f = PPMOffset[YAW_CH];
    3c64:	91 42 4c 11 	mov	&0x114c,64(r1)	;0x0040(r1)
    3c68:	40 00 
    3c6a:	91 42 4e 11 	mov	&0x114e,66(r1)	;0x0042(r1)
    3c6e:	42 00 
        i2c_write16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3c70:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3c72:	0e 41       	mov	r1,	r14	
    3c74:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3c78:	3f 40 38 00 	mov	#56,	r15	;#0x0038
    3c7c:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3c80:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3c84:	b0 12 04 4e 	call	#0x4e04	
        
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
    3c88:	91 42 48 11 	mov	&0x1148,64(r1)	;0x0040(r1)
    3c8c:	40 00 
    3c8e:	91 42 4a 11 	mov	&0x114a,66(r1)	;0x0042(r1)
    3c92:	42 00 
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    3c94:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3c96:	0e 41       	mov	r1,	r14	
    3c98:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3c9c:	3f 40 3c 00 	mov	#60,	r15	;#0x003c
    3ca0:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3ca4:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3ca8:	b0 12 04 4e 	call	#0x4e04	
        
        // grava pitch offset 
        ValorAux.f = PPMOffset[PITCH_CH];
    3cac:	91 42 44 11 	mov	&0x1144,64(r1)	;0x0040(r1)
    3cb0:	40 00 
    3cb2:	91 42 46 11 	mov	&0x1146,66(r1)	;0x0042(r1)
    3cb6:	42 00 
        i2c_write16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    3cb8:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3cba:	0e 41       	mov	r1,	r14	
    3cbc:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3cc0:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    3cc4:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3cc8:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3ccc:	b0 12 04 4e 	call	#0x4e04	
        
        // grava roll offset 
        ValorAux.f = PPMOffset[ROLL_CH];
    3cd0:	91 42 3c 11 	mov	&0x113c,64(r1)	;0x0040(r1)
    3cd4:	40 00 
    3cd6:	91 42 3e 11 	mov	&0x113e,66(r1)	;0x0042(r1)
    3cda:	42 00 
        i2c_write16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    3cdc:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3cde:	0e 41       	mov	r1,	r14	
    3ce0:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3ce4:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    3ce8:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3cec:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3cf0:	b0 12 04 4e 	call	#0x4e04	
        
        // grava ch5 offset 
        ValorAux.f = PPMOffset[CH5_CH];
    3cf4:	91 42 50 11 	mov	&0x1150,64(r1)	;0x0040(r1)
    3cf8:	40 00 
    3cfa:	91 42 52 11 	mov	&0x1152,66(r1)	;0x0042(r1)
    3cfe:	42 00 
        i2c_write16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    3d00:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3d02:	0e 41       	mov	r1,	r14	
    3d04:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3d08:	3f 40 40 00 	mov	#64,	r15	;#0x0040
    3d0c:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3d10:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3d14:	b0 12 04 4e 	call	#0x4e04	
        
        // grava ch6 offset 
        ValorAux.f = PPMOffset[CH6_CH];
    3d18:	91 42 54 11 	mov	&0x1154,64(r1)	;0x0040(r1)
    3d1c:	40 00 
    3d1e:	91 42 56 11 	mov	&0x1156,66(r1)	;0x0042(r1)
    3d22:	42 00 
        i2c_write16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    3d24:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3d26:	0e 41       	mov	r1,	r14	
    3d28:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3d2c:	3f 40 44 00 	mov	#68,	r15	;#0x0044
    3d30:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3d34:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3d38:	b0 12 04 4e 	call	#0x4e04	
        
        // grava ch7 offset 
        ValorAux.f = PPMOffset[CH7_CH];
    3d3c:	91 42 58 11 	mov	&0x1158,64(r1)	;0x0040(r1)
    3d40:	40 00 
    3d42:	91 42 5a 11 	mov	&0x115a,66(r1)	;0x0042(r1)
    3d46:	42 00 
        i2c_write16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    3d48:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3d4a:	0e 41       	mov	r1,	r14	
    3d4c:	3e 50 40 00 	add	#64,	r14	;#0x0040
    3d50:	3f 40 48 00 	mov	#72,	r15	;#0x0048
    3d54:	b0 12 9e 50 	call	#0x509e	
        
        delayms(100);
    3d58:	3f 40 64 00 	mov	#100,	r15	;#0x0064
    3d5c:	b0 12 04 4e 	call	#0x4e04	
        
        lcd_goto(2,2);
    3d60:	6e 43       	mov.b	#2,	r14	;r3 As==10
    3d62:	6f 43       	mov.b	#2,	r15	;r3 As==10
    3d64:	b0 12 60 4c 	call	#0x4c60	
        printf("Params saved.");
    3d68:	30 12 4f 39 	push	#14671		;#0x394f
    3d6c:	b0 12 96 61 	call	#0x6196	
        delayms(2000);
    3d70:	3f 40 d0 07 	mov	#2000,	r15	;#0x07d0
    3d74:	b0 12 04 4e 	call	#0x4e04	
    3d78:	21 53       	incd	r1		
    3d7a:	32 3c       	jmp	$+102    	;abs 0x3de0
    3d7c:	0c 43       	clr	r12		
    3d7e:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3d82:	b0 12 04 57 	call	#0x5704	
    3d86:	ad 3e       	jmp	$-676    	;abs 0x3ae2
    3d88:	0c 43       	clr	r12		
    3d8a:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3d8e:	b0 12 04 57 	call	#0x5704	
    3d92:	07 4e       	mov	r14,	r7	
    3d94:	08 4f       	mov	r15,	r8	
    3d96:	91 3e       	jmp	$-732    	;abs 0x3aba
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
    3d98:	1b 49 6c 11 	mov	4460(r9),r11	;0x116c(r9)
    3d9c:	0e 4b       	mov	r11,	r14	
    3d9e:	0f 4e       	mov	r14,	r15	
    3da0:	0f 5f       	rla	r15		
    3da2:	0f 7f       	subc	r15,	r15	
    3da4:	3f e3       	inv	r15		
    3da6:	b0 12 a2 5c 	call	#0x5ca2	
    3daa:	0b 93       	tst	r11		
    3dac:	05 38       	jl	$+12     	;abs 0x3db8
    3dae:	8a 4e 20 00 	mov	r14,	32(r10)	;0x0020(r10)
    3db2:	8a 4f 22 00 	mov	r15,	34(r10)	;0x0022(r10)
    3db6:	6f 3e       	jmp	$-800    	;abs 0x3a96
    3db8:	0c 43       	clr	r12		
    3dba:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3dbe:	b0 12 04 57 	call	#0x5704	
    3dc2:	f5 3f       	jmp	$-20     	;abs 0x3dae
    3dc4:	0c 43       	clr	r12		
    3dc6:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3dca:	b0 12 04 57 	call	#0x5704	
    3dce:	07 4e       	mov	r14,	r7	
    3dd0:	08 4f       	mov	r15,	r8	
    3dd2:	57 3e       	jmp	$-848    	;abs 0x3a82
    3dd4:	0c 43       	clr	r12		
    3dd6:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3dda:	b0 12 04 57 	call	#0x5704	
    3dde:	1f 3e       	jmp	$-960    	;abs 0x3a1e
        
        lcd_goto(2,2);
        printf("Params saved.");
        delayms(2000);
    }
}
    3de0:	31 50 44 00 	add	#68,	r1	;#0x0044
    3de4:	35 41       	pop	r5		
    3de6:	36 41       	pop	r6		
    3de8:	37 41       	pop	r7		
    3dea:	38 41       	pop	r8		
    3dec:	39 41       	pop	r9		
    3dee:	3a 41       	pop	r10		
    3df0:	3b 41       	pop	r11		
    3df2:	30 41       	ret			

00003df4 <process_rc>:

void process_rc(void){
    3df4:	0b 12       	push	r11		
    ChannelInput[THROTTLE_CH] = PPMValue[THROTTLE_CH] * PPMSlope[THROTTLE_CH] + PPMOffset[THROTTLE_CH];
    3df6:	1b 42 72 11 	mov	&0x1172,r11	
    3dfa:	0e 4b       	mov	r11,	r14	
    3dfc:	0f 4e       	mov	r14,	r15	
    3dfe:	0f 5f       	rla	r15		
    3e00:	0f 7f       	subc	r15,	r15	
    3e02:	3f e3       	inv	r15		
    3e04:	b0 12 a2 5c 	call	#0x5ca2	
    3e08:	0b 93       	tst	r11		
    3e0a:	c6 38       	jl	$+398    	;abs 0x3f98
    3e0c:	1c 42 28 11 	mov	&0x1128,r12	
    3e10:	1d 42 2a 11 	mov	&0x112a,r13	
    3e14:	b0 12 a0 57 	call	#0x57a0	
    3e18:	1c 42 48 11 	mov	&0x1148,r12	
    3e1c:	1d 42 4a 11 	mov	&0x114a,r13	
    3e20:	b0 12 04 57 	call	#0x5704	
    3e24:	b0 12 a4 54 	call	#0x54a4	
    3e28:	82 4e 82 11 	mov	r14,	&0x1182	
    ChannelInput[YAW_CH] = PPMValue[YAW_CH] * PPMSlope[YAW_CH] + PPMOffset[YAW_CH];
    3e2c:	1b 42 74 11 	mov	&0x1174,r11	
    3e30:	0e 4b       	mov	r11,	r14	
    3e32:	0f 4e       	mov	r14,	r15	
    3e34:	0f 5f       	rla	r15		
    3e36:	0f 7f       	subc	r15,	r15	
    3e38:	3f e3       	inv	r15		
    3e3a:	b0 12 a2 5c 	call	#0x5ca2	
    3e3e:	0b 93       	tst	r11		
    3e40:	a5 38       	jl	$+332    	;abs 0x3f8c
    3e42:	1c 42 2c 11 	mov	&0x112c,r12	
    3e46:	1d 42 2e 11 	mov	&0x112e,r13	
    3e4a:	b0 12 a0 57 	call	#0x57a0	
    3e4e:	1c 42 4c 11 	mov	&0x114c,r12	
    3e52:	1d 42 4e 11 	mov	&0x114e,r13	
    3e56:	b0 12 04 57 	call	#0x5704	
    3e5a:	b0 12 a4 54 	call	#0x54a4	
    3e5e:	82 4e 84 11 	mov	r14,	&0x1184	
    ChannelInput[PITCH_CH] = PPMValue[PITCH_CH] * PPMSlope[PITCH_CH] + PPMOffset[PITCH_CH]; // pitch invertido
    3e62:	1b 42 70 11 	mov	&0x1170,r11	
    3e66:	0e 4b       	mov	r11,	r14	
    3e68:	0f 4e       	mov	r14,	r15	
    3e6a:	0f 5f       	rla	r15		
    3e6c:	0f 7f       	subc	r15,	r15	
    3e6e:	3f e3       	inv	r15		
    3e70:	b0 12 a2 5c 	call	#0x5ca2	
    3e74:	0b 93       	tst	r11		
    3e76:	84 38       	jl	$+266    	;abs 0x3f80
    3e78:	1c 42 24 11 	mov	&0x1124,r12	
    3e7c:	1d 42 26 11 	mov	&0x1126,r13	
    3e80:	b0 12 a0 57 	call	#0x57a0	
    3e84:	1c 42 44 11 	mov	&0x1144,r12	
    3e88:	1d 42 46 11 	mov	&0x1146,r13	
    3e8c:	b0 12 04 57 	call	#0x5704	
    3e90:	b0 12 a4 54 	call	#0x54a4	
    3e94:	82 4e 80 11 	mov	r14,	&0x1180	
    ChannelInput[ROLL_CH] = PPMValue[ROLL_CH] * PPMSlope[ROLL_CH] + PPMOffset[ROLL_CH];
    3e98:	1b 42 6c 11 	mov	&0x116c,r11	
    3e9c:	0e 4b       	mov	r11,	r14	
    3e9e:	0f 4e       	mov	r14,	r15	
    3ea0:	0f 5f       	rla	r15		
    3ea2:	0f 7f       	subc	r15,	r15	
    3ea4:	3f e3       	inv	r15		
    3ea6:	b0 12 a2 5c 	call	#0x5ca2	
    3eaa:	0b 93       	tst	r11		
    3eac:	63 38       	jl	$+200    	;abs 0x3f74
    3eae:	1c 42 1c 11 	mov	&0x111c,r12	
    3eb2:	1d 42 1e 11 	mov	&0x111e,r13	
    3eb6:	b0 12 a0 57 	call	#0x57a0	
    3eba:	1c 42 3c 11 	mov	&0x113c,r12	
    3ebe:	1d 42 3e 11 	mov	&0x113e,r13	
    3ec2:	b0 12 04 57 	call	#0x5704	
    3ec6:	b0 12 a4 54 	call	#0x54a4	
    3eca:	82 4e 7c 11 	mov	r14,	&0x117c	
    ChannelInput[CH5_CH] = PPMValue[CH5_CH] * PPMSlope[CH5_CH] + PPMOffset[CH5_CH];
    3ece:	1b 42 76 11 	mov	&0x1176,r11	
    3ed2:	0e 4b       	mov	r11,	r14	
    3ed4:	0f 4e       	mov	r14,	r15	
    3ed6:	0f 5f       	rla	r15		
    3ed8:	0f 7f       	subc	r15,	r15	
    3eda:	3f e3       	inv	r15		
    3edc:	b0 12 a2 5c 	call	#0x5ca2	
    3ee0:	0b 93       	tst	r11		
    3ee2:	42 38       	jl	$+134    	;abs 0x3f68
    3ee4:	1c 42 30 11 	mov	&0x1130,r12	
    3ee8:	1d 42 32 11 	mov	&0x1132,r13	
    3eec:	b0 12 a0 57 	call	#0x57a0	
    3ef0:	1c 42 50 11 	mov	&0x1150,r12	
    3ef4:	1d 42 52 11 	mov	&0x1152,r13	
    3ef8:	b0 12 04 57 	call	#0x5704	
    3efc:	b0 12 a4 54 	call	#0x54a4	
    3f00:	82 4e 86 11 	mov	r14,	&0x1186	
    ChannelInput[CH6_CH] = PPMValue[CH6_CH] * PPMSlope[CH6_CH] + PPMOffset[CH6_CH];
    3f04:	1b 42 78 11 	mov	&0x1178,r11	
    3f08:	0e 4b       	mov	r11,	r14	
    3f0a:	0f 4e       	mov	r14,	r15	
    3f0c:	0f 5f       	rla	r15		
    3f0e:	0f 7f       	subc	r15,	r15	
    3f10:	3f e3       	inv	r15		
    3f12:	b0 12 a2 5c 	call	#0x5ca2	
    3f16:	0b 93       	tst	r11		
    3f18:	21 38       	jl	$+68     	;abs 0x3f5c
    3f1a:	1c 42 34 11 	mov	&0x1134,r12	
    3f1e:	1d 42 36 11 	mov	&0x1136,r13	
    3f22:	b0 12 a0 57 	call	#0x57a0	
    3f26:	1c 42 54 11 	mov	&0x1154,r12	
    3f2a:	1d 42 56 11 	mov	&0x1156,r13	
    3f2e:	b0 12 04 57 	call	#0x5704	
    3f32:	b0 12 a4 54 	call	#0x54a4	
    3f36:	82 4e 88 11 	mov	r14,	&0x1188	
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
    3f3a:	1b 42 7a 11 	mov	&0x117a,r11	
    3f3e:	0e 4b       	mov	r11,	r14	
    3f40:	0f 4e       	mov	r14,	r15	
    3f42:	0f 5f       	rla	r15		
    3f44:	0f 7f       	subc	r15,	r15	
    3f46:	3f e3       	inv	r15		
    3f48:	b0 12 a2 5c 	call	#0x5ca2	
    3f4c:	0b 93       	tst	r11		
    3f4e:	2a 34       	jge	$+86     	;abs 0x3fa4
    3f50:	0c 43       	clr	r12		
    3f52:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3f56:	b0 12 04 57 	call	#0x5704	
    3f5a:	24 3c       	jmp	$+74     	;abs 0x3fa4
    3f5c:	0c 43       	clr	r12		
    3f5e:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3f62:	b0 12 04 57 	call	#0x5704	
    3f66:	d9 3f       	jmp	$-76     	;abs 0x3f1a
    3f68:	0c 43       	clr	r12		
    3f6a:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3f6e:	b0 12 04 57 	call	#0x5704	
    3f72:	b8 3f       	jmp	$-142    	;abs 0x3ee4
    3f74:	0c 43       	clr	r12		
    3f76:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3f7a:	b0 12 04 57 	call	#0x5704	
    3f7e:	97 3f       	jmp	$-208    	;abs 0x3eae
    3f80:	0c 43       	clr	r12		
    3f82:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3f86:	b0 12 04 57 	call	#0x5704	
    3f8a:	76 3f       	jmp	$-274    	;abs 0x3e78
    3f8c:	0c 43       	clr	r12		
    3f8e:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3f92:	b0 12 04 57 	call	#0x5704	
    3f96:	55 3f       	jmp	$-340    	;abs 0x3e42
    3f98:	0c 43       	clr	r12		
    3f9a:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    3f9e:	b0 12 04 57 	call	#0x5704	
    3fa2:	34 3f       	jmp	$-406    	;abs 0x3e0c
    3fa4:	1c 42 38 11 	mov	&0x1138,r12	
    3fa8:	1d 42 3a 11 	mov	&0x113a,r13	
    3fac:	b0 12 a0 57 	call	#0x57a0	
    3fb0:	1c 42 58 11 	mov	&0x1158,r12	
    3fb4:	1d 42 5a 11 	mov	&0x115a,r13	
    3fb8:	b0 12 04 57 	call	#0x5704	
    3fbc:	b0 12 a4 54 	call	#0x54a4	
    3fc0:	82 4e 8a 11 	mov	r14,	&0x118a	
}
    3fc4:	3b 41       	pop	r11		
    3fc6:	30 41       	ret			

00003fc8 <load_transmitter_values>:

void load_transmitter_values(void){
    3fc8:	21 82       	sub	#4,	r1	;r2 As==10
    fourbytes ValorAux;

    if(EEPROMFound == 1){
    3fca:	d2 93 90 11 	cmp.b	#1,	&0x1190	;r3 As==01
    3fce:	9e 20       	jnz	$+318    	;abs 0x410c
        i2c_change_address(EEPROM_I2C_ADDR);    
    3fd0:	7f 40 a6 ff 	mov.b	#-90,	r15	;#0xffa6
    3fd4:	b0 12 34 4e 	call	#0x4e34	

        // load yaw slope e offset
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    3fd8:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3fda:	0e 41       	mov	r1,	r14	
    3fdc:	3f 40 0c 00 	mov	#12,	r15	;#0x000c
    3fe0:	b0 12 6e 52 	call	#0x526e	
        PPMSlope[YAW_CH] = ValorAux.f;
    3fe4:	a2 41 2c 11 	mov	@r1,	&0x112c	
    3fe8:	92 41 02 00 	mov	2(r1),	&0x112e	;0x0002(r1)
    3fec:	2e 11 
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3fee:	6d 42       	mov.b	#4,	r13	;r2 As==10
    3ff0:	0e 41       	mov	r1,	r14	
    3ff2:	3f 40 38 00 	mov	#56,	r15	;#0x0038
    3ff6:	b0 12 6e 52 	call	#0x526e	
        PPMOffset[YAW_CH] = ValorAux.f;
    3ffa:	a2 41 4c 11 	mov	@r1,	&0x114c	
    3ffe:	92 41 02 00 	mov	2(r1),	&0x114e	;0x0002(r1)
    4002:	4e 11 
        
        // load throttle slope  e offset
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    4004:	6d 42       	mov.b	#4,	r13	;r2 As==10
    4006:	0e 41       	mov	r1,	r14	
    4008:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    400c:	b0 12 6e 52 	call	#0x526e	
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    4010:	a2 41 28 11 	mov	@r1,	&0x1128	
    4014:	92 41 02 00 	mov	2(r1),	&0x112a	;0x0002(r1)
    4018:	2a 11 
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    401a:	6d 42       	mov.b	#4,	r13	;r2 As==10
    401c:	0e 41       	mov	r1,	r14	
    401e:	3f 40 3c 00 	mov	#60,	r15	;#0x003c
    4022:	b0 12 6e 52 	call	#0x526e	
        PPMOffset[THROTTLE_CH] = ValorAux.f;
    4026:	a2 41 48 11 	mov	@r1,	&0x1148	
    402a:	92 41 02 00 	mov	2(r1),	&0x114a	;0x0002(r1)
    402e:	4a 11 
        
        // load pitch slope  e offset
        i2c_read16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    4030:	6d 42       	mov.b	#4,	r13	;r2 As==10
    4032:	0e 41       	mov	r1,	r14	
    4034:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    4038:	b0 12 6e 52 	call	#0x526e	
        PPMSlope[PITCH_CH] = ValorAux.f;
    403c:	a2 41 24 11 	mov	@r1,	&0x1124	
    4040:	92 41 02 00 	mov	2(r1),	&0x1126	;0x0002(r1)
    4044:	26 11 
        i2c_read16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    4046:	6d 42       	mov.b	#4,	r13	;r2 As==10
    4048:	0e 41       	mov	r1,	r14	
    404a:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    404e:	b0 12 6e 52 	call	#0x526e	
        PPMOffset[PITCH_CH] = ValorAux.f;
    4052:	a2 41 44 11 	mov	@r1,	&0x1144	
    4056:	92 41 02 00 	mov	2(r1),	&0x1146	;0x0002(r1)
    405a:	46 11 
        
        // load roll slope  e offset
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    405c:	6d 42       	mov.b	#4,	r13	;r2 As==10
    405e:	0e 41       	mov	r1,	r14	
    4060:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    4064:	b0 12 6e 52 	call	#0x526e	
        PPMSlope[ROLL_CH] = ValorAux.f;
    4068:	a2 41 1c 11 	mov	@r1,	&0x111c	
    406c:	92 41 02 00 	mov	2(r1),	&0x111e	;0x0002(r1)
    4070:	1e 11 
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    4072:	6d 42       	mov.b	#4,	r13	;r2 As==10
    4074:	0e 41       	mov	r1,	r14	
    4076:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    407a:	b0 12 6e 52 	call	#0x526e	
        PPMOffset[ROLL_CH] = ValorAux.f;
    407e:	a2 41 3c 11 	mov	@r1,	&0x113c	
    4082:	92 41 02 00 	mov	2(r1),	&0x113e	;0x0002(r1)
    4086:	3e 11 
    
        // load ch5 slope  e offset
        i2c_read16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    4088:	6d 42       	mov.b	#4,	r13	;r2 As==10
    408a:	0e 41       	mov	r1,	r14	
    408c:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    4090:	b0 12 6e 52 	call	#0x526e	
        PPMSlope[CH5_CH] = ValorAux.f;
    4094:	a2 41 30 11 	mov	@r1,	&0x1130	
    4098:	92 41 02 00 	mov	2(r1),	&0x1132	;0x0002(r1)
    409c:	32 11 
        i2c_read16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    409e:	6d 42       	mov.b	#4,	r13	;r2 As==10
    40a0:	0e 41       	mov	r1,	r14	
    40a2:	3f 40 40 00 	mov	#64,	r15	;#0x0040
    40a6:	b0 12 6e 52 	call	#0x526e	
        PPMOffset[CH5_CH] = ValorAux.f;
    40aa:	a2 41 50 11 	mov	@r1,	&0x1150	
    40ae:	92 41 02 00 	mov	2(r1),	&0x1152	;0x0002(r1)
    40b2:	52 11 
    
        // load ch6 slope  e offset
        i2c_read16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    40b4:	6d 42       	mov.b	#4,	r13	;r2 As==10
    40b6:	0e 41       	mov	r1,	r14	
    40b8:	3f 40 18 00 	mov	#24,	r15	;#0x0018
    40bc:	b0 12 6e 52 	call	#0x526e	
        PPMSlope[CH6_CH] = ValorAux.f;
    40c0:	a2 41 34 11 	mov	@r1,	&0x1134	
    40c4:	92 41 02 00 	mov	2(r1),	&0x1136	;0x0002(r1)
    40c8:	36 11 
        i2c_read16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    40ca:	6d 42       	mov.b	#4,	r13	;r2 As==10
    40cc:	0e 41       	mov	r1,	r14	
    40ce:	3f 40 44 00 	mov	#68,	r15	;#0x0044
    40d2:	b0 12 6e 52 	call	#0x526e	
        PPMOffset[CH6_CH] = ValorAux.f;
    40d6:	a2 41 54 11 	mov	@r1,	&0x1154	
    40da:	92 41 02 00 	mov	2(r1),	&0x1156	;0x0002(r1)
    40de:	56 11 
        
        // load ch7 slope  e offset
        i2c_read16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    40e0:	6d 42       	mov.b	#4,	r13	;r2 As==10
    40e2:	0e 41       	mov	r1,	r14	
    40e4:	3f 40 2c 00 	mov	#44,	r15	;#0x002c
    40e8:	b0 12 6e 52 	call	#0x526e	
        PPMSlope[CH7_CH] = ValorAux.f;
    40ec:	a2 41 38 11 	mov	@r1,	&0x1138	
    40f0:	92 41 02 00 	mov	2(r1),	&0x113a	;0x0002(r1)
    40f4:	3a 11 
        i2c_read16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    40f6:	6d 42       	mov.b	#4,	r13	;r2 As==10
    40f8:	0e 41       	mov	r1,	r14	
    40fa:	3f 40 48 00 	mov	#72,	r15	;#0x0048
    40fe:	b0 12 6e 52 	call	#0x526e	
        PPMOffset[CH7_CH] = ValorAux.f;
    4102:	a2 41 58 11 	mov	@r1,	&0x1158	
    4106:	92 41 02 00 	mov	2(r1),	&0x115a	;0x0002(r1)
    410a:	5a 11 
    }
}
    410c:	21 52       	add	#4,	r1	;r2 As==10
    410e:	30 41       	ret			
    4110:	20 20       	jnz	$+66     	;abs 0x4152
    4112:	20 20       	jnz	$+66     	;abs 0x4154
    4114:	20 52       	add	#4,	r0	;r2 As==10
    4116:	43 20       	jnz	$+136    	;abs 0x419e
    4118:	69 6e       	addc.b	@r14,	r9	
    411a:	70 75       	subc.b	@r5+,	r0	
    411c:	74 73       	subc.b	#-1,	r4	;r3 As==11
    411e:	00 63       	adc	r0		
    4120:	68 5b       	add.b	@r11,	r8	
    4122:	25 64       	addc	@r4,	r5	
    4124:	5d 3a       	jl	$-836    	;abs 0x3de0
    4126:	20 25       	jz	$+578    	;abs 0x4368
    4128:	64 20       	jnz	$+202    	;abs 0x41f2
    412a:	20 20       	jnz	$+66     	;abs 0x416c
    412c:	0a 00       	mova	@r0,	r10	

0000412e <draw_rc_inputs>:

void draw_rc_inputs(char raw){
    412e:	0b 12       	push	r11		
    4130:	0a 12       	push	r10		
    4132:	09 12       	push	r9		
    4134:	08 12       	push	r8		
    4136:	07 12       	push	r7		
    4138:	47 4f       	mov.b	r15,	r7	
    unsigned int i = 0, k = 0, h = 0;
    413a:	08 43       	clr	r8		
    lcd_goto(0,0);
    413c:	4e 43       	clr.b	r14		
    413e:	4f 43       	clr.b	r15		
    4140:	b0 12 60 4c 	call	#0x4c60	
    printf("     RC inputs");
    4144:	30 12 10 41 	push	#16656		;#0x4110
    4148:	b0 12 96 61 	call	#0x6196	
    lcd_goto(0,2);
    414c:	6e 43       	mov.b	#2,	r14	;r3 As==10
    414e:	4f 43       	clr.b	r15		
    4150:	b0 12 60 4c 	call	#0x4c60	
    
    for(i = 0; i < 8; i++){
    4154:	21 53       	incd	r1		
        if(!raw){
    4156:	47 93       	tst.b	r7		
    4158:	3b 20       	jnz	$+120    	;abs 0x41d0
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
    415a:	0b 48       	mov	r8,	r11	
    415c:	0b 5b       	rla	r11		
    415e:	1b 12 7c 11 	push	4476(r11)	;0x117c(r11)
    4162:	08 12       	push	r8		
    4164:	30 12 1f 41 	push	#16671		;#0x411f
    4168:	b0 12 96 61 	call	#0x6196	
    416c:	31 50 06 00 	add	#6,	r1	;#0x0006
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
        }
        k = 21 + (8 * i); //posicao inicial em y
    4170:	09 4b       	mov	r11,	r9	
    4172:	09 59       	rla	r9		
    4174:	09 59       	rla	r9		
    4176:	39 50 15 00 	add	#21,	r9	;#0x0015
        if(!raw){
    417a:	47 93       	tst.b	r7		
    417c:	1e 20       	jnz	$+62     	;abs 0x41ba
            if(ChannelInput[i] > 4000){
    417e:	bb 90 a1 0f 	cmp	#4001,	4476(r11);#0x0fa1, 0x117c(r11)
    4182:	7c 11 
    4184:	17 2c       	jc	$+48     	;abs 0x41b4
                h=100;
            }
            else{
                if(ChannelInput[i] < 2001){
    4186:	bb 90 d1 07 	cmp	#2001,	4476(r11);#0x07d1, 0x117c(r11)
    418a:	7c 11 
    418c:	11 28       	jnc	$+36     	;abs 0x41b0
                    h = 0;
                }
                else{
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
    418e:	1f 4b 7c 11 	mov	4476(r11),r15	;0x117c(r11)
    4192:	0e 4f       	mov	r15,	r14	
    4194:	0e 5e       	rla	r14		
    4196:	0e 5e       	rla	r14		
    4198:	0f 5f       	rla	r15		
    419a:	0e 5f       	add	r15,	r14	
    419c:	0e 5f       	add	r15,	r14	
    419e:	0e 5f       	add	r15,	r14	
    41a0:	3e 50 e0 b1 	add	#-20000,r14	;#0xb1e0
    41a4:	0c 4e       	mov	r14,	r12	
    41a6:	3a 40 c8 00 	mov	#200,	r10	;#0x00c8
    41aa:	b0 12 14 68 	call	#0x6814	
    41ae:	15 3c       	jmp	$+44     	;abs 0x41da
            if(PPMValue[i] > 4000){
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
                    h = 0;
    41b0:	0c 43       	clr	r12		
    41b2:	13 3c       	jmp	$+40     	;abs 0x41da
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
                h=100;
    41b4:	3c 40 64 00 	mov	#100,	r12	;#0x0064
    41b8:	10 3c       	jmp	$+34     	;abs 0x41da
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
    41ba:	bb 90 a1 0f 	cmp	#4001,	4460(r11);#0x0fa1, 0x116c(r11)
    41be:	6c 11 
    41c0:	f9 2f       	jc	$-12     	;abs 0x41b4
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
    41c2:	bb 90 d1 07 	cmp	#2001,	4460(r11);#0x07d1, 0x116c(r11)
    41c6:	6c 11 
    41c8:	f3 2b       	jnc	$-24     	;abs 0x41b0
                    h = 0;
                }
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
    41ca:	1f 4b 6c 11 	mov	4460(r11),r15	;0x116c(r11)
    41ce:	e1 3f       	jmp	$-60     	;abs 0x4192
    for(i = 0; i < 8; i++){
        if(!raw){
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
    41d0:	0b 48       	mov	r8,	r11	
    41d2:	0b 5b       	rla	r11		
    41d4:	1b 12 6c 11 	push	4460(r11)	;0x116c(r11)
    41d8:	c4 3f       	jmp	$-118    	;abs 0x4162
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    41da:	0c 12       	push	r12		
    41dc:	30 12 03 00 	push	#3		;#0x0003
    41e0:	30 12 ff 00 	push	#255		;#0x00ff
    41e4:	2c 42       	mov	#4,	r12	;r2 As==10
    41e6:	3d 40 2d 00 	mov	#45,	r13	;#0x002d
    41ea:	0e 49       	mov	r9,	r14	
    41ec:	3f 40 50 00 	mov	#80,	r15	;#0x0050
    41f0:	b0 12 72 4d 	call	#0x4d72	
    unsigned int i = 0, k = 0, h = 0;
    lcd_goto(0,0);
    printf("     RC inputs");
    lcd_goto(0,2);
    
    for(i = 0; i < 8; i++){
    41f4:	31 50 06 00 	add	#6,	r1	;#0x0006
    41f8:	18 53       	inc	r8		
    41fa:	38 92       	cmp	#8,	r8	;r2 As==11
    41fc:	ac 2b       	jnc	$-166    	;abs 0x4156
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}
    41fe:	37 41       	pop	r7		
    4200:	38 41       	pop	r8		
    4202:	39 41       	pop	r9		
    4204:	3a 41       	pop	r10		
    4206:	3b 41       	pop	r11		
    4208:	30 41       	ret			

0000420a <find_first>:

int find_first(int startaddress){
    420a:	0b 12       	push	r11		
    420c:	0b 4f       	mov	r15,	r11	
    for(; startaddress < 255; startaddress++){
    420e:	3f 90 ff 00 	cmp	#255,	r15	;#0x00ff
    4212:	02 38       	jl	$+6      	;abs 0x4218
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
        }
    }   
    return 0;
    4214:	0f 43       	clr	r15		
    4216:	0d 3c       	jmp	$+28     	;abs 0x4232
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
    4218:	4f 4b       	mov.b	r11,	r15	
    421a:	b0 12 24 4e 	call	#0x4e24	
        if(!i2c_find_device()){
    421e:	b0 12 6c 4f 	call	#0x4f6c	
    4222:	4f 93       	tst.b	r15		
    4224:	05 24       	jz	$+12     	;abs 0x4230
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
    4226:	1b 53       	inc	r11		
    4228:	3b 90 ff 00 	cmp	#255,	r11	;#0x00ff
    422c:	f5 3b       	jl	$-20     	;abs 0x4218
    422e:	f2 3f       	jmp	$-26     	;abs 0x4214
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
    4230:	0f 4b       	mov	r11,	r15	
        }
    }   
    return 0;
}
    4232:	3b 41       	pop	r11		
    4234:	30 41       	ret			

00004236 <main_loop>:

// loop de controle
void main_loop(){
    
    
}
    4236:	30 41       	ret			
    4238:	45 45       	mov.b	r5,	r5	
    423a:	50 52 4f 4d 	add.b	&0x4d4f,r0	
    423e:	20 66       	addc	@r6,	r0	
    4240:	6f 75       	subc.b	@r5,	r15	
    4242:	6e 64       	addc.b	@r4,	r14	
    4244:	00 53       	add	#0,	r0	;r3 As==00
    4246:	46 3a       	jl	$-882    	;abs 0x3ed4
    4248:	20 25       	jz	$+578    	;abs 0x448a
    424a:	64 20       	jnz	$+202    	;abs 0x4314
    424c:	25 64       	addc	@r4,	r5	
    424e:	20 25       	jz	$+578    	;abs 0x4490
    4250:	64 0a 00 43 	mova	r10,	&0x44300
    4254:	61 6c       	addc.b	@r12,	r1	
    4256:	69 62       	addc.b	#4,	r9	;r2 As==10
    4258:	72 61       	addc.b	@r1+,	r2	
    425a:	6e 64       	addc.b	@r4,	r14	
    425c:	6f 20       	jnz	$+224    	;abs 0x433c
    425e:	72 61       	addc.b	@r1+,	r2	
    4260:	64 69       	addc.b	@r9,	r4	
    4262:	6f 2e       	jc	$-800    	;abs 0x3f42
    4264:	2e 2e       	jc	$-930    	;abs 0x3ec2
    4266:	00 52       	add	r2,	r0	
    4268:	43 20       	jnz	$+136    	;abs 0x42f0
    426a:	70 61       	addc.b	@r1+,	r0	
    426c:	72 61       	addc.b	@r1+,	r2	
    426e:	6d 73       	subc.b	#2,	r13	;r3 As==10
    4270:	20 6c       	addc	@r12,	r0	
    4272:	6f 61       	addc.b	@r1,	r15	
    4274:	64 65       	addc.b	@r5,	r4	
    4276:	64 00 45 45 	mova	r0,	&0x44545
    427a:	50 52 4f 4d 	add.b	&0x4d4f,r0	
    427e:	20 6e       	addc	@r14,	r0	
    4280:	6f 74       	subc.b	@r4,	r15	
    4282:	20 66       	addc	@r6,	r0	
    4284:	6f 75       	subc.b	@r5,	r15	
    4286:	6e 64       	addc.b	@r4,	r14	
	...

0000428a <setup>:

void setup(){
    428a:	0b 12       	push	r11		
    
    clock_init();
    428c:	b0 12 68 38 	call	#0x3868	
    
    timer_a3_init();
    4290:	b0 12 96 38 	call	#0x3896	
    
    p1_init();
    4294:	b0 12 80 38 	call	#0x3880	
    
    analog_init();
    4298:	b0 12 1c 53 	call	#0x531c	
    
    i2c_init();
    429c:	b0 12 3a 4e 	call	#0x4e3a	
    
    eint();
    42a0:	32 d2       	eint			
    
    lcd_init(BLACK);
    42a2:	4f 43       	clr.b	r15		
    42a4:	b0 12 a0 46 	call	#0x46a0	
    
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));

    i2c_config(EEPROM_I2C_ADDR);
    42a8:	7f 40 a6 ff 	mov.b	#-90,	r15	;#0xffa6
    42ac:	b0 12 24 4e 	call	#0x4e24	
    EEPROMFound = !(i2c_find_device());
    42b0:	4b 43       	clr.b	r11		
    42b2:	b0 12 6c 4f 	call	#0x4f6c	
    42b6:	4f 93       	tst.b	r15		
    42b8:	01 20       	jnz	$+4      	;abs 0x42bc
    42ba:	5b 43       	mov.b	#1,	r11	;r3 As==01
    42bc:	c2 4b 90 11 	mov.b	r11,	&0x1190	
    
    if(EEPROMFound){
    42c0:	4b 93       	tst.b	r11		
    42c2:	3e 24       	jz	$+126    	;abs 0x4340
        printf("EEPROM found\n");
    42c4:	3f 40 38 42 	mov	#16952,	r15	;#0x4238
    42c8:	b0 12 c2 67 	call	#0x67c2	
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    42cc:	7d 40 03 00 	mov.b	#3,	r13	;#0x0003
    42d0:	3e 40 06 11 	mov	#4358,	r14	;#0x1106
    42d4:	0f 43       	clr	r15		
    42d6:	b0 12 6e 52 	call	#0x526e	
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);
    42da:	5f 42 08 11 	mov.b	&0x1108,r15	
    42de:	8f 11       	sxt	r15		
    42e0:	0f 12       	push	r15		
    42e2:	5f 42 07 11 	mov.b	&0x1107,r15	
    42e6:	8f 11       	sxt	r15		
    42e8:	0f 12       	push	r15		
    42ea:	5f 42 06 11 	mov.b	&0x1106,r15	
    42ee:	8f 11       	sxt	r15		
    42f0:	0f 12       	push	r15		
    42f2:	30 12 45 42 	push	#16965		;#0x4245
    42f6:	b0 12 96 61 	call	#0x6196	

        //if(1){
        if(StatusFlags[0] != 0){
    42fa:	31 52       	add	#8,	r1	;r2 As==11
    42fc:	c2 93 06 11 	tst.b	&0x1106	
    4300:	18 24       	jz	$+50     	;abs 0x4332
            printf("Calibrando radio...\n");
    4302:	3f 40 53 42 	mov	#16979,	r15	;#0x4253
    4306:	b0 12 c2 67 	call	#0x67c2	
            delayms(4000);
    430a:	3f 40 a0 0f 	mov	#4000,	r15	;#0x0fa0
    430e:	b0 12 04 4e 	call	#0x4e04	
            calibrate_radio();
    4312:	b0 12 5e 39 	call	#0x395e	
            StatusFlags[0] = 0;
    4316:	c2 43 06 11 	mov.b	#0,	&0x1106	;r3 As==00
            StatusFlags[1] = 0;
    431a:	c2 43 07 11 	mov.b	#0,	&0x1107	;r3 As==00
            StatusFlags[2] = 0;
    431e:	c2 43 08 11 	mov.b	#0,	&0x1108	;r3 As==00
            i2c_write16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    4322:	7d 40 03 00 	mov.b	#3,	r13	;#0x0003
    4326:	3e 40 06 11 	mov	#4358,	r14	;#0x1106
    432a:	0f 43       	clr	r15		
    432c:	b0 12 9e 50 	call	#0x509e	
    4330:	11 3c       	jmp	$+36     	;abs 0x4354
        }
        else{
            load_transmitter_values();
    4332:	b0 12 c8 3f 	call	#0x3fc8	
            printf("RC params loaded\n");
    4336:	3f 40 67 42 	mov	#16999,	r15	;#0x4267
    433a:	b0 12 c2 67 	call	#0x67c2	
    433e:	0a 3c       	jmp	$+22     	;abs 0x4354
            //carregar os outros parametros
        }
    }
    else{
        color_fore = RED;
    4340:	f2 40 e0 ff 	mov.b	#-32,	&0x118f	;#0xffe0
    4344:	8f 11 
        printf("EEPROM not found\n");
    4346:	3f 40 78 42 	mov	#17016,	r15	;#0x4278
    434a:	b0 12 c2 67 	call	#0x67c2	
        color_fore = LIME;
    434e:	f2 40 3c 00 	mov.b	#60,	&0x118f	;#0x003c
    4352:	8f 11 
    }
    analog_graph_clear_all();    
    4354:	b0 12 9a 43 	call	#0x439a	
    
    lcd_drawline(10,80,90,90,RED);
    4358:	30 12 e0 00 	push	#224		;#0x00e0
    435c:	3c 40 5a 00 	mov	#90,	r12	;#0x005a
    4360:	3d 40 5a 00 	mov	#90,	r13	;#0x005a
    4364:	3e 40 50 00 	mov	#80,	r14	;#0x0050
    4368:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    436c:	b0 12 80 4a 	call	#0x4a80	
    lcd_drawline(10,90,90,80,BLUE);
    4370:	30 12 03 00 	push	#3		;#0x0003
    4374:	3c 40 50 00 	mov	#80,	r12	;#0x0050
    4378:	3d 40 5a 00 	mov	#90,	r13	;#0x005a
    437c:	3e 40 5a 00 	mov	#90,	r14	;#0x005a
    4380:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    4384:	b0 12 80 4a 	call	#0x4a80	
    
    delayms(1500);
    4388:	3f 40 dc 05 	mov	#1500,	r15	;#0x05dc
    438c:	b0 12 04 4e 	call	#0x4e04	

    SetupDone = 1;
    4390:	d2 43 0a 11 	mov.b	#1,	&0x110a	;r3 As==01
    4394:	21 52       	add	#4,	r1	;r2 As==10
}
    4396:	3b 41       	pop	r11		
    4398:	30 41       	ret			

0000439a <analog_graph_clear_all>:

void analog_graph_clear_all(void){
    439a:	0b 12       	push	r11		
    int i;
    for(i = 0; i < 8; i++){
    439c:	0b 43       	clr	r11		
        analog_graph_clear(i);
    439e:	0f 4b       	mov	r11,	r15	
    43a0:	b0 12 a8 35 	call	#0x35a8	
    SetupDone = 1;
}

void analog_graph_clear_all(void){
    int i;
    for(i = 0; i < 8; i++){
    43a4:	1b 53       	inc	r11		
    43a6:	3b 92       	cmp	#8,	r11	;r2 As==11
    43a8:	fa 3b       	jl	$-10     	;abs 0x439e
        analog_graph_clear(i);
    }
}
    43aa:	3b 41       	pop	r11		
    43ac:	30 41       	ret			

000043ae <asciitable>:
    43ae:	00 00       	bra	@r0		
    43b0:	00 00       	bra	@r0		
    43b2:	00 3e       	jmp	$-1022   	;abs 0x3fb4
    43b4:	0a 34       	jge	$+22     	;abs 0x43ca
    43b6:	00 3e       	jmp	$-1022   	;abs 0x3fb8
    43b8:	18 3e       	jmp	$-974    	;abs 0x3fea
    43ba:	00 3e       	jmp	$-1022   	;abs 0x3fbc
    43bc:	22 00 3e 20 	mova	&0x0203e,r2	
    43c0:	20 00 22 1c 	bra	&0x01c22	
    43c4:	00 24       	jz	$+2      	;abs 0x43c6
    43c6:	2a 00 08 38 	mova	&0x03808,r10	
    43ca:	38 08 1c 22 	mova	8732(r8),r8	;0x221c(r8)
    43ce:	22 22       	jnz	$-954    	;abs 0x4014
    43d0:	1c 00       	mova	#0x00000,r12	
    43d2:	38 38       	jl	$+114    	;abs 0x4444
    43d4:	44 82       	sub.b	r2,	r4	
    43d6:	1c 3e       	jmp	$-966    	;abs 0x4010
    43d8:	62 62       	addc.b	#4,	r2	;r2 As==10
    43da:	32 2e       	jc	$-922    	;abs 0x4040
    43dc:	26 23       	jnz	$-434    	;abs 0x422a
    43de:	23 22       	jnz	$-952    	;abs 0x4026
    43e0:	00 00       	bra	@r0		
    43e2:	00 00       	bra	@r0		
    43e4:	00 1c       	.word	0x1c00;	????	
    43e6:	3e 36       	jge	$-898    	;abs 0x4064
    43e8:	22 36       	jge	$-954    	;abs 0x402e
    43ea:	3e 3e       	jmp	$-898    	;abs 0x4068
    43ec:	36 36       	jge	$-914    	;abs 0x405a
    43ee:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x043f0
    43f2:	00 00       	bra	@r0		
    43f4:	18 08       	mova	@r8+,	r8	
    43f6:	1c 22       	jnz	$-966    	;abs 0x4030
    43f8:	22 63       	addc	#2,	r2	;r3 As==10
    43fa:	55 4d 55 6b 	mov.b	27477(r13),r5	;0x6b55(r13)
    43fe:	00 3e       	jmp	$-1022   	;abs 0x4000
    4400:	0a 04       	mova	@r4,	r10	
    4402:	78 00 3e 0a 	mova	r0,	2622(r8);0x0a3e(r8)
    4406:	04 78       	subc	r8,	r4	
    4408:	00 38       	jl	$+2      	;abs 0x440a
    440a:	44 5f       	add.b	r15,	r4	
    440c:	4e 00       	rrcm.a	#1,	r14	
    440e:	38 44       	mov	@r4+,	r8	
    4410:	44 5f       	add.b	r15,	r4	
    4412:	00 3c       	jmp	$+2      	;abs 0x4414
    4414:	3c 3c       	jmp	$+122    	;abs 0x448e
    4416:	3c 00 3e 0a 	mova	0x0a3e,	r12	;PC rel. 0x04e56
    441a:	04 78       	subc	r8,	r4	
    441c:	00 3e       	jmp	$-1022   	;abs 0x401e
    441e:	0a 04       	mova	@r4,	r10	
    4420:	78 44       	mov.b	@r4+,	r8	
    4422:	40 38       	jl	$+130    	;abs 0x44a4
    4424:	00 04       	bra	@r4		
    4426:	00 7f       	subc	r15,	r0	
    4428:	3e 1c       	.word	0x1c3e;	????	
    442a:	08 08       	mova	@r8,	r8	
    442c:	08 2a       	jnc	$-1006   	;abs 0x403e
    442e:	1c 08       	mova	@r8+,	r12	
    4430:	08 1c       	.word	0x1c08;	????	
    4432:	2a 08 08 08 	mova	&0x80808,r10	
    4436:	08 2a       	jnc	$-1006   	;abs 0x4048
    4438:	08 08       	mova	@r8,	r8	
    443a:	00 3c       	jmp	$+2      	;abs 0x443c
    443c:	20 00 00 08 	bra	&0x00800	
    4440:	14 00       	mova	#0x00000,r4	
    4442:	14 08       	mova	@r8+,	r4	
    4444:	08 0c       	mova	@r12,	r8	
    4446:	0e 0c       	mova	@r12,	r14	
    4448:	08 08       	mova	@r8,	r8	
    444a:	18 38       	jl	$+50     	;abs 0x447c
    444c:	18 08       	mova	@r8+,	r8	
    444e:	00 00       	bra	@r0		
    4450:	00 00       	bra	@r0		
    4452:	00 00       	bra	@r0		
    4454:	00 5f       	add	r15,	r0	
    4456:	00 00       	bra	@r0		
    4458:	00 07       	bra	@r7		
    445a:	00 07       	bra	@r7		
    445c:	00 14       	pushm.a	#1,	r0	
    445e:	7f 14       	pushm.a	#8,	r15	
    4460:	7f 14       	pushm.a	#8,	r15	
    4462:	24 2a       	jnc	$-950    	;abs 0x40ac
    4464:	7f 2a       	jnc	$-768    	;abs 0x4164
    4466:	12 23       	jnz	$-474    	;abs 0x428c
    4468:	13 08       	.word	0x0813;	????	Illegal as address instr
    446a:	64 62       	addc.b	#4,	r4	;r2 As==10
    446c:	36 49       	mov	@r9+,	r6	
    446e:	55 22       	jnz	$-852    	;abs 0x411a
    4470:	50 00       	rrcm	#1,	r0	
    4472:	05 03       	mova	#2,	r5	;r3 As==10
    4474:	00 00       	bra	@r0		
    4476:	00 1c 22 41 	movx	@r1,	r2	
    447a:	00 00       	bra	@r0		
    447c:	41 22       	jnz	$-892    	;abs 0x4100
    447e:	1c 00       	mova	#0x00000,r12	
    4480:	14 08       	mova	@r8+,	r4	
    4482:	3e 08 14 08 	mova	2068(r8),r14	;0x0814(r8)
    4486:	08 3e       	jmp	$-1006   	;abs 0x4098
    4488:	08 08       	mova	@r8,	r8	
    448a:	00 50       	rla	r0		
    448c:	30 00 00 08 	bra	0x0800		;PC rel. 0x04c8e
    4490:	08 08       	mova	@r8,	r8	
    4492:	08 08       	mova	@r8,	r8	
    4494:	00 60       	rlc	r0		
    4496:	60 00 00 20 	mova	r0,	&0x02000
    449a:	10 08       	bra	@r8+		
    449c:	04 02       	mova	#4,	r4	;r2 As==10
    449e:	3e 51       	add	@r1+,	r14	
    44a0:	49 45       	mov.b	r5,	r9	
    44a2:	3e 00 42 7f 	mova	0x7f42,	r14	;PC rel. 0x0c3e6
    44a6:	40 00       	rrcm.a	#1,	r0	
    44a8:	42 61       	addc.b	r1,	r2	
    44aa:	51 49 46 21 	mov.b	8518(r9),r1	;0x2146(r9)
    44ae:	41 45       	mov.b	r5,	r1	
    44b0:	4b 31       	jn	$+664    	;abs 0x4748
    44b2:	18 14       	pushm.a	#2,	r8	
    44b4:	12 7f 10 27 	subc	10000(r15),r2	;0x2710(r15)
    44b8:	45 45       	mov.b	r5,	r5	
    44ba:	45 39       	jl	$+652    	;abs 0x4746
    44bc:	3c 4a       	mov	@r10+,	r12	
    44be:	49 49       	mov.b	r9,	r9	
    44c0:	30 01 71 09 	bra	2417(r1)	;0x0971(r1)
    44c4:	05 03       	mova	#2,	r5	;r3 As==10
    44c6:	36 49       	mov	@r9+,	r6	
    44c8:	49 49       	mov.b	r9,	r9	
    44ca:	36 06 49 49 	mova	18761(r6),r6	;0x4949(r6)
    44ce:	29 1e       	.word	0x1e29;	????	
    44d0:	00 36       	jge	$-1022   	;abs 0x40d2
    44d2:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x044d4
    44d6:	56 36       	jge	$-850    	;abs 0x4184
    44d8:	00 00       	bra	@r0		
    44da:	08 14       	pushm.a	#1,	r8	
    44dc:	22 41       	mov	@r1,	r2	
    44de:	00 14       	pushm.a	#1,	r0	
    44e0:	14 14       	pushm.a	#2,	r4	
    44e2:	14 14       	pushm.a	#2,	r4	
    44e4:	00 41       	br	r1		
    44e6:	22 14       	pushm.a	#3,	r2	
    44e8:	08 02       	mova	#4,	r8	;r2 As==10
    44ea:	01 51       	rla	r1		
    44ec:	09 06       	mova	@r6,	r9	
    44ee:	32 49       	mov	@r9+,	r2	
    44f0:	79 41       	pop.b	r9		
    44f2:	3e 7e       	subc	@r14+,	r14	
    44f4:	11 11 11 7e 	rra	32273(r1)	;0x7e11(r1)
    44f8:	7f 49       	mov.b	@r9+,	r15	
    44fa:	49 49       	mov.b	r9,	r9	
    44fc:	36 3e       	jmp	$-914    	;abs 0x416a
    44fe:	41 41       	mov.b	r1,	r1	
    4500:	41 22       	jnz	$-892    	;abs 0x4184
    4502:	7f 41       	pop.b	r15		
    4504:	41 22       	jnz	$-892    	;abs 0x4188
    4506:	1c 7f 49 49 	subc	18761(r15),r12	;0x4949(r15)
    450a:	49 41       	mov.b	r1,	r9	
    450c:	7f 09 09 09 	mova	r9,	2313(r15);0x0909(r15)
    4510:	01 3e       	jmp	$-1020   	;abs 0x4114
    4512:	41 49       	mov.b	r9,	r1	
    4514:	49 7a       	subc.b	r10,	r9	
    4516:	7f 08 08 08 	mova	r8,	2056(r15);0x0808(r15)
    451a:	7f 00 41 7f 	mova	r0,	32577(r15);0x7f41(r15)
    451e:	41 00       	rrcm.a	#1,	r1	
    4520:	20 40       	br	@r0		
    4522:	41 3f       	jmp	$-380    	;abs 0x43a6
    4524:	01 7f       	subc	r15,	r1	
    4526:	08 14       	pushm.a	#1,	r8	
    4528:	22 41       	mov	@r1,	r2	
    452a:	7f 40 40 40 	mov.b	#16448,	r15	;#0x4040
    452e:	40 7f       	subc.b	r15,	r0	
    4530:	02 0c       	mova	@r12,	r2	
    4532:	02 7f       	subc	r15,	r2	
    4534:	7f 04 08 10 	mova	r4,	4104(r15);0x1008(r15)
    4538:	7f 3e       	jmp	$-768    	;abs 0x4238
    453a:	41 41       	mov.b	r1,	r1	
    453c:	41 3e       	jmp	$-892    	;abs 0x41c0
    453e:	7f 09 09 09 	mova	r9,	2313(r15);0x0909(r15)
    4542:	06 3e       	jmp	$-1010   	;abs 0x4150
    4544:	41 51       	rla.b	r1		
    4546:	21 5e       	add	@r14,	r1	
    4548:	7f 09 19 29 	mova	r9,	10521(r15);0x2919(r15)
    454c:	46 46       	mov.b	r6,	r6	
    454e:	49 49       	mov.b	r9,	r9	
    4550:	49 31       	jn	$+660    	;abs 0x47e4
    4552:	01 01       	mova	@r1,	r1	
    4554:	7f 01 01 3f 	mova	r1,	16129(r15);0x3f01(r15)
    4558:	40 40       	br	r0		
    455a:	40 3f       	jmp	$-382    	;abs 0x43dc
    455c:	1f 20       	jnz	$+64     	;abs 0x459c
    455e:	40 20       	jnz	$+130    	;abs 0x45e0
    4560:	1f 3f       	jmp	$-448    	;abs 0x43a0
    4562:	40 38       	jl	$+130    	;abs 0x45e4
    4564:	40 3f       	jmp	$-382    	;abs 0x43e6
    4566:	63 14       	pushm.a	#7,	#0	;r3 As==00
    4568:	08 14       	pushm.a	#1,	r8	
    456a:	63 07 08 70 	mova	r7,	&0x37008
    456e:	08 07       	mova	@r7,	r8	
    4570:	61 51       	add.b	@r1,	r1	
    4572:	49 45       	mov.b	r5,	r9	
    4574:	43 00       	rrcm.a	#1,	#0	;r3 As==00
    4576:	7f 41       	pop.b	r15		
    4578:	41 00       	rrcm.a	#1,	r1	
    457a:	02 04       	mova	@r4,	r2	
    457c:	08 10       	rrc	r8		
    457e:	20 00 41 41 	bra	&0x04141	
    4582:	7f 00 04 02 	mova	r0,	516(r15);0x0204(r15)
    4586:	01 02       	mova	#4,	r1	;r2 As==10
    4588:	04 40       	mov	r0,	r4	
    458a:	40 40       	br	r0		
    458c:	40 40       	br	r0		
    458e:	00 01       	bra	@r1		
    4590:	02 04       	mova	@r4,	r2	
    4592:	00 20       	jnz	$+2      	;abs 0x4594
    4594:	54 54 54 78 	add.b	30804(r4),r4	;0x7854(r4)
    4598:	7f 48       	mov.b	@r8+,	r15	
    459a:	44 44       	mov.b	r4,	r4	
    459c:	38 38       	jl	$+114    	;abs 0x460e
    459e:	44 44       	mov.b	r4,	r4	
    45a0:	44 20       	jnz	$+138    	;abs 0x462a
    45a2:	38 44       	mov	@r4+,	r8	
    45a4:	44 48       	mov.b	r8,	r4	
    45a6:	7f 38       	jl	$+256    	;abs 0x46a6
    45a8:	54 54 54 18 	add.b	6228(r4),r4	;0x1854(r4)
    45ac:	08 7e       	subc	r14,	r8	
    45ae:	09 01       	mova	@r1,	r9	
    45b0:	02 0c       	mova	@r12,	r2	
    45b2:	52 52 52 3e 	add.b	&0x3e52,r2	
    45b6:	7f 08 04 04 	mova	r8,	1028(r15);0x0404(r15)
    45ba:	78 00 44 7d 	mova	r0,	32068(r8);0x7d44(r8)
    45be:	40 00       	rrcm.a	#1,	r0	
    45c0:	20 40       	br	@r0		
    45c2:	44 3d       	jmp	$+650    	;abs 0x484c
    45c4:	00 7f       	subc	r15,	r0	
    45c6:	10 28       	jnc	$+34     	;abs 0x45e8
    45c8:	44 00       	rrcm.a	#1,	r4	
    45ca:	00 41       	br	r1		
    45cc:	7f 40 00 7c 	mov.b	#31744,	r15	;#0x7c00
    45d0:	04 18 04 78 	.rpt	#4
				subcx	r8,	r4	
    45d4:	7c 08 04 04 	mova	r8,	1028(r12);0x0404(r12)
    45d8:	78 38       	jl	$+242    	;abs 0x46ca
    45da:	44 44       	mov.b	r4,	r4	
    45dc:	44 38       	jl	$+138    	;abs 0x4666
    45de:	7c 14       	pushm.a	#8,	r12	
    45e0:	14 14       	pushm.a	#2,	r4	
    45e2:	08 08       	mova	@r8,	r8	
    45e4:	14 14       	pushm.a	#2,	r4	
    45e6:	18 7c 7c 08 	subc	2172(r12),r8	;0x087c(r12)
    45ea:	04 04       	mova	@r4,	r4	
    45ec:	08 48       	mov	r8,	r8	
    45ee:	54 54 54 20 	add.b	8276(r4),r4	;0x2054(r4)
    45f2:	04 3f       	jmp	$-502    	;abs 0x43fc
    45f4:	44 40       	mov.b	r0,	r4	
    45f6:	20 3c       	jmp	$+66     	;abs 0x4638
    45f8:	40 40       	br	r0		
    45fa:	20 7c       	subc	@r12,	r0	
    45fc:	1c 20       	jnz	$+58     	;abs 0x4636
    45fe:	40 20       	jnz	$+130    	;abs 0x4680
    4600:	1c 3c       	jmp	$+58     	;abs 0x463a
    4602:	40 30       	jn	$+130    	;abs 0x4684
    4604:	40 3c       	jmp	$+130    	;abs 0x4686
    4606:	44 28       	jnc	$+138    	;abs 0x4690
    4608:	10 28       	jnc	$+34     	;abs 0x462a
    460a:	44 0c       	rrcm.a	#4,	r4	
    460c:	50 50 50 3c 	add.b	0x3c50,	r0	;PC rel. 0x08260
    4610:	44 64       	rlc.b	r4		
    4612:	54 4c 44 00 	mov.b	68(r12),r4	;0x0044(r12)
    4616:	00 36       	jge	$-1022   	;abs 0x4218
    4618:	41 00       	rrcm.a	#1,	r1	
    461a:	00 00       	bra	@r0		
    461c:	7f 00 00 00 	mova	r0,	0(r15)	;0x0000(r15)
    4620:	41 36       	jge	$-892    	;abs 0x42a4
    4622:	08 00       	mova	@r0,	r8	
    4624:	10 08       	bra	@r8+		
    4626:	08 10       	rrc	r8		
    4628:	08 78       	subc	r8,	r8	
    462a:	46 41       	mov.b	r1,	r6	
    462c:	46 78       	subc.b	r8,	r6	

0000462e <putchar>:
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
            printf("WAIT CH7 BACK    ");
            
            if(ChannelInput[CH7_CH] < 2500){
    462e:	b0 12 2c 4d 	call	#0x4d2c	
                MenuStep = DISPLAY;
            }
    4632:	0f 43       	clr	r15		
    4634:	30 41       	ret			

00004636 <lcd_setcolor>:
            break;
                    
        case PROCESS_OPTION:
    4636:	4d 4f       	mov.b	r15,	r13	
            process_option();
    4638:	c2 4e 8e 11 	mov.b	r14,	&0x118e	
            break;
    463c:	c2 4d 8f 11 	mov.b	r13,	&0x118f	
            
    4640:	30 41       	ret			

00004642 <n6100_send>:
}

void process_option(){
    int i;
    switch (MenuOption){
        case RADIO_RAW:
    4642:	0b 12       	push	r11		
    4644:	4b 4f       	mov.b	r15,	r11	
            draw_rc_inputs(1);
    4646:	7c 40 80 ff 	mov.b	#-128,	r12	;#0xff80
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
    464a:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    464c:	24 28       	jnc	$+74     	;abs 0x4696
            break;
    464e:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
    4652:	d2 c3 31 00 	bic.b	#1,	&0x0031	;r3 As==01
            for(i = 5; i >= 0; i--){ // contagem regressiva
    4656:	f2 d2 31 00 	bis.b	#8,	&0x0031	;r2 As==11
                lcd_goto(8,8);
    465a:	f2 c2 31 00 	bic.b	#8,	&0x0031	;r2 As==11
                printf("%d", i);
                delayms(1000);
    465e:	4d 43       	clr.b	r13		
            }
    4660:	4f 4b       	mov.b	r11,	r15	
    4662:	4f fc       	and.b	r12,	r15	
    4664:	15 24       	jz	$+44     	;abs 0x4690
            MotorArmed = TRUE;
    4666:	e2 d3 31 00 	bis.b	#2,	&0x0031	;r3 As==10
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
            break;
            
    466a:	f2 d2 31 00 	bis.b	#8,	&0x0031	;r2 As==11
        case INITIAL_SETTINGS:
    466e:	f2 c2 31 00 	bic.b	#8,	&0x0031	;r2 As==11
            
    4672:	12 c3       	clrc			
    4674:	4c 10       	rrc.b	r12		
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
                lcd_goto(8,8);
                printf("%d", i);
                delayms(1000);
    4676:	5d 53       	inc.b	r13		
    4678:	7d 92       	cmp.b	#8,	r13	;r2 As==11
    467a:	f2 2b       	jnc	$-26     	;abs 0x4660
            
        case INITIAL_SETTINGS:
            
            // seta o flag initial setup
            break;          
    }
    467c:	5e 93       	cmp.b	#1,	r14	;r3 As==01
    467e:	0e 24       	jz	$+30     	;abs 0x469c
    4680:	7e 90 03 00 	cmp.b	#3,	r14	;#0x0003
    4684:	0b 24       	jz	$+24     	;abs 0x469c
    
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
    4686:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    468a:	d2 d3 31 00 	bis.b	#1,	&0x0031	;r3 As==01
    468e:	06 3c       	jmp	$+14     	;abs 0x469c
                delayms(1000);
            }
            MotorArmed = TRUE;
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
    4690:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10
    4694:	ea 3f       	jmp	$-42     	;abs 0x466a
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
    4696:	e2 d3 31 00 	bis.b	#2,	&0x0031	;r3 As==10
    469a:	db 3f       	jmp	$-72     	;abs 0x4652
    }
    
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        analog_graph_clear_all();
    469c:	3b 41       	pop	r11		
    469e:	30 41       	ret			

000046a0 <lcd_init>:
        lcd_clear(BLACK);
    }
}
    46a0:	0b 12       	push	r11		
    46a2:	4b 4f       	mov.b	r15,	r11	

    46a4:	f2 d0 0f 00 	bis.b	#15,	&0x0032	;#0x000f
    46a8:	32 00 
void draw_analog_graph(void){
    int i, k;
    46aa:	d2 d3 31 00 	bis.b	#1,	&0x0031	;r3 As==01
    for(i = 0; i < 8; i++){
    46ae:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10
        if((1 << i) & AnalogChecked){
    46b2:	f2 c2 31 00 	bic.b	#8,	&0x0031	;r2 As==11
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
    46b6:	e2 c2 31 00 	bic.b	#4,	&0x0031	;r2 As==10
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
    46ba:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    46be:	b0 12 04 4e 	call	#0x4e04	
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
    46c2:	e2 d2 31 00 	bis.b	#4,	&0x0031	;r2 As==10
            }
    46c6:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    46ca:	b0 12 04 4e 	call	#0x4e04	
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
        }
    }
    46ce:	6e 43       	mov.b	#2,	r14	;r3 As==10
    46d0:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011
    46d4:	b0 12 42 46 	call	#0x4642	
    
}
    46d8:	7e 40 40 00 	mov.b	#64,	r14	;#0x0040
    46dc:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    46e0:	b0 12 0a 48 	call	#0x480a	

void analog_graph_clear(int n){
    46e4:	6e 43       	mov.b	#2,	r14	;r3 As==10
    46e6:	7f 40 29 00 	mov.b	#41,	r15	;#0x0029
    46ea:	b0 12 42 46 	call	#0x4642	
    int i;
    46ee:	6e 43       	mov.b	#2,	r14	;r3 As==10
    46f0:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
    46f4:	b0 12 42 46 	call	#0x4642	
    for(i = 0; i < GRAPH_LENGHT; i++){
    46f8:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    46fc:	b0 12 04 4e 	call	#0x4e04	
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
        AnalogGraph[n][i] = 0;
    }
    4700:	6e 43       	mov.b	#2,	r14	;r3 As==10
    4702:	7f 40 3a 00 	mov.b	#58,	r15	;#0x003a
    4706:	b0 12 0a 48 	call	#0x480a	
}

    470a:	6e 43       	mov.b	#2,	r14	;r3 As==10
    470c:	7f 40 2d 00 	mov.b	#45,	r15	;#0x002d
    4710:	b0 12 42 46 	call	#0x4642	
void process_analog_menu(void){
    draw_analog_graph();
    4714:	4e 43       	clr.b	r14		
    4716:	4f 43       	clr.b	r15		
    4718:	b0 12 42 46 	call	#0x4642	
    switch(MenuAnalog){
    471c:	4e 43       	clr.b	r14		
    471e:	6f 43       	mov.b	#2,	r15	;r3 As==10
    4720:	b0 12 42 46 	call	#0x4642	
        case DISPLAY:
    4724:	4e 43       	clr.b	r14		
    4726:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    472a:	b0 12 42 46 	call	#0x4642	
            lcd_goto(4,0);
    472e:	4e 43       	clr.b	r14		
    4730:	7f 40 07 00 	mov.b	#7,	r15	;#0x0007
    4734:	b0 12 42 46 	call	#0x4642	
            printf("ANALOG GRAPH   ");
    4738:	4e 43       	clr.b	r14		
    473a:	7f 40 09 00 	mov.b	#9,	r15	;#0x0009
    473e:	b0 12 42 46 	call	#0x4642	
            
    4742:	4e 43       	clr.b	r14		
    4744:	7f 40 0b 00 	mov.b	#11,	r15	;#0x000b
    4748:	b0 12 42 46 	call	#0x4642	
            lcd_goto(0,14);
    474c:	4e 43       	clr.b	r14		
    474e:	7f 40 0d 00 	mov.b	#13,	r15	;#0x000d
    4752:	b0 12 42 46 	call	#0x4642	
            printf("DISPLAY             ");
    4756:	4e 43       	clr.b	r14		
    4758:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    475c:	b0 12 42 46 	call	#0x4642	

            refresh_analog_menu();
    4760:	4e 43       	clr.b	r14		
    4762:	4f 43       	clr.b	r15		
    4764:	b0 12 42 46 	call	#0x4642	
            MenuAnalog = SELECT;
    4768:	4e 43       	clr.b	r14		
    476a:	6f 43       	mov.b	#2,	r15	;r3 As==10
    476c:	b0 12 42 46 	call	#0x4642	
            break;
    4770:	4e 43       	clr.b	r14		
    4772:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    4776:	b0 12 42 46 	call	#0x4642	
        case SELECT:
    477a:	4e 43       	clr.b	r14		
    477c:	7f 40 07 00 	mov.b	#7,	r15	;#0x0007
    4780:	b0 12 42 46 	call	#0x4642	
            lcd_goto(0,14);
    4784:	4e 43       	clr.b	r14		
    4786:	7f 40 09 00 	mov.b	#9,	r15	;#0x0009
    478a:	b0 12 42 46 	call	#0x4642	
            printf("SELECT            ");
    478e:	4e 43       	clr.b	r14		
    4790:	7f 40 0b 00 	mov.b	#11,	r15	;#0x000b
    4794:	b0 12 42 46 	call	#0x4642	

    4798:	4e 43       	clr.b	r14		
    479a:	7f 40 0d 00 	mov.b	#13,	r15	;#0x000d
    479e:	b0 12 42 46 	call	#0x4642	
            // move para os lados
    47a2:	4e 43       	clr.b	r14		
    47a4:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    47a8:	b0 12 42 46 	call	#0x4642	
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
    47ac:	4e 43       	clr.b	r14		
    47ae:	4f 43       	clr.b	r15		
    47b0:	b0 12 42 46 	call	#0x4642	
            }
    47b4:	4e 43       	clr.b	r14		
    47b6:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    47ba:	b0 12 42 46 	call	#0x4642	
            else{
    47be:	4e 43       	clr.b	r14		
    47c0:	7f 40 0b 00 	mov.b	#11,	r15	;#0x000b
    47c4:	b0 12 42 46 	call	#0x4642	
                if(ChannelInput[ROLL_CH] < 2500){
    47c8:	4e 43       	clr.b	r14		
    47ca:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    47ce:	b0 12 42 46 	call	#0x4642	
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
    47d2:	4e 43       	clr.b	r14		
    47d4:	7f 40 36 00 	mov.b	#54,	r15	;#0x0036
    47d8:	b0 12 0a 48 	call	#0x480a	
            
            // check uncheck
    47dc:	4b 12       	push.b	r11		
    47de:	7c 40 84 ff 	mov.b	#-124,	r12	;#0xff84
    47e2:	7d 40 84 ff 	mov.b	#-124,	r13	;#0xff84
    47e6:	4e 43       	clr.b	r14		
    47e8:	4f 43       	clr.b	r15		
    47ea:	b0 12 48 48 	call	#0x4848	
    47ee:	21 53       	incd	r1		
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
            }
    47f0:	3b 41       	pop	r11		
    47f2:	30 41       	ret			

000047f4 <lcd_clear>:
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
                }
    47f4:	4f 12       	push.b	r15		
    47f6:	7c 40 84 ff 	mov.b	#-124,	r12	;#0xff84
    47fa:	7d 40 84 ff 	mov.b	#-124,	r13	;#0xff84
    47fe:	4e 43       	clr.b	r14		
    4800:	4f 43       	clr.b	r15		
    4802:	b0 12 48 48 	call	#0x4848	
    4806:	21 53       	incd	r1		
            }
    4808:	30 41       	ret			

0000480a <n6100_sendcom1>:
            
            break;
        case WAIT_PITCH_DOWN:
    480a:	0b 12       	push	r11		
    480c:	4b 4e       	mov.b	r14,	r11	
            lcd_goto(0,14);
    480e:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    4812:	b0 12 42 46 	call	#0x4642	
            printf("WAIT PITCH DOWN    ");
    4816:	4e 43       	clr.b	r14		
    4818:	4f 4b       	mov.b	r11,	r15	
    481a:	b0 12 42 46 	call	#0x4642	

    481e:	3b 41       	pop	r11		
    4820:	30 41       	ret			

00004822 <n6100_sendcom2>:
            if(ChannelInput[PITCH_CH] > 2500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
    4822:	0b 12       	push	r11		
    4824:	0a 12       	push	r10		
    4826:	4b 4e       	mov.b	r14,	r11	
    4828:	4a 4d       	mov.b	r13,	r10	
            }
    482a:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    482e:	b0 12 42 46 	call	#0x4642	
            break;
    4832:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4834:	4f 4b       	mov.b	r11,	r15	
    4836:	b0 12 42 46 	call	#0x4642	
            
    483a:	4e 43       	clr.b	r14		
    483c:	4f 4a       	mov.b	r10,	r15	
    483e:	b0 12 42 46 	call	#0x4642	
        case WAIT_PITCH_UP:
    4842:	3a 41       	pop	r10		
    4844:	3b 41       	pop	r11		
    4846:	30 41       	ret			

00004848 <lcd_fillrect>:
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");

    4848:	0b 12       	push	r11		
    484a:	0a 12       	push	r10		
    484c:	09 12       	push	r9		
    484e:	08 12       	push	r8		
    4850:	07 12       	push	r7		
    4852:	3b 40 0c 00 	mov	#12,	r11	;#0x000c
    4856:	0b 51       	add	r1,	r11	
    4858:	4a 4f       	mov.b	r15,	r10	
    485a:	49 4e       	mov.b	r14,	r9	
    485c:	48 4d       	mov.b	r13,	r8	
    485e:	47 4c       	mov.b	r12,	r7	
    4860:	6b 4b       	mov.b	@r11,	r11	
            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                analog_graph_clear(AnalogSelect);
    4862:	4f 5d       	add.b	r13,	r15	
    4864:	7f 53       	add.b	#-1,	r15	;r3 As==11
    4866:	4d 4f       	mov.b	r15,	r13	
    4868:	4e 4a       	mov.b	r10,	r14	
    486a:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    486e:	b0 12 22 48 	call	#0x4822	
                MenuAnalog = DISPLAY;
    4872:	4f 49       	mov.b	r9,	r15	
    4874:	4f 57       	add.b	r7,	r15	
    4876:	7f 53       	add.b	#-1,	r15	;r3 As==11
    4878:	4d 4f       	mov.b	r15,	r13	
    487a:	4e 49       	mov.b	r9,	r14	
    487c:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    4880:	b0 12 22 48 	call	#0x4822	
            }
            break;
    4884:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    4888:	7f 40 2c 00 	mov.b	#44,	r15	;#0x002c
    488c:	b0 12 42 46 	call	#0x4642	
            
        case WAIT_ROLL_RIGHT:
    4890:	02 12       	push	r2		
    4892:	32 c2       	dint			
    4894:	03 43       	nop			
    4896:	c2 48 30 01 	mov.b	r8,	&0x0130	
    489a:	c2 47 38 01 	mov.b	r7,	&0x0138	
    489e:	19 42 3a 01 	mov	&0x013a,r9	
    48a2:	32 41       	pop	r2		
                lcd_goto(0,14);
    48a4:	0a 43       	clr	r10		
    48a6:	0a 99       	cmp	r9,	r10	
    48a8:	07 2c       	jc	$+16     	;abs 0x48b8
                printf("WAIT ROLL RIGHT ");

    48aa:	5e 43       	mov.b	#1,	r14	;r3 As==01
    48ac:	4f 4b       	mov.b	r11,	r15	
    48ae:	b0 12 42 46 	call	#0x4642	
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
    48b2:	1a 53       	inc	r10		
    48b4:	0a 99       	cmp	r9,	r10	
    48b6:	f9 2b       	jnc	$-12     	;abs 0x48aa
                printf("WAIT ROLL RIGHT ");

                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
                        AnalogSelect--;
    48b8:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10
                    }
    48bc:	d2 d3 31 00 	bis.b	#1,	&0x0031	;r3 As==01
                    MenuAnalog = DISPLAY;
                }
    48c0:	7d 40 83 ff 	mov.b	#-125,	r13	;#0xff83
    48c4:	4e 43       	clr.b	r14		
    48c6:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    48ca:	b0 12 22 48 	call	#0x4822	
            break;
    48ce:	7d 40 83 ff 	mov.b	#-125,	r13	;#0xff83
    48d2:	4e 43       	clr.b	r14		
    48d4:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    48d8:	b0 12 22 48 	call	#0x4822	
            
    48dc:	37 41       	pop	r7		
    48de:	38 41       	pop	r8		
    48e0:	39 41       	pop	r9		
    48e2:	3a 41       	pop	r10		
    48e4:	3b 41       	pop	r11		
    48e6:	30 41       	ret			

000048e8 <lcd_drawcircle>:
        case WAIT_ROLL_LEFT:
                lcd_goto(0,14);
                printf("WAIT ROLL LEFT   ");
    48e8:	0b 12       	push	r11		
    48ea:	0a 12       	push	r10		
    48ec:	09 12       	push	r9		
    48ee:	08 12       	push	r8		
    48f0:	07 12       	push	r7		
    48f2:	06 12       	push	r6		
    48f4:	05 12       	push	r5		
    48f6:	04 12       	push	r4		
    48f8:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    48fc:	3b 40 1c 00 	mov	#28,	r11	;#0x001c
    4900:	0b 51       	add	r1,	r11	
    4902:	05 4f       	mov	r15,	r5	
    4904:	06 4e       	mov	r14,	r6	
    4906:	48 4c       	mov.b	r12,	r8	
    4908:	29 4b       	mov	@r11,	r9	
        
    490a:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01, 0x0000(r1)
    490e:	81 8d 00 00 	sub	r13,	0(r1)	;0x0000(r1)
                if(ChannelInput[PITCH_CH] > 2500){
    4912:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
                   if(AnalogSelect < 7){
    4916:	0e 4d       	mov	r13,	r14	
    4918:	0e 5e       	rla	r14		
    491a:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    491e:	b1 e3 04 00 	xor	#-1,	4(r1)	;r3 As==11, 0x0004(r1)
    4922:	91 53 04 00 	inc	4(r1)		;0x0004(r1)
                        AnalogSelect++;
    4926:	04 43       	clr	r4		
                    }
    4928:	07 4d       	mov	r13,	r7	
                    MenuAnalog = DISPLAY;
    492a:	4f 46       	mov.b	r6,	r15	
    492c:	4f 5d       	add.b	r13,	r15	
    492e:	c1 4f 07 00 	mov.b	r15,	7(r1)	;0x0007(r1)
    4932:	4c 12       	push.b	r12		
    4934:	4c 49       	mov.b	r9,	r12	
    4936:	4d 49       	mov.b	r9,	r13	
    4938:	5e 41 09 00 	mov.b	9(r1),	r14	;0x0009(r1)
    493c:	4f 45       	mov.b	r5,	r15	
    493e:	b0 12 48 48 	call	#0x4848	

    4942:	4e 46       	mov.b	r6,	r14	
    4944:	4e 87       	sub.b	r7,	r14	
    4946:	c1 4e 0b 00 	mov.b	r14,	11(r1)	;0x000b(r1)
    494a:	48 12       	push.b	r8		
    494c:	4c 49       	mov.b	r9,	r12	
    494e:	4d 49       	mov.b	r9,	r13	
    4950:	5e 41 0d 00 	mov.b	13(r1),	r14	;0x000d(r1)
    4954:	4f 45       	mov.b	r5,	r15	
    4956:	b0 12 48 48 	call	#0x4848	
                }
    495a:	4f 45       	mov.b	r5,	r15	
    495c:	4f 57       	add.b	r7,	r15	
    495e:	c1 4f 0a 00 	mov.b	r15,	10(r1)	;0x000a(r1)
    4962:	48 12       	push.b	r8		
    4964:	4c 49       	mov.b	r9,	r12	
    4966:	4d 49       	mov.b	r9,	r13	
    4968:	4e 46       	mov.b	r6,	r14	
    496a:	5f 41 0c 00 	mov.b	12(r1),	r15	;0x000c(r1)
    496e:	b0 12 48 48 	call	#0x4848	
            break;
    4972:	4e 45       	mov.b	r5,	r14	
    4974:	4e 87       	sub.b	r7,	r14	
    4976:	c1 4e 0e 00 	mov.b	r14,	14(r1)	;0x000e(r1)
    497a:	48 12       	push.b	r8		
    497c:	4c 49       	mov.b	r9,	r12	
    497e:	4d 49       	mov.b	r9,	r13	
    4980:	4e 46       	mov.b	r6,	r14	
    4982:	5f 41 10 00 	mov.b	16(r1),	r15	;0x0010(r1)
    4986:	b0 12 48 48 	call	#0x4848	
            
    498a:	31 52       	add	#8,	r1	;r2 As==11
    498c:	04 97       	cmp	r7,	r4	
    498e:	6d 34       	jge	$+220    	;abs 0x4a6a
        case PROCESS_OPTION:
    4990:	81 93 00 00 	tst	0(r1)		;0x0000(r1)
    4994:	16 38       	jl	$+46     	;abs 0x49c2
            break;
    4996:	37 53       	add	#-1,	r7	;r3 As==11
        case WAIT_CH7_BACK:
    4998:	a1 53 04 00 	incd	4(r1)		;0x0004(r1)
            break;
    499c:	91 51 04 00 	add	4(r1),	0(r1)	;0x0004(r1), 0x0000(r1)
    49a0:	00 00 
    49a2:	4f 46       	mov.b	r6,	r15	
    49a4:	4f 57       	add.b	r7,	r15	
    49a6:	c1 4f 07 00 	mov.b	r15,	7(r1)	;0x0007(r1)
    49aa:	4e 46       	mov.b	r6,	r14	
    49ac:	4e 87       	sub.b	r7,	r14	
    49ae:	c1 4e 09 00 	mov.b	r14,	9(r1)	;0x0009(r1)
    49b2:	4f 45       	mov.b	r5,	r15	
    49b4:	4f 57       	add.b	r7,	r15	
    49b6:	c1 4f 06 00 	mov.b	r15,	6(r1)	;0x0006(r1)
    49ba:	4e 45       	mov.b	r5,	r14	
    49bc:	4e 87       	sub.b	r7,	r14	
    49be:	c1 4e 08 00 	mov.b	r14,	8(r1)	;0x0008(r1)
    }
}
    49c2:	14 53       	inc	r4		

    49c4:	a1 53 02 00 	incd	2(r1)		;0x0002(r1)
void refresh_analog_menu(void){
    49c8:	91 51 02 00 	add	2(r1),	0(r1)	;0x0002(r1), 0x0000(r1)
    49cc:	00 00 
    49ce:	91 53 00 00 	inc	0(r1)		;0x0000(r1)
    int i;
    49d2:	4a 45       	mov.b	r5,	r10	
    49d4:	4a 54       	add.b	r4,	r10	
    49d6:	48 12       	push.b	r8		
    49d8:	4c 49       	mov.b	r9,	r12	
    49da:	4d 49       	mov.b	r9,	r13	
    49dc:	5e 41 09 00 	mov.b	9(r1),	r14	;0x0009(r1)
    49e0:	4f 4a       	mov.b	r10,	r15	
    49e2:	b0 12 48 48 	call	#0x4848	
    lcd_goto(1,12);
    49e6:	4b 45       	mov.b	r5,	r11	
    49e8:	4b 84       	sub.b	r4,	r11	
    49ea:	48 12       	push.b	r8		
    49ec:	4c 49       	mov.b	r9,	r12	
    49ee:	4d 49       	mov.b	r9,	r13	
    49f0:	5e 41 0b 00 	mov.b	11(r1),	r14	;0x000b(r1)
    49f4:	4f 4b       	mov.b	r11,	r15	
    49f6:	b0 12 48 48 	call	#0x4848	
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    49fa:	48 12       	push.b	r8		
    49fc:	4c 49       	mov.b	r9,	r12	
    49fe:	4d 49       	mov.b	r9,	r13	
    4a00:	5e 41 0f 00 	mov.b	15(r1),	r14	;0x000f(r1)
    4a04:	4f 4a       	mov.b	r10,	r15	
    4a06:	b0 12 48 48 	call	#0x4848	
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
    4a0a:	48 12       	push.b	r8		
    4a0c:	4c 49       	mov.b	r9,	r12	
    4a0e:	4d 49       	mov.b	r9,	r13	
    4a10:	5e 41 11 00 	mov.b	17(r1),	r14	;0x0011(r1)
    4a14:	4f 4b       	mov.b	r11,	r15	
    4a16:	b0 12 48 48 	call	#0x4848	
            color_back = LIME;          // a cor do fundo muda para azul
    4a1a:	4b 46       	mov.b	r6,	r11	
    4a1c:	4b 54       	add.b	r4,	r11	
    4a1e:	48 12       	push.b	r8		
    4a20:	4c 49       	mov.b	r9,	r12	
    4a22:	4d 49       	mov.b	r9,	r13	
    4a24:	4e 4b       	mov.b	r11,	r14	
    4a26:	5f 41 10 00 	mov.b	16(r1),	r15	;0x0010(r1)
    4a2a:	b0 12 48 48 	call	#0x4848	
            color_fore = BLACK;
    4a2e:	48 12       	push.b	r8		
    4a30:	4c 49       	mov.b	r9,	r12	
    4a32:	4d 49       	mov.b	r9,	r13	
    4a34:	4e 4b       	mov.b	r11,	r14	
    4a36:	5f 41 14 00 	mov.b	20(r1),	r15	;0x0014(r1)
    4a3a:	b0 12 48 48 	call	#0x4848	
        }
    4a3e:	4b 46       	mov.b	r6,	r11	
    4a40:	4b 84       	sub.b	r4,	r11	
    4a42:	48 12       	push.b	r8		
    4a44:	4c 49       	mov.b	r9,	r12	
    4a46:	4d 49       	mov.b	r9,	r13	
    4a48:	4e 4b       	mov.b	r11,	r14	
    4a4a:	5f 41 14 00 	mov.b	20(r1),	r15	;0x0014(r1)
    4a4e:	b0 12 48 48 	call	#0x4848	
        else{                           // senao
    4a52:	48 12       	push.b	r8		
    4a54:	4c 49       	mov.b	r9,	r12	
    4a56:	4d 49       	mov.b	r9,	r13	
    4a58:	4e 4b       	mov.b	r11,	r14	
    4a5a:	5f 41 18 00 	mov.b	24(r1),	r15	;0x0018(r1)
    4a5e:	b0 12 48 48 	call	#0x4848	
    4a62:	31 50 10 00 	add	#16,	r1	;#0x0010
    4a66:	04 97       	cmp	r7,	r4	
    4a68:	93 3b       	jl	$-216    	;abs 0x4990
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
    4a6a:	31 50 0a 00 	add	#10,	r1	;#0x000a
    4a6e:	34 41       	pop	r4		
    4a70:	35 41       	pop	r5		
    4a72:	36 41       	pop	r6		
    4a74:	37 41       	pop	r7		
    4a76:	38 41       	pop	r8		
    4a78:	39 41       	pop	r9		
    4a7a:	3a 41       	pop	r10		
    4a7c:	3b 41       	pop	r11		
    4a7e:	30 41       	ret			

00004a80 <lcd_drawline>:
        }
        
    4a80:	0b 12       	push	r11		
    4a82:	0a 12       	push	r10		
    4a84:	09 12       	push	r9		
    4a86:	08 12       	push	r8		
    4a88:	07 12       	push	r7		
    4a8a:	06 12       	push	r6		
    4a8c:	05 12       	push	r5		
    4a8e:	04 12       	push	r4		
    4a90:	21 82       	sub	#4,	r1	;r2 As==10
    4a92:	3b 40 16 00 	mov	#22,	r11	;#0x0016
    4a96:	0b 51       	add	r1,	r11	
    4a98:	09 4f       	mov	r15,	r9	
    4a9a:	0a 4e       	mov	r14,	r10	
    4a9c:	04 4d       	mov	r13,	r4	
    4a9e:	05 4c       	mov	r12,	r5	
    4aa0:	26 4b       	mov	@r11,	r6	
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    4aa2:	07 4c       	mov	r12,	r7	
    4aa4:	07 8e       	sub	r14,	r7	
            color_fore = RED;           // a cor da letra muda para vermelho 
    4aa6:	08 4d       	mov	r13,	r8	
    4aa8:	08 8f       	sub	r15,	r8	
        }                                                                
        else{                           // se nao                        
    4aaa:	07 93       	tst	r7		
    4aac:	3e 38       	jl	$+126    	;abs 0x4b2a
            if(color_back == LIME){
                color_fore = BLACK;
            }
        }                               
        
    4aae:	91 43 02 00 	mov	#1,	2(r1)	;r3 As==01, 0x0002(r1)
        printf("%d",i);
        // ajusta as cores para o normal
    4ab2:	08 93       	tst	r8		
    4ab4:	35 38       	jl	$+108    	;abs 0x4b20
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
    4ab6:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01, 0x0000(r1)
}

    4aba:	07 57       	rla	r7		
interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    4abc:	08 58       	rla	r8		
    ControlCounter++;
    RCCounter++;
    4abe:	0d 46       	mov	r6,	r13	
    4ac0:	4e 4a       	mov.b	r10,	r14	
    4ac2:	4f 49       	mov.b	r9,	r15	
    4ac4:	b0 12 48 4b 	call	#0x4b48	
    MenuCounter++;
}
    4ac8:	07 98       	cmp	r8,	r7	
    4aca:	15 34       	jge	$+44     	;abs 0x4af6

    4acc:	0f 48       	mov	r8,	r15	
    4ace:	0f 11       	rra	r15		
    4ad0:	0b 47       	mov	r7,	r11	
    4ad2:	0b 8f       	sub	r15,	r11	
void clock_init(void)
    4ad4:	09 94       	cmp	r4,	r9	
    4ad6:	2e 24       	jz	$+94     	;abs 0x4b34
{
    4ad8:	0b 93       	tst	r11		
    4ada:	03 38       	jl	$+8      	;abs 0x4ae2
    /* 
    4adc:	1a 51 02 00 	add	2(r1),	r10	;0x0002(r1)
     * Basic Clock System Control 2
    4ae0:	0b 88       	sub	r8,	r11	
     * 
     * SELM_0 -- DCOCLK
    4ae2:	29 51       	add	@r1,	r9	
     * DIVM_0 -- Divide by 1
    4ae4:	0b 57       	add	r7,	r11	
     * ~SELS -- DCOCLK
    4ae6:	0d 46       	mov	r6,	r13	
    4ae8:	4e 4a       	mov.b	r10,	r14	
    4aea:	4f 49       	mov.b	r9,	r15	
    4aec:	b0 12 48 4b 	call	#0x4b48	
    4af0:	09 94       	cmp	r4,	r9	
    4af2:	f2 23       	jnz	$-26     	;abs 0x4ad8
    4af4:	1f 3c       	jmp	$+64     	;abs 0x4b34
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
    4af6:	0f 47       	mov	r7,	r15	
    4af8:	0f 11       	rra	r15		
    4afa:	0b 48       	mov	r8,	r11	
    4afc:	0b 8f       	sub	r15,	r11	
     */
    4afe:	0a 95       	cmp	r5,	r10	
    4b00:	19 24       	jz	$+52     	;abs 0x4b34
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    4b02:	0b 93       	tst	r11		
    4b04:	02 38       	jl	$+6      	;abs 0x4b0a
    
    4b06:	29 51       	add	@r1,	r9	
    DCOCTL = 0x77;      
    4b08:	0b 87       	sub	r7,	r11	
        /* 
     * Basic Clock System Control 1
    4b0a:	1a 51 02 00 	add	2(r1),	r10	;0x0002(r1)
     * 
    4b0e:	0b 58       	add	r8,	r11	
     * XT2OFF -- Disable XT2CLK
    4b10:	0d 46       	mov	r6,	r13	
    4b12:	4e 4a       	mov.b	r10,	r14	
    4b14:	4f 49       	mov.b	r9,	r15	
    4b16:	b0 12 48 4b 	call	#0x4b48	
    4b1a:	0a 95       	cmp	r5,	r10	
    4b1c:	f2 23       	jnz	$-26     	;abs 0x4b02
    4b1e:	0a 3c       	jmp	$+22     	;abs 0x4b34
            }
        }                               
        
        printf("%d",i);
        // ajusta as cores para o normal
        color_fore = LIME;
    4b20:	38 e3       	inv	r8		
    4b22:	18 53       	inc	r8		
        color_back = BLACK;
    4b24:	b1 43 00 00 	mov	#-1,	0(r1)	;r3 As==11, 0x0000(r1)
    4b28:	c8 3f       	jmp	$-110    	;abs 0x4aba
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
    4b2a:	37 e3       	inv	r7		
    4b2c:	17 53       	inc	r7		
                color_fore = BLACK;
    4b2e:	b1 43 02 00 	mov	#-1,	2(r1)	;r3 As==11, 0x0002(r1)
    4b32:	bf 3f       	jmp	$-128    	;abs 0x4ab2
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    4b34:	21 52       	add	#4,	r1	;r2 As==10
    4b36:	34 41       	pop	r4		
    4b38:	35 41       	pop	r5		
    4b3a:	36 41       	pop	r6		
    4b3c:	37 41       	pop	r7		
    4b3e:	38 41       	pop	r8		
    4b40:	39 41       	pop	r9		
    4b42:	3a 41       	pop	r10		
    4b44:	3b 41       	pop	r11		
    4b46:	30 41       	ret			

00004b48 <lcd_drawpoint>:
    BCSCTL1 = 0xcf;     

    /* 
    4b48:	0b 12       	push	r11		
    4b4a:	0a 12       	push	r10		
    4b4c:	4b 4e       	mov.b	r14,	r11	
    4b4e:	0a 4d       	mov	r13,	r10	
     * Basic Clock System Control 3
    4b50:	4d 4f       	mov.b	r15,	r13	
    4b52:	4e 4f       	mov.b	r15,	r14	
    4b54:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    4b58:	b0 12 22 48 	call	#0x4822	
     * 
    4b5c:	4d 4b       	mov.b	r11,	r13	
    4b5e:	4e 4b       	mov.b	r11,	r14	
    4b60:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    4b64:	b0 12 22 48 	call	#0x4822	
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
    4b68:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    4b6c:	7f 40 2c 00 	mov.b	#44,	r15	;#0x002c
    4b70:	b0 12 42 46 	call	#0x4642	
     * XCAP_0 -- ~1 pF
    4b74:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4b76:	4f 4a       	mov.b	r10,	r15	
    4b78:	b0 12 42 46 	call	#0x4642	
     */
    BCSCTL3 = 0xa0;
}
    4b7c:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10

    4b80:	d2 d3 31 00 	bis.b	#1,	&0x0031	;r3 As==01
void p1_init(){
        /* Port 1 Output Register */
    4b84:	7d 40 83 ff 	mov.b	#-125,	r13	;#0xff83
    4b88:	4e 43       	clr.b	r14		
    4b8a:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    4b8e:	b0 12 22 48 	call	#0x4822	
    P1OUT = PPM_P1MASK;
    4b92:	7d 40 83 ff 	mov.b	#-125,	r13	;#0xff83
    4b96:	4e 43       	clr.b	r14		
    4b98:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    4b9c:	b0 12 22 48 	call	#0x4822	

    4ba0:	3a 41       	pop	r10		
    4ba2:	3b 41       	pop	r11		
    4ba4:	30 41       	ret			

00004ba6 <lcd_putlogo>:
    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;

    4ba6:	0b 12       	push	r11		
    4ba8:	0a 12       	push	r10		
    4baa:	09 12       	push	r9		
    4bac:	08 12       	push	r8		
    4bae:	07 12       	push	r7		
    4bb0:	3b 40 0c 00 	mov	#12,	r11	;#0x000c
    4bb4:	0b 51       	add	r1,	r11	
    4bb6:	4a 4f       	mov.b	r15,	r10	
    4bb8:	49 4e       	mov.b	r14,	r9	
    4bba:	48 4d       	mov.b	r13,	r8	
    4bbc:	47 4c       	mov.b	r12,	r7	
    4bbe:	2b 4b       	mov	@r11,	r11	
    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida

    4bc0:	4f 5d       	add.b	r13,	r15	
    4bc2:	7f 53       	add.b	#-1,	r15	;r3 As==11
    4bc4:	4d 4f       	mov.b	r15,	r13	
    4bc6:	4e 4a       	mov.b	r10,	r14	
    4bc8:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    4bcc:	b0 12 22 48 	call	#0x4822	
    /* Port 1 Interrupt Flag Register */
    4bd0:	4f 49       	mov.b	r9,	r15	
    4bd2:	4f 57       	add.b	r7,	r15	
    4bd4:	7f 53       	add.b	#-1,	r15	;r3 As==11
    4bd6:	4d 4f       	mov.b	r15,	r13	
    4bd8:	4e 49       	mov.b	r9,	r14	
    4bda:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    4bde:	b0 12 22 48 	call	#0x4822	
    P1IFG = 0;

    4be2:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    4be6:	7f 40 2c 00 	mov.b	#44,	r15	;#0x002c
    4bea:	b0 12 42 46 	call	#0x4642	
    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;
    4bee:	02 12       	push	r2		
    4bf0:	32 c2       	dint			
    4bf2:	03 43       	nop			
    4bf4:	c2 48 30 01 	mov.b	r8,	&0x0130	
    4bf8:	c2 47 38 01 	mov.b	r7,	&0x0138	
    4bfc:	19 42 3a 01 	mov	&0x013a,r9	
    4c00:	32 41       	pop	r2		

    4c02:	0a 43       	clr	r10		
    4c04:	0a 99       	cmp	r9,	r10	
    4c06:	09 2c       	jc	$+20     	;abs 0x4c1a
}

    4c08:	0f 4b       	mov	r11,	r15	
    4c0a:	0f 5a       	add	r10,	r15	
    4c0c:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4c0e:	6f 4f       	mov.b	@r15,	r15	
    4c10:	b0 12 42 46 	call	#0x4642	
    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;

    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;

    4c14:	1a 53       	inc	r10		
    4c16:	0a 99       	cmp	r9,	r10	
    4c18:	f7 2b       	jnc	$-16     	;abs 0x4c08
}

void timer_a3_init(void)
{
    /* 
    4c1a:	e2 c3 31 00 	bic.b	#2,	&0x0031	;r3 As==10
     * TACCTL0, Capture/Compare Control Register 0
    4c1e:	d2 d3 31 00 	bis.b	#1,	&0x0031	;r3 As==01
     * 
     * CM_0 -- No Capture
    4c22:	7d 40 83 ff 	mov.b	#-125,	r13	;#0xff83
    4c26:	4e 43       	clr.b	r14		
    4c28:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    4c2c:	b0 12 22 48 	call	#0x4822	
     * CCIS_0 -- CCIxA
    4c30:	7d 40 83 ff 	mov.b	#-125,	r13	;#0xff83
    4c34:	4e 43       	clr.b	r14		
    4c36:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    4c3a:	b0 12 22 48 	call	#0x4822	
     * ~SCS -- Asynchronous Capture
    4c3e:	37 41       	pop	r7		
    4c40:	38 41       	pop	r8		
    4c42:	39 41       	pop	r9		
    4c44:	3a 41       	pop	r10		
    4c46:	3b 41       	pop	r11		
    4c48:	30 41       	ret			

00004c4a <lcd_newline>:
     * ~SCCI -- Latched capture signal (read)
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
    4c4a:	d2 53 8c 11 	inc.b	&0x118c	
    4c4e:	f2 90 10 00 	cmp.b	#16,	&0x118c	;#0x0010
    4c52:	8c 11 
    4c54:	02 20       	jnz	$+6      	;abs 0x4c5a
     * Note: ~<BIT> indicates that <BIT> has value zero
    4c56:	c2 43 8c 11 	mov.b	#0,	&0x118c	;r3 As==00
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    4c5a:	c2 43 8d 11 	mov.b	#0,	&0x118d	;r3 As==00

    4c5e:	30 41       	ret			

00004c60 <lcd_goto>:
    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;

    /* 
    4c60:	7f 90 15 00 	cmp.b	#21,	r15	;#0x0015
    4c64:	01 28       	jnc	$+4      	;abs 0x4c68
    4c66:	4f 43       	clr.b	r15		
     * TACTL, Timer_A3 Control Register
    4c68:	7e 90 10 00 	cmp.b	#16,	r14	;#0x0010
    4c6c:	01 28       	jnc	$+4      	;abs 0x4c70
    4c6e:	4e 43       	clr.b	r14		
     * 
     * TASSEL_2 -- SMCLK
    4c70:	c2 4f 8d 11 	mov.b	r15,	&0x118d	
     * ID_3 -- Divider - /8
    4c74:	c2 4e 8c 11 	mov.b	r14,	&0x118c	
     * MC_1 -- Up Mode
    4c78:	30 41       	ret			

00004c7a <lcd_wrchar>:
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
}
    4c7a:	0b 12       	push	r11		
    4c7c:	0a 12       	push	r10		
    4c7e:	09 12       	push	r9		
    4c80:	08 12       	push	r8		
    4c82:	07 12       	push	r7		
    4c84:	06 12       	push	r6		
    4c86:	4b 4f       	mov.b	r15,	r11	

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    4c88:	5f 42 8d 11 	mov.b	&0x118d,r15	
    4c8c:	4e 4f       	mov.b	r15,	r14	
    4c8e:	0e 5e       	rla	r14		
    4c90:	0e 5e       	rla	r14		
    4c92:	0f 5f       	rla	r15		
    4c94:	0e 5f       	add	r15,	r14	
    4c96:	4a 4e       	mov.b	r14,	r10	
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    4c98:	7a 50 05 00 	add.b	#5,	r10	;#0x0005
    4c9c:	4d 4a       	mov.b	r10,	r13	
    4c9e:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    4ca2:	b0 12 22 48 	call	#0x4822	
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    4ca6:	5f 42 8c 11 	mov.b	&0x118c,r15	
    4caa:	0f 5f       	rla	r15		
    4cac:	0f 5f       	rla	r15		
    4cae:	0f 5f       	rla	r15		
    4cb0:	4a 4f       	mov.b	r15,	r10	
    4cb2:	6a 53       	incd.b	r10		
            if(!(P1IES & PPM_ch_counter)){ // low to high
    4cb4:	7f 50 09 00 	add.b	#9,	r15	;#0x0009
    4cb8:	4d 4f       	mov.b	r15,	r13	
    4cba:	4e 4a       	mov.b	r10,	r14	
    4cbc:	7f 40 2b 00 	mov.b	#43,	r15	;#0x002b
    4cc0:	b0 12 22 48 	call	#0x4822	
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
    4cc4:	58 43       	mov.b	#1,	r8	;r3 As==01
            else{ // high to low
    4cc6:	6e 43       	mov.b	#2,	r14	;r3 As==10
    4cc8:	7f 40 2c 00 	mov.b	#44,	r15	;#0x002c
    4ccc:	b0 12 42 46 	call	#0x4642	
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    4cd0:	47 43       	clr.b	r7		
    4cd2:	49 4b       	mov.b	r11,	r9	
    4cd4:	06 49       	mov	r9,	r6	
                }
                else{ // se nao deu overflow na contagem do timer
    4cd6:	0b 46       	mov	r6,	r11	
    4cd8:	0b 5b       	rla	r11		
    4cda:	06 49       	mov	r9,	r6	
    4cdc:	0b 59       	add	r9,	r11	
    4cde:	0b 59       	add	r9,	r11	
    4ce0:	0b 59       	add	r9,	r11	
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    4ce2:	4a 43       	clr.b	r10		
    4ce4:	3b 50 ae 43 	add	#17326,	r11	;#0x43ae
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
    4ce8:	6f 4b       	mov.b	@r11,	r15	
    4cea:	1b 53       	inc	r11		
            }
    4cec:	4f f8       	and.b	r8,	r15	
    4cee:	0a 24       	jz	$+22     	;abs 0x4d04
    4cf0:	4e 43       	clr.b	r14		
    4cf2:	5f 42 8f 11 	mov.b	&0x118f,r15	
    4cf6:	b0 12 42 46 	call	#0x4642	
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    4cfa:	5a 53       	inc.b	r10		
    4cfc:	7a 90 05 00 	cmp.b	#5,	r10	;#0x0005
    4d00:	f3 2b       	jnc	$-24     	;abs 0x4ce8
    4d02:	04 3c       	jmp	$+10     	;abs 0x4d0c
    4d04:	4e 43       	clr.b	r14		
    4d06:	5f 42 8e 11 	mov.b	&0x118e,r15	
    4d0a:	f5 3f       	jmp	$-20     	;abs 0x4cf6
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    4d0c:	4e 43       	clr.b	r14		
    4d0e:	5f 42 8e 11 	mov.b	&0x118e,r15	
    4d12:	b0 12 42 46 	call	#0x4642	
    }
    4d16:	48 58       	rla.b	r8		
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    4d18:	57 53       	inc.b	r7		
    4d1a:	77 92       	cmp.b	#8,	r7	;r2 As==11
    4d1c:	dc 2b       	jnc	$-70     	;abs 0x4cd6
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}

    4d1e:	36 41       	pop	r6		
    4d20:	37 41       	pop	r7		
    4d22:	38 41       	pop	r8		
    4d24:	39 41       	pop	r9		
    4d26:	3a 41       	pop	r10		
    4d28:	3b 41       	pop	r11		
    4d2a:	30 41       	ret			

00004d2c <lcd_putchar>:
void calibrate_radio(void){
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    4d2c:	0b 12       	push	r11		
    4d2e:	4b 4f       	mov.b	r15,	r11	
        return;
    4d30:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4d32:	3f 90 0a 00 	cmp	#10,	r15	;#0x000a
    4d36:	19 24       	jz	$+52     	;abs 0x4d6a
    4d38:	3f 90 0d 00 	cmp	#13,	r15	;#0x000d
    4d3c:	13 24       	jz	$+40     	;abs 0x4d64
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    4d3e:	5f 42 8d 11 	mov.b	&0x118d,r15	
    4d42:	d2 53 8d 11 	inc.b	&0x118d	
    4d46:	7f 90 15 00 	cmp.b	#21,	r15	;#0x0015
    4d4a:	04 2c       	jc	$+10     	;abs 0x4d54
    4d4c:	4f 4b       	mov.b	r11,	r15	
    4d4e:	b0 12 7a 4c 	call	#0x4c7a	
    4d52:	0d 3c       	jmp	$+28     	;abs 0x4d6e
    
    lcd_goto(2,5);
    color_fore = RED;
    4d54:	b0 12 4a 4c 	call	#0x4c4a	
    printf("MOVE STICKS\nALL DIRECTIONS");
    4d58:	4f 4b       	mov.b	r11,	r15	
    4d5a:	b0 12 7a 4c 	call	#0x4c7a	
    color_fore = LIME;
    4d5e:	d2 53 8d 11 	inc.b	&0x118d	
    4d62:	05 3c       	jmp	$+12     	;abs 0x4d6e
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4d64:	c2 43 8d 11 	mov.b	#0,	&0x118d	;r3 As==00
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4d68:	02 3c       	jmp	$+6      	;abs 0x4d6e
void calibrate_radio(void){
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    4d6a:	b0 12 4a 4c 	call	#0x4c4a	
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    4d6e:	3b 41       	pop	r11		
    4d70:	30 41       	ret			

00004d72 <lcd_drawprogressbar>:
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
    4d72:	0b 12       	push	r11		
    4d74:	0a 12       	push	r10		
    4d76:	09 12       	push	r9		
    4d78:	08 12       	push	r8		
    4d7a:	07 12       	push	r7		
    4d7c:	06 12       	push	r6		
    4d7e:	05 12       	push	r5		
    4d80:	04 12       	push	r4		
    4d82:	3b 40 12 00 	mov	#18,	r11	;#0x0012
    4d86:	0b 51       	add	r1,	r11	
    4d88:	06 4f       	mov	r15,	r6	
    4d8a:	05 4e       	mov	r14,	r5	
    4d8c:	08 4d       	mov	r13,	r8	
    4d8e:	07 4c       	mov	r12,	r7	
    4d90:	29 4b       	mov	@r11,	r9	
    4d92:	14 4b 02 00 	mov	2(r11),	r4	;0x0002(r11)
    4d96:	1f 4b 04 00 	mov	4(r11),	r15	;0x0004(r11)
        PPMSlope[i] = 1;
    4d9a:	02 12       	push	r2		
    4d9c:	32 c2       	dint			
    4d9e:	03 43       	nop			
    4da0:	82 4d 32 01 	mov	r13,	&0x0132	
    4da4:	82 4f 38 01 	mov	r15,	&0x0138	
    4da8:	1f 42 3a 01 	mov	&0x013a,r15	
    4dac:	32 41       	pop	r2		
    4dae:	0c 4f       	mov	r15,	r12	
    4db0:	3a 40 64 00 	mov	#100,	r10	;#0x0064
    4db4:	b0 12 30 68 	call	#0x6830	
    4db8:	0b 4c       	mov	r12,	r11	
    }
    4dba:	49 12       	push.b	r9		
    4dbc:	4c 47       	mov.b	r7,	r12	
    4dbe:	4d 4b       	mov.b	r11,	r13	
    4dc0:	4e 45       	mov.b	r5,	r14	
    4dc2:	4f 46       	mov.b	r6,	r15	
    4dc4:	b0 12 48 48 	call	#0x4848	

    4dc8:	4f 48       	mov.b	r8,	r15	
    4dca:	4f 8b       	sub.b	r11,	r15	
    4dcc:	4b 56       	add.b	r6,	r11	
    4dce:	44 12       	push.b	r4		
    4dd0:	4c 47       	mov.b	r7,	r12	
    4dd2:	4d 4f       	mov.b	r15,	r13	
    4dd4:	4e 45       	mov.b	r5,	r14	
    4dd6:	4f 4b       	mov.b	r11,	r15	
    4dd8:	b0 12 48 48 	call	#0x4848	
    4ddc:	21 52       	add	#4,	r1	;r2 As==10
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    4dde:	34 41       	pop	r4		
    4de0:	35 41       	pop	r5		
    4de2:	36 41       	pop	r6		
    4de4:	37 41       	pop	r7		
    4de6:	38 41       	pop	r8		
    4de8:	39 41       	pop	r9		
    4dea:	3a 41       	pop	r10		
    4dec:	3b 41       	pop	r11		
    4dee:	30 41       	ret			

00004df0 <delay2us>:

/*
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
    4df0:	30 41       	ret			

00004df2 <delay5us>:
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE

MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal
    4df2:	30 41       	ret			

00004df4 <delayus>:
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
    4df4:	0e 43       	clr	r14		
    4df6:	0e 9f       	cmp	r15,	r14	
    4df8:	04 2c       	jc	$+10     	;abs 0x4e02
    4dfa:	03 43       	nop			
    4dfc:	1e 53       	inc	r14		
    4dfe:	0e 9f       	cmp	r15,	r14	
    4e00:	fc 2b       	jnc	$-6      	;abs 0x4dfa
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    4e02:	30 41       	ret			

00004e04 <delayms>:
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()

// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    4e04:	0b 12       	push	r11		
    4e06:	0a 12       	push	r10		
    4e08:	0a 4f       	mov	r15,	r10	
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    4e0a:	0b 43       	clr	r11		
    4e0c:	0b 9f       	cmp	r15,	r11	
    4e0e:	07 2c       	jc	$+16     	;abs 0x4e1e
    4e10:	3f 40 5c 0d 	mov	#3420,	r15	;#0x0d5c
    4e14:	b0 12 f4 4d 	call	#0x4df4	
    4e18:	1b 53       	inc	r11		
    4e1a:	0b 9a       	cmp	r10,	r11	
    4e1c:	f9 2b       	jnc	$-12     	;abs 0x4e10
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    4e1e:	3a 41       	pop	r10		
    4e20:	3b 41       	pop	r11		
    4e22:	30 41       	ret			

00004e24 <i2c_config>:
    4e24:	0b 12       	push	r11		
    4e26:	4b 4f       	mov.b	r15,	r11	
    4e28:	b0 12 3a 4e 	call	#0x4e3a	
    4e2c:	c2 4b 91 11 	mov.b	r11,	&0x1191	
    4e30:	3b 41       	pop	r11		
    4e32:	30 41       	ret			

00004e34 <i2c_change_address>:
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
    4e34:	c2 4f 91 11 	mov.b	r15,	&0x1191	
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 
    4e38:	30 41       	ret			

00004e3a <i2c_init>:

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    4e3a:	f2 d0 06 00 	bis.b	#6,	&0x001a	;#0x0006
    4e3e:	1a 00 

    4e40:	e2 d3 19 00 	bis.b	#2,	&0x0019	;r3 As==10
// variaveis leitura radio raw
    4e44:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    4e48:	b0 12 f2 4d 	call	#0x4df2	
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    4e4c:	30 41       	ret			

00004e4e <i2c_start>:
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    4e4e:	e2 d3 19 00 	bis.b	#2,	&0x0019	;r3 As==10

    4e52:	b0 12 f2 4d 	call	#0x4df2	
    INICIO: //loop main, vir para ca no caso de um reset
    4e56:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    4e5a:	b0 12 f2 4d 	call	#0x4df2	

    lcd_clear(BLACK);
    4e5e:	e2 c3 19 00 	bic.b	#2,	&0x0019	;r3 As==10
    
    4e62:	b0 12 f2 4d 	call	#0x4df2	
    MenuOption = RADIO_RAW;
    4e66:	e2 c2 19 00 	bic.b	#4,	&0x0019	;r2 As==10
    MenuStep = DISPLAY;
    4e6a:	b0 12 f2 4d 	call	#0x4df2	
    MenuVisible = TRUE;     // inicializa mostrando o menu
    4e6e:	30 41       	ret			

00004e70 <i2c_stop>:
        
    while(1){
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
    4e70:	e2 c3 19 00 	bic.b	#2,	&0x0019	;r3 As==10
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
    4e74:	b0 12 f2 4d 	call	#0x4df2	
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
    4e78:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
    4e7c:	b0 12 f2 4d 	call	#0x4df2	
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
    4e80:	e2 d3 19 00 	bis.b	#2,	&0x0019	;r3 As==10
        P1 completa. */
    4e84:	b0 12 f2 4d 	call	#0x4df2	
        if(ControlCounter >= CONTROL_PERIOD){
    4e88:	30 41       	ret			

00004e8a <i2c_recv_ack>:
            analog_refresh_all();
            if(MotorArmed == TRUE){
                main_loop();
    4e8a:	0b 12       	push	r11		
            }
            ControlCounter = 0;
        }
    4e8c:	e2 c3 1a 00 	bic.b	#2,	&0x001a	;r3 As==10
        
    4e90:	b0 12 f2 4d 	call	#0x4df2	
        if(SetupDone == TRUE){
    4e94:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
            if(RCCounter >= RC_PERIOD){
    4e98:	b0 12 f2 4d 	call	#0x4df2	
                process_rc();
    4e9c:	e2 b3 18 00 	bit.b	#2,	&0x0018	;r3 As==10
    4ea0:	02 24       	jz	$+6      	;abs 0x4ea6
    4ea2:	5b 43       	mov.b	#1,	r11	;r3 As==01
    4ea4:	01 3c       	jmp	$+4      	;abs 0x4ea8
    4ea6:	4b 43       	clr.b	r11		
                RCCounter = 0;
    4ea8:	b0 12 f2 4d 	call	#0x4df2	
            }
    4eac:	e2 c2 19 00 	bic.b	#4,	&0x0019	;r2 As==10
        }
    4eb0:	b0 12 f2 4d 	call	#0x4df2	
    
    4eb4:	f2 d0 06 00 	bis.b	#6,	&0x001a	;#0x0006
    4eb8:	1a 00 
        if(MenuVisible == TRUE){
            if(MenuCounter >= MENU_PERIOD){
    4eba:	4f 4b       	mov.b	r11,	r15	
                process_menu();
    4ebc:	3b 41       	pop	r11		
    4ebe:	30 41       	ret			

00004ec0 <i2c_send_ack>:
                MenuCounter = 0;   
            }
        }
        else{
    4ec0:	f2 d0 06 00 	bis.b	#6,	&0x001a	;#0x0006
    4ec4:	1a 00 
            if(ChannelInput[CH6_CH] > 3500){
    4ec6:	4f 93       	tst.b	r15		
    4ec8:	03 24       	jz	$+8      	;abs 0x4ed0
    4eca:	e2 d3 19 00 	bis.b	#2,	&0x0019	;r3 As==10
    4ece:	02 3c       	jmp	$+6      	;abs 0x4ed4
    4ed0:	e2 c3 19 00 	bic.b	#2,	&0x0019	;r3 As==10
                MenuVisible = TRUE;
    4ed4:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
                MotorArmed = FALSE;
    4ed8:	b0 12 f2 4d 	call	#0x4df2	
            }
    4edc:	e2 c2 19 00 	bic.b	#4,	&0x0019	;r2 As==10
        }
    4ee0:	b0 12 f2 4d 	call	#0x4df2	
    }
    4ee4:	e2 c3 19 00 	bic.b	#2,	&0x0019	;r3 As==10
}
    4ee8:	30 41       	ret			

00004eea <i2c_bwrite>:

void process_menu(void){
    switch(MenuStep){
    4eea:	0b 12       	push	r11		
    4eec:	0a 12       	push	r10		
    4eee:	09 12       	push	r9		
    4ef0:	49 4f       	mov.b	r15,	r9	
        case DISPLAY:
    4ef2:	7a 40 80 ff 	mov.b	#-128,	r10	;#0xff80
            lcd_goto(0,14);
            printf("DISPLAY             ");
            
    4ef6:	f2 d0 06 00 	bis.b	#6,	&0x001a	;#0x0006
    4efa:	1a 00 
            lcd_clear(BLACK);
    4efc:	4b 43       	clr.b	r11		
            lcd_goto(0,0);
            printf("   MAIN MENU\n\n");
    4efe:	4f 49       	mov.b	r9,	r15	
    4f00:	4f fa       	and.b	r10,	r15	
    4f02:	03 24       	jz	$+8      	;abs 0x4f0a
    4f04:	e2 d3 19 00 	bis.b	#2,	&0x0019	;r3 As==10
    4f08:	02 3c       	jmp	$+6      	;abs 0x4f0e
    4f0a:	e2 c3 19 00 	bic.b	#2,	&0x0019	;r3 As==10
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
    4f0e:	b0 12 f2 4d 	call	#0x4df2	
            MenuStep = SELECT;
    4f12:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
            break;
    4f16:	b0 12 f2 4d 	call	#0x4df2	
        
    4f1a:	e2 c2 19 00 	bic.b	#4,	&0x0019	;r2 As==10
        case SELECT: // fica neste step a maior parte do tempo
    4f1e:	b0 12 f2 4d 	call	#0x4df2	
            lcd_goto(0,14);
    4f22:	12 c3       	clrc			
    4f24:	4a 10       	rrc.b	r10		
    switch(MenuStep){
        case DISPLAY:
            lcd_goto(0,14);
            printf("DISPLAY             ");
            
            lcd_clear(BLACK);
    4f26:	5b 53       	inc.b	r11		
    4f28:	7b 92       	cmp.b	#8,	r11	;r2 As==11
    4f2a:	e9 2b       	jnc	$-44     	;abs 0x4efe
            break;
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
            printf("SELECT            ");
            
    4f2c:	39 41       	pop	r9		
    4f2e:	3a 41       	pop	r10		
    4f30:	3b 41       	pop	r11		
    4f32:	30 41       	ret			

00004f34 <i2c_bread>:
            lcd_goto(0,(int)MenuOption + 2);
            printf(">");
            
    4f34:	0b 12       	push	r11		
    4f36:	0a 12       	push	r10		
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    4f38:	4a 43       	clr.b	r10		
                MenuStep = WAIT_PITCH_DOWN;
            }
    4f3a:	e2 c3 1a 00 	bic.b	#2,	&0x001a	;r3 As==10
            else{
    4f3e:	4b 43       	clr.b	r11		
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuStep = WAIT_PITCH_UP;
    4f40:	4a 5a       	rla.b	r10		
                }
    4f42:	e2 d2 19 00 	bis.b	#4,	&0x0019	;r2 As==10
            }
    4f46:	b0 12 f2 4d 	call	#0x4df2	
            
    4f4a:	e2 b3 18 00 	bit.b	#2,	&0x0018	;r3 As==10
    4f4e:	01 24       	jz	$+4      	;abs 0x4f52
    4f50:	5a 53       	inc.b	r10		
            // select
    4f52:	b0 12 f2 4d 	call	#0x4df2	
            if(ChannelInput[ROLL_CH] > 3500){
    4f56:	e2 c2 19 00 	bic.b	#4,	&0x0019	;r2 As==10
                MenuStep = WAIT_ROLL_LEFT;
    4f5a:	b0 12 f2 4d 	call	#0x4df2	
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
    4f5e:	5b 53       	inc.b	r11		
    4f60:	7b 92       	cmp.b	#8,	r11	;r2 As==11
    4f62:	ee 2b       	jnc	$-34     	;abs 0x4f40
            // select
            if(ChannelInput[ROLL_CH] > 3500){
                MenuStep = WAIT_ROLL_LEFT;
            }
            
            break;
    4f64:	4f 4a       	mov.b	r10,	r15	
        
    4f66:	3a 41       	pop	r10		
    4f68:	3b 41       	pop	r11		
    4f6a:	30 41       	ret			

00004f6c <i2c_find_device>:
            printf("WAIT PITCH DOWN    ");
            
            if(ChannelInput[PITCH_CH] > 2500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
    4f6c:	0b 12       	push	r11		
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
    4f6e:	b0 12 4e 4e 	call	#0x4e4e	
            }
    4f72:	5f 42 91 11 	mov.b	&0x1191,r15	
    4f76:	b0 12 ea 4e 	call	#0x4eea	
            break;
    4f7a:	b0 12 8a 4e 	call	#0x4e8a	
    4f7e:	4b 4f       	mov.b	r15,	r11	
        
    4f80:	b0 12 70 4e 	call	#0x4e70	
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    4f84:	4f 4b       	mov.b	r11,	r15	
            printf("WAIT PITCH UP    ");
    4f86:	3b 41       	pop	r11		
    4f88:	30 41       	ret			

00004f8a <i2c_write_dummy>:

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
    4f8a:	0b 12       	push	r11		
    4f8c:	4b 4f       	mov.b	r15,	r11	
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    4f8e:	b0 12 4e 4e 	call	#0x4e4e	
                }
    4f92:	4f 4b       	mov.b	r11,	r15	
    4f94:	b0 12 ea 4e 	call	#0x4eea	
                MenuStep = SELECT;
    4f98:	b0 12 8a 4e 	call	#0x4e8a	
    4f9c:	4b 4f       	mov.b	r15,	r11	
            }
    4f9e:	b0 12 70 4e 	call	#0x4e70	
            break;
        
    4fa2:	4f 4b       	mov.b	r11,	r15	
        case WAIT_ROLL_LEFT:
    4fa4:	3b 41       	pop	r11		
    4fa6:	30 41       	ret			

00004fa8 <i2c_write_byte>:
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    4fa8:	0b 12       	push	r11		
    4faa:	0a 12       	push	r10		
    4fac:	09 12       	push	r9		
    4fae:	4a 4f       	mov.b	r15,	r10	
    4fb0:	49 4e       	mov.b	r14,	r9	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
    4fb2:	b0 12 4e 4e 	call	#0x4e4e	
                MenuStep = PROCESS_OPTION;
    4fb6:	5f 42 91 11 	mov.b	&0x1191,r15	
    4fba:	b0 12 ea 4e 	call	#0x4eea	
            }
    4fbe:	b0 12 8a 4e 	call	#0x4e8a	
    4fc2:	4b 4f       	mov.b	r15,	r11	
            break;
    4fc4:	4f 4a       	mov.b	r10,	r15	
    4fc6:	b0 12 ea 4e 	call	#0x4eea	
            
    4fca:	b0 12 8a 4e 	call	#0x4e8a	
    4fce:	4b 5f       	add.b	r15,	r11	
        case WAIT_CH7_BACK:
    4fd0:	4f 49       	mov.b	r9,	r15	
    4fd2:	b0 12 ea 4e 	call	#0x4eea	
            lcd_goto(0,14);
    4fd6:	b0 12 8a 4e 	call	#0x4e8a	
    4fda:	4b 5f       	add.b	r15,	r11	
            printf("WAIT CH7 BACK    ");
    4fdc:	b0 12 70 4e 	call	#0x4e70	
            
            if(ChannelInput[CH7_CH] < 2500){
    4fe0:	4f 4b       	mov.b	r11,	r15	
                MenuStep = DISPLAY;
    4fe2:	39 41       	pop	r9		
    4fe4:	3a 41       	pop	r10		
    4fe6:	3b 41       	pop	r11		
    4fe8:	30 41       	ret			

00004fea <i2c_write_multiples>:
            }
            break;
                    
    4fea:	0b 12       	push	r11		
    4fec:	0a 12       	push	r10		
    4fee:	09 12       	push	r9		
    4ff0:	08 12       	push	r8		
    4ff2:	07 12       	push	r7		
    4ff4:	4b 4f       	mov.b	r15,	r11	
    4ff6:	07 4e       	mov	r14,	r7	
    4ff8:	48 4d       	mov.b	r13,	r8	
        case PROCESS_OPTION:
    4ffa:	49 43       	clr.b	r9		
            process_option();
            break;
    4ffc:	b0 12 4e 4e 	call	#0x4e4e	
            
    5000:	5f 42 91 11 	mov.b	&0x1191,r15	
    5004:	b0 12 ea 4e 	call	#0x4eea	
        case WAIT_ROLL_RIGHT:
    5008:	b0 12 8a 4e 	call	#0x4e8a	
    500c:	4a 4f       	mov.b	r15,	r10	
            break;    
    500e:	4f 4b       	mov.b	r11,	r15	
    5010:	b0 12 ea 4e 	call	#0x4eea	
    }
    5014:	b0 12 8a 4e 	call	#0x4e8a	
    5018:	4a 5f       	add.b	r15,	r10	
}
    501a:	0e 20       	jnz	$+30     	;abs 0x5038
    501c:	4a 98       	cmp.b	r8,	r10	
    501e:	0c 2c       	jc	$+26     	;abs 0x5038

void process_option(){
    5020:	4f 49       	mov.b	r9,	r15	
    5022:	0f 57       	add	r7,	r15	
    5024:	59 53       	inc.b	r9		
    5026:	6f 4f       	mov.b	@r15,	r15	
    5028:	b0 12 ea 4e 	call	#0x4eea	
    int i;
    502c:	b0 12 8a 4e 	call	#0x4e8a	
    5030:	4a 5f       	add.b	r15,	r10	
    5032:	02 20       	jnz	$+6      	;abs 0x5038
    5034:	49 98       	cmp.b	r8,	r9	
    5036:	f4 2b       	jnc	$-22     	;abs 0x5020
    switch (MenuOption){
        case RADIO_RAW:
    5038:	b0 12 70 4e 	call	#0x4e70	
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
    503c:	4f 4a       	mov.b	r10,	r15	
            draw_rc_inputs(0);
    503e:	37 41       	pop	r7		
    5040:	38 41       	pop	r8		
    5042:	39 41       	pop	r9		
    5044:	3a 41       	pop	r10		
    5046:	3b 41       	pop	r11		
    5048:	30 41       	ret			

0000504a <i2c_write16_byte>:
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
    504a:	0b 12       	push	r11		
    504c:	0a 12       	push	r10		
    504e:	09 12       	push	r9		
    5050:	0a 4f       	mov	r15,	r10	
    5052:	49 4e       	mov.b	r14,	r9	
            break;
        
        case READY:
    5054:	b0 12 4e 4e 	call	#0x4e4e	
            lcd_clear(BLACK);
    5058:	5f 42 91 11 	mov.b	&0x1191,r15	
    505c:	b0 12 ea 4e 	call	#0x4eea	
            for(i = 5; i >= 0; i--){ // contagem regressiva
    5060:	b0 12 8a 4e 	call	#0x4e8a	
    5064:	4b 4f       	mov.b	r15,	r11	
                lcd_goto(8,8);
    5066:	0f 4a       	mov	r10,	r15	
    5068:	8f 10       	swpb	r15		
    506a:	7f f3       	and.b	#-1,	r15	;r3 As==11
    506c:	b0 12 ea 4e 	call	#0x4eea	
                printf("%d", i);
    5070:	b0 12 8a 4e 	call	#0x4e8a	
    5074:	4b 5f       	add.b	r15,	r11	
                delayms(1000);
    5076:	7a f3       	and.b	#-1,	r10	;r3 As==11
    5078:	4f 4a       	mov.b	r10,	r15	
    507a:	b0 12 ea 4e 	call	#0x4eea	
            }
    507e:	b0 12 8a 4e 	call	#0x4e8a	
    5082:	4b 5f       	add.b	r15,	r11	
            MotorArmed = TRUE;
    5084:	4f 49       	mov.b	r9,	r15	
    5086:	b0 12 ea 4e 	call	#0x4eea	
            MenuVisible = FALSE;
    508a:	b0 12 8a 4e 	call	#0x4e8a	
    508e:	4b 5f       	add.b	r15,	r11	
            lcd_clear(BLACK);
    5090:	b0 12 70 4e 	call	#0x4e70	
            MenuStep = DISPLAY;
            break;
    5094:	4f 4b       	mov.b	r11,	r15	
            
    5096:	39 41       	pop	r9		
    5098:	3a 41       	pop	r10		
    509a:	3b 41       	pop	r11		
    509c:	30 41       	ret			

0000509e <i2c_write16_multiples>:
        case INITIAL_SETTINGS:
            
            // seta o flag initial setup
    509e:	0b 12       	push	r11		
    50a0:	0a 12       	push	r10		
    50a2:	09 12       	push	r9		
    50a4:	08 12       	push	r8		
    50a6:	07 12       	push	r7		
    50a8:	0b 4f       	mov	r15,	r11	
    50aa:	07 4e       	mov	r14,	r7	
    50ac:	48 4d       	mov.b	r13,	r8	
            break;          
    50ae:	49 43       	clr.b	r9		
    }
    
    50b0:	b0 12 4e 4e 	call	#0x4e4e	
    if(ChannelInput[CH7_CH] > 3500){
    50b4:	5f 42 91 11 	mov.b	&0x1191,r15	
    50b8:	b0 12 ea 4e 	call	#0x4eea	
        MenuStep = WAIT_CH7_BACK;
    50bc:	b0 12 8a 4e 	call	#0x4e8a	
    50c0:	4a 4f       	mov.b	r15,	r10	
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    50c2:	0f 4b       	mov	r11,	r15	
    50c4:	8f 10       	swpb	r15		
    50c6:	7f f3       	and.b	#-1,	r15	;r3 As==11
    50c8:	b0 12 ea 4e 	call	#0x4eea	
        analog_graph_clear_all();
    50cc:	b0 12 8a 4e 	call	#0x4e8a	
    50d0:	4a 5f       	add.b	r15,	r10	
        lcd_clear(BLACK);
    50d2:	7b f3       	and.b	#-1,	r11	;r3 As==11
    50d4:	4f 4b       	mov.b	r11,	r15	
    50d6:	b0 12 ea 4e 	call	#0x4eea	
    }
    50da:	b0 12 8a 4e 	call	#0x4e8a	
    50de:	4a 5f       	add.b	r15,	r10	
}
    50e0:	0e 20       	jnz	$+30     	;abs 0x50fe
    50e2:	4a 98       	cmp.b	r8,	r10	
    50e4:	0c 2c       	jc	$+26     	;abs 0x50fe

void draw_analog_graph(void){
    50e6:	4f 49       	mov.b	r9,	r15	
    50e8:	0f 57       	add	r7,	r15	
    50ea:	59 53       	inc.b	r9		
    50ec:	6f 4f       	mov.b	@r15,	r15	
    50ee:	b0 12 ea 4e 	call	#0x4eea	
    int i, k;
    50f2:	b0 12 8a 4e 	call	#0x4e8a	
    50f6:	4a 5f       	add.b	r15,	r10	
    50f8:	02 20       	jnz	$+6      	;abs 0x50fe
    50fa:	49 98       	cmp.b	r8,	r9	
    50fc:	f4 2b       	jnc	$-22     	;abs 0x50e6
    for(i = 0; i < 8; i++){
        if((1 << i) & AnalogChecked){
    50fe:	b0 12 70 4e 	call	#0x4e70	
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
    5102:	4f 4a       	mov.b	r10,	r15	
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
    5104:	37 41       	pop	r7		
    5106:	38 41       	pop	r8		
    5108:	39 41       	pop	r9		
    510a:	3a 41       	pop	r10		
    510c:	3b 41       	pop	r11		
    510e:	30 41       	ret			

00005110 <i2c_read_byte>:
            }
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
        }
    5110:	0b 12       	push	r11		
    5112:	0a 12       	push	r10		
    5114:	09 12       	push	r9		
    5116:	4a 4f       	mov.b	r15,	r10	
    5118:	09 4e       	mov	r14,	r9	
    }
    
}
    511a:	b0 12 4e 4e 	call	#0x4e4e	

    511e:	5f 42 91 11 	mov.b	&0x1191,r15	
    5122:	b0 12 ea 4e 	call	#0x4eea	
void analog_graph_clear(int n){
    5126:	b0 12 8a 4e 	call	#0x4e8a	
    512a:	4b 4f       	mov.b	r15,	r11	
    int i;
    512c:	4f 4a       	mov.b	r10,	r15	
    512e:	b0 12 ea 4e 	call	#0x4eea	
    for(i = 0; i < GRAPH_LENGHT; i++){
    5132:	b0 12 8a 4e 	call	#0x4e8a	
    5136:	4b 5f       	add.b	r15,	r11	
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
    5138:	b0 12 4e 4e 	call	#0x4e4e	
        AnalogGraph[n][i] = 0;
    513c:	5f 42 91 11 	mov.b	&0x1191,r15	
    5140:	5f 53       	inc.b	r15		
    5142:	b0 12 ea 4e 	call	#0x4eea	
    }
    5146:	b0 12 8a 4e 	call	#0x4e8a	
    514a:	4b 5f       	add.b	r15,	r11	
}
    514c:	b0 12 34 4f 	call	#0x4f34	
    5150:	c9 4f 00 00 	mov.b	r15,	0(r9)	;0x0000(r9)

    5154:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    5156:	b0 12 c0 4e 	call	#0x4ec0	
void process_analog_menu(void){
    515a:	b0 12 70 4e 	call	#0x4e70	
    draw_analog_graph();
    switch(MenuAnalog){
    515e:	4f 4b       	mov.b	r11,	r15	
        case DISPLAY:
    5160:	39 41       	pop	r9		
    5162:	3a 41       	pop	r10		
    5164:	3b 41       	pop	r11		
    5166:	30 41       	ret			

00005168 <i2c_read_multiples>:
            lcd_goto(4,0);
            printf("ANALOG GRAPH   ");
            
    5168:	0b 12       	push	r11		
    516a:	0a 12       	push	r10		
    516c:	09 12       	push	r9		
    516e:	08 12       	push	r8		
    5170:	07 12       	push	r7		
    5172:	4b 4f       	mov.b	r15,	r11	
    5174:	07 4e       	mov	r14,	r7	
    5176:	49 4d       	mov.b	r13,	r9	
            lcd_goto(0,14);
    5178:	48 43       	clr.b	r8		
            printf("DISPLAY             ");

    517a:	b0 12 4e 4e 	call	#0x4e4e	
            refresh_analog_menu();
    517e:	5f 42 91 11 	mov.b	&0x1191,r15	
    5182:	b0 12 ea 4e 	call	#0x4eea	
            MenuAnalog = SELECT;
    5186:	b0 12 8a 4e 	call	#0x4e8a	
    518a:	4a 4f       	mov.b	r15,	r10	
            break;
    518c:	4f 4b       	mov.b	r11,	r15	
    518e:	b0 12 ea 4e 	call	#0x4eea	
        case SELECT:
    5192:	b0 12 8a 4e 	call	#0x4e8a	
    5196:	4a 5f       	add.b	r15,	r10	
            lcd_goto(0,14);
    5198:	b0 12 4e 4e 	call	#0x4e4e	
            printf("SELECT            ");
    519c:	5f 42 91 11 	mov.b	&0x1191,r15	
    51a0:	5f 53       	inc.b	r15		
    51a2:	b0 12 ea 4e 	call	#0x4eea	

    51a6:	b0 12 8a 4e 	call	#0x4e8a	
    51aa:	4a 5f       	add.b	r15,	r10	
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    51ac:	19 20       	jnz	$+52     	;abs 0x51e0
    51ae:	4d 49       	mov.b	r9,	r13	
    51b0:	3d 53       	add	#-1,	r13	;r3 As==11
    51b2:	1d 93       	cmp	#1,	r13	;r3 As==01
    51b4:	15 38       	jl	$+44     	;abs 0x51e0
    51b6:	0b 43       	clr	r11		
    51b8:	09 4d       	mov	r13,	r9	
                MenuAnalog = WAIT_ROLL_LEFT;
            }
    51ba:	b0 12 34 4f 	call	#0x4f34	
    51be:	4e 4f       	mov.b	r15,	r14	
    51c0:	0f 47       	mov	r7,	r15	
    51c2:	0f 5b       	add	r11,	r15	
    51c4:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
            else{
    51c8:	4f 43       	clr.b	r15		
    51ca:	b0 12 c0 4e 	call	#0x4ec0	
                if(ChannelInput[ROLL_CH] < 2500){
    51ce:	58 53       	inc.b	r8		
    51d0:	4a 93       	tst.b	r10		
    51d2:	04 20       	jnz	$+10     	;abs 0x51dc
    51d4:	4b 48       	mov.b	r8,	r11	
    51d6:	0b 99       	cmp	r9,	r11	
    51d8:	f0 3b       	jl	$-30     	;abs 0x51ba
    51da:	03 3c       	jmp	$+8      	;abs 0x51e2
    51dc:	4b 48       	mov.b	r8,	r11	
    51de:	01 3c       	jmp	$+4      	;abs 0x51e2
    51e0:	0b 43       	clr	r11		
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
    51e2:	b0 12 34 4f 	call	#0x4f34	
    51e6:	07 5b       	add	r11,	r7	
    51e8:	c7 4f 00 00 	mov.b	r15,	0(r7)	;0x0000(r7)
            }
    51ec:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    51ee:	b0 12 c0 4e 	call	#0x4ec0	
            
    51f2:	b0 12 70 4e 	call	#0x4e70	
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    51f6:	4f 4a       	mov.b	r10,	r15	
                MenuAnalog = WAIT_PITCH_DOWN;
    51f8:	37 41       	pop	r7		
    51fa:	38 41       	pop	r8		
    51fc:	39 41       	pop	r9		
    51fe:	3a 41       	pop	r10		
    5200:	3b 41       	pop	r11		
    5202:	30 41       	ret			

00005204 <i2c_read16_byte>:
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    5204:	0b 12       	push	r11		
    5206:	0a 12       	push	r10		
    5208:	09 12       	push	r9		
    520a:	0a 4f       	mov	r15,	r10	
    520c:	09 4e       	mov	r14,	r9	
                    MenuAnalog = WAIT_PITCH_UP;
                }
            }
    520e:	b0 12 4e 4e 	call	#0x4e4e	
            
    5212:	5f 42 91 11 	mov.b	&0x1191,r15	
    5216:	b0 12 ea 4e 	call	#0x4eea	
            break;
    521a:	b0 12 8a 4e 	call	#0x4e8a	
    521e:	4b 4f       	mov.b	r15,	r11	
        case WAIT_PITCH_DOWN:
    5220:	0f 4a       	mov	r10,	r15	
    5222:	8f 10       	swpb	r15		
    5224:	7f f3       	and.b	#-1,	r15	;r3 As==11
    5226:	b0 12 ea 4e 	call	#0x4eea	
            lcd_goto(0,14);
    522a:	b0 12 8a 4e 	call	#0x4e8a	
    522e:	4b 5f       	add.b	r15,	r11	
            printf("WAIT PITCH DOWN    ");
    5230:	7a f3       	and.b	#-1,	r10	;r3 As==11
    5232:	4f 4a       	mov.b	r10,	r15	
    5234:	b0 12 ea 4e 	call	#0x4eea	

    5238:	b0 12 8a 4e 	call	#0x4e8a	
    523c:	4b 5f       	add.b	r15,	r11	
            if(ChannelInput[PITCH_CH] > 2500){
    523e:	b0 12 4e 4e 	call	#0x4e4e	
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    5242:	5f 42 91 11 	mov.b	&0x1191,r15	
    5246:	5f 53       	inc.b	r15		
    5248:	b0 12 ea 4e 	call	#0x4eea	
                MenuAnalog = DISPLAY;
    524c:	b0 12 8a 4e 	call	#0x4e8a	
    5250:	4b 5f       	add.b	r15,	r11	
            }
    5252:	b0 12 34 4f 	call	#0x4f34	
    5256:	c9 4f 00 00 	mov.b	r15,	0(r9)	;0x0000(r9)
            break;
    525a:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    525c:	b0 12 c0 4e 	call	#0x4ec0	
            
    5260:	b0 12 70 4e 	call	#0x4e70	
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    5264:	4f 4b       	mov.b	r11,	r15	
            printf("WAIT PITCH UP    ");
    5266:	39 41       	pop	r9		
    5268:	3a 41       	pop	r10		
    526a:	3b 41       	pop	r11		
    526c:	30 41       	ret			

0000526e <i2c_read16_multiples>:

            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    526e:	0b 12       	push	r11		
    5270:	0a 12       	push	r10		
    5272:	09 12       	push	r9		
    5274:	08 12       	push	r8		
    5276:	07 12       	push	r7		
    5278:	0b 4f       	mov	r15,	r11	
    527a:	08 4e       	mov	r14,	r8	
    527c:	49 4d       	mov.b	r13,	r9	
                analog_graph_clear(AnalogSelect);
    527e:	47 43       	clr.b	r7		
                MenuAnalog = DISPLAY;
            }
    5280:	b0 12 4e 4e 	call	#0x4e4e	
            break;
    5284:	5f 42 91 11 	mov.b	&0x1191,r15	
    5288:	b0 12 ea 4e 	call	#0x4eea	
            
    528c:	b0 12 8a 4e 	call	#0x4e8a	
    5290:	4a 4f       	mov.b	r15,	r10	
        case WAIT_ROLL_RIGHT:
    5292:	0f 4b       	mov	r11,	r15	
    5294:	8f 10       	swpb	r15		
    5296:	7f f3       	and.b	#-1,	r15	;r3 As==11
    5298:	b0 12 ea 4e 	call	#0x4eea	
                lcd_goto(0,14);
    529c:	b0 12 8a 4e 	call	#0x4e8a	
    52a0:	4a 5f       	add.b	r15,	r10	
                printf("WAIT ROLL RIGHT ");
    52a2:	7b f3       	and.b	#-1,	r11	;r3 As==11
    52a4:	4f 4b       	mov.b	r11,	r15	
    52a6:	b0 12 ea 4e 	call	#0x4eea	

    52aa:	b0 12 8a 4e 	call	#0x4e8a	
    52ae:	4a 5f       	add.b	r15,	r10	
                if(ChannelInput[PITCH_CH] < 3500){
    52b0:	b0 12 4e 4e 	call	#0x4e4e	
                    if(AnalogSelect > 0){
    52b4:	5f 42 91 11 	mov.b	&0x1191,r15	
    52b8:	5f 53       	inc.b	r15		
    52ba:	b0 12 ea 4e 	call	#0x4eea	
                        AnalogSelect--;
    52be:	b0 12 8a 4e 	call	#0x4e8a	
    52c2:	4a 5f       	add.b	r15,	r10	
                    }
                    MenuAnalog = DISPLAY;
    52c4:	19 20       	jnz	$+52     	;abs 0x52f8
    52c6:	4d 49       	mov.b	r9,	r13	
    52c8:	3d 53       	add	#-1,	r13	;r3 As==11
    52ca:	1d 93       	cmp	#1,	r13	;r3 As==01
    52cc:	15 38       	jl	$+44     	;abs 0x52f8
    52ce:	0b 43       	clr	r11		
    52d0:	09 4d       	mov	r13,	r9	
                }
            break;
    52d2:	b0 12 34 4f 	call	#0x4f34	
    52d6:	4e 4f       	mov.b	r15,	r14	
    52d8:	0f 48       	mov	r8,	r15	
    52da:	0f 5b       	add	r11,	r15	
    52dc:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
            
    52e0:	4f 43       	clr.b	r15		
    52e2:	b0 12 c0 4e 	call	#0x4ec0	
        case WAIT_ROLL_LEFT:
    52e6:	57 53       	inc.b	r7		
    52e8:	4a 93       	tst.b	r10		
    52ea:	04 20       	jnz	$+10     	;abs 0x52f4
    52ec:	4b 47       	mov.b	r7,	r11	
    52ee:	0b 99       	cmp	r9,	r11	
    52f0:	f0 3b       	jl	$-30     	;abs 0x52d2
    52f2:	03 3c       	jmp	$+8      	;abs 0x52fa
    52f4:	4b 47       	mov.b	r7,	r11	
    52f6:	01 3c       	jmp	$+4      	;abs 0x52fa
    52f8:	0b 43       	clr	r11		
                lcd_goto(0,14);
                printf("WAIT ROLL LEFT   ");
    52fa:	b0 12 34 4f 	call	#0x4f34	
    52fe:	08 5b       	add	r11,	r8	
    5300:	c8 4f 00 00 	mov.b	r15,	0(r8)	;0x0000(r8)
        
    5304:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    5306:	b0 12 c0 4e 	call	#0x4ec0	
                if(ChannelInput[PITCH_CH] > 2500){
    530a:	b0 12 70 4e 	call	#0x4e70	
                   if(AnalogSelect < 7){
                        AnalogSelect++;
    530e:	4f 4a       	mov.b	r10,	r15	
                    }
    5310:	37 41       	pop	r7		
    5312:	38 41       	pop	r8		
    5314:	39 41       	pop	r9		
    5316:	3a 41       	pop	r10		
    5318:	3b 41       	pop	r11		
    531a:	30 41       	ret			

0000531c <analog_init>:
#include "signal.h"
#include "msp430x261x.h"
#include "delay.h"
#include "analog.h"
#include "lcd6100.h"
#include "eeprom.h"
    531c:	f2 43 37 00 	mov.b	#-1,	&0x0037	;r3 As==11
#include "i2c.h"
#include "microquad.h"
    5320:	a2 c3 a0 01 	bic	#2,	&0x01a0	;r3 As==10

    5324:	b2 40 30 00 	mov	#48,	&0x01a0	;#0x0030
    5328:	a0 01 
volatile unsigned int ControlCounter = 0;
    532a:	b2 40 00 02 	mov	#512,	&0x01a2	;#0x0200
    532e:	a2 01 
volatile unsigned int RCCounter = 0;
    5330:	a2 d3 a0 01 	bis	#2,	&0x01a0	;r3 As==10
volatile unsigned int MenuCounter = 0;
    5334:	30 41       	ret			

00005336 <analog_calibrate_channel>:

/*
    5336:	0b 12       	push	r11		
    5338:	0a 12       	push	r10		
    533a:	09 12       	push	r9		
    533c:	08 12       	push	r8		
    533e:	07 12       	push	r7		
    5340:	07 4f       	mov	r15,	r7	
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    5342:	0a 43       	clr	r10		
    5344:	0b 43       	clr	r11		
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
    5346:	5f 42 37 00 	mov.b	&0x0037,r15	
    534a:	7f f3       	and.b	#-1,	r15	;r3 As==11
    534c:	0e 47       	mov	r7,	r14	
    534e:	0e 93       	tst	r14		
    5350:	03 24       	jz	$+8      	;abs 0x5358
    5352:	0f 11       	rra	r15		
    5354:	1e 83       	dec	r14		
    5356:	fd 23       	jnz	$-4      	;abs 0x5352
    5358:	1f f3       	and	#1,	r15	;r3 As==01
    535a:	49 24       	jz	$+148    	;abs 0x53ee
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
    535c:	38 40 b7 0b 	mov	#2999,	r8	;#0x0bb7
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
    5360:	3f 40 2b 01 	mov	#299,	r15	;#0x012b
    5364:	3f 50 e7 ff 	add	#-25,	r15	;#0xffe7
    5368:	3f b0 00 80 	bit	#-32768,r15	;#0x8000
    536c:	fb 37       	jge	$-8      	;abs 0x5364
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE
    536e:	a2 c3 a0 01 	bic	#2,	&0x01a0	;r3 As==10

    5372:	c2 47 80 00 	mov.b	r7,	&0x0080	
MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
    5376:	a2 d3 a0 01 	bis	#2,	&0x01a0	;r3 As==10
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
    537a:	92 d3 a0 01 	bis	#1,	&0x01a0	;r3 As==01
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal
    537e:	92 b3 a2 01 	bit	#1,	&0x01a2	;r3 As==01
    5382:	fd 23       	jnz	$-4      	;abs 0x537e

    5384:	3c 40 33 33 	mov	#13107,	r12	;#0x3333
    5388:	3d 40 73 3f 	mov	#16243,	r13	;#0x3f73
    538c:	0e 4a       	mov	r10,	r14	
    538e:	0f 4b       	mov	r11,	r15	
    5390:	b0 12 a0 57 	call	#0x57a0	
    5394:	09 4e       	mov	r14,	r9	
    5396:	0a 4f       	mov	r15,	r10	
    5398:	1b 42 40 01 	mov	&0x0140,r11	
    539c:	0e 4b       	mov	r11,	r14	
    539e:	0f 4e       	mov	r14,	r15	
    53a0:	0f 5f       	rla	r15		
    53a2:	0f 7f       	subc	r15,	r15	
    53a4:	3f e3       	inv	r15		
    53a6:	b0 12 a2 5c 	call	#0x5ca2	
    53aa:	0b 93       	tst	r11		
    53ac:	1a 38       	jl	$+54     	;abs 0x53e2
    53ae:	3c 40 cd cc 	mov	#-13107,r12	;#0xcccd
    53b2:	3d 40 4c 3d 	mov	#15692,	r13	;#0x3d4c
    53b6:	b0 12 a0 57 	call	#0x57a0	
    53ba:	0c 4e       	mov	r14,	r12	
    53bc:	0d 4f       	mov	r15,	r13	
    53be:	0e 49       	mov	r9,	r14	
    53c0:	0f 4a       	mov	r10,	r15	
    53c2:	b0 12 04 57 	call	#0x5704	
    53c6:	0a 4e       	mov	r14,	r10	
    53c8:	0b 4f       	mov	r15,	r11	
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
    53ca:	38 53       	add	#-1,	r8	;r3 As==11
    53cc:	38 b0 00 80 	bit	#-32768,r8	;#0x8000
    53d0:	c7 37       	jge	$-112    	;abs 0x5360
MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
    53d2:	07 57       	rla	r7		
    53d4:	37 50 92 11 	add	#4498,	r7	;#0x1192
    53d8:	b0 12 34 5d 	call	#0x5d34	
    53dc:	87 4e 00 00 	mov	r14,	0(r7)	;0x0000(r7)
    53e0:	06 3c       	jmp	$+14     	;abs 0x53ee
    53e2:	0c 43       	clr	r12		
    53e4:	3d 40 80 47 	mov	#18304,	r13	;#0x4780
    53e8:	b0 12 04 57 	call	#0x5704	
    53ec:	e0 3f       	jmp	$-62     	;abs 0x53ae
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
    53ee:	37 41       	pop	r7		
    53f0:	38 41       	pop	r8		
    53f2:	39 41       	pop	r9		
    53f4:	3a 41       	pop	r10		
    53f6:	3b 41       	pop	r11		
    53f8:	30 41       	ret			

000053fa <analog_refresh_all>:
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

    53fa:	0b 12       	push	r11		
    53fc:	0a 12       	push	r10		
// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    53fe:	0d 43       	clr	r13		
    5400:	3c 40 a2 11 	mov	#4514,	r12	;#0x11a2
    5404:	0b 4c       	mov	r12,	r11	
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    5406:	5f 42 37 00 	mov.b	&0x0037,r15	
    540a:	7f f3       	and.b	#-1,	r15	;r3 As==11
    540c:	0e 4d       	mov	r13,	r14	
    540e:	0e 93       	tst	r14		
    5410:	03 24       	jz	$+8      	;abs 0x5418
    5412:	0f 11       	rra	r15		
    5414:	1e 83       	dec	r14		
    5416:	fd 23       	jnz	$-4      	;abs 0x5412
    5418:	1f f3       	and	#1,	r15	;r3 As==01
    541a:	16 24       	jz	$+46     	;abs 0x5448

    541c:	a2 c3 a0 01 	bic	#2,	&0x01a0	;r3 As==10
// variaveis leitura radio raw
    5420:	c2 4d 80 00 	mov.b	r13,	&0x0080	
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    5424:	a2 d3 a0 01 	bis	#2,	&0x01a0	;r3 As==10
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    5428:	92 d3 a0 01 	bis	#1,	&0x01a0	;r3 As==01
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    542c:	92 b3 a2 01 	bit	#1,	&0x01a2	;r3 As==01
    5430:	fd 23       	jnz	$-4      	;abs 0x542c

    5432:	0e 4d       	mov	r13,	r14	
    5434:	0e 5e       	rla	r14		
    5436:	0f 4e       	mov	r14,	r15	
    5438:	0f 5b       	add	r11,	r15	
    543a:	1a 42 40 01 	mov	&0x0140,r10	
    543e:	1a 8e 92 11 	sub	4498(r14),r10	;0x1192(r14)
    5442:	8f 4a 00 00 	mov	r10,	0(r15)	;0x0000(r15)
    5446:	05 3c       	jmp	$+12     	;abs 0x5452
int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    5448:	0f 4d       	mov	r13,	r15	
    544a:	0f 5f       	rla	r15		
    544c:	0f 5c       	add	r12,	r15	
    544e:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    5452:	1d 53       	inc	r13		
    5454:	3d 92       	cmp	#8,	r13	;r2 As==11
    5456:	d7 3b       	jl	$-80     	;abs 0x5406
int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio

    5458:	3a 41       	pop	r10		
    545a:	3b 41       	pop	r11		
    545c:	30 41       	ret			

0000545e <analog_refresh_channel>:
    lcd_clear(BLACK);
    
    545e:	0d 4f       	mov	r15,	r13	
    MenuOption = RADIO_RAW;
    5460:	5f 42 37 00 	mov.b	&0x0037,r15	
    5464:	7f f3       	and.b	#-1,	r15	;r3 As==11
    5466:	0e 4d       	mov	r13,	r14	
    5468:	0e 93       	tst	r14		
    546a:	03 24       	jz	$+8      	;abs 0x5472
    546c:	0f 11       	rra	r15		
    546e:	1e 83       	dec	r14		
    5470:	fd 23       	jnz	$-4      	;abs 0x546c
    5472:	1f f3       	and	#1,	r15	;r3 As==01
    5474:	13 24       	jz	$+40     	;abs 0x549c
    MenuStep = DISPLAY;
    5476:	a2 c3 a0 01 	bic	#2,	&0x01a0	;r3 As==10
    MenuVisible = TRUE;     // inicializa mostrando o menu
    547a:	c2 4d 80 00 	mov.b	r13,	&0x0080	
        
    547e:	a2 d3 a0 01 	bis	#2,	&0x01a0	;r3 As==10
    while(1){
    5482:	92 d3 a0 01 	bis	#1,	&0x01a0	;r3 As==01
        /* os Counters sao incrementados na interrution do timerA
    5486:	92 b3 a2 01 	bit	#1,	&0x01a2	;r3 As==01
    548a:	fd 23       	jnz	$-4      	;abs 0x5486
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
    548c:	0d 5d       	rla	r13		
    548e:	1f 42 40 01 	mov	&0x0140,r15	
    5492:	1f 8d 92 11 	sub	4498(r13),r15	;0x1192(r13)
    5496:	8d 4f a2 11 	mov	r15,	4514(r13);0x11a2(r13)
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
    549a:	30 41       	ret			
    while(1){
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
    549c:	0d 5d       	rla	r13		
    549e:	8d 43 a2 11 	mov	#0,	4514(r13);r3 As==00, 0x11a2(r13)
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
    54a2:	30 41       	ret			

000054a4 <__fixunssfsi>:
    54a4:	0b 12       	push	r11		
    54a6:	0a 12       	push	r10		
    54a8:	0a 4e       	mov	r14,	r10	
    54aa:	0b 4f       	mov	r15,	r11	
    54ac:	0c 43       	clr	r12		
    54ae:	3d 40 00 4f 	mov	#20224,	r13	;#0x4f00
    54b2:	b0 12 de 5b 	call	#0x5bde	
    54b6:	0f 93       	tst	r15		
    54b8:	0d 38       	jl	$+28     	;abs 0x54d4
    54ba:	0c 43       	clr	r12		
    54bc:	3d 40 00 cf 	mov	#-12544,r13	;#0xcf00
    54c0:	0e 4a       	mov	r10,	r14	
    54c2:	0f 4b       	mov	r11,	r15	
    54c4:	b0 12 04 57 	call	#0x5704	
    54c8:	b0 12 34 5d 	call	#0x5d34	
    54cc:	0e 53       	add	#0,	r14	;r3 As==00
    54ce:	3f 60 00 80 	addc	#-32768,r15	;#0x8000
    54d2:	04 3c       	jmp	$+10     	;abs 0x54dc
    54d4:	0e 4a       	mov	r10,	r14	
    54d6:	0f 4b       	mov	r11,	r15	
    54d8:	b0 12 34 5d 	call	#0x5d34	
    54dc:	3a 41       	pop	r10		
    54de:	3b 41       	pop	r11		
    54e0:	30 41       	ret			

000054e2 <_fpadd_parts>:
     */
    BCSCTL1 = 0xcf;     

    /* 
     * Basic Clock System Control 3
     * 
    54e2:	0b 12       	push	r11		
    54e4:	0a 12       	push	r10		
    54e6:	09 12       	push	r9		
    54e8:	08 12       	push	r8		
    54ea:	07 12       	push	r7		
    54ec:	06 12       	push	r6		
    54ee:	05 12       	push	r5		
    54f0:	0b 4f       	mov	r15,	r11	
    54f2:	0a 4e       	mov	r14,	r10	
    54f4:	09 4d       	mov	r13,	r9	

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    54f6:	0f 43       	clr	r15		
    54f8:	6e 4b       	mov.b	@r11,	r14	
    54fa:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    54fc:	01 2c       	jc	$+4      	;abs 0x5500
    54fe:	1f 43       	mov	#1,	r15	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5500:	0f 93       	tst	r15		
    5502:	18 20       	jnz	$+50     	;abs 0x5534
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5504:	0c 43       	clr	r12		
    5506:	6f 4a       	mov.b	@r10,	r15	
    5508:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    550a:	01 2c       	jc	$+4      	;abs 0x550e
    550c:	1c 43       	mov	#1,	r12	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    550e:	0c 93       	tst	r12		
    5510:	3c 20       	jnz	$+122    	;abs 0x558a
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5512:	0c 43       	clr	r12		
    5514:	6e 92       	cmp.b	#4,	r14	;r2 As==10
    5516:	eb 24       	jz	$+472    	;abs 0x56ee
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5518:	0c 93       	tst	r12		
    551a:	10 24       	jz	$+34     	;abs 0x553c
            lcd_goto(0,14);
    551c:	0e 43       	clr	r14		
    551e:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    5520:	0b 24       	jz	$+24     	;abs 0x5538
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5522:	0e 93       	tst	r14		
    5524:	07 24       	jz	$+16     	;abs 0x5534
    5526:	db 9a 01 00 	cmp.b	1(r10),	1(r11)	;0x0001(r10), 0x0001(r11)
    552a:	01 00 
    552c:	03 24       	jz	$+8      	;abs 0x5534
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
            break;
    552e:	3d 40 d0 5d 	mov	#24016,	r13	;#0x5dd0
            if(ChannelInput[PITCH_CH] > 2500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
    5532:	df 3c       	jmp	$+448    	;abs 0x56f2
     * CM_0 -- No Capture
     * CCIS_0 -- CCIxA
     * ~SCS -- Asynchronous Capture
     * ~SCCI -- Latched capture signal (read)
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
    5534:	0d 4b       	mov	r11,	r13	
    5536:	dd 3c       	jmp	$+444    	;abs 0x56f2
    5538:	1e 43       	mov	#1,	r14	;r3 As==01
    553a:	f3 3f       	jmp	$-24     	;abs 0x5522
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    553c:	0d 43       	clr	r13		
    553e:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    5540:	d4 24       	jz	$+426    	;abs 0x56ea
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5542:	0d 93       	tst	r13		
    5544:	22 20       	jnz	$+70     	;abs 0x558a
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5546:	0d 43       	clr	r13		
    5548:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    554a:	cd 24       	jz	$+412    	;abs 0x56e6
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    554c:	0d 93       	tst	r13		
    554e:	18 24       	jz	$+50     	;abs 0x5580
            
    5550:	0f 43       	clr	r15		
    5552:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5554:	13 24       	jz	$+40     	;abs 0x557c
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5556:	0f 93       	tst	r15		
    5558:	ed 27       	jz	$-36     	;abs 0x5534
{
    /* 
     * TACCTL0, Capture/Compare Control Register 0
     * 
     * CM_0 -- No Capture
     * CCIS_0 -- CCIxA
    555a:	0f 4b       	mov	r11,	r15	
    555c:	b9 4f 00 00 	mov	@r15+,	0(r9)	;0x0000(r9)
    5560:	b9 4f 02 00 	mov	@r15+,	2(r9)	;0x0002(r9)
    5564:	b9 4f 04 00 	mov	@r15+,	4(r9)	;0x0004(r9)
    5568:	b9 4f 06 00 	mov	@r15+,	6(r9)	;0x0006(r9)
     * ~SCS -- Asynchronous Capture
    556c:	5b 4b 01 00 	mov.b	1(r11),	r11	;0x0001(r11)
    5570:	5b fa 01 00 	and.b	1(r10),	r11	;0x0001(r10)
    5574:	c9 4b 01 00 	mov.b	r11,	1(r9)	;0x0001(r9)
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
        i2c_change_address(EEPROM_I2C_ADDR);
    5578:	0d 49       	mov	r9,	r13	
    557a:	bb 3c       	jmp	$+376    	;abs 0x56f2
    557c:	1f 43       	mov	#1,	r15	;r3 As==01
    557e:	eb 3f       	jmp	$-40     	;abs 0x5556
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5580:	0f 43       	clr	r15		
    5582:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5584:	ae 24       	jz	$+350    	;abs 0x56e2
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5586:	0f 93       	tst	r15		
    5588:	02 24       	jz	$+6      	;abs 0x558e
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    558a:	0d 4a       	mov	r10,	r13	
    558c:	b2 3c       	jmp	$+358    	;abs 0x56f2
    TACCR0 = 4001;

    /* 
     * TACTL, Timer_A3 Control Register
     * 
     * TASSEL_2 -- SMCLK
    558e:	15 4b 02 00 	mov	2(r11),	r5	;0x0002(r11)
     * ID_3 -- Divider - /8
    5592:	16 4a 02 00 	mov	2(r10),	r6	;0x0002(r10)
     * MC_1 -- Up Mode
    5596:	1c 4b 04 00 	mov	4(r11),	r12	;0x0004(r11)
    559a:	1d 4b 06 00 	mov	6(r11),	r13	;0x0006(r11)
     */
    559e:	17 4a 04 00 	mov	4(r10),	r7	;0x0004(r10)
    55a2:	18 4a 06 00 	mov	6(r10),	r8	;0x0006(r10)
    TACTL = TASSEL_2 + ID_3 + MC_1;
}
    55a6:	0f 45       	mov	r5,	r15	
    55a8:	0f 86       	sub	r6,	r15	

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    55aa:	98 30       	jn	$+306    	;abs 0x56dc
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    55ac:	3f 90 20 00 	cmp	#32,	r15	;#0x0020
    55b0:	8c 34       	jge	$+282    	;abs 0x56ca
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    55b2:	06 95       	cmp	r5,	r6	
    55b4:	10 34       	jge	$+34     	;abs 0x55d6
    55b6:	0f 45       	mov	r5,	r15	
    55b8:	0f 86       	sub	r6,	r15	
    55ba:	06 4f       	mov	r15,	r6	
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
    55bc:	36 53       	add	#-1,	r6	;r3 As==11
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    55be:	0e 47       	mov	r7,	r14	
    55c0:	0f 48       	mov	r8,	r15	
    55c2:	1e f3       	and	#1,	r14	;r3 As==01
    55c4:	0f f3       	and	#0,	r15	;r3 As==00
    55c6:	12 c3       	clrc			
    55c8:	08 10       	rrc	r8		
    55ca:	07 10       	rrc	r7		
    55cc:	07 de       	bis	r14,	r7	
    55ce:	08 df       	bis	r15,	r8	
    55d0:	06 93       	tst	r6		
    55d2:	f4 23       	jnz	$-22     	;abs 0x55bc
    55d4:	06 45       	mov	r5,	r6	
            }
            else{ // high to low
    55d6:	05 96       	cmp	r6,	r5	
    55d8:	0c 34       	jge	$+26     	;abs 0x55f2
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    55da:	15 53       	inc	r5		
                }
    55dc:	0e 4c       	mov	r12,	r14	
    55de:	0f 4d       	mov	r13,	r15	
    55e0:	1e f3       	and	#1,	r14	;r3 As==01
    55e2:	0f f3       	and	#0,	r15	;r3 As==00
    55e4:	12 c3       	clrc			
    55e6:	0d 10       	rrc	r13		
    55e8:	0c 10       	rrc	r12		
    55ea:	0c de       	bis	r14,	r12	
    55ec:	0d df       	bis	r15,	r13	
    55ee:	05 96       	cmp	r6,	r5	
    55f0:	f4 3b       	jl	$-22     	;abs 0x55da
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    55f2:	5f 4b 01 00 	mov.b	1(r11),	r15	;0x0001(r11)
    55f6:	5f 9a 01 00 	cmp.b	1(r10),	r15	;0x0001(r10)
    55fa:	59 24       	jz	$+180    	;abs 0x56ae
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    55fc:	4f 93       	tst.b	r15		
    55fe:	52 24       	jz	$+166    	;abs 0x56a4
    
    lcd_goto(2,5);
    5600:	0e 47       	mov	r7,	r14	
    5602:	0f 48       	mov	r8,	r15	
    5604:	0e 8c       	sub	r12,	r14	
    5606:	0f 7d       	subc	r13,	r15	
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    5608:	0f 93       	tst	r15		
    560a:	43 38       	jl	$+136    	;abs 0x5692
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
    560c:	c9 43 01 00 	mov.b	#0,	1(r9)	;r3 As==00, 0x0001(r9)
        PPMSlope[i] = 1;
    5610:	89 45 02 00 	mov	r5,	2(r9)	;0x0002(r9)
    5614:	89 4e 04 00 	mov	r14,	4(r9)	;0x0004(r9)
    5618:	89 4f 06 00 	mov	r15,	6(r9)	;0x0006(r9)
    }
    
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
    561c:	1b 49 04 00 	mov	4(r9),	r11	;0x0004(r9)
    5620:	1c 49 06 00 	mov	6(r9),	r12	;0x0006(r9)
    5624:	0e 4b       	mov	r11,	r14	
    5626:	0f 4c       	mov	r12,	r15	
    5628:	3e 53       	add	#-1,	r14	;r3 As==11
    562a:	3f 63       	addc	#-1,	r15	;r3 As==11
    562c:	3e 83       	sub	#-1,	r14	;r3 As==11
    562e:	3f 70 ff 3f 	subc	#16383,	r15	;#0x3fff
    5632:	19 2c       	jc	$+52     	;abs 0x5666
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
    5634:	0e 4b       	mov	r11,	r14	
    5636:	0f 4c       	mov	r12,	r15	
    5638:	0e 5e       	rla	r14		
    563a:	0f 6f       	rlc	r15		
    563c:	89 4e 04 00 	mov	r14,	4(r9)	;0x0004(r9)
    5640:	89 4f 06 00 	mov	r15,	6(r9)	;0x0006(r9)
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    5644:	b9 53 02 00 	add	#-1,	2(r9)	;r3 As==11, 0x0002(r9)
    5648:	0c 4e       	mov	r14,	r12	
    564a:	0d 4f       	mov	r15,	r13	
    564c:	3c 53       	add	#-1,	r12	;r3 As==11
    564e:	3d 63       	addc	#-1,	r13	;r3 As==11
    5650:	3c 83       	sub	#-1,	r12	;r3 As==11
    5652:	3d 70 ff 3f 	subc	#16383,	r13	;#0x3fff
    5656:	05 2c       	jc	$+12     	;abs 0x5662
    5658:	1b 49 04 00 	mov	4(r9),	r11	;0x0004(r9)
    565c:	1c 49 06 00 	mov	6(r9),	r12	;0x0006(r9)
    5660:	e9 3f       	jmp	$-44     	;abs 0x5634
    5662:	0b 4e       	mov	r14,	r11	
    5664:	0c 4f       	mov	r15,	r12	
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    lcd_clear(BLACK);
    5666:	f9 40 03 00 	mov.b	#3,	0(r9)	;#0x0003, 0x0000(r9)
    566a:	00 00 
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    566c:	3c 90 00 80 	cmp	#-32768,r12	;#0x8000
    5670:	83 2b       	jnc	$-248    	;abs 0x5578
    }

    5672:	0e 4b       	mov	r11,	r14	
    5674:	0f 4c       	mov	r12,	r15	
    5676:	12 c3       	clrc			
    5678:	0f 10       	rrc	r15		
    567a:	0e 10       	rrc	r14		
    567c:	1b f3       	and	#1,	r11	;r3 As==01
    567e:	0c f3       	and	#0,	r12	;r3 As==00
    5680:	0b de       	bis	r14,	r11	
    5682:	0c df       	bis	r15,	r12	
    5684:	89 4b 04 00 	mov	r11,	4(r9)	;0x0004(r9)
    5688:	89 4c 06 00 	mov	r12,	6(r9)	;0x0006(r9)
    // grava dados na EEPROM
    568c:	99 53 02 00 	inc	2(r9)		;0x0002(r9)
    5690:	73 3f       	jmp	$-280    	;abs 0x5578
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    5692:	d9 43 01 00 	mov.b	#1,	1(r9)	;r3 As==01, 0x0001(r9)
    }
    5696:	89 45 02 00 	mov	r5,	2(r9)	;0x0002(r9)
    
    569a:	3e e3       	inv	r14		
    569c:	3f e3       	inv	r15		
    569e:	1e 53       	inc	r14		
    56a0:	0f 63       	adc	r15		
    56a2:	b8 3f       	jmp	$-142    	;abs 0x5614
    
    lcd_goto(2,5);
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    56a4:	0e 4c       	mov	r12,	r14	
    56a6:	0f 4d       	mov	r13,	r15	
    56a8:	0e 87       	sub	r7,	r14	
    56aa:	0f 78       	subc	r8,	r15	
    56ac:	ad 3f       	jmp	$-164    	;abs 0x5608
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
                PPMMin[i] = PPMValue[i];
            }
    56ae:	d9 4b 01 00 	mov.b	1(r11),	1(r9)	;0x0001(r11), 0x0001(r9)
    56b2:	01 00 
        }
    56b4:	89 45 02 00 	mov	r5,	2(r9)	;0x0002(r9)
    }
    56b8:	0e 4c       	mov	r12,	r14	
    56ba:	0f 4d       	mov	r13,	r15	
    56bc:	0e 57       	add	r7,	r14	
    56be:	0f 68       	addc	r8,	r15	
    56c0:	89 4e 04 00 	mov	r14,	4(r9)	;0x0004(r9)
    56c4:	89 4f 06 00 	mov	r15,	6(r9)	;0x0006(r9)
    56c8:	cc 3f       	jmp	$-102    	;abs 0x5662
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
    56ca:	06 95       	cmp	r5,	r6	
    56cc:	03 34       	jge	$+8      	;abs 0x56d4
        }
        channel_num++;
    }
    56ce:	07 43       	clr	r7		
    56d0:	08 43       	clr	r8		
    56d2:	8f 3f       	jmp	$-224    	;abs 0x55f2
}

void calibrate_radio(void){
    
    56d4:	05 46       	mov	r6,	r5	
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    56d6:	0c 43       	clr	r12		
    56d8:	0d 43       	clr	r13		
    56da:	8b 3f       	jmp	$-232    	;abs 0x55f2
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
}

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    56dc:	3f e3       	inv	r15		
    56de:	1f 53       	inc	r15		
    56e0:	65 3f       	jmp	$-308    	;abs 0x55ac
    56e2:	1f 43       	mov	#1,	r15	;r3 As==01
    56e4:	50 3f       	jmp	$-350    	;abs 0x5586
    56e6:	1d 43       	mov	#1,	r13	;r3 As==01
    56e8:	31 3f       	jmp	$-412    	;abs 0x554c
    56ea:	1d 43       	mov	#1,	r13	;r3 As==01
    56ec:	2a 3f       	jmp	$-426    	;abs 0x5542
    56ee:	1c 43       	mov	#1,	r12	;r3 As==01
    56f0:	13 3f       	jmp	$-472    	;abs 0x5518

    // grava dados na EEPROM
    if(EEPROMFound){
        i2c_change_address(EEPROM_I2C_ADDR);
        
        // grava yaw slope 
    56f2:	0f 4d       	mov	r13,	r15	
    56f4:	35 41       	pop	r5		
    56f6:	36 41       	pop	r6		
    56f8:	37 41       	pop	r7		
    56fa:	38 41       	pop	r8		
    56fc:	39 41       	pop	r9		
    56fe:	3a 41       	pop	r10		
    5700:	3b 41       	pop	r11		
    5702:	30 41       	ret			

00005704 <__addsf3>:
        ValorAux.f = PPMSlope[YAW_CH];
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        
        delayms(100);
    5704:	0b 12       	push	r11		
    5706:	31 80 20 00 	sub	#32,	r1	;#0x0020
        // grava throttle slope 
        ValorAux.f = PPMSlope[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
    570a:	81 4e 18 00 	mov	r14,	24(r1)	;0x0018(r1)
    570e:	81 4f 1a 00 	mov	r15,	26(r1)	;0x001a(r1)
        // grava pitch slope 
    5712:	81 4c 1c 00 	mov	r12,	28(r1)	;0x001c(r1)
    5716:	81 4d 1e 00 	mov	r13,	30(r1)	;0x001e(r1)
        ValorAux.f = PPMSlope[PITCH_CH];
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    571a:	0e 41       	mov	r1,	r14	
    571c:	0f 41       	mov	r1,	r15	
    571e:	3f 50 18 00 	add	#24,	r15	;#0x0018
    5722:	b0 12 88 5f 	call	#0x5f88	
        
    5726:	0b 41       	mov	r1,	r11	
    5728:	3b 52       	add	#8,	r11	;r2 As==11
    572a:	0e 4b       	mov	r11,	r14	
    572c:	0f 41       	mov	r1,	r15	
    572e:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    5732:	b0 12 88 5f 	call	#0x5f88	
        delayms(100);
        
    5736:	0d 41       	mov	r1,	r13	
    5738:	3d 50 10 00 	add	#16,	r13	;#0x0010
    573c:	0e 4b       	mov	r11,	r14	
    573e:	0f 41       	mov	r1,	r15	
    5740:	b0 12 e2 54 	call	#0x54e2	
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
    5744:	b0 12 d8 5d 	call	#0x5dd8	
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    5748:	31 50 20 00 	add	#32,	r1	;#0x0020
    574c:	3b 41       	pop	r11		
    574e:	30 41       	ret			

00005750 <__subsf3>:
        
        delayms(100);
        
        // grava ch5 slope 
    5750:	0b 12       	push	r11		
    5752:	31 80 20 00 	sub	#32,	r1	;#0x0020
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    5756:	81 4e 18 00 	mov	r14,	24(r1)	;0x0018(r1)
    575a:	81 4f 1a 00 	mov	r15,	26(r1)	;0x001a(r1)
        i2c_write16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    575e:	81 4c 1c 00 	mov	r12,	28(r1)	;0x001c(r1)
    5762:	81 4d 1e 00 	mov	r13,	30(r1)	;0x001e(r1)
        
        delayms(100);
    5766:	0e 41       	mov	r1,	r14	
    5768:	0f 41       	mov	r1,	r15	
    576a:	3f 50 18 00 	add	#24,	r15	;#0x0018
    576e:	b0 12 88 5f 	call	#0x5f88	
        
    5772:	0b 41       	mov	r1,	r11	
    5774:	3b 52       	add	#8,	r11	;r2 As==11
    5776:	0e 4b       	mov	r11,	r14	
    5778:	0f 41       	mov	r1,	r15	
    577a:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    577e:	b0 12 88 5f 	call	#0x5f88	
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
    5782:	d1 e3 09 00 	xor.b	#1,	9(r1)	;r3 As==01, 0x0009(r1)
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
        
    5786:	0d 41       	mov	r1,	r13	
    5788:	3d 50 10 00 	add	#16,	r13	;#0x0010
    578c:	0e 4b       	mov	r11,	r14	
    578e:	0f 41       	mov	r1,	r15	
    5790:	b0 12 e2 54 	call	#0x54e2	
        delayms(100);
        
    5794:	b0 12 d8 5d 	call	#0x5dd8	
        // grava yaw offset 
    5798:	31 50 20 00 	add	#32,	r1	;#0x0020
    579c:	3b 41       	pop	r11		
    579e:	30 41       	ret			

000057a0 <__mulsf3>:
    clock_init();
    
    timer_a3_init();
    
    p1_init();
    
    57a0:	0b 12       	push	r11		
    57a2:	31 80 20 00 	sub	#32,	r1	;#0x0020
    
    i2c_init();
    
    eint();
    
    lcd_init(BLACK);
    57a6:	81 4e 18 00 	mov	r14,	24(r1)	;0x0018(r1)
    57aa:	81 4f 1a 00 	mov	r15,	26(r1)	;0x001a(r1)
    
    57ae:	81 4c 1c 00 	mov	r12,	28(r1)	;0x001c(r1)
    57b2:	81 4d 1e 00 	mov	r13,	30(r1)	;0x001e(r1)
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));

    57b6:	0e 41       	mov	r1,	r14	
    57b8:	0f 41       	mov	r1,	r15	
    57ba:	3f 50 18 00 	add	#24,	r15	;#0x0018
    57be:	b0 12 88 5f 	call	#0x5f88	
    i2c_config(EEPROM_I2C_ADDR);
    57c2:	0b 41       	mov	r1,	r11	
    57c4:	3b 52       	add	#8,	r11	;r2 As==11
    57c6:	0e 4b       	mov	r11,	r14	
    57c8:	0f 41       	mov	r1,	r15	
    57ca:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    57ce:	b0 12 88 5f 	call	#0x5f88	
    EEPROMFound = !(i2c_find_device());
    
    57d2:	0d 41       	mov	r1,	r13	
    57d4:	3d 50 10 00 	add	#16,	r13	;#0x0010
    57d8:	0e 4b       	mov	r11,	r14	
    57da:	0f 41       	mov	r1,	r15	
    57dc:	b0 12 ec 57 	call	#0x57ec	
    if(EEPROMFound){
        printf("EEPROM found\n");
    57e0:	b0 12 d8 5d 	call	#0x5dd8	
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    57e4:	31 50 20 00 	add	#32,	r1	;#0x0020
    57e8:	3b 41       	pop	r11		
    57ea:	30 41       	ret			

000057ec <_fpmul_parts>:
        
        delayms(100);
        
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    57ec:	0b 12       	push	r11		
    57ee:	0a 12       	push	r10		
    57f0:	09 12       	push	r9		
    57f2:	08 12       	push	r8		
    57f4:	07 12       	push	r7		
    57f6:	06 12       	push	r6		
    57f8:	05 12       	push	r5		
    57fa:	04 12       	push	r4		
    57fc:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    5800:	09 4f       	mov	r15,	r9	
    5802:	06 4e       	mov	r14,	r6	
    5804:	81 4d 00 00 	mov	r13,	0(r1)	;0x0000(r1)
        
    5808:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    580c:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00, 0x0004(r1)
        delayms(100);
    5810:	04 43       	clr	r4		
    5812:	05 43       	clr	r5		

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5814:	0f 43       	clr	r15		
    5816:	6e 49       	mov.b	@r9,	r14	
    5818:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    581a:	01 2c       	jc	$+4      	;abs 0x581e
    581c:	1f 43       	mov	#1,	r15	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    581e:	0f 93       	tst	r15		
    5820:	11 20       	jnz	$+36     	;abs 0x5844
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5822:	0c 43       	clr	r12		
    5824:	6f 46       	mov.b	@r6,	r15	
    5826:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    5828:	01 2c       	jc	$+4      	;abs 0x582c
    582a:	1c 43       	mov	#1,	r12	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    582c:	0c 93       	tst	r12		
    582e:	23 20       	jnz	$+72     	;abs 0x5876
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5830:	0c 43       	clr	r12		
    5832:	6e 92       	cmp.b	#4,	r14	;r2 As==10
    5834:	dc 24       	jz	$+442    	;abs 0x59ee
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5836:	0c 93       	tst	r12		
    5838:	14 24       	jz	$+42     	;abs 0x5862
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    583a:	0e 43       	clr	r14		
    583c:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    583e:	0f 24       	jz	$+32     	;abs 0x585e
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5840:	0e 93       	tst	r14		
    5842:	0a 20       	jnz	$+22     	;abs 0x5858
        
        // grava ch7 offset 
        ValorAux.f = PPMOffset[CH7_CH];
        i2c_write16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
        
        delayms(100);
    5844:	4f 43       	clr.b	r15		
    5846:	d9 96 01 00 	cmp.b	1(r6),	1(r9)	;0x0001(r6), 0x0001(r9)
    584a:	01 00 
    584c:	01 24       	jz	$+4      	;abs 0x5850
    584e:	5f 43       	mov.b	#1,	r15	;r3 As==01
    5850:	c9 4f 01 00 	mov.b	r15,	1(r9)	;0x0001(r9)
        
    5854:	0d 49       	mov	r9,	r13	
    5856:	cd 3c       	jmp	$+412    	;abs 0x59f2
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
            break;
    5858:	3d 40 d0 5d 	mov	#24016,	r13	;#0x5dd0
            if(ChannelInput[PITCH_CH] > 2500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
    585c:	ca 3c       	jmp	$+406    	;abs 0x59f2
    585e:	1e 43       	mov	#1,	r14	;r3 As==01
    5860:	ef 3f       	jmp	$-32     	;abs 0x5840
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5862:	0d 43       	clr	r13		
    5864:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    5866:	c1 24       	jz	$+388    	;abs 0x59ea
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5868:	0d 93       	tst	r13		
    586a:	11 24       	jz	$+36     	;abs 0x588e
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    586c:	0f 43       	clr	r15		
    586e:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5870:	0c 24       	jz	$+26     	;abs 0x588a
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5872:	0f 93       	tst	r15		
    5874:	f1 23       	jnz	$-28     	;abs 0x5858
        delayms(100);
        
        lcd_goto(2,2);
        printf("Params saved.");
        delayms(2000);
    }
    5876:	4f 43       	clr.b	r15		
    5878:	d9 96 01 00 	cmp.b	1(r6),	1(r9)	;0x0001(r6), 0x0001(r9)
    587c:	01 00 
    587e:	01 24       	jz	$+4      	;abs 0x5882
    5880:	5f 43       	mov.b	#1,	r15	;r3 As==01
    5882:	c6 4f 01 00 	mov.b	r15,	1(r6)	;0x0001(r6)
}
    5886:	0d 46       	mov	r6,	r13	
    5888:	b4 3c       	jmp	$+362    	;abs 0x59f2
    588a:	1f 43       	mov	#1,	r15	;r3 As==01
    588c:	f2 3f       	jmp	$-26     	;abs 0x5872
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    588e:	0d 43       	clr	r13		
    5890:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5892:	a9 24       	jz	$+340    	;abs 0x59e6
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5894:	0d 93       	tst	r13		
    5896:	d6 23       	jnz	$-82     	;abs 0x5844
            
    5898:	0e 43       	clr	r14		
    589a:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    589c:	a2 24       	jz	$+326    	;abs 0x59e2
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    589e:	0e 93       	tst	r14		
    58a0:	ea 23       	jnz	$-42     	;abs 0x5876
    ChannelInput[THROTTLE_CH] = PPMValue[THROTTLE_CH] * PPMSlope[THROTTLE_CH] + PPMOffset[THROTTLE_CH];
    ChannelInput[YAW_CH] = PPMValue[YAW_CH] * PPMSlope[YAW_CH] + PPMOffset[YAW_CH];
    ChannelInput[PITCH_CH] = PPMValue[PITCH_CH] * PPMSlope[PITCH_CH] + PPMOffset[PITCH_CH]; // pitch invertido
    ChannelInput[ROLL_CH] = PPMValue[ROLL_CH] * PPMSlope[ROLL_CH] + PPMOffset[ROLL_CH];
    ChannelInput[CH5_CH] = PPMValue[CH5_CH] * PPMSlope[CH5_CH] + PPMOffset[CH5_CH];
    ChannelInput[CH6_CH] = PPMValue[CH6_CH] * PPMSlope[CH6_CH] + PPMOffset[CH6_CH];
    58a2:	1a 49 04 00 	mov	4(r9),	r10	;0x0004(r9)
    58a6:	1b 49 06 00 	mov	6(r9),	r11	;0x0006(r9)
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
    58aa:	1c 46 04 00 	mov	4(r6),	r12	;0x0004(r6)
    58ae:	1d 46 06 00 	mov	6(r6),	r13	;0x0006(r6)
}
    58b2:	07 43       	clr	r7		
    58b4:	08 43       	clr	r8		

void load_transmitter_values(void){
    fourbytes ValorAux;

    58b6:	b1 40 1f 00 	mov	#31,	6(r1)	;#0x001f, 0x0006(r1)
    58ba:	06 00 
    if(EEPROMFound == 1){
        i2c_change_address(EEPROM_I2C_ADDR);    

        // load yaw slope e offset
    58bc:	0e 4a       	mov	r10,	r14	
    58be:	0f 4b       	mov	r11,	r15	
    58c0:	1e f3       	and	#1,	r14	;r3 As==01
    58c2:	0f f3       	and	#0,	r15	;r3 As==00
    58c4:	0e 93       	tst	r14		
    58c6:	19 24       	jz	$+52     	;abs 0x58fa
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        PPMSlope[YAW_CH] = ValorAux.f;
    58c8:	81 43 08 00 	mov	#0,	8(r1)	;r3 As==00, 0x0008(r1)
    58cc:	81 5c 02 00 	add	r12,	2(r1)	;0x0002(r1)
    58d0:	81 6d 04 00 	addc	r13,	4(r1)	;0x0004(r1)
    58d4:	1e 41 02 00 	mov	2(r1),	r14	;0x0002(r1)
    58d8:	1f 41 04 00 	mov	4(r1),	r15	;0x0004(r1)
    58dc:	0e 8c       	sub	r12,	r14	
    58de:	0f 7d       	subc	r13,	r15	
    58e0:	02 2c       	jc	$+6      	;abs 0x58e6
    58e2:	91 43 08 00 	mov	#1,	8(r1)	;r3 As==01, 0x0008(r1)
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    58e6:	1e 41 08 00 	mov	8(r1),	r14	;0x0008(r1)
    58ea:	0f 4e       	mov	r14,	r15	
    58ec:	0f 5f       	rla	r15		
    58ee:	0f 7f       	subc	r15,	r15	
    58f0:	3f e3       	inv	r15		
    58f2:	0e 57       	add	r7,	r14	
    58f4:	0f 68       	addc	r8,	r15	
    58f6:	04 5e       	add	r14,	r4	
    58f8:	05 6f       	addc	r15,	r5	
        PPMOffset[YAW_CH] = ValorAux.f;
        
    58fa:	07 57       	rla	r7		
    58fc:	08 68       	rlc	r8		
        // load throttle slope  e offset
    58fe:	3d b0 00 80 	bit	#-32768,r13	;#0x8000
    5902:	01 24       	jz	$+4      	;abs 0x5906
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    5904:	17 d3       	bis	#1,	r7	;r3 As==01
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
        PPMOffset[THROTTLE_CH] = ValorAux.f;
    5906:	0c 5c       	rla	r12		
    5908:	0d 6d       	rlc	r13		
        
    590a:	12 c3       	clrc			
    590c:	0b 10       	rrc	r11		
    590e:	0a 10       	rrc	r10		
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
}

void load_transmitter_values(void){
    fourbytes ValorAux;

    5910:	b1 53 06 00 	add	#-1,	6(r1)	;r3 As==11, 0x0006(r1)
    5914:	b1 b0 00 80 	bit	#-32768,6(r1)	;#0x8000, 0x0006(r1)
    5918:	06 00 
    591a:	d0 37       	jge	$-94     	;abs 0x58bc
    lcd_goto(0,0);
    printf("     RC inputs");
    lcd_goto(0,2);
    
    for(i = 0; i < 8; i++){
        if(!raw){
    591c:	1f 49 02 00 	mov	2(r9),	r15	;0x0002(r9)
    5920:	1f 56 02 00 	add	2(r6),	r15	;0x0002(r6)
    5924:	2d 41       	mov	@r1,	r13	
    5926:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
    592a:	4e 43       	clr.b	r14		
    592c:	d9 96 01 00 	cmp.b	1(r6),	1(r9)	;0x0001(r6), 0x0001(r9)
    5930:	01 00 
    5932:	01 24       	jz	$+4      	;abs 0x5936
    5934:	5e 43       	mov.b	#1,	r14	;r3 As==01
    5936:	2d 41       	mov	@r1,	r13	
    5938:	cd 4e 01 00 	mov.b	r14,	1(r13)	;0x0001(r13)
        }
        else{
    593c:	2f 53       	incd	r15		
    593e:	8d 4f 02 00 	mov	r15,	2(r13)	;0x0002(r13)
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
        }
        k = 21 + (8 * i); //posicao inicial em y
        if(!raw){
    5942:	35 90 00 80 	cmp	#-32768,r5	;#0x8000
    5946:	17 28       	jnc	$+48     	;abs 0x5976
            if(ChannelInput[i] > 4000){
                h=100;
    5948:	2e 41       	mov	@r1,	r14	
    594a:	9e 53 02 00 	inc	2(r14)		;0x0002(r14)
            }
    594e:	0e 44       	mov	r4,	r14	
    5950:	0f 45       	mov	r5,	r15	
    5952:	1e f3       	and	#1,	r14	;r3 As==01
    5954:	0f f3       	and	#0,	r15	;r3 As==00
    5956:	0e 93       	tst	r14		
    5958:	08 24       	jz	$+18     	;abs 0x596a
            else{
                if(ChannelInput[i] < 2001){
    595a:	12 c3       	clrc			
    595c:	11 10 04 00 	rrc	4(r1)		;0x0004(r1)
    5960:	11 10 02 00 	rrc	2(r1)		;0x0002(r1)
                    h = 0;
    5964:	b1 d0 00 80 	bis	#-32768,4(r1)	;#0x8000, 0x0004(r1)
    5968:	04 00 
                }
                else{
    596a:	12 c3       	clrc			
    596c:	05 10       	rrc	r5		
    596e:	04 10       	rrc	r4		
    5970:	35 90 00 80 	cmp	#-32768,r5	;#0x8000
    5974:	e9 2f       	jc	$-44     	;abs 0x5948
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
                }
    5976:	35 90 00 40 	cmp	#16384,	r5	;#0x4000
    597a:	13 2c       	jc	$+40     	;abs 0x59a2
            }
        }
    597c:	2f 41       	mov	@r1,	r15	
    597e:	bf 53 02 00 	add	#-1,	2(r15)	;r3 As==11, 0x0002(r15)
        else{
            if(PPMValue[i] > 4000){
    5982:	04 54       	rla	r4		
    5984:	05 65       	rlc	r5		
                h=100;
    5986:	b1 b0 00 80 	bit	#-32768,4(r1)	;#0x8000, 0x0004(r1)
    598a:	04 00 
    598c:	01 24       	jz	$+4      	;abs 0x5990
            }
    598e:	14 d3       	bis	#1,	r4	;r3 As==01
            else{
    5990:	91 51 02 00 	rla	2(r1)		;0x0002(r1)
    5994:	02 00 
    5996:	91 61 04 00 	rlc	4(r1)		;0x0004(r1)
    599a:	04 00 
    599c:	35 90 00 40 	cmp	#16384,	r5	;#0x4000
    59a0:	ed 2b       	jnc	$-36     	;abs 0x597c

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
    59a2:	0e 44       	mov	r4,	r14	
    59a4:	0f 45       	mov	r5,	r15	
    59a6:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    59aa:	0f f3       	and	#0,	r15	;r3 As==00
    59ac:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    59b0:	02 20       	jnz	$+6      	;abs 0x59b6
    59b2:	0f 93       	tst	r15		
    59b4:	0a 24       	jz	$+22     	;abs 0x59ca
void main_loop(){
    
    
}

void setup(){
    59b6:	2d 41       	mov	@r1,	r13	
    59b8:	8d 44 04 00 	mov	r4,	4(r13)	;0x0004(r13)
    59bc:	8d 45 06 00 	mov	r5,	6(r13)	;0x0006(r13)
    
    59c0:	fd 40 03 00 	mov.b	#3,	0(r13)	;#0x0003, 0x0000(r13)
    59c4:	00 00 
    clock_init();
    59c6:	2d 41       	mov	@r1,	r13	
    59c8:	14 3c       	jmp	$+42     	;abs 0x59f2
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
        }
    }   
    59ca:	44 93       	tst.b	r4		
    59cc:	06 38       	jl	$+14     	;abs 0x59da
    return 0;
}


// loop de controle
    59ce:	81 93 02 00 	tst	2(r1)		;0x0002(r1)
    59d2:	03 20       	jnz	$+8      	;abs 0x59da
    59d4:	81 93 04 00 	tst	4(r1)		;0x0004(r1)
    59d8:	ee 27       	jz	$-34     	;abs 0x59b6
void main_loop(){
    
    
    59da:	34 50 40 00 	add	#64,	r4	;#0x0040
    59de:	05 63       	adc	r5		
    59e0:	ea 3f       	jmp	$-42     	;abs 0x59b6
    59e2:	1e 43       	mov	#1,	r14	;r3 As==01
    59e4:	5c 3f       	jmp	$-326    	;abs 0x589e
    59e6:	1d 43       	mov	#1,	r13	;r3 As==01
    59e8:	55 3f       	jmp	$-340    	;abs 0x5894
    59ea:	1d 43       	mov	#1,	r13	;r3 As==01
    59ec:	3d 3f       	jmp	$-388    	;abs 0x5868
    59ee:	1c 43       	mov	#1,	r12	;r3 As==01
    59f0:	22 3f       	jmp	$-442    	;abs 0x5836
}

void setup(){
    
    clock_init();
    
    59f2:	0f 4d       	mov	r13,	r15	
    59f4:	31 50 0a 00 	add	#10,	r1	;#0x000a
    59f8:	34 41       	pop	r4		
    59fa:	35 41       	pop	r5		
    59fc:	36 41       	pop	r6		
    59fe:	37 41       	pop	r7		
    5a00:	38 41       	pop	r8		
    5a02:	39 41       	pop	r9		
    5a04:	3a 41       	pop	r10		
    5a06:	3b 41       	pop	r11		
    5a08:	30 41       	ret			

00005a0a <__divsf3>:
    5a0a:	0b 12       	push	r11		
    5a0c:	31 80 18 00 	sub	#24,	r1	;#0x0018
    5a10:	81 4e 10 00 	mov	r14,	16(r1)	;0x0010(r1)
    5a14:	81 4f 12 00 	mov	r15,	18(r1)	;0x0012(r1)
    5a18:	81 4c 14 00 	mov	r12,	20(r1)	;0x0014(r1)
    5a1c:	81 4d 16 00 	mov	r13,	22(r1)	;0x0016(r1)
    5a20:	0e 41       	mov	r1,	r14	
    5a22:	0f 41       	mov	r1,	r15	
    5a24:	3f 50 10 00 	add	#16,	r15	;#0x0010
    5a28:	b0 12 88 5f 	call	#0x5f88	
    5a2c:	0b 41       	mov	r1,	r11	
    5a2e:	3b 52       	add	#8,	r11	;r2 As==11
    5a30:	0e 4b       	mov	r11,	r14	
    5a32:	0f 41       	mov	r1,	r15	
    5a34:	3f 50 14 00 	add	#20,	r15	;#0x0014
    5a38:	b0 12 88 5f 	call	#0x5f88	
    5a3c:	0e 4b       	mov	r11,	r14	
    5a3e:	0f 41       	mov	r1,	r15	
    5a40:	b0 12 50 5a 	call	#0x5a50	
    5a44:	b0 12 d8 5d 	call	#0x5dd8	
    5a48:	31 50 18 00 	add	#24,	r1	;#0x0018
    5a4c:	3b 41       	pop	r11		
    5a4e:	30 41       	ret			

00005a50 <_fpdiv_parts>:

        //if(1){
        if(StatusFlags[0] != 0){
            printf("Calibrando radio...\n");
            delayms(4000);
            calibrate_radio();
    5a50:	0b 12       	push	r11		
    5a52:	0a 12       	push	r10		
    5a54:	09 12       	push	r9		
    5a56:	08 12       	push	r8		
    5a58:	07 12       	push	r7		
    5a5a:	06 12       	push	r6		
    5a5c:	05 12       	push	r5		
    5a5e:	0b 4f       	mov	r15,	r11	

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5a60:	0c 43       	clr	r12		
    5a62:	6d 4f       	mov.b	@r15,	r13	
    5a64:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    5a66:	01 2c       	jc	$+4      	;abs 0x5a6a
    5a68:	1c 43       	mov	#1,	r12	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5a6a:	0c 93       	tst	r12		
    5a6c:	16 20       	jnz	$+46     	;abs 0x5a9a
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5a6e:	0a 43       	clr	r10		
    5a70:	6c 4e       	mov.b	@r14,	r12	
    5a72:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    5a74:	01 2c       	jc	$+4      	;abs 0x5a78
    5a76:	1a 43       	mov	#1,	r10	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5a78:	0a 93       	tst	r10		
    5a7a:	77 20       	jnz	$+240    	;abs 0x5b6a
        }
    }
    else{
        color_fore = RED;
        printf("EEPROM not found\n");
        color_fore = LIME;
    5a7c:	db ee 01 00 	xor.b	1(r14),	1(r11)	;0x0001(r14), 0x0001(r11)
    5a80:	01 00 
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5a82:	0f 43       	clr	r15		
    5a84:	6d 92       	cmp.b	#4,	r13	;r2 As==10
    5a86:	6f 24       	jz	$+224    	;abs 0x5b66
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5a88:	0f 93       	tst	r15		
    5a8a:	05 20       	jnz	$+12     	;abs 0x5a96
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5a8c:	0f 43       	clr	r15		
    5a8e:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    5a90:	68 24       	jz	$+210    	;abs 0x5b62
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5a92:	0f 93       	tst	r15		
    5a94:	07 24       	jz	$+16     	;abs 0x5aa4
        printf("EEPROM not found\n");
        color_fore = LIME;
    }
    analog_graph_clear_all();    
    
    lcd_drawline(10,80,90,90,RED);
    5a96:	4d 9c       	cmp.b	r12,	r13	
    5a98:	02 24       	jz	$+6      	;abs 0x5a9e
    5a9a:	0e 4b       	mov	r11,	r14	
    5a9c:	66 3c       	jmp	$+206    	;abs 0x5b6a
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
            break;
    5a9e:	3e 40 d0 5d 	mov	#24016,	r14	;#0x5dd0
            if(ChannelInput[PITCH_CH] > 2500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
    5aa2:	63 3c       	jmp	$+200    	;abs 0x5b6a
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5aa4:	0f 43       	clr	r15		
    5aa6:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    5aa8:	5a 24       	jz	$+182    	;abs 0x5b5e
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5aaa:	0f 93       	tst	r15		
    5aac:	07 24       	jz	$+16     	;abs 0x5abc
    
    delayms(1500);

    SetupDone = 1;
}

    5aae:	8b 43 04 00 	mov	#0,	4(r11)	;r3 As==00, 0x0004(r11)
    5ab2:	8b 43 06 00 	mov	#0,	6(r11)	;r3 As==00, 0x0006(r11)
void analog_graph_clear_all(void){
    5ab6:	8b 43 02 00 	mov	#0,	2(r11)	;r3 As==00, 0x0002(r11)
    int i;
    5aba:	ef 3f       	jmp	$-32     	;abs 0x5a9a
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5abc:	0f 43       	clr	r15		
    5abe:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    5ac0:	4c 24       	jz	$+154    	;abs 0x5b5a
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5ac2:	0f 93       	tst	r15		
    5ac4:	03 24       	jz	$+8      	;abs 0x5acc
void analog_graph_clear_all(void){
    int i;
    for(i = 0; i < 8; i++){
        analog_graph_clear(i);
    }
}
    5ac6:	eb 42 00 00 	mov.b	#4,	0(r11)	;r2 As==10, 0x0000(r11)

    5aca:	e7 3f       	jmp	$-48     	;abs 0x5a9a
    5acc:	1d 4b 02 00 	mov	2(r11),	r13	;0x0002(r11)
    5ad0:	1d 8e 02 00 	sub	2(r14),	r13	;0x0002(r14)
    5ad4:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    5ad8:	19 4b 04 00 	mov	4(r11),	r9	;0x0004(r11)
    5adc:	1a 4b 06 00 	mov	6(r11),	r10	;0x0006(r11)
    5ae0:	17 4e 04 00 	mov	4(r14),	r7	;0x0004(r14)
    5ae4:	18 4e 06 00 	mov	6(r14),	r8	;0x0006(r14)
    5ae8:	0e 49       	mov	r9,	r14	
    5aea:	0f 4a       	mov	r10,	r15	
    5aec:	0e 87       	sub	r7,	r14	
    5aee:	0f 78       	subc	r8,	r15	
    5af0:	05 2c       	jc	$+12     	;abs 0x5afc
    5af2:	09 59       	rla	r9		
    5af4:	0a 6a       	rlc	r10		
    5af6:	3d 53       	add	#-1,	r13	;r3 As==11
    5af8:	8b 4d 02 00 	mov	r13,	2(r11)	;0x0002(r11)
    5afc:	0e 43       	clr	r14		
    5afe:	3f 40 00 40 	mov	#16384,	r15	;#0x4000
    5b02:	05 43       	clr	r5		
    5b04:	06 43       	clr	r6		
    5b06:	0c 49       	mov	r9,	r12	
    5b08:	0d 4a       	mov	r10,	r13	
    5b0a:	0c 87       	sub	r7,	r12	
    5b0c:	0d 78       	subc	r8,	r13	
    5b0e:	04 28       	jnc	$+10     	;abs 0x5b18
    5b10:	05 de       	bis	r14,	r5	
    5b12:	06 df       	bis	r15,	r6	
    5b14:	09 87       	sub	r7,	r9	
    5b16:	0a 78       	subc	r8,	r10	
    5b18:	12 c3       	clrc			
    5b1a:	0f 10       	rrc	r15		
    5b1c:	0e 10       	rrc	r14		
    5b1e:	09 59       	rla	r9		
    5b20:	0a 6a       	rlc	r10		
    5b22:	0e 93       	tst	r14		
    5b24:	f0 23       	jnz	$-30     	;abs 0x5b06
    5b26:	0f 93       	tst	r15		
    5b28:	ee 23       	jnz	$-34     	;abs 0x5b06
    5b2a:	0e 45       	mov	r5,	r14	
    5b2c:	0f 46       	mov	r6,	r15	
    5b2e:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    5b32:	0f f3       	and	#0,	r15	;r3 As==00
    5b34:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    5b38:	02 20       	jnz	$+6      	;abs 0x5b3e
    5b3a:	0f 93       	tst	r15		
    5b3c:	05 24       	jz	$+12     	;abs 0x5b48
    5b3e:	8b 45 04 00 	mov	r5,	4(r11)	;0x0004(r11)
    5b42:	8b 46 06 00 	mov	r6,	6(r11)	;0x0006(r11)
    5b46:	a9 3f       	jmp	$-172    	;abs 0x5a9a
    5b48:	45 93       	tst.b	r5		
    5b4a:	03 38       	jl	$+8      	;abs 0x5b52
    5b4c:	0a d9       	bis	r9,	r10	
    5b4e:	0a 93       	tst	r10		
    5b50:	f6 27       	jz	$-18     	;abs 0x5b3e
    5b52:	35 50 40 00 	add	#64,	r5	;#0x0040
    5b56:	06 63       	adc	r6		
    5b58:	f2 3f       	jmp	$-26     	;abs 0x5b3e
    5b5a:	1f 43       	mov	#1,	r15	;r3 As==01
    5b5c:	b2 3f       	jmp	$-154    	;abs 0x5ac2
    5b5e:	1f 43       	mov	#1,	r15	;r3 As==01
    5b60:	a4 3f       	jmp	$-182    	;abs 0x5aaa
    5b62:	1f 43       	mov	#1,	r15	;r3 As==01
    5b64:	96 3f       	jmp	$-210    	;abs 0x5a92
    5b66:	1f 43       	mov	#1,	r15	;r3 As==01
    5b68:	8f 3f       	jmp	$-224    	;abs 0x5a88
    5b6a:	0f 4e       	mov	r14,	r15	
    5b6c:	35 41       	pop	r5		
    5b6e:	36 41       	pop	r6		
    5b70:	37 41       	pop	r7		
    5b72:	38 41       	pop	r8		
    5b74:	39 41       	pop	r9		
    5b76:	3a 41       	pop	r10		
    5b78:	3b 41       	pop	r11		
    5b7a:	30 41       	ret			

00005b7c <__gtsf2>:
    5b7c:	0b 12       	push	r11		
    5b7e:	31 80 18 00 	sub	#24,	r1	;#0x0018
    5b82:	81 4e 10 00 	mov	r14,	16(r1)	;0x0010(r1)
    5b86:	81 4f 12 00 	mov	r15,	18(r1)	;0x0012(r1)
    5b8a:	81 4c 14 00 	mov	r12,	20(r1)	;0x0014(r1)
    5b8e:	81 4d 16 00 	mov	r13,	22(r1)	;0x0016(r1)
    5b92:	0e 41       	mov	r1,	r14	
    5b94:	0f 41       	mov	r1,	r15	
    5b96:	3f 50 10 00 	add	#16,	r15	;#0x0010
    5b9a:	b0 12 88 5f 	call	#0x5f88	
    5b9e:	0b 41       	mov	r1,	r11	
    5ba0:	3b 52       	add	#8,	r11	;r2 As==11
    5ba2:	0e 4b       	mov	r11,	r14	
    5ba4:	0f 41       	mov	r1,	r15	
    5ba6:	3f 50 14 00 	add	#20,	r15	;#0x0014
    5baa:	b0 12 88 5f 	call	#0x5f88	

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5bae:	0f 43       	clr	r15		
    5bb0:	e1 93 00 00 	cmp.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    5bb4:	01 2c       	jc	$+4      	;abs 0x5bb8
    5bb6:	1f 43       	mov	#1,	r15	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5bb8:	0f 93       	tst	r15		
    5bba:	07 20       	jnz	$+16     	;abs 0x5bca
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5bbc:	0f 43       	clr	r15		
    5bbe:	e1 93 08 00 	cmp.b	#2,	8(r1)	;r3 As==10, 0x0008(r1)
    5bc2:	01 2c       	jc	$+4      	;abs 0x5bc6
    5bc4:	1f 43       	mov	#1,	r15	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5bc6:	0f 93       	tst	r15		
    5bc8:	02 24       	jz	$+6      	;abs 0x5bce
    5bca:	3f 43       	mov	#-1,	r15	;r3 As==11
    5bcc:	04 3c       	jmp	$+10     	;abs 0x5bd6
    5bce:	0e 4b       	mov	r11,	r14	
    5bd0:	0f 41       	mov	r1,	r15	
    5bd2:	b0 12 7e 60 	call	#0x607e	
    5bd6:	31 50 18 00 	add	#24,	r1	;#0x0018
    5bda:	3b 41       	pop	r11		
    5bdc:	30 41       	ret			

00005bde <__gesf2>:
    5bde:	0b 12       	push	r11		
    5be0:	31 80 18 00 	sub	#24,	r1	;#0x0018
    5be4:	81 4e 10 00 	mov	r14,	16(r1)	;0x0010(r1)
    5be8:	81 4f 12 00 	mov	r15,	18(r1)	;0x0012(r1)
    5bec:	81 4c 14 00 	mov	r12,	20(r1)	;0x0014(r1)
    5bf0:	81 4d 16 00 	mov	r13,	22(r1)	;0x0016(r1)
    5bf4:	0e 41       	mov	r1,	r14	
    5bf6:	0f 41       	mov	r1,	r15	
    5bf8:	3f 50 10 00 	add	#16,	r15	;#0x0010
    5bfc:	b0 12 88 5f 	call	#0x5f88	
    5c00:	0b 41       	mov	r1,	r11	
    5c02:	3b 52       	add	#8,	r11	;r2 As==11
    5c04:	0e 4b       	mov	r11,	r14	
    5c06:	0f 41       	mov	r1,	r15	
    5c08:	3f 50 14 00 	add	#20,	r15	;#0x0014
    5c0c:	b0 12 88 5f 	call	#0x5f88	

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5c10:	0f 43       	clr	r15		
    5c12:	e1 93 00 00 	cmp.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    5c16:	01 2c       	jc	$+4      	;abs 0x5c1a
    5c18:	1f 43       	mov	#1,	r15	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5c1a:	0f 93       	tst	r15		
    5c1c:	07 20       	jnz	$+16     	;abs 0x5c2c
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5c1e:	0f 43       	clr	r15		
    5c20:	e1 93 08 00 	cmp.b	#2,	8(r1)	;r3 As==10, 0x0008(r1)
    5c24:	01 2c       	jc	$+4      	;abs 0x5c28
    5c26:	1f 43       	mov	#1,	r15	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5c28:	0f 93       	tst	r15		
    5c2a:	02 24       	jz	$+6      	;abs 0x5c30
    5c2c:	3f 43       	mov	#-1,	r15	;r3 As==11
    5c2e:	04 3c       	jmp	$+10     	;abs 0x5c38
    5c30:	0e 4b       	mov	r11,	r14	
    5c32:	0f 41       	mov	r1,	r15	
    5c34:	b0 12 7e 60 	call	#0x607e	
    5c38:	31 50 18 00 	add	#24,	r1	;#0x0018
    5c3c:	3b 41       	pop	r11		
    5c3e:	30 41       	ret			

00005c40 <__ltsf2>:
    5c40:	0b 12       	push	r11		
    5c42:	31 80 18 00 	sub	#24,	r1	;#0x0018
    5c46:	81 4e 10 00 	mov	r14,	16(r1)	;0x0010(r1)
    5c4a:	81 4f 12 00 	mov	r15,	18(r1)	;0x0012(r1)
    5c4e:	81 4c 14 00 	mov	r12,	20(r1)	;0x0014(r1)
    5c52:	81 4d 16 00 	mov	r13,	22(r1)	;0x0016(r1)
    5c56:	0e 41       	mov	r1,	r14	
    5c58:	0f 41       	mov	r1,	r15	
    5c5a:	3f 50 10 00 	add	#16,	r15	;#0x0010
    5c5e:	b0 12 88 5f 	call	#0x5f88	
    5c62:	0b 41       	mov	r1,	r11	
    5c64:	3b 52       	add	#8,	r11	;r2 As==11
    5c66:	0e 4b       	mov	r11,	r14	
    5c68:	0f 41       	mov	r1,	r15	
    5c6a:	3f 50 14 00 	add	#20,	r15	;#0x0014
    5c6e:	b0 12 88 5f 	call	#0x5f88	

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5c72:	0f 43       	clr	r15		
    5c74:	e1 93 00 00 	cmp.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    5c78:	01 2c       	jc	$+4      	;abs 0x5c7c
    5c7a:	1f 43       	mov	#1,	r15	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5c7c:	0f 93       	tst	r15		
    5c7e:	07 20       	jnz	$+16     	;abs 0x5c8e
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5c80:	0f 43       	clr	r15		
    5c82:	e1 93 08 00 	cmp.b	#2,	8(r1)	;r3 As==10, 0x0008(r1)
    5c86:	01 2c       	jc	$+4      	;abs 0x5c8a
    5c88:	1f 43       	mov	#1,	r15	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5c8a:	0f 93       	tst	r15		
    5c8c:	02 24       	jz	$+6      	;abs 0x5c92
    5c8e:	1f 43       	mov	#1,	r15	;r3 As==01
    5c90:	04 3c       	jmp	$+10     	;abs 0x5c9a
    5c92:	0e 4b       	mov	r11,	r14	
    5c94:	0f 41       	mov	r1,	r15	
    5c96:	b0 12 7e 60 	call	#0x607e	
    5c9a:	31 50 18 00 	add	#24,	r1	;#0x0018
    5c9e:	3b 41       	pop	r11		
    5ca0:	30 41       	ret			

00005ca2 <__floatsisf>:
    5ca2:	0b 12       	push	r11		
    5ca4:	31 82       	sub	#8,	r1	;r2 As==11
    5ca6:	0d 4e       	mov	r14,	r13	
    5ca8:	0e 4f       	mov	r15,	r14	
    5caa:	f1 40 03 00 	mov.b	#3,	0(r1)	;#0x0003, 0x0000(r1)
    5cae:	00 00 
    5cb0:	0f 4e       	mov	r14,	r15	
    5cb2:	0f 5f       	rla	r15		
    5cb4:	0f 43       	clr	r15		
    5cb6:	0f 6f       	rlc	r15		
    5cb8:	c1 4f 01 00 	mov.b	r15,	1(r1)	;0x0001(r1)
    5cbc:	0d 93       	tst	r13		
    5cbe:	08 20       	jnz	$+18     	;abs 0x5cd0
    5cc0:	0e 93       	tst	r14		
    5cc2:	06 20       	jnz	$+14     	;abs 0x5cd0
    5cc4:	e1 43 00 00 	mov.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    5cc8:	0f 41       	mov	r1,	r15	
    5cca:	b0 12 d8 5d 	call	#0x5dd8	
    5cce:	2f 3c       	jmp	$+96     	;abs 0x5d2e
    5cd0:	b1 40 1e 00 	mov	#30,	2(r1)	;#0x001e, 0x0002(r1)
    5cd4:	02 00 
    5cd6:	4f 93       	tst.b	r15		
    5cd8:	09 24       	jz	$+20     	;abs 0x5cec
    5cda:	0d 93       	tst	r13		
    5cdc:	03 20       	jnz	$+8      	;abs 0x5ce4
    5cde:	3e 90 00 80 	cmp	#-32768,r14	;#0x8000
    5ce2:	22 24       	jz	$+70     	;abs 0x5d28
    5ce4:	3d e3       	inv	r13		
    5ce6:	3e e3       	inv	r14		
    5ce8:	1d 53       	inc	r13		
    5cea:	0e 63       	adc	r14		
    5cec:	81 4d 04 00 	mov	r13,	4(r1)	;0x0004(r1)
    5cf0:	81 4e 06 00 	mov	r14,	6(r1)	;0x0006(r1)
    5cf4:	1c 41 04 00 	mov	4(r1),	r12	;0x0004(r1)
    5cf8:	1d 41 06 00 	mov	6(r1),	r13	;0x0006(r1)
    5cfc:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    5d00:	e3 2f       	jc	$-56     	;abs 0x5cc8
    5d02:	1b 41 02 00 	mov	2(r1),	r11	;0x0002(r1)
    5d06:	0e 4c       	mov	r12,	r14	
    5d08:	0f 4d       	mov	r13,	r15	
    5d0a:	0e 5e       	rla	r14		
    5d0c:	0f 6f       	rlc	r15		
    5d0e:	3b 53       	add	#-1,	r11	;r3 As==11
    5d10:	0c 4e       	mov	r14,	r12	
    5d12:	0d 4f       	mov	r15,	r13	
    5d14:	3f 90 00 40 	cmp	#16384,	r15	;#0x4000
    5d18:	f6 2b       	jnc	$-18     	;abs 0x5d06
    5d1a:	81 4b 02 00 	mov	r11,	2(r1)	;0x0002(r1)
    5d1e:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    5d22:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    5d26:	d0 3f       	jmp	$-94     	;abs 0x5cc8
    5d28:	0e 43       	clr	r14		
    5d2a:	3f 40 00 cf 	mov	#-12544,r15	;#0xcf00
    5d2e:	31 52       	add	#8,	r1	;r2 As==11
    5d30:	3b 41       	pop	r11		
    5d32:	30 41       	ret			

00005d34 <__fixsfsi>:
    5d34:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    5d38:	81 4e 08 00 	mov	r14,	8(r1)	;0x0008(r1)
    5d3c:	81 4f 0a 00 	mov	r15,	10(r1)	;0x000a(r1)
    5d40:	0e 41       	mov	r1,	r14	
    5d42:	0f 41       	mov	r1,	r15	
    5d44:	3f 52       	add	#8,	r15	;r2 As==11
    5d46:	b0 12 88 5f 	call	#0x5f88	
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5d4a:	0e 43       	clr	r14		
    5d4c:	6f 41       	mov.b	@r1,	r15	
    5d4e:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    5d50:	3a 24       	jz	$+118    	;abs 0x5dc6
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5d52:	0e 93       	tst	r14		
    5d54:	33 20       	jnz	$+104    	;abs 0x5dbc

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5d56:	0e 43       	clr	r14		
    5d58:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    5d5a:	01 2c       	jc	$+4      	;abs 0x5d5e
    5d5c:	1e 43       	mov	#1,	r14	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5d5e:	0e 93       	tst	r14		
    5d60:	2d 20       	jnz	$+92     	;abs 0x5dbc
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5d62:	0e 43       	clr	r14		
    5d64:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    5d66:	2d 24       	jz	$+92     	;abs 0x5dc2
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5d68:	0e 93       	tst	r14		
    5d6a:	07 20       	jnz	$+16     	;abs 0x5d7a
    5d6c:	1d 41 02 00 	mov	2(r1),	r13	;0x0002(r1)
    5d70:	0d 93       	tst	r13		
    5d72:	24 38       	jl	$+74     	;abs 0x5dbc
    5d74:	3d 90 1f 00 	cmp	#31,	r13	;#0x001f
    5d78:	0b 38       	jl	$+24     	;abs 0x5d90
    5d7a:	c1 93 01 00 	tst.b	1(r1)		;0x0001(r1)
    5d7e:	04 24       	jz	$+10     	;abs 0x5d88
    5d80:	0e 43       	clr	r14		
    5d82:	3f 40 00 80 	mov	#-32768,r15	;#0x8000
    5d86:	21 3c       	jmp	$+68     	;abs 0x5dca
    5d88:	3e 43       	mov	#-1,	r14	;r3 As==11
    5d8a:	3f 40 ff 7f 	mov	#32767,	r15	;#0x7fff
    5d8e:	1d 3c       	jmp	$+60     	;abs 0x5dca
    5d90:	3c 40 1e 00 	mov	#30,	r12	;#0x001e
    5d94:	1e 41 04 00 	mov	4(r1),	r14	;0x0004(r1)
    5d98:	1f 41 06 00 	mov	6(r1),	r15	;0x0006(r1)
    5d9c:	0c 8d       	sub	r13,	r12	
    5d9e:	0c 93       	tst	r12		
    5da0:	05 24       	jz	$+12     	;abs 0x5dac
    5da2:	12 c3       	clrc			
    5da4:	0f 10       	rrc	r15		
    5da6:	0e 10       	rrc	r14		
    5da8:	1c 83       	dec	r12		
    5daa:	fb 23       	jnz	$-8      	;abs 0x5da2
    5dac:	c1 93 01 00 	tst.b	1(r1)		;0x0001(r1)
    5db0:	0c 24       	jz	$+26     	;abs 0x5dca
    5db2:	3e e3       	inv	r14		
    5db4:	3f e3       	inv	r15		
    5db6:	1e 53       	inc	r14		
    5db8:	0f 63       	adc	r15		
    5dba:	07 3c       	jmp	$+16     	;abs 0x5dca
    5dbc:	0e 43       	clr	r14		
    5dbe:	0f 43       	clr	r15		
    5dc0:	04 3c       	jmp	$+10     	;abs 0x5dca
    5dc2:	1e 43       	mov	#1,	r14	;r3 As==01
    5dc4:	d1 3f       	jmp	$-92     	;abs 0x5d68
    5dc6:	1e 43       	mov	#1,	r14	;r3 As==01
    5dc8:	c4 3f       	jmp	$-118    	;abs 0x5d52
    5dca:	31 50 0c 00 	add	#12,	r1	;#0x000c
    5dce:	30 41       	ret			

00005dd0 <__thenan_sf>:
	...

00005dd8 <__pack_f>:
        case PROCESS_OPTION:
            process_option();
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    5dd8:	0b 12       	push	r11		
    5dda:	0a 12       	push	r10		
    5ddc:	09 12       	push	r9		
    5dde:	08 12       	push	r8		
    5de0:	07 12       	push	r7		
    5de2:	21 82       	sub	#4,	r1	;r2 As==10
    }
}
    5de4:	1c 4f 04 00 	mov	4(r15),	r12	;0x0004(r15)
    5de8:	1d 4f 06 00 	mov	6(r15),	r13	;0x0006(r15)

    5dec:	59 4f 01 00 	mov.b	1(r15),	r9	;0x0001(r15)
void process_option(){
    5df0:	0a 43       	clr	r10		

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5df2:	0b 43       	clr	r11		
    5df4:	6e 4f       	mov.b	@r15,	r14	
    5df6:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5df8:	01 2c       	jc	$+4      	;abs 0x5dfc
    5dfa:	1b 43       	mov	#1,	r11	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5dfc:	0b 93       	tst	r11		
    5dfe:	05 24       	jz	$+12     	;abs 0x5e0a

void process_option(){
    int i;
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
    5e00:	3a 40 ff 00 	mov	#255,	r10	;#0x00ff
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
    5e04:	3d d0 10 00 	bis	#16,	r13	;#0x0010
    5e08:	8e 3c       	jmp	$+286    	;abs 0x5f26
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5e0a:	0b 43       	clr	r11		
    5e0c:	6e 92       	cmp.b	#4,	r14	;r2 As==10
    5e0e:	89 24       	jz	$+276    	;abs 0x5f22
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5e10:	0b 93       	tst	r11		
    5e12:	62 20       	jnz	$+198    	;abs 0x5ed8
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5e14:	0b 43       	clr	r11		
    5e16:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    5e18:	82 24       	jz	$+262    	;abs 0x5f1e
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5e1a:	0b 93       	tst	r11		
    5e1c:	5f 20       	jnz	$+192    	;abs 0x5edc
            for(i = 5; i >= 0; i--){ // contagem regressiva
                lcd_goto(8,8);
                printf("%d", i);
                delayms(1000);
            }
            MotorArmed = TRUE;
    5e1e:	0c 93       	tst	r12		
    5e20:	02 20       	jnz	$+6      	;abs 0x5e26
    5e22:	0d 93       	tst	r13		
    5e24:	80 24       	jz	$+258    	;abs 0x5f26
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
            break;
            
        case INITIAL_SETTINGS:
    5e26:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    5e2a:	3f 90 82 ff 	cmp	#-126,	r15	;#0xff82
    5e2e:	51 34       	jge	$+164    	;abs 0x5ed2
            
            // seta o flag initial setup
            break;          
    }
    
    if(ChannelInput[CH7_CH] > 3500){
    5e30:	38 40 82 ff 	mov	#-126,	r8	;#0xff82
    5e34:	08 8f       	sub	r15,	r8	
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        analog_graph_clear_all();
        lcd_clear(BLACK);
    5e36:	38 90 1a 00 	cmp	#26,	r8	;#0x001a
    5e3a:	29 38       	jl	$+84     	;abs 0x5e8e
    }
}

    5e3c:	0c 43       	clr	r12		
    5e3e:	0d 43       	clr	r13		
    int i, k;
    for(i = 0; i < 8; i++){
        if((1 << i) & AnalogChecked){
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
    5e40:	0e 4c       	mov	r12,	r14	
    5e42:	0f 4d       	mov	r13,	r15	
    5e44:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    5e48:	0f f3       	and	#0,	r15	;r3 As==00
    5e4a:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    5e4e:	02 20       	jnz	$+6      	;abs 0x5e54
    5e50:	0f 93       	tst	r15		
    5e52:	17 24       	jz	$+48     	;abs 0x5e82
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
        }
    }
    
}

    5e54:	3c 50 3f 00 	add	#63,	r12	;#0x003f
    5e58:	0d 63       	adc	r13		
void analog_graph_clear(int n){
    int i;
    for(i = 0; i < GRAPH_LENGHT; i++){
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
    5e5a:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    5e5e:	01 28       	jnc	$+4      	;abs 0x5e62
        AnalogGraph[n][i] = 0;
    }
    5e60:	1a 43       	mov	#1,	r10	;r3 As==01
                if(ChannelInput[ROLL_CH] < 2500){
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
            
            // check uncheck
    5e62:	12 c3       	clrc			
    5e64:	0d 10       	rrc	r13		
    5e66:	0c 10       	rrc	r12		
    5e68:	0d 11       	rra	r13		
    5e6a:	0c 10       	rrc	r12		
    5e6c:	0d 11       	rra	r13		
    5e6e:	0c 10       	rrc	r12		
    5e70:	0d 11       	rra	r13		
    5e72:	0c 10       	rrc	r12		
    5e74:	0d 11       	rra	r13		
    5e76:	0c 10       	rrc	r12		
    5e78:	0d 11       	rra	r13		
    5e7a:	0c 10       	rrc	r12		
    5e7c:	0d 11       	rra	r13		
    5e7e:	0c 10       	rrc	r12		
    5e80:	52 3c       	jmp	$+166    	;abs 0x5f26
        if((1 << i) & AnalogChecked){
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
            }
    5e82:	4c 93       	tst.b	r12		
    5e84:	ea 37       	jge	$-42     	;abs 0x5e5a
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
    5e86:	3c 50 40 00 	add	#64,	r12	;#0x0040
    5e8a:	0d 63       	adc	r13		
    5e8c:	e6 3f       	jmp	$-50     	;abs 0x5e5a
}

void draw_analog_graph(void){
    int i, k;
    for(i = 0; i < 8; i++){
        if((1 << i) & AnalogChecked){
    5e8e:	07 43       	clr	r7		
    5e90:	1e 43       	mov	#1,	r14	;r3 As==01
    5e92:	0f 43       	clr	r15		
    5e94:	0b 48       	mov	r8,	r11	
    5e96:	0b 93       	tst	r11		
    5e98:	04 24       	jz	$+10     	;abs 0x5ea2
    5e9a:	0e 5e       	rla	r14		
    5e9c:	0f 6f       	rlc	r15		
    5e9e:	1b 83       	dec	r11		
    5ea0:	fc 23       	jnz	$-6      	;abs 0x5e9a
    5ea2:	3e 53       	add	#-1,	r14	;r3 As==11
    5ea4:	3f 63       	addc	#-1,	r15	;r3 As==11
    5ea6:	0e fc       	and	r12,	r14	
    5ea8:	0f fd       	and	r13,	r15	
    5eaa:	0f de       	bis	r14,	r15	
    5eac:	0f 93       	tst	r15		
    5eae:	01 24       	jz	$+4      	;abs 0x5eb2
    5eb0:	17 43       	mov	#1,	r7	;r3 As==01
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
    5eb2:	0f 48       	mov	r8,	r15	
    5eb4:	0f 93       	tst	r15		
    5eb6:	05 24       	jz	$+12     	;abs 0x5ec2
    5eb8:	12 c3       	clrc			
    5eba:	0d 10       	rrc	r13		
    5ebc:	0c 10       	rrc	r12		
    5ebe:	1f 83       	dec	r15		
    5ec0:	fb 23       	jnz	$-8      	;abs 0x5eb8
    5ec2:	0e 47       	mov	r7,	r14	
    5ec4:	0f 4e       	mov	r14,	r15	
    5ec6:	0f 5f       	rla	r15		
    5ec8:	0f 7f       	subc	r15,	r15	
    5eca:	3f e3       	inv	r15		
    5ecc:	0c de       	bis	r14,	r12	
    5ece:	0d df       	bis	r15,	r13	
    5ed0:	b7 3f       	jmp	$-144    	;abs 0x5e40
        AnalogGraph[n][i] = 0;
    }
}

void process_analog_menu(void){
    draw_analog_graph();
    5ed2:	3f 90 80 00 	cmp	#128,	r15	;#0x0080
    5ed6:	05 38       	jl	$+12     	;abs 0x5ee2
    switch(MenuAnalog){
        case DISPLAY:
    5ed8:	3a 40 ff 00 	mov	#255,	r10	;#0x00ff
            lcd_goto(4,0);
    5edc:	0c 43       	clr	r12		
    5ede:	0d 43       	clr	r13		
    5ee0:	22 3c       	jmp	$+70     	;abs 0x5f26
            printf("ANALOG GRAPH   ");
            
            lcd_goto(0,14);
            printf("DISPLAY             ");
    5ee2:	0a 4f       	mov	r15,	r10	
    5ee4:	3a 50 7f 00 	add	#127,	r10	;#0x007f

            refresh_analog_menu();
            MenuAnalog = SELECT;
            break;
    5ee8:	0e 4c       	mov	r12,	r14	
    5eea:	0f 4d       	mov	r13,	r15	
    5eec:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    5ef0:	0f f3       	and	#0,	r15	;r3 As==00
    5ef2:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    5ef6:	02 20       	jnz	$+6      	;abs 0x5efc
    5ef8:	0f 93       	tst	r15		
    5efa:	0b 24       	jz	$+24     	;abs 0x5f12
            printf("SELECT            ");

            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
            }
    5efc:	3c 50 3f 00 	add	#63,	r12	;#0x003f
    5f00:	0d 63       	adc	r13		
            else{
                if(ChannelInput[ROLL_CH] < 2500){
    5f02:	3d 90 00 80 	cmp	#-32768,r13	;#0x8000
    5f06:	ad 2b       	jnc	$-164    	;abs 0x5e62
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
    5f08:	12 c3       	clrc			
    5f0a:	0d 10       	rrc	r13		
    5f0c:	0c 10       	rrc	r12		
            }
    5f0e:	1a 53       	inc	r10		
    5f10:	a8 3f       	jmp	$-174    	;abs 0x5e62

            refresh_analog_menu();
            MenuAnalog = SELECT;
            break;
        case SELECT:
            lcd_goto(0,14);
    5f12:	4c 93       	tst.b	r12		
    5f14:	f6 37       	jge	$-18     	;abs 0x5f02
            printf("SELECT            ");
    5f16:	3c 50 40 00 	add	#64,	r12	;#0x0040
    5f1a:	0d 63       	adc	r13		
    5f1c:	f2 3f       	jmp	$-26     	;abs 0x5f02
    5f1e:	1b 43       	mov	#1,	r11	;r3 As==01
    5f20:	7c 3f       	jmp	$-262    	;abs 0x5e1a
    5f22:	1b 43       	mov	#1,	r11	;r3 As==01
    5f24:	75 3f       	jmp	$-276    	;abs 0x5e10
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
                }
            }
    5f26:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    5f2a:	4e 4d       	mov.b	r13,	r14	
    5f2c:	7e f0 7f 00 	and.b	#127,	r14	;#0x007f
    5f30:	5f 41 02 00 	mov.b	2(r1),	r15	;0x0002(r1)
    5f34:	7f f0 80 ff 	and.b	#-128,	r15	;#0xff80
    5f38:	4f de       	bis.b	r14,	r15	
    5f3a:	c1 4f 02 00 	mov.b	r15,	2(r1)	;0x0002(r1)
            
    5f3e:	0f 4a       	mov	r10,	r15	
    5f40:	7f f3       	and.b	#-1,	r15	;r3 As==11
    5f42:	0f 5f       	rla	r15		
    5f44:	0f 5f       	rla	r15		
    5f46:	0f 5f       	rla	r15		
    5f48:	0f 5f       	rla	r15		
    5f4a:	0f 5f       	rla	r15		
    5f4c:	0f 5f       	rla	r15		
    5f4e:	0f 5f       	rla	r15		
    5f50:	1e 41 02 00 	mov	2(r1),	r14	;0x0002(r1)
    5f54:	3e f0 7f 80 	and	#-32641,r14	;#0x807f
    5f58:	0e df       	bis	r15,	r14	
    5f5a:	81 4e 02 00 	mov	r14,	2(r1)	;0x0002(r1)
            break;
    5f5e:	4e 49       	mov.b	r9,	r14	
    5f60:	4e 11       	rra.b	r14		
    5f62:	4e 43       	clr.b	r14		
    5f64:	4e 10       	rrc.b	r14		
    5f66:	5f 41 03 00 	mov.b	3(r1),	r15	;0x0003(r1)
    5f6a:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    5f6e:	4f de       	bis.b	r14,	r15	
    5f70:	c1 4f 03 00 	mov.b	r15,	3(r1)	;0x0003(r1)
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    5f74:	2e 41       	mov	@r1,	r14	
    5f76:	1f 41 02 00 	mov	2(r1),	r15	;0x0002(r1)
    5f7a:	21 52       	add	#4,	r1	;r2 As==10
    5f7c:	37 41       	pop	r7		
    5f7e:	38 41       	pop	r8		
    5f80:	39 41       	pop	r9		
    5f82:	3a 41       	pop	r10		
    5f84:	3b 41       	pop	r11		
    5f86:	30 41       	ret			

00005f88 <__unpack_f>:
                analog_graph_clear(AnalogSelect);
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
    5f88:	0b 12       	push	r11		
    5f8a:	0b 4e       	mov	r14,	r11	
        case WAIT_ROLL_LEFT:
                lcd_goto(0,14);
                printf("WAIT ROLL LEFT   ");
        
                if(ChannelInput[PITCH_CH] > 2500){
                   if(AnalogSelect < 7){
    5f8c:	2c 4f       	mov	@r15,	r12	
    5f8e:	5d 4f 02 00 	mov.b	2(r15),	r13	;0x0002(r15)
    5f92:	3d f0 7f 00 	and	#127,	r13	;#0x007f
                        AnalogSelect++;
    5f96:	1e 4f 02 00 	mov	2(r15),	r14	;0x0002(r15)
    5f9a:	12 c3       	clrc			
    5f9c:	0e 10       	rrc	r14		
    5f9e:	0e 11       	rra	r14		
    5fa0:	0e 11       	rra	r14		
    5fa2:	0e 11       	rra	r14		
    5fa4:	0e 11       	rra	r14		
    5fa6:	0e 11       	rra	r14		
    5fa8:	0e 11       	rra	r14		
    5faa:	7e f3       	and.b	#-1,	r14	;r3 As==11
                    }
    5fac:	ff b0 80 00 	bit.b	#128,	3(r15)	;#0x0080, 0x0003(r15)
    5fb0:	03 00 
    5fb2:	4f 43       	clr.b	r15		
    5fb4:	4f 63       	adc.b	r15		

                }
            break;
            
        case PROCESS_OPTION:
            break;
    5fb6:	cb 4f 01 00 	mov.b	r15,	1(r11)	;0x0001(r11)
        case WAIT_CH7_BACK:
    5fba:	0e 93       	tst	r14		
    5fbc:	2d 20       	jnz	$+92     	;abs 0x6018
            break;
    }
}
    5fbe:	0c 93       	tst	r12		
    5fc0:	05 20       	jnz	$+12     	;abs 0x5fcc
    5fc2:	0d 93       	tst	r13		
    5fc4:	03 20       	jnz	$+8      	;abs 0x5fcc
void refresh_analog_menu(void){
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
    5fc6:	eb 43 00 00 	mov.b	#2,	0(r11)	;r3 As==10, 0x0000(r11)
    5fca:	57 3c       	jmp	$+176    	;abs 0x607a
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
    5fcc:	bb 40 82 ff 	mov	#-126,	2(r11)	;#0xff82, 0x0002(r11)
    5fd0:	02 00 
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    5fd2:	0c 5c       	rla	r12		
    5fd4:	0d 6d       	rlc	r13		
    5fd6:	0c 5c       	rla	r12		
    5fd8:	0d 6d       	rlc	r13		
    5fda:	0c 5c       	rla	r12		
    5fdc:	0d 6d       	rlc	r13		
    5fde:	0c 5c       	rla	r12		
    5fe0:	0d 6d       	rlc	r13		
    5fe2:	0c 5c       	rla	r12		
    5fe4:	0d 6d       	rlc	r13		
    5fe6:	0c 5c       	rla	r12		
    5fe8:	0d 6d       	rlc	r13		
    5fea:	0c 5c       	rla	r12		
    5fec:	0d 6d       	rlc	r13		
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
    5fee:	fb 40 03 00 	mov.b	#3,	0(r11)	;#0x0003, 0x0000(r11)
    5ff2:	00 00 
        else{                           // se nao                        
            if(color_back == LIME){
    5ff4:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    5ff8:	0a 2c       	jc	$+22     	;abs 0x600e
    5ffa:	3f 40 82 ff 	mov	#-126,	r15	;#0xff82
                color_fore = BLACK;
            }
    5ffe:	0c 5c       	rla	r12		
    6000:	0d 6d       	rlc	r13		
        }                               
    6002:	3f 53       	add	#-1,	r15	;r3 As==11
    6004:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    6008:	fa 2b       	jnc	$-10     	;abs 0x5ffe
    600a:	8b 4f 02 00 	mov	r15,	2(r11)	;0x0002(r11)
     * 
     * SELM_0 -- DCOCLK
     * DIVM_0 -- Divide by 1
     * ~SELS -- DCOCLK
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
    600e:	8b 4c 04 00 	mov	r12,	4(r11)	;0x0004(r11)
    6012:	8b 4d 06 00 	mov	r13,	6(r11)	;0x0006(r11)
    6016:	31 3c       	jmp	$+100    	;abs 0x607a
        
        printf("%d",i);
        // ajusta as cores para o normal
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    6018:	3e 90 ff 00 	cmp	#255,	r14	;#0x00ff
    601c:	1e 24       	jz	$+62     	;abs 0x605a
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    
    DCOCTL = 0x77;      
    601e:	3e 50 81 ff 	add	#-127,	r14	;#0xff81
    6022:	8b 4e 02 00 	mov	r14,	2(r11)	;0x0002(r11)
        /* 
    6026:	fb 40 03 00 	mov.b	#3,	0(r11)	;#0x0003, 0x0000(r11)
    602a:	00 00 
     * Basic Clock System Control 1
    602c:	0e 4c       	mov	r12,	r14	
    602e:	0f 4d       	mov	r13,	r15	
    6030:	0e 5e       	rla	r14		
    6032:	0f 6f       	rlc	r15		
    6034:	0e 5e       	rla	r14		
    6036:	0f 6f       	rlc	r15		
    6038:	0e 5e       	rla	r14		
    603a:	0f 6f       	rlc	r15		
    603c:	0e 5e       	rla	r14		
    603e:	0f 6f       	rlc	r15		
    6040:	0e 5e       	rla	r14		
    6042:	0f 6f       	rlc	r15		
    6044:	0e 5e       	rla	r14		
    6046:	0f 6f       	rlc	r15		
    6048:	0e 5e       	rla	r14		
    604a:	0f 6f       	rlc	r15		
    604c:	3f d0 00 40 	bis	#16384,	r15	;#0x4000
    6050:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    6054:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    6058:	10 3c       	jmp	$+34     	;abs 0x607a
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
}
    605a:	0c 93       	tst	r12		
    605c:	05 20       	jnz	$+12     	;abs 0x6068
    605e:	0d 93       	tst	r13		
    6060:	03 20       	jnz	$+8      	;abs 0x6068

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    6062:	eb 42 00 00 	mov.b	#4,	0(r11)	;r2 As==10, 0x0000(r11)
    6066:	09 3c       	jmp	$+20     	;abs 0x607a
    RCCounter++;
    MenuCounter++;
}

void clock_init(void)
    6068:	3d b0 10 00 	bit	#16,	r13	;#0x0010
    606c:	03 24       	jz	$+8      	;abs 0x6074
{
    /* 
    606e:	db 43 00 00 	mov.b	#1,	0(r11)	;r3 As==01, 0x0000(r11)
    6072:	cd 3f       	jmp	$-100    	;abs 0x600e
     * Basic Clock System Control 2
     * 
     * SELM_0 -- DCOCLK
     * DIVM_0 -- Divide by 1
    6074:	cb 43 00 00 	mov.b	#0,	0(r11)	;r3 As==00, 0x0000(r11)
    6078:	ca 3f       	jmp	$-106    	;abs 0x600e
    
    DCOCTL = 0x77;      
        /* 
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
    607a:	3b 41       	pop	r11		
    607c:	30 41       	ret			

0000607e <__fpcmp_parts_f>:
    607e:	0b 12       	push	r11		
    6080:	0a 12       	push	r10		
    6082:	09 12       	push	r9		
    6084:	08 12       	push	r8		

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    6086:	0d 43       	clr	r13		
    6088:	6c 4f       	mov.b	@r15,	r12	
    608a:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    608c:	01 2c       	jc	$+4      	;abs 0x6090
    608e:	1d 43       	mov	#1,	r13	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    6090:	0d 93       	tst	r13		
    6092:	07 20       	jnz	$+16     	;abs 0x60a2
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    6094:	0d 43       	clr	r13		
    6096:	6b 4e       	mov.b	@r14,	r11	
    6098:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    609a:	01 2c       	jc	$+4      	;abs 0x609e
    609c:	1d 43       	mov	#1,	r13	;r3 As==01
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    609e:	0d 93       	tst	r13		
    60a0:	02 24       	jz	$+6      	;abs 0x60a6
    60a2:	1d 43       	mov	#1,	r13	;r3 As==01
    60a4:	72 3c       	jmp	$+230    	;abs 0x618a
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    60a6:	0d 43       	clr	r13		
    60a8:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    60aa:	6d 24       	jz	$+220    	;abs 0x6186
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    60ac:	0d 93       	tst	r13		
    60ae:	0b 24       	jz	$+24     	;abs 0x60c6
            lcd_goto(0,14);
    60b0:	0d 43       	clr	r13		
    60b2:	6b 92       	cmp.b	#4,	r11	;r2 As==10
    60b4:	66 24       	jz	$+206    	;abs 0x6182
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    60b6:	0d 93       	tst	r13		
    60b8:	06 24       	jz	$+14     	;abs 0x60c6
    60ba:	5d 4e 01 00 	mov.b	1(r14),	r13	;0x0001(r14)
    60be:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    60c2:	0d 8f       	sub	r15,	r13	
    60c4:	62 3c       	jmp	$+198    	;abs 0x618a
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    60c6:	0d 43       	clr	r13		
    60c8:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    60ca:	59 24       	jz	$+180    	;abs 0x617e
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    60cc:	0d 93       	tst	r13		
    60ce:	23 20       	jnz	$+72     	;abs 0x6116
            lcd_goto(0,14);
    60d0:	0d 43       	clr	r13		
    60d2:	6b 92       	cmp.b	#4,	r11	;r2 As==10
    60d4:	52 24       	jz	$+166    	;abs 0x617a
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    60d6:	0d 93       	tst	r13		
    60d8:	11 20       	jnz	$+36     	;abs 0x60fc
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    60da:	0d 43       	clr	r13		
    60dc:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    60de:	4b 24       	jz	$+152    	;abs 0x6176
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    60e0:	0d 93       	tst	r13		
    60e2:	07 24       	jz	$+16     	;abs 0x60f2
            
    60e4:	0d 43       	clr	r13		
    60e6:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    60e8:	44 24       	jz	$+138    	;abs 0x6172
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    60ea:	0d 93       	tst	r13		
    60ec:	02 24       	jz	$+6      	;abs 0x60f2
    60ee:	0d 43       	clr	r13		
    60f0:	4c 3c       	jmp	$+154    	;abs 0x618a
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    60f2:	0d 43       	clr	r13		
    60f4:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    60f6:	3b 24       	jz	$+120    	;abs 0x616e
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    60f8:	0d 93       	tst	r13		
    60fa:	08 24       	jz	$+18     	;abs 0x610c
    60fc:	ce 93 01 00 	tst.b	1(r14)		;0x0001(r14)
    6100:	03 20       	jnz	$+8      	;abs 0x6108
    6102:	3f 43       	mov	#-1,	r15	;r3 As==11
    6104:	0d 4f       	mov	r15,	r13	
    6106:	41 3c       	jmp	$+132    	;abs 0x618a
    6108:	1f 43       	mov	#1,	r15	;r3 As==01
    610a:	fc 3f       	jmp	$-6      	;abs 0x6104
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    610c:	0d 43       	clr	r13		
    610e:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    6110:	2c 24       	jz	$+90     	;abs 0x616a
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    6112:	0d 93       	tst	r13		
    6114:	04 24       	jz	$+10     	;abs 0x611e
    6116:	cf 93 01 00 	tst.b	1(r15)		;0x0001(r15)
    611a:	f3 23       	jnz	$-24     	;abs 0x6102
    611c:	f5 3f       	jmp	$-20     	;abs 0x6108
    611e:	5c 4f 01 00 	mov.b	1(r15),	r12	;0x0001(r15)
    6122:	5c 9e 01 00 	cmp.b	1(r14),	r12	;0x0001(r14)
    6126:	03 24       	jz	$+8      	;abs 0x612e
    6128:	4c 93       	tst.b	r12		
    612a:	eb 23       	jnz	$-40     	;abs 0x6102
    612c:	ed 3f       	jmp	$-36     	;abs 0x6108
    612e:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    6132:	1d 4e 02 00 	mov	2(r14),	r13	;0x0002(r14)
    6136:	0d 9b       	cmp	r11,	r13	
    6138:	f7 3b       	jl	$-16     	;abs 0x6128
    613a:	0b 9d       	cmp	r13,	r11	
    613c:	13 38       	jl	$+40     	;abs 0x6164
    613e:	1a 4f 04 00 	mov	4(r15),	r10	;0x0004(r15)
    6142:	1b 4f 06 00 	mov	6(r15),	r11	;0x0006(r15)
    6146:	18 4e 04 00 	mov	4(r14),	r8	;0x0004(r14)
    614a:	19 4e 06 00 	mov	6(r14),	r9	;0x0006(r14)
    614e:	0e 48       	mov	r8,	r14	
    6150:	0f 49       	mov	r9,	r15	
    6152:	0e 8a       	sub	r10,	r14	
    6154:	0f 7b       	subc	r11,	r15	
    6156:	e8 2b       	jnc	$-46     	;abs 0x6128
    6158:	0e 4a       	mov	r10,	r14	
    615a:	0f 4b       	mov	r11,	r15	
    615c:	0d 43       	clr	r13		
    615e:	0e 88       	sub	r8,	r14	
    6160:	0f 79       	subc	r9,	r15	
    6162:	13 2c       	jc	$+40     	;abs 0x618a
    6164:	4c 93       	tst.b	r12		
    6166:	cd 27       	jz	$-100    	;abs 0x6102
    6168:	cf 3f       	jmp	$-96     	;abs 0x6108
    616a:	1d 43       	mov	#1,	r13	;r3 As==01
    616c:	d2 3f       	jmp	$-90     	;abs 0x6112
    616e:	1d 43       	mov	#1,	r13	;r3 As==01
    6170:	c3 3f       	jmp	$-120    	;abs 0x60f8
    6172:	1d 43       	mov	#1,	r13	;r3 As==01
    6174:	ba 3f       	jmp	$-138    	;abs 0x60ea
    6176:	1d 43       	mov	#1,	r13	;r3 As==01
    6178:	b3 3f       	jmp	$-152    	;abs 0x60e0
    617a:	1d 43       	mov	#1,	r13	;r3 As==01
    617c:	ac 3f       	jmp	$-166    	;abs 0x60d6
    617e:	1d 43       	mov	#1,	r13	;r3 As==01
    6180:	a5 3f       	jmp	$-180    	;abs 0x60cc
    6182:	1d 43       	mov	#1,	r13	;r3 As==01
    6184:	98 3f       	jmp	$-206    	;abs 0x60b6
    6186:	1d 43       	mov	#1,	r13	;r3 As==01
    6188:	91 3f       	jmp	$-220    	;abs 0x60ac
    618a:	0f 4d       	mov	r13,	r15	
    618c:	38 41       	pop	r8		
    618e:	39 41       	pop	r9		
    6190:	3a 41       	pop	r10		
    6192:	3b 41       	pop	r11		
    6194:	30 41       	ret			

00006196 <printf>:
// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

    6196:	2f 43       	mov	#2,	r15	;r3 As==10
    6198:	0f 51       	add	r1,	r15	
    619a:	3e 4f       	mov	@r15+,	r14	
// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()

    619c:	0d 4f       	mov	r15,	r13	
    619e:	3f 40 2e 46 	mov	#17966,	r15	;#0x462e
    61a2:	b0 12 0c 62 	call	#0x620c	
// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    61a6:	30 41       	ret			

000061a8 <PRINT>:
    61a8:	0b 12       	push	r11		
    61aa:	0a 12       	push	r10		
    61ac:	0a 4f       	mov	r15,	r10	
    61ae:	0b 4e       	mov	r14,	r11	
    61b0:	0e 93       	tst	r14		
    61b2:	02 20       	jnz	$+6      	;abs 0x61b8
    61b4:	1f 43       	mov	#1,	r15	;r3 As==01
    61b6:	0d 3c       	jmp	$+28     	;abs 0x61d2
    61b8:	6f 4a       	mov.b	@r10,	r15	
    61ba:	8f 11       	sxt	r15		
    61bc:	1a 53       	inc	r10		
    61be:	92 12 b4 11 	call	&0x11b4	
    61c2:	0f 93       	tst	r15		
    61c4:	05 38       	jl	$+12     	;abs 0x61d0
    61c6:	92 53 b2 11 	inc	&0x11b2	
    61ca:	3b 53       	add	#-1,	r11	;r3 As==11
    61cc:	f5 23       	jnz	$-20     	;abs 0x61b8
    61ce:	f2 3f       	jmp	$-26     	;abs 0x61b4
    61d0:	3f 43       	mov	#-1,	r15	;r3 As==11
    61d2:	3a 41       	pop	r10		
    61d4:	3b 41       	pop	r11		
    61d6:	30 41       	ret			

000061d8 <__write_pad>:
    61d8:	0b 12       	push	r11		
    61da:	0a 12       	push	r10		
    61dc:	09 12       	push	r9		
    61de:	49 4f       	mov.b	r15,	r9	
    61e0:	4b 4e       	mov.b	r14,	r11	
    61e2:	5e 93       	cmp.b	#1,	r14	;r3 As==01
    61e4:	0c 38       	jl	$+26     	;abs 0x61fe
    61e6:	4a 4f       	mov.b	r15,	r10	
    61e8:	8a 11       	sxt	r10		
    61ea:	0f 4a       	mov	r10,	r15	
    61ec:	92 12 b4 11 	call	&0x11b4	
    61f0:	0f 93       	tst	r15		
    61f2:	07 38       	jl	$+16     	;abs 0x6202
    61f4:	92 53 b2 11 	inc	&0x11b2	
    61f8:	7b 53       	add.b	#-1,	r11	;r3 As==11
    61fa:	5b 93       	cmp.b	#1,	r11	;r3 As==01
    61fc:	f6 37       	jge	$-18     	;abs 0x61ea
    61fe:	4f 49       	mov.b	r9,	r15	
    6200:	01 3c       	jmp	$+4      	;abs 0x6204
    6202:	3f 43       	mov	#-1,	r15	;r3 As==11
    6204:	39 41       	pop	r9		
    6206:	3a 41       	pop	r10		
    6208:	3b 41       	pop	r11		
    620a:	30 41       	ret			

0000620c <vuprintf>:
    620c:	0b 12       	push	r11		
    620e:	0a 12       	push	r10		
    6210:	09 12       	push	r9		
    6212:	08 12       	push	r8		
    6214:	07 12       	push	r7		
    6216:	06 12       	push	r6		
    6218:	05 12       	push	r5		
    621a:	04 12       	push	r4		
    621c:	31 80 3c 00 	sub	#60,	r1	;#0x003c
    6220:	05 4d       	mov	r13,	r5	
    6222:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    6226:	81 43 32 00 	mov	#0,	50(r1)	;r3 As==00, 0x0032(r1)
    622a:	82 43 b2 11 	mov	#0,	&0x11b2	;r3 As==00
    622e:	82 4f b4 11 	mov	r15,	&0x11b4	
    6232:	06 4e       	mov	r14,	r6	
    6234:	0f 46       	mov	r6,	r15	
    6236:	67 46       	mov.b	@r6,	r7	
    6238:	47 93       	tst.b	r7		
    623a:	0a 24       	jz	$+22     	;abs 0x6250
    623c:	77 90 25 00 	cmp.b	#37,	r7	;#0x0025
    6240:	07 24       	jz	$+16     	;abs 0x6250
    6242:	16 53       	inc	r6		
    6244:	67 46       	mov.b	@r6,	r7	
    6246:	47 93       	tst.b	r7		
    6248:	03 24       	jz	$+8      	;abs 0x6250
    624a:	77 90 25 00 	cmp.b	#37,	r7	;#0x0025
    624e:	f9 23       	jnz	$-12     	;abs 0x6242
    6250:	0d 46       	mov	r6,	r13	
    6252:	0d 8f       	sub	r15,	r13	
    6254:	02 24       	jz	$+6      	;abs 0x625a
    6256:	30 40 9a 67 	br	#0x679a	
    625a:	47 93       	tst.b	r7		
    625c:	02 20       	jnz	$+6      	;abs 0x6262
    625e:	30 40 a8 67 	br	#0x67a8	
    6262:	16 53       	inc	r6		
    6264:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    6268:	c1 43 35 00 	mov.b	#0,	53(r1)	;r3 As==00, 0x0035(r1)
    626c:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    6270:	7b 43       	mov.b	#-1,	r11	;r3 As==11
    6272:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    6276:	67 46       	mov.b	@r6,	r7	
    6278:	16 53       	inc	r6		
    627a:	77 90 75 00 	cmp.b	#117,	r7	;#0x0075
    627e:	02 20       	jnz	$+6      	;abs 0x6284
    6280:	30 40 74 67 	br	#0x6774	
    6284:	4f 47       	mov.b	r7,	r15	
    6286:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    628a:	7f 90 78 00 	cmp.b	#120,	r15	;#0x0078
    628e:	02 20       	jnz	$+6      	;abs 0x6294
    6290:	30 40 74 67 	br	#0x6774	
    6294:	77 90 20 00 	cmp.b	#32,	r7	;#0x0020
    6298:	02 20       	jnz	$+6      	;abs 0x629e
    629a:	30 40 60 67 	br	#0x6760	
    629e:	77 90 23 00 	cmp.b	#35,	r7	;#0x0023
    62a2:	02 20       	jnz	$+6      	;abs 0x62a8
    62a4:	30 40 58 67 	br	#0x6758	
    62a8:	77 90 2a 00 	cmp.b	#42,	r7	;#0x002a
    62ac:	02 20       	jnz	$+6      	;abs 0x62b2
    62ae:	30 40 3c 67 	br	#0x673c	
    62b2:	77 90 2d 00 	cmp.b	#45,	r7	;#0x002d
    62b6:	02 20       	jnz	$+6      	;abs 0x62bc
    62b8:	30 40 2c 67 	br	#0x672c	
    62bc:	77 90 2b 00 	cmp.b	#43,	r7	;#0x002b
    62c0:	02 20       	jnz	$+6      	;abs 0x62c6
    62c2:	30 40 22 67 	br	#0x6722	
    62c6:	77 90 2e 00 	cmp.b	#46,	r7	;#0x002e
    62ca:	02 20       	jnz	$+6      	;abs 0x62d0
    62cc:	30 40 bc 66 	br	#0x66bc	
    62d0:	77 90 30 00 	cmp.b	#48,	r7	;#0x0030
    62d4:	02 20       	jnz	$+6      	;abs 0x62da
    62d6:	30 40 a6 66 	br	#0x66a6	
    62da:	4f 47       	mov.b	r7,	r15	
    62dc:	7f 50 cf ff 	add.b	#-49,	r15	;#0xffcf
    62e0:	7f 90 09 00 	cmp.b	#9,	r15	;#0x0009
    62e4:	1a 2c       	jc	$+54     	;abs 0x631a
    62e6:	0d 43       	clr	r13		
    62e8:	0f 4d       	mov	r13,	r15	
    62ea:	0f 5f       	rla	r15		
    62ec:	0f 5f       	rla	r15		
    62ee:	0e 4d       	mov	r13,	r14	
    62f0:	0e 5e       	rla	r14		
    62f2:	0d 4f       	mov	r15,	r13	
    62f4:	0d 5e       	add	r14,	r13	
    62f6:	0d 5e       	add	r14,	r13	
    62f8:	0d 5e       	add	r14,	r13	
    62fa:	4f 47       	mov.b	r7,	r15	
    62fc:	8f 11       	sxt	r15		
    62fe:	0d 5f       	add	r15,	r13	
    6300:	3d 50 d0 ff 	add	#-48,	r13	;#0xffd0
    6304:	67 46       	mov.b	@r6,	r7	
    6306:	16 53       	inc	r6		
    6308:	4f 47       	mov.b	r7,	r15	
    630a:	7f 50 d0 ff 	add.b	#-48,	r15	;#0xffd0
    630e:	7f 90 0a 00 	cmp.b	#10,	r15	;#0x000a
    6312:	ea 2b       	jnc	$-42     	;abs 0x62e8
    6314:	c1 4d 2f 00 	mov.b	r13,	47(r1)	;0x002f(r1)
    6318:	b0 3f       	jmp	$-158    	;abs 0x627a
    631a:	77 90 68 00 	cmp.b	#104,	r7	;#0x0068
    631e:	bf 25       	jz	$+896    	;abs 0x669e
    6320:	77 90 6c 00 	cmp.b	#108,	r7	;#0x006c
    6324:	03 20       	jnz	$+8      	;abs 0x632c
    6326:	d1 d3 2e 00 	bis.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    632a:	a5 3f       	jmp	$-180    	;abs 0x6276
    632c:	77 90 63 00 	cmp.b	#99,	r7	;#0x0063
    6330:	af 25       	jz	$+864    	;abs 0x6690
    6332:	77 90 44 00 	cmp.b	#68,	r7	;#0x0044
    6336:	a9 25       	jz	$+852    	;abs 0x668a
    6338:	77 90 64 00 	cmp.b	#100,	r7	;#0x0064
    633c:	7a 25       	jz	$+758    	;abs 0x6632
    633e:	77 90 69 00 	cmp.b	#105,	r7	;#0x0069
    6342:	77 25       	jz	$+752    	;abs 0x6632
    6344:	77 90 4f 00 	cmp.b	#79,	r7	;#0x004f
    6348:	71 25       	jz	$+740    	;abs 0x662c
    634a:	77 90 6f 00 	cmp.b	#111,	r7	;#0x006f
    634e:	6b 25       	jz	$+728    	;abs 0x6626
    6350:	77 90 70 00 	cmp.b	#112,	r7	;#0x0070
    6354:	59 25       	jz	$+692    	;abs 0x6608
    6356:	77 90 73 00 	cmp.b	#115,	r7	;#0x0073
    635a:	1a 25       	jz	$+566    	;abs 0x6590
    635c:	77 90 55 00 	cmp.b	#85,	r7	;#0x0055
    6360:	14 25       	jz	$+554    	;abs 0x658a
    6362:	77 90 75 00 	cmp.b	#117,	r7	;#0x0075
    6366:	0d 25       	jz	$+540    	;abs 0x6582
    6368:	77 90 58 00 	cmp.b	#88,	r7	;#0x0058
    636c:	8a 24       	jz	$+278    	;abs 0x6482
    636e:	77 90 78 00 	cmp.b	#120,	r7	;#0x0078
    6372:	87 24       	jz	$+272    	;abs 0x6482
    6374:	47 93       	tst.b	r7		
    6376:	02 20       	jnz	$+6      	;abs 0x637c
    6378:	30 40 a8 67 	br	#0x67a8	
    637c:	81 41 2c 00 	mov	r1,	44(r1)	;0x002c(r1)
    6380:	c1 47 00 00 	mov.b	r7,	0(r1)	;0x0000(r1)
    6384:	59 43       	mov.b	#1,	r9	;r3 As==01
    6386:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    638a:	4b 49       	mov.b	r9,	r11	
    638c:	5a 41 35 00 	mov.b	53(r1),	r10	;0x0035(r1)
    6390:	4a 89       	sub.b	r9,	r10	
    6392:	75 30       	jn	$+236    	;abs 0x647e
    6394:	5e 41 2a 00 	mov.b	42(r1),	r14	;0x002a(r1)
    6398:	4e 93       	tst.b	r14		
    639a:	6b 24       	jz	$+216    	;abs 0x6472
    639c:	5b 53       	inc.b	r11		
    639e:	4b 5a       	add.b	r10,	r11	
    63a0:	58 41 2e 00 	mov.b	46(r1),	r8	;0x002e(r1)
    63a4:	78 f0 30 00 	and.b	#48,	r8	;#0x0030
    63a8:	13 20       	jnz	$+40     	;abs 0x63d0
    63aa:	5d 41 2f 00 	mov.b	47(r1),	r13	;0x002f(r1)
    63ae:	8d 11       	sxt	r13		
    63b0:	4f 4b       	mov.b	r11,	r15	
    63b2:	8f 11       	sxt	r15		
    63b4:	0d 8f       	sub	r15,	r13	
    63b6:	1d 93       	cmp	#1,	r13	;r3 As==01
    63b8:	0b 38       	jl	$+24     	;abs 0x63d0
    63ba:	4e 4d       	mov.b	r13,	r14	
    63bc:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    63c0:	b0 12 d8 61 	call	#0x61d8	
    63c4:	0f 93       	tst	r15		
    63c6:	02 34       	jge	$+6      	;abs 0x63cc
    63c8:	30 40 a8 67 	br	#0x67a8	
    63cc:	5e 41 2a 00 	mov.b	42(r1),	r14	;0x002a(r1)
    63d0:	4e 93       	tst.b	r14		
    63d2:	4a 20       	jnz	$+150    	;abs 0x6468
    63d4:	f1 b0 40 00 	bit.b	#64,	46(r1)	;#0x0040, 0x002e(r1)
    63d8:	2e 00 
    63da:	0f 24       	jz	$+32     	;abs 0x63fa
    63dc:	f1 40 30 00 	mov.b	#48,	40(r1)	;#0x0030, 0x0028(r1)
    63e0:	28 00 
    63e2:	c1 47 29 00 	mov.b	r7,	41(r1)	;0x0029(r1)
    63e6:	2e 43       	mov	#2,	r14	;r3 As==10
    63e8:	0f 41       	mov	r1,	r15	
    63ea:	3f 50 28 00 	add	#40,	r15	;#0x0028
    63ee:	b0 12 a8 61 	call	#0x61a8	
    63f2:	0f 93       	tst	r15		
    63f4:	02 34       	jge	$+6      	;abs 0x63fa
    63f6:	30 40 a8 67 	br	#0x67a8	
    63fa:	78 90 20 00 	cmp.b	#32,	r8	;#0x0020
    63fe:	24 24       	jz	$+74     	;abs 0x6448
    6400:	4e 4a       	mov.b	r10,	r14	
    6402:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    6406:	b0 12 d8 61 	call	#0x61d8	
    640a:	0f 93       	tst	r15		
    640c:	cd 39       	jl	$+924    	;abs 0x67a8
    640e:	4f 49       	mov.b	r9,	r15	
    6410:	8f 11       	sxt	r15		
    6412:	0e 4f       	mov	r15,	r14	
    6414:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    6418:	b0 12 a8 61 	call	#0x61a8	
    641c:	0f 93       	tst	r15		
    641e:	c4 39       	jl	$+906    	;abs 0x67a8
    6420:	f1 b0 10 00 	bit.b	#16,	46(r1)	;#0x0010, 0x002e(r1)
    6424:	2e 00 
    6426:	06 27       	jz	$-498    	;abs 0x6234
    6428:	5d 41 2f 00 	mov.b	47(r1),	r13	;0x002f(r1)
    642c:	8d 11       	sxt	r13		
    642e:	4f 4b       	mov.b	r11,	r15	
    6430:	8f 11       	sxt	r15		
    6432:	0d 8f       	sub	r15,	r13	
    6434:	1d 93       	cmp	#1,	r13	;r3 As==01
    6436:	fe 3a       	jl	$-514    	;abs 0x6234
    6438:	4e 4d       	mov.b	r13,	r14	
    643a:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    643e:	b0 12 d8 61 	call	#0x61d8	
    6442:	0f 93       	tst	r15		
    6444:	f7 36       	jge	$-528    	;abs 0x6234
    6446:	b0 3d       	jmp	$+866    	;abs 0x67a8
    6448:	5d 41 2f 00 	mov.b	47(r1),	r13	;0x002f(r1)
    644c:	8d 11       	sxt	r13		
    644e:	4f 4b       	mov.b	r11,	r15	
    6450:	8f 11       	sxt	r15		
    6452:	0d 8f       	sub	r15,	r13	
    6454:	1d 93       	cmp	#1,	r13	;r3 As==01
    6456:	d4 3b       	jl	$-86     	;abs 0x6400
    6458:	4e 4d       	mov.b	r13,	r14	
    645a:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    645e:	b0 12 d8 61 	call	#0x61d8	
    6462:	0f 93       	tst	r15		
    6464:	cd 37       	jge	$-100    	;abs 0x6400
    6466:	a0 3d       	jmp	$+834    	;abs 0x67a8
    6468:	1e 43       	mov	#1,	r14	;r3 As==01
    646a:	0f 41       	mov	r1,	r15	
    646c:	3f 50 2a 00 	add	#42,	r15	;#0x002a
    6470:	be 3f       	jmp	$-130    	;abs 0x63ee
    6472:	f1 b0 40 00 	bit.b	#64,	46(r1)	;#0x0040, 0x002e(r1)
    6476:	2e 00 
    6478:	92 27       	jz	$-218    	;abs 0x639e
    647a:	6b 53       	incd.b	r11		
    647c:	90 3f       	jmp	$-222    	;abs 0x639e
    647e:	4a 43       	clr.b	r10		
    6480:	89 3f       	jmp	$-236    	;abs 0x6394
    6482:	f1 40 10 00 	mov.b	#16,	52(r1)	;#0x0010, 0x0034(r1)
    6486:	34 00 
    6488:	f1 b2 2e 00 	bit.b	#8,	46(r1)	;r2 As==11, 0x002e(r1)
    648c:	09 24       	jz	$+20     	;abs 0x64a0
    648e:	81 93 30 00 	tst	48(r1)		;0x0030(r1)
    6492:	03 20       	jnz	$+8      	;abs 0x649a
    6494:	81 93 32 00 	tst	50(r1)		;0x0032(r1)
    6498:	03 24       	jz	$+8      	;abs 0x64a0
    649a:	f1 d0 40 00 	bis.b	#64,	46(r1)	;#0x0040, 0x002e(r1)
    649e:	2e 00 
    64a0:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    64a4:	c1 4b 35 00 	mov.b	r11,	53(r1)	;0x0035(r1)
    64a8:	4b 93       	tst.b	r11		
    64aa:	03 38       	jl	$+8      	;abs 0x64b2
    64ac:	f1 f0 df ff 	and.b	#-33,	46(r1)	;#0xffdf, 0x002e(r1)
    64b0:	2e 00 
    64b2:	0f 41       	mov	r1,	r15	
    64b4:	3f 50 28 00 	add	#40,	r15	;#0x0028
    64b8:	81 4f 2c 00 	mov	r15,	44(r1)	;0x002c(r1)
    64bc:	81 93 30 00 	tst	48(r1)		;0x0030(r1)
    64c0:	06 20       	jnz	$+14     	;abs 0x64ce
    64c2:	81 93 32 00 	tst	50(r1)		;0x0032(r1)
    64c6:	03 20       	jnz	$+8      	;abs 0x64ce
    64c8:	c1 93 35 00 	tst.b	53(r1)		;0x0035(r1)
    64cc:	3e 24       	jz	$+126    	;abs 0x654a
    64ce:	d1 41 34 00 	mov.b	52(r1),	56(r1)	;0x0034(r1), 0x0038(r1)
    64d2:	38 00 
    64d4:	c1 43 39 00 	mov.b	#0,	57(r1)	;r3 As==00, 0x0039(r1)
    64d8:	81 43 3a 00 	mov	#0,	58(r1)	;r3 As==00, 0x003a(r1)
    64dc:	c1 43 36 00 	mov.b	#0,	54(r1)	;r3 As==00, 0x0036(r1)
    64e0:	1e 41 30 00 	mov	48(r1),	r14	;0x0030(r1)
    64e4:	1f 41 32 00 	mov	50(r1),	r15	;0x0032(r1)
    64e8:	1e 81 38 00 	sub	56(r1),	r14	;0x0038(r1)
    64ec:	1f 71 3a 00 	subc	58(r1),	r15	;0x003a(r1)
    64f0:	02 28       	jnc	$+6      	;abs 0x64f6
    64f2:	d1 43 36 00 	mov.b	#1,	54(r1)	;r3 As==01, 0x0036(r1)
    64f6:	1c 41 30 00 	mov	48(r1),	r12	;0x0030(r1)
    64fa:	1d 41 32 00 	mov	50(r1),	r13	;0x0032(r1)
    64fe:	1a 41 38 00 	mov	56(r1),	r10	;0x0038(r1)
    6502:	1b 41 3a 00 	mov	58(r1),	r11	;0x003a(r1)
    6506:	b0 12 66 68 	call	#0x6866	
    650a:	44 4e       	mov.b	r14,	r4	
    650c:	7e 90 0a 00 	cmp.b	#10,	r14	;#0x000a
    6510:	30 2c       	jc	$+98     	;abs 0x6572
    6512:	74 50 30 00 	add.b	#48,	r4	;#0x0030
    6516:	b1 53 2c 00 	add	#-1,	44(r1)	;r3 As==11, 0x002c(r1)
    651a:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    651e:	cf 44 00 00 	mov.b	r4,	0(r15)	;0x0000(r15)
    6522:	1c 41 30 00 	mov	48(r1),	r12	;0x0030(r1)
    6526:	1d 41 32 00 	mov	50(r1),	r13	;0x0032(r1)
    652a:	1a 41 38 00 	mov	56(r1),	r10	;0x0038(r1)
    652e:	1b 41 3a 00 	mov	58(r1),	r11	;0x003a(r1)
    6532:	b0 12 66 68 	call	#0x6866	
    6536:	81 4c 30 00 	mov	r12,	48(r1)	;0x0030(r1)
    653a:	81 4d 32 00 	mov	r13,	50(r1)	;0x0032(r1)
    653e:	c1 93 36 00 	tst.b	54(r1)		;0x0036(r1)
    6542:	cc 23       	jnz	$-102    	;abs 0x64dc
    6544:	f1 92 34 00 	cmp.b	#8,	52(r1)	;r2 As==11, 0x0034(r1)
    6548:	06 24       	jz	$+14     	;abs 0x6556
    654a:	49 41       	mov.b	r1,	r9	
    654c:	59 81 2c 00 	sub.b	44(r1),	r9	;0x002c(r1)
    6550:	79 50 28 00 	add.b	#40,	r9	;#0x0028
    6554:	1a 3f       	jmp	$-458    	;abs 0x638a
    6556:	f1 b2 2e 00 	bit.b	#8,	46(r1)	;r2 As==11, 0x002e(r1)
    655a:	f7 27       	jz	$-16     	;abs 0x654a
    655c:	74 90 30 00 	cmp.b	#48,	r4	;#0x0030
    6560:	f4 27       	jz	$-22     	;abs 0x654a
    6562:	b1 53 2c 00 	add	#-1,	44(r1)	;r3 As==11, 0x002c(r1)
    6566:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    656a:	ff 40 30 00 	mov.b	#48,	0(r15)	;#0x0030, 0x0000(r15)
    656e:	00 00 
    6570:	ec 3f       	jmp	$-38     	;abs 0x654a
    6572:	74 50 57 00 	add.b	#87,	r4	;#0x0057
    6576:	77 90 58 00 	cmp.b	#88,	r7	;#0x0058
    657a:	cd 23       	jnz	$-100    	;abs 0x6516
    657c:	74 f0 df ff 	and.b	#-33,	r4	;#0xffdf
    6580:	ca 3f       	jmp	$-106    	;abs 0x6516
    6582:	f1 40 0a 00 	mov.b	#10,	52(r1)	;#0x000a, 0x0034(r1)
    6586:	34 00 
    6588:	8b 3f       	jmp	$-232    	;abs 0x64a0
    658a:	d1 d3 2e 00 	bis.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    658e:	f9 3f       	jmp	$-12     	;abs 0x6582
    6590:	0f 45       	mov	r5,	r15	
    6592:	25 53       	incd	r5		
    6594:	a1 4f 2c 00 	mov	@r15,	44(r1)	;0x002c(r1)
    6598:	81 93 2c 00 	tst	44(r1)		;0x002c(r1)
    659c:	1e 24       	jz	$+62     	;abs 0x65da
    659e:	4b 93       	tst.b	r11		
    65a0:	11 38       	jl	$+36     	;abs 0x65c4
    65a2:	4f 4b       	mov.b	r11,	r15	
    65a4:	8f 11       	sxt	r15		
    65a6:	0d 4f       	mov	r15,	r13	
    65a8:	0e 43       	clr	r14		
    65aa:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    65ae:	b0 12 f0 67 	call	#0x67f0	
    65b2:	0f 93       	tst	r15		
    65b4:	05 24       	jz	$+12     	;abs 0x65c0
    65b6:	49 4f       	mov.b	r15,	r9	
    65b8:	59 81 2c 00 	sub.b	44(r1),	r9	;0x002c(r1)
    65bc:	4b 99       	cmp.b	r9,	r11	
    65be:	e3 36       	jge	$-568    	;abs 0x6386
    65c0:	49 4b       	mov.b	r11,	r9	
    65c2:	e1 3e       	jmp	$-572    	;abs 0x6386
    65c4:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    65c8:	1f 83       	dec	r15		
    65ca:	1f 53       	inc	r15		
    65cc:	cf 93 00 00 	tst.b	0(r15)		;0x0000(r15)
    65d0:	fc 23       	jnz	$-6      	;abs 0x65ca
    65d2:	49 4f       	mov.b	r15,	r9	
    65d4:	59 81 2c 00 	sub.b	44(r1),	r9	;0x002c(r1)
    65d8:	d6 3e       	jmp	$-594    	;abs 0x6386
    65da:	81 41 2c 00 	mov	r1,	44(r1)	;0x002c(r1)
    65de:	f1 40 28 00 	mov.b	#40,	0(r1)	;#0x0028, 0x0000(r1)
    65e2:	00 00 
    65e4:	f1 40 6e 00 	mov.b	#110,	1(r1)	;#0x006e, 0x0001(r1)
    65e8:	01 00 
    65ea:	f1 40 75 00 	mov.b	#117,	2(r1)	;#0x0075, 0x0002(r1)
    65ee:	02 00 
    65f0:	f1 40 6c 00 	mov.b	#108,	3(r1)	;#0x006c, 0x0003(r1)
    65f4:	03 00 
    65f6:	f1 40 6c 00 	mov.b	#108,	4(r1)	;#0x006c, 0x0004(r1)
    65fa:	04 00 
    65fc:	f1 40 29 00 	mov.b	#41,	5(r1)	;#0x0029, 0x0005(r1)
    6600:	05 00 
    6602:	c1 43 06 00 	mov.b	#0,	6(r1)	;r3 As==00, 0x0006(r1)
    6606:	cb 3f       	jmp	$-104    	;abs 0x659e
    6608:	0f 45       	mov	r5,	r15	
    660a:	25 53       	incd	r5		
    660c:	a1 4f 30 00 	mov	@r15,	48(r1)	;0x0030(r1)
    6610:	81 43 32 00 	mov	#0,	50(r1)	;r3 As==00, 0x0032(r1)
    6614:	f1 40 10 00 	mov.b	#16,	52(r1)	;#0x0010, 0x0034(r1)
    6618:	34 00 
    661a:	f1 d0 40 00 	bis.b	#64,	46(r1)	;#0x0040, 0x002e(r1)
    661e:	2e 00 
    6620:	77 40 78 00 	mov.b	#120,	r7	;#0x0078
    6624:	3d 3f       	jmp	$-388    	;abs 0x64a0
    6626:	f1 42 34 00 	mov.b	#8,	52(r1)	;r2 As==11, 0x0034(r1)
    662a:	3a 3f       	jmp	$-394    	;abs 0x64a0
    662c:	d1 d3 2e 00 	bis.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    6630:	fa 3f       	jmp	$-10     	;abs 0x6626
    6632:	d1 b3 2e 00 	bit.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    6636:	19 24       	jz	$+52     	;abs 0x666a
    6638:	0f 45       	mov	r5,	r15	
    663a:	25 52       	add	#4,	r5	;r2 As==10
    663c:	b1 4f 30 00 	mov	@r15+,	48(r1)	;0x0030(r1)
    6640:	b1 4f 32 00 	mov	@r15+,	50(r1)	;0x0032(r1)
    6644:	81 93 32 00 	tst	50(r1)		;0x0032(r1)
    6648:	04 38       	jl	$+10     	;abs 0x6652
    664a:	f1 40 0a 00 	mov.b	#10,	52(r1)	;#0x000a, 0x0034(r1)
    664e:	34 00 
    6650:	29 3f       	jmp	$-428    	;abs 0x64a4
    6652:	b1 e3 30 00 	xor	#-1,	48(r1)	;r3 As==11, 0x0030(r1)
    6656:	b1 e3 32 00 	xor	#-1,	50(r1)	;r3 As==11, 0x0032(r1)
    665a:	91 53 30 00 	inc	48(r1)		;0x0030(r1)
    665e:	81 63 32 00 	adc	50(r1)		;0x0032(r1)
    6662:	f1 40 2d 00 	mov.b	#45,	42(r1)	;#0x002d, 0x002a(r1)
    6666:	2a 00 
    6668:	f0 3f       	jmp	$-30     	;abs 0x664a
    666a:	0f 45       	mov	r5,	r15	
    666c:	25 53       	incd	r5		
    666e:	a1 4f 30 00 	mov	@r15,	48(r1)	;0x0030(r1)
    6672:	91 41 30 00 	mov	48(r1),	50(r1)	;0x0030(r1), 0x0032(r1)
    6676:	32 00 
    6678:	91 51 32 00 	rla	50(r1)		;0x0032(r1)
    667c:	32 00 
    667e:	91 71 32 00 	subc	50(r1),	50(r1)	;0x0032(r1), 0x0032(r1)
    6682:	32 00 
    6684:	b1 e3 32 00 	xor	#-1,	50(r1)	;r3 As==11, 0x0032(r1)
    6688:	dd 3f       	jmp	$-68     	;abs 0x6644
    668a:	d1 d3 2e 00 	bis.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    668e:	d1 3f       	jmp	$-92     	;abs 0x6632
    6690:	81 41 2c 00 	mov	r1,	44(r1)	;0x002c(r1)
    6694:	0f 45       	mov	r5,	r15	
    6696:	25 53       	incd	r5		
    6698:	e1 4f 00 00 	mov.b	@r15,	0(r1)	;0x0000(r1)
    669c:	73 3e       	jmp	$-792    	;abs 0x6384
    669e:	e1 d2 2e 00 	bis.b	#4,	46(r1)	;r2 As==10, 0x002e(r1)
    66a2:	30 40 76 62 	br	#0x6276	
    66a6:	f1 b0 10 00 	bit.b	#16,	46(r1)	;#0x0010, 0x002e(r1)
    66aa:	2e 00 
    66ac:	02 24       	jz	$+6      	;abs 0x66b2
    66ae:	30 40 76 62 	br	#0x6276	
    66b2:	f1 d0 20 00 	bis.b	#32,	46(r1)	;#0x0020, 0x002e(r1)
    66b6:	2e 00 
    66b8:	30 40 76 62 	br	#0x6276	
    66bc:	67 46       	mov.b	@r6,	r7	
    66be:	16 53       	inc	r6		
    66c0:	77 90 2a 00 	cmp.b	#42,	r7	;#0x002a
    66c4:	24 24       	jz	$+74     	;abs 0x670e
    66c6:	0d 43       	clr	r13		
    66c8:	4f 47       	mov.b	r7,	r15	
    66ca:	7f 50 d0 ff 	add.b	#-48,	r15	;#0xffd0
    66ce:	7f 90 0a 00 	cmp.b	#10,	r15	;#0x000a
    66d2:	16 2c       	jc	$+46     	;abs 0x6700
    66d4:	0f 4d       	mov	r13,	r15	
    66d6:	0f 5f       	rla	r15		
    66d8:	0f 5f       	rla	r15		
    66da:	0e 4d       	mov	r13,	r14	
    66dc:	0e 5e       	rla	r14		
    66de:	0d 4f       	mov	r15,	r13	
    66e0:	0d 5e       	add	r14,	r13	
    66e2:	0d 5e       	add	r14,	r13	
    66e4:	0d 5e       	add	r14,	r13	
    66e6:	4f 47       	mov.b	r7,	r15	
    66e8:	8f 11       	sxt	r15		
    66ea:	0d 5f       	add	r15,	r13	
    66ec:	3d 50 d0 ff 	add	#-48,	r13	;#0xffd0
    66f0:	67 46       	mov.b	@r6,	r7	
    66f2:	16 53       	inc	r6		
    66f4:	4f 47       	mov.b	r7,	r15	
    66f6:	7f 50 d0 ff 	add.b	#-48,	r15	;#0xffd0
    66fa:	7f 90 0a 00 	cmp.b	#10,	r15	;#0x000a
    66fe:	ea 2b       	jnc	$-42     	;abs 0x66d4
    6700:	0f 4d       	mov	r13,	r15	
    6702:	3d 93       	cmp	#-1,	r13	;r3 As==11
    6704:	01 34       	jge	$+4      	;abs 0x6708
    6706:	3f 43       	mov	#-1,	r15	;r3 As==11
    6708:	4b 4f       	mov.b	r15,	r11	
    670a:	30 40 7a 62 	br	#0x627a	
    670e:	0f 45       	mov	r5,	r15	
    6710:	25 53       	incd	r5		
    6712:	2d 4f       	mov	@r15,	r13	
    6714:	0f 4d       	mov	r13,	r15	
    6716:	3d 93       	cmp	#-1,	r13	;r3 As==11
    6718:	01 34       	jge	$+4      	;abs 0x671c
    671a:	3f 43       	mov	#-1,	r15	;r3 As==11
    671c:	4b 4f       	mov.b	r15,	r11	
    671e:	30 40 76 62 	br	#0x6276	
    6722:	f1 40 2b 00 	mov.b	#43,	42(r1)	;#0x002b, 0x002a(r1)
    6726:	2a 00 
    6728:	30 40 76 62 	br	#0x6276	
    672c:	f1 d0 10 00 	bis.b	#16,	46(r1)	;#0x0010, 0x002e(r1)
    6730:	2e 00 
    6732:	f1 f0 df ff 	and.b	#-33,	46(r1)	;#0xffdf, 0x002e(r1)
    6736:	2e 00 
    6738:	30 40 76 62 	br	#0x6276	
    673c:	0f 45       	mov	r5,	r15	
    673e:	25 53       	incd	r5		
    6740:	e1 4f 2f 00 	mov.b	@r15,	47(r1)	;0x002f(r1)
    6744:	c1 93 2f 00 	tst.b	47(r1)		;0x002f(r1)
    6748:	02 38       	jl	$+6      	;abs 0x674e
    674a:	30 40 76 62 	br	#0x6276	
    674e:	f1 e3 2f 00 	xor.b	#-1,	47(r1)	;r3 As==11, 0x002f(r1)
    6752:	d1 53 2f 00 	inc.b	47(r1)		;0x002f(r1)
    6756:	ea 3f       	jmp	$-42     	;abs 0x672c
    6758:	f1 d2 2e 00 	bis.b	#8,	46(r1)	;r2 As==11, 0x002e(r1)
    675c:	30 40 76 62 	br	#0x6276	
    6760:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    6764:	02 24       	jz	$+6      	;abs 0x676a
    6766:	30 40 76 62 	br	#0x6276	
    676a:	f1 40 20 00 	mov.b	#32,	42(r1)	;#0x0020, 0x002a(r1)
    676e:	2a 00 
    6770:	30 40 76 62 	br	#0x6276	
    6774:	d1 b3 2e 00 	bit.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    6778:	08 24       	jz	$+18     	;abs 0x678a
    677a:	0f 45       	mov	r5,	r15	
    677c:	25 52       	add	#4,	r5	;r2 As==10
    677e:	b1 4f 30 00 	mov	@r15+,	48(r1)	;0x0030(r1)
    6782:	b1 4f 32 00 	mov	@r15+,	50(r1)	;0x0032(r1)
    6786:	30 40 94 62 	br	#0x6294	
    678a:	0f 45       	mov	r5,	r15	
    678c:	25 53       	incd	r5		
    678e:	a1 4f 30 00 	mov	@r15,	48(r1)	;0x0030(r1)
    6792:	81 43 32 00 	mov	#0,	50(r1)	;r3 As==00, 0x0032(r1)
    6796:	30 40 94 62 	br	#0x6294	
    679a:	0e 4d       	mov	r13,	r14	
    679c:	b0 12 a8 61 	call	#0x61a8	
    67a0:	0f 93       	tst	r15		
    67a2:	02 38       	jl	$+6      	;abs 0x67a8
    67a4:	30 40 5a 62 	br	#0x625a	
    67a8:	1f 42 b2 11 	mov	&0x11b2,r15	
    67ac:	31 50 3c 00 	add	#60,	r1	;#0x003c
    67b0:	34 41       	pop	r4		
    67b2:	35 41       	pop	r5		
    67b4:	36 41       	pop	r6		
    67b6:	37 41       	pop	r7		
    67b8:	38 41       	pop	r8		
    67ba:	39 41       	pop	r9		
    67bc:	3a 41       	pop	r10		
    67be:	3b 41       	pop	r11		
    67c0:	30 41       	ret			

000067c2 <puts>:
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE

MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

    67c2:	0b 12       	push	r11		
    67c4:	0b 4f       	mov	r15,	r11	
// variaveis usadas no menu analog graph
    67c6:	0e 43       	clr	r14		
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
    67c8:	6f 4b       	mov.b	@r11,	r15	
    67ca:	4f 93       	tst.b	r15		
    67cc:	09 24       	jz	$+20     	;abs 0x67e0
    67ce:	8f 11       	sxt	r15		
    67d0:	1b 53       	inc	r11		
    67d2:	b0 12 2e 46 	call	#0x462e	
    67d6:	0e 4f       	mov	r15,	r14	
    67d8:	0f 93       	tst	r15		
    67da:	f6 37       	jge	$-18     	;abs 0x67c8
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

    67dc:	0f 4e       	mov	r14,	r15	
    67de:	06 3c       	jmp	$+14     	;abs 0x67ec
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
    67e0:	0e 93       	tst	r14		
    67e2:	fc 3b       	jl	$-6      	;abs 0x67dc
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
    67e4:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    67e8:	b0 12 2e 46 	call	#0x462e	
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    67ec:	3b 41       	pop	r11		
    67ee:	30 41       	ret			

000067f0 <memchr>:
    67f0:	0b 12       	push	r11		
    67f2:	0b 4f       	mov	r15,	r11	
    67f4:	4c 4e       	mov.b	r14,	r12	
    67f6:	0d 93       	tst	r13		
    67f8:	07 24       	jz	$+16     	;abs 0x6808
    67fa:	0e 4b       	mov	r11,	r14	
    67fc:	6f 4e       	mov.b	@r14,	r15	
    67fe:	1e 53       	inc	r14		
    6800:	4f 9c       	cmp.b	r12,	r15	
    6802:	04 24       	jz	$+10     	;abs 0x680c
    6804:	3d 53       	add	#-1,	r13	;r3 As==11
    6806:	fa 23       	jnz	$-10     	;abs 0x67fc
    6808:	0f 43       	clr	r15		
    680a:	02 3c       	jmp	$+6      	;abs 0x6810
    680c:	0f 4e       	mov	r14,	r15	
    680e:	3f 53       	add	#-1,	r15	;r3 As==11
    6810:	3b 41       	pop	r11		
    6812:	30 41       	ret			

00006814 <__udivmodhi4>:
    6814:	0e ee       	xor	r14,	r14	
    6816:	3b 40 11 00 	mov	#17,	r11	;#0x0011
    681a:	05 3c       	jmp	$+12     	;abs 0x6826
    681c:	0d 10       	rrc	r13		
    681e:	0e 6e       	rlc	r14		
    6820:	0e 9a       	cmp	r10,	r14	
    6822:	01 28       	jnc	$+4      	;abs 0x6826
    6824:	0e 8a       	sub	r10,	r14	
    6826:	0c 6c       	rlc	r12		
    6828:	0d 6d       	rlc	r13		
    682a:	1b 83       	dec	r11		
    682c:	f7 23       	jnz	$-16     	;abs 0x681c
    682e:	30 41       	ret			

00006830 <__divmodhi4>:
    6830:	0d 43       	clr	r13		
    6832:	3c b0 00 80 	bit	#-32768,r12	;#0x8000
    6836:	03 28       	jnc	$+8      	;abs 0x683e
    6838:	3c e3       	inv	r12		
    683a:	1c 53       	inc	r12		
    683c:	2d d2       	bis	#4,	r13	;r2 As==10
    683e:	3a b0 00 80 	bit	#-32768,r10	;#0x8000
    6842:	03 28       	jnc	$+8      	;abs 0x684a
    6844:	3a e3       	inv	r10		
    6846:	1a 53       	inc	r10		
    6848:	3d d2       	bis	#8,	r13	;r2 As==11
    684a:	b0 12 14 68 	call	#0x6814	
    684e:	0d 10       	rrc	r13		
    6850:	2d b2       	bit	#4,	r13	;r2 As==10
    6852:	04 28       	jnc	$+10     	;abs 0x685c
    6854:	3e e3       	inv	r14		
    6856:	1e 53       	inc	r14		
    6858:	3c e3       	inv	r12		
    685a:	1c 53       	inc	r12		
    685c:	3d b2       	bit	#8,	r13	;r2 As==11
    685e:	02 28       	jnc	$+6      	;abs 0x6864
    6860:	3c e3       	inv	r12		
    6862:	1c 53       	inc	r12		
    6864:	30 41       	ret			

00006866 <__udivmodsi4>:
    6866:	0f ef       	xor	r15,	r15	
    6868:	0e ee       	xor	r14,	r14	
    686a:	39 40 21 00 	mov	#33,	r9	;#0x0021
    686e:	0a 3c       	jmp	$+22     	;abs 0x6884
    6870:	08 10       	rrc	r8		
    6872:	0e 6e       	rlc	r14		
    6874:	0f 6f       	rlc	r15		
    6876:	0f 9b       	cmp	r11,	r15	
    6878:	05 28       	jnc	$+12     	;abs 0x6884
    687a:	02 20       	jnz	$+6      	;abs 0x6880
    687c:	0e 9a       	cmp	r10,	r14	
    687e:	02 28       	jnc	$+6      	;abs 0x6884
    6880:	0e 8a       	sub	r10,	r14	
    6882:	0f 7b       	subc	r11,	r15	
    6884:	0c 6c       	rlc	r12		
    6886:	0d 6d       	rlc	r13		
    6888:	08 68       	rlc	r8		
    688a:	19 83       	dec	r9		
    688c:	f1 23       	jnz	$-28     	;abs 0x6870
    688e:	30 41       	ret			

00006890 <__stop_progExec__>:
    6890:	ff 3f       	jmp	$+0      	;abs 0x6890
Disassembly of section .data:

00001100 <ControlCounter>:
	...

00001102 <RCCounter>:
	...

00001104 <MenuCounter>:
	...

00001106 <StatusFlags>:
    1106:	00 00       	bra	@r0		
	...

00001109 <MenuVisible>:
	...

0000110a <SetupDone>:
	...

0000110b <MotorArmed>:
	...

0000110c <MenuStep>:
	...

0000110e <MenuAnalog>:
	...

00001110 <MenuOption>:
    1110:	03 00       	.word	0x0003;	????	Illegal as address instr

00001112 <AnalogSelect>:
    1112:	07 00       	mova	@r0,	r7	

00001113 <AnalogChecked>:
	...

00001114 <AnalogColours>:
    1114:	03 3c       	jmp	$+8      	;abs 0x111c
    1116:	e0 fc fc e3 	and.b	@r12,	0xe3fc	;PC rel. 0xff516
    111a:	1f ff 00 00 	and	0(r15),	r15	;0x0000(r15)

0000111c <PPMSlope>:
    111c:	00 00       	bra	@r0		
    111e:	80 3f       	jmp	$-254    	;abs 0x1020
    1120:	00 00       	bra	@r0		
    1122:	80 3f       	jmp	$-254    	;abs 0x1024
    1124:	00 00       	bra	@r0		
    1126:	80 3f       	jmp	$-254    	;abs 0x1028
    1128:	00 00       	bra	@r0		
    112a:	80 3f       	jmp	$-254    	;abs 0x102c
    112c:	00 00       	bra	@r0		
    112e:	80 3f       	jmp	$-254    	;abs 0x1030
    1130:	00 00       	bra	@r0		
    1132:	80 3f       	jmp	$-254    	;abs 0x1034
    1134:	00 00       	bra	@r0		
    1136:	80 3f       	jmp	$-254    	;abs 0x1038
    1138:	00 00       	bra	@r0		
    113a:	80 3f       	jmp	$-254    	;abs 0x103c

0000113c <PPMOffset>:
	...

0000115c <TimeUpEdge>:
	...

0000116c <PPMValue>:
	...

0000117c <ChannelInput>:
	...

0000118c <LCD_linecount>:
	...

0000118d <LCD_charcount>:
	...

0000118e <color_back>:
	...

0000118f <color_fore>:
    118f:	3c 00 3a 00 	mova	0x003a,	r12	;PC rel. 0x011cb

00001190 <EEPROMFound>:
	...

00001191 <i2c_slave_address>:
    1191:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x01193

00001192 <AnalogOffset>:
	...

000011a2 <AnalogValue>:
	...

000011b2 <total_len>:
	...
Disassembly of section .bss:

000011b4 <__bss_start>:
	...

000011b6 <AnalogGraph>:
	...
Disassembly of section .vectors:

0000ffc0 <InterruptVectors>:
    ffc0:	30 31       	interrupt service routine at 0x3130
    ffc2:	30 31       	interrupt service routine at 0x3130
    ffc4:	30 31       	interrupt service routine at 0x3130
    ffc6:	30 31       	interrupt service routine at 0x3130
    ffc8:	30 31       	interrupt service routine at 0x3130
    ffca:	30 31       	interrupt service routine at 0x3130
    ffcc:	30 31       	interrupt service routine at 0x3130
    ffce:	30 31       	interrupt service routine at 0x3130
    ffd0:	30 31       	interrupt service routine at 0x3130
    ffd2:	30 31       	interrupt service routine at 0x3130
    ffd4:	30 31       	interrupt service routine at 0x3130
    ffd6:	30 31       	interrupt service routine at 0x3130
    ffd8:	30 31       	interrupt service routine at 0x3130
    ffda:	30 31       	interrupt service routine at 0x3130
    ffdc:	30 31       	interrupt service routine at 0x3130
    ffde:	30 31       	interrupt service routine at 0x3130
    ffe0:	30 31       	interrupt service routine at 0x3130
    ffe2:	30 31       	interrupt service routine at 0x3130
    ffe4:	aa 38       	interrupt service routine at 0x38aa
    ffe6:	30 31       	interrupt service routine at 0x3130
    ffe8:	30 31       	interrupt service routine at 0x3130
    ffea:	30 31       	interrupt service routine at 0x3130
    ffec:	30 31       	interrupt service routine at 0x3130
    ffee:	30 31       	interrupt service routine at 0x3130
    fff0:	30 31       	interrupt service routine at 0x3130
    fff2:	5a 38       	interrupt service routine at 0x385a
    fff4:	30 31       	interrupt service routine at 0x3130
    fff6:	30 31       	interrupt service routine at 0x3130
    fff8:	30 31       	interrupt service routine at 0x3130
    fffa:	30 31       	interrupt service routine at 0x3130
    fffc:	30 31       	interrupt service routine at 0x3130
    fffe:	00 31       	interrupt service routine at 0x3100
Disassembly of section .stab:

00000000 <_efartext-0x10000>:
       0:	01 00       	mova	@r0,	r1	
       2:	00 00       	bra	@r0		
       4:	00 00       	bra	@r0		
       6:	9e 10 07 5a 	swpb	23047(r14)	;0x5a07(r14)
       a:	00 00       	bra	@r0		
       c:	01 00       	mova	@r0,	r1	
       e:	00 00       	bra	@r0		
      10:	64 00 00 00 	mova	r0,	&0x40000
      14:	30 31       	jn	$+610    	;abs 0x276
      16:	00 00       	bra	@r0		
      18:	2b 00 00 00 	mova	&0x00000,r11	
      1c:	84 00 00 00 	mova	#0x00000,r4	
      20:	30 31       	jn	$+610    	;abs 0x282
      22:	00 00       	bra	@r0		
      24:	00 00       	bra	@r0		
      26:	00 00       	bra	@r0		
      28:	44 00       	rrcm.a	#1,	r4	
      2a:	28 00 30 31 	mova	&0x03130,r8	
      2e:	00 00       	bra	@r0		
      30:	00 00       	bra	@r0		
      32:	00 00       	bra	@r0		
      34:	44 00       	rrcm.a	#1,	r4	
      36:	2a 00 34 31 	mova	&0x03134,r10	
      3a:	00 00       	bra	@r0		
      3c:	00 00       	bra	@r0		
      3e:	00 00       	bra	@r0		
      40:	44 00       	rrcm.a	#1,	r4	
      42:	63 00 c0 ff 	mova	r0,	&0x3ffc0
      46:	00 00       	bra	@r0		
      48:	00 00       	bra	@r0		
      4a:	00 00       	bra	@r0		
      4c:	44 00       	rrcm.a	#1,	r4	
      4e:	64 00 c2 ff 	mova	r0,	&0x4ffc2
      52:	00 00       	bra	@r0		
      54:	00 00       	bra	@r0		
      56:	00 00       	bra	@r0		
      58:	44 00       	rrcm.a	#1,	r4	
      5a:	65 00 c4 ff 	mova	r0,	&0x5ffc4
      5e:	00 00       	bra	@r0		
      60:	00 00       	bra	@r0		
      62:	00 00       	bra	@r0		
      64:	44 00       	rrcm.a	#1,	r4	
      66:	66 00 c6 ff 	mova	r0,	&0x6ffc6
      6a:	00 00       	bra	@r0		
      6c:	00 00       	bra	@r0		
      6e:	00 00       	bra	@r0		
      70:	44 00       	rrcm.a	#1,	r4	
      72:	67 00 c8 ff 	mova	r0,	&0x7ffc8
      76:	00 00       	bra	@r0		
      78:	00 00       	bra	@r0		
      7a:	00 00       	bra	@r0		
      7c:	44 00       	rrcm.a	#1,	r4	
      7e:	68 00 ca ff 	mova	r0,	&0x8ffca
      82:	00 00       	bra	@r0		
      84:	00 00       	bra	@r0		
      86:	00 00       	bra	@r0		
      88:	44 00       	rrcm.a	#1,	r4	
      8a:	69 00 cc ff 	mova	r0,	&0x9ffcc
      8e:	00 00       	bra	@r0		
      90:	00 00       	bra	@r0		
      92:	00 00       	bra	@r0		
      94:	44 00       	rrcm.a	#1,	r4	
      96:	6a 00 ce ff 	mova	r0,	&0xaffce
      9a:	00 00       	bra	@r0		
      9c:	00 00       	bra	@r0		
      9e:	00 00       	bra	@r0		
      a0:	44 00       	rrcm.a	#1,	r4	
      a2:	6b 00 d0 ff 	mova	r0,	&0xbffd0
      a6:	00 00       	bra	@r0		
      a8:	00 00       	bra	@r0		
      aa:	00 00       	bra	@r0		
      ac:	44 00       	rrcm.a	#1,	r4	
      ae:	6c 00 d2 ff 	mova	r0,	&0xcffd2
      b2:	00 00       	bra	@r0		
      b4:	00 00       	bra	@r0		
      b6:	00 00       	bra	@r0		
      b8:	44 00       	rrcm.a	#1,	r4	
      ba:	6d 00 d4 ff 	mova	r0,	&0xdffd4
      be:	00 00       	bra	@r0		
      c0:	00 00       	bra	@r0		
      c2:	00 00       	bra	@r0		
      c4:	44 00       	rrcm.a	#1,	r4	
      c6:	6e 00 d6 ff 	mova	r0,	&0xeffd6
      ca:	00 00       	bra	@r0		
      cc:	00 00       	bra	@r0		
      ce:	00 00       	bra	@r0		
      d0:	44 00       	rrcm.a	#1,	r4	
      d2:	6f 00 d8 ff 	mova	r0,	&0xfffd8
      d6:	00 00       	bra	@r0		
      d8:	00 00       	bra	@r0		
      da:	00 00       	bra	@r0		
      dc:	44 00       	rrcm.a	#1,	r4	
      de:	70 00 da ff 	mova	r0,	0xffda	;PC rel. 0x000ba
      e2:	00 00       	bra	@r0		
      e4:	00 00       	bra	@r0		
      e6:	00 00       	bra	@r0		
      e8:	44 00       	rrcm.a	#1,	r4	
      ea:	71 00 dc ff 	mova	r0,	-36(r1)	;0xffdc(r1)
      ee:	00 00       	bra	@r0		
      f0:	00 00       	bra	@r0		
      f2:	00 00       	bra	@r0		
      f4:	44 00       	rrcm.a	#1,	r4	
      f6:	72 00 de ff 	mova	r0,	&0xffde	
      fa:	00 00       	bra	@r0		
      fc:	00 00       	bra	@r0		
      fe:	00 00       	bra	@r0		
     100:	44 00       	rrcm.a	#1,	r4	
     102:	74 00 e0 ff 	mova	r0,	-32(r4)	;0xffe0(r4)
     106:	00 00       	bra	@r0		
     108:	00 00       	bra	@r0		
     10a:	00 00       	bra	@r0		
     10c:	44 00       	rrcm.a	#1,	r4	
     10e:	75 00 e2 ff 	mova	r0,	-30(r5)	;0xffe2(r5)
     112:	00 00       	bra	@r0		
     114:	00 00       	bra	@r0		
     116:	00 00       	bra	@r0		
     118:	44 00       	rrcm.a	#1,	r4	
     11a:	76 00 e4 ff 	mova	r0,	-28(r6)	;0xffe4(r6)
     11e:	00 00       	bra	@r0		
     120:	00 00       	bra	@r0		
     122:	00 00       	bra	@r0		
     124:	44 00       	rrcm.a	#1,	r4	
     126:	77 00 e6 ff 	mova	r0,	-26(r7)	;0xffe6(r7)
     12a:	00 00       	bra	@r0		
     12c:	00 00       	bra	@r0		
     12e:	00 00       	bra	@r0		
     130:	44 00       	rrcm.a	#1,	r4	
     132:	78 00 e8 ff 	mova	r0,	-24(r8)	;0xffe8(r8)
     136:	00 00       	bra	@r0		
     138:	00 00       	bra	@r0		
     13a:	00 00       	bra	@r0		
     13c:	44 00       	rrcm.a	#1,	r4	
     13e:	79 00 ea ff 	mova	r0,	-22(r9)	;0xffea(r9)
     142:	00 00       	bra	@r0		
     144:	00 00       	bra	@r0		
     146:	00 00       	bra	@r0		
     148:	44 00       	rrcm.a	#1,	r4	
     14a:	7a 00 ec ff 	mova	r0,	-20(r10);0xffec(r10)
     14e:	00 00       	bra	@r0		
     150:	00 00       	bra	@r0		
     152:	00 00       	bra	@r0		
     154:	44 00       	rrcm.a	#1,	r4	
     156:	7b 00 ee ff 	mova	r0,	-18(r11);0xffee(r11)
     15a:	00 00       	bra	@r0		
     15c:	00 00       	bra	@r0		
     15e:	00 00       	bra	@r0		
     160:	44 00       	rrcm.a	#1,	r4	
     162:	7c 00 f0 ff 	mova	r0,	-16(r12);0xfff0(r12)
     166:	00 00       	bra	@r0		
     168:	00 00       	bra	@r0		
     16a:	00 00       	bra	@r0		
     16c:	44 00       	rrcm.a	#1,	r4	
     16e:	7d 00 f2 ff 	mova	r0,	-14(r13);0xfff2(r13)
     172:	00 00       	bra	@r0		
     174:	00 00       	bra	@r0		
     176:	00 00       	bra	@r0		
     178:	44 00       	rrcm.a	#1,	r4	
     17a:	7e 00 f4 ff 	mova	r0,	-12(r14);0xfff4(r14)
     17e:	00 00       	bra	@r0		
     180:	00 00       	bra	@r0		
     182:	00 00       	bra	@r0		
     184:	44 00       	rrcm.a	#1,	r4	
     186:	7f 00 f6 ff 	mova	r0,	-10(r15);0xfff6(r15)
     18a:	00 00       	bra	@r0		
     18c:	00 00       	bra	@r0		
     18e:	00 00       	bra	@r0		
     190:	44 00       	rrcm.a	#1,	r4	
     192:	80 00 f8 ff 	bra	#0x0fff8	
     196:	00 00       	bra	@r0		
     198:	00 00       	bra	@r0		
     19a:	00 00       	bra	@r0		
     19c:	44 00       	rrcm.a	#1,	r4	
     19e:	81 00 fa ff 	mova	#0x0fffa,r1	
     1a2:	00 00       	bra	@r0		
     1a4:	00 00       	bra	@r0		
     1a6:	00 00       	bra	@r0		
     1a8:	44 00       	rrcm.a	#1,	r4	
     1aa:	82 00 fc ff 	mova	#0x0fffc,r2	
     1ae:	00 00       	bra	@r0		
     1b0:	33 00       	.word	0x0033;	????	Illegal as address instr
     1b2:	00 00       	bra	@r0		
     1b4:	64 00 00 00 	mova	r0,	&0x40000
     1b8:	36 31       	jn	$+622    	;abs 0x426
     1ba:	00 00       	bra	@r0		
     1bc:	63 00 00 00 	mova	r0,	&0x30000
     1c0:	64 00 00 00 	mova	r0,	&0x40000
     1c4:	36 31       	jn	$+622    	;abs 0x432
     1c6:	00 00       	bra	@r0		
     1c8:	6a 00 00 00 	mova	r0,	&0xa0000
     1cc:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x001ce
     1d0:	00 00       	bra	@r0		
     1d2:	00 00       	bra	@r0		
     1d4:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
     1d8:	80 00 00 00 	bra	#0x00000	
     1dc:	00 00       	bra	@r0		
     1de:	00 00       	bra	@r0		
     1e0:	99 00 00 00 	cmpa	#0x00000,r9	
     1e4:	80 00 00 00 	bra	#0x00000	
     1e8:	00 00       	bra	@r0		
     1ea:	00 00       	bra	@r0		
     1ec:	b3 00       	.word	0x00b3;	????	Illegal as address instr
     1ee:	00 00       	bra	@r0		
     1f0:	80 00 00 00 	bra	#0x00000	
     1f4:	00 00       	bra	@r0		
     1f6:	00 00       	bra	@r0		
     1f8:	ec 00       	adda	r0,	r12	
     1fa:	00 00       	bra	@r0		
     1fc:	80 00 00 00 	bra	#0x00000	
     200:	00 00       	bra	@r0		
     202:	00 00       	bra	@r0		
     204:	24 01 00 00 	mova	&0x10000,r4	
     208:	80 00 00 00 	bra	#0x00000	
     20c:	00 00       	bra	@r0		
     20e:	00 00       	bra	@r0		
     210:	66 01 00 00 	mova	r1,	&0x60000
     214:	80 00 00 00 	bra	#0x00000	
     218:	00 00       	bra	@r0		
     21a:	00 00       	bra	@r0		
     21c:	b7 01 00 00 	suba	#0x10000,r7	
     220:	80 00 00 00 	bra	#0x00000	
     224:	00 00       	bra	@r0		
     226:	00 00       	bra	@r0		
     228:	08 02       	mova	#4,	r8	;r2 As==10
     22a:	00 00       	bra	@r0		
     22c:	80 00 00 00 	bra	#0x00000	
     230:	00 00       	bra	@r0		
     232:	00 00       	bra	@r0		
     234:	2e 02 00 00 	mova	&0x20000,r14	
     238:	80 00 00 00 	bra	#0x00000	
     23c:	00 00       	bra	@r0		
     23e:	00 00       	bra	@r0		
     240:	6c 02 00 00 	mova	r2,	&0xc0000
     244:	80 00 00 00 	bra	#0x00000	
     248:	00 00       	bra	@r0		
     24a:	00 00       	bra	@r0		
     24c:	96 02 00 00 	cmpa	#0x20000,r6	
     250:	80 00 00 00 	bra	#0x00000	
     254:	00 00       	bra	@r0		
     256:	00 00       	bra	@r0		
     258:	bf 02 00 00 	suba	#0x20000,r15	
     25c:	80 00 00 00 	bra	#0x00000	
     260:	00 00       	bra	@r0		
     262:	00 00       	bra	@r0		
     264:	d9 02       	cmpa	r2,	r9	
     266:	00 00       	bra	@r0		
     268:	80 00 00 00 	bra	#0x00000	
     26c:	00 00       	bra	@r0		
     26e:	00 00       	bra	@r0		
     270:	f4 02       	suba	r2,	r4	
     272:	00 00       	bra	@r0		
     274:	80 00 00 00 	bra	#0x00000	
     278:	00 00       	bra	@r0		
     27a:	00 00       	bra	@r0		
     27c:	14 03       	mova	#-1,	r4	;r3 As==11
     27e:	00 00       	bra	@r0		
     280:	80 00 00 00 	bra	#0x00000	
     284:	00 00       	bra	@r0		
     286:	00 00       	bra	@r0		
     288:	4d 03       	rrum.a	#1,	r13	
     28a:	00 00       	bra	@r0		
     28c:	80 00 00 00 	bra	#0x00000	
     290:	00 00       	bra	@r0		
     292:	00 00       	bra	@r0		
     294:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
     298:	80 00 00 00 	bra	#0x00000	
     29c:	00 00       	bra	@r0		
     29e:	00 00       	bra	@r0		
     2a0:	8a 03 00 00 	mova	#0x30000,r10	
     2a4:	80 00 00 00 	bra	#0x00000	
     2a8:	00 00       	bra	@r0		
     2aa:	00 00       	bra	@r0		
     2ac:	ae 03 00 00 	adda	#0x30000,r14	
     2b0:	80 00 00 00 	bra	#0x00000	
     2b4:	00 00       	bra	@r0		
     2b6:	00 00       	bra	@r0		
     2b8:	d7 03       	tsta	r7		
     2ba:	00 00       	bra	@r0		
     2bc:	80 00 00 00 	bra	#0x00000	
     2c0:	00 00       	bra	@r0		
     2c2:	00 00       	bra	@r0		
     2c4:	63 00 00 00 	mova	r0,	&0x30000
     2c8:	82 00 00 00 	mova	#0x00000,r2	
     2cc:	20 01 04 00 	bra	&0x10004	
     2d0:	ee 03       	incda	r14		
     2d2:	00 00       	bra	@r0		
     2d4:	82 00 00 00 	mova	#0x00000,r2	
     2d8:	00 00       	bra	@r0		
     2da:	00 00       	bra	@r0		
     2dc:	0f 04       	mova	@r4,	r15	
     2de:	00 00       	bra	@r0		
     2e0:	82 00 00 00 	mova	#0x00000,r2	
     2e4:	13 10       	rrc	#1		;r3 As==01
     2e6:	00 00       	bra	@r0		
     2e8:	43 04       	rrcm.a	#2,	#0	;r3 As==00
     2ea:	00 00       	bra	@r0		
     2ec:	80 00 97 00 	bra	#0x00097	
     2f0:	00 00       	bra	@r0		
     2f2:	00 00       	bra	@r0		
     2f4:	5a 04       	rrcm	#2,	r10	
     2f6:	00 00       	bra	@r0		
     2f8:	80 00 d5 00 	bra	#0x000d5	
     2fc:	00 00       	bra	@r0		
     2fe:	00 00       	bra	@r0		
     300:	6e 04 00 00 	mova	r4,	&0xe0000
     304:	80 00 45 01 	bra	#0x00145	
	...
     310:	a2 00 00 00 	adda	#0x00000,r2	
     314:	00 00       	bra	@r0		
     316:	00 00       	bra	@r0		
     318:	83 04       	.word	0x0483;	????	Illegal as address instr
     31a:	00 00       	bra	@r0		
     31c:	82 00 00 00 	mova	#0x00000,r2	
     320:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
     324:	a8 04 00 00 	adda	#0x40000,r8	
     328:	82 00 00 00 	mova	#0x00000,r2	
	...
     334:	a2 00 00 00 	adda	#0x00000,r2	
     338:	00 00       	bra	@r0		
     33a:	00 00       	bra	@r0		
     33c:	cd 04       	mova	r4,	r13	
     33e:	00 00       	bra	@r0		
     340:	82 00 00 00 	mova	#0x00000,r2	
     344:	91 34       	jge	$+292    	;abs 0x468
     346:	00 00       	bra	@r0		
     348:	f5 04       	suba	r4,	r5	
     34a:	00 00       	bra	@r0		
     34c:	80 00 26 00 	bra	#0x00026	
     350:	00 00       	bra	@r0		
     352:	00 00       	bra	@r0		
     354:	0a 05       	mova	@r5,	r10	
     356:	00 00       	bra	@r0		
     358:	80 00 27 00 	bra	#0x00027	
     35c:	00 00       	bra	@r0		
     35e:	00 00       	bra	@r0		
     360:	20 05 00 00 	bra	&0x50000	
     364:	80 00 29 00 	bra	#0x00029	
     368:	00 00       	bra	@r0		
     36a:	00 00       	bra	@r0		
     36c:	35 05 00 00 	mova	0(r5),	r5	;0x0000(r5)
     370:	80 00 2a 00 	bra	#0x0002a	
     374:	00 00       	bra	@r0		
     376:	00 00       	bra	@r0		
     378:	4b 05       	rram.a	#2,	r11	
     37a:	00 00       	bra	@r0		
     37c:	80 00 2c 00 	bra	#0x0002c	
     380:	00 00       	bra	@r0		
     382:	00 00       	bra	@r0		
     384:	60 05 00 00 	mova	r5,	&0x00000
     388:	80 00 2d 00 	bra	#0x0002d	
     38c:	00 00       	bra	@r0		
     38e:	00 00       	bra	@r0		
     390:	76 05 00 00 	mova	r5,	0(r6)	;0x0000(r6)
     394:	80 00 2f 00 	bra	#0x0002f	
     398:	00 00       	bra	@r0		
     39a:	00 00       	bra	@r0		
     39c:	8b 05 00 00 	mova	#0x50000,r11	
     3a0:	80 00 30 00 	bra	#0x00030	
     3a4:	00 00       	bra	@r0		
     3a6:	00 00       	bra	@r0		
     3a8:	a1 05 00 00 	adda	#0x50000,r1	
     3ac:	80 00 35 00 	bra	#0x00035	
     3b0:	00 00       	bra	@r0		
     3b2:	00 00       	bra	@r0		
     3b4:	b7 05 00 00 	suba	#0x50000,r7	
     3b8:	80 00 36 00 	bra	#0x00036	
	...
     3c4:	a2 00 00 00 	adda	#0x00000,r2	
     3c8:	00 00       	bra	@r0		
     3ca:	00 00       	bra	@r0		
     3cc:	cf 05       	mova	r5,	r15	
     3ce:	00 00       	bra	@r0		
     3d0:	80 00 29 00 	bra	#0x00029	
     3d4:	00 00       	bra	@r0		
     3d6:	00 00       	bra	@r0		
     3d8:	e4 05       	adda	r5,	r4	
     3da:	00 00       	bra	@r0		
     3dc:	80 00 2a 00 	bra	#0x0002a	
     3e0:	00 00       	bra	@r0		
     3e2:	00 00       	bra	@r0		
     3e4:	f9 05       	suba	r5,	r9	
     3e6:	00 00       	bra	@r0		
     3e8:	80 00 2b 00 	bra	#0x0002b	
     3ec:	00 00       	bra	@r0		
     3ee:	00 00       	bra	@r0		
     3f0:	0c 06       	mova	@r6,	r12	
     3f2:	00 00       	bra	@r0		
     3f4:	80 00 2c 00 	bra	#0x0002c	
     3f8:	00 00       	bra	@r0		
     3fa:	00 00       	bra	@r0		
     3fc:	20 06 00 00 	bra	&0x60000	
     400:	80 00 2d 00 	bra	#0x0002d	
     404:	00 00       	bra	@r0		
     406:	00 00       	bra	@r0		
     408:	34 06 00 00 	mova	0(r6),	r4	;0x0000(r6)
     40c:	80 00 2e 00 	bra	#0x0002e	
     410:	00 00       	bra	@r0		
     412:	00 00       	bra	@r0		
     414:	46 06       	rlam.a	#2,	r6	
     416:	00 00       	bra	@r0		
     418:	80 00 30 00 	bra	#0x00030	
     41c:	00 00       	bra	@r0		
     41e:	00 00       	bra	@r0		
     420:	5c 06       	rlam	#2,	r12	
     422:	00 00       	bra	@r0		
     424:	80 00 31 00 	bra	#0x00031	
     428:	00 00       	bra	@r0		
     42a:	00 00       	bra	@r0		
     42c:	73 06       	.word	0x0673;	????	Illegal as address instr
     42e:	00 00       	bra	@r0		
     430:	80 00 32 00 	bra	#0x00032	
     434:	00 00       	bra	@r0		
     436:	00 00       	bra	@r0		
     438:	8a 06 00 00 	mova	#0x60000,r10	
     43c:	80 00 33 00 	bra	#0x00033	
     440:	00 00       	bra	@r0		
     442:	00 00       	bra	@r0		
     444:	a2 06 00 00 	adda	#0x60000,r2	
     448:	80 00 35 00 	bra	#0x00035	
     44c:	00 00       	bra	@r0		
     44e:	00 00       	bra	@r0		
     450:	ba 06 00 00 	suba	#0x60000,r10	
     454:	80 00 36 00 	bra	#0x00036	
     458:	00 00       	bra	@r0		
     45a:	00 00       	bra	@r0		
     45c:	cf 06       	mova	r6,	r15	
     45e:	00 00       	bra	@r0		
     460:	80 00 37 00 	bra	#0x00037	
     464:	00 00       	bra	@r0		
     466:	00 00       	bra	@r0		
     468:	ee 06       	adda	r6,	r14	
     46a:	00 00       	bra	@r0		
     46c:	80 00 39 00 	bra	#0x00039	
     470:	00 00       	bra	@r0		
     472:	00 00       	bra	@r0		
     474:	0c 07       	mova	@r7,	r12	
     476:	00 00       	bra	@r0		
     478:	80 00 3a 00 	bra	#0x0003a	
     47c:	00 00       	bra	@r0		
     47e:	00 00       	bra	@r0		
     480:	34 07 00 00 	mova	0(r7),	r4	;0x0000(r7)
     484:	80 00 3b 00 	bra	#0x0003b	
     488:	00 00       	bra	@r0		
     48a:	00 00       	bra	@r0		
     48c:	5c 07       	rrum	#2,	r12	
     48e:	00 00       	bra	@r0		
     490:	80 00 3c 00 	bra	#0x0003c	
     494:	00 00       	bra	@r0		
     496:	00 00       	bra	@r0		
     498:	72 07 00 00 	mova	r7,	&0x0000	
     49c:	80 00 3d 00 	bra	#0x0003d	
     4a0:	00 00       	bra	@r0		
     4a2:	00 00       	bra	@r0		
     4a4:	86 07 00 00 	mova	#0x70000,r6	
     4a8:	80 00 3e 00 	bra	#0x0003e	
     4ac:	00 00       	bra	@r0		
     4ae:	00 00       	bra	@r0		
     4b0:	9e 07 00 00 	cmpa	#0x70000,r14	
     4b4:	80 00 3f 00 	bra	#0x0003f	
     4b8:	00 00       	bra	@r0		
     4ba:	00 00       	bra	@r0		
     4bc:	b6 07 00 00 	suba	#0x70000,r6	
     4c0:	80 00 40 00 	bra	#0x00040	
     4c4:	00 00       	bra	@r0		
     4c6:	00 00       	bra	@r0		
     4c8:	ca 07       	mova	r7,	r10	
     4ca:	00 00       	bra	@r0		
     4cc:	80 00 41 00 	bra	#0x00041	
     4d0:	00 00       	bra	@r0		
     4d2:	00 00       	bra	@r0		
     4d4:	de 07       	cmpa	r7,	r14	
     4d6:	00 00       	bra	@r0		
     4d8:	80 00 42 00 	bra	#0x00042	
     4dc:	00 00       	bra	@r0		
     4de:	00 00       	bra	@r0		
     4e0:	f3 07       	.word	0x07f3;	????	Illegal as address instr
     4e2:	00 00       	bra	@r0		
     4e4:	80 00 43 00 	bra	#0x00043	
     4e8:	00 00       	bra	@r0		
     4ea:	00 00       	bra	@r0		
     4ec:	09 08       	mova	@r8,	r9	
     4ee:	00 00       	bra	@r0		
     4f0:	80 00 44 00 	bra	#0x00044	
     4f4:	00 00       	bra	@r0		
     4f6:	00 00       	bra	@r0		
     4f8:	1f 08       	mova	@r8+,	r15	
     4fa:	00 00       	bra	@r0		
     4fc:	80 00 45 00 	bra	#0x00045	
     500:	00 00       	bra	@r0		
     502:	00 00       	bra	@r0		
     504:	35 08 00 00 	mova	0(r8),	r5	;0x0000(r8)
     508:	80 00 46 00 	bra	#0x00046	
     50c:	00 00       	bra	@r0		
     50e:	00 00       	bra	@r0		
     510:	4b 08       	rrcm.a	#3,	r11	
     512:	00 00       	bra	@r0		
     514:	80 00 47 00 	bra	#0x00047	
     518:	00 00       	bra	@r0		
     51a:	00 00       	bra	@r0		
     51c:	65 08 00 00 	mova	r8,	&0x50000
     520:	80 00 48 00 	bra	#0x00048	
     524:	00 00       	bra	@r0		
     526:	00 00       	bra	@r0		
     528:	7e 08 00 00 	mova	r8,	0(r14)	;0x0000(r14)
     52c:	80 00 49 00 	bra	#0x00049	
	...
     538:	a2 00 00 00 	adda	#0x00000,r2	
     53c:	00 00       	bra	@r0		
     53e:	00 00       	bra	@r0		
     540:	92 08 00 00 	cmpa	#0x80000,r2	
     544:	82 00 00 00 	mova	#0x00000,r2	
     548:	76 0d 00 00 	mova	r13,	0(r6)	;0x0000(r6)
     54c:	c6 08       	mova	r8,	r6	
     54e:	00 00       	bra	@r0		
     550:	80 00 2b 00 	bra	#0x0002b	
     554:	00 00       	bra	@r0		
     556:	00 00       	bra	@r0		
     558:	e3 08       	.word	0x08e3;	????	Illegal as address instr
     55a:	00 00       	bra	@r0		
     55c:	80 00 6e 00 	bra	#0x0006e	
	...
     568:	a2 00 00 00 	adda	#0x00000,r2	
	...
     574:	a2 00 00 00 	adda	#0x00000,r2	
     578:	00 00       	bra	@r0		
     57a:	00 00       	bra	@r0		
     57c:	f8 08       	suba	r8,	r8	
     57e:	00 00       	bra	@r0		
     580:	82 00 00 00 	mova	#0x00000,r2	
     584:	3c 1a       	.word	0x1a3c;	????	
     586:	00 00       	bra	@r0		
     588:	0f 04       	mova	@r4,	r15	
     58a:	00 00       	bra	@r0		
     58c:	82 00 00 00 	mova	#0x00000,r2	
	...
     598:	a2 00 00 00 	adda	#0x00000,r2	
     59c:	00 00       	bra	@r0		
     59e:	00 00       	bra	@r0		
     5a0:	1a 09       	mova	@r9+,	r10	
     5a2:	00 00       	bra	@r0		
     5a4:	80 00 3b 00 	bra	#0x0003b	
     5a8:	00 00       	bra	@r0		
     5aa:	00 00       	bra	@r0		
     5ac:	51 09       	rram	#3,	r1	
     5ae:	00 00       	bra	@r0		
     5b0:	80 00 43 00 	bra	#0x00043	
	...
     5bc:	a2 00 00 00 	adda	#0x00000,r2	
     5c0:	00 00       	bra	@r0		
     5c2:	00 00       	bra	@r0		
     5c4:	89 09 00 00 	mova	#0x90000,r9	
     5c8:	82 00 00 00 	mova	#0x00000,r2	
     5cc:	00 00       	bra	@r0		
     5ce:	00 00       	bra	@r0		
     5d0:	ab 09 00 00 	adda	#0x90000,r11	
     5d4:	82 00 00 00 	mova	#0x00000,r2	
	...
     5e0:	a2 00 00 00 	adda	#0x00000,r2	
	...
     5ec:	a2 00 00 00 	adda	#0x00000,r2	
     5f0:	00 00       	bra	@r0		
     5f2:	00 00       	bra	@r0		
     5f4:	cf 09       	mova	r9,	r15	
     5f6:	00 00       	bra	@r0		
     5f8:	82 00 00 00 	mova	#0x00000,r2	
     5fc:	00 00       	bra	@r0		
     5fe:	00 00       	bra	@r0		
     600:	f6 09       	suba	r9,	r6	
     602:	00 00       	bra	@r0		
     604:	82 00 00 00 	mova	#0x00000,r2	
	...
     610:	a2 00 00 00 	adda	#0x00000,r2	
     614:	00 00       	bra	@r0		
     616:	00 00       	bra	@r0		
     618:	1c 0a       	mova	@r10+,	r12	
     61a:	00 00       	bra	@r0		
     61c:	82 00 00 00 	mova	#0x00000,r2	
     620:	00 00       	bra	@r0		
     622:	00 00       	bra	@r0		
     624:	43 0a       	rlam.a	#3,	#0	;r3 As==00
     626:	00 00       	bra	@r0		
     628:	82 00 00 00 	mova	#0x00000,r2	
     62c:	c1 68 00 00 	addc.b	r8,	0(r1)	;0x0000(r1)
     630:	72 0a 00 00 	mova	r10,	&0x0000	
     634:	80 00 00 00 	bra	#0x00000	
     638:	00 00       	bra	@r0		
     63a:	00 00       	bra	@r0		
     63c:	2a 0b 00 00 	mova	&0xb0000,r10	
     640:	80 00 27 00 	bra	#0x00027	
     644:	00 00       	bra	@r0		
     646:	00 00       	bra	@r0		
     648:	46 0b       	rrum.a	#3,	r6	
     64a:	00 00       	bra	@r0		
     64c:	80 00 00 00 	bra	#0x00000	
     650:	00 00       	bra	@r0		
     652:	00 00       	bra	@r0		
     654:	e5 0b       	adda	r11,	r5	
     656:	00 00       	bra	@r0		
     658:	80 00 00 00 	bra	#0x00000	
	...
     664:	a2 00 00 00 	adda	#0x00000,r2	
	...
     670:	a2 00 00 00 	adda	#0x00000,r2	
     674:	00 00       	bra	@r0		
     676:	00 00       	bra	@r0		
     678:	41 0c       	rrcm.a	#4,	r1	
     67a:	00 00       	bra	@r0		
     67c:	82 00 00 00 	mova	#0x00000,r2	
	...
     688:	a2 00 00 00 	adda	#0x00000,r2	
     68c:	00 00       	bra	@r0		
     68e:	00 00       	bra	@r0		
     690:	68 0c 00 00 	mova	r12,	&0x80000
     694:	82 00 00 00 	mova	#0x00000,r2	
     698:	3e 8a       	sub	@r10+,	r14	
     69a:	00 00       	bra	@r0		
     69c:	91 0c 00 00 	cmpa	#0xc0000,r1	
     6a0:	80 00 84 00 	bra	#0x00084	
     6a4:	00 00       	bra	@r0		
     6a6:	00 00       	bra	@r0		
     6a8:	1a 0d       	mova	@r13+,	r10	
     6aa:	00 00       	bra	@r0		
     6ac:	80 00 94 00 	bra	#0x00094	
     6b0:	00 00       	bra	@r0		
     6b2:	00 00       	bra	@r0		
     6b4:	eb 0d       	adda	r13,	r11	
     6b6:	00 00       	bra	@r0		
     6b8:	80 00 00 00 	bra	#0x00000	
	...
     6c4:	a2 00 00 00 	adda	#0x00000,r2	
     6c8:	00 00       	bra	@r0		
     6ca:	00 00       	bra	@r0		
     6cc:	eb 0e       	adda	r14,	r11	
     6ce:	00 00       	bra	@r0		
     6d0:	82 00 00 00 	mova	#0x00000,r2	
     6d4:	90 a7 00 00 	dadd	0(r7),	0x0f14	;0x0000(r7), PC rel. 0x015ee
     6d8:	14 0f 
     6da:	00 00       	bra	@r0		
     6dc:	80 00 4c 00 	bra	#0x0004c	
     6e0:	00 00       	bra	@r0		
     6e2:	00 00       	bra	@r0		
     6e4:	d5 0f       	cmpa	r15,	r5	
     6e6:	00 00       	bra	@r0		
     6e8:	80 00 5b 00 	bra	#0x0005b	
     6ec:	00 00       	bra	@r0		
     6ee:	00 00       	bra	@r0		
     6f0:	95 10 00 00 	swpb	0(r5)		;0x0000(r5)
     6f4:	80 00 00 00 	bra	#0x00000	
	...
     700:	a2 00 00 00 	adda	#0x00000,r2	
     704:	00 00       	bra	@r0		
     706:	00 00       	bra	@r0		
     708:	de 11       	.word	0x11de;	????	
     70a:	00 00       	bra	@r0		
     70c:	82 00 00 00 	mova	#0x00000,r2	
	...
     718:	a2 00 00 00 	adda	#0x00000,r2	
     71c:	00 00       	bra	@r0		
     71e:	00 00       	bra	@r0		
     720:	0c 12       	push	r12		
     722:	00 00       	bra	@r0		
     724:	82 00 00 00 	mova	#0x00000,r2	
	...
     730:	a2 00 00 00 	adda	#0x00000,r2	
     734:	00 00       	bra	@r0		
     736:	00 00       	bra	@r0		
     738:	34 12       	push	@r4+		
     73a:	00 00       	bra	@r0		
     73c:	82 00 00 00 	mova	#0x00000,r2	
	...
     748:	a2 00 00 00 	adda	#0x00000,r2	
     74c:	00 00       	bra	@r0		
     74e:	00 00       	bra	@r0		
     750:	5c 12 00 00 	push.b	0(r12)		;0x0000(r12)
     754:	82 00 00 00 	mova	#0x00000,r2	
     758:	0c af       	dadd	r15,	r12	
     75a:	00 00       	bra	@r0		
     75c:	84 12       	call	r4		
     75e:	00 00       	bra	@r0		
     760:	80 00 2a 00 	bra	#0x0002a	
     764:	00 00       	bra	@r0		
     766:	00 00       	bra	@r0		
     768:	4b 13       	calla	r11		
     76a:	00 00       	bra	@r0		
     76c:	80 00 36 00 	bra	#0x00036	
     770:	00 00       	bra	@r0		
     772:	00 00       	bra	@r0		
     774:	f7 13       	calla			
     776:	00 00       	bra	@r0		
     778:	80 00 4a 00 	bra	#0x0004a	
     77c:	00 00       	bra	@r0		
     77e:	00 00       	bra	@r0		
     780:	12 15       	pushm	#2,	r2	
     782:	00 00       	bra	@r0		
     784:	80 00 00 00 	bra	#0x00000	
	...
     790:	a2 00 00 00 	adda	#0x00000,r2	
     794:	00 00       	bra	@r0		
     796:	00 00       	bra	@r0		
     798:	7b 15       	pushm	#8,	r11	
     79a:	00 00       	bra	@r0		
     79c:	82 00 00 00 	mova	#0x00000,r2	
	...
     7a8:	a2 00 00 00 	adda	#0x00000,r2	
     7ac:	00 00       	bra	@r0		
     7ae:	00 00       	bra	@r0		
     7b0:	a3 15       	pushm	#11,	#0	;r3 As==00
     7b2:	00 00       	bra	@r0		
     7b4:	82 00 00 00 	mova	#0x00000,r2	
	...
     7c0:	a2 00 00 00 	adda	#0x00000,r2	
     7c4:	00 00       	bra	@r0		
     7c6:	00 00       	bra	@r0		
     7c8:	c9 15       	pushm	#13,	r9	
     7ca:	00 00       	bra	@r0		
     7cc:	82 00 00 00 	mova	#0x00000,r2	
	...
     7d8:	a2 00 00 00 	adda	#0x00000,r2	
	...
     7e4:	a2 00 00 00 	adda	#0x00000,r2	
     7e8:	00 00       	bra	@r0		
     7ea:	00 00       	bra	@r0		
     7ec:	f2 15       	pushm	#16,	r2	
     7ee:	00 00       	bra	@r0		
     7f0:	82 00 00 00 	mova	#0x00000,r2	
	...
     7fc:	a2 00 00 00 	adda	#0x00000,r2	
     800:	00 00       	bra	@r0		
     802:	00 00       	bra	@r0		
     804:	fa 15       	pushm	#16,	r10	
     806:	00 00       	bra	@r0		
     808:	82 00 00 00 	mova	#0x00000,r2	
	...
     814:	a2 00 00 00 	adda	#0x00000,r2	
     818:	00 00       	bra	@r0		
     81a:	00 00       	bra	@r0		
     81c:	03 16       	popm.a	#1,	#0	;r3 As==00
     81e:	00 00       	bra	@r0		
     820:	82 00 00 00 	mova	#0x00000,r2	
	...
     82c:	a2 00 00 00 	adda	#0x00000,r2	
     830:	00 00       	bra	@r0		
     832:	00 00       	bra	@r0		
     834:	0d 16       	popm.a	#1,	r13	
     836:	00 00       	bra	@r0		
     838:	82 00 00 00 	mova	#0x00000,r2	
     83c:	f0 0f       	suba	r15,	r0	
     83e:	00 00       	bra	@r0		
     840:	16 16       	popm.a	#2,	r7	
     842:	00 00       	bra	@r0		
     844:	80 00 2a 00 	bra	#0x0002a	
	...
     850:	a2 00 00 00 	adda	#0x00000,r2	
     854:	00 00       	bra	@r0		
     856:	00 00       	bra	@r0		
     858:	62 16       	popm.a	#7,	r8	
     85a:	00 00       	bra	@r0		
     85c:	82 00 00 00 	mova	#0x00000,r2	
	...
     868:	a2 00 00 00 	adda	#0x00000,r2	
     86c:	00 00       	bra	@r0		
     86e:	00 00       	bra	@r0		
     870:	68 16       	popm.a	#7,	r14	
     872:	00 00       	bra	@r0		
     874:	82 00 00 00 	mova	#0x00000,r2	
     878:	bc 46 00 00 	mov	@r6+,	0(r12)	;0x0000(r12)
     87c:	74 16       	popm.a	#8,	r11	
     87e:	00 00       	bra	@r0		
     880:	80 00 00 00 	bra	#0x00000	
     884:	00 00       	bra	@r0		
     886:	00 00       	bra	@r0		
     888:	fa 16       	popm.a	#16,	r9	
     88a:	00 00       	bra	@r0		
     88c:	80 00 21 00 	bra	#0x00021	
     890:	00 00       	bra	@r0		
     892:	00 00       	bra	@r0		
     894:	16 17       	popm	#2,	r7	
     896:	00 00       	bra	@r0		
     898:	80 00 00 00 	bra	#0x00000	
     89c:	00 00       	bra	@r0		
     89e:	00 00       	bra	@r0		
     8a0:	6b 17       	popm	#7,	r1	
     8a2:	00 00       	bra	@r0		
     8a4:	80 00 29 00 	bra	#0x00029	
	...
     8b0:	a2 00 00 00 	adda	#0x00000,r2	
     8b4:	00 00       	bra	@r0		
     8b6:	00 00       	bra	@r0		
     8b8:	86 17       	popm	#9,	r14	
     8ba:	00 00       	bra	@r0		
     8bc:	24 00 2d 00 	mova	&0x0002d,r4	
     8c0:	36 31       	jn	$+622    	;abs 0xb2e
     8c2:	00 00       	bra	@r0		
     8c4:	00 00       	bra	@r0		
     8c6:	00 00       	bra	@r0		
     8c8:	44 00       	rrcm.a	#1,	r4	
     8ca:	2d 00 00 00 	mova	&0x00000,r13	
     8ce:	00 00       	bra	@r0		
     8d0:	00 00       	bra	@r0		
     8d2:	00 00       	bra	@r0		
     8d4:	44 00       	rrcm.a	#1,	r4	
     8d6:	2e 00 04 00 	mova	&0x00004,r14	
     8da:	00 00       	bra	@r0		
     8dc:	00 00       	bra	@r0		
     8de:	00 00       	bra	@r0		
     8e0:	44 00       	rrcm.a	#1,	r4	
     8e2:	31 00 0a 00 	mova	0x000a,	r1	;PC rel. 0x008ee
     8e6:	00 00       	bra	@r0		
     8e8:	00 00       	bra	@r0		
     8ea:	00 00       	bra	@r0		
     8ec:	44 00       	rrcm.a	#1,	r4	
     8ee:	33 00       	.word	0x0033;	????	Illegal as address instr
     8f0:	0e 00       	mova	@r0,	r14	
     8f2:	00 00       	bra	@r0		
     8f4:	00 00       	bra	@r0		
     8f6:	00 00       	bra	@r0		
     8f8:	44 00       	rrcm.a	#1,	r4	
     8fa:	35 00 14 00 	mova	0x0014,	r5	;PC rel. 0x00910
     8fe:	00 00       	bra	@r0		
     900:	00 00       	bra	@r0		
     902:	00 00       	bra	@r0		
     904:	44 00       	rrcm.a	#1,	r4	
     906:	36 00 18 00 	mova	0x0018,	r6	;PC rel. 0x00920
     90a:	00 00       	bra	@r0		
     90c:	00 00       	bra	@r0		
     90e:	00 00       	bra	@r0		
     910:	44 00       	rrcm.a	#1,	r4	
     912:	37 00 1c 00 	mova	0x001c,	r7	;PC rel. 0x00930
     916:	00 00       	bra	@r0		
     918:	00 00       	bra	@r0		
     91a:	00 00       	bra	@r0		
     91c:	44 00       	rrcm.a	#1,	r4	
     91e:	41 00       	rrcm.a	#1,	r1	
     920:	20 00 00 00 	bra	&0x00000	
     924:	00 00       	bra	@r0		
     926:	00 00       	bra	@r0		
     928:	44 00       	rrcm.a	#1,	r4	
     92a:	42 00       	rrcm.a	#1,	r2	
     92c:	28 00 00 00 	mova	&0x00000,r8	
     930:	00 00       	bra	@r0		
     932:	00 00       	bra	@r0		
     934:	44 00       	rrcm.a	#1,	r4	
     936:	43 00       	rrcm.a	#1,	#0	;r3 As==00
     938:	2c 00 00 00 	mova	&0x00000,r12	
     93c:	00 00       	bra	@r0		
     93e:	00 00       	bra	@r0		
     940:	44 00       	rrcm.a	#1,	r4	
     942:	46 00       	rrcm.a	#1,	r6	
     944:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x00946
     948:	00 00       	bra	@r0		
     94a:	00 00       	bra	@r0		
     94c:	44 00       	rrcm.a	#1,	r4	
     94e:	49 00       	rrcm.a	#1,	r9	
     950:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x00952
     954:	00 00       	bra	@r0		
     956:	00 00       	bra	@r0		
     958:	44 00       	rrcm.a	#1,	r4	
     95a:	50 00       	rrcm	#1,	r0	
     95c:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0095e
     960:	00 00       	bra	@r0		
     962:	00 00       	bra	@r0		
     964:	44 00       	rrcm.a	#1,	r4	
     966:	57 00       	rrcm	#1,	r7	
     968:	42 00       	rrcm.a	#1,	r2	
     96a:	00 00       	bra	@r0		
     96c:	00 00       	bra	@r0		
     96e:	00 00       	bra	@r0		
     970:	44 00       	rrcm.a	#1,	r4	
     972:	58 00       	rrcm	#1,	r8	
     974:	4a 00       	rrcm.a	#1,	r10	
     976:	00 00       	bra	@r0		
     978:	00 00       	bra	@r0		
     97a:	00 00       	bra	@r0		
     97c:	44 00       	rrcm.a	#1,	r4	
     97e:	59 00       	rrcm	#1,	r9	
     980:	4e 00       	rrcm.a	#1,	r14	
     982:	00 00       	bra	@r0		
     984:	00 00       	bra	@r0		
     986:	00 00       	bra	@r0		
     988:	44 00       	rrcm.a	#1,	r4	
     98a:	51 00       	rrcm	#1,	r1	
     98c:	54 00       	rrcm	#1,	r4	
     98e:	00 00       	bra	@r0		
     990:	00 00       	bra	@r0		
     992:	00 00       	bra	@r0		
     994:	44 00       	rrcm.a	#1,	r4	
     996:	52 00       	rrcm	#1,	r2	
     998:	5c 00       	rrcm	#1,	r12	
     99a:	00 00       	bra	@r0		
     99c:	00 00       	bra	@r0		
     99e:	00 00       	bra	@r0		
     9a0:	44 00       	rrcm.a	#1,	r4	
     9a2:	53 00       	rrcm	#1,	#0	;r3 As==00
     9a4:	60 00 00 00 	mova	r0,	&0x00000
     9a8:	00 00       	bra	@r0		
     9aa:	00 00       	bra	@r0		
     9ac:	44 00       	rrcm.a	#1,	r4	
     9ae:	4a 00       	rrcm.a	#1,	r10	
     9b0:	66 00 00 00 	mova	r0,	&0x60000
     9b4:	00 00       	bra	@r0		
     9b6:	00 00       	bra	@r0		
     9b8:	44 00       	rrcm.a	#1,	r4	
     9ba:	4b 00       	rrcm.a	#1,	r11	
     9bc:	6e 00 00 00 	mova	r0,	&0xe0000
     9c0:	00 00       	bra	@r0		
     9c2:	00 00       	bra	@r0		
     9c4:	44 00       	rrcm.a	#1,	r4	
     9c6:	4c 00       	rrcm.a	#1,	r12	
     9c8:	72 00 00 00 	mova	r0,	&0x0000	
     9cc:	00 00       	bra	@r0		
     9ce:	00 00       	bra	@r0		
     9d0:	44 00       	rrcm.a	#1,	r4	
     9d2:	44 00       	rrcm.a	#1,	r4	
     9d4:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
     9d8:	00 00       	bra	@r0		
     9da:	00 00       	bra	@r0		
     9dc:	44 00       	rrcm.a	#1,	r4	
     9de:	5d 00       	rrcm	#1,	r13	
     9e0:	7e 00 00 00 	mova	r0,	0(r14)	;0x0000(r14)
     9e4:	00 00       	bra	@r0		
     9e6:	00 00       	bra	@r0		
     9e8:	24 00 00 00 	mova	&0x00000,r4	
     9ec:	82 00 00 00 	mova	#0x00000,r2	
     9f0:	92 17       	popm	#10,	r11	
     9f2:	00 00       	bra	@r0		
     9f4:	24 00 5f 00 	mova	&0x0005f,r4	
     9f8:	82 32       	jn	$-762    	;abs 0x6fe
     9fa:	00 00       	bra	@r0		
     9fc:	00 00       	bra	@r0		
     9fe:	00 00       	bra	@r0		
     a00:	44 00       	rrcm.a	#1,	r4	
     a02:	5f 00       	rrcm	#1,	r15	
	...
     a0c:	44 00       	rrcm.a	#1,	r4	
     a0e:	60 00 00 00 	mova	r0,	&0x00000
     a12:	00 00       	bra	@r0		
     a14:	00 00       	bra	@r0		
     a16:	00 00       	bra	@r0		
     a18:	44 00       	rrcm.a	#1,	r4	
     a1a:	62 00 1e 00 	mova	r0,	&0x2001e
     a1e:	00 00       	bra	@r0		
     a20:	00 00       	bra	@r0		
     a22:	00 00       	bra	@r0		
     a24:	44 00       	rrcm.a	#1,	r4	
     a26:	63 00 28 00 	mova	r0,	&0x30028
     a2a:	00 00       	bra	@r0		
     a2c:	00 00       	bra	@r0		
     a2e:	00 00       	bra	@r0		
     a30:	44 00       	rrcm.a	#1,	r4	
     a32:	65 00 30 00 	mova	r0,	&0x50030
     a36:	00 00       	bra	@r0		
     a38:	00 00       	bra	@r0		
     a3a:	00 00       	bra	@r0		
     a3c:	44 00       	rrcm.a	#1,	r4	
     a3e:	66 00 36 00 	mova	r0,	&0x60036
     a42:	00 00       	bra	@r0		
     a44:	00 00       	bra	@r0		
     a46:	00 00       	bra	@r0		
     a48:	44 00       	rrcm.a	#1,	r4	
     a4a:	67 00 3e 00 	mova	r0,	&0x7003e
     a4e:	00 00       	bra	@r0		
     a50:	00 00       	bra	@r0		
     a52:	00 00       	bra	@r0		
     a54:	44 00       	rrcm.a	#1,	r4	
     a56:	68 00 46 00 	mova	r0,	&0x80046
     a5a:	00 00       	bra	@r0		
     a5c:	00 00       	bra	@r0		
     a5e:	00 00       	bra	@r0		
     a60:	44 00       	rrcm.a	#1,	r4	
     a62:	69 00 4e 00 	mova	r0,	&0x9004e
     a66:	00 00       	bra	@r0		
     a68:	00 00       	bra	@r0		
     a6a:	00 00       	bra	@r0		
     a6c:	44 00       	rrcm.a	#1,	r4	
     a6e:	6a 00 52 00 	mova	r0,	&0xa0052
     a72:	00 00       	bra	@r0		
     a74:	00 00       	bra	@r0		
     a76:	00 00       	bra	@r0		
     a78:	44 00       	rrcm.a	#1,	r4	
     a7a:	bb 00 54 00 	suba	#0x00054,r11	
     a7e:	00 00       	bra	@r0		
     a80:	00 00       	bra	@r0		
     a82:	00 00       	bra	@r0		
     a84:	44 00       	rrcm.a	#1,	r4	
     a86:	6d 00 56 00 	mova	r0,	&0xd0056
     a8a:	00 00       	bra	@r0		
     a8c:	00 00       	bra	@r0		
     a8e:	00 00       	bra	@r0		
     a90:	44 00       	rrcm.a	#1,	r4	
     a92:	6e 00 60 00 	mova	r0,	&0xe0060
     a96:	00 00       	bra	@r0		
     a98:	00 00       	bra	@r0		
     a9a:	00 00       	bra	@r0		
     a9c:	44 00       	rrcm.a	#1,	r4	
     a9e:	70 00 68 00 	mova	r0,	0x0068	;PC rel. 0x00b08
     aa2:	00 00       	bra	@r0		
     aa4:	00 00       	bra	@r0		
     aa6:	00 00       	bra	@r0		
     aa8:	44 00       	rrcm.a	#1,	r4	
     aaa:	71 00 76 00 	mova	r0,	118(r1)	;0x0076(r1)
     aae:	00 00       	bra	@r0		
     ab0:	00 00       	bra	@r0		
     ab2:	00 00       	bra	@r0		
     ab4:	44 00       	rrcm.a	#1,	r4	
     ab6:	74 00 7e 00 	mova	r0,	126(r4)	;0x007e(r4)
     aba:	00 00       	bra	@r0		
     abc:	00 00       	bra	@r0		
     abe:	00 00       	bra	@r0		
     ac0:	44 00       	rrcm.a	#1,	r4	
     ac2:	75 00 88 00 	mova	r0,	136(r5)	;0x0088(r5)
     ac6:	00 00       	bra	@r0		
     ac8:	00 00       	bra	@r0		
     aca:	00 00       	bra	@r0		
     acc:	44 00       	rrcm.a	#1,	r4	
     ace:	7e 00 8c 00 	mova	r0,	140(r14);0x008c(r14)
     ad2:	00 00       	bra	@r0		
     ad4:	00 00       	bra	@r0		
     ad6:	00 00       	bra	@r0		
     ad8:	44 00       	rrcm.a	#1,	r4	
     ada:	7f 00 94 00 	mova	r0,	148(r15);0x0094(r15)
     ade:	00 00       	bra	@r0		
     ae0:	00 00       	bra	@r0		
     ae2:	00 00       	bra	@r0		
     ae4:	44 00       	rrcm.a	#1,	r4	
     ae6:	82 00 9a 00 	mova	#0x0009a,r2	
     aea:	00 00       	bra	@r0		
     aec:	00 00       	bra	@r0		
     aee:	00 00       	bra	@r0		
     af0:	44 00       	rrcm.a	#1,	r4	
     af2:	bb 00 9a 00 	suba	#0x0009a,r11	
     af6:	00 00       	bra	@r0		
     af8:	00 00       	bra	@r0		
     afa:	00 00       	bra	@r0		
     afc:	44 00       	rrcm.a	#1,	r4	
     afe:	bb 00 9c 00 	suba	#0x0009c,r11	
     b02:	00 00       	bra	@r0		
     b04:	00 00       	bra	@r0		
     b06:	00 00       	bra	@r0		
     b08:	44 00       	rrcm.a	#1,	r4	
     b0a:	78 00 9e 00 	mova	r0,	158(r8)	;0x009e(r8)
     b0e:	00 00       	bra	@r0		
     b10:	00 00       	bra	@r0		
     b12:	00 00       	bra	@r0		
     b14:	44 00       	rrcm.a	#1,	r4	
     b16:	79 00 a6 00 	mova	r0,	166(r9)	;0x00a6(r9)
     b1a:	00 00       	bra	@r0		
     b1c:	00 00       	bra	@r0		
     b1e:	00 00       	bra	@r0		
     b20:	44 00       	rrcm.a	#1,	r4	
     b22:	85 00 ae 00 	mova	#0x000ae,r5	
     b26:	00 00       	bra	@r0		
     b28:	00 00       	bra	@r0		
     b2a:	00 00       	bra	@r0		
     b2c:	44 00       	rrcm.a	#1,	r4	
     b2e:	86 00 b8 00 	mova	#0x000b8,r6	
     b32:	00 00       	bra	@r0		
     b34:	00 00       	bra	@r0		
     b36:	00 00       	bra	@r0		
     b38:	44 00       	rrcm.a	#1,	r4	
     b3a:	88 00 c0 00 	mova	#0x000c0,r8	
     b3e:	00 00       	bra	@r0		
     b40:	00 00       	bra	@r0		
     b42:	00 00       	bra	@r0		
     b44:	44 00       	rrcm.a	#1,	r4	
     b46:	89 00 ca 00 	mova	#0x000ca,r9	
     b4a:	00 00       	bra	@r0		
     b4c:	00 00       	bra	@r0		
     b4e:	00 00       	bra	@r0		
     b50:	44 00       	rrcm.a	#1,	r4	
     b52:	8a 00 d8 00 	mova	#0x000d8,r10	
     b56:	00 00       	bra	@r0		
     b58:	00 00       	bra	@r0		
     b5a:	00 00       	bra	@r0		
     b5c:	44 00       	rrcm.a	#1,	r4	
     b5e:	8b 00 e0 00 	mova	#0x000e0,r11	
     b62:	00 00       	bra	@r0		
     b64:	00 00       	bra	@r0		
     b66:	00 00       	bra	@r0		
     b68:	44 00       	rrcm.a	#1,	r4	
     b6a:	8c 00 e8 00 	mova	#0x000e8,r12	
     b6e:	00 00       	bra	@r0		
     b70:	00 00       	bra	@r0		
     b72:	00 00       	bra	@r0		
     b74:	44 00       	rrcm.a	#1,	r4	
     b76:	9c 00 ee 00 	cmpa	#0x000ee,r12	
     b7a:	00 00       	bra	@r0		
     b7c:	00 00       	bra	@r0		
     b7e:	00 00       	bra	@r0		
     b80:	44 00       	rrcm.a	#1,	r4	
     b82:	9e 00 f2 00 	cmpa	#0x000f2,r14	
     b86:	00 00       	bra	@r0		
     b88:	00 00       	bra	@r0		
     b8a:	00 00       	bra	@r0		
     b8c:	44 00       	rrcm.a	#1,	r4	
     b8e:	bb 00 f2 00 	suba	#0x000f2,r11	
     b92:	00 00       	bra	@r0		
     b94:	00 00       	bra	@r0		
     b96:	00 00       	bra	@r0		
     b98:	44 00       	rrcm.a	#1,	r4	
     b9a:	93 00       	.word	0x0093;	????	Illegal as address instr
     b9c:	f4 00       	suba	r0,	r4	
     b9e:	00 00       	bra	@r0		
     ba0:	00 00       	bra	@r0		
     ba2:	00 00       	bra	@r0		
     ba4:	44 00       	rrcm.a	#1,	r4	
     ba6:	94 00 fe 00 	cmpa	#0x000fe,r4	
     baa:	00 00       	bra	@r0		
     bac:	00 00       	bra	@r0		
     bae:	00 00       	bra	@r0		
     bb0:	44 00       	rrcm.a	#1,	r4	
     bb2:	96 00 06 01 	cmpa	#0x00106,r6	
     bb6:	00 00       	bra	@r0		
     bb8:	00 00       	bra	@r0		
     bba:	00 00       	bra	@r0		
     bbc:	44 00       	rrcm.a	#1,	r4	
     bbe:	97 00 10 01 	cmpa	#0x00110,r7	
     bc2:	00 00       	bra	@r0		
     bc4:	00 00       	bra	@r0		
     bc6:	00 00       	bra	@r0		
     bc8:	44 00       	rrcm.a	#1,	r4	
     bca:	98 00 1e 01 	cmpa	#0x0011e,r8	
     bce:	00 00       	bra	@r0		
     bd0:	00 00       	bra	@r0		
     bd2:	00 00       	bra	@r0		
     bd4:	44 00       	rrcm.a	#1,	r4	
     bd6:	99 00 26 01 	cmpa	#0x00126,r9	
     bda:	00 00       	bra	@r0		
     bdc:	00 00       	bra	@r0		
     bde:	00 00       	bra	@r0		
     be0:	44 00       	rrcm.a	#1,	r4	
     be2:	9a 00 2e 01 	cmpa	#0x0012e,r10	
     be6:	00 00       	bra	@r0		
     be8:	00 00       	bra	@r0		
     bea:	00 00       	bra	@r0		
     bec:	44 00       	rrcm.a	#1,	r4	
     bee:	ac 00 32 01 	adda	#0x00132,r12	
     bf2:	00 00       	bra	@r0		
     bf4:	00 00       	bra	@r0		
     bf6:	00 00       	bra	@r0		
     bf8:	44 00       	rrcm.a	#1,	r4	
     bfa:	ad 00 3c 01 	adda	#0x0013c,r13	
     bfe:	00 00       	bra	@r0		
     c00:	00 00       	bra	@r0		
     c02:	00 00       	bra	@r0		
     c04:	44 00       	rrcm.a	#1,	r4	
     c06:	af 00 44 01 	adda	#0x00144,r15	
     c0a:	00 00       	bra	@r0		
     c0c:	00 00       	bra	@r0		
     c0e:	00 00       	bra	@r0		
     c10:	44 00       	rrcm.a	#1,	r4	
     c12:	b0 00 4e 01 	suba	#0x0014e,r0	
     c16:	00 00       	bra	@r0		
     c18:	00 00       	bra	@r0		
     c1a:	00 00       	bra	@r0		
     c1c:	44 00       	rrcm.a	#1,	r4	
     c1e:	b2 00 52 01 	suba	#0x00152,r2	
     c22:	00 00       	bra	@r0		
     c24:	00 00       	bra	@r0		
     c26:	00 00       	bra	@r0		
     c28:	44 00       	rrcm.a	#1,	r4	
     c2a:	bb 00 52 01 	suba	#0x00152,r11	
     c2e:	00 00       	bra	@r0		
     c30:	00 00       	bra	@r0		
     c32:	00 00       	bra	@r0		
     c34:	44 00       	rrcm.a	#1,	r4	
     c36:	a1 00 54 01 	adda	#0x00154,r1	
     c3a:	00 00       	bra	@r0		
     c3c:	00 00       	bra	@r0		
     c3e:	00 00       	bra	@r0		
     c40:	44 00       	rrcm.a	#1,	r4	
     c42:	a2 00 5e 01 	adda	#0x0015e,r2	
     c46:	00 00       	bra	@r0		
     c48:	00 00       	bra	@r0		
     c4a:	00 00       	bra	@r0		
     c4c:	44 00       	rrcm.a	#1,	r4	
     c4e:	a4 00 66 01 	adda	#0x00166,r4	
     c52:	00 00       	bra	@r0		
     c54:	00 00       	bra	@r0		
     c56:	00 00       	bra	@r0		
     c58:	44 00       	rrcm.a	#1,	r4	
     c5a:	a5 00 70 01 	adda	#0x00170,r5	
     c5e:	00 00       	bra	@r0		
     c60:	00 00       	bra	@r0		
     c62:	00 00       	bra	@r0		
     c64:	44 00       	rrcm.a	#1,	r4	
     c66:	a6 00 76 01 	adda	#0x00176,r6	
     c6a:	00 00       	bra	@r0		
     c6c:	00 00       	bra	@r0		
     c6e:	00 00       	bra	@r0		
     c70:	44 00       	rrcm.a	#1,	r4	
     c72:	a7 00 7e 01 	adda	#0x0017e,r7	
     c76:	00 00       	bra	@r0		
     c78:	00 00       	bra	@r0		
     c7a:	00 00       	bra	@r0		
     c7c:	44 00       	rrcm.a	#1,	r4	
     c7e:	a9 00 84 01 	adda	#0x00184,r9	
     c82:	00 00       	bra	@r0		
     c84:	00 00       	bra	@r0		
     c86:	00 00       	bra	@r0		
     c88:	44 00       	rrcm.a	#1,	r4	
     c8a:	bb 00 84 01 	suba	#0x00184,r11	
     c8e:	00 00       	bra	@r0		
     c90:	00 00       	bra	@r0		
     c92:	00 00       	bra	@r0		
     c94:	44 00       	rrcm.a	#1,	r4	
     c96:	b5 00 86 01 	suba	#0x00186,r5	
     c9a:	00 00       	bra	@r0		
     c9c:	00 00       	bra	@r0		
     c9e:	00 00       	bra	@r0		
     ca0:	24 00 00 00 	mova	&0x00000,r4	
     ca4:	8c 01 00 00 	mova	#0x10000,r12	
     ca8:	a7 17       	popm	#11,	r1	
     caa:	00 00       	bra	@r0		
     cac:	24 00 bd 00 	mova	&0x000bd,r4	
     cb0:	12 34       	jge	$+38     	;abs 0xcd6
     cb2:	00 00       	bra	@r0		
     cb4:	00 00       	bra	@r0		
     cb6:	00 00       	bra	@r0		
     cb8:	44 00       	rrcm.a	#1,	r4	
     cba:	bd 00 00 00 	suba	#0x00000,r13	
     cbe:	00 00       	bra	@r0		
     cc0:	00 00       	bra	@r0		
     cc2:	00 00       	bra	@r0		
     cc4:	44 00       	rrcm.a	#1,	r4	
     cc6:	bf 00 02 00 	suba	#0x00002,r15	
     cca:	00 00       	bra	@r0		
     ccc:	00 00       	bra	@r0		
     cce:	00 00       	bra	@r0		
     cd0:	44 00       	rrcm.a	#1,	r4	
     cd2:	dd 00       	cmpa	r0,	r13	
     cd4:	18 00       	mova	#0x00000,r8	
     cd6:	00 00       	bra	@r0		
     cd8:	00 00       	bra	@r0		
     cda:	00 00       	bra	@r0		
     cdc:	44 00       	rrcm.a	#1,	r4	
     cde:	de 00       	cmpa	r0,	r14	
     ce0:	20 00 00 00 	bra	&0x00000	
     ce4:	00 00       	bra	@r0		
     ce6:	00 00       	bra	@r0		
     ce8:	44 00       	rrcm.a	#1,	r4	
     cea:	df 00       	cmpa	r0,	r15	
     cec:	24 00 00 00 	mova	&0x00000,r4	
     cf0:	00 00       	bra	@r0		
     cf2:	00 00       	bra	@r0		
     cf4:	44 00       	rrcm.a	#1,	r4	
     cf6:	e0 00       	adda	r0,	r0	
     cf8:	28 00 00 00 	mova	&0x00000,r8	
     cfc:	00 00       	bra	@r0		
     cfe:	00 00       	bra	@r0		
     d00:	44 00       	rrcm.a	#1,	r4	
     d02:	e1 00       	adda	r0,	r1	
     d04:	2c 00 00 00 	mova	&0x00000,r12	
     d08:	00 00       	bra	@r0		
     d0a:	00 00       	bra	@r0		
     d0c:	44 00       	rrcm.a	#1,	r4	
     d0e:	c4 00       	mova	r0,	r4	
     d10:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x00d12
     d14:	00 00       	bra	@r0		
     d16:	00 00       	bra	@r0		
     d18:	44 00       	rrcm.a	#1,	r4	
     d1a:	c5 00       	mova	r0,	r5	
     d1c:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x00d1e
     d20:	00 00       	bra	@r0		
     d22:	00 00       	bra	@r0		
     d24:	44 00       	rrcm.a	#1,	r4	
     d26:	c1 00       	mova	r0,	r1	
     d28:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x00d2a
     d2c:	00 00       	bra	@r0		
     d2e:	00 00       	bra	@r0		
     d30:	44 00       	rrcm.a	#1,	r4	
     d32:	c2 00       	mova	r0,	r2	
     d34:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x00d36
     d38:	00 00       	bra	@r0		
     d3a:	00 00       	bra	@r0		
     d3c:	44 00       	rrcm.a	#1,	r4	
     d3e:	cb 00       	mova	r0,	r11	
     d40:	46 00       	rrcm.a	#1,	r6	
     d42:	00 00       	bra	@r0		
     d44:	00 00       	bra	@r0		
     d46:	00 00       	bra	@r0		
     d48:	44 00       	rrcm.a	#1,	r4	
     d4a:	cc 00       	mova	r0,	r12	
     d4c:	4c 00       	rrcm.a	#1,	r12	
     d4e:	00 00       	bra	@r0		
     d50:	00 00       	bra	@r0		
     d52:	00 00       	bra	@r0		
     d54:	44 00       	rrcm.a	#1,	r4	
     d56:	cd 00       	mova	r0,	r13	
     d58:	50 00       	rrcm	#1,	r0	
     d5a:	00 00       	bra	@r0		
     d5c:	00 00       	bra	@r0		
     d5e:	00 00       	bra	@r0		
     d60:	44 00       	rrcm.a	#1,	r4	
     d62:	ce 00       	mova	r0,	r14	
     d64:	58 00       	rrcm	#1,	r8	
     d66:	00 00       	bra	@r0		
     d68:	00 00       	bra	@r0		
     d6a:	00 00       	bra	@r0		
     d6c:	44 00       	rrcm.a	#1,	r4	
     d6e:	cf 00       	mova	r0,	r15	
     d70:	62 00 00 00 	mova	r0,	&0x20000
     d74:	00 00       	bra	@r0		
     d76:	00 00       	bra	@r0		
     d78:	44 00       	rrcm.a	#1,	r4	
     d7a:	cc 00       	mova	r0,	r12	
     d7c:	6a 00 00 00 	mova	r0,	&0xa0000
     d80:	00 00       	bra	@r0		
     d82:	00 00       	bra	@r0		
     d84:	44 00       	rrcm.a	#1,	r4	
     d86:	d1 00       	cmpa	r0,	r1	
     d88:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
     d8c:	00 00       	bra	@r0		
     d8e:	00 00       	bra	@r0		
     d90:	44 00       	rrcm.a	#1,	r4	
     d92:	d2 00       	cmpa	r0,	r2	
     d94:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
     d98:	00 00       	bra	@r0		
     d9a:	00 00       	bra	@r0		
     d9c:	44 00       	rrcm.a	#1,	r4	
     d9e:	d3 00       	.word	0x00d3;	????	Illegal as address instr
     da0:	7c 00 00 00 	mova	r0,	0(r12)	;0x0000(r12)
     da4:	00 00       	bra	@r0		
     da6:	00 00       	bra	@r0		
     da8:	44 00       	rrcm.a	#1,	r4	
     daa:	d4 00       	cmpa	r0,	r4	
     dac:	82 00 00 00 	mova	#0x00000,r2	
     db0:	00 00       	bra	@r0		
     db2:	00 00       	bra	@r0		
     db4:	44 00       	rrcm.a	#1,	r4	
     db6:	c7 00       	mova	r0,	r7	
     db8:	88 00 00 00 	mova	#0x00000,r8	
     dbc:	00 00       	bra	@r0		
     dbe:	00 00       	bra	@r0		
     dc0:	44 00       	rrcm.a	#1,	r4	
     dc2:	c8 00       	mova	r0,	r8	
     dc4:	8c 00 00 00 	mova	#0x00000,r12	
     dc8:	00 00       	bra	@r0		
     dca:	00 00       	bra	@r0		
     dcc:	44 00       	rrcm.a	#1,	r4	
     dce:	e3 00       	.word	0x00e3;	????	Illegal as address instr
     dd0:	8e 00 00 00 	mova	#0x00000,r14	
     dd4:	be 17       	popm	#12,	r9	
     dd6:	00 00       	bra	@r0		
     dd8:	40 00       	rrcm.a	#1,	r0	
     dda:	be 00 0b 00 	suba	#0x0000b,r14	
     dde:	00 00       	bra	@r0		
     de0:	00 00       	bra	@r0		
     de2:	00 00       	bra	@r0		
     de4:	c0 00       	bra	r0		
     de6:	00 00       	bra	@r0		
     de8:	02 00       	mova	@r0,	r2	
     dea:	00 00       	bra	@r0		
     dec:	00 00       	bra	@r0		
     dee:	00 00       	bra	@r0		
     df0:	e0 00       	adda	r0,	r0	
     df2:	00 00       	bra	@r0		
     df4:	8e 00 00 00 	mova	#0x00000,r14	
     df8:	00 00       	bra	@r0		
     dfa:	00 00       	bra	@r0		
     dfc:	24 00 00 00 	mova	&0x00000,r4	
     e00:	92 00 00 00 	cmpa	#0x00000,r2	
     e04:	c7 17       	popm	#13,	#0	;r3 As==00
     e06:	00 00       	bra	@r0		
     e08:	24 00 e5 00 	mova	&0x000e5,r4	
     e0c:	a4 34       	jge	$+330    	;abs 0xf56
     e0e:	00 00       	bra	@r0		
     e10:	00 00       	bra	@r0		
     e12:	00 00       	bra	@r0		
     e14:	44 00       	rrcm.a	#1,	r4	
     e16:	e5 00       	adda	r0,	r5	
	...
     e20:	44 00       	rrcm.a	#1,	r4	
     e22:	e7 00       	adda	r0,	r7	
     e24:	08 00       	mova	@r0,	r8	
     e26:	00 00       	bra	@r0		
     e28:	00 00       	bra	@r0		
     e2a:	00 00       	bra	@r0		
     e2c:	44 00       	rrcm.a	#1,	r4	
     e2e:	e8 00       	adda	r0,	r8	
     e30:	0a 00       	mova	@r0,	r10	
     e32:	00 00       	bra	@r0		
     e34:	00 00       	bra	@r0		
     e36:	00 00       	bra	@r0		
     e38:	44 00       	rrcm.a	#1,	r4	
     e3a:	e9 00       	adda	r0,	r9	
     e3c:	20 00 00 00 	bra	&0x00000	
     e40:	00 00       	bra	@r0		
     e42:	00 00       	bra	@r0		
     e44:	44 00       	rrcm.a	#1,	r4	
     e46:	ea 00       	adda	r0,	r10	
     e48:	26 00 00 00 	mova	&0x00000,r6	
     e4c:	00 00       	bra	@r0		
     e4e:	00 00       	bra	@r0		
     e50:	44 00       	rrcm.a	#1,	r4	
     e52:	eb 00       	adda	r0,	r11	
     e54:	50 00       	rrcm	#1,	r0	
     e56:	00 00       	bra	@r0		
     e58:	00 00       	bra	@r0		
     e5a:	00 00       	bra	@r0		
     e5c:	44 00       	rrcm.a	#1,	r4	
     e5e:	ec 00       	adda	r0,	r12	
     e60:	8a 00 00 00 	mova	#0x00000,r10	
     e64:	00 00       	bra	@r0		
     e66:	00 00       	bra	@r0		
     e68:	44 00       	rrcm.a	#1,	r4	
     e6a:	e9 00       	adda	r0,	r9	
     e6c:	b4 00 00 00 	suba	#0x00000,r4	
     e70:	00 00       	bra	@r0		
     e72:	00 00       	bra	@r0		
     e74:	44 00       	rrcm.a	#1,	r4	
     e76:	ee 00       	adda	r0,	r14	
     e78:	bc 00 00 00 	suba	#0x00000,r12	
     e7c:	00 00       	bra	@r0		
     e7e:	00 00       	bra	@r0		
     e80:	44 00       	rrcm.a	#1,	r4	
     e82:	e7 00       	adda	r0,	r7	
     e84:	f4 00       	suba	r0,	r4	
     e86:	00 00       	bra	@r0		
     e88:	00 00       	bra	@r0		
     e8a:	00 00       	bra	@r0		
     e8c:	44 00       	rrcm.a	#1,	r4	
     e8e:	f2 00       	suba	r0,	r2	
     e90:	fa 00       	suba	r0,	r10	
     e92:	00 00       	bra	@r0		
     e94:	be 17       	popm	#12,	r9	
     e96:	00 00       	bra	@r0		
     e98:	40 00       	rrcm.a	#1,	r0	
     e9a:	e6 00       	adda	r0,	r6	
     e9c:	09 00       	mova	@r0,	r9	
     e9e:	00 00       	bra	@r0		
     ea0:	e1 17       	popm	#15,	r15	
     ea2:	00 00       	bra	@r0		
     ea4:	40 00       	rrcm.a	#1,	r0	
     ea6:	e6 00       	adda	r0,	r6	
     ea8:	0a 00       	mova	@r0,	r10	
     eaa:	00 00       	bra	@r0		
     eac:	00 00       	bra	@r0		
     eae:	00 00       	bra	@r0		
     eb0:	c0 00       	bra	r0		
     eb2:	00 00       	bra	@r0		
     eb4:	08 00       	mova	@r0,	r8	
     eb6:	00 00       	bra	@r0		
     eb8:	00 00       	bra	@r0		
     eba:	00 00       	bra	@r0		
     ebc:	e0 00       	adda	r0,	r0	
     ebe:	00 00       	bra	@r0		
     ec0:	fa 00       	suba	r0,	r10	
     ec2:	00 00       	bra	@r0		
     ec4:	00 00       	bra	@r0		
     ec6:	00 00       	bra	@r0		
     ec8:	24 00 00 00 	mova	&0x00000,r4	
     ecc:	04 01       	mova	@r1,	r4	
     ece:	00 00       	bra	@r0		
     ed0:	ea 17       	popm	#15,	r8	
     ed2:	00 00       	bra	@r0		
     ed4:	24 00 f4 00 	mova	&0x000f4,r4	
     ed8:	a8 35       	jge	$+850    	;abs 0x122a
     eda:	00 00       	bra	@r0		
     edc:	05 18       	.word	0x1805;	????	
     ede:	00 00       	bra	@r0		
     ee0:	40 00       	rrcm.a	#1,	r0	
     ee2:	f4 00       	suba	r0,	r4	
     ee4:	0a 00       	mova	@r0,	r10	
     ee6:	00 00       	bra	@r0		
     ee8:	00 00       	bra	@r0		
     eea:	00 00       	bra	@r0		
     eec:	44 00       	rrcm.a	#1,	r4	
     eee:	f4 00       	suba	r0,	r4	
	...
     ef8:	44 00       	rrcm.a	#1,	r4	
     efa:	f6 00       	suba	r0,	r6	
     efc:	08 00       	mova	@r0,	r8	
     efe:	00 00       	bra	@r0		
     f00:	00 00       	bra	@r0		
     f02:	00 00       	bra	@r0		
     f04:	44 00       	rrcm.a	#1,	r4	
     f06:	f7 00       	suba	r0,	r7	
     f08:	0e 00       	mova	@r0,	r14	
     f0a:	00 00       	bra	@r0		
     f0c:	00 00       	bra	@r0		
     f0e:	00 00       	bra	@r0		
     f10:	44 00       	rrcm.a	#1,	r4	
     f12:	f8 00       	suba	r0,	r8	
     f14:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x00f16
     f18:	00 00       	bra	@r0		
     f1a:	00 00       	bra	@r0		
     f1c:	44 00       	rrcm.a	#1,	r4	
     f1e:	f6 00       	suba	r0,	r6	
     f20:	56 00       	rrcm	#1,	r6	
     f22:	00 00       	bra	@r0		
     f24:	00 00       	bra	@r0		
     f26:	00 00       	bra	@r0		
     f28:	44 00       	rrcm.a	#1,	r4	
     f2a:	fa 00       	suba	r0,	r10	
     f2c:	5e 00       	rrcm	#1,	r14	
     f2e:	00 00       	bra	@r0		
     f30:	be 17       	popm	#12,	r9	
     f32:	00 00       	bra	@r0		
     f34:	40 00       	rrcm.a	#1,	r0	
     f36:	f5 00       	suba	r0,	r5	
     f38:	0b 00       	mova	@r0,	r11	
     f3a:	00 00       	bra	@r0		
     f3c:	00 00       	bra	@r0		
     f3e:	00 00       	bra	@r0		
     f40:	c0 00       	bra	r0		
     f42:	00 00       	bra	@r0		
     f44:	08 00       	mova	@r0,	r8	
     f46:	00 00       	bra	@r0		
     f48:	00 00       	bra	@r0		
     f4a:	00 00       	bra	@r0		
     f4c:	e0 00       	adda	r0,	r0	
     f4e:	00 00       	bra	@r0		
     f50:	5e 00       	rrcm	#1,	r14	
     f52:	00 00       	bra	@r0		
     f54:	00 00       	bra	@r0		
     f56:	00 00       	bra	@r0		
     f58:	24 00 00 00 	mova	&0x00000,r4	
     f5c:	66 00 00 00 	mova	r0,	&0x60000
     f60:	0e 18       	.word	0x180e;	????	
     f62:	00 00       	bra	@r0		
     f64:	24 00 fc 00 	mova	&0x000fc,r4	
     f68:	42 36       	jge	$-890    	;abs 0xbee
     f6a:	00 00       	bra	@r0		
     f6c:	00 00       	bra	@r0		
     f6e:	00 00       	bra	@r0		
     f70:	44 00       	rrcm.a	#1,	r4	
     f72:	fc 00       	suba	r0,	r12	
	...
     f7c:	44 00       	rrcm.a	#1,	r4	
     f7e:	fd 00       	suba	r0,	r13	
	...
     f88:	44 00       	rrcm.a	#1,	r4	
     f8a:	fe 00       	suba	r0,	r14	
     f8c:	04 00       	mova	@r0,	r4	
     f8e:	00 00       	bra	@r0		
     f90:	00 00       	bra	@r0		
     f92:	00 00       	bra	@r0		
     f94:	44 00       	rrcm.a	#1,	r4	
     f96:	00 01       	bra	@r1		
     f98:	22 00 00 00 	mova	&0x00000,r2	
     f9c:	00 00       	bra	@r0		
     f9e:	00 00       	bra	@r0		
     fa0:	44 00       	rrcm.a	#1,	r4	
     fa2:	01 01       	mova	@r1,	r1	
     fa4:	2a 00 00 00 	mova	&0x00000,r10	
     fa8:	00 00       	bra	@r0		
     faa:	00 00       	bra	@r0		
     fac:	44 00       	rrcm.a	#1,	r4	
     fae:	03 01       	.word	0x0103;	????	Illegal as address instr
     fb0:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x00fb2
     fb4:	00 00       	bra	@r0		
     fb6:	00 00       	bra	@r0		
     fb8:	44 00       	rrcm.a	#1,	r4	
     fba:	04 01       	mova	@r1,	r4	
     fbc:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x00fbe
     fc0:	00 00       	bra	@r0		
     fc2:	00 00       	bra	@r0		
     fc4:	44 00       	rrcm.a	#1,	r4	
     fc6:	06 01       	mova	@r1,	r6	
     fc8:	44 00       	rrcm.a	#1,	r4	
     fca:	00 00       	bra	@r0		
     fcc:	00 00       	bra	@r0		
     fce:	00 00       	bra	@r0		
     fd0:	44 00       	rrcm.a	#1,	r4	
     fd2:	07 01       	mova	@r1,	r7	
     fd4:	48 00       	rrcm.a	#1,	r8	
     fd6:	00 00       	bra	@r0		
     fd8:	00 00       	bra	@r0		
     fda:	00 00       	bra	@r0		
     fdc:	44 00       	rrcm.a	#1,	r4	
     fde:	08 01       	mova	@r1,	r8	
     fe0:	4c 00       	rrcm.a	#1,	r12	
     fe2:	00 00       	bra	@r0		
     fe4:	00 00       	bra	@r0		
     fe6:	00 00       	bra	@r0		
     fe8:	44 00       	rrcm.a	#1,	r4	
     fea:	55 01       	rram	#1,	r5	
     fec:	4e 00       	rrcm.a	#1,	r14	
     fee:	00 00       	bra	@r0		
     ff0:	00 00       	bra	@r0		
     ff2:	00 00       	bra	@r0		
     ff4:	44 00       	rrcm.a	#1,	r4	
     ff6:	0a 01       	mova	@r1,	r10	
     ff8:	50 00       	rrcm	#1,	r0	
     ffa:	00 00       	bra	@r0		
     ffc:	00 00       	bra	@r0		
     ffe:	00 00       	bra	@r0		
    1000:	44 00       	rrcm.a	#1,	r4	
    1002:	0b 01       	mova	@r1,	r11	
    1004:	5a 00       	rrcm	#1,	r10	
    1006:	00 00       	bra	@r0		
    1008:	00 00       	bra	@r0		
    100a:	00 00       	bra	@r0		
    100c:	44 00       	rrcm.a	#1,	r4	
    100e:	0e 01       	mova	@r1,	r14	
    1010:	62 00 00 00 	mova	r0,	&0x20000
    1014:	00 00       	bra	@r0		
    1016:	00 00       	bra	@r0		
    1018:	44 00       	rrcm.a	#1,	r4	
    101a:	0f 01       	mova	@r1,	r15	
    101c:	6c 00 00 00 	mova	r0,	&0xc0000
    1020:	00 00       	bra	@r0		
    1022:	00 00       	bra	@r0		
    1024:	44 00       	rrcm.a	#1,	r4	
    1026:	18 01       	mova	@r1+,	r8	
    1028:	72 00 00 00 	mova	r0,	&0x0000	
    102c:	00 00       	bra	@r0		
    102e:	00 00       	bra	@r0		
    1030:	44 00       	rrcm.a	#1,	r4	
    1032:	19 01       	mova	@r1+,	r9	
    1034:	7a 00 00 00 	mova	r0,	0(r10)	;0x0000(r10)
    1038:	00 00       	bra	@r0		
    103a:	00 00       	bra	@r0		
    103c:	44 00       	rrcm.a	#1,	r4	
    103e:	55 01       	rram	#1,	r5	
    1040:	7e 00 00 00 	mova	r0,	0(r14)	;0x0000(r14)
    1044:	00 00       	bra	@r0		
    1046:	00 00       	bra	@r0		
    1048:	44 00       	rrcm.a	#1,	r4	
    104a:	1c 01       	mova	@r1+,	r12	
    104c:	80 00 00 00 	bra	#0x00000	
    1050:	00 00       	bra	@r0		
    1052:	00 00       	bra	@r0		
    1054:	44 00       	rrcm.a	#1,	r4	
    1056:	1d 01       	mova	@r1+,	r13	
    1058:	88 00 00 00 	mova	#0x00000,r8	
    105c:	00 00       	bra	@r0		
    105e:	00 00       	bra	@r0		
    1060:	44 00       	rrcm.a	#1,	r4	
    1062:	21 01 8e 00 	mova	&0x1008e,r1	
    1066:	00 00       	bra	@r0		
    1068:	00 00       	bra	@r0		
    106a:	00 00       	bra	@r0		
    106c:	44 00       	rrcm.a	#1,	r4	
    106e:	55 01       	rram	#1,	r5	
    1070:	8e 00 00 00 	mova	#0x00000,r14	
    1074:	00 00       	bra	@r0		
    1076:	00 00       	bra	@r0		
    1078:	44 00       	rrcm.a	#1,	r4	
    107a:	55 01       	rram	#1,	r5	
    107c:	90 00 00 00 	cmpa	#0x00000,r0	
    1080:	00 00       	bra	@r0		
    1082:	00 00       	bra	@r0		
    1084:	44 00       	rrcm.a	#1,	r4	
    1086:	12 01       	mova	@r1+,	r2	
    1088:	92 00 00 00 	cmpa	#0x00000,r2	
    108c:	00 00       	bra	@r0		
    108e:	00 00       	bra	@r0		
    1090:	44 00       	rrcm.a	#1,	r4	
    1092:	13 01       	.word	0x0113;	????	Illegal as address instr
    1094:	9a 00 00 00 	cmpa	#0x00000,r10	
    1098:	00 00       	bra	@r0		
    109a:	00 00       	bra	@r0		
    109c:	44 00       	rrcm.a	#1,	r4	
    109e:	23 01       	.word	0x0123;	????	Illegal as address instr
    10a0:	a2 00 00 00 	adda	#0x00000,r2	
    10a4:	00 00       	bra	@r0		
    10a6:	00 00       	bra	@r0		
    10a8:	44 00       	rrcm.a	#1,	r4	
    10aa:	24 01 ac 00 	mova	&0x100ac,r4	
    10ae:	00 00       	bra	@r0		
    10b0:	00 00       	bra	@r0		
    10b2:	00 00       	bra	@r0		
    10b4:	44 00       	rrcm.a	#1,	r4	
    10b6:	26 01 b4 00 	mova	&0x100b4,r6	
    10ba:	00 00       	bra	@r0		
    10bc:	00 00       	bra	@r0		
    10be:	00 00       	bra	@r0		
    10c0:	44 00       	rrcm.a	#1,	r4	
    10c2:	27 01 be 00 	mova	&0x100be,r7	
    10c6:	00 00       	bra	@r0		
    10c8:	00 00       	bra	@r0		
    10ca:	00 00       	bra	@r0		
    10cc:	44 00       	rrcm.a	#1,	r4	
    10ce:	3f 01 d4 00 	mova	212(r1),r15	;0x00d4(r1)
    10d2:	00 00       	bra	@r0		
    10d4:	00 00       	bra	@r0		
    10d6:	00 00       	bra	@r0		
    10d8:	44 00       	rrcm.a	#1,	r4	
    10da:	41 01       	rram.a	#1,	r1	
    10dc:	d8 00       	cmpa	r0,	r8	
    10de:	00 00       	bra	@r0		
    10e0:	00 00       	bra	@r0		
    10e2:	00 00       	bra	@r0		
    10e4:	44 00       	rrcm.a	#1,	r4	
    10e6:	55 01       	rram	#1,	r5	
    10e8:	d8 00       	cmpa	r0,	r8	
    10ea:	00 00       	bra	@r0		
    10ec:	00 00       	bra	@r0		
    10ee:	00 00       	bra	@r0		
    10f0:	44 00       	rrcm.a	#1,	r4	
    10f2:	2d 01 da 00 	mova	&0x100da,r13	
    10f6:	00 00       	bra	@r0		
    10f8:	00 00       	bra	@r0		
    10fa:	00 00       	bra	@r0		
    10fc:	44 00       	rrcm.a	#1,	r4	
    10fe:	2e 01 e4 00 	mova	&0x100e4,r14	
    1102:	00 00       	bra	@r0		
    1104:	00 00       	bra	@r0		
    1106:	00 00       	bra	@r0		
    1108:	44 00       	rrcm.a	#1,	r4	
    110a:	30 01 ec 00 	bra	236(r1)	;0x00ec(r1)
    110e:	00 00       	bra	@r0		
    1110:	00 00       	bra	@r0		
    1112:	00 00       	bra	@r0		
    1114:	44 00       	rrcm.a	#1,	r4	
    1116:	31 01 f6 00 	mova	246(r1),r1	;0x00f6(r1)
    111a:	00 00       	bra	@r0		
    111c:	00 00       	bra	@r0		
    111e:	00 00       	bra	@r0		
    1120:	44 00       	rrcm.a	#1,	r4	
    1122:	32 01 0e 01 	mova	270(r1),r2	;0x010e(r1)
    1126:	00 00       	bra	@r0		
    1128:	00 00       	bra	@r0		
    112a:	00 00       	bra	@r0		
    112c:	44 00       	rrcm.a	#1,	r4	
    112e:	35 01 14 01 	mova	276(r1),r5	;0x0114(r1)
    1132:	00 00       	bra	@r0		
    1134:	00 00       	bra	@r0		
    1136:	00 00       	bra	@r0		
    1138:	44 00       	rrcm.a	#1,	r4	
    113a:	55 01       	rram	#1,	r5	
    113c:	14 01       	mova	@r1+,	r4	
    113e:	00 00       	bra	@r0		
    1140:	00 00       	bra	@r0		
    1142:	00 00       	bra	@r0		
    1144:	44 00       	rrcm.a	#1,	r4	
    1146:	38 01 16 01 	mova	278(r1),r8	;0x0116(r1)
    114a:	00 00       	bra	@r0		
    114c:	00 00       	bra	@r0		
    114e:	00 00       	bra	@r0		
    1150:	44 00       	rrcm.a	#1,	r4	
    1152:	39 01 20 01 	mova	288(r1),r9	;0x0120(r1)
    1156:	00 00       	bra	@r0		
    1158:	00 00       	bra	@r0		
    115a:	00 00       	bra	@r0		
    115c:	44 00       	rrcm.a	#1,	r4	
    115e:	3b 01 28 01 	mova	296(r1),r11	;0x0128(r1)
    1162:	00 00       	bra	@r0		
    1164:	00 00       	bra	@r0		
    1166:	00 00       	bra	@r0		
    1168:	44 00       	rrcm.a	#1,	r4	
    116a:	3c 01 32 01 	mova	306(r1),r12	;0x0132(r1)
    116e:	00 00       	bra	@r0		
    1170:	00 00       	bra	@r0		
    1172:	00 00       	bra	@r0		
    1174:	44 00       	rrcm.a	#1,	r4	
    1176:	3d 01 3a 01 	mova	314(r1),r13	;0x013a(r1)
    117a:	00 00       	bra	@r0		
    117c:	00 00       	bra	@r0		
    117e:	00 00       	bra	@r0		
    1180:	44 00       	rrcm.a	#1,	r4	
    1182:	44 01       	rram.a	#1,	r4	
    1184:	42 01       	rram.a	#1,	r2	
    1186:	00 00       	bra	@r0		
    1188:	00 00       	bra	@r0		
    118a:	00 00       	bra	@r0		
    118c:	44 00       	rrcm.a	#1,	r4	
    118e:	45 01       	rram.a	#1,	r5	
    1190:	4c 01       	rram.a	#1,	r12	
    1192:	00 00       	bra	@r0		
    1194:	00 00       	bra	@r0		
    1196:	00 00       	bra	@r0		
    1198:	44 00       	rrcm.a	#1,	r4	
    119a:	47 01       	rram.a	#1,	r7	
    119c:	54 01       	rram	#1,	r4	
    119e:	00 00       	bra	@r0		
    11a0:	00 00       	bra	@r0		
    11a2:	00 00       	bra	@r0		
    11a4:	44 00       	rrcm.a	#1,	r4	
    11a6:	48 01       	rram.a	#1,	r8	
    11a8:	5e 01       	rram	#1,	r14	
    11aa:	00 00       	bra	@r0		
    11ac:	00 00       	bra	@r0		
    11ae:	00 00       	bra	@r0		
    11b0:	44 00       	rrcm.a	#1,	r4	
    11b2:	49 01       	rram.a	#1,	r9	
    11b4:	68 01 00 00 	mova	r1,	&0x80000
    11b8:	00 00       	bra	@r0		
    11ba:	00 00       	bra	@r0		
    11bc:	44 00       	rrcm.a	#1,	r4	
    11be:	4b 01       	rram.a	#1,	r11	
    11c0:	6e 01 00 00 	mova	r1,	&0xe0000
    11c4:	00 00       	bra	@r0		
    11c6:	00 00       	bra	@r0		
    11c8:	24 00 00 00 	mova	&0x00000,r4	
    11cc:	74 01 00 00 	mova	r1,	0(r4)	;0x0000(r4)
    11d0:	2a 18       	.word	0x182a;	????	
    11d2:	00 00       	bra	@r0		
    11d4:	24 00 57 01 	mova	&0x00157,r4	
    11d8:	cc 37       	jge	$-102    	;abs 0x1172
    11da:	00 00       	bra	@r0		
    11dc:	00 00       	bra	@r0		
    11de:	00 00       	bra	@r0		
    11e0:	44 00       	rrcm.a	#1,	r4	
    11e2:	57 01       	rram	#1,	r7	
	...
    11ec:	44 00       	rrcm.a	#1,	r4	
    11ee:	59 01       	rram	#1,	r9	
    11f0:	02 00       	mova	@r0,	r2	
    11f2:	00 00       	bra	@r0		
    11f4:	00 00       	bra	@r0		
    11f6:	00 00       	bra	@r0		
    11f8:	44 00       	rrcm.a	#1,	r4	
    11fa:	5a 01       	rram	#1,	r10	
    11fc:	0c 00       	mova	@r0,	r12	
    11fe:	00 00       	bra	@r0		
    1200:	00 00       	bra	@r0		
    1202:	00 00       	bra	@r0		
    1204:	44 00       	rrcm.a	#1,	r4	
    1206:	5b 01       	rram	#1,	r11	
    1208:	0e 00       	mova	@r0,	r14	
    120a:	00 00       	bra	@r0		
    120c:	00 00       	bra	@r0		
    120e:	00 00       	bra	@r0		
    1210:	44 00       	rrcm.a	#1,	r4	
    1212:	5c 01       	rram	#1,	r12	
    1214:	24 00 00 00 	mova	&0x00000,r4	
    1218:	00 00       	bra	@r0		
    121a:	00 00       	bra	@r0		
    121c:	44 00       	rrcm.a	#1,	r4	
    121e:	5d 01       	rram	#1,	r13	
    1220:	2a 00 00 00 	mova	&0x00000,r10	
    1224:	00 00       	bra	@r0		
    1226:	00 00       	bra	@r0		
    1228:	44 00       	rrcm.a	#1,	r4	
    122a:	64 01 2e 00 	mova	r1,	&0x4002e
    122e:	00 00       	bra	@r0		
    1230:	00 00       	bra	@r0		
    1232:	00 00       	bra	@r0		
    1234:	44 00       	rrcm.a	#1,	r4	
    1236:	68 01 38 00 	mova	r1,	&0x80038
    123a:	00 00       	bra	@r0		
    123c:	00 00       	bra	@r0		
    123e:	00 00       	bra	@r0		
    1240:	44 00       	rrcm.a	#1,	r4	
    1242:	6d 01 40 00 	mova	r1,	&0xd0040
    1246:	00 00       	bra	@r0		
    1248:	00 00       	bra	@r0		
    124a:	00 00       	bra	@r0		
    124c:	44 00       	rrcm.a	#1,	r4	
    124e:	6f 01 4a 00 	mova	r1,	&0xf004a
    1252:	00 00       	bra	@r0		
    1254:	00 00       	bra	@r0		
    1256:	00 00       	bra	@r0		
    1258:	44 00       	rrcm.a	#1,	r4	
    125a:	70 01 50 00 	mova	r1,	0x0050	;PC rel. 0x012ac
    125e:	00 00       	bra	@r0		
    1260:	00 00       	bra	@r0		
    1262:	00 00       	bra	@r0		
    1264:	44 00       	rrcm.a	#1,	r4	
    1266:	71 01 54 00 	mova	r1,	84(r1)	;0x0054(r1)
    126a:	00 00       	bra	@r0		
    126c:	00 00       	bra	@r0		
    126e:	00 00       	bra	@r0		
    1270:	44 00       	rrcm.a	#1,	r4	
    1272:	5a 01       	rram	#1,	r10	
    1274:	5c 00       	rrcm	#1,	r12	
    1276:	00 00       	bra	@r0		
    1278:	00 00       	bra	@r0		
    127a:	00 00       	bra	@r0		
    127c:	44 00       	rrcm.a	#1,	r4	
    127e:	69 01 66 00 	mova	r1,	&0x90066
    1282:	00 00       	bra	@r0		
    1284:	00 00       	bra	@r0		
    1286:	00 00       	bra	@r0		
    1288:	44 00       	rrcm.a	#1,	r4	
    128a:	65 01 6c 00 	mova	r1,	&0x5006c
    128e:	00 00       	bra	@r0		
    1290:	00 00       	bra	@r0		
    1292:	00 00       	bra	@r0		
    1294:	44 00       	rrcm.a	#1,	r4	
    1296:	60 01 74 00 	mova	r1,	&0x00074
    129a:	00 00       	bra	@r0		
    129c:	00 00       	bra	@r0		
    129e:	00 00       	bra	@r0		
    12a0:	44 00       	rrcm.a	#1,	r4	
    12a2:	61 01 78 00 	mova	r1,	&0x10078
    12a6:	00 00       	bra	@r0		
    12a8:	00 00       	bra	@r0		
    12aa:	00 00       	bra	@r0		
    12ac:	44 00       	rrcm.a	#1,	r4	
    12ae:	73 01       	.word	0x0173;	????	Illegal as address instr
    12b0:	80 00 00 00 	bra	#0x00000	
    12b4:	00 00       	bra	@r0		
    12b6:	00 00       	bra	@r0		
    12b8:	44 00       	rrcm.a	#1,	r4	
    12ba:	74 01 8a 00 	mova	r1,	138(r4)	;0x008a(r4)
    12be:	00 00       	bra	@r0		
    12c0:	be 17       	popm	#12,	r9	
    12c2:	00 00       	bra	@r0		
    12c4:	40 00       	rrcm.a	#1,	r0	
    12c6:	58 01       	rram	#1,	r8	
    12c8:	0b 00       	mova	@r0,	r11	
    12ca:	00 00       	bra	@r0		
    12cc:	00 00       	bra	@r0		
    12ce:	00 00       	bra	@r0		
    12d0:	c0 00       	bra	r0		
    12d2:	00 00       	bra	@r0		
    12d4:	02 00       	mova	@r0,	r2	
    12d6:	00 00       	bra	@r0		
    12d8:	00 00       	bra	@r0		
    12da:	00 00       	bra	@r0		
    12dc:	e0 00       	adda	r0,	r0	
    12de:	00 00       	bra	@r0		
    12e0:	88 00 00 00 	mova	#0x00000,r8	
    12e4:	00 00       	bra	@r0		
    12e6:	00 00       	bra	@r0		
    12e8:	24 00 00 00 	mova	&0x00000,r4	
    12ec:	8e 00 00 00 	mova	#0x00000,r14	
    12f0:	46 18       	.word	0x1846;	????	
    12f2:	00 00       	bra	@r0		
    12f4:	24 00 76 01 	mova	&0x00176,r4	
    12f8:	5a 38       	jl	$+182    	;abs 0x13ae
    12fa:	00 00       	bra	@r0		
    12fc:	00 00       	bra	@r0		
    12fe:	00 00       	bra	@r0		
    1300:	44 00       	rrcm.a	#1,	r4	
    1302:	76 01 00 00 	mova	r1,	0(r6)	;0x0000(r6)
    1306:	00 00       	bra	@r0		
    1308:	00 00       	bra	@r0		
    130a:	00 00       	bra	@r0		
    130c:	44 00       	rrcm.a	#1,	r4	
    130e:	77 01 00 00 	mova	r1,	0(r7)	;0x0000(r7)
    1312:	00 00       	bra	@r0		
    1314:	00 00       	bra	@r0		
    1316:	00 00       	bra	@r0		
    1318:	44 00       	rrcm.a	#1,	r4	
    131a:	78 01 04 00 	mova	r1,	4(r8)	;0x0004(r8)
    131e:	00 00       	bra	@r0		
    1320:	00 00       	bra	@r0		
    1322:	00 00       	bra	@r0		
    1324:	44 00       	rrcm.a	#1,	r4	
    1326:	79 01 08 00 	mova	r1,	8(r9)	;0x0008(r9)
    132a:	00 00       	bra	@r0		
    132c:	00 00       	bra	@r0		
    132e:	00 00       	bra	@r0		
    1330:	44 00       	rrcm.a	#1,	r4	
    1332:	7a 01 0c 00 	mova	r1,	12(r10)	;0x000c(r10)
    1336:	00 00       	bra	@r0		
    1338:	00 00       	bra	@r0		
    133a:	00 00       	bra	@r0		
    133c:	24 00 00 00 	mova	&0x00000,r4	
    1340:	0e 00       	mova	@r0,	r14	
    1342:	00 00       	bra	@r0		
    1344:	5f 18       	.word	0x185f;	????	
    1346:	00 00       	bra	@r0		
    1348:	24 00 7d 01 	mova	&0x0017d,r4	
    134c:	68 38       	jl	$+210    	;abs 0x141e
    134e:	00 00       	bra	@r0		
    1350:	00 00       	bra	@r0		
    1352:	00 00       	bra	@r0		
    1354:	44 00       	rrcm.a	#1,	r4	
    1356:	7d 01 00 00 	mova	r1,	0(r13)	;0x0000(r13)
    135a:	00 00       	bra	@r0		
    135c:	00 00       	bra	@r0		
    135e:	00 00       	bra	@r0		
    1360:	44 00       	rrcm.a	#1,	r4	
    1362:	89 01 00 00 	mova	#0x10000,r9	
    1366:	00 00       	bra	@r0		
    1368:	00 00       	bra	@r0		
    136a:	00 00       	bra	@r0		
    136c:	44 00       	rrcm.a	#1,	r4	
    136e:	8b 01 04 00 	mova	#0x10004,r11	
    1372:	00 00       	bra	@r0		
    1374:	00 00       	bra	@r0		
    1376:	00 00       	bra	@r0		
    1378:	44 00       	rrcm.a	#1,	r4	
    137a:	93 01       	.word	0x0193;	????	Illegal as address instr
    137c:	0a 00       	mova	@r0,	r10	
    137e:	00 00       	bra	@r0		
    1380:	00 00       	bra	@r0		
    1382:	00 00       	bra	@r0		
    1384:	44 00       	rrcm.a	#1,	r4	
    1386:	9c 01 10 00 	cmpa	#0x10010,r12	
    138a:	00 00       	bra	@r0		
    138c:	00 00       	bra	@r0		
    138e:	00 00       	bra	@r0		
    1390:	44 00       	rrcm.a	#1,	r4	
    1392:	9d 01 16 00 	cmpa	#0x10016,r13	
    1396:	00 00       	bra	@r0		
    1398:	00 00       	bra	@r0		
    139a:	00 00       	bra	@r0		
    139c:	24 00 00 00 	mova	&0x00000,r4	
    13a0:	18 00       	mova	#0x00000,r8	
    13a2:	00 00       	bra	@r0		
    13a4:	72 18       	.word	0x1872;	????	
    13a6:	00 00       	bra	@r0		
    13a8:	24 00 9f 01 	mova	&0x0019f,r4	
    13ac:	80 38       	jl	$+258    	;abs 0x14ae
    13ae:	00 00       	bra	@r0		
    13b0:	00 00       	bra	@r0		
    13b2:	00 00       	bra	@r0		
    13b4:	44 00       	rrcm.a	#1,	r4	
    13b6:	9f 01 00 00 	cmpa	#0x10000,r15	
    13ba:	00 00       	bra	@r0		
    13bc:	00 00       	bra	@r0		
    13be:	00 00       	bra	@r0		
    13c0:	44 00       	rrcm.a	#1,	r4	
    13c2:	a1 01 00 00 	adda	#0x10000,r1	
    13c6:	00 00       	bra	@r0		
    13c8:	00 00       	bra	@r0		
    13ca:	00 00       	bra	@r0		
    13cc:	44 00       	rrcm.a	#1,	r4	
    13ce:	a4 01 04 00 	adda	#0x10004,r4	
    13d2:	00 00       	bra	@r0		
    13d4:	00 00       	bra	@r0		
    13d6:	00 00       	bra	@r0		
    13d8:	44 00       	rrcm.a	#1,	r4	
    13da:	a7 01 08 00 	adda	#0x10008,r7	
    13de:	00 00       	bra	@r0		
    13e0:	00 00       	bra	@r0		
    13e2:	00 00       	bra	@r0		
    13e4:	44 00       	rrcm.a	#1,	r4	
    13e6:	aa 01 0c 00 	adda	#0x1000c,r10	
    13ea:	00 00       	bra	@r0		
    13ec:	00 00       	bra	@r0		
    13ee:	00 00       	bra	@r0		
    13f0:	44 00       	rrcm.a	#1,	r4	
    13f2:	ad 01 10 00 	adda	#0x10010,r13	
    13f6:	00 00       	bra	@r0		
    13f8:	00 00       	bra	@r0		
    13fa:	00 00       	bra	@r0		
    13fc:	44 00       	rrcm.a	#1,	r4	
    13fe:	af 01 14 00 	adda	#0x10014,r15	
    1402:	00 00       	bra	@r0		
    1404:	00 00       	bra	@r0		
    1406:	00 00       	bra	@r0		
    1408:	24 00 00 00 	mova	&0x00000,r4	
    140c:	16 00       	mova	#0x00000,r6	
    140e:	00 00       	bra	@r0		
    1410:	82 18       	.word	0x1882;	????	
    1412:	00 00       	bra	@r0		
    1414:	24 00 b2 01 	mova	&0x001b2,r4	
    1418:	96 38       	jl	$+302    	;abs 0x1546
    141a:	00 00       	bra	@r0		
    141c:	00 00       	bra	@r0		
    141e:	00 00       	bra	@r0		
    1420:	44 00       	rrcm.a	#1,	r4	
    1422:	b2 01 00 00 	suba	#0x10000,r2	
    1426:	00 00       	bra	@r0		
    1428:	00 00       	bra	@r0		
    142a:	00 00       	bra	@r0		
    142c:	44 00       	rrcm.a	#1,	r4	
    142e:	bf 01 00 00 	suba	#0x10000,r15	
    1432:	00 00       	bra	@r0		
    1434:	00 00       	bra	@r0		
    1436:	00 00       	bra	@r0		
    1438:	44 00       	rrcm.a	#1,	r4	
    143a:	c2 01       	mova	r1,	r2	
    143c:	06 00       	mova	@r0,	r6	
    143e:	00 00       	bra	@r0		
    1440:	00 00       	bra	@r0		
    1442:	00 00       	bra	@r0		
    1444:	44 00       	rrcm.a	#1,	r4	
    1446:	cb 01       	mova	r1,	r11	
    1448:	0c 00       	mova	@r0,	r12	
    144a:	00 00       	bra	@r0		
    144c:	00 00       	bra	@r0		
    144e:	00 00       	bra	@r0		
    1450:	44 00       	rrcm.a	#1,	r4	
    1452:	cc 01       	mova	r1,	r12	
    1454:	12 00       	mova	#0x00000,r2	
    1456:	00 00       	bra	@r0		
    1458:	00 00       	bra	@r0		
    145a:	00 00       	bra	@r0		
    145c:	24 00 00 00 	mova	&0x00000,r4	
    1460:	14 00       	mova	#0x00000,r4	
    1462:	00 00       	bra	@r0		
    1464:	98 18       	.word	0x1898;	????	
    1466:	00 00       	bra	@r0		
    1468:	24 00 ce 01 	mova	&0x001ce,r4	
    146c:	aa 38       	jl	$+342    	;abs 0x15c2
    146e:	00 00       	bra	@r0		
    1470:	00 00       	bra	@r0		
    1472:	00 00       	bra	@r0		
    1474:	44 00       	rrcm.a	#1,	r4	
    1476:	ce 01       	mova	r1,	r14	
	...
    1480:	44 00       	rrcm.a	#1,	r4	
    1482:	cf 01       	mova	r1,	r15	
    1484:	10 00       	bra	#0x00000	
    1486:	00 00       	bra	@r0		
    1488:	00 00       	bra	@r0		
    148a:	00 00       	bra	@r0		
    148c:	44 00       	rrcm.a	#1,	r4	
    148e:	d1 01       	cmpa	r1,	r1	
    1490:	14 00       	mova	#0x00000,r4	
    1492:	00 00       	bra	@r0		
    1494:	00 00       	bra	@r0		
    1496:	00 00       	bra	@r0		
    1498:	44 00       	rrcm.a	#1,	r4	
    149a:	d2 01       	cmpa	r1,	r2	
    149c:	16 00       	mova	#0x00000,r6	
    149e:	00 00       	bra	@r0		
    14a0:	00 00       	bra	@r0		
    14a2:	00 00       	bra	@r0		
    14a4:	44 00       	rrcm.a	#1,	r4	
    14a6:	d3 01       	.word	0x01d3;	????	Illegal as address instr
    14a8:	1e 00       	mova	#0x00000,r14	
    14aa:	00 00       	bra	@r0		
    14ac:	00 00       	bra	@r0		
    14ae:	00 00       	bra	@r0		
    14b0:	44 00       	rrcm.a	#1,	r4	
    14b2:	d4 01       	cmpa	r1,	r4	
    14b4:	26 00 00 00 	mova	&0x00000,r6	
    14b8:	00 00       	bra	@r0		
    14ba:	00 00       	bra	@r0		
    14bc:	44 00       	rrcm.a	#1,	r4	
    14be:	d5 01       	cmpa	r1,	r5	
    14c0:	30 00 00 00 	bra	0x0000		;PC rel. 0x014c2
    14c4:	00 00       	bra	@r0		
    14c6:	00 00       	bra	@r0		
    14c8:	44 00       	rrcm.a	#1,	r4	
    14ca:	d6 01       	cmpa	r1,	r6	
    14cc:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x014ce
    14d0:	00 00       	bra	@r0		
    14d2:	00 00       	bra	@r0		
    14d4:	44 00       	rrcm.a	#1,	r4	
    14d6:	e1 01       	adda	r1,	r1	
    14d8:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x014da
    14dc:	00 00       	bra	@r0		
    14de:	00 00       	bra	@r0		
    14e0:	44 00       	rrcm.a	#1,	r4	
    14e2:	d9 01       	cmpa	r1,	r9	
    14e4:	44 00       	rrcm.a	#1,	r4	
    14e6:	00 00       	bra	@r0		
    14e8:	00 00       	bra	@r0		
    14ea:	00 00       	bra	@r0		
    14ec:	44 00       	rrcm.a	#1,	r4	
    14ee:	da 01       	cmpa	r1,	r10	
    14f0:	52 00       	rrcm	#1,	r2	
    14f2:	00 00       	bra	@r0		
    14f4:	00 00       	bra	@r0		
    14f6:	00 00       	bra	@r0		
    14f8:	44 00       	rrcm.a	#1,	r4	
    14fa:	df 01       	cmpa	r1,	r15	
    14fc:	5e 00       	rrcm	#1,	r14	
    14fe:	00 00       	bra	@r0		
    1500:	00 00       	bra	@r0		
    1502:	00 00       	bra	@r0		
    1504:	44 00       	rrcm.a	#1,	r4	
    1506:	dd 01       	cmpa	r1,	r13	
    1508:	64 00 00 00 	mova	r0,	&0x40000
    150c:	00 00       	bra	@r0		
    150e:	00 00       	bra	@r0		
    1510:	44 00       	rrcm.a	#1,	r4	
    1512:	e3 01       	.word	0x01e3;	????	Illegal as address instr
    1514:	6a 00 00 00 	mova	r0,	&0xa0000
    1518:	00 00       	bra	@r0		
    151a:	00 00       	bra	@r0		
    151c:	44 00       	rrcm.a	#1,	r4	
    151e:	d2 01       	cmpa	r1,	r2	
    1520:	6c 00 00 00 	mova	r0,	&0xc0000
    1524:	00 00       	bra	@r0		
    1526:	00 00       	bra	@r0		
    1528:	44 00       	rrcm.a	#1,	r4	
    152a:	e5 01       	adda	r1,	r5	
    152c:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
    1530:	af 18       	.word	0x18af;	????	
    1532:	00 00       	bra	@r0		
    1534:	40 00       	rrcm.a	#1,	r0	
    1536:	cf 01       	mova	r1,	r15	
    1538:	0a 00       	mova	@r0,	r10	
    153a:	00 00       	bra	@r0		
    153c:	be 18       	.word	0x18be;	????	
    153e:	00 00       	bra	@r0		
    1540:	40 00       	rrcm.a	#1,	r0	
    1542:	d1 01       	cmpa	r1,	r1	
    1544:	0b 00       	mova	@r0,	r11	
    1546:	00 00       	bra	@r0		
    1548:	d1 18       	.word	0x18d1;	????	
    154a:	00 00       	bra	@r0		
    154c:	40 00       	rrcm.a	#1,	r0	
    154e:	d1 01       	cmpa	r1,	r1	
    1550:	0d 00       	mova	@r0,	r13	
    1552:	00 00       	bra	@r0		
    1554:	00 00       	bra	@r0		
    1556:	00 00       	bra	@r0		
    1558:	c0 00       	bra	r0		
    155a:	00 00       	bra	@r0		
    155c:	10 00       	bra	#0x00000	
    155e:	00 00       	bra	@r0		
    1560:	00 00       	bra	@r0		
    1562:	00 00       	bra	@r0		
    1564:	e0 00       	adda	r0,	r0	
    1566:	00 00       	bra	@r0		
    1568:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
    156c:	00 00       	bra	@r0		
    156e:	00 00       	bra	@r0		
    1570:	24 00 00 00 	mova	&0x00000,r4	
    1574:	86 00 00 00 	mova	#0x00000,r6	
    1578:	e7 18       	.word	0x18e7;	????	
    157a:	00 00       	bra	@r0		
    157c:	24 00 e7 01 	mova	&0x001e7,r4	
    1580:	5e 39       	jl	$+702    	;abs 0x183e
    1582:	00 00       	bra	@r0		
    1584:	00 00       	bra	@r0		
    1586:	00 00       	bra	@r0		
    1588:	44 00       	rrcm.a	#1,	r4	
    158a:	e7 01       	adda	r1,	r7	
	...
    1594:	44 00       	rrcm.a	#1,	r4	
    1596:	e9 01       	adda	r1,	r9	
    1598:	12 00       	mova	#0x00000,r2	
    159a:	00 00       	bra	@r0		
    159c:	00 00       	bra	@r0		
    159e:	00 00       	bra	@r0		
    15a0:	44 00       	rrcm.a	#1,	r4	
    15a2:	ed 01       	adda	r1,	r13	
    15a4:	1c 00       	mova	#0x00000,r12	
    15a6:	00 00       	bra	@r0		
    15a8:	00 00       	bra	@r0		
    15aa:	00 00       	bra	@r0		
    15ac:	44 00       	rrcm.a	#1,	r4	
    15ae:	ee 01       	adda	r1,	r14	
    15b0:	1e 00       	mova	#0x00000,r14	
    15b2:	00 00       	bra	@r0		
    15b4:	00 00       	bra	@r0		
    15b6:	00 00       	bra	@r0		
    15b8:	44 00       	rrcm.a	#1,	r4	
    15ba:	ef 01       	adda	r1,	r15	
    15bc:	2e 00 00 00 	mova	&0x00000,r14	
    15c0:	00 00       	bra	@r0		
    15c2:	00 00       	bra	@r0		
    15c4:	44 00       	rrcm.a	#1,	r4	
    15c6:	f2 01       	suba	r1,	r2	
    15c8:	42 00       	rrcm.a	#1,	r2	
    15ca:	00 00       	bra	@r0		
    15cc:	00 00       	bra	@r0		
    15ce:	00 00       	bra	@r0		
    15d0:	44 00       	rrcm.a	#1,	r4	
    15d2:	f3 01       	.word	0x01f3;	????	Illegal as address instr
    15d4:	4c 00       	rrcm.a	#1,	r12	
    15d6:	00 00       	bra	@r0		
    15d8:	00 00       	bra	@r0		
    15da:	00 00       	bra	@r0		
    15dc:	44 00       	rrcm.a	#1,	r4	
    15de:	f4 01       	suba	r1,	r4	
    15e0:	52 00       	rrcm	#1,	r2	
    15e2:	00 00       	bra	@r0		
    15e4:	00 00       	bra	@r0		
    15e6:	00 00       	bra	@r0		
    15e8:	44 00       	rrcm.a	#1,	r4	
    15ea:	f5 01       	suba	r1,	r5	
    15ec:	5a 00       	rrcm	#1,	r10	
    15ee:	00 00       	bra	@r0		
    15f0:	00 00       	bra	@r0		
    15f2:	00 00       	bra	@r0		
    15f4:	44 00       	rrcm.a	#1,	r4	
    15f6:	f6 01       	suba	r1,	r6	
    15f8:	60 00 00 00 	mova	r0,	&0x00000
    15fc:	00 00       	bra	@r0		
    15fe:	00 00       	bra	@r0		
    1600:	44 00       	rrcm.a	#1,	r4	
    1602:	f7 01       	suba	r1,	r7	
    1604:	68 00 00 00 	mova	r0,	&0x80000
    1608:	00 00       	bra	@r0		
    160a:	00 00       	bra	@r0		
    160c:	44 00       	rrcm.a	#1,	r4	
    160e:	f9 01       	suba	r1,	r9	
    1610:	6e 00 00 00 	mova	r0,	&0xe0000
    1614:	00 00       	bra	@r0		
    1616:	00 00       	bra	@r0		
    1618:	44 00       	rrcm.a	#1,	r4	
    161a:	fa 01       	suba	r1,	r10	
    161c:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
    1620:	00 00       	bra	@r0		
    1622:	00 00       	bra	@r0		
    1624:	44 00       	rrcm.a	#1,	r4	
    1626:	fb 01       	suba	r1,	r11	
    1628:	8a 00 00 00 	mova	#0x00000,r10	
    162c:	00 00       	bra	@r0		
    162e:	00 00       	bra	@r0		
    1630:	44 00       	rrcm.a	#1,	r4	
    1632:	f9 01       	suba	r1,	r9	
    1634:	96 00 00 00 	cmpa	#0x00000,r6	
    1638:	00 00       	bra	@r0		
    163a:	00 00       	bra	@r0		
    163c:	44 00       	rrcm.a	#1,	r4	
    163e:	fe 01       	suba	r1,	r14	
    1640:	9c 00 00 00 	cmpa	#0x00000,r12	
    1644:	00 00       	bra	@r0		
    1646:	00 00       	bra	@r0		
    1648:	44 00       	rrcm.a	#1,	r4	
    164a:	ff 01       	suba	r1,	r15	
    164c:	9e 00 00 00 	cmpa	#0x00000,r14	
    1650:	00 00       	bra	@r0		
    1652:	00 00       	bra	@r0		
    1654:	44 00       	rrcm.a	#1,	r4	
    1656:	00 02       	bra	#4		;r2 As==10
    1658:	c8 00       	mova	r0,	r8	
    165a:	00 00       	bra	@r0		
    165c:	00 00       	bra	@r0		
    165e:	00 00       	bra	@r0		
    1660:	44 00       	rrcm.a	#1,	r4	
    1662:	fe 01       	suba	r1,	r14	
    1664:	d0 00       	cmpa	r0,	r0	
    1666:	00 00       	bra	@r0		
    1668:	00 00       	bra	@r0		
    166a:	00 00       	bra	@r0		
    166c:	44 00       	rrcm.a	#1,	r4	
    166e:	03 02       	.word	0x0203;	????	Illegal as address instr
    1670:	d6 00       	cmpa	r0,	r6	
    1672:	00 00       	bra	@r0		
    1674:	00 00       	bra	@r0		
    1676:	00 00       	bra	@r0		
    1678:	44 00       	rrcm.a	#1,	r4	
    167a:	04 02       	mova	#4,	r4	;r2 As==10
    167c:	da 00       	cmpa	r0,	r10	
    167e:	00 00       	bra	@r0		
    1680:	00 00       	bra	@r0		
    1682:	00 00       	bra	@r0		
    1684:	44 00       	rrcm.a	#1,	r4	
    1686:	05 02       	mova	#4,	r5	;r2 As==10
    1688:	e0 00       	adda	r0,	r0	
    168a:	00 00       	bra	@r0		
    168c:	00 00       	bra	@r0		
    168e:	00 00       	bra	@r0		
    1690:	44 00       	rrcm.a	#1,	r4	
    1692:	06 02       	mova	#4,	r6	;r2 As==10
    1694:	ea 00       	adda	r0,	r10	
    1696:	00 00       	bra	@r0		
    1698:	00 00       	bra	@r0		
    169a:	00 00       	bra	@r0		
    169c:	44 00       	rrcm.a	#1,	r4	
    169e:	07 02       	mova	#4,	r7	;r2 As==10
    16a0:	f4 00       	suba	r0,	r4	
    16a2:	00 00       	bra	@r0		
    16a4:	00 00       	bra	@r0		
    16a6:	00 00       	bra	@r0		
    16a8:	44 00       	rrcm.a	#1,	r4	
    16aa:	08 02       	mova	#4,	r8	;r2 As==10
    16ac:	fa 00       	suba	r0,	r10	
    16ae:	00 00       	bra	@r0		
    16b0:	00 00       	bra	@r0		
    16b2:	00 00       	bra	@r0		
    16b4:	44 00       	rrcm.a	#1,	r4	
    16b6:	09 02       	mova	#4,	r9	;r2 As==10
    16b8:	fe 00       	suba	r0,	r14	
    16ba:	00 00       	bra	@r0		
    16bc:	00 00       	bra	@r0		
    16be:	00 00       	bra	@r0		
    16c0:	44 00       	rrcm.a	#1,	r4	
    16c2:	0c 02       	mova	#4,	r12	;r2 As==10
    16c4:	38 01 00 00 	mova	0(r1),	r8	;0x0000(r1)
    16c8:	00 00       	bra	@r0		
    16ca:	00 00       	bra	@r0		
    16cc:	44 00       	rrcm.a	#1,	r4	
    16ce:	0d 02       	mova	#4,	r13	;r2 As==10
    16d0:	6e 01 00 00 	mova	r1,	&0xe0000
    16d4:	00 00       	bra	@r0		
    16d6:	00 00       	bra	@r0		
    16d8:	44 00       	rrcm.a	#1,	r4	
    16da:	08 02       	mova	#4,	r8	;r2 As==10
    16dc:	8c 01 00 00 	mova	#0x10000,r12	
    16e0:	00 00       	bra	@r0		
    16e2:	00 00       	bra	@r0		
    16e4:	44 00       	rrcm.a	#1,	r4	
    16e6:	03 02       	.word	0x0203;	????	Illegal as address instr
    16e8:	92 01 00 00 	cmpa	#0x10000,r2	
    16ec:	00 00       	bra	@r0		
    16ee:	00 00       	bra	@r0		
    16f0:	44 00       	rrcm.a	#1,	r4	
    16f2:	12 02       	mova	#8,	r2	;r2 As==11
    16f4:	98 01 00 00 	cmpa	#0x10000,r8	
    16f8:	00 00       	bra	@r0		
    16fa:	00 00       	bra	@r0		
    16fc:	44 00       	rrcm.a	#1,	r4	
    16fe:	14 02       	mova	#8,	r4	;r2 As==11
    1700:	9e 01 00 00 	cmpa	#0x10000,r14	
    1704:	00 00       	bra	@r0		
    1706:	00 00       	bra	@r0		
    1708:	44 00       	rrcm.a	#1,	r4	
    170a:	15 02       	mova	#8,	r5	;r2 As==11
    170c:	a0 01 00 00 	adda	#0x10000,r0	
    1710:	00 00       	bra	@r0		
    1712:	00 00       	bra	@r0		
    1714:	44 00       	rrcm.a	#1,	r4	
    1716:	16 02       	mova	#8,	r6	;r2 As==11
    1718:	d8 01       	cmpa	r1,	r8	
    171a:	00 00       	bra	@r0		
    171c:	00 00       	bra	@r0		
    171e:	00 00       	bra	@r0		
    1720:	44 00       	rrcm.a	#1,	r4	
    1722:	14 02       	mova	#8,	r4	;r2 As==11
    1724:	f6 01       	suba	r1,	r6	
    1726:	00 00       	bra	@r0		
    1728:	00 00       	bra	@r0		
    172a:	00 00       	bra	@r0		
    172c:	44 00       	rrcm.a	#1,	r4	
    172e:	1a 02       	mova	#8,	r10	;r2 As==11
    1730:	fc 01       	suba	r1,	r12	
    1732:	00 00       	bra	@r0		
    1734:	00 00       	bra	@r0		
    1736:	00 00       	bra	@r0		
    1738:	44 00       	rrcm.a	#1,	r4	
    173a:	1b 02       	mova	#8,	r11	;r2 As==11
    173c:	02 02       	mova	#4,	r2	;r2 As==10
    173e:	00 00       	bra	@r0		
    1740:	00 00       	bra	@r0		
    1742:	00 00       	bra	@r0		
    1744:	44 00       	rrcm.a	#1,	r4	
    1746:	1e 02       	mova	#8,	r14	;r2 As==11
    1748:	0a 02       	mova	#4,	r10	;r2 As==10
    174a:	00 00       	bra	@r0		
    174c:	00 00       	bra	@r0		
    174e:	00 00       	bra	@r0		
    1750:	44 00       	rrcm.a	#1,	r4	
    1752:	1f 02       	mova	#8,	r15	;r2 As==11
    1754:	16 02       	mova	#8,	r6	;r2 As==11
    1756:	00 00       	bra	@r0		
    1758:	00 00       	bra	@r0		
    175a:	00 00       	bra	@r0		
    175c:	44 00       	rrcm.a	#1,	r4	
    175e:	21 02 26 02 	mova	&0x20226,r1	
    1762:	00 00       	bra	@r0		
    1764:	00 00       	bra	@r0		
    1766:	00 00       	bra	@r0		
    1768:	44 00       	rrcm.a	#1,	r4	
    176a:	24 02 2e 02 	mova	&0x2022e,r4	
    176e:	00 00       	bra	@r0		
    1770:	00 00       	bra	@r0		
    1772:	00 00       	bra	@r0		
    1774:	44 00       	rrcm.a	#1,	r4	
    1776:	25 02 3a 02 	mova	&0x2023a,r5	
    177a:	00 00       	bra	@r0		
    177c:	00 00       	bra	@r0		
    177e:	00 00       	bra	@r0		
    1780:	44 00       	rrcm.a	#1,	r4	
    1782:	27 02 4a 02 	mova	&0x2024a,r7	
    1786:	00 00       	bra	@r0		
    1788:	00 00       	bra	@r0		
    178a:	00 00       	bra	@r0		
    178c:	44 00       	rrcm.a	#1,	r4	
    178e:	2a 02 52 02 	mova	&0x20252,r10	
    1792:	00 00       	bra	@r0		
    1794:	00 00       	bra	@r0		
    1796:	00 00       	bra	@r0		
    1798:	44 00       	rrcm.a	#1,	r4	
    179a:	2b 02 5e 02 	mova	&0x2025e,r11	
    179e:	00 00       	bra	@r0		
    17a0:	00 00       	bra	@r0		
    17a2:	00 00       	bra	@r0		
    17a4:	44 00       	rrcm.a	#1,	r4	
    17a6:	2d 02 6e 02 	mova	&0x2026e,r13	
    17aa:	00 00       	bra	@r0		
    17ac:	00 00       	bra	@r0		
    17ae:	00 00       	bra	@r0		
    17b0:	44 00       	rrcm.a	#1,	r4	
    17b2:	30 02 76 02 	bra	&0x0276	
    17b6:	00 00       	bra	@r0		
    17b8:	00 00       	bra	@r0		
    17ba:	00 00       	bra	@r0		
    17bc:	44 00       	rrcm.a	#1,	r4	
    17be:	31 02 82 02 	mova	&0x0282,r1	
    17c2:	00 00       	bra	@r0		
    17c4:	00 00       	bra	@r0		
    17c6:	00 00       	bra	@r0		
    17c8:	44 00       	rrcm.a	#1,	r4	
    17ca:	33 02       	.word	0x0233;	????	Illegal as address instr
    17cc:	92 02 00 00 	cmpa	#0x20000,r2	
    17d0:	00 00       	bra	@r0		
    17d2:	00 00       	bra	@r0		
    17d4:	44 00       	rrcm.a	#1,	r4	
    17d6:	36 02 9a 02 	mova	&0x029a,r6	
    17da:	00 00       	bra	@r0		
    17dc:	00 00       	bra	@r0		
    17de:	00 00       	bra	@r0		
    17e0:	44 00       	rrcm.a	#1,	r4	
    17e2:	37 02 a6 02 	mova	&0x02a6,r7	
    17e6:	00 00       	bra	@r0		
    17e8:	00 00       	bra	@r0		
    17ea:	00 00       	bra	@r0		
    17ec:	44 00       	rrcm.a	#1,	r4	
    17ee:	39 02 b6 02 	mova	&0x02b6,r9	
    17f2:	00 00       	bra	@r0		
    17f4:	00 00       	bra	@r0		
    17f6:	00 00       	bra	@r0		
    17f8:	44 00       	rrcm.a	#1,	r4	
    17fa:	3c 02 be 02 	mova	&0x02be,r12	
    17fe:	00 00       	bra	@r0		
    1800:	00 00       	bra	@r0		
    1802:	00 00       	bra	@r0		
    1804:	44 00       	rrcm.a	#1,	r4	
    1806:	3d 02 ca 02 	mova	&0x02ca,r13	
    180a:	00 00       	bra	@r0		
    180c:	00 00       	bra	@r0		
    180e:	00 00       	bra	@r0		
    1810:	44 00       	rrcm.a	#1,	r4	
    1812:	3f 02 da 02 	mova	&0x02da,r15	
    1816:	00 00       	bra	@r0		
    1818:	00 00       	bra	@r0		
    181a:	00 00       	bra	@r0		
    181c:	44 00       	rrcm.a	#1,	r4	
    181e:	42 02       	rlam.a	#1,	r2	
    1820:	e2 02       	adda	r2,	r2	
    1822:	00 00       	bra	@r0		
    1824:	00 00       	bra	@r0		
    1826:	00 00       	bra	@r0		
    1828:	44 00       	rrcm.a	#1,	r4	
    182a:	43 02       	rlam.a	#1,	#0	;r3 As==00
    182c:	ee 02       	adda	r2,	r14	
    182e:	00 00       	bra	@r0		
    1830:	00 00       	bra	@r0		
    1832:	00 00       	bra	@r0		
    1834:	44 00       	rrcm.a	#1,	r4	
    1836:	45 02       	rlam.a	#1,	r5	
    1838:	fe 02       	suba	r2,	r14	
    183a:	00 00       	bra	@r0		
    183c:	00 00       	bra	@r0		
    183e:	00 00       	bra	@r0		
    1840:	44 00       	rrcm.a	#1,	r4	
    1842:	48 02       	rlam.a	#1,	r8	
    1844:	06 03       	mova	#2,	r6	;r3 As==10
    1846:	00 00       	bra	@r0		
    1848:	00 00       	bra	@r0		
    184a:	00 00       	bra	@r0		
    184c:	44 00       	rrcm.a	#1,	r4	
    184e:	49 02       	rlam.a	#1,	r9	
    1850:	12 03       	mova	#-1,	r2	;r3 As==11
    1852:	00 00       	bra	@r0		
    1854:	00 00       	bra	@r0		
    1856:	00 00       	bra	@r0		
    1858:	44 00       	rrcm.a	#1,	r4	
    185a:	4b 02       	rlam.a	#1,	r11	
    185c:	22 03 00 00 	mova	&0x30000,r2	
    1860:	00 00       	bra	@r0		
    1862:	00 00       	bra	@r0		
    1864:	44 00       	rrcm.a	#1,	r4	
    1866:	4e 02       	rlam.a	#1,	r14	
    1868:	2a 03 00 00 	mova	&0x30000,r10	
    186c:	00 00       	bra	@r0		
    186e:	00 00       	bra	@r0		
    1870:	44 00       	rrcm.a	#1,	r4	
    1872:	4f 02       	rlam.a	#1,	r15	
    1874:	36 03 00 00 	mova	#1,	r6	;r3 As==01
    1878:	00 00       	bra	@r0		
    187a:	00 00       	bra	@r0		
    187c:	44 00       	rrcm.a	#1,	r4	
    187e:	51 02       	rlam	#1,	r1	
    1880:	46 03       	rrum.a	#1,	r6	
    1882:	00 00       	bra	@r0		
    1884:	00 00       	bra	@r0		
    1886:	00 00       	bra	@r0		
    1888:	44 00       	rrcm.a	#1,	r4	
    188a:	54 02       	rlam	#1,	r4	
    188c:	4e 03       	rrum.a	#1,	r14	
    188e:	00 00       	bra	@r0		
    1890:	00 00       	bra	@r0		
    1892:	00 00       	bra	@r0		
    1894:	44 00       	rrcm.a	#1,	r4	
    1896:	55 02       	rlam	#1,	r5	
    1898:	5a 03       	rrum	#1,	r10	
    189a:	00 00       	bra	@r0		
    189c:	00 00       	bra	@r0		
    189e:	00 00       	bra	@r0		
    18a0:	44 00       	rrcm.a	#1,	r4	
    18a2:	57 02       	rlam	#1,	r7	
    18a4:	6a 03 00 00 	mova	#0,	&0xa0000;r3 As==00
    18a8:	00 00       	bra	@r0		
    18aa:	00 00       	bra	@r0		
    18ac:	44 00       	rrcm.a	#1,	r4	
    18ae:	5a 02       	rlam	#1,	r10	
    18b0:	72 03 00 00 	mova	#0,	&0x0000	;r3 As==00
    18b4:	00 00       	bra	@r0		
    18b6:	00 00       	bra	@r0		
    18b8:	44 00       	rrcm.a	#1,	r4	
    18ba:	5b 02       	rlam	#1,	r11	
    18bc:	7e 03 00 00 	mova	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    18c0:	00 00       	bra	@r0		
    18c2:	00 00       	bra	@r0		
    18c4:	44 00       	rrcm.a	#1,	r4	
    18c6:	5d 02       	rlam	#1,	r13	
    18c8:	8e 03 00 00 	mova	#0x30000,r14	
    18cc:	00 00       	bra	@r0		
    18ce:	00 00       	bra	@r0		
    18d0:	44 00       	rrcm.a	#1,	r4	
    18d2:	60 02 96 03 	mova	r2,	&0x00396
    18d6:	00 00       	bra	@r0		
    18d8:	00 00       	bra	@r0		
    18da:	00 00       	bra	@r0		
    18dc:	44 00       	rrcm.a	#1,	r4	
    18de:	61 02 a2 03 	mova	r2,	&0x103a2
    18e2:	00 00       	bra	@r0		
    18e4:	00 00       	bra	@r0		
    18e6:	00 00       	bra	@r0		
    18e8:	44 00       	rrcm.a	#1,	r4	
    18ea:	63 02 b2 03 	mova	r2,	&0x303b2
    18ee:	00 00       	bra	@r0		
    18f0:	00 00       	bra	@r0		
    18f2:	00 00       	bra	@r0		
    18f4:	44 00       	rrcm.a	#1,	r4	
    18f6:	66 02 ba 03 	mova	r2,	&0x603ba
    18fa:	00 00       	bra	@r0		
    18fc:	00 00       	bra	@r0		
    18fe:	00 00       	bra	@r0		
    1900:	44 00       	rrcm.a	#1,	r4	
    1902:	67 02 c6 03 	mova	r2,	&0x703c6
    1906:	00 00       	bra	@r0		
    1908:	00 00       	bra	@r0		
    190a:	00 00       	bra	@r0		
    190c:	44 00       	rrcm.a	#1,	r4	
    190e:	69 02 d6 03 	mova	r2,	&0x903d6
    1912:	00 00       	bra	@r0		
    1914:	00 00       	bra	@r0		
    1916:	00 00       	bra	@r0		
    1918:	44 00       	rrcm.a	#1,	r4	
    191a:	6c 02 de 03 	mova	r2,	&0xc03de
    191e:	00 00       	bra	@r0		
    1920:	00 00       	bra	@r0		
    1922:	00 00       	bra	@r0		
    1924:	44 00       	rrcm.a	#1,	r4	
    1926:	6d 02 ea 03 	mova	r2,	&0xd03ea
    192a:	00 00       	bra	@r0		
    192c:	00 00       	bra	@r0		
    192e:	00 00       	bra	@r0		
    1930:	44 00       	rrcm.a	#1,	r4	
    1932:	6f 02 fa 03 	mova	r2,	&0xf03fa
    1936:	00 00       	bra	@r0		
    1938:	00 00       	bra	@r0		
    193a:	00 00       	bra	@r0		
    193c:	44 00       	rrcm.a	#1,	r4	
    193e:	71 02 02 04 	mova	r2,	1026(r1);0x0402(r1)
    1942:	00 00       	bra	@r0		
    1944:	00 00       	bra	@r0		
    1946:	00 00       	bra	@r0		
    1948:	44 00       	rrcm.a	#1,	r4	
    194a:	72 02 0a 04 	mova	r2,	&0x040a	
    194e:	00 00       	bra	@r0		
    1950:	00 00       	bra	@r0		
    1952:	00 00       	bra	@r0		
    1954:	44 00       	rrcm.a	#1,	r4	
    1956:	73 02       	.word	0x0273;	????	Illegal as address instr
    1958:	12 04       	mova	@r4+,	r2	
    195a:	00 00       	bra	@r0		
    195c:	00 00       	bra	@r0		
    195e:	00 00       	bra	@r0		
    1960:	44 00       	rrcm.a	#1,	r4	
    1962:	0a 02       	mova	#4,	r10	;r2 As==10
    1964:	3a 04 00 00 	mova	0(r4),	r10	;0x0000(r4)
    1968:	00 00       	bra	@r0		
    196a:	00 00       	bra	@r0		
    196c:	44 00       	rrcm.a	#1,	r4	
    196e:	75 02 82 04 	mova	r2,	1154(r5);0x0482(r5)
    1972:	00 00       	bra	@r0		
    1974:	be 17       	popm	#12,	r9	
    1976:	00 00       	bra	@r0		
    1978:	40 00       	rrcm.a	#1,	r0	
    197a:	ed 01       	adda	r1,	r13	
    197c:	06 00       	mova	@r0,	r6	
    197e:	00 00       	bra	@r0		
    1980:	e1 17       	popm	#15,	r15	
    1982:	00 00       	bra	@r0		
    1984:	40 00       	rrcm.a	#1,	r0	
    1986:	ed 01       	adda	r1,	r13	
    1988:	05 00       	mova	@r0,	r5	
    198a:	00 00       	bra	@r0		
    198c:	ff 18       	.word	0x18ff;	????	
    198e:	00 00       	bra	@r0		
    1990:	80 00 ee 01 	bra	#0x001ee	
    1994:	00 00       	bra	@r0		
    1996:	00 00       	bra	@r0		
    1998:	20 19       	.word	0x1920;	????	
    199a:	00 00       	bra	@r0		
    199c:	80 00 ef 01 	bra	#0x001ef	
    19a0:	20 00 00 00 	bra	&0x00000	
    19a4:	2d 19       	.word	0x192d;	????	
    19a6:	00 00       	bra	@r0		
    19a8:	80 00 f0 01 	bra	#0x001f0	
    19ac:	40 00       	rrcm.a	#1,	r0	
    19ae:	00 00       	bra	@r0		
    19b0:	00 00       	bra	@r0		
    19b2:	00 00       	bra	@r0		
    19b4:	c0 00       	bra	r0		
    19b6:	00 00       	bra	@r0		
    19b8:	12 00       	mova	#0x00000,r2	
    19ba:	00 00       	bra	@r0		
    19bc:	00 00       	bra	@r0		
    19be:	00 00       	bra	@r0		
    19c0:	e0 00       	adda	r0,	r0	
    19c2:	00 00       	bra	@r0		
    19c4:	82 04 00 00 	mova	#0x40000,r2	
    19c8:	00 00       	bra	@r0		
    19ca:	00 00       	bra	@r0		
    19cc:	24 00 00 00 	mova	&0x00000,r4	
    19d0:	96 04 00 00 	cmpa	#0x40000,r6	
    19d4:	3d 19       	.word	0x193d;	????	
    19d6:	00 00       	bra	@r0		
    19d8:	24 00 77 02 	mova	&0x00277,r4	
    19dc:	f4 3d       	jmp	$+1002   	;abs 0x1dc6
    19de:	00 00       	bra	@r0		
    19e0:	00 00       	bra	@r0		
    19e2:	00 00       	bra	@r0		
    19e4:	44 00       	rrcm.a	#1,	r4	
    19e6:	77 02 00 00 	mova	r2,	0(r7)	;0x0000(r7)
    19ea:	00 00       	bra	@r0		
    19ec:	00 00       	bra	@r0		
    19ee:	00 00       	bra	@r0		
    19f0:	44 00       	rrcm.a	#1,	r4	
    19f2:	78 02 02 00 	mova	r2,	2(r8)	;0x0002(r8)
    19f6:	00 00       	bra	@r0		
    19f8:	00 00       	bra	@r0		
    19fa:	00 00       	bra	@r0		
    19fc:	44 00       	rrcm.a	#1,	r4	
    19fe:	79 02 38 00 	mova	r2,	56(r9)	;0x0038(r9)
    1a02:	00 00       	bra	@r0		
    1a04:	00 00       	bra	@r0		
    1a06:	00 00       	bra	@r0		
    1a08:	44 00       	rrcm.a	#1,	r4	
    1a0a:	7a 02 6e 00 	mova	r2,	110(r10);0x006e(r10)
    1a0e:	00 00       	bra	@r0		
    1a10:	00 00       	bra	@r0		
    1a12:	00 00       	bra	@r0		
    1a14:	44 00       	rrcm.a	#1,	r4	
    1a16:	7b 02 a4 00 	mova	r2,	164(r11);0x00a4(r11)
    1a1a:	00 00       	bra	@r0		
    1a1c:	00 00       	bra	@r0		
    1a1e:	00 00       	bra	@r0		
    1a20:	44 00       	rrcm.a	#1,	r4	
    1a22:	7c 02 da 00 	mova	r2,	218(r12);0x00da(r12)
    1a26:	00 00       	bra	@r0		
    1a28:	00 00       	bra	@r0		
    1a2a:	00 00       	bra	@r0		
    1a2c:	44 00       	rrcm.a	#1,	r4	
    1a2e:	7d 02 10 01 	mova	r2,	272(r13);0x0110(r13)
    1a32:	00 00       	bra	@r0		
    1a34:	00 00       	bra	@r0		
    1a36:	00 00       	bra	@r0		
    1a38:	44 00       	rrcm.a	#1,	r4	
    1a3a:	7e 02 46 01 	mova	r2,	326(r14);0x0146(r14)
    1a3e:	00 00       	bra	@r0		
    1a40:	00 00       	bra	@r0		
    1a42:	00 00       	bra	@r0		
    1a44:	44 00       	rrcm.a	#1,	r4	
    1a46:	7f 02 d0 01 	mova	r2,	464(r15);0x01d0(r15)
    1a4a:	00 00       	bra	@r0		
    1a4c:	00 00       	bra	@r0		
    1a4e:	00 00       	bra	@r0		
    1a50:	24 00 00 00 	mova	&0x00000,r4	
    1a54:	d4 01       	cmpa	r1,	r4	
    1a56:	00 00       	bra	@r0		
    1a58:	50 19       	.word	0x1950;	????	
    1a5a:	00 00       	bra	@r0		
    1a5c:	24 00 81 02 	mova	&0x00281,r4	
    1a60:	c8 3f       	jmp	$-110    	;abs 0x19f2
    1a62:	00 00       	bra	@r0		
    1a64:	00 00       	bra	@r0		
    1a66:	00 00       	bra	@r0		
    1a68:	44 00       	rrcm.a	#1,	r4	
    1a6a:	81 02 00 00 	mova	#0x20000,r1	
    1a6e:	00 00       	bra	@r0		
    1a70:	00 00       	bra	@r0		
    1a72:	00 00       	bra	@r0		
    1a74:	44 00       	rrcm.a	#1,	r4	
    1a76:	84 02 02 00 	mova	#0x20002,r4	
    1a7a:	00 00       	bra	@r0		
    1a7c:	00 00       	bra	@r0		
    1a7e:	00 00       	bra	@r0		
    1a80:	44 00       	rrcm.a	#1,	r4	
    1a82:	85 02 08 00 	mova	#0x20008,r5	
    1a86:	00 00       	bra	@r0		
    1a88:	00 00       	bra	@r0		
    1a8a:	00 00       	bra	@r0		
    1a8c:	44 00       	rrcm.a	#1,	r4	
    1a8e:	88 02 10 00 	mova	#0x20010,r8	
    1a92:	00 00       	bra	@r0		
    1a94:	00 00       	bra	@r0		
    1a96:	00 00       	bra	@r0		
    1a98:	44 00       	rrcm.a	#1,	r4	
    1a9a:	89 02 1c 00 	mova	#0x2001c,r9	
    1a9e:	00 00       	bra	@r0		
    1aa0:	00 00       	bra	@r0		
    1aa2:	00 00       	bra	@r0		
    1aa4:	44 00       	rrcm.a	#1,	r4	
    1aa6:	8a 02 26 00 	mova	#0x20026,r10	
    1aaa:	00 00       	bra	@r0		
    1aac:	00 00       	bra	@r0		
    1aae:	00 00       	bra	@r0		
    1ab0:	44 00       	rrcm.a	#1,	r4	
    1ab2:	8b 02 32 00 	mova	#0x20032,r11	
    1ab6:	00 00       	bra	@r0		
    1ab8:	00 00       	bra	@r0		
    1aba:	00 00       	bra	@r0		
    1abc:	44 00       	rrcm.a	#1,	r4	
    1abe:	8e 02 3c 00 	mova	#0x2003c,r14	
    1ac2:	00 00       	bra	@r0		
    1ac4:	00 00       	bra	@r0		
    1ac6:	00 00       	bra	@r0		
    1ac8:	44 00       	rrcm.a	#1,	r4	
    1aca:	8f 02 48 00 	mova	#0x20048,r15	
    1ace:	00 00       	bra	@r0		
    1ad0:	00 00       	bra	@r0		
    1ad2:	00 00       	bra	@r0		
    1ad4:	44 00       	rrcm.a	#1,	r4	
    1ad6:	90 02 52 00 	cmpa	#0x20052,r0	
    1ada:	00 00       	bra	@r0		
    1adc:	00 00       	bra	@r0		
    1ade:	00 00       	bra	@r0		
    1ae0:	44 00       	rrcm.a	#1,	r4	
    1ae2:	91 02 5e 00 	cmpa	#0x2005e,r1	
    1ae6:	00 00       	bra	@r0		
    1ae8:	00 00       	bra	@r0		
    1aea:	00 00       	bra	@r0		
    1aec:	44 00       	rrcm.a	#1,	r4	
    1aee:	94 02 68 00 	cmpa	#0x20068,r4	
    1af2:	00 00       	bra	@r0		
    1af4:	00 00       	bra	@r0		
    1af6:	00 00       	bra	@r0		
    1af8:	44 00       	rrcm.a	#1,	r4	
    1afa:	95 02 74 00 	cmpa	#0x20074,r5	
    1afe:	00 00       	bra	@r0		
    1b00:	00 00       	bra	@r0		
    1b02:	00 00       	bra	@r0		
    1b04:	44 00       	rrcm.a	#1,	r4	
    1b06:	96 02 7e 00 	cmpa	#0x2007e,r6	
    1b0a:	00 00       	bra	@r0		
    1b0c:	00 00       	bra	@r0		
    1b0e:	00 00       	bra	@r0		
    1b10:	44 00       	rrcm.a	#1,	r4	
    1b12:	97 02 8a 00 	cmpa	#0x2008a,r7	
    1b16:	00 00       	bra	@r0		
    1b18:	00 00       	bra	@r0		
    1b1a:	00 00       	bra	@r0		
    1b1c:	44 00       	rrcm.a	#1,	r4	
    1b1e:	9a 02 94 00 	cmpa	#0x20094,r10	
    1b22:	00 00       	bra	@r0		
    1b24:	00 00       	bra	@r0		
    1b26:	00 00       	bra	@r0		
    1b28:	44 00       	rrcm.a	#1,	r4	
    1b2a:	9b 02 a0 00 	cmpa	#0x200a0,r11	
    1b2e:	00 00       	bra	@r0		
    1b30:	00 00       	bra	@r0		
    1b32:	00 00       	bra	@r0		
    1b34:	44 00       	rrcm.a	#1,	r4	
    1b36:	9c 02 aa 00 	cmpa	#0x200aa,r12	
    1b3a:	00 00       	bra	@r0		
    1b3c:	00 00       	bra	@r0		
    1b3e:	00 00       	bra	@r0		
    1b40:	44 00       	rrcm.a	#1,	r4	
    1b42:	9d 02 b6 00 	cmpa	#0x200b6,r13	
    1b46:	00 00       	bra	@r0		
    1b48:	00 00       	bra	@r0		
    1b4a:	00 00       	bra	@r0		
    1b4c:	44 00       	rrcm.a	#1,	r4	
    1b4e:	a0 02 c0 00 	adda	#0x200c0,r0	
    1b52:	00 00       	bra	@r0		
    1b54:	00 00       	bra	@r0		
    1b56:	00 00       	bra	@r0		
    1b58:	44 00       	rrcm.a	#1,	r4	
    1b5a:	a1 02 cc 00 	adda	#0x200cc,r1	
    1b5e:	00 00       	bra	@r0		
    1b60:	00 00       	bra	@r0		
    1b62:	00 00       	bra	@r0		
    1b64:	44 00       	rrcm.a	#1,	r4	
    1b66:	a2 02 d6 00 	adda	#0x200d6,r2	
    1b6a:	00 00       	bra	@r0		
    1b6c:	00 00       	bra	@r0		
    1b6e:	00 00       	bra	@r0		
    1b70:	44 00       	rrcm.a	#1,	r4	
    1b72:	a3 02       	.word	0x02a3;	????	Illegal as address instr
    1b74:	e2 00       	adda	r0,	r2	
    1b76:	00 00       	bra	@r0		
    1b78:	00 00       	bra	@r0		
    1b7a:	00 00       	bra	@r0		
    1b7c:	44 00       	rrcm.a	#1,	r4	
    1b7e:	a6 02 ec 00 	adda	#0x200ec,r6	
    1b82:	00 00       	bra	@r0		
    1b84:	00 00       	bra	@r0		
    1b86:	00 00       	bra	@r0		
    1b88:	44 00       	rrcm.a	#1,	r4	
    1b8a:	a7 02 f8 00 	adda	#0x200f8,r7	
    1b8e:	00 00       	bra	@r0		
    1b90:	00 00       	bra	@r0		
    1b92:	00 00       	bra	@r0		
    1b94:	44 00       	rrcm.a	#1,	r4	
    1b96:	a8 02 02 01 	adda	#0x20102,r8	
    1b9a:	00 00       	bra	@r0		
    1b9c:	00 00       	bra	@r0		
    1b9e:	00 00       	bra	@r0		
    1ba0:	44 00       	rrcm.a	#1,	r4	
    1ba2:	a9 02 0e 01 	adda	#0x2010e,r9	
    1ba6:	00 00       	bra	@r0		
    1ba8:	00 00       	bra	@r0		
    1baa:	00 00       	bra	@r0		
    1bac:	44 00       	rrcm.a	#1,	r4	
    1bae:	ac 02 18 01 	adda	#0x20118,r12	
    1bb2:	00 00       	bra	@r0		
    1bb4:	00 00       	bra	@r0		
    1bb6:	00 00       	bra	@r0		
    1bb8:	44 00       	rrcm.a	#1,	r4	
    1bba:	ad 02 24 01 	adda	#0x20124,r13	
    1bbe:	00 00       	bra	@r0		
    1bc0:	00 00       	bra	@r0		
    1bc2:	00 00       	bra	@r0		
    1bc4:	44 00       	rrcm.a	#1,	r4	
    1bc6:	ae 02 2e 01 	adda	#0x2012e,r14	
    1bca:	00 00       	bra	@r0		
    1bcc:	00 00       	bra	@r0		
    1bce:	00 00       	bra	@r0		
    1bd0:	44 00       	rrcm.a	#1,	r4	
    1bd2:	af 02 3a 01 	adda	#0x2013a,r15	
    1bd6:	00 00       	bra	@r0		
    1bd8:	00 00       	bra	@r0		
    1bda:	00 00       	bra	@r0		
    1bdc:	44 00       	rrcm.a	#1,	r4	
    1bde:	b1 02 44 01 	suba	#0x20144,r1	
    1be2:	00 00       	bra	@r0		
    1be4:	2d 19       	.word	0x192d;	????	
    1be6:	00 00       	bra	@r0		
    1be8:	80 00 82 02 	bra	#0x00282	
	...
    1bf4:	c0 00       	bra	r0		
    1bf6:	00 00       	bra	@r0		
    1bf8:	02 00       	mova	@r0,	r2	
    1bfa:	00 00       	bra	@r0		
    1bfc:	00 00       	bra	@r0		
    1bfe:	00 00       	bra	@r0		
    1c00:	e0 00       	adda	r0,	r0	
    1c02:	00 00       	bra	@r0		
    1c04:	44 01       	rram.a	#1,	r4	
    1c06:	00 00       	bra	@r0		
    1c08:	00 00       	bra	@r0		
    1c0a:	00 00       	bra	@r0		
    1c0c:	24 00 00 00 	mova	&0x00000,r4	
    1c10:	48 01       	rram.a	#1,	r8	
    1c12:	00 00       	bra	@r0		
    1c14:	70 19       	.word	0x1970;	????	
    1c16:	00 00       	bra	@r0		
    1c18:	24 00 b3 02 	mova	&0x002b3,r4	
    1c1c:	2e 41       	mov	@r1,	r14	
    1c1e:	00 00       	bra	@r0		
    1c20:	87 19       	.word	0x1987;	????	
    1c22:	00 00       	bra	@r0		
    1c24:	40 00       	rrcm.a	#1,	r0	
    1c26:	b3 02       	.word	0x02b3;	????	Illegal as address instr
    1c28:	07 00       	mova	@r0,	r7	
    1c2a:	00 00       	bra	@r0		
    1c2c:	00 00       	bra	@r0		
    1c2e:	00 00       	bra	@r0		
    1c30:	44 00       	rrcm.a	#1,	r4	
    1c32:	b3 02       	.word	0x02b3;	????	Illegal as address instr
	...
    1c3c:	44 00       	rrcm.a	#1,	r4	
    1c3e:	b4 02 0c 00 	suba	#0x2000c,r4	
    1c42:	00 00       	bra	@r0		
    1c44:	00 00       	bra	@r0		
    1c46:	00 00       	bra	@r0		
    1c48:	44 00       	rrcm.a	#1,	r4	
    1c4a:	b5 02 0e 00 	suba	#0x2000e,r5	
    1c4e:	00 00       	bra	@r0		
    1c50:	00 00       	bra	@r0		
    1c52:	00 00       	bra	@r0		
    1c54:	44 00       	rrcm.a	#1,	r4	
    1c56:	b6 02 16 00 	suba	#0x20016,r6	
    1c5a:	00 00       	bra	@r0		
    1c5c:	00 00       	bra	@r0		
    1c5e:	00 00       	bra	@r0		
    1c60:	44 00       	rrcm.a	#1,	r4	
    1c62:	b7 02 1e 00 	suba	#0x2001e,r7	
    1c66:	00 00       	bra	@r0		
    1c68:	00 00       	bra	@r0		
    1c6a:	00 00       	bra	@r0		
    1c6c:	44 00       	rrcm.a	#1,	r4	
    1c6e:	b9 02 26 00 	suba	#0x20026,r9	
    1c72:	00 00       	bra	@r0		
    1c74:	00 00       	bra	@r0		
    1c76:	00 00       	bra	@r0		
    1c78:	44 00       	rrcm.a	#1,	r4	
    1c7a:	ba 02 28 00 	suba	#0x20028,r10	
    1c7e:	00 00       	bra	@r0		
    1c80:	00 00       	bra	@r0		
    1c82:	00 00       	bra	@r0		
    1c84:	44 00       	rrcm.a	#1,	r4	
    1c86:	bb 02 2c 00 	suba	#0x2002c,r11	
    1c8a:	00 00       	bra	@r0		
    1c8c:	00 00       	bra	@r0		
    1c8e:	00 00       	bra	@r0		
    1c90:	44 00       	rrcm.a	#1,	r4	
    1c92:	c0 02       	bra	r2		
    1c94:	42 00       	rrcm.a	#1,	r2	
    1c96:	00 00       	bra	@r0		
    1c98:	00 00       	bra	@r0		
    1c9a:	00 00       	bra	@r0		
    1c9c:	44 00       	rrcm.a	#1,	r4	
    1c9e:	c1 02       	mova	r2,	r1	
    1ca0:	4c 00       	rrcm.a	#1,	r12	
    1ca2:	00 00       	bra	@r0		
    1ca4:	00 00       	bra	@r0		
    1ca6:	00 00       	bra	@r0		
    1ca8:	44 00       	rrcm.a	#1,	r4	
    1caa:	c2 02       	mova	r2,	r2	
    1cac:	50 00       	rrcm	#1,	r0	
    1cae:	00 00       	bra	@r0		
    1cb0:	00 00       	bra	@r0		
    1cb2:	00 00       	bra	@r0		
    1cb4:	44 00       	rrcm.a	#1,	r4	
    1cb6:	c6 02       	mova	r2,	r6	
    1cb8:	58 00       	rrcm	#1,	r8	
    1cba:	00 00       	bra	@r0		
    1cbc:	00 00       	bra	@r0		
    1cbe:	00 00       	bra	@r0		
    1cc0:	44 00       	rrcm.a	#1,	r4	
    1cc2:	ca 02       	mova	r2,	r10	
    1cc4:	60 00 00 00 	mova	r0,	&0x00000
    1cc8:	00 00       	bra	@r0		
    1cca:	00 00       	bra	@r0		
    1ccc:	44 00       	rrcm.a	#1,	r4	
    1cce:	d4 02       	cmpa	r2,	r4	
    1cd0:	82 00 00 00 	mova	#0x00000,r2	
    1cd4:	00 00       	bra	@r0		
    1cd6:	00 00       	bra	@r0		
    1cd8:	44 00       	rrcm.a	#1,	r4	
    1cda:	d0 02       	cmpa	r2,	r0	
    1cdc:	86 00 00 00 	mova	#0x00000,r6	
    1ce0:	00 00       	bra	@r0		
    1ce2:	00 00       	bra	@r0		
    1ce4:	44 00       	rrcm.a	#1,	r4	
    1ce6:	cf 02       	mova	r2,	r15	
    1ce8:	8c 00 00 00 	mova	#0x00000,r12	
    1cec:	00 00       	bra	@r0		
    1cee:	00 00       	bra	@r0		
    1cf0:	44 00       	rrcm.a	#1,	r4	
    1cf2:	d3 02       	.word	0x02d3;	????	Illegal as address instr
    1cf4:	94 00 00 00 	cmpa	#0x00000,r4	
    1cf8:	00 00       	bra	@r0		
    1cfa:	00 00       	bra	@r0		
    1cfc:	44 00       	rrcm.a	#1,	r4	
    1cfe:	d7 02       	cmpa	r2,	r7	
    1d00:	9c 00 00 00 	cmpa	#0x00000,r12	
    1d04:	00 00       	bra	@r0		
    1d06:	00 00       	bra	@r0		
    1d08:	44 00       	rrcm.a	#1,	r4	
    1d0a:	be 02 a2 00 	suba	#0x200a2,r14	
    1d0e:	00 00       	bra	@r0		
    1d10:	00 00       	bra	@r0		
    1d12:	00 00       	bra	@r0		
    1d14:	44 00       	rrcm.a	#1,	r4	
    1d16:	db 02       	cmpa	r2,	r11	
    1d18:	ac 00 00 00 	adda	#0x00000,r12	
    1d1c:	00 00       	bra	@r0		
    1d1e:	00 00       	bra	@r0		
    1d20:	44 00       	rrcm.a	#1,	r4	
    1d22:	b9 02 c6 00 	suba	#0x200c6,r9	
    1d26:	00 00       	bra	@r0		
    1d28:	00 00       	bra	@r0		
    1d2a:	00 00       	bra	@r0		
    1d2c:	44 00       	rrcm.a	#1,	r4	
    1d2e:	dd 02       	cmpa	r2,	r13	
    1d30:	d0 00       	cmpa	r0,	r0	
    1d32:	00 00       	bra	@r0		
    1d34:	92 19       	.word	0x1992;	????	
    1d36:	00 00       	bra	@r0		
    1d38:	40 00       	rrcm.a	#1,	r0	
    1d3a:	b4 02 08 00 	suba	#0x20008,r4	
    1d3e:	00 00       	bra	@r0		
    1d40:	9b 19       	.word	0x199b;	????	
    1d42:	00 00       	bra	@r0		
    1d44:	40 00       	rrcm.a	#1,	r0	
    1d46:	b4 02 09 00 	suba	#0x20009,r4	
    1d4a:	00 00       	bra	@r0		
    1d4c:	a4 19       	.word	0x19a4;	????	
    1d4e:	00 00       	bra	@r0		
    1d50:	40 00       	rrcm.a	#1,	r0	
    1d52:	b4 02 0c 00 	suba	#0x2000c,r4	
    1d56:	00 00       	bra	@r0		
    1d58:	00 00       	bra	@r0		
    1d5a:	00 00       	bra	@r0		
    1d5c:	c0 00       	bra	r0		
    1d5e:	00 00       	bra	@r0		
    1d60:	0c 00       	mova	@r0,	r12	
    1d62:	00 00       	bra	@r0		
    1d64:	00 00       	bra	@r0		
    1d66:	00 00       	bra	@r0		
    1d68:	e0 00       	adda	r0,	r0	
    1d6a:	00 00       	bra	@r0		
    1d6c:	d0 00       	cmpa	r0,	r0	
    1d6e:	00 00       	bra	@r0		
    1d70:	00 00       	bra	@r0		
    1d72:	00 00       	bra	@r0		
    1d74:	24 00 00 00 	mova	&0x00000,r4	
    1d78:	dc 00       	cmpa	r0,	r12	
    1d7a:	00 00       	bra	@r0		
    1d7c:	ad 19       	.word	0x19ad;	????	
    1d7e:	00 00       	bra	@r0		
    1d80:	24 00 df 02 	mova	&0x002df,r4	
    1d84:	0a 42       	mov	r2,	r10	
    1d86:	00 00       	bra	@r0		
    1d88:	bf 19       	.word	0x19bf;	????	
    1d8a:	00 00       	bra	@r0		
    1d8c:	40 00       	rrcm.a	#1,	r0	
    1d8e:	df 02       	cmpa	r2,	r15	
    1d90:	0b 00       	mova	@r0,	r11	
    1d92:	00 00       	bra	@r0		
    1d94:	00 00       	bra	@r0		
    1d96:	00 00       	bra	@r0		
    1d98:	44 00       	rrcm.a	#1,	r4	
    1d9a:	df 02       	cmpa	r2,	r15	
	...
    1da4:	44 00       	rrcm.a	#1,	r4	
    1da6:	e0 02       	adda	r2,	r0	
    1da8:	04 00       	mova	@r0,	r4	
    1daa:	00 00       	bra	@r0		
    1dac:	00 00       	bra	@r0		
    1dae:	00 00       	bra	@r0		
    1db0:	44 00       	rrcm.a	#1,	r4	
    1db2:	e6 02       	adda	r2,	r6	
    1db4:	0a 00       	mova	@r0,	r10	
    1db6:	00 00       	bra	@r0		
    1db8:	00 00       	bra	@r0		
    1dba:	00 00       	bra	@r0		
    1dbc:	44 00       	rrcm.a	#1,	r4	
    1dbe:	e1 02       	adda	r2,	r1	
    1dc0:	0e 00       	mova	@r0,	r14	
    1dc2:	00 00       	bra	@r0		
    1dc4:	00 00       	bra	@r0		
    1dc6:	00 00       	bra	@r0		
    1dc8:	44 00       	rrcm.a	#1,	r4	
    1dca:	e2 02       	adda	r2,	r2	
    1dcc:	14 00       	mova	#0x00000,r4	
    1dce:	00 00       	bra	@r0		
    1dd0:	00 00       	bra	@r0		
    1dd2:	00 00       	bra	@r0		
    1dd4:	44 00       	rrcm.a	#1,	r4	
    1dd6:	e0 02       	adda	r2,	r0	
    1dd8:	1c 00       	mova	#0x00000,r12	
    1dda:	00 00       	bra	@r0		
    1ddc:	00 00       	bra	@r0		
    1dde:	00 00       	bra	@r0		
    1de0:	44 00       	rrcm.a	#1,	r4	
    1de2:	e3 02       	.word	0x02e3;	????	Illegal as address instr
    1de4:	26 00 00 00 	mova	&0x00000,r6	
    1de8:	00 00       	bra	@r0		
    1dea:	00 00       	bra	@r0		
    1dec:	44 00       	rrcm.a	#1,	r4	
    1dee:	e7 02       	adda	r2,	r7	
    1df0:	28 00 00 00 	mova	&0x00000,r8	
    1df4:	00 00       	bra	@r0		
    1df6:	00 00       	bra	@r0		
    1df8:	24 00 00 00 	mova	&0x00000,r4	
    1dfc:	2c 00 00 00 	mova	&0x00000,r12	
    1e00:	d3 19       	.word	0x19d3;	????	
    1e02:	00 00       	bra	@r0		
    1e04:	24 00 eb 02 	mova	&0x002eb,r4	
    1e08:	36 42       	mov	#8,	r6	;r2 As==11
    1e0a:	00 00       	bra	@r0		
    1e0c:	00 00       	bra	@r0		
    1e0e:	00 00       	bra	@r0		
    1e10:	44 00       	rrcm.a	#1,	r4	
    1e12:	eb 02       	adda	r2,	r11	
	...
    1e1c:	44 00       	rrcm.a	#1,	r4	
    1e1e:	ee 02       	adda	r2,	r14	
	...
    1e28:	24 00 00 00 	mova	&0x00000,r4	
    1e2c:	02 00       	mova	@r0,	r2	
    1e2e:	00 00       	bra	@r0		
    1e30:	e5 19       	.word	0x19e5;	????	
    1e32:	00 00       	bra	@r0		
    1e34:	24 00 f0 02 	mova	&0x002f0,r4	
    1e38:	8a 42 00 00 	mov	r2,	0(r10)	;0x0000(r10)
    1e3c:	00 00       	bra	@r0		
    1e3e:	00 00       	bra	@r0		
    1e40:	44 00       	rrcm.a	#1,	r4	
    1e42:	f0 02       	suba	r2,	r0	
	...
    1e4c:	44 00       	rrcm.a	#1,	r4	
    1e4e:	f2 02       	suba	r2,	r2	
    1e50:	02 00       	mova	@r0,	r2	
    1e52:	00 00       	bra	@r0		
    1e54:	00 00       	bra	@r0		
    1e56:	00 00       	bra	@r0		
    1e58:	44 00       	rrcm.a	#1,	r4	
    1e5a:	f4 02       	suba	r2,	r4	
    1e5c:	06 00       	mova	@r0,	r6	
    1e5e:	00 00       	bra	@r0		
    1e60:	00 00       	bra	@r0		
    1e62:	00 00       	bra	@r0		
    1e64:	44 00       	rrcm.a	#1,	r4	
    1e66:	f6 02       	suba	r2,	r6	
    1e68:	0a 00       	mova	@r0,	r10	
    1e6a:	00 00       	bra	@r0		
    1e6c:	00 00       	bra	@r0		
    1e6e:	00 00       	bra	@r0		
    1e70:	44 00       	rrcm.a	#1,	r4	
    1e72:	f8 02       	suba	r2,	r8	
    1e74:	0e 00       	mova	@r0,	r14	
    1e76:	00 00       	bra	@r0		
    1e78:	00 00       	bra	@r0		
    1e7a:	00 00       	bra	@r0		
    1e7c:	44 00       	rrcm.a	#1,	r4	
    1e7e:	fa 02       	suba	r2,	r10	
    1e80:	12 00       	mova	#0x00000,r2	
    1e82:	00 00       	bra	@r0		
    1e84:	00 00       	bra	@r0		
    1e86:	00 00       	bra	@r0		
    1e88:	44 00       	rrcm.a	#1,	r4	
    1e8a:	fc 02       	suba	r2,	r12	
    1e8c:	16 00       	mova	#0x00000,r6	
    1e8e:	00 00       	bra	@r0		
    1e90:	00 00       	bra	@r0		
    1e92:	00 00       	bra	@r0		
    1e94:	44 00       	rrcm.a	#1,	r4	
    1e96:	fe 02       	suba	r2,	r14	
    1e98:	18 00       	mova	#0x00000,r8	
    1e9a:	00 00       	bra	@r0		
    1e9c:	00 00       	bra	@r0		
    1e9e:	00 00       	bra	@r0		
    1ea0:	44 00       	rrcm.a	#1,	r4	
    1ea2:	02 03       	mova	#2,	r2	;r3 As==10
    1ea4:	1e 00       	mova	#0x00000,r14	
    1ea6:	00 00       	bra	@r0		
    1ea8:	00 00       	bra	@r0		
    1eaa:	00 00       	bra	@r0		
    1eac:	44 00       	rrcm.a	#1,	r4	
    1eae:	03 03       	.word	0x0303;	????	Illegal as address instr
    1eb0:	26 00 00 00 	mova	&0x00000,r6	
    1eb4:	00 00       	bra	@r0		
    1eb6:	00 00       	bra	@r0		
    1eb8:	44 00       	rrcm.a	#1,	r4	
    1eba:	05 03       	mova	#2,	r5	;r3 As==10
    1ebc:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x01ebe
    1ec0:	00 00       	bra	@r0		
    1ec2:	00 00       	bra	@r0		
    1ec4:	44 00       	rrcm.a	#1,	r4	
    1ec6:	06 03       	mova	#2,	r6	;r3 As==10
    1ec8:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x01eca
    1ecc:	00 00       	bra	@r0		
    1ece:	00 00       	bra	@r0		
    1ed0:	44 00       	rrcm.a	#1,	r4	
    1ed2:	07 03       	mova	#2,	r7	;r3 As==10
    1ed4:	42 00       	rrcm.a	#1,	r2	
    1ed6:	00 00       	bra	@r0		
    1ed8:	00 00       	bra	@r0		
    1eda:	00 00       	bra	@r0		
    1edc:	44 00       	rrcm.a	#1,	r4	
    1ede:	08 03       	mova	#2,	r8	;r3 As==10
    1ee0:	50 00       	rrcm	#1,	r0	
    1ee2:	00 00       	bra	@r0		
    1ee4:	00 00       	bra	@r0		
    1ee6:	00 00       	bra	@r0		
    1ee8:	44 00       	rrcm.a	#1,	r4	
    1eea:	0b 03       	mova	#2,	r11	;r3 As==10
    1eec:	70 00 00 00 	mova	r0,	0x0000	;PC rel. 0x01eee
    1ef0:	00 00       	bra	@r0		
    1ef2:	00 00       	bra	@r0		
    1ef4:	44 00       	rrcm.a	#1,	r4	
    1ef6:	0c 03       	mova	#2,	r12	;r3 As==10
    1ef8:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
    1efc:	00 00       	bra	@r0		
    1efe:	00 00       	bra	@r0		
    1f00:	44 00       	rrcm.a	#1,	r4	
    1f02:	0d 03       	mova	#2,	r13	;r3 As==10
    1f04:	80 00 00 00 	bra	#0x00000	
    1f08:	00 00       	bra	@r0		
    1f0a:	00 00       	bra	@r0		
    1f0c:	44 00       	rrcm.a	#1,	r4	
    1f0e:	0e 03       	mova	#2,	r14	;r3 As==10
    1f10:	88 00 00 00 	mova	#0x00000,r8	
    1f14:	00 00       	bra	@r0		
    1f16:	00 00       	bra	@r0		
    1f18:	44 00       	rrcm.a	#1,	r4	
    1f1a:	0f 03       	mova	#2,	r15	;r3 As==10
    1f1c:	8c 00 00 00 	mova	#0x00000,r12	
    1f20:	00 00       	bra	@r0		
    1f22:	00 00       	bra	@r0		
    1f24:	44 00       	rrcm.a	#1,	r4	
    1f26:	10 03       	bra	#-1		;r3 As==11
    1f28:	90 00 00 00 	cmpa	#0x00000,r0	
    1f2c:	00 00       	bra	@r0		
    1f2e:	00 00       	bra	@r0		
    1f30:	44 00       	rrcm.a	#1,	r4	
    1f32:	11 03       	mova	#-1,	r1	;r3 As==11
    1f34:	94 00 00 00 	cmpa	#0x00000,r4	
    1f38:	00 00       	bra	@r0		
    1f3a:	00 00       	bra	@r0		
    1f3c:	44 00       	rrcm.a	#1,	r4	
    1f3e:	12 03       	mova	#-1,	r2	;r3 As==11
    1f40:	98 00 00 00 	cmpa	#0x00000,r8	
    1f44:	00 00       	bra	@r0		
    1f46:	00 00       	bra	@r0		
    1f48:	44 00       	rrcm.a	#1,	r4	
    1f4a:	15 03       	mova	#-1,	r5	;r3 As==11
    1f4c:	a8 00 00 00 	adda	#0x00000,r8	
    1f50:	00 00       	bra	@r0		
    1f52:	00 00       	bra	@r0		
    1f54:	44 00       	rrcm.a	#1,	r4	
    1f56:	16 03       	mova	#-1,	r6	;r3 As==11
    1f58:	ac 00 00 00 	adda	#0x00000,r12	
    1f5c:	00 00       	bra	@r0		
    1f5e:	00 00       	bra	@r0		
    1f60:	44 00       	rrcm.a	#1,	r4	
    1f62:	1b 03       	mova	#-1,	r11	;r3 As==11
    1f64:	b6 00 00 00 	suba	#0x00000,r6	
    1f68:	00 00       	bra	@r0		
    1f6a:	00 00       	bra	@r0		
    1f6c:	44 00       	rrcm.a	#1,	r4	
    1f6e:	1c 03       	mova	#-1,	r12	;r3 As==11
    1f70:	bc 00 00 00 	suba	#0x00000,r12	
    1f74:	00 00       	bra	@r0		
    1f76:	00 00       	bra	@r0		
    1f78:	44 00       	rrcm.a	#1,	r4	
    1f7a:	1d 03       	mova	#-1,	r13	;r3 As==11
    1f7c:	c4 00       	mova	r0,	r4	
    1f7e:	00 00       	bra	@r0		
    1f80:	00 00       	bra	@r0		
    1f82:	00 00       	bra	@r0		
    1f84:	44 00       	rrcm.a	#1,	r4	
    1f86:	1f 03       	mova	#-1,	r15	;r3 As==11
    1f88:	ca 00       	mova	r0,	r10	
    1f8a:	00 00       	bra	@r0		
    1f8c:	00 00       	bra	@r0		
    1f8e:	00 00       	bra	@r0		
    1f90:	44 00       	rrcm.a	#1,	r4	
    1f92:	21 03 ce 00 	mova	&0x300ce,r1	
    1f96:	00 00       	bra	@r0		
    1f98:	00 00       	bra	@r0		
    1f9a:	00 00       	bra	@r0		
    1f9c:	44 00       	rrcm.a	#1,	r4	
    1f9e:	22 03 e6 00 	mova	&0x300e6,r2	
    1fa2:	00 00       	bra	@r0		
    1fa4:	00 00       	bra	@r0		
    1fa6:	00 00       	bra	@r0		
    1fa8:	44 00       	rrcm.a	#1,	r4	
    1faa:	24 03 fe 00 	mova	&0x300fe,r4	
    1fae:	00 00       	bra	@r0		
    1fb0:	00 00       	bra	@r0		
    1fb2:	00 00       	bra	@r0		
    1fb4:	44 00       	rrcm.a	#1,	r4	
    1fb6:	26 03 06 01 	mova	&0x30106,r6	
    1fba:	00 00       	bra	@r0		
    1fbc:	00 00       	bra	@r0		
    1fbe:	00 00       	bra	@r0		
    1fc0:	44 00       	rrcm.a	#1,	r4	
    1fc2:	27 03 0c 01 	mova	&0x3010c,r7	
    1fc6:	00 00       	bra	@r0		
    1fc8:	00 00       	bra	@r0		
    1fca:	00 00       	bra	@r0		
    1fcc:	24 00 00 00 	mova	&0x00000,r4	
    1fd0:	10 01       	reta			
    1fd2:	00 00       	bra	@r0		
    1fd4:	f3 19       	.word	0x19f3;	????	
    1fd6:	00 00       	bra	@r0		
    1fd8:	24 00 29 03 	mova	&0x00329,r4	
    1fdc:	9a 43 00 00 	mov	#1,	0(r10)	;r3 As==01, 0x0000(r10)
    1fe0:	00 00       	bra	@r0		
    1fe2:	00 00       	bra	@r0		
    1fe4:	44 00       	rrcm.a	#1,	r4	
    1fe6:	29 03 00 00 	mova	&0x30000,r9	
    1fea:	00 00       	bra	@r0		
    1fec:	00 00       	bra	@r0		
    1fee:	00 00       	bra	@r0		
    1ff0:	44 00       	rrcm.a	#1,	r4	
    1ff2:	2b 03 02 00 	mova	&0x30002,r11	
    1ff6:	00 00       	bra	@r0		
    1ff8:	00 00       	bra	@r0		
    1ffa:	00 00       	bra	@r0		
    1ffc:	44 00       	rrcm.a	#1,	r4	
    1ffe:	2c 03 04 00 	mova	&0x30004,r12	
    2002:	00 00       	bra	@r0		
    2004:	00 00       	bra	@r0		
    2006:	00 00       	bra	@r0		
    2008:	44 00       	rrcm.a	#1,	r4	
    200a:	2b 03 0a 00 	mova	&0x3000a,r11	
    200e:	00 00       	bra	@r0		
    2010:	00 00       	bra	@r0		
    2012:	00 00       	bra	@r0		
    2014:	44 00       	rrcm.a	#1,	r4	
    2016:	2e 03 10 00 	mova	&0x30010,r14	
    201a:	00 00       	bra	@r0		
    201c:	be 17       	popm	#12,	r9	
    201e:	00 00       	bra	@r0		
    2020:	40 00       	rrcm.a	#1,	r0	
    2022:	2a 03 0b 00 	mova	&0x3000b,r10	
    2026:	00 00       	bra	@r0		
    2028:	00 00       	bra	@r0		
    202a:	00 00       	bra	@r0		
    202c:	c0 00       	bra	r0		
    202e:	00 00       	bra	@r0		
    2030:	02 00       	mova	@r0,	r2	
    2032:	00 00       	bra	@r0		
    2034:	00 00       	bra	@r0		
    2036:	00 00       	bra	@r0		
    2038:	e0 00       	adda	r0,	r0	
    203a:	00 00       	bra	@r0		
    203c:	10 00       	bra	#0x00000	
    203e:	00 00       	bra	@r0		
    2040:	00 00       	bra	@r0		
    2042:	00 00       	bra	@r0		
    2044:	24 00 00 00 	mova	&0x00000,r4	
    2048:	14 00       	mova	#0x00000,r4	
    204a:	00 00       	bra	@r0		
    204c:	12 1a       	.word	0x1a12;	????	
    204e:	00 00       	bra	@r0		
    2050:	20 00 12 00 	bra	&0x00012	
    2054:	00 00       	bra	@r0		
    2056:	00 00       	bra	@r0		
    2058:	1e 1a       	.word	0x1a1e;	????	
    205a:	00 00       	bra	@r0		
    205c:	20 00 14 00 	bra	&0x00014	
    2060:	00 00       	bra	@r0		
    2062:	00 00       	bra	@r0		
    2064:	2b 1a       	.word	0x1a2b;	????	
    2066:	00 00       	bra	@r0		
    2068:	20 00 16 00 	bra	&0x00016	
    206c:	00 00       	bra	@r0		
    206e:	00 00       	bra	@r0		
    2070:	37 1a       	.word	0x1a37;	????	
    2072:	00 00       	bra	@r0		
    2074:	20 00 18 00 	bra	&0x00018	
    2078:	00 00       	bra	@r0		
    207a:	00 00       	bra	@r0		
    207c:	44 1a       	.word	0x1a44;	????	
    207e:	00 00       	bra	@r0		
    2080:	20 00 1a 00 	bra	&0x0001a	
    2084:	00 00       	bra	@r0		
    2086:	00 00       	bra	@r0		
    2088:	50 1a       	.word	0x1a50;	????	
    208a:	00 00       	bra	@r0		
    208c:	20 00 1c 00 	bra	&0x0001c	
    2090:	00 00       	bra	@r0		
    2092:	00 00       	bra	@r0		
    2094:	5e 1a       	.word	0x1a5e;	????	
    2096:	00 00       	bra	@r0		
    2098:	20 00 1e 00 	bra	&0x0001e	
    209c:	00 00       	bra	@r0		
    209e:	00 00       	bra	@r0		
    20a0:	6c 1a       	.word	0x1a6c;	????	
    20a2:	00 00       	bra	@r0		
    20a4:	20 00 20 00 	bra	&0x00020	
    20a8:	00 00       	bra	@r0		
    20aa:	00 00       	bra	@r0		
    20ac:	7b 1a       	.word	0x1a7b;	????	
    20ae:	00 00       	bra	@r0		
    20b0:	20 00 88 00 	bra	&0x00088	
    20b4:	00 00       	bra	@r0		
    20b6:	00 00       	bra	@r0		
    20b8:	89 1a       	.word	0x1a89;	????	
    20ba:	00 00       	bra	@r0		
    20bc:	20 00 8c 00 	bra	&0x0008c	
    20c0:	00 00       	bra	@r0		
    20c2:	00 00       	bra	@r0		
    20c4:	97 1a       	.word	0x1a97;	????	
    20c6:	00 00       	bra	@r0		
    20c8:	20 00 90 00 	bra	&0x00090	
    20cc:	00 00       	bra	@r0		
    20ce:	00 00       	bra	@r0		
    20d0:	a5 1a       	.word	0x1aa5;	????	
    20d2:	00 00       	bra	@r0		
    20d4:	20 00 94 00 	bra	&0x00094	
    20d8:	00 00       	bra	@r0		
    20da:	00 00       	bra	@r0		
    20dc:	b3 1a       	.word	0x1ab3;	????	
    20de:	00 00       	bra	@r0		
    20e0:	20 00 98 00 	bra	&0x00098	
    20e4:	00 00       	bra	@r0		
    20e6:	00 00       	bra	@r0		
    20e8:	c1 1a       	.word	0x1ac1;	????	
    20ea:	00 00       	bra	@r0		
    20ec:	20 00 9c 00 	bra	&0x0009c	
    20f0:	00 00       	bra	@r0		
    20f2:	00 00       	bra	@r0		
    20f4:	cf 1a       	.word	0x1acf;	????	
    20f6:	00 00       	bra	@r0		
    20f8:	20 00 7a 00 	bra	&0x0007a	
    20fc:	00 00       	bra	@r0		
    20fe:	00 00       	bra	@r0		
    2100:	e3 1a       	.word	0x1ae3;	????	
    2102:	00 00       	bra	@r0		
    2104:	20 00 7c 00 	bra	&0x0007c	
    2108:	00 00       	bra	@r0		
    210a:	00 00       	bra	@r0		
    210c:	f0 1a       	.word	0x1af0;	????	
    210e:	00 00       	bra	@r0		
    2110:	20 00 7e 00 	bra	&0x0007e	
    2114:	00 00       	bra	@r0		
    2116:	00 00       	bra	@r0		
    2118:	fd 1a       	.word	0x1afd;	????	
    211a:	00 00       	bra	@r0		
    211c:	20 00 80 00 	bra	&0x00080	
    2120:	00 00       	bra	@r0		
    2122:	00 00       	bra	@r0		
    2124:	0a 1b       	.word	0x1b0a;	????	
    2126:	00 00       	bra	@r0		
    2128:	20 00 82 00 	bra	&0x00082	
    212c:	00 00       	bra	@r0		
    212e:	00 00       	bra	@r0		
    2130:	17 1b       	.word	0x1b17;	????	
    2132:	00 00       	bra	@r0		
    2134:	20 00 84 00 	bra	&0x00084	
    2138:	00 00       	bra	@r0		
    213a:	00 00       	bra	@r0		
    213c:	23 1b       	.word	0x1b23;	????	
    213e:	00 00       	bra	@r0		
    2140:	20 00 86 00 	bra	&0x00086	
    2144:	00 00       	bra	@r0		
    2146:	00 00       	bra	@r0		
    2148:	30 1b       	.word	0x1b30;	????	
    214a:	00 00       	bra	@r0		
    214c:	20 00 89 00 	bra	&0x00089	
    2150:	00 00       	bra	@r0		
    2152:	00 00       	bra	@r0		
    2154:	3d 1b       	.word	0x1b3d;	????	
    2156:	00 00       	bra	@r0		
    2158:	20 00 8f 00 	bra	&0x0008f	
    215c:	00 00       	bra	@r0		
    215e:	00 00       	bra	@r0		
    2160:	49 1b       	.word	0x1b49;	????	
    2162:	00 00       	bra	@r0		
    2164:	20 00 91 00 	bra	&0x00091	
    2168:	00 00       	bra	@r0		
    216a:	00 00       	bra	@r0		
    216c:	56 1b       	.word	0x1b56;	????	
    216e:	00 00       	bra	@r0		
    2170:	20 00 93 00 	bra	&0x00093	
    2174:	00 00       	bra	@r0		
    2176:	00 00       	bra	@r0		
    2178:	63 1b       	.word	0x1b63;	????	
    217a:	00 00       	bra	@r0		
    217c:	20 00 95 00 	bra	&0x00095	
    2180:	00 00       	bra	@r0		
    2182:	00 00       	bra	@r0		
    2184:	70 1b       	.word	0x1b70;	????	
    2186:	00 00       	bra	@r0		
    2188:	20 00 97 00 	bra	&0x00097	
    218c:	00 00       	bra	@r0		
    218e:	00 00       	bra	@r0		
    2190:	7d 1b       	.word	0x1b7d;	????	
    2192:	00 00       	bra	@r0		
    2194:	20 00 99 00 	bra	&0x00099	
    2198:	00 00       	bra	@r0		
    219a:	00 00       	bra	@r0		
    219c:	89 1b       	.word	0x1b89;	????	
    219e:	00 00       	bra	@r0		
    21a0:	20 00 9b 00 	bra	&0x0009b	
    21a4:	00 00       	bra	@r0		
    21a6:	00 00       	bra	@r0		
    21a8:	96 1b       	.word	0x1b96;	????	
    21aa:	00 00       	bra	@r0		
    21ac:	20 00 9e 00 	bra	&0x0009e	
    21b0:	00 00       	bra	@r0		
    21b2:	00 00       	bra	@r0		
    21b4:	a3 1b       	.word	0x1ba3;	????	
    21b6:	00 00       	bra	@r0		
    21b8:	20 00 a4 00 	bra	&0x000a4	
    21bc:	00 00       	bra	@r0		
    21be:	00 00       	bra	@r0		
    21c0:	af 1b       	.word	0x1baf;	????	
    21c2:	00 00       	bra	@r0		
    21c4:	20 00 a6 00 	bra	&0x000a6	
    21c8:	00 00       	bra	@r0		
    21ca:	00 00       	bra	@r0		
    21cc:	bc 1b       	.word	0x1bbc;	????	
    21ce:	00 00       	bra	@r0		
    21d0:	20 00 a8 00 	bra	&0x000a8	
    21d4:	00 00       	bra	@r0		
    21d6:	00 00       	bra	@r0		
    21d8:	c9 1b       	.word	0x1bc9;	????	
    21da:	00 00       	bra	@r0		
    21dc:	20 00 aa 00 	bra	&0x000aa	
    21e0:	00 00       	bra	@r0		
    21e2:	00 00       	bra	@r0		
    21e4:	d6 1b       	.word	0x1bd6;	????	
    21e6:	00 00       	bra	@r0		
    21e8:	20 00 ad 00 	bra	&0x000ad	
    21ec:	00 00       	bra	@r0		
    21ee:	00 00       	bra	@r0		
    21f0:	e3 1b       	.word	0x1be3;	????	
    21f2:	00 00       	bra	@r0		
    21f4:	20 00 b3 00 	bra	&0x000b3	
    21f8:	00 00       	bra	@r0		
    21fa:	00 00       	bra	@r0		
    21fc:	ef 1b       	.word	0x1bef;	????	
    21fe:	00 00       	bra	@r0		
    2200:	20 00 b5 00 	bra	&0x000b5	
    2204:	00 00       	bra	@r0		
    2206:	00 00       	bra	@r0		
    2208:	fc 1b       	.word	0x1bfc;	????	
    220a:	00 00       	bra	@r0		
    220c:	20 00 b7 00 	bra	&0x000b7	
    2210:	00 00       	bra	@r0		
    2212:	00 00       	bra	@r0		
    2214:	09 1c       	.word	0x1c09;	????	
    2216:	00 00       	bra	@r0		
    2218:	20 00 b9 00 	bra	&0x000b9	
    221c:	00 00       	bra	@r0		
    221e:	00 00       	bra	@r0		
    2220:	16 1c       	.word	0x1c16;	????	
    2222:	00 00       	bra	@r0		
    2224:	20 00 bc 00 	bra	&0x000bc	
    2228:	00 00       	bra	@r0		
    222a:	00 00       	bra	@r0		
    222c:	23 1c       	.word	0x1c23;	????	
    222e:	00 00       	bra	@r0		
    2230:	20 00 c2 00 	bra	&0x000c2	
    2234:	00 00       	bra	@r0		
    2236:	00 00       	bra	@r0		
    2238:	2f 1c       	.word	0x1c2f;	????	
    223a:	00 00       	bra	@r0		
    223c:	20 00 c4 00 	bra	&0x000c4	
    2240:	00 00       	bra	@r0		
    2242:	00 00       	bra	@r0		
    2244:	3c 1c       	.word	0x1c3c;	????	
    2246:	00 00       	bra	@r0		
    2248:	20 00 c6 00 	bra	&0x000c6	
    224c:	00 00       	bra	@r0		
    224e:	00 00       	bra	@r0		
    2250:	49 1c       	.word	0x1c49;	????	
    2252:	00 00       	bra	@r0		
    2254:	20 00 c8 00 	bra	&0x000c8	
    2258:	00 00       	bra	@r0		
    225a:	00 00       	bra	@r0		
    225c:	56 1c       	.word	0x1c56;	????	
    225e:	00 00       	bra	@r0		
    2260:	20 00 cb 00 	bra	&0x000cb	
    2264:	00 00       	bra	@r0		
    2266:	00 00       	bra	@r0		
    2268:	63 1c       	.word	0x1c63;	????	
    226a:	00 00       	bra	@r0		
    226c:	20 00 d1 00 	bra	&0x000d1	
    2270:	00 00       	bra	@r0		
    2272:	00 00       	bra	@r0		
    2274:	6f 1c       	.word	0x1c6f;	????	
    2276:	00 00       	bra	@r0		
    2278:	20 00 d3 00 	bra	&0x000d3	
    227c:	00 00       	bra	@r0		
    227e:	00 00       	bra	@r0		
    2280:	7c 1c       	.word	0x1c7c;	????	
    2282:	00 00       	bra	@r0		
    2284:	20 00 d5 00 	bra	&0x000d5	
    2288:	00 00       	bra	@r0		
    228a:	00 00       	bra	@r0		
    228c:	89 1c       	.word	0x1c89;	????	
    228e:	00 00       	bra	@r0		
    2290:	20 00 d7 00 	bra	&0x000d7	
    2294:	00 00       	bra	@r0		
    2296:	00 00       	bra	@r0		
    2298:	96 1c       	.word	0x1c96;	????	
    229a:	00 00       	bra	@r0		
    229c:	20 00 da 00 	bra	&0x000da	
    22a0:	00 00       	bra	@r0		
    22a2:	00 00       	bra	@r0		
    22a4:	a3 1c       	.word	0x1ca3;	????	
    22a6:	00 00       	bra	@r0		
    22a8:	20 00 e0 00 	bra	&0x000e0	
    22ac:	00 00       	bra	@r0		
    22ae:	00 00       	bra	@r0		
    22b0:	af 1c       	.word	0x1caf;	????	
    22b2:	00 00       	bra	@r0		
    22b4:	20 00 e2 00 	bra	&0x000e2	
    22b8:	00 00       	bra	@r0		
    22ba:	00 00       	bra	@r0		
    22bc:	bc 1c       	.word	0x1cbc;	????	
    22be:	00 00       	bra	@r0		
    22c0:	20 00 e4 00 	bra	&0x000e4	
    22c4:	00 00       	bra	@r0		
    22c6:	00 00       	bra	@r0		
    22c8:	c9 1c       	.word	0x1cc9;	????	
    22ca:	00 00       	bra	@r0		
    22cc:	20 00 e6 00 	bra	&0x000e6	
    22d0:	00 00       	bra	@r0		
    22d2:	00 00       	bra	@r0		
    22d4:	d6 1c       	.word	0x1cd6;	????	
    22d6:	00 00       	bra	@r0		
    22d8:	20 00 e9 00 	bra	&0x000e9	
    22dc:	00 00       	bra	@r0		
    22de:	00 00       	bra	@r0		
    22e0:	e3 1c       	.word	0x1ce3;	????	
    22e2:	00 00       	bra	@r0		
    22e4:	20 00 ef 00 	bra	&0x000ef	
    22e8:	00 00       	bra	@r0		
    22ea:	00 00       	bra	@r0		
    22ec:	ef 1c       	.word	0x1cef;	????	
    22ee:	00 00       	bra	@r0		
    22f0:	20 00 f1 00 	bra	&0x000f1	
    22f4:	00 00       	bra	@r0		
    22f6:	00 00       	bra	@r0		
    22f8:	fc 1c       	.word	0x1cfc;	????	
    22fa:	00 00       	bra	@r0		
    22fc:	20 00 f3 00 	bra	&0x000f3	
    2300:	00 00       	bra	@r0		
    2302:	00 00       	bra	@r0		
    2304:	09 1d       	.word	0x1d09;	????	
    2306:	00 00       	bra	@r0		
    2308:	20 00 f5 00 	bra	&0x000f5	
    230c:	00 00       	bra	@r0		
    230e:	00 00       	bra	@r0		
    2310:	16 1d       	.word	0x1d16;	????	
    2312:	00 00       	bra	@r0		
    2314:	20 00 f8 00 	bra	&0x000f8	
    2318:	00 00       	bra	@r0		
    231a:	00 00       	bra	@r0		
    231c:	23 1d       	.word	0x1d23;	????	
    231e:	00 00       	bra	@r0		
    2320:	20 00 fc 00 	bra	&0x000fc	
    2324:	00 00       	bra	@r0		
    2326:	00 00       	bra	@r0		
    2328:	33 1d       	.word	0x1d33;	????	
    232a:	00 00       	bra	@r0		
    232c:	20 00 fe 00 	bra	&0x000fe	
    2330:	00 00       	bra	@r0		
    2332:	00 00       	bra	@r0		
    2334:	43 1d       	.word	0x1d43;	????	
    2336:	00 00       	bra	@r0		
    2338:	20 00 00 01 	bra	&0x00100	
    233c:	00 00       	bra	@r0		
    233e:	00 00       	bra	@r0		
    2340:	52 1d       	.word	0x1d52;	????	
    2342:	00 00       	bra	@r0		
    2344:	20 00 02 01 	bra	&0x00102	
    2348:	00 00       	bra	@r0		
    234a:	00 00       	bra	@r0		
    234c:	61 1d       	.word	0x1d61;	????	
    234e:	00 00       	bra	@r0		
    2350:	20 00 04 01 	bra	&0x00104	
    2354:	00 00       	bra	@r0		
    2356:	00 00       	bra	@r0		
    2358:	71 1d       	.word	0x1d71;	????	
    235a:	00 00       	bra	@r0		
    235c:	20 00 06 01 	bra	&0x00106	
    2360:	00 00       	bra	@r0		
    2362:	00 00       	bra	@r0		
    2364:	81 1d       	.word	0x1d81;	????	
    2366:	00 00       	bra	@r0		
    2368:	20 00 08 01 	bra	&0x00108	
    236c:	00 00       	bra	@r0		
    236e:	00 00       	bra	@r0		
    2370:	92 1d       	.word	0x1d92;	????	
    2372:	00 00       	bra	@r0		
    2374:	20 00 0a 01 	bra	&0x0010a	
    2378:	00 00       	bra	@r0		
    237a:	00 00       	bra	@r0		
    237c:	a3 1d       	.word	0x1da3;	????	
    237e:	00 00       	bra	@r0		
    2380:	20 00 0c 01 	bra	&0x0010c	
    2384:	00 00       	bra	@r0		
    2386:	00 00       	bra	@r0		
    2388:	b4 1d       	.word	0x1db4;	????	
    238a:	00 00       	bra	@r0		
    238c:	20 00 0e 01 	bra	&0x0010e	
    2390:	00 00       	bra	@r0		
    2392:	00 00       	bra	@r0		
    2394:	c6 1d       	.word	0x1dc6;	????	
    2396:	00 00       	bra	@r0		
    2398:	20 00 10 01 	bra	&0x00110	
    239c:	00 00       	bra	@r0		
    239e:	00 00       	bra	@r0		
    23a0:	d8 1d       	.word	0x1dd8;	????	
    23a2:	00 00       	bra	@r0		
    23a4:	20 00 13 01 	bra	&0x00113	
    23a8:	00 00       	bra	@r0		
    23aa:	00 00       	bra	@r0		
    23ac:	e8 1d       	.word	0x1de8;	????	
    23ae:	00 00       	bra	@r0		
    23b0:	20 00 15 01 	bra	&0x00115	
    23b4:	00 00       	bra	@r0		
    23b6:	00 00       	bra	@r0		
    23b8:	f8 1d       	.word	0x1df8;	????	
    23ba:	00 00       	bra	@r0		
    23bc:	20 00 17 01 	bra	&0x00117	
    23c0:	00 00       	bra	@r0		
    23c2:	00 00       	bra	@r0		
    23c4:	07 1e       	.word	0x1e07;	????	
    23c6:	00 00       	bra	@r0		
    23c8:	20 00 19 01 	bra	&0x00119	
    23cc:	00 00       	bra	@r0		
    23ce:	00 00       	bra	@r0		
    23d0:	16 1e       	.word	0x1e16;	????	
    23d2:	00 00       	bra	@r0		
    23d4:	20 00 1b 01 	bra	&0x0011b	
    23d8:	00 00       	bra	@r0		
    23da:	00 00       	bra	@r0		
    23dc:	27 1e       	.word	0x1e27;	????	
    23de:	00 00       	bra	@r0		
    23e0:	20 00 1d 01 	bra	&0x0011d	
    23e4:	00 00       	bra	@r0		
    23e6:	00 00       	bra	@r0		
    23e8:	37 1e       	.word	0x1e37;	????	
    23ea:	00 00       	bra	@r0		
    23ec:	20 00 1f 01 	bra	&0x0011f	
    23f0:	00 00       	bra	@r0		
    23f2:	00 00       	bra	@r0		
    23f4:	48 1e       	.word	0x1e48;	????	
    23f6:	00 00       	bra	@r0		
    23f8:	20 00 21 01 	bra	&0x00121	
    23fc:	00 00       	bra	@r0		
    23fe:	00 00       	bra	@r0		
    2400:	59 1e       	.word	0x1e59;	????	
    2402:	00 00       	bra	@r0		
    2404:	20 00 23 01 	bra	&0x00123	
    2408:	00 00       	bra	@r0		
    240a:	00 00       	bra	@r0		
    240c:	6b 1e       	.word	0x1e6b;	????	
    240e:	00 00       	bra	@r0		
    2410:	20 00 25 01 	bra	&0x00125	
    2414:	00 00       	bra	@r0		
    2416:	00 00       	bra	@r0		
    2418:	7d 1e       	.word	0x1e7d;	????	
    241a:	00 00       	bra	@r0		
    241c:	20 00 2c 01 	bra	&0x0012c	
    2420:	00 00       	bra	@r0		
    2422:	00 00       	bra	@r0		
    2424:	8d 1e       	.word	0x1e8d;	????	
    2426:	00 00       	bra	@r0		
    2428:	20 00 2e 01 	bra	&0x0012e	
    242c:	00 00       	bra	@r0		
    242e:	00 00       	bra	@r0		
    2430:	9d 1e       	.word	0x1e9d;	????	
    2432:	00 00       	bra	@r0		
    2434:	20 00 30 01 	bra	&0x00130	
    2438:	00 00       	bra	@r0		
    243a:	00 00       	bra	@r0		
    243c:	ac 1e       	.word	0x1eac;	????	
    243e:	00 00       	bra	@r0		
    2440:	20 00 32 01 	bra	&0x00132	
    2444:	00 00       	bra	@r0		
    2446:	00 00       	bra	@r0		
    2448:	bb 1e       	.word	0x1ebb;	????	
    244a:	00 00       	bra	@r0		
    244c:	20 00 34 01 	bra	&0x00134	
    2450:	00 00       	bra	@r0		
    2452:	00 00       	bra	@r0		
    2454:	cb 1e       	.word	0x1ecb;	????	
    2456:	00 00       	bra	@r0		
    2458:	20 00 36 01 	bra	&0x00136	
    245c:	00 00       	bra	@r0		
    245e:	00 00       	bra	@r0		
    2460:	db 1e       	.word	0x1edb;	????	
    2462:	00 00       	bra	@r0		
    2464:	20 00 38 01 	bra	&0x00138	
    2468:	00 00       	bra	@r0		
    246a:	00 00       	bra	@r0		
    246c:	ec 1e       	.word	0x1eec;	????	
    246e:	00 00       	bra	@r0		
    2470:	20 00 3a 01 	bra	&0x0013a	
    2474:	00 00       	bra	@r0		
    2476:	00 00       	bra	@r0		
    2478:	fd 1e       	.word	0x1efd;	????	
    247a:	00 00       	bra	@r0		
    247c:	20 00 3c 01 	bra	&0x0013c	
    2480:	00 00       	bra	@r0		
    2482:	00 00       	bra	@r0		
    2484:	0e 1f       	.word	0x1f0e;	????	
    2486:	00 00       	bra	@r0		
    2488:	20 00 3e 01 	bra	&0x0013e	
    248c:	00 00       	bra	@r0		
    248e:	00 00       	bra	@r0		
    2490:	20 1f       	.word	0x1f20;	????	
    2492:	00 00       	bra	@r0		
    2494:	20 00 40 01 	bra	&0x00140	
    2498:	00 00       	bra	@r0		
    249a:	00 00       	bra	@r0		
    249c:	32 1f       	.word	0x1f32;	????	
    249e:	00 00       	bra	@r0		
    24a0:	20 00 43 01 	bra	&0x00143	
    24a4:	00 00       	bra	@r0		
    24a6:	00 00       	bra	@r0		
    24a8:	42 1f       	.word	0x1f42;	????	
    24aa:	00 00       	bra	@r0		
    24ac:	20 00 45 01 	bra	&0x00145	
    24b0:	00 00       	bra	@r0		
    24b2:	00 00       	bra	@r0		
    24b4:	52 1f       	.word	0x1f52;	????	
    24b6:	00 00       	bra	@r0		
    24b8:	20 00 47 01 	bra	&0x00147	
    24bc:	00 00       	bra	@r0		
    24be:	00 00       	bra	@r0		
    24c0:	61 1f       	.word	0x1f61;	????	
    24c2:	00 00       	bra	@r0		
    24c4:	20 00 49 01 	bra	&0x00149	
    24c8:	00 00       	bra	@r0		
    24ca:	00 00       	bra	@r0		
    24cc:	70 1f       	.word	0x1f70;	????	
    24ce:	00 00       	bra	@r0		
    24d0:	20 00 4b 01 	bra	&0x0014b	
    24d4:	00 00       	bra	@r0		
    24d6:	00 00       	bra	@r0		
    24d8:	81 1f       	.word	0x1f81;	????	
    24da:	00 00       	bra	@r0		
    24dc:	20 00 4d 01 	bra	&0x0014d	
    24e0:	00 00       	bra	@r0		
    24e2:	00 00       	bra	@r0		
    24e4:	91 1f       	.word	0x1f91;	????	
    24e6:	00 00       	bra	@r0		
    24e8:	20 00 4f 01 	bra	&0x0014f	
    24ec:	00 00       	bra	@r0		
    24ee:	00 00       	bra	@r0		
    24f0:	a2 1f       	.word	0x1fa2;	????	
    24f2:	00 00       	bra	@r0		
    24f4:	20 00 51 01 	bra	&0x00151	
    24f8:	00 00       	bra	@r0		
    24fa:	00 00       	bra	@r0		
    24fc:	b3 1f       	.word	0x1fb3;	????	
    24fe:	00 00       	bra	@r0		
    2500:	20 00 53 01 	bra	&0x00153	
    2504:	00 00       	bra	@r0		
    2506:	00 00       	bra	@r0		
    2508:	c5 1f       	.word	0x1fc5;	????	
    250a:	00 00       	bra	@r0		
    250c:	20 00 55 01 	bra	&0x00155	
    2510:	00 00       	bra	@r0		
    2512:	00 00       	bra	@r0		
    2514:	d7 1f       	.word	0x1fd7;	????	
    2516:	00 00       	bra	@r0		
    2518:	20 00 58 01 	bra	&0x00158	
    251c:	00 00       	bra	@r0		
    251e:	00 00       	bra	@r0		
    2520:	e4 1f       	.word	0x1fe4;	????	
    2522:	00 00       	bra	@r0		
    2524:	20 00 5a 01 	bra	&0x0015a	
    2528:	00 00       	bra	@r0		
    252a:	00 00       	bra	@r0		
    252c:	f2 1f       	.word	0x1ff2;	????	
    252e:	00 00       	bra	@r0		
    2530:	20 00 1a 00 	bra	&0x0001a	
    2534:	00 00       	bra	@r0		
    2536:	00 00       	bra	@r0		
    2538:	00 20       	jnz	$+2      	;abs 0x253a
    253a:	00 00       	bra	@r0		
    253c:	20 00 1c 00 	bra	&0x0001c	
    2540:	00 00       	bra	@r0		
    2542:	00 00       	bra	@r0		
    2544:	0f 20       	jnz	$+32     	;abs 0x2564
    2546:	00 00       	bra	@r0		
    2548:	20 00 1e 00 	bra	&0x0001e	
    254c:	00 00       	bra	@r0		
    254e:	00 00       	bra	@r0		
    2550:	1c 20       	jnz	$+58     	;abs 0x258a
    2552:	00 00       	bra	@r0		
    2554:	20 00 21 00 	bra	&0x00021	
    2558:	00 00       	bra	@r0		
    255a:	00 00       	bra	@r0		
    255c:	2d 20       	jnz	$+92     	;abs 0x25b8
    255e:	00 00       	bra	@r0		
    2560:	20 00 23 00 	bra	&0x00023	
    2564:	00 00       	bra	@r0		
    2566:	00 00       	bra	@r0		
    2568:	3e 20       	jnz	$+126    	;abs 0x25e6
    256a:	00 00       	bra	@r0		
    256c:	20 00 25 00 	bra	&0x00025	
    2570:	00 00       	bra	@r0		
    2572:	00 00       	bra	@r0		
    2574:	4e 20       	jnz	$+158    	;abs 0x2612
    2576:	00 00       	bra	@r0		
    2578:	20 00 27 00 	bra	&0x00027	
    257c:	00 00       	bra	@r0		
    257e:	00 00       	bra	@r0		
    2580:	5e 20       	jnz	$+190    	;abs 0x263e
    2582:	00 00       	bra	@r0		
    2584:	20 00 47 00 	bra	&0x00047	
    2588:	00 00       	bra	@r0		
    258a:	00 00       	bra	@r0		
    258c:	6f 20       	jnz	$+224    	;abs 0x266c
    258e:	00 00       	bra	@r0		
    2590:	20 00 49 00 	bra	&0x00049	
    2594:	00 00       	bra	@r0		
    2596:	00 00       	bra	@r0		
    2598:	7f 20       	jnz	$+256    	;abs 0x2698
    259a:	00 00       	bra	@r0		
    259c:	20 00 ac 00 	bra	&0x000ac	
    25a0:	00 00       	bra	@r0		
    25a2:	00 00       	bra	@r0		
    25a4:	8e 20       	jnz	$+286    	;abs 0x26c2
    25a6:	00 00       	bra	@r0		
    25a8:	20 00 16 00 	bra	&0x00016	
    25ac:	00 00       	bra	@r0		
    25ae:	00 00       	bra	@r0		
    25b0:	9b 20       	jnz	$+312    	;abs 0x26e8
    25b2:	00 00       	bra	@r0		
    25b4:	20 00 18 00 	bra	&0x00018	
    25b8:	00 00       	bra	@r0		
    25ba:	00 00       	bra	@r0		
    25bc:	a9 20       	jnz	$+340    	;abs 0x2710
    25be:	00 00       	bra	@r0		
    25c0:	20 00 1a 00 	bra	&0x0001a	
    25c4:	00 00       	bra	@r0		
    25c6:	00 00       	bra	@r0		
    25c8:	b5 20       	jnz	$+364    	;abs 0x2734
    25ca:	00 00       	bra	@r0		
    25cc:	20 00 1d 00 	bra	&0x0001d	
    25d0:	00 00       	bra	@r0		
    25d2:	00 00       	bra	@r0		
    25d4:	c5 20       	jnz	$+396    	;abs 0x2760
    25d6:	00 00       	bra	@r0		
    25d8:	20 00 1f 00 	bra	&0x0001f	
    25dc:	00 00       	bra	@r0		
    25de:	00 00       	bra	@r0		
    25e0:	d5 20       	jnz	$+428    	;abs 0x278c
    25e2:	00 00       	bra	@r0		
    25e4:	20 00 21 00 	bra	&0x00021	
    25e8:	00 00       	bra	@r0		
    25ea:	00 00       	bra	@r0		
    25ec:	e5 20       	jnz	$+460    	;abs 0x27b8
    25ee:	00 00       	bra	@r0		
    25f0:	20 00 23 00 	bra	&0x00023	
    25f4:	00 00       	bra	@r0		
    25f6:	00 00       	bra	@r0		
    25f8:	f4 20       	jnz	$+490    	;abs 0x27e2
    25fa:	00 00       	bra	@r0		
    25fc:	20 00 25 00 	bra	&0x00025	
    2600:	00 00       	bra	@r0		
    2602:	00 00       	bra	@r0		
    2604:	03 21       	jnz	$+520    	;abs 0x280c
    2606:	00 00       	bra	@r0		
    2608:	20 00 27 00 	bra	&0x00027	
    260c:	00 00       	bra	@r0		
    260e:	00 00       	bra	@r0		
    2610:	12 21       	jnz	$+550    	;abs 0x2836
    2612:	00 00       	bra	@r0		
    2614:	20 00 2c 00 	bra	&0x0002c	
    2618:	00 00       	bra	@r0		
    261a:	00 00       	bra	@r0		
    261c:	22 21       	jnz	$+582    	;abs 0x2862
    261e:	00 00       	bra	@r0		
    2620:	20 00 2e 00 	bra	&0x0002e	
    2624:	00 00       	bra	@r0		
    2626:	00 00       	bra	@r0		
    2628:	32 21       	jnz	$+614    	;abs 0x288e
    262a:	00 00       	bra	@r0		
    262c:	20 00 30 00 	bra	&0x00030	
    2630:	00 00       	bra	@r0		
    2632:	00 00       	bra	@r0		
    2634:	42 21       	jnz	$+646    	;abs 0x28ba
    2636:	00 00       	bra	@r0		
    2638:	20 00 32 00 	bra	&0x00032	
    263c:	00 00       	bra	@r0		
    263e:	00 00       	bra	@r0		
    2640:	52 21       	jnz	$+678    	;abs 0x28e6
    2642:	00 00       	bra	@r0		
    2644:	20 00 34 00 	bra	&0x00034	
    2648:	00 00       	bra	@r0		
    264a:	00 00       	bra	@r0		
    264c:	61 21       	jnz	$+708    	;abs 0x2910
    264e:	00 00       	bra	@r0		
    2650:	20 00 36 00 	bra	&0x00036	
    2654:	00 00       	bra	@r0		
    2656:	00 00       	bra	@r0		
    2658:	70 21       	jnz	$+738    	;abs 0x293a
    265a:	00 00       	bra	@r0		
    265c:	20 00 38 00 	bra	&0x00038	
    2660:	00 00       	bra	@r0		
    2662:	00 00       	bra	@r0		
    2664:	7f 21       	jnz	$+768    	;abs 0x2964
    2666:	00 00       	bra	@r0		
    2668:	20 00 3a 00 	bra	&0x0003a	
    266c:	00 00       	bra	@r0		
    266e:	00 00       	bra	@r0		
    2670:	8e 21       	jnz	$+798    	;abs 0x298e
    2672:	00 00       	bra	@r0		
    2674:	20 00 7a 00 	bra	&0x0007a	
    2678:	00 00       	bra	@r0		
    267a:	00 00       	bra	@r0		
    267c:	9d 21       	jnz	$+828    	;abs 0x29b8
    267e:	00 00       	bra	@r0		
    2680:	20 00 14 00 	bra	&0x00014	
    2684:	00 00       	bra	@r0		
    2686:	00 00       	bra	@r0		
    2688:	ab 21       	jnz	$+856    	;abs 0x29e0
    268a:	00 00       	bra	@r0		
    268c:	20 00 16 00 	bra	&0x00016	
    2690:	00 00       	bra	@r0		
    2692:	00 00       	bra	@r0		
    2694:	ba 21       	jnz	$+886    	;abs 0x2a0a
    2696:	00 00       	bra	@r0		
    2698:	20 00 18 00 	bra	&0x00018	
    269c:	00 00       	bra	@r0		
    269e:	00 00       	bra	@r0		
    26a0:	c9 21       	jnz	$+916    	;abs 0x2a34
    26a2:	00 00       	bra	@r0		
    26a4:	20 00 1b 00 	bra	&0x0001b	
    26a8:	00 00       	bra	@r0		
    26aa:	00 00       	bra	@r0		
    26ac:	d8 21       	jnz	$+946    	;abs 0x2a5e
    26ae:	00 00       	bra	@r0		
    26b0:	20 00 14 00 	bra	&0x00014	
    26b4:	00 00       	bra	@r0		
    26b6:	00 00       	bra	@r0		
    26b8:	e6 21       	jnz	$+974    	;abs 0x2a86
    26ba:	00 00       	bra	@r0		
    26bc:	20 00 16 00 	bra	&0x00016	
    26c0:	00 00       	bra	@r0		
    26c2:	00 00       	bra	@r0		
    26c4:	f4 21       	jnz	$+1002   	;abs 0x2aae
    26c6:	00 00       	bra	@r0		
    26c8:	20 00 18 00 	bra	&0x00018	
    26cc:	00 00       	bra	@r0		
    26ce:	00 00       	bra	@r0		
    26d0:	02 22       	jnz	$-1018   	;abs 0x22d6
    26d2:	00 00       	bra	@r0		
    26d4:	20 00 14 00 	bra	&0x00014	
    26d8:	00 00       	bra	@r0		
    26da:	00 00       	bra	@r0		
    26dc:	10 22       	jnz	$-990    	;abs 0x22fe
    26de:	00 00       	bra	@r0		
    26e0:	20 00 16 00 	bra	&0x00016	
    26e4:	00 00       	bra	@r0		
    26e6:	00 00       	bra	@r0		
    26e8:	1e 22       	jnz	$-962    	;abs 0x2326
    26ea:	00 00       	bra	@r0		
    26ec:	20 00 18 00 	bra	&0x00018	
    26f0:	00 00       	bra	@r0		
    26f2:	00 00       	bra	@r0		
    26f4:	2a 22       	jnz	$-938    	;abs 0x234a
    26f6:	00 00       	bra	@r0		
    26f8:	20 00 12 00 	bra	&0x00012	
    26fc:	00 00       	bra	@r0		
    26fe:	00 00       	bra	@r0		
    2700:	3c 22       	jnz	$-902    	;abs 0x237a
    2702:	00 00       	bra	@r0		
    2704:	20 00 14 00 	bra	&0x00014	
    2708:	00 00       	bra	@r0		
    270a:	00 00       	bra	@r0		
    270c:	4e 22       	jnz	$-866    	;abs 0x23aa
    270e:	00 00       	bra	@r0		
    2710:	20 00 16 00 	bra	&0x00016	
    2714:	00 00       	bra	@r0		
    2716:	00 00       	bra	@r0		
    2718:	5f 22       	jnz	$-832    	;abs 0x23d8
    271a:	00 00       	bra	@r0		
    271c:	20 00 18 00 	bra	&0x00018	
    2720:	00 00       	bra	@r0		
    2722:	00 00       	bra	@r0		
    2724:	6f 22       	jnz	$-800    	;abs 0x2404
    2726:	00 00       	bra	@r0		
    2728:	20 00 1a 00 	bra	&0x0001a	
    272c:	00 00       	bra	@r0		
    272e:	00 00       	bra	@r0		
    2730:	7f 22       	jnz	$-768    	;abs 0x2430
    2732:	00 00       	bra	@r0		
    2734:	20 00 58 00 	bra	&0x00058	
    2738:	00 00       	bra	@r0		
    273a:	00 00       	bra	@r0		
    273c:	8d 22       	jnz	$-740    	;abs 0x2458
    273e:	00 00       	bra	@r0		
    2740:	20 00 64 00 	bra	&0x00064	
    2744:	00 00       	bra	@r0		
    2746:	00 00       	bra	@r0		
    2748:	9f 22       	jnz	$-704    	;abs 0x2488
    274a:	00 00       	bra	@r0		
    274c:	20 00 66 00 	bra	&0x00066	
    2750:	00 00       	bra	@r0		
    2752:	00 00       	bra	@r0		
    2754:	b1 22       	jnz	$-668    	;abs 0x24b8
    2756:	00 00       	bra	@r0		
    2758:	20 00 68 00 	bra	&0x00068	
    275c:	00 00       	bra	@r0		
    275e:	00 00       	bra	@r0		
    2760:	c3 22       	jnz	$-632    	;abs 0x24e8
    2762:	00 00       	bra	@r0		
    2764:	20 00 6a 00 	bra	&0x0006a	
    2768:	00 00       	bra	@r0		
    276a:	00 00       	bra	@r0		
    276c:	d5 22       	jnz	$-596    	;abs 0x2518
    276e:	00 00       	bra	@r0		
    2770:	20 00 6c 00 	bra	&0x0006c	
    2774:	00 00       	bra	@r0		
    2776:	00 00       	bra	@r0		
    2778:	e7 22       	jnz	$-560    	;abs 0x2548
    277a:	00 00       	bra	@r0		
    277c:	20 00 6e 00 	bra	&0x0006e	
    2780:	00 00       	bra	@r0		
    2782:	00 00       	bra	@r0		
    2784:	f9 22       	jnz	$-524    	;abs 0x2578
    2786:	00 00       	bra	@r0		
    2788:	20 00 70 00 	bra	&0x00070	
    278c:	00 00       	bra	@r0		
    278e:	00 00       	bra	@r0		
    2790:	0b 23       	jnz	$-488    	;abs 0x25a8
    2792:	00 00       	bra	@r0		
    2794:	20 00 72 00 	bra	&0x00072	
    2798:	00 00       	bra	@r0		
    279a:	00 00       	bra	@r0		
    279c:	1d 23       	jnz	$-452    	;abs 0x25d8
    279e:	00 00       	bra	@r0		
    27a0:	20 00 74 00 	bra	&0x00074	
    27a4:	00 00       	bra	@r0		
    27a6:	00 00       	bra	@r0		
    27a8:	2f 23       	jnz	$-416    	;abs 0x2608
    27aa:	00 00       	bra	@r0		
    27ac:	20 00 76 00 	bra	&0x00076	
    27b0:	00 00       	bra	@r0		
    27b2:	00 00       	bra	@r0		
    27b4:	41 23       	jnz	$-380    	;abs 0x2638
    27b6:	00 00       	bra	@r0		
    27b8:	20 00 78 00 	bra	&0x00078	
    27bc:	00 00       	bra	@r0		
    27be:	00 00       	bra	@r0		
    27c0:	54 23       	jnz	$-342    	;abs 0x266a
    27c2:	00 00       	bra	@r0		
    27c4:	20 00 7a 00 	bra	&0x0007a	
    27c8:	00 00       	bra	@r0		
    27ca:	00 00       	bra	@r0		
    27cc:	67 23       	jnz	$-304    	;abs 0x269c
    27ce:	00 00       	bra	@r0		
    27d0:	20 00 7c 00 	bra	&0x0007c	
    27d4:	00 00       	bra	@r0		
    27d6:	00 00       	bra	@r0		
    27d8:	7a 23       	jnz	$-266    	;abs 0x26ce
    27da:	00 00       	bra	@r0		
    27dc:	20 00 7e 00 	bra	&0x0007e	
    27e0:	00 00       	bra	@r0		
    27e2:	00 00       	bra	@r0		
    27e4:	8d 23       	jnz	$-228    	;abs 0x2700
    27e6:	00 00       	bra	@r0		
    27e8:	20 00 80 00 	bra	&0x00080	
    27ec:	00 00       	bra	@r0		
    27ee:	00 00       	bra	@r0		
    27f0:	a0 23       	jnz	$-190    	;abs 0x2732
    27f2:	00 00       	bra	@r0		
    27f4:	20 00 82 00 	bra	&0x00082	
    27f8:	00 00       	bra	@r0		
    27fa:	00 00       	bra	@r0		
    27fc:	b3 23       	jnz	$-152    	;abs 0x2764
    27fe:	00 00       	bra	@r0		
    2800:	20 00 8b 00 	bra	&0x0008b	
    2804:	00 00       	bra	@r0		
    2806:	00 00       	bra	@r0		
    2808:	c5 23       	jnz	$-116    	;abs 0x2794
    280a:	00 00       	bra	@r0		
    280c:	20 00 8d 00 	bra	&0x0008d	
    2810:	00 00       	bra	@r0		
    2812:	00 00       	bra	@r0		
    2814:	d7 23       	jnz	$-80     	;abs 0x27c4
    2816:	00 00       	bra	@r0		
    2818:	20 00 8f 00 	bra	&0x0008f	
    281c:	00 00       	bra	@r0		
    281e:	00 00       	bra	@r0		
    2820:	e9 23       	jnz	$-44     	;abs 0x27f4
    2822:	00 00       	bra	@r0		
    2824:	20 00 91 00 	bra	&0x00091	
    2828:	00 00       	bra	@r0		
    282a:	00 00       	bra	@r0		
    282c:	fb 23       	jnz	$-8      	;abs 0x2824
    282e:	00 00       	bra	@r0		
    2830:	20 00 93 00 	bra	&0x00093	
    2834:	00 00       	bra	@r0		
    2836:	00 00       	bra	@r0		
    2838:	0d 24       	jz	$+28     	;abs 0x2854
    283a:	00 00       	bra	@r0		
    283c:	20 00 95 00 	bra	&0x00095	
    2840:	00 00       	bra	@r0		
    2842:	00 00       	bra	@r0		
    2844:	1f 24       	jz	$+64     	;abs 0x2884
    2846:	00 00       	bra	@r0		
    2848:	20 00 97 00 	bra	&0x00097	
    284c:	00 00       	bra	@r0		
    284e:	00 00       	bra	@r0		
    2850:	31 24       	jz	$+100    	;abs 0x28b4
    2852:	00 00       	bra	@r0		
    2854:	20 00 99 00 	bra	&0x00099	
    2858:	00 00       	bra	@r0		
    285a:	00 00       	bra	@r0		
    285c:	43 24       	jz	$+136    	;abs 0x28e4
    285e:	00 00       	bra	@r0		
    2860:	20 00 9b 00 	bra	&0x0009b	
    2864:	00 00       	bra	@r0		
    2866:	00 00       	bra	@r0		
    2868:	55 24       	jz	$+172    	;abs 0x2914
    286a:	00 00       	bra	@r0		
    286c:	20 00 9d 00 	bra	&0x0009d	
    2870:	00 00       	bra	@r0		
    2872:	00 00       	bra	@r0		
    2874:	67 24       	jz	$+208    	;abs 0x2944
    2876:	00 00       	bra	@r0		
    2878:	20 00 9f 00 	bra	&0x0009f	
    287c:	00 00       	bra	@r0		
    287e:	00 00       	bra	@r0		
    2880:	7a 24       	jz	$+246    	;abs 0x2976
    2882:	00 00       	bra	@r0		
    2884:	20 00 a1 00 	bra	&0x000a1	
    2888:	00 00       	bra	@r0		
    288a:	00 00       	bra	@r0		
    288c:	8d 24       	jz	$+284    	;abs 0x29a8
    288e:	00 00       	bra	@r0		
    2890:	20 00 a3 00 	bra	&0x000a3	
    2894:	00 00       	bra	@r0		
    2896:	00 00       	bra	@r0		
    2898:	a0 24       	jz	$+322    	;abs 0x29da
    289a:	00 00       	bra	@r0		
    289c:	20 00 a5 00 	bra	&0x000a5	
    28a0:	00 00       	bra	@r0		
    28a2:	00 00       	bra	@r0		
    28a4:	b3 24       	jz	$+360    	;abs 0x2a0c
    28a6:	00 00       	bra	@r0		
    28a8:	20 00 a7 00 	bra	&0x000a7	
    28ac:	00 00       	bra	@r0		
    28ae:	00 00       	bra	@r0		
    28b0:	c6 24       	jz	$+398    	;abs 0x2a3e
    28b2:	00 00       	bra	@r0		
    28b4:	20 00 a9 00 	bra	&0x000a9	
    28b8:	00 00       	bra	@r0		
    28ba:	00 00       	bra	@r0		
    28bc:	d9 24       	jz	$+436    	;abs 0x2a70
    28be:	00 00       	bra	@r0		
    28c0:	20 00 12 00 	bra	&0x00012	
    28c4:	00 00       	bra	@r0		
    28c6:	00 00       	bra	@r0		
    28c8:	ec 24       	jz	$+474    	;abs 0x2aa2
    28ca:	00 00       	bra	@r0		
    28cc:	20 00 14 00 	bra	&0x00014	
    28d0:	00 00       	bra	@r0		
    28d2:	00 00       	bra	@r0		
    28d4:	ff 24       	jz	$+512    	;abs 0x2ad4
    28d6:	00 00       	bra	@r0		
    28d8:	20 00 16 00 	bra	&0x00016	
    28dc:	00 00       	bra	@r0		
    28de:	00 00       	bra	@r0		
    28e0:	12 25       	jz	$+550    	;abs 0x2b06
    28e2:	00 00       	bra	@r0		
    28e4:	20 00 18 00 	bra	&0x00018	
    28e8:	00 00       	bra	@r0		
    28ea:	00 00       	bra	@r0		
    28ec:	25 25       	jz	$+588    	;abs 0x2b38
    28ee:	00 00       	bra	@r0		
    28f0:	20 00 18 00 	bra	&0x00018	
    28f4:	00 00       	bra	@r0		
    28f6:	00 00       	bra	@r0		
    28f8:	35 25       	jz	$+620    	;abs 0x2b64
    28fa:	00 00       	bra	@r0		
    28fc:	20 00 1a 00 	bra	&0x0001a	
    2900:	00 00       	bra	@r0		
    2902:	00 00       	bra	@r0		
    2904:	45 25       	jz	$+652    	;abs 0x2b90
    2906:	00 00       	bra	@r0		
    2908:	20 00 1d 00 	bra	&0x0001d	
    290c:	00 00       	bra	@r0		
    290e:	00 00       	bra	@r0		
    2910:	53 25       	jz	$+680    	;abs 0x2bb8
    2912:	00 00       	bra	@r0		
    2914:	20 00 3f 00 	bra	&0x0003f	
    2918:	00 00       	bra	@r0		
    291a:	00 00       	bra	@r0		
    291c:	63 25       	jz	$+712    	;abs 0x2be4
    291e:	00 00       	bra	@r0		
    2920:	20 00 41 00 	bra	&0x00041	
    2924:	00 00       	bra	@r0		
    2926:	00 00       	bra	@r0		
    2928:	78 25       	jz	$+754    	;abs 0x2c1a
    292a:	00 00       	bra	@r0		
    292c:	20 00 43 00 	bra	&0x00043	
    2930:	00 00       	bra	@r0		
    2932:	00 00       	bra	@r0		
    2934:	88 25       	jz	$+786    	;abs 0x2c46
    2936:	00 00       	bra	@r0		
    2938:	20 00 45 00 	bra	&0x00045	
    293c:	00 00       	bra	@r0		
    293e:	00 00       	bra	@r0		
    2940:	96 25       	jz	$+814    	;abs 0x2c6e
    2942:	00 00       	bra	@r0		
    2944:	20 00 47 00 	bra	&0x00047	
    2948:	00 00       	bra	@r0		
    294a:	00 00       	bra	@r0		
    294c:	a6 25       	jz	$+846    	;abs 0x2c9a
    294e:	00 00       	bra	@r0		
    2950:	20 00 49 00 	bra	&0x00049	
    2954:	00 00       	bra	@r0		
    2956:	00 00       	bra	@r0		
    2958:	b5 25       	jz	$+876    	;abs 0x2cc4
    295a:	00 00       	bra	@r0		
    295c:	20 00 4c 00 	bra	&0x0004c	
    2960:	00 00       	bra	@r0		
    2962:	00 00       	bra	@r0		
    2964:	c5 25       	jz	$+908    	;abs 0x2cf0
    2966:	00 00       	bra	@r0		
    2968:	20 00 4e 00 	bra	&0x0004e	
    296c:	00 00       	bra	@r0		
    296e:	00 00       	bra	@r0		
    2970:	d3 25       	jz	$+936    	;abs 0x2d18
    2972:	00 00       	bra	@r0		
    2974:	20 00 50 00 	bra	&0x00050	
    2978:	00 00       	bra	@r0		
    297a:	00 00       	bra	@r0		
    297c:	e3 25       	jz	$+968    	;abs 0x2d44
    297e:	00 00       	bra	@r0		
    2980:	20 00 52 00 	bra	&0x00052	
    2984:	00 00       	bra	@r0		
    2986:	00 00       	bra	@r0		
    2988:	f2 25       	jz	$+998    	;abs 0x2d6e
    298a:	00 00       	bra	@r0		
    298c:	20 00 54 00 	bra	&0x00054	
    2990:	00 00       	bra	@r0		
    2992:	00 00       	bra	@r0		
    2994:	02 26       	jz	$-1018   	;abs 0x259a
    2996:	00 00       	bra	@r0		
    2998:	20 00 56 00 	bra	&0x00056	
    299c:	00 00       	bra	@r0		
    299e:	00 00       	bra	@r0		
    29a0:	11 26       	jz	$-988    	;abs 0x25c4
    29a2:	00 00       	bra	@r0		
    29a4:	20 00 59 00 	bra	&0x00059	
    29a8:	00 00       	bra	@r0		
    29aa:	00 00       	bra	@r0		
    29ac:	21 26       	jz	$-956    	;abs 0x25f0
    29ae:	00 00       	bra	@r0		
    29b0:	20 00 5b 00 	bra	&0x0005b	
    29b4:	00 00       	bra	@r0		
    29b6:	00 00       	bra	@r0		
    29b8:	2f 26       	jz	$-928    	;abs 0x2618
    29ba:	00 00       	bra	@r0		
    29bc:	20 00 5d 00 	bra	&0x0005d	
    29c0:	00 00       	bra	@r0		
    29c2:	00 00       	bra	@r0		
    29c4:	3f 26       	jz	$-896    	;abs 0x2644
    29c6:	00 00       	bra	@r0		
    29c8:	20 00 5f 00 	bra	&0x0005f	
    29cc:	00 00       	bra	@r0		
    29ce:	00 00       	bra	@r0		
    29d0:	4d 26       	jz	$-868    	;abs 0x266c
    29d2:	00 00       	bra	@r0		
    29d4:	20 00 61 00 	bra	&0x00061	
    29d8:	00 00       	bra	@r0		
    29da:	00 00       	bra	@r0		
    29dc:	5d 26       	jz	$-836    	;abs 0x2698
    29de:	00 00       	bra	@r0		
    29e0:	20 00 63 00 	bra	&0x00063	
    29e4:	00 00       	bra	@r0		
    29e6:	00 00       	bra	@r0		
    29e8:	6c 26       	jz	$-806    	;abs 0x26c2
    29ea:	00 00       	bra	@r0		
    29ec:	20 00 47 00 	bra	&0x00047	
    29f0:	00 00       	bra	@r0		
    29f2:	00 00       	bra	@r0		
    29f4:	7b 26       	jz	$-776    	;abs 0x26ec
    29f6:	00 00       	bra	@r0		
    29f8:	20 00 45 00 	bra	&0x00045	
    29fc:	00 00       	bra	@r0		
    29fe:	00 00       	bra	@r0		
    2a00:	86 26       	jz	$-754    	;abs 0x270e
    2a02:	00 00       	bra	@r0		
    2a04:	20 00 4c 00 	bra	&0x0004c	
    2a08:	00 00       	bra	@r0		
    2a0a:	00 00       	bra	@r0		
    2a0c:	92 26       	jz	$-730    	;abs 0x2732
    2a0e:	00 00       	bra	@r0		
    2a10:	20 00 54 00 	bra	&0x00054	
    2a14:	00 00       	bra	@r0		
    2a16:	00 00       	bra	@r0		
    2a18:	9d 26       	jz	$-708    	;abs 0x2754
    2a1a:	00 00       	bra	@r0		
    2a1c:	20 00 5c 00 	bra	&0x0005c	
    2a20:	00 00       	bra	@r0		
    2a22:	00 00       	bra	@r0		
    2a24:	a9 26       	jz	$-684    	;abs 0x2778
    2a26:	00 00       	bra	@r0		
    2a28:	20 00 6e 00 	bra	&0x0006e	
    2a2c:	00 00       	bra	@r0		
    2a2e:	00 00       	bra	@r0		
    2a30:	be 26       	jz	$-642    	;abs 0x27ae
    2a32:	00 00       	bra	@r0		
    2a34:	20 00 70 00 	bra	&0x00070	
    2a38:	00 00       	bra	@r0		
    2a3a:	00 00       	bra	@r0		
    2a3c:	d4 26       	jz	$-598    	;abs 0x27e6
    2a3e:	00 00       	bra	@r0		
    2a40:	20 00 72 00 	bra	&0x00072	
    2a44:	00 00       	bra	@r0		
    2a46:	00 00       	bra	@r0		
    2a48:	ea 26       	jz	$-554    	;abs 0x281e
    2a4a:	00 00       	bra	@r0		
    2a4c:	20 00 74 00 	bra	&0x00074	
    2a50:	00 00       	bra	@r0		
    2a52:	00 00       	bra	@r0		
    2a54:	01 27       	jz	$-508    	;abs 0x2858
    2a56:	00 00       	bra	@r0		
    2a58:	20 00 76 00 	bra	&0x00076	
    2a5c:	00 00       	bra	@r0		
    2a5e:	00 00       	bra	@r0		
    2a60:	18 27       	jz	$-462    	;abs 0x2892
    2a62:	00 00       	bra	@r0		
    2a64:	20 00 93 00 	bra	&0x00093	
    2a68:	00 00       	bra	@r0		
    2a6a:	00 00       	bra	@r0		
    2a6c:	2c 27       	jz	$-422    	;abs 0x28c6
    2a6e:	00 00       	bra	@r0		
    2a70:	20 00 95 00 	bra	&0x00095	
    2a74:	00 00       	bra	@r0		
    2a76:	00 00       	bra	@r0		
    2a78:	40 27       	jz	$-382    	;abs 0x28fa
    2a7a:	00 00       	bra	@r0		
    2a7c:	20 00 97 00 	bra	&0x00097	
    2a80:	00 00       	bra	@r0		
    2a82:	00 00       	bra	@r0		
    2a84:	54 27       	jz	$-342    	;abs 0x292e
    2a86:	00 00       	bra	@r0		
    2a88:	20 00 99 00 	bra	&0x00099	
    2a8c:	00 00       	bra	@r0		
    2a8e:	00 00       	bra	@r0		
    2a90:	68 27       	jz	$-302    	;abs 0x2962
    2a92:	00 00       	bra	@r0		
    2a94:	20 00 9b 00 	bra	&0x0009b	
    2a98:	00 00       	bra	@r0		
    2a9a:	00 00       	bra	@r0		
    2a9c:	7b 27       	jz	$-264    	;abs 0x2994
    2a9e:	00 00       	bra	@r0		
    2aa0:	20 00 9d 00 	bra	&0x0009d	
    2aa4:	00 00       	bra	@r0		
    2aa6:	00 00       	bra	@r0		
    2aa8:	8e 27       	jz	$-226    	;abs 0x29c6
    2aaa:	00 00       	bra	@r0		
    2aac:	20 00 9f 00 	bra	&0x0009f	
    2ab0:	00 00       	bra	@r0		
    2ab2:	00 00       	bra	@r0		
    2ab4:	a1 27       	jz	$-188    	;abs 0x29f8
    2ab6:	00 00       	bra	@r0		
    2ab8:	20 00 a1 00 	bra	&0x000a1	
    2abc:	00 00       	bra	@r0		
    2abe:	00 00       	bra	@r0		
    2ac0:	b4 27       	jz	$-150    	;abs 0x2a2a
    2ac2:	00 00       	bra	@r0		
    2ac4:	20 00 0c 00 	bra	&0x0000c	
    2ac8:	00 00       	bra	@r0		
    2aca:	00 00       	bra	@r0		
    2acc:	cb 27       	jz	$-104    	;abs 0x2a64
    2ace:	00 00       	bra	@r0		
    2ad0:	20 00 0d 00 	bra	&0x0000d	
    2ad4:	00 00       	bra	@r0		
    2ad6:	00 00       	bra	@r0		
    2ad8:	dd 27       	jz	$-68     	;abs 0x2a94
    2ada:	00 00       	bra	@r0		
    2adc:	20 00 0e 00 	bra	&0x0000e	
    2ae0:	00 00       	bra	@r0		
    2ae2:	00 00       	bra	@r0		
    2ae4:	f1 27       	jz	$-28     	;abs 0x2ac8
    2ae6:	00 00       	bra	@r0		
    2ae8:	20 00 15 00 	bra	&0x00015	
    2aec:	00 00       	bra	@r0		
    2aee:	00 00       	bra	@r0		
    2af0:	17 28       	jnc	$+48     	;abs 0x2b20
    2af2:	00 00       	bra	@r0		
    2af4:	20 00 16 00 	bra	&0x00016	
    2af8:	00 00       	bra	@r0		
    2afa:	00 00       	bra	@r0		
    2afc:	2a 28       	jnc	$+86     	;abs 0x2b52
    2afe:	00 00       	bra	@r0		
    2b00:	20 00 17 00 	bra	&0x00017	
    2b04:	00 00       	bra	@r0		
    2b06:	00 00       	bra	@r0		
    2b08:	3b 28       	jnc	$+120    	;abs 0x2b80
    2b0a:	00 00       	bra	@r0		
    2b0c:	20 00 18 00 	bra	&0x00018	
    2b10:	00 00       	bra	@r0		
    2b12:	00 00       	bra	@r0		
    2b14:	4d 28       	jnc	$+156    	;abs 0x2bb0
    2b16:	00 00       	bra	@r0		
    2b18:	20 00 1a 00 	bra	&0x0001a	
    2b1c:	00 00       	bra	@r0		
    2b1e:	00 00       	bra	@r0		
    2b20:	5e 28       	jnc	$+190    	;abs 0x2bde
    2b22:	00 00       	bra	@r0		
    2b24:	20 00 1b 00 	bra	&0x0001b	
    2b28:	00 00       	bra	@r0		
    2b2a:	00 00       	bra	@r0		
    2b2c:	71 28       	jnc	$+228    	;abs 0x2c10
    2b2e:	00 00       	bra	@r0		
    2b30:	20 00 1c 00 	bra	&0x0001c	
    2b34:	00 00       	bra	@r0		
    2b36:	00 00       	bra	@r0		
    2b38:	84 28       	jnc	$+266    	;abs 0x2c42
    2b3a:	00 00       	bra	@r0		
    2b3c:	20 00 1f 00 	bra	&0x0001f	
    2b40:	00 00       	bra	@r0		
    2b42:	00 00       	bra	@r0		
    2b44:	98 28       	jnc	$+306    	;abs 0x2c76
    2b46:	00 00       	bra	@r0		
    2b48:	20 00 20 00 	bra	&0x00020	
    2b4c:	00 00       	bra	@r0		
    2b4e:	00 00       	bra	@r0		
    2b50:	ad 28       	jnc	$+348    	;abs 0x2cac
    2b52:	00 00       	bra	@r0		
    2b54:	20 00 21 00 	bra	&0x00021	
    2b58:	00 00       	bra	@r0		
    2b5a:	00 00       	bra	@r0		
    2b5c:	e7 28       	jnc	$+464    	;abs 0x2d2c
    2b5e:	00 00       	bra	@r0		
    2b60:	20 00 22 00 	bra	&0x00022	
    2b64:	00 00       	bra	@r0		
    2b66:	00 00       	bra	@r0		
    2b68:	0f 29       	jnc	$+544    	;abs 0x2d88
    2b6a:	00 00       	bra	@r0		
    2b6c:	20 00 25 00 	bra	&0x00025	
    2b70:	00 00       	bra	@r0		
    2b72:	00 00       	bra	@r0		
    2b74:	1f 29       	jnc	$+576    	;abs 0x2db4
    2b76:	00 00       	bra	@r0		
    2b78:	20 00 26 00 	bra	&0x00026	
    2b7c:	00 00       	bra	@r0		
    2b7e:	00 00       	bra	@r0		
    2b80:	30 29       	jnc	$+610    	;abs 0x2de2
    2b82:	00 00       	bra	@r0		
    2b84:	20 00 29 00 	bra	&0x00029	
    2b88:	00 00       	bra	@r0		
    2b8a:	00 00       	bra	@r0		
    2b8c:	56 29       	jnc	$+686    	;abs 0x2e3a
    2b8e:	00 00       	bra	@r0		
    2b90:	20 00 2a 00 	bra	&0x0002a	
    2b94:	00 00       	bra	@r0		
    2b96:	00 00       	bra	@r0		
    2b98:	66 29       	jnc	$+718    	;abs 0x2e66
    2b9a:	00 00       	bra	@r0		
    2b9c:	20 00 2b 00 	bra	&0x0002b	
	...
    2ba8:	64 00 00 00 	mova	r0,	&0x40000
    2bac:	ae 43 00 00 	mov	#2,	0(r14)	;r3 As==10, 0x0000(r14)
    2bb0:	33 00       	.word	0x0033;	????	Illegal as address instr
    2bb2:	00 00       	bra	@r0		
    2bb4:	64 00 00 00 	mova	r0,	&0x40000
    2bb8:	ae 43 00 00 	mov	#2,	0(r14)	;r3 As==10, 0x0000(r14)
    2bbc:	7a 29       	jnc	$+758    	;abs 0x2eb2
    2bbe:	00 00       	bra	@r0		
    2bc0:	64 00 00 00 	mova	r0,	&0x40000
    2bc4:	ae 43 00 00 	mov	#2,	0(r14)	;r3 As==10, 0x0000(r14)
    2bc8:	6a 00 00 00 	mova	r0,	&0xa0000
    2bcc:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x02bce
    2bd0:	00 00       	bra	@r0		
    2bd2:	00 00       	bra	@r0		
    2bd4:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    2bd8:	80 00 00 00 	bra	#0x00000	
    2bdc:	00 00       	bra	@r0		
    2bde:	00 00       	bra	@r0		
    2be0:	99 00 00 00 	cmpa	#0x00000,r9	
    2be4:	80 00 00 00 	bra	#0x00000	
    2be8:	00 00       	bra	@r0		
    2bea:	00 00       	bra	@r0		
    2bec:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    2bee:	00 00       	bra	@r0		
    2bf0:	80 00 00 00 	bra	#0x00000	
    2bf4:	00 00       	bra	@r0		
    2bf6:	00 00       	bra	@r0		
    2bf8:	ec 00       	adda	r0,	r12	
    2bfa:	00 00       	bra	@r0		
    2bfc:	80 00 00 00 	bra	#0x00000	
    2c00:	00 00       	bra	@r0		
    2c02:	00 00       	bra	@r0		
    2c04:	24 01 00 00 	mova	&0x10000,r4	
    2c08:	80 00 00 00 	bra	#0x00000	
    2c0c:	00 00       	bra	@r0		
    2c0e:	00 00       	bra	@r0		
    2c10:	66 01 00 00 	mova	r1,	&0x60000
    2c14:	80 00 00 00 	bra	#0x00000	
    2c18:	00 00       	bra	@r0		
    2c1a:	00 00       	bra	@r0		
    2c1c:	b7 01 00 00 	suba	#0x10000,r7	
    2c20:	80 00 00 00 	bra	#0x00000	
    2c24:	00 00       	bra	@r0		
    2c26:	00 00       	bra	@r0		
    2c28:	08 02       	mova	#4,	r8	;r2 As==10
    2c2a:	00 00       	bra	@r0		
    2c2c:	80 00 00 00 	bra	#0x00000	
    2c30:	00 00       	bra	@r0		
    2c32:	00 00       	bra	@r0		
    2c34:	2e 02 00 00 	mova	&0x20000,r14	
    2c38:	80 00 00 00 	bra	#0x00000	
    2c3c:	00 00       	bra	@r0		
    2c3e:	00 00       	bra	@r0		
    2c40:	6c 02 00 00 	mova	r2,	&0xc0000
    2c44:	80 00 00 00 	bra	#0x00000	
    2c48:	00 00       	bra	@r0		
    2c4a:	00 00       	bra	@r0		
    2c4c:	96 02 00 00 	cmpa	#0x20000,r6	
    2c50:	80 00 00 00 	bra	#0x00000	
    2c54:	00 00       	bra	@r0		
    2c56:	00 00       	bra	@r0		
    2c58:	bf 02 00 00 	suba	#0x20000,r15	
    2c5c:	80 00 00 00 	bra	#0x00000	
    2c60:	00 00       	bra	@r0		
    2c62:	00 00       	bra	@r0		
    2c64:	d9 02       	cmpa	r2,	r9	
    2c66:	00 00       	bra	@r0		
    2c68:	80 00 00 00 	bra	#0x00000	
    2c6c:	00 00       	bra	@r0		
    2c6e:	00 00       	bra	@r0		
    2c70:	f4 02       	suba	r2,	r4	
    2c72:	00 00       	bra	@r0		
    2c74:	80 00 00 00 	bra	#0x00000	
    2c78:	00 00       	bra	@r0		
    2c7a:	00 00       	bra	@r0		
    2c7c:	14 03       	mova	#-1,	r4	;r3 As==11
    2c7e:	00 00       	bra	@r0		
    2c80:	80 00 00 00 	bra	#0x00000	
    2c84:	00 00       	bra	@r0		
    2c86:	00 00       	bra	@r0		
    2c88:	4d 03       	rrum.a	#1,	r13	
    2c8a:	00 00       	bra	@r0		
    2c8c:	80 00 00 00 	bra	#0x00000	
    2c90:	00 00       	bra	@r0		
    2c92:	00 00       	bra	@r0		
    2c94:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    2c98:	80 00 00 00 	bra	#0x00000	
    2c9c:	00 00       	bra	@r0		
    2c9e:	00 00       	bra	@r0		
    2ca0:	8a 03 00 00 	mova	#0x30000,r10	
    2ca4:	80 00 00 00 	bra	#0x00000	
    2ca8:	00 00       	bra	@r0		
    2caa:	00 00       	bra	@r0		
    2cac:	ae 03 00 00 	adda	#0x30000,r14	
    2cb0:	80 00 00 00 	bra	#0x00000	
    2cb4:	00 00       	bra	@r0		
    2cb6:	00 00       	bra	@r0		
    2cb8:	d7 03       	tsta	r7		
    2cba:	00 00       	bra	@r0		
    2cbc:	80 00 00 00 	bra	#0x00000	
    2cc0:	00 00       	bra	@r0		
    2cc2:	00 00       	bra	@r0		
    2cc4:	7a 29       	jnc	$+758    	;abs 0x2fba
    2cc6:	00 00       	bra	@r0		
    2cc8:	82 00 00 00 	mova	#0x00000,r2	
    2ccc:	37 18       	.word	0x1837;	????	
    2cce:	04 00       	mova	@r0,	r4	
    2cd0:	ee 03       	incda	r14		
    2cd2:	00 00       	bra	@r0		
    2cd4:	c2 00       	mova	r0,	r2	
    2cd6:	00 00       	bra	@r0		
    2cd8:	00 00       	bra	@r0		
    2cda:	00 00       	bra	@r0		
    2cdc:	0f 04       	mova	@r4,	r15	
    2cde:	00 00       	bra	@r0		
    2ce0:	c2 00       	mova	r0,	r2	
    2ce2:	00 00       	bra	@r0		
    2ce4:	13 10       	rrc	#1		;r3 As==01
    2ce6:	00 00       	bra	@r0		
    2ce8:	83 04       	.word	0x0483;	????	Illegal as address instr
    2cea:	00 00       	bra	@r0		
    2cec:	c2 00       	mova	r0,	r2	
    2cee:	00 00       	bra	@r0		
    2cf0:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
    2cf4:	a8 04 00 00 	adda	#0x40000,r8	
    2cf8:	c2 00       	mova	r0,	r2	
    2cfa:	00 00       	bra	@r0		
    2cfc:	00 00       	bra	@r0		
    2cfe:	00 00       	bra	@r0		
    2d00:	cd 04       	mova	r4,	r13	
    2d02:	00 00       	bra	@r0		
    2d04:	c2 00       	mova	r0,	r2	
    2d06:	00 00       	bra	@r0		
    2d08:	91 34       	jge	$+292    	;abs 0x2e2c
    2d0a:	00 00       	bra	@r0		
    2d0c:	92 08 00 00 	cmpa	#0x80000,r2	
    2d10:	c2 00       	mova	r0,	r2	
    2d12:	00 00       	bra	@r0		
    2d14:	76 0d 00 00 	mova	r13,	0(r6)	;0x0000(r6)
    2d18:	f8 08       	suba	r8,	r8	
    2d1a:	00 00       	bra	@r0		
    2d1c:	c2 00       	mova	r0,	r2	
    2d1e:	00 00       	bra	@r0		
    2d20:	3c 1a       	.word	0x1a3c;	????	
    2d22:	00 00       	bra	@r0		
    2d24:	0f 04       	mova	@r4,	r15	
    2d26:	00 00       	bra	@r0		
    2d28:	c2 00       	mova	r0,	r2	
    2d2a:	00 00       	bra	@r0		
    2d2c:	00 00       	bra	@r0		
    2d2e:	00 00       	bra	@r0		
    2d30:	cf 09       	mova	r9,	r15	
    2d32:	00 00       	bra	@r0		
    2d34:	c2 00       	mova	r0,	r2	
    2d36:	00 00       	bra	@r0		
    2d38:	00 00       	bra	@r0		
    2d3a:	00 00       	bra	@r0		
    2d3c:	ab 09 00 00 	adda	#0x90000,r11	
    2d40:	c2 00       	mova	r0,	r2	
    2d42:	00 00       	bra	@r0		
    2d44:	00 00       	bra	@r0		
    2d46:	00 00       	bra	@r0		
    2d48:	f6 09       	suba	r9,	r6	
    2d4a:	00 00       	bra	@r0		
    2d4c:	c2 00       	mova	r0,	r2	
    2d4e:	00 00       	bra	@r0		
    2d50:	00 00       	bra	@r0		
    2d52:	00 00       	bra	@r0		
    2d54:	1c 0a       	mova	@r10+,	r12	
    2d56:	00 00       	bra	@r0		
    2d58:	c2 00       	mova	r0,	r2	
    2d5a:	00 00       	bra	@r0		
    2d5c:	00 00       	bra	@r0		
    2d5e:	00 00       	bra	@r0		
    2d60:	43 0a       	rlam.a	#3,	#0	;r3 As==00
    2d62:	00 00       	bra	@r0		
    2d64:	c2 00       	mova	r0,	r2	
    2d66:	00 00       	bra	@r0		
    2d68:	c1 68 00 00 	addc.b	r8,	0(r1)	;0x0000(r1)
    2d6c:	41 0c       	rrcm.a	#4,	r1	
    2d6e:	00 00       	bra	@r0		
    2d70:	c2 00       	mova	r0,	r2	
    2d72:	00 00       	bra	@r0		
    2d74:	00 00       	bra	@r0		
    2d76:	00 00       	bra	@r0		
    2d78:	68 0c 00 00 	mova	r12,	&0x80000
    2d7c:	c2 00       	mova	r0,	r2	
    2d7e:	00 00       	bra	@r0		
    2d80:	3e 8a       	sub	@r10+,	r14	
    2d82:	00 00       	bra	@r0		
    2d84:	eb 0e       	adda	r14,	r11	
    2d86:	00 00       	bra	@r0		
    2d88:	c2 00       	mova	r0,	r2	
    2d8a:	00 00       	bra	@r0		
    2d8c:	90 a7 00 00 	dadd	0(r7),	0x11de	;0x0000(r7), PC rel. 0x03f70
    2d90:	de 11 
    2d92:	00 00       	bra	@r0		
    2d94:	c2 00       	mova	r0,	r2	
    2d96:	00 00       	bra	@r0		
    2d98:	00 00       	bra	@r0		
    2d9a:	00 00       	bra	@r0		
    2d9c:	0c 12       	push	r12		
    2d9e:	00 00       	bra	@r0		
    2da0:	c2 00       	mova	r0,	r2	
    2da2:	00 00       	bra	@r0		
    2da4:	00 00       	bra	@r0		
    2da6:	00 00       	bra	@r0		
    2da8:	34 12       	push	@r4+		
    2daa:	00 00       	bra	@r0		
    2dac:	c2 00       	mova	r0,	r2	
    2dae:	00 00       	bra	@r0		
    2db0:	00 00       	bra	@r0		
    2db2:	00 00       	bra	@r0		
    2db4:	5c 12 00 00 	push.b	0(r12)		;0x0000(r12)
    2db8:	c2 00       	mova	r0,	r2	
    2dba:	00 00       	bra	@r0		
    2dbc:	0c af       	dadd	r15,	r12	
    2dbe:	00 00       	bra	@r0		
    2dc0:	7b 15       	pushm	#8,	r11	
    2dc2:	00 00       	bra	@r0		
    2dc4:	c2 00       	mova	r0,	r2	
    2dc6:	00 00       	bra	@r0		
    2dc8:	00 00       	bra	@r0		
    2dca:	00 00       	bra	@r0		
    2dcc:	a3 15       	pushm	#11,	#0	;r3 As==00
    2dce:	00 00       	bra	@r0		
    2dd0:	c2 00       	mova	r0,	r2	
    2dd2:	00 00       	bra	@r0		
    2dd4:	00 00       	bra	@r0		
    2dd6:	00 00       	bra	@r0		
    2dd8:	c9 15       	pushm	#13,	r9	
    2dda:	00 00       	bra	@r0		
    2ddc:	c2 00       	mova	r0,	r2	
    2dde:	00 00       	bra	@r0		
    2de0:	00 00       	bra	@r0		
    2de2:	00 00       	bra	@r0		
    2de4:	03 16       	popm.a	#1,	#0	;r3 As==00
    2de6:	00 00       	bra	@r0		
    2de8:	c2 00       	mova	r0,	r2	
    2dea:	00 00       	bra	@r0		
    2dec:	00 00       	bra	@r0		
    2dee:	00 00       	bra	@r0		
    2df0:	f2 15       	pushm	#16,	r2	
    2df2:	00 00       	bra	@r0		
    2df4:	c2 00       	mova	r0,	r2	
    2df6:	00 00       	bra	@r0		
    2df8:	00 00       	bra	@r0		
    2dfa:	00 00       	bra	@r0		
    2dfc:	84 29       	jnc	$+778    	;abs 0x3106
    2dfe:	00 00       	bra	@r0		
    2e00:	24 00 ae 00 	mova	&0x000ae,r4	
    2e04:	2e 46       	mov	@r6,	r14	
    2e06:	00 00       	bra	@r0		
    2e08:	93 29       	jnc	$+808    	;abs 0x3130
    2e0a:	00 00       	bra	@r0		
    2e0c:	40 00       	rrcm.a	#1,	r0	
    2e0e:	ad 00 0f 00 	adda	#0x0000f,r13	
    2e12:	00 00       	bra	@r0		
    2e14:	00 00       	bra	@r0		
    2e16:	00 00       	bra	@r0		
    2e18:	44 00       	rrcm.a	#1,	r4	
    2e1a:	ae 00 00 00 	adda	#0x00000,r14	
    2e1e:	00 00       	bra	@r0		
    2e20:	00 00       	bra	@r0		
    2e22:	00 00       	bra	@r0		
    2e24:	44 00       	rrcm.a	#1,	r4	
    2e26:	af 00 00 00 	adda	#0x00000,r15	
    2e2a:	00 00       	bra	@r0		
    2e2c:	00 00       	bra	@r0		
    2e2e:	00 00       	bra	@r0		
    2e30:	44 00       	rrcm.a	#1,	r4	
    2e32:	b1 00 04 00 	suba	#0x00004,r1	
    2e36:	00 00       	bra	@r0		
    2e38:	00 00       	bra	@r0		
    2e3a:	00 00       	bra	@r0		
    2e3c:	24 00 00 00 	mova	&0x00000,r4	
    2e40:	08 00       	mova	@r0,	r8	
    2e42:	00 00       	bra	@r0		
    2e44:	9c 29       	jnc	$+826    	;abs 0x317e
    2e46:	00 00       	bra	@r0		
    2e48:	24 00 b4 00 	mova	&0x000b4,r4	
    2e4c:	36 46       	mov	@r6+,	r6	
    2e4e:	00 00       	bra	@r0		
    2e50:	b1 29       	jnc	$+868    	;abs 0x31b4
    2e52:	00 00       	bra	@r0		
    2e54:	40 00       	rrcm.a	#1,	r0	
    2e56:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    2e58:	0d 00       	mova	@r0,	r13	
    2e5a:	00 00       	bra	@r0		
    2e5c:	ca 29       	jnc	$+918    	;abs 0x31f2
    2e5e:	00 00       	bra	@r0		
    2e60:	40 00       	rrcm.a	#1,	r0	
    2e62:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    2e64:	0f 00       	mova	@r0,	r15	
    2e66:	00 00       	bra	@r0		
    2e68:	00 00       	bra	@r0		
    2e6a:	00 00       	bra	@r0		
    2e6c:	44 00       	rrcm.a	#1,	r4	
    2e6e:	b4 00 00 00 	suba	#0x00000,r4	
    2e72:	00 00       	bra	@r0		
    2e74:	00 00       	bra	@r0		
    2e76:	00 00       	bra	@r0		
    2e78:	44 00       	rrcm.a	#1,	r4	
    2e7a:	b5 00 02 00 	suba	#0x00002,r5	
    2e7e:	00 00       	bra	@r0		
    2e80:	00 00       	bra	@r0		
    2e82:	00 00       	bra	@r0		
    2e84:	44 00       	rrcm.a	#1,	r4	
    2e86:	b6 00 06 00 	suba	#0x00006,r6	
    2e8a:	00 00       	bra	@r0		
    2e8c:	00 00       	bra	@r0		
    2e8e:	00 00       	bra	@r0		
    2e90:	44 00       	rrcm.a	#1,	r4	
    2e92:	b7 00 0a 00 	suba	#0x0000a,r7	
    2e96:	00 00       	bra	@r0		
    2e98:	00 00       	bra	@r0		
    2e9a:	00 00       	bra	@r0		
    2e9c:	24 00 00 00 	mova	&0x00000,r4	
    2ea0:	0c 00       	mova	@r0,	r12	
    2ea2:	00 00       	bra	@r0		
    2ea4:	e3 29       	jnc	$+968    	;abs 0x326c
    2ea6:	00 00       	bra	@r0		
    2ea8:	24 00 c0 00 	mova	&0x000c0,r4	
    2eac:	42 46       	mov.b	r6,	r2	
    2eae:	00 00       	bra	@r0		
    2eb0:	f6 29       	jnc	$+1006   	;abs 0x329e
    2eb2:	00 00       	bra	@r0		
    2eb4:	40 00       	rrcm.a	#1,	r0	
    2eb6:	bf 00 0b 00 	suba	#0x0000b,r15	
    2eba:	00 00       	bra	@r0		
    2ebc:	03 2a       	jnc	$-1016   	;abs 0x2ac4
    2ebe:	00 00       	bra	@r0		
    2ec0:	40 00       	rrcm.a	#1,	r0	
    2ec2:	bf 00 0e 00 	suba	#0x0000e,r15	
    2ec6:	00 00       	bra	@r0		
    2ec8:	00 00       	bra	@r0		
    2eca:	00 00       	bra	@r0		
    2ecc:	44 00       	rrcm.a	#1,	r4	
    2ece:	c0 00       	bra	r0		
	...
    2ed8:	44 00       	rrcm.a	#1,	r4	
    2eda:	c1 00       	mova	r0,	r1	
    2edc:	04 00       	mova	@r0,	r4	
    2ede:	00 00       	bra	@r0		
    2ee0:	00 00       	bra	@r0		
    2ee2:	00 00       	bra	@r0		
    2ee4:	44 00       	rrcm.a	#1,	r4	
    2ee6:	c4 00       	mova	r0,	r4	
    2ee8:	08 00       	mova	@r0,	r8	
    2eea:	00 00       	bra	@r0		
    2eec:	00 00       	bra	@r0		
    2eee:	00 00       	bra	@r0		
    2ef0:	44 00       	rrcm.a	#1,	r4	
    2ef2:	c5 00       	mova	r0,	r5	
    2ef4:	0c 00       	mova	@r0,	r12	
    2ef6:	00 00       	bra	@r0		
    2ef8:	00 00       	bra	@r0		
    2efa:	00 00       	bra	@r0		
    2efc:	44 00       	rrcm.a	#1,	r4	
    2efe:	cb 00       	mova	r0,	r11	
    2f00:	10 00       	bra	#0x00000	
    2f02:	00 00       	bra	@r0		
    2f04:	00 00       	bra	@r0		
    2f06:	00 00       	bra	@r0		
    2f08:	44 00       	rrcm.a	#1,	r4	
    2f0a:	cc 00       	mova	r0,	r12	
    2f0c:	14 00       	mova	#0x00000,r4	
    2f0e:	00 00       	bra	@r0		
    2f10:	00 00       	bra	@r0		
    2f12:	00 00       	bra	@r0		
    2f14:	44 00       	rrcm.a	#1,	r4	
    2f16:	cd 00       	mova	r0,	r13	
    2f18:	18 00       	mova	#0x00000,r8	
    2f1a:	00 00       	bra	@r0		
    2f1c:	00 00       	bra	@r0		
    2f1e:	00 00       	bra	@r0		
    2f20:	44 00       	rrcm.a	#1,	r4	
    2f22:	cf 00       	mova	r0,	r15	
    2f24:	1c 00       	mova	#0x00000,r12	
    2f26:	00 00       	bra	@r0		
    2f28:	00 00       	bra	@r0		
    2f2a:	00 00       	bra	@r0		
    2f2c:	44 00       	rrcm.a	#1,	r4	
    2f2e:	d0 00       	cmpa	r0,	r0	
    2f30:	1e 00       	mova	#0x00000,r14	
    2f32:	00 00       	bra	@r0		
    2f34:	00 00       	bra	@r0		
    2f36:	00 00       	bra	@r0		
    2f38:	44 00       	rrcm.a	#1,	r4	
    2f3a:	d1 00       	cmpa	r0,	r1	
    2f3c:	24 00 00 00 	mova	&0x00000,r4	
    2f40:	00 00       	bra	@r0		
    2f42:	00 00       	bra	@r0		
    2f44:	44 00       	rrcm.a	#1,	r4	
    2f46:	d6 00       	cmpa	r0,	r6	
    2f48:	28 00 00 00 	mova	&0x00000,r8	
    2f4c:	00 00       	bra	@r0		
    2f4e:	00 00       	bra	@r0		
    2f50:	44 00       	rrcm.a	#1,	r4	
    2f52:	d7 00       	cmpa	r0,	r7	
    2f54:	2c 00 00 00 	mova	&0x00000,r12	
    2f58:	00 00       	bra	@r0		
    2f5a:	00 00       	bra	@r0		
    2f5c:	44 00       	rrcm.a	#1,	r4	
    2f5e:	d8 00       	cmpa	r0,	r8	
    2f60:	30 00 00 00 	bra	0x0000		;PC rel. 0x02f62
    2f64:	00 00       	bra	@r0		
    2f66:	00 00       	bra	@r0		
    2f68:	44 00       	rrcm.a	#1,	r4	
    2f6a:	cf 00       	mova	r0,	r15	
    2f6c:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x02f6e
    2f70:	00 00       	bra	@r0		
    2f72:	00 00       	bra	@r0		
    2f74:	44 00       	rrcm.a	#1,	r4	
    2f76:	db 00       	cmpa	r0,	r11	
    2f78:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x02f7a
    2f7c:	00 00       	bra	@r0		
    2f7e:	00 00       	bra	@r0		
    2f80:	44 00       	rrcm.a	#1,	r4	
    2f82:	de 00       	cmpa	r0,	r14	
    2f84:	44 00       	rrcm.a	#1,	r4	
    2f86:	00 00       	bra	@r0		
    2f88:	00 00       	bra	@r0		
    2f8a:	00 00       	bra	@r0		
    2f8c:	44 00       	rrcm.a	#1,	r4	
    2f8e:	df 00       	cmpa	r0,	r15	
    2f90:	48 00       	rrcm.a	#1,	r8	
    2f92:	00 00       	bra	@r0		
    2f94:	00 00       	bra	@r0		
    2f96:	00 00       	bra	@r0		
    2f98:	44 00       	rrcm.a	#1,	r4	
    2f9a:	d4 00       	cmpa	r0,	r4	
    2f9c:	4e 00       	rrcm.a	#1,	r14	
    2f9e:	00 00       	bra	@r0		
    2fa0:	00 00       	bra	@r0		
    2fa2:	00 00       	bra	@r0		
    2fa4:	44 00       	rrcm.a	#1,	r4	
    2fa6:	c8 00       	mova	r0,	r8	
    2fa8:	54 00       	rrcm	#1,	r4	
    2faa:	00 00       	bra	@r0		
    2fac:	00 00       	bra	@r0		
    2fae:	00 00       	bra	@r0		
    2fb0:	44 00       	rrcm.a	#1,	r4	
    2fb2:	e0 00       	adda	r0,	r0	
    2fb4:	5a 00       	rrcm	#1,	r10	
    2fb6:	00 00       	bra	@r0		
    2fb8:	0f 2a       	jnc	$-992    	;abs 0x2bd8
    2fba:	00 00       	bra	@r0		
    2fbc:	40 00       	rrcm.a	#1,	r0	
    2fbe:	c1 00       	mova	r0,	r1	
    2fc0:	0c 00       	mova	@r0,	r12	
    2fc2:	00 00       	bra	@r0		
    2fc4:	1c 2a       	jnc	$-966    	;abs 0x2bfe
    2fc6:	00 00       	bra	@r0		
    2fc8:	40 00       	rrcm.a	#1,	r0	
    2fca:	c2 00       	mova	r0,	r2	
    2fcc:	0d 00       	mova	@r0,	r13	
    2fce:	00 00       	bra	@r0		
    2fd0:	00 00       	bra	@r0		
    2fd2:	00 00       	bra	@r0		
    2fd4:	c0 00       	bra	r0		
    2fd6:	00 00       	bra	@r0		
    2fd8:	04 00       	mova	@r0,	r4	
    2fda:	00 00       	bra	@r0		
    2fdc:	00 00       	bra	@r0		
    2fde:	00 00       	bra	@r0		
    2fe0:	e0 00       	adda	r0,	r0	
    2fe2:	00 00       	bra	@r0		
    2fe4:	5a 00       	rrcm	#1,	r10	
    2fe6:	00 00       	bra	@r0		
    2fe8:	00 00       	bra	@r0		
    2fea:	00 00       	bra	@r0		
    2fec:	24 00 00 00 	mova	&0x00000,r4	
    2ff0:	5e 00       	rrcm	#1,	r14	
    2ff2:	00 00       	bra	@r0		
    2ff4:	26 2a       	jnc	$-946    	;abs 0x2c42
    2ff6:	00 00       	bra	@r0		
    2ff8:	24 00 e3 00 	mova	&0x000e3,r4	
    2ffc:	a0 46 00 00 	mov	@r6,	0x0000	;PC rel. 0x03000
    3000:	37 2a       	jnc	$-912    	;abs 0x2c70
    3002:	00 00       	bra	@r0		
    3004:	40 00       	rrcm.a	#1,	r0	
    3006:	e2 00       	adda	r0,	r2	
    3008:	0b 00       	mova	@r0,	r11	
    300a:	00 00       	bra	@r0		
    300c:	00 00       	bra	@r0		
    300e:	00 00       	bra	@r0		
    3010:	44 00       	rrcm.a	#1,	r4	
    3012:	e3 00       	.word	0x00e3;	????	Illegal as address instr
	...
    301c:	44 00       	rrcm.a	#1,	r4	
    301e:	e4 00       	adda	r0,	r4	
    3020:	04 00       	mova	@r0,	r4	
    3022:	00 00       	bra	@r0		
    3024:	00 00       	bra	@r0		
    3026:	00 00       	bra	@r0		
    3028:	44 00       	rrcm.a	#1,	r4	
    302a:	e6 00       	adda	r0,	r6	
    302c:	0a 00       	mova	@r0,	r10	
    302e:	00 00       	bra	@r0		
    3030:	00 00       	bra	@r0		
    3032:	00 00       	bra	@r0		
    3034:	44 00       	rrcm.a	#1,	r4	
    3036:	e7 00       	adda	r0,	r7	
    3038:	0e 00       	mova	@r0,	r14	
    303a:	00 00       	bra	@r0		
    303c:	00 00       	bra	@r0		
    303e:	00 00       	bra	@r0		
    3040:	44 00       	rrcm.a	#1,	r4	
    3042:	e8 00       	adda	r0,	r8	
    3044:	12 00       	mova	#0x00000,r2	
    3046:	00 00       	bra	@r0		
    3048:	00 00       	bra	@r0		
    304a:	00 00       	bra	@r0		
    304c:	44 00       	rrcm.a	#1,	r4	
    304e:	ea 00       	adda	r0,	r10	
    3050:	16 00       	mova	#0x00000,r6	
    3052:	00 00       	bra	@r0		
    3054:	00 00       	bra	@r0		
    3056:	00 00       	bra	@r0		
    3058:	44 00       	rrcm.a	#1,	r4	
    305a:	eb 00       	adda	r0,	r11	
    305c:	1a 00       	mova	#0x00000,r10	
    305e:	00 00       	bra	@r0		
    3060:	00 00       	bra	@r0		
    3062:	00 00       	bra	@r0		
    3064:	44 00       	rrcm.a	#1,	r4	
    3066:	ec 00       	adda	r0,	r12	
    3068:	22 00 00 00 	mova	&0x00000,r2	
    306c:	00 00       	bra	@r0		
    306e:	00 00       	bra	@r0		
    3070:	44 00       	rrcm.a	#1,	r4	
    3072:	ed 00       	adda	r0,	r13	
    3074:	26 00 00 00 	mova	&0x00000,r6	
    3078:	00 00       	bra	@r0		
    307a:	00 00       	bra	@r0		
    307c:	44 00       	rrcm.a	#1,	r4	
    307e:	f0 00       	suba	r0,	r0	
    3080:	2e 00 00 00 	mova	&0x00000,r14	
    3084:	00 00       	bra	@r0		
    3086:	00 00       	bra	@r0		
    3088:	44 00       	rrcm.a	#1,	r4	
    308a:	f2 00       	suba	r0,	r2	
    308c:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x0308e
    3090:	00 00       	bra	@r0		
    3092:	00 00       	bra	@r0		
    3094:	44 00       	rrcm.a	#1,	r4	
    3096:	f4 00       	suba	r0,	r4	
    3098:	44 00       	rrcm.a	#1,	r4	
    309a:	00 00       	bra	@r0		
    309c:	00 00       	bra	@r0		
    309e:	00 00       	bra	@r0		
    30a0:	44 00       	rrcm.a	#1,	r4	
    30a2:	f5 00       	suba	r0,	r5	
    30a4:	4e 00       	rrcm.a	#1,	r14	
    30a6:	00 00       	bra	@r0		
    30a8:	00 00       	bra	@r0		
    30aa:	00 00       	bra	@r0		
    30ac:	44 00       	rrcm.a	#1,	r4	
    30ae:	f6 00       	suba	r0,	r6	
    30b0:	58 00       	rrcm	#1,	r8	
    30b2:	00 00       	bra	@r0		
    30b4:	00 00       	bra	@r0		
    30b6:	00 00       	bra	@r0		
    30b8:	44 00       	rrcm.a	#1,	r4	
    30ba:	f9 00       	suba	r0,	r9	
    30bc:	60 00 00 00 	mova	r0,	&0x00000
    30c0:	00 00       	bra	@r0		
    30c2:	00 00       	bra	@r0		
    30c4:	44 00       	rrcm.a	#1,	r4	
    30c6:	fb 00       	suba	r0,	r11	
    30c8:	6a 00 00 00 	mova	r0,	&0xa0000
    30cc:	00 00       	bra	@r0		
    30ce:	00 00       	bra	@r0		
    30d0:	44 00       	rrcm.a	#1,	r4	
    30d2:	fd 00       	suba	r0,	r13	
    30d4:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
    30d8:	00 00       	bra	@r0		
    30da:	00 00       	bra	@r0		
    30dc:	44 00       	rrcm.a	#1,	r4	
    30de:	fe 00       	suba	r0,	r14	
    30e0:	7c 00 00 00 	mova	r0,	0(r12)	;0x0000(r12)
    30e4:	00 00       	bra	@r0		
    30e6:	00 00       	bra	@r0		
    30e8:	44 00       	rrcm.a	#1,	r4	
    30ea:	ff 00       	suba	r0,	r15	
    30ec:	84 00 00 00 	mova	#0x00000,r4	
    30f0:	00 00       	bra	@r0		
    30f2:	00 00       	bra	@r0		
    30f4:	44 00       	rrcm.a	#1,	r4	
    30f6:	00 01       	bra	@r1		
    30f8:	8e 00 00 00 	mova	#0x00000,r14	
    30fc:	00 00       	bra	@r0		
    30fe:	00 00       	bra	@r0		
    3100:	44 00       	rrcm.a	#1,	r4	
    3102:	01 01       	mova	@r1,	r1	
    3104:	98 00 00 00 	cmpa	#0x00000,r8	
    3108:	00 00       	bra	@r0		
    310a:	00 00       	bra	@r0		
    310c:	44 00       	rrcm.a	#1,	r4	
    310e:	02 01       	mova	@r1,	r2	
    3110:	a2 00 00 00 	adda	#0x00000,r2	
    3114:	00 00       	bra	@r0		
    3116:	00 00       	bra	@r0		
    3118:	44 00       	rrcm.a	#1,	r4	
    311a:	03 01       	.word	0x0103;	????	Illegal as address instr
    311c:	ac 00 00 00 	adda	#0x00000,r12	
    3120:	00 00       	bra	@r0		
    3122:	00 00       	bra	@r0		
    3124:	44 00       	rrcm.a	#1,	r4	
    3126:	04 01       	mova	@r1,	r4	
    3128:	b6 00 00 00 	suba	#0x00000,r6	
    312c:	00 00       	bra	@r0		
    312e:	00 00       	bra	@r0		
    3130:	44 00       	rrcm.a	#1,	r4	
    3132:	06 01       	mova	@r1,	r6	
    3134:	c0 00       	bra	r0		
// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    3136:	00 00       	bra	@r0		
    3138:	00 00       	bra	@r0		
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    313a:	00 00       	bra	@r0		
    313c:	44 00       	rrcm.a	#1,	r4	
    313e:	07 01       	mova	@r1,	r7	

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    3140:	c8 00       	mova	r0,	r8	
    3142:	00 00       	bra	@r0		

    lcd_clear(BLACK);
    3144:	00 00       	bra	@r0		
    3146:	00 00       	bra	@r0		
    3148:	44 00       	rrcm.a	#1,	r4	
    
    MenuOption = RADIO_RAW;
    314a:	08 01       	mova	@r1,	r8	
    314c:	d0 00       	cmpa	r0,	r0	
    MenuStep = DISPLAY;
    314e:	00 00       	bra	@r0		
    3150:	00 00       	bra	@r0		
    MenuVisible = TRUE;     // inicializa mostrando o menu
    3152:	00 00       	bra	@r0		
    3154:	44 00       	rrcm.a	#1,	r4	
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(ControlCounter >= CONTROL_PERIOD){
    3156:	09 01       	mova	@r1,	r9	
    3158:	da 00       	cmpa	r0,	r10	
    315a:	00 00       	bra	@r0		
    315c:	00 00       	bra	@r0		
            analog_refresh_all();
    315e:	00 00       	bra	@r0		
    3160:	44 00       	rrcm.a	#1,	r4	
            if(MotorArmed == TRUE){
    3162:	0a 01       	mova	@r1,	r10	
    3164:	e4 00       	adda	r0,	r4	
    3166:	00 00       	bra	@r0		
                main_loop();
            }
            ControlCounter = 0;
    3168:	00 00       	bra	@r0		
    316a:	00 00       	bra	@r0		
        }
        
        if(SetupDone == TRUE){
    316c:	44 00       	rrcm.a	#1,	r4	
    316e:	0b 01       	mova	@r1,	r11	
    3170:	ee 00       	adda	r0,	r14	
                process_rc();
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
    3172:	00 00       	bra	@r0		
    3174:	00 00       	bra	@r0		
    3176:	00 00       	bra	@r0		
                process_menu();
                MenuCounter = 0;   
            }
        }
        else{
            if(ChannelInput[CH6_CH] > 3500){
    3178:	44 00       	rrcm.a	#1,	r4	
    317a:	0c 01       	mova	@r1,	r12	
    317c:	f8 00       	suba	r0,	r8	
    317e:	00 00       	bra	@r0		
                MenuVisible = TRUE;
    3180:	00 00       	bra	@r0		
    3182:	00 00       	bra	@r0		
                MotorArmed = FALSE;
    3184:	44 00       	rrcm.a	#1,	r4	
    3186:	0d 01       	mova	@r1,	r13	
    3188:	02 01       	mova	@r1,	r2	
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
            if(MenuCounter >= MENU_PERIOD){
    318a:	00 00       	bra	@r0		
    318c:	00 00       	bra	@r0		
    318e:	00 00       	bra	@r0		
    3190:	44 00       	rrcm.a	#1,	r4	
                process_menu();
    3192:	0f 01       	mova	@r1,	r15	
    3194:	0c 01       	mova	@r1,	r12	
                MenuCounter = 0;   
    3196:	00 00       	bra	@r0		
    3198:	00 00       	bra	@r0		
    319a:	00 00       	bra	@r0		
            }
            ControlCounter = 0;
        }
        
        if(SetupDone == TRUE){
            if(RCCounter >= RC_PERIOD){
    319c:	44 00       	rrcm.a	#1,	r4	
    319e:	10 01       	reta			
    31a0:	14 01       	mova	@r1+,	r4	
    31a2:	00 00       	bra	@r0		
                process_rc();
    31a4:	00 00       	bra	@r0		
    31a6:	00 00       	bra	@r0		
                RCCounter = 0;
    31a8:	44 00       	rrcm.a	#1,	r4	
    31aa:	11 01       	mova	@r1+,	r1	
    31ac:	1e 01       	mova	@r1+,	r14	
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(ControlCounter >= CONTROL_PERIOD){
            analog_refresh_all();
            if(MotorArmed == TRUE){
                main_loop();
    31ae:	00 00       	bra	@r0		
    31b0:	00 00       	bra	@r0		
    31b2:	00 00       	bra	@r0		
                MenuVisible = TRUE;
                MotorArmed = FALSE;
            }
        }
    }
}
    31b4:	44 00       	rrcm.a	#1,	r4	
    31b6:	12 01       	mova	@r1+,	r2	
    31b8:	28 01 00 00 	mova	&0x10000,r8	
    31bc:	00 00       	bra	@r0		
    31be:	00 00       	bra	@r0		
    31c0:	44 00       	rrcm.a	#1,	r4	
    31c2:	15 01       	mova	@r1+,	r5	
    31c4:	32 01 00 00 	mova	0(r1),	r2	;0x0000(r1)
    31c8:	00 00       	bra	@r0		
    31ca:	00 00       	bra	@r0		
    31cc:	44 00       	rrcm.a	#1,	r4	
    31ce:	17 01       	mova	@r1+,	r7	
    31d0:	3c 01 00 00 	mova	0(r1),	r12	;0x0000(r1)
    31d4:	00 00       	bra	@r0		
    31d6:	00 00       	bra	@r0		
    31d8:	44 00       	rrcm.a	#1,	r4	
    31da:	1a 01       	mova	@r1+,	r10	
    31dc:	50 01       	rram	#1,	r0	
    31de:	00 00       	bra	@r0		
    31e0:	00 00       	bra	@r0		
    31e2:	00 00       	bra	@r0		
    31e4:	24 00 00 00 	mova	&0x00000,r4	
    31e8:	54 01       	rram	#1,	r4	
    31ea:	00 00       	bra	@r0		
    31ec:	43 2a       	jnc	$-888    	;abs 0x2e74
    31ee:	00 00       	bra	@r0		
    31f0:	24 00 1d 01 	mova	&0x0011d,r4	
    31f4:	f4 47 00 00 	mov.b	@r7+,	0(r4)	;0x0000(r4)
    31f8:	37 2a       	jnc	$-912    	;abs 0x2e68
    31fa:	00 00       	bra	@r0		
    31fc:	40 00       	rrcm.a	#1,	r0	
    31fe:	1c 01       	mova	@r1+,	r12	
    3200:	0f 00       	mova	@r0,	r15	
    3202:	00 00       	bra	@r0		
    3204:	00 00       	bra	@r0		
    3206:	00 00       	bra	@r0		
    3208:	44 00       	rrcm.a	#1,	r4	
    320a:	1d 01       	mova	@r1+,	r13	
	...
    3214:	44 00       	rrcm.a	#1,	r4	
    3216:	1e 01       	mova	@r1+,	r14	
	...
    3220:	44 00       	rrcm.a	#1,	r4	
    3222:	1f 01       	mova	@r1+,	r15	
    3224:	14 00       	mova	#0x00000,r4	
    3226:	00 00       	bra	@r0		
    3228:	00 00       	bra	@r0		
    322a:	00 00       	bra	@r0		
    322c:	24 00 00 00 	mova	&0x00000,r4	
    3230:	16 00       	mova	#0x00000,r6	
    3232:	00 00       	bra	@r0		
    3234:	55 2a       	jnc	$-852    	;abs 0x2ee0
    3236:	00 00       	bra	@r0		
    3238:	24 00 22 01 	mova	&0x00122,r4	
    323c:	0a 48       	mov	r8,	r10	
    323e:	00 00       	bra	@r0		
    3240:	6c 2a       	jnc	$-806    	;abs 0x2f1a
    3242:	00 00       	bra	@r0		
    3244:	40 00       	rrcm.a	#1,	r0	
    3246:	21 01 0f 00 	mova	&0x1000f,r1	
    324a:	00 00       	bra	@r0		
    324c:	79 2a       	jnc	$-780    	;abs 0x2f40
    324e:	00 00       	bra	@r0		
    3250:	40 00       	rrcm.a	#1,	r0	
    3252:	21 01 0b 00 	mova	&0x1000b,r1	
    3256:	00 00       	bra	@r0		
    3258:	00 00       	bra	@r0		
    325a:	00 00       	bra	@r0		
    325c:	44 00       	rrcm.a	#1,	r4	
    325e:	22 01 00 00 	mova	&0x10000,r2	
    3262:	00 00       	bra	@r0		
    3264:	00 00       	bra	@r0		
    3266:	00 00       	bra	@r0		
    3268:	44 00       	rrcm.a	#1,	r4	
    326a:	23 01       	.word	0x0123;	????	Illegal as address instr
    326c:	04 00       	mova	@r0,	r4	
    326e:	00 00       	bra	@r0		
    3270:	00 00       	bra	@r0		
    3272:	00 00       	bra	@r0		
    3274:	44 00       	rrcm.a	#1,	r4	
    3276:	24 01 0c 00 	mova	&0x1000c,r4	
    327a:	00 00       	bra	@r0		
    327c:	00 00       	bra	@r0		
    327e:	00 00       	bra	@r0		
    3280:	44 00       	rrcm.a	#1,	r4	

void process_menu(void){
    switch(MenuStep){
    3282:	25 01 14 00 	mova	&0x10014,r5	
    3286:	00 00       	bra	@r0		
    3288:	00 00       	bra	@r0		
    328a:	00 00       	bra	@r0		
    328c:	24 00 00 00 	mova	&0x00000,r4	
    3290:	18 00       	mova	#0x00000,r8	
    3292:	00 00       	bra	@r0		
    3294:	85 2a       	jnc	$-756    	;abs 0x2fa0
    3296:	00 00       	bra	@r0		
    3298:	24 00 28 01 	mova	&0x00128,r4	
    329c:	22 48       	mov	@r8,	r2	
    329e:	00 00       	bra	@r0		
        case DISPLAY:
            lcd_goto(0,14);
    32a0:	6c 2a       	jnc	$-806    	;abs 0x2f7a
    32a2:	00 00       	bra	@r0		
    32a4:	40 00       	rrcm.a	#1,	r0	
    32a6:	27 01 0f 00 	mova	&0x1000f,r7	
            printf("DISPLAY             ");
    32aa:	00 00       	bra	@r0		
    32ac:	9c 2a       	jnc	$-710    	;abs 0x2fe6
    32ae:	00 00       	bra	@r0		
    32b0:	40 00       	rrcm.a	#1,	r0	
            
            lcd_clear(BLACK);
    32b2:	27 01 0b 00 	mova	&0x1000b,r7	
    32b6:	00 00       	bra	@r0		
            lcd_goto(0,0);
    32b8:	a9 2a       	jnc	$-684    	;abs 0x300c
    32ba:	00 00       	bra	@r0		
    32bc:	40 00       	rrcm.a	#1,	r0	
    32be:	27 01 0a 00 	mova	&0x1000a,r7	
            printf("   MAIN MENU\n\n");
    32c2:	00 00       	bra	@r0		
    32c4:	00 00       	bra	@r0		
    32c6:	00 00       	bra	@r0		
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
    32c8:	44 00       	rrcm.a	#1,	r4	
    32ca:	28 01 00 00 	mova	&0x10000,r8	
    32ce:	00 00       	bra	@r0		
            MenuStep = SELECT;
    32d0:	00 00       	bra	@r0		
    32d2:	00 00       	bra	@r0		
            break;
    32d4:	44 00       	rrcm.a	#1,	r4	
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    32d6:	29 01 08 00 	mova	&0x10008,r9	
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
            MenuStep = SELECT;
            break;
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
    32da:	00 00       	bra	@r0		
    32dc:	00 00       	bra	@r0		
    32de:	00 00       	bra	@r0		
    32e0:	44 00       	rrcm.a	#1,	r4	
            printf("SELECT            ");
    32e2:	2a 01 10 00 	mova	&0x10010,r10	
    32e6:	00 00       	bra	@r0		
    32e8:	00 00       	bra	@r0		
            
            lcd_goto(0,(int)MenuOption + 2);
    32ea:	00 00       	bra	@r0		
    32ec:	44 00       	rrcm.a	#1,	r4	
    32ee:	2b 01 18 00 	mova	&0x10018,r11	
    32f2:	00 00       	bra	@r0		
    32f4:	00 00       	bra	@r0		
    32f6:	00 00       	bra	@r0		
            printf(">");
    32f8:	44 00       	rrcm.a	#1,	r4	
    32fa:	2c 01 20 00 	mova	&0x10020,r12	
    32fe:	00 00       	bra	@r0		
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    3300:	00 00       	bra	@r0		
    3302:	00 00       	bra	@r0		
    3304:	24 00 00 00 	mova	&0x00000,r4	
    3308:	26 00 00 00 	mova	&0x00000,r6	
                MenuStep = WAIT_PITCH_DOWN;
    330c:	b6 2a       	jnc	$-658    	;abs 0x307a
                    MenuStep = WAIT_PITCH_UP;
                }
            }
            
            // select
            if(ChannelInput[ROLL_CH] > 3500){
    330e:	00 00       	bra	@r0		
    3310:	24 00 2f 01 	mova	&0x0012f,r4	
    3314:	48 48       	mov.b	r8,	r8	
                MenuStep = WAIT_ROLL_LEFT;
    3316:	00 00       	bra	@r0		
    3318:	cb 2a       	jnc	$-616    	;abs 0x30b0
    331a:	00 00       	bra	@r0		
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    331c:	40 00       	rrcm.a	#1,	r0	
    331e:	2e 01 0a 00 	mova	&0x1000a,r14	
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    3322:	00 00       	bra	@r0		
    3324:	d5 2a       	jnc	$-596    	;abs 0x30d0
    3326:	00 00       	bra	@r0		
                    MenuStep = WAIT_PITCH_UP;
    3328:	40 00       	rrcm.a	#1,	r0	
    332a:	2e 01 09 00 	mova	&0x10009,r14	
    332e:	00 00       	bra	@r0		
            }
            
            break;
        
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    3330:	df 2a       	jnc	$-576    	;abs 0x30f0
    3332:	00 00       	bra	@r0		
    3334:	40 00       	rrcm.a	#1,	r0	
    3336:	2e 01 08 00 	mova	&0x10008,r14	
            printf("WAIT PITCH DOWN    ");
    333a:	00 00       	bra	@r0		
    333c:	ea 2a       	jnc	$-554    	;abs 0x3112
    333e:	00 00       	bra	@r0		
    3340:	40 00       	rrcm.a	#1,	r0	
            
            if(ChannelInput[PITCH_CH] > 2500){
    3342:	2e 01 07 00 	mova	&0x10007,r14	
    3346:	00 00       	bra	@r0		
    3348:	f5 2a       	jnc	$-532    	;abs 0x3134
    334a:	00 00       	bra	@r0		
                lcd_goto(0,(int)MenuOption + 2);
    334c:	a0 00 2e 01 	adda	#0x0012e,r0	
	...
    3358:	44 00       	rrcm.a	#1,	r4	
                printf(" ");
    335a:	2f 01 00 00 	mova	&0x10000,r15	
    335e:	00 00       	bra	@r0		
    3360:	00 00       	bra	@r0		
                if((int)MenuOption > 0){
    3362:	00 00       	bra	@r0		
    3364:	44 00       	rrcm.a	#1,	r4	
    3366:	32 01 1a 00 	mova	26(r1),	r2	;0x001a(r1)
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
    336a:	00 00       	bra	@r0		
    336c:	00 00       	bra	@r0		
    336e:	00 00       	bra	@r0		
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    3370:	44 00       	rrcm.a	#1,	r4	
    3372:	33 01       	.word	0x0133;	????	Illegal as address instr
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3374:	2a 00 00 00 	mova	&0x00000,r10	
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    3378:	00 00       	bra	@r0		
    337a:	00 00       	bra	@r0		
    337c:	44 00       	rrcm.a	#1,	r4	
    337e:	35 01 3c 00 	mova	60(r1),	r5	;0x003c(r1)
            printf("WAIT PITCH UP    ");
    3382:	00 00       	bra	@r0		
    3384:	00 00       	bra	@r0		
    3386:	00 00       	bra	@r0		

            if(ChannelInput[PITCH_CH] < 3500){
    3388:	44 00       	rrcm.a	#1,	r4	
    338a:	37 01 48 00 	mova	72(r1),	r7	;0x0048(r1)
    338e:	00 00       	bra	@r0		
    3390:	00 00       	bra	@r0		
                lcd_goto(0,(int)MenuOption + 2);
    3392:	00 00       	bra	@r0		
    3394:	44 00       	rrcm.a	#1,	r4	
    3396:	38 01 5c 00 	mova	92(r1),	r8	;0x005c(r1)
    339a:	00 00       	bra	@r0		
    339c:	00 00       	bra	@r0		
    339e:	00 00       	bra	@r0		
                printf(" ");
    33a0:	44 00       	rrcm.a	#1,	r4	
    33a2:	3a 01 62 00 	mova	98(r1),	r10	;0x0062(r1)
    33a6:	00 00       	bra	@r0		
                if((int)MenuOption < MENU_LENGHT){
    33a8:	00 00       	bra	@r0		
    33aa:	00 00       	bra	@r0		
    33ac:	44 00       	rrcm.a	#1,	r4	
    33ae:	38 01 6a 00 	mova	106(r1),r8	;0x006a(r1)
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    33b2:	00 00       	bra	@r0		
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    33b4:	00 00       	bra	@r0		
    33b6:	00 00       	bra	@r0		
    33b8:	44 00       	rrcm.a	#1,	r4	
    33ba:	3d 01 70 00 	mova	112(r1),r13	;0x0070(r1)
            printf("WAIT CH7 BACK    ");
    33be:	00 00       	bra	@r0		
    33c0:	00 00       	bra	@r0		
    33c2:	00 00       	bra	@r0		
    33c4:	44 00       	rrcm.a	#1,	r4	
            
            if(ChannelInput[CH7_CH] < 2500){
    33c6:	3e 01 74 00 	mova	116(r1),r14	;0x0074(r1)
    33ca:	00 00       	bra	@r0		
    33cc:	00 00       	bra	@r0		
    33ce:	00 00       	bra	@r0		
                MenuStep = DISPLAY;
    33d0:	44 00       	rrcm.a	#1,	r4	
    33d2:	40 01       	rram.a	#1,	r0	
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    33d4:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    33d8:	00 00       	bra	@r0		
    33da:	00 00       	bra	@r0		
    33dc:	44 00       	rrcm.a	#1,	r4	
    33de:	41 01       	rram.a	#1,	r1	
            printf("WAIT ROLL LEFT    ");
    33e0:	86 00 00 00 	mova	#0x00000,r6	
    33e4:	00 00       	bra	@r0		
    33e6:	00 00       	bra	@r0		
            
            if(ChannelInput[ROLL_CH] < 3500){
    33e8:	44 00       	rrcm.a	#1,	r4	
    33ea:	42 01       	rram.a	#1,	r2	
    33ec:	94 00 00 00 	cmpa	#0x00000,r4	
    33f0:	01 2b       	jnc	$-508    	;abs 0x31f4
                lcd_clear(BLACK);
    33f2:	00 00       	bra	@r0		
    33f4:	40 00       	rrcm.a	#1,	r0	
    33f6:	2e 01 0b 00 	mova	&0x1000b,r14	
                lcd_goto(0,0);  
    33fa:	00 00       	bra	@r0		
    33fc:	0d 2b       	jnc	$-484    	;abs 0x3218
    33fe:	00 00       	bra	@r0		
                MenuStep = PROCESS_OPTION;
    3400:	40 00       	rrcm.a	#1,	r0	
    3402:	30 01 0a 00 	bra	10(r1)		;0x000a(r1)
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3406:	00 00       	bra	@r0		
                MenuStep = DISPLAY;
            }
            break;
                    
        case PROCESS_OPTION:
            process_option();
    3408:	19 2b       	jnc	$-460    	;abs 0x323c
    340a:	00 00       	bra	@r0		
    340c:	40 00       	rrcm.a	#1,	r0	
    340e:	30 01 09 00 	bra	9(r1)		;0x0009(r1)
        case WAIT_ROLL_RIGHT:
            break;    
    }
}

void process_option(){
    3412:	00 00       	bra	@r0		
    int i;
    switch (MenuOption){
    3414:	00 00       	bra	@r0		
    3416:	00 00       	bra	@r0		
    3418:	c0 00       	bra	r0		
    341a:	00 00       	bra	@r0		
    341c:	1a 00       	mova	#0x00000,r10	
    341e:	00 00       	bra	@r0		
    3420:	00 00       	bra	@r0		
    3422:	00 00       	bra	@r0		
    3424:	e0 00       	adda	r0,	r0	
    3426:	00 00       	bra	@r0		
    3428:	94 00 00 00 	cmpa	#0x00000,r4	
            
            // seta o flag initial setup
            break;          
    }
    
    if(ChannelInput[CH7_CH] > 3500){
    342c:	00 00       	bra	@r0		
    342e:	00 00       	bra	@r0		
    3430:	24 00 00 00 	mova	&0x00000,r4	
        MenuStep = WAIT_CH7_BACK;
    3434:	a0 00 00 00 	adda	#0x00000,r0	
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    3438:	24 2b       	jnc	$-438    	;abs 0x3282
        analog_graph_clear_all();
    343a:	00 00       	bra	@r0		
    343c:	24 00 45 01 	mova	&0x00145,r4	
        lcd_clear(BLACK);
    3440:	e8 48 00 00 	mov.b	@r8,	0(r8)	;0x0000(r8)
    3444:	3b 2b       	jnc	$-392    	;abs 0x32bc
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
    3446:	00 00       	bra	@r0		
    3448:	40 00       	rrcm.a	#1,	r0	
    344a:	45 01       	rram.a	#1,	r5	
            break;
    344c:	05 00       	mova	@r0,	r5	

void process_option(){
    int i;
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
    344e:	00 00       	bra	@r0		
            break;
    3450:	45 2b       	jnc	$-372    	;abs 0x32dc
    3452:	00 00       	bra	@r0		
    3454:	40 00       	rrcm.a	#1,	r0	
    3456:	45 01       	rram.a	#1,	r5	
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
    3458:	06 00       	mova	@r0,	r6	
    345a:	00 00       	bra	@r0		
    345c:	4f 2b       	jnc	$-352    	;abs 0x32fc
            for(i = 5; i >= 0; i--){ // contagem regressiva
    345e:	00 00       	bra	@r0		
    3460:	40 00       	rrcm.a	#1,	r0	
                lcd_goto(8,8);
    3462:	45 01       	rram.a	#1,	r5	
    3464:	0f 00       	mova	@r0,	r15	
    3466:	00 00       	bra	@r0		
    3468:	5d 2b       	jnc	$-324    	;abs 0x3324
                printf("%d", i);
    346a:	00 00       	bra	@r0		
    346c:	40 00       	rrcm.a	#1,	r0	
    346e:	45 01       	rram.a	#1,	r5	
    3470:	08 00       	mova	@r0,	r8	
    3472:	00 00       	bra	@r0		
                delayms(1000);
    3474:	6b 2b       	jnc	$-296    	;abs 0x334c
    3476:	00 00       	bra	@r0		
    3478:	a0 00 45 01 	adda	#0x00145,r0	
	...
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    3484:	44 00       	rrcm.a	#1,	r4	
                lcd_goto(8,8);
                printf("%d", i);
                delayms(1000);
            }
            MotorArmed = TRUE;
    3486:	45 01       	rram.a	#1,	r5	
	...
            MenuVisible = FALSE;
            lcd_clear(BLACK);
    3490:	44 00       	rrcm.a	#1,	r4	
    3492:	46 01       	rram.a	#1,	r6	
            MenuStep = DISPLAY;
    3494:	22 00 00 00 	mova	&0x00000,r2	
    3498:	00 00       	bra	@r0		
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
    349a:	00 00       	bra	@r0		
    349c:	44 00       	rrcm.a	#1,	r4	
            break;
    349e:	47 01       	rram.a	#1,	r7	
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        analog_graph_clear_all();
        lcd_clear(BLACK);
    }
}
    34a0:	2a 00 00 00 	mova	&0x00000,r10	

void draw_analog_graph(void){
    34a4:	00 00       	bra	@r0		
    34a6:	00 00       	bra	@r0		
    34a8:	44 00       	rrcm.a	#1,	r4	
    34aa:	48 01       	rram.a	#1,	r8	
    int i, k;
    for(i = 0; i < 8; i++){
    34ac:	2e 00 00 00 	mova	&0x00000,r14	
        if((1 << i) & AnalogChecked){
    34b0:	00 00       	bra	@r0		
    34b2:	00 00       	bra	@r0		
    34b4:	44 00       	rrcm.a	#1,	r4	
    34b6:	49 01       	rram.a	#1,	r9	
    34b8:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x034ba
    34bc:	00 00       	bra	@r0		
    34be:	00 00       	bra	@r0		
    34c0:	44 00       	rrcm.a	#1,	r4	
    34c2:	4a 01       	rram.a	#1,	r10	
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
    34c4:	40 00       	rrcm.a	#1,	r0	
    34c6:	00 00       	bra	@r0		
    34c8:	00 00       	bra	@r0		
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
    34ca:	00 00       	bra	@r0		
    34cc:	44 00       	rrcm.a	#1,	r4	
    34ce:	4b 01       	rram.a	#1,	r11	
    34d0:	42 00       	rrcm.a	#1,	r2	
    34d2:	00 00       	bra	@r0		
    34d4:	00 00       	bra	@r0		
    34d6:	00 00       	bra	@r0		
    34d8:	44 00       	rrcm.a	#1,	r4	
    34da:	4c 01       	rram.a	#1,	r12	
    34dc:	5a 00       	rrcm	#1,	r10	
    34de:	00 00       	bra	@r0		
    34e0:	00 00       	bra	@r0		
    34e2:	00 00       	bra	@r0		
    34e4:	44 00       	rrcm.a	#1,	r4	
    34e6:	4d 01       	rram.a	#1,	r13	
    34e8:	72 00 00 00 	mova	r0,	&0x0000	
    34ec:	00 00       	bra	@r0		
    34ee:	00 00       	bra	@r0		
    34f0:	44 00       	rrcm.a	#1,	r4	
    34f2:	4e 01       	rram.a	#1,	r14	
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
    34f4:	8a 00 00 00 	mova	#0x00000,r10	
    34f8:	00 00       	bra	@r0		
    34fa:	00 00       	bra	@r0		
    34fc:	44 00       	rrcm.a	#1,	r4	
    34fe:	4f 01       	rram.a	#1,	r15	
    3500:	a2 00 00 00 	adda	#0x00000,r2	
    3504:	00 00       	bra	@r0		
    3506:	00 00       	bra	@r0		
    3508:	44 00       	rrcm.a	#1,	r4	
    350a:	50 01       	rram	#1,	r0	
    350c:	a8 00 00 00 	adda	#0x00000,r8	
    3510:	00 00       	bra	@r0		
    3512:	00 00       	bra	@r0		
    3514:	44 00       	rrcm.a	#1,	r4	
    3516:	51 01       	rram	#1,	r1	
    3518:	ae 00 00 00 	adda	#0x00000,r14	
    351c:	00 00       	bra	@r0		
    351e:	00 00       	bra	@r0		
    3520:	44 00       	rrcm.a	#1,	r4	
    3522:	52 01       	rram	#1,	r2	
    3524:	b0 00 00 00 	suba	#0x00000,r0	
    3528:	00 00       	bra	@r0		
    352a:	00 00       	bra	@r0		
    352c:	44 00       	rrcm.a	#1,	r4	
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
    352e:	53 01       	rram	#1,	#0	;r3 As==00
    3530:	b4 00 00 00 	suba	#0x00000,r4	
    3534:	00 00       	bra	@r0		
    3536:	00 00       	bra	@r0		
    3538:	44 00       	rrcm.a	#1,	r4	
    353a:	55 01       	rram	#1,	r5	
    353c:	da 00       	cmpa	r0,	r10	
    353e:	00 00       	bra	@r0		
    3540:	00 00       	bra	@r0		
    3542:	00 00       	bra	@r0		
    3544:	44 00       	rrcm.a	#1,	r4	
    3546:	56 01       	rram	#1,	r6	
    3548:	dc 00       	cmpa	r0,	r12	
    354a:	00 00       	bra	@r0		
    354c:	00 00       	bra	@r0		
    354e:	00 00       	bra	@r0		
    3550:	44 00       	rrcm.a	#1,	r4	
    3552:	57 01       	rram	#1,	r7	
    3554:	e0 00       	adda	r0,	r0	
    3556:	00 00       	bra	@r0		

void draw_analog_graph(void){
    int i, k;
    for(i = 0; i < 8; i++){
        if((1 << i) & AnalogChecked){
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
    3558:	00 00       	bra	@r0		
    355a:	00 00       	bra	@r0		
    355c:	44 00       	rrcm.a	#1,	r4	
    355e:	58 01       	rram	#1,	r8	
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
            }
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
    3560:	ea 00       	adda	r0,	r10	
    3562:	00 00       	bra	@r0		
    3564:	00 00       	bra	@r0		
    3566:	00 00       	bra	@r0		
    3568:	44 00       	rrcm.a	#1,	r4	
    356a:	59 01       	rram	#1,	r9	
    356c:	fe 00       	suba	r0,	r14	
    356e:	00 00       	bra	@r0		
    3570:	00 00       	bra	@r0		
    3572:	00 00       	bra	@r0		
    3574:	44 00       	rrcm.a	#1,	r4	
    3576:	5a 01       	rram	#1,	r10	
    3578:	12 01       	mova	@r1+,	r2	
    357a:	00 00       	bra	@r0		
    357c:	00 00       	bra	@r0		
    357e:	00 00       	bra	@r0		
    3580:	44 00       	rrcm.a	#1,	r4	
    3582:	5b 01       	rram	#1,	r11	
    3584:	22 01 00 00 	mova	&0x10000,r2	
    3588:	00 00       	bra	@r0		
    358a:	00 00       	bra	@r0		
    358c:	44 00       	rrcm.a	#1,	r4	
    358e:	5c 01       	rram	#1,	r12	
    3590:	32 01 00 00 	mova	0(r1),	r2	;0x0000(r1)
    3594:	00 00       	bra	@r0		
    3596:	00 00       	bra	@r0		
    }
}

void draw_analog_graph(void){
    int i, k;
    for(i = 0; i < 8; i++){
    3598:	44 00       	rrcm.a	#1,	r4	
    359a:	5d 01       	rram	#1,	r13	
    359c:	46 01       	rram.a	#1,	r6	
            }
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
        }
    }
    
}
    359e:	00 00       	bra	@r0		
    35a0:	00 00       	bra	@r0		
    35a2:	00 00       	bra	@r0		
    35a4:	44 00       	rrcm.a	#1,	r4	
    35a6:	5e 01       	rram	#1,	r14	

void analog_graph_clear(int n){
    35a8:	56 01       	rram	#1,	r6	
    35aa:	00 00       	bra	@r0		
    35ac:	00 00       	bra	@r0		
    35ae:	00 00       	bra	@r0		
    int i;
    for(i = 0; i < GRAPH_LENGHT; i++){
    35b0:	44 00       	rrcm.a	#1,	r4	
    35b2:	5f 01       	rram	#1,	r15	
    35b4:	6a 01 00 00 	mova	r1,	&0xa0000
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
    35b8:	00 00       	bra	@r0		
    35ba:	00 00       	bra	@r0		
    35bc:	44 00       	rrcm.a	#1,	r4	
    35be:	61 01 82 01 	mova	r1,	&0x10182
    35c2:	00 00       	bra	@r0		
    35c4:	78 2b       	jnc	$-270    	;abs 0x34b6
    35c6:	00 00       	bra	@r0		
    35c8:	40 00       	rrcm.a	#1,	r0	
    35ca:	45 01       	rram.a	#1,	r5	
    35cc:	09 00       	mova	@r0,	r9	
    35ce:	00 00       	bra	@r0		
    35d0:	85 2b       	jnc	$-244    	;abs 0x34dc
    35d2:	00 00       	bra	@r0		
    35d4:	80 00 46 01 	bra	#0x00146	
    35d8:	00 00       	bra	@r0		
    35da:	00 00       	bra	@r0		
    35dc:	8d 2b       	jnc	$-228    	;abs 0x34f8
    35de:	00 00       	bra	@r0		
        AnalogGraph[n][i] = 0;
    35e0:	80 00 47 01 	bra	#0x00147	
    35e4:	02 00       	mova	@r0,	r2	
    35e6:	00 00       	bra	@r0		
    35e8:	99 2b       	jnc	$-204    	;abs 0x351c
    35ea:	00 00       	bra	@r0		
    35ec:	80 00 48 01 	bra	#0x00148	
    35f0:	04 00       	mova	@r0,	r4	
    35f2:	00 00       	bra	@r0		
    35f4:	a5 2b       	jnc	$-180    	;abs 0x3540
    35f6:	00 00       	bra	@r0		
    35f8:	40 00       	rrcm.a	#1,	r0	
    35fa:	49 01       	rram.a	#1,	r9	
    35fc:	04 00       	mova	@r0,	r4	
    
}

void analog_graph_clear(int n){
    int i;
    for(i = 0; i < GRAPH_LENGHT; i++){
    35fe:	00 00       	bra	@r0		
    3600:	ae 2b       	jnc	$-162    	;abs 0x355e
    3602:	00 00       	bra	@r0		
    3604:	40 00       	rrcm.a	#1,	r0	
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
        AnalogGraph[n][i] = 0;
    }
}
    3606:	4a 01       	rram.a	#1,	r10	
    3608:	07 00       	mova	@r0,	r7	
    360a:	00 00       	bra	@r0		
    360c:	00 00       	bra	@r0		
    360e:	00 00       	bra	@r0		
    3610:	c0 00       	bra	r0		
    3612:	00 00       	bra	@r0		
    3614:	22 00 00 00 	mova	&0x00000,r2	
    3618:	00 00       	bra	@r0		
    361a:	00 00       	bra	@r0		
    361c:	e0 00       	adda	r0,	r0	
    361e:	00 00       	bra	@r0		
    3620:	82 01 00 00 	mova	#0x10000,r2	
    3624:	00 00       	bra	@r0		
    3626:	00 00       	bra	@r0		
    3628:	24 00 00 00 	mova	&0x00000,r4	
    362c:	98 01 00 00 	cmpa	#0x10000,r8	
    3630:	b7 2b       	jnc	$-144    	;abs 0x35a0
    3632:	00 00       	bra	@r0		
    3634:	24 00 63 01 	mova	&0x00163,r4	
    3638:	80 4a 00 00 	mov	r10,	0x0000	;PC rel. 0x0363c
    363c:	cc 2b       	jnc	$-102    	;abs 0x35d6
    363e:	00 00       	bra	@r0		
    3640:	40 00       	rrcm.a	#1,	r0	

void process_analog_menu(void){
    draw_analog_graph();
    3642:	63 01 09 00 	mova	r1,	&0x30009
    switch(MenuAnalog){
    3646:	00 00       	bra	@r0		
    3648:	d6 2b       	jnc	$-82     	;abs 0x35f6
    364a:	00 00       	bra	@r0		
    364c:	40 00       	rrcm.a	#1,	r0	
    364e:	63 01 0a 00 	mova	r1,	&0x3000a
    3652:	00 00       	bra	@r0		
    3654:	e0 2b       	jnc	$-62     	;abs 0x3616
    3656:	00 00       	bra	@r0		
    3658:	40 00       	rrcm.a	#1,	r0	
    365a:	63 01 04 00 	mova	r1,	&0x30004
    365e:	00 00       	bra	@r0		
    3660:	ea 2b       	jnc	$-42     	;abs 0x3636
    3662:	00 00       	bra	@r0		
        case DISPLAY:
            lcd_goto(4,0);
    3664:	40 00       	rrcm.a	#1,	r0	
    3666:	63 01 05 00 	mova	r1,	&0x30005
    366a:	00 00       	bra	@r0		
            printf("ANALOG GRAPH   ");
    366c:	f4 2b       	jnc	$-22     	;abs 0x3656
    366e:	00 00       	bra	@r0		
    3670:	a0 00 63 01 	adda	#0x00163,r0	
	...
            
            lcd_goto(0,14);
    367c:	44 00       	rrcm.a	#1,	r4	
            printf("DISPLAY             ");
    367e:	63 01 00 00 	mova	r1,	&0x30000
    3682:	00 00       	bra	@r0		
    3684:	00 00       	bra	@r0		

            refresh_analog_menu();
    3686:	00 00       	bra	@r0		
    3688:	44 00       	rrcm.a	#1,	r4	
            MenuAnalog = SELECT;
    368a:	64 01 22 00 	mova	r1,	&0x40022
            break;
    368e:	00 00       	bra	@r0		
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3690:	00 00       	bra	@r0		

            refresh_analog_menu();
            MenuAnalog = SELECT;
            break;
        case SELECT:
            lcd_goto(0,14);
    3692:	00 00       	bra	@r0		
    3694:	44 00       	rrcm.a	#1,	r4	
    3696:	65 01 26 00 	mova	r1,	&0x50026
    369a:	00 00       	bra	@r0		
            printf("SELECT            ");
    369c:	00 00       	bra	@r0		
    369e:	00 00       	bra	@r0		
    36a0:	44 00       	rrcm.a	#1,	r4	
    36a2:	67 01 2a 00 	mova	r1,	&0x7002a

            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    36a6:	00 00       	bra	@r0		
    36a8:	00 00       	bra	@r0		
    36aa:	00 00       	bra	@r0		
    36ac:	44 00       	rrcm.a	#1,	r4	
                MenuAnalog = WAIT_ROLL_LEFT;
    36ae:	6c 01 2e 00 	mova	r1,	&0xc002e
    36b2:	00 00       	bra	@r0		
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
            
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    36b4:	00 00       	bra	@r0		
    36b6:	00 00       	bra	@r0		
    36b8:	44 00       	rrcm.a	#1,	r4	
    36ba:	6e 01 32 00 	mova	r1,	&0xe0032
                MenuAnalog = WAIT_PITCH_DOWN;
    36be:	00 00       	bra	@r0		
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    36c0:	00 00       	bra	@r0		
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    36c2:	00 00       	bra	@r0		
    36c4:	44 00       	rrcm.a	#1,	r4	
    36c6:	73 01       	.word	0x0173;	????	Illegal as address instr
    36c8:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x036ca
                    MenuAnalog = WAIT_PITCH_UP;
    36cc:	00 00       	bra	@r0		
    36ce:	00 00       	bra	@r0		
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    36d0:	44 00       	rrcm.a	#1,	r4	
    36d2:	75 01 3a 00 	mova	r1,	58(r5)	;0x003a(r5)
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
            }
            else{
                if(ChannelInput[ROLL_CH] < 2500){
    36d6:	00 00       	bra	@r0		
    36d8:	00 00       	bra	@r0		
    36da:	00 00       	bra	@r0		
                    MenuAnalog = WAIT_ROLL_RIGHT;
    36dc:	44 00       	rrcm.a	#1,	r4	
    36de:	76 01 3c 00 	mova	r1,	60(r6)	;0x003c(r6)
    36e2:	00 00       	bra	@r0		
                }
            }
            
            break;
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    36e4:	00 00       	bra	@r0		
    36e6:	00 00       	bra	@r0		
    36e8:	44 00       	rrcm.a	#1,	r4	
    36ea:	78 01 3e 00 	mova	r1,	62(r8)	;0x003e(r8)
            printf("WAIT PITCH DOWN    ");
    36ee:	00 00       	bra	@r0		
    36f0:	00 00       	bra	@r0		
    36f2:	00 00       	bra	@r0		
    36f4:	44 00       	rrcm.a	#1,	r4	

            if(ChannelInput[PITCH_CH] > 2500){
    36f6:	7a 01 48 00 	mova	r1,	72(r10)	;0x0048(r10)
    36fa:	00 00       	bra	@r0		
    36fc:	00 00       	bra	@r0		
    36fe:	00 00       	bra	@r0		
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    3700:	44 00       	rrcm.a	#1,	r4	
    3702:	7b 01 4c 00 	mova	r1,	76(r11)	;0x004c(r11)
    3706:	00 00       	bra	@r0		
    3708:	00 00       	bra	@r0		
    370a:	00 00       	bra	@r0		
    370c:	44 00       	rrcm.a	#1,	r4	
    370e:	7c 01 54 00 	mova	r1,	84(r12)	;0x0054(r12)
    3712:	00 00       	bra	@r0		
    3714:	00 00       	bra	@r0		

                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
                        AnalogSelect--;
                    }
                    MenuAnalog = DISPLAY;
    3716:	00 00       	bra	@r0		
    3718:	44 00       	rrcm.a	#1,	r4	
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    371a:	7d 01 58 00 	mova	r1,	88(r13)	;0x0058(r13)
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    371e:	00 00       	bra	@r0		
    3720:	00 00       	bra	@r0		
    3722:	00 00       	bra	@r0		
    3724:	44 00       	rrcm.a	#1,	r4	
            printf("WAIT PITCH UP    ");
    3726:	7e 01 5c 00 	mova	r1,	92(r14)	;0x005c(r14)
    372a:	00 00       	bra	@r0		
    372c:	00 00       	bra	@r0		

            if(ChannelInput[PITCH_CH] < 3500){
    372e:	00 00       	bra	@r0		
    3730:	44 00       	rrcm.a	#1,	r4	
    3732:	7f 01 60 00 	mova	r1,	96(r15)	;0x0060(r15)
    3736:	00 00       	bra	@r0		
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    3738:	00 00       	bra	@r0		
    373a:	00 00       	bra	@r0		
    373c:	44 00       	rrcm.a	#1,	r4	
    373e:	81 01 62 00 	mova	#0x10062,r1	
    3742:	00 00       	bra	@r0		
    3744:	00 00       	bra	@r0		
    3746:	00 00       	bra	@r0		
    3748:	44 00       	rrcm.a	#1,	r4	
    374a:	82 01 64 00 	mova	#0x10064,r2	
    374e:	00 00       	bra	@r0		
                analog_graph_clear(AnalogSelect);
    3750:	00 00       	bra	@r0		
    3752:	00 00       	bra	@r0		
    3754:	44 00       	rrcm.a	#1,	r4	
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3756:	83 01       	.word	0x0183;	????	Illegal as address instr
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
    3758:	66 00 00 00 	mova	r0,	&0x60000
    375c:	00 00       	bra	@r0		
    375e:	00 00       	bra	@r0		
    3760:	44 00       	rrcm.a	#1,	r4	
                printf("WAIT ROLL RIGHT ");
    3762:	87 01 76 00 	mova	#0x10076,r7	
    3766:	00 00       	bra	@r0		
    3768:	00 00       	bra	@r0		

                if(ChannelInput[PITCH_CH] < 3500){
    376a:	00 00       	bra	@r0		
    376c:	44 00       	rrcm.a	#1,	r4	
    376e:	88 01 7e 00 	mova	#0x1007e,r8	
    3772:	00 00       	bra	@r0		
                    if(AnalogSelect > 0){
    3774:	00 00       	bra	@r0		
    3776:	00 00       	bra	@r0		
    3778:	44 00       	rrcm.a	#1,	r4	
    377a:	89 01 82 00 	mova	#0x10082,r9	
                        AnalogSelect--;
    377e:	00 00       	bra	@r0		
    3780:	00 00       	bra	@r0		
    3782:	00 00       	bra	@r0		
                    MenuAnalog = DISPLAY;
                }
            break;
            
        case WAIT_ROLL_LEFT:
                lcd_goto(0,14);
    3784:	44 00       	rrcm.a	#1,	r4	
    3786:	8a 01 86 00 	mova	#0x10086,r10	
    378a:	00 00       	bra	@r0		
    378c:	00 00       	bra	@r0		
                printf("WAIT ROLL LEFT   ");
    378e:	00 00       	bra	@r0		
    3790:	44 00       	rrcm.a	#1,	r4	
    3792:	8b 01 88 00 	mova	#0x10088,r11	
        
                if(ChannelInput[PITCH_CH] > 2500){
    3796:	00 00       	bra	@r0		
    3798:	00 00       	bra	@r0		
    379a:	00 00       	bra	@r0		
    379c:	44 00       	rrcm.a	#1,	r4	
    379e:	8d 01 8a 00 	mova	#0x1008a,r13	
                   if(AnalogSelect < 7){
    37a2:	00 00       	bra	@r0		
    37a4:	00 00       	bra	@r0		
    37a6:	00 00       	bra	@r0		
    37a8:	44 00       	rrcm.a	#1,	r4	
                        AnalogSelect++;
    37aa:	8e 01 8e 00 	mova	#0x1008e,r14	
    37ae:	00 00       	bra	@r0		
                    }
                    MenuAnalog = DISPLAY;
    37b0:	00 00       	bra	@r0		
    37b2:	00 00       	bra	@r0		
    37b4:	44 00       	rrcm.a	#1,	r4	
    37b6:	8f 01 90 00 	mova	#0x10090,r15	
    37ba:	00 00       	bra	@r0		
    37bc:	00 00       	bra	@r0		
    37be:	00 00       	bra	@r0		
    37c0:	44 00       	rrcm.a	#1,	r4	
    37c2:	6f 01 a0 00 	mova	r1,	&0xf00a0
    37c6:	00 00       	bra	@r0		
    37c8:	00 00       	bra	@r0		
    37ca:	00 00       	bra	@r0		
        case WAIT_CH7_BACK:
            break;
    }
}

void refresh_analog_menu(void){
    37cc:	44 00       	rrcm.a	#1,	r4	
    int i;
    lcd_goto(1,12);
    37ce:	70 01 a4 00 	mova	r1,	0x00a4	;PC rel. 0x03874
    37d2:	00 00       	bra	@r0		
    37d4:	00 00       	bra	@r0		
    37d6:	00 00       	bra	@r0		
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    37d8:	44 00       	rrcm.a	#1,	r4	
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
    37da:	68 01 aa 00 	mova	r1,	&0x800aa
    37de:	00 00       	bra	@r0		
    37e0:	00 00       	bra	@r0		
    37e2:	00 00       	bra	@r0		
    37e4:	44 00       	rrcm.a	#1,	r4	
    37e6:	69 01 ae 00 	mova	r1,	&0x900ae
    37ea:	00 00       	bra	@r0		
    37ec:	00 00       	bra	@r0		
    37ee:	00 00       	bra	@r0		
            color_back = LIME;          // a cor do fundo muda para azul
    37f0:	44 00       	rrcm.a	#1,	r4	
    37f2:	92 01 b4 00 	cmpa	#0x100b4,r2	
            color_fore = BLACK;
    37f6:	00 00       	bra	@r0		
    37f8:	01 2c       	jc	$+4      	;abs 0x37fc
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    37fa:	00 00       	bra	@r0		
    37fc:	40 00       	rrcm.a	#1,	r0	
    37fe:	63 01 06 00 	mova	r1,	&0x30006
    3802:	00 00       	bra	@r0		
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
    3804:	0e 2c       	jc	$+30     	;abs 0x3822
    3806:	00 00       	bra	@r0		
    3808:	40 00       	rrcm.a	#1,	r0	
    380a:	64 01 07 00 	mova	r1,	&0x40007
                color_fore = BLACK;
            }
        }                               
        
        printf("%d",i);
    380e:	00 00       	bra	@r0		
    3810:	18 2c       	jc	$+50     	;abs 0x3842
    3812:	00 00       	bra	@r0		
    3814:	40 00       	rrcm.a	#1,	r0	
        // ajusta as cores para o normal
        color_fore = LIME;
    3816:	65 01 08 00 	mova	r1,	&0x50008
    381a:	00 00       	bra	@r0		
        color_back = BLACK;
    381c:	22 2c       	jc	$+70     	;abs 0x3862
    381e:	00 00       	bra	@r0		
        printf(" ");
    3820:	80 00 66 01 	bra	#0x00166	
    3824:	00 00       	bra	@r0		
    3826:	00 00       	bra	@r0		
}

void refresh_analog_menu(void){
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    3828:	2e 2c       	jc	$+94     	;abs 0x3886
    382a:	00 00       	bra	@r0		
    382c:	80 00 66 01 	bra	#0x00166	
    3830:	02 00       	mova	@r0,	r2	
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
                color_fore = BLACK;
    3832:	00 00       	bra	@r0		
    3834:	00 00       	bra	@r0		
    3836:	00 00       	bra	@r0		
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
    3838:	c0 00       	bra	r0		
    383a:	00 00       	bra	@r0		
    383c:	22 00 00 00 	mova	&0x00000,r2	
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
            color_fore = BLACK;
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
    3840:	3a 2c       	jc	$+118    	;abs 0x38b6
    3842:	00 00       	bra	@r0		
            color_fore = LIME;
    3844:	40 00       	rrcm.a	#1,	r0	
    3846:	7b 01 0b 00 	mova	r1,	11(r11)	;0x000b(r11)
    384a:	00 00       	bra	@r0		
        // ajusta as cores para o normal
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
    384c:	00 00       	bra	@r0		
    384e:	00 00       	bra	@r0		
    3850:	c0 00       	bra	r0		
    3852:	00 00       	bra	@r0		
    3854:	4c 00       	rrcm.a	#1,	r12	
}
    3856:	00 00       	bra	@r0		
    3858:	00 00       	bra	@r0		

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    385a:	00 00       	bra	@r0		
    385c:	e0 00       	adda	r0,	r0	
    RCCounter++;
    385e:	00 00       	bra	@r0		
    3860:	76 00 00 00 	mova	r0,	0(r6)	;0x0000(r6)
    MenuCounter++;
    3864:	3a 2c       	jc	$+118    	;abs 0x38da
}
    3866:	00 00       	bra	@r0		
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    3868:	40 00       	rrcm.a	#1,	r0	
    386a:	87 01 0b 00 	mova	#0x1000b,r7	
    
    DCOCTL = 0x77;      
    386e:	00 00       	bra	@r0		
    3870:	00 00       	bra	@r0		
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    BCSCTL1 = 0xcf;     
    3872:	00 00       	bra	@r0		
    3874:	c0 00       	bra	r0		
    3876:	00 00       	bra	@r0		
     * 
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
     * XCAP_0 -- ~1 pF
     */
    BCSCTL3 = 0xa0;
    3878:	76 00 00 00 	mova	r0,	0(r6)	;0x0000(r6)
    387c:	00 00       	bra	@r0		
}
    387e:	00 00       	bra	@r0		

void p1_init(){
        /* Port 1 Output Register */
    P1OUT = PPM_P1MASK;
    3880:	e0 00       	adda	r0,	r0	
    3882:	00 00       	bra	@r0		

    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;
    3884:	a0 00 00 00 	adda	#0x00000,r0	

    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida
    3888:	00 00       	bra	@r0		
    388a:	00 00       	bra	@r0		

    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;
    388c:	e0 00       	adda	r0,	r0	
    388e:	00 00       	bra	@r0		

    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;
    3890:	b4 00 00 00 	suba	#0x00000,r4	

}
    3894:	00 00       	bra	@r0		
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    3896:	00 00       	bra	@r0		
    3898:	24 00 00 00 	mova	&0x00000,r4	

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;
    389c:	c8 00       	mova	r0,	r8	
    389e:	00 00       	bra	@r0		
    38a0:	4a 2c       	jc	$+150    	;abs 0x3936
     * 
     * TASSEL_2 -- SMCLK
     * ID_3 -- Divider - /8
     * MC_1 -- Up Mode
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
    38a2:	00 00       	bra	@r0		
    38a4:	24 00 95 01 	mova	&0x00195,r4	
}
    38a8:	48 4b       	mov.b	r11,	r8	

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    38aa:	00 00       	bra	@r0		
    38ac:	cb 2a       	jnc	$-616    	;abs 0x3644
    38ae:	00 00       	bra	@r0		
    38b0:	40 00       	rrcm.a	#1,	r0	
    38b2:	94 01 0f 00 	cmpa	#0x1000f,r4	
    38b6:	00 00       	bra	@r0		
    38b8:	d5 2a       	jnc	$-596    	;abs 0x3664
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    38ba:	00 00       	bra	@r0		
    38bc:	40 00       	rrcm.a	#1,	r0	
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    38be:	94 01 0b 00 	cmpa	#0x1000b,r4	
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    38c2:	00 00       	bra	@r0		
    38c4:	60 2c       	jc	$+194    	;abs 0x3986
    38c6:	00 00       	bra	@r0		
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    38c8:	40 00       	rrcm.a	#1,	r0	
    38ca:	94 01 0a 00 	cmpa	#0x1000a,r4	
    38ce:	00 00       	bra	@r0		
            if(!(P1IES & PPM_ch_counter)){ // low to high
    38d0:	00 00       	bra	@r0		
    38d2:	00 00       	bra	@r0		
    38d4:	44 00       	rrcm.a	#1,	r4	
    38d6:	95 01 00 00 	cmpa	#0x10000,r5	
                TimeUpEdge[channel_num] = PPM_aux;
    38da:	00 00       	bra	@r0		
    38dc:	00 00       	bra	@r0		
    38de:	00 00       	bra	@r0		
    38e0:	44 00       	rrcm.a	#1,	r4	
    38e2:	96 01 08 00 	cmpa	#0x10008,r6	
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    38e6:	00 00       	bra	@r0		
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
    38e8:	00 00       	bra	@r0		
    38ea:	00 00       	bra	@r0		
    38ec:	44 00       	rrcm.a	#1,	r4	
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
    38ee:	97 01 14 00 	cmpa	#0x10014,r7	
    38f2:	00 00       	bra	@r0		
    38f4:	00 00       	bra	@r0		
    38f6:	00 00       	bra	@r0		
    38f8:	44 00       	rrcm.a	#1,	r4	
    38fa:	99 01 20 00 	cmpa	#0x10020,r9	
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    38fe:	00 00       	bra	@r0		
    3900:	00 00       	bra	@r0		
    3902:	00 00       	bra	@r0		
    3904:	44 00       	rrcm.a	#1,	r4	
    3906:	9a 01 2c 00 	cmpa	#0x1002c,r10	
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
    390a:	00 00       	bra	@r0		
    390c:	00 00       	bra	@r0		
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    390e:	00 00       	bra	@r0		
    3910:	44 00       	rrcm.a	#1,	r4	
    3912:	9d 01 34 00 	cmpa	#0x10034,r13	

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    3916:	00 00       	bra	@r0		
    3918:	00 00       	bra	@r0		
    391a:	00 00       	bra	@r0		
    391c:	44 00       	rrcm.a	#1,	r4	
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}
    391e:	9e 01 38 00 	cmpa	#0x10038,r14	
    3922:	00 00       	bra	@r0		
    3924:	00 00       	bra	@r0		
    3926:	00 00       	bra	@r0		
    3928:	44 00       	rrcm.a	#1,	r4	
    392a:	a0 01 3c 00 	adda	#0x1003c,r0	
    392e:	00 00       	bra	@r0		
    3930:	00 00       	bra	@r0		
    3932:	00 00       	bra	@r0		
    3934:	44 00       	rrcm.a	#1,	r4	
    3936:	a1 01 4a 00 	adda	#0x1004a,r1	
    393a:	00 00       	bra	@r0		
    393c:	00 00       	bra	@r0		
    393e:	00 00       	bra	@r0		
    3940:	44 00       	rrcm.a	#1,	r4	
    3942:	a2 01 58 00 	adda	#0x10058,r2	
    3946:	00 00       	bra	@r0		
    3948:	00 00       	bra	@r0		
    394a:	00 00       	bra	@r0		
    394c:	24 00 00 00 	mova	&0x00000,r4	
    3950:	5e 00       	rrcm	#1,	r14	
    3952:	00 00       	bra	@r0		
    3954:	6d 2c       	jc	$+220    	;abs 0x3a30
    3956:	00 00       	bra	@r0		
    3958:	24 00 a5 01 	mova	&0x001a5,r4	
    395c:	a6 4b 00 00 	mov	@r11,	0(r6)	;0x0000(r6)

void calibrate_radio(void){
    3960:	cb 2a       	jnc	$-616    	;abs 0x36f8
    3962:	00 00       	bra	@r0		
    3964:	40 00       	rrcm.a	#1,	r0	
    3966:	a4 01 0a 00 	adda	#0x1000a,r4	
    396a:	00 00       	bra	@r0		
    396c:	d5 2a       	jnc	$-596    	;abs 0x3718
    396e:	00 00       	bra	@r0		
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    3970:	40 00       	rrcm.a	#1,	r0	
    3972:	a4 01 09 00 	adda	#0x10009,r4	
    3976:	00 00       	bra	@r0		
    3978:	df 2a       	jnc	$-576    	;abs 0x3738
        return;
    }

    int i = 0, k;    
    397a:	00 00       	bra	@r0		
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    397c:	40 00       	rrcm.a	#1,	r0	
    397e:	a4 01 08 00 	adda	#0x10008,r4	
    3982:	00 00       	bra	@r0		
    3984:	ea 2a       	jnc	$-554    	;abs 0x375a
    3986:	00 00       	bra	@r0		
    3988:	40 00       	rrcm.a	#1,	r0	
    398a:	a4 01 07 00 	adda	#0x10007,r4	
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    398e:	00 00       	bra	@r0		
    3990:	81 2c       	jc	$+260    	;abs 0x3a94
    3992:	00 00       	bra	@r0		
    3994:	a0 00 a4 01 	adda	#0x001a4,r0	
	...
    fourbytes ValorAux;        
    
    lcd_goto(2,5);
    39a0:	44 00       	rrcm.a	#1,	r4	
    39a2:	a5 01 00 00 	adda	#0x10000,r5	
    39a6:	00 00       	bra	@r0		
    39a8:	00 00       	bra	@r0		
    color_fore = RED;
    39aa:	00 00       	bra	@r0		
    39ac:	44 00       	rrcm.a	#1,	r4	
    39ae:	a8 01 1a 00 	adda	#0x1001a,r8	
    printf("MOVE STICKS\nALL DIRECTIONS");
    39b2:	00 00       	bra	@r0		
    39b4:	00 00       	bra	@r0		
    39b6:	00 00       	bra	@r0		
    color_fore = LIME;
    39b8:	44 00       	rrcm.a	#1,	r4	
    39ba:	a9 01 2a 00 	adda	#0x1002a,r9	
    delayms(3000);
    39be:	00 00       	bra	@r0		
    39c0:	00 00       	bra	@r0		
    39c2:	00 00       	bra	@r0		
    39c4:	44 00       	rrcm.a	#1,	r4	
    lcd_clear(BLACK);
    39c6:	ab 01 3c 00 	adda	#0x1003c,r11	
    39ca:	00 00       	bra	@r0		

    for(i = 0; i < 8; i++){ // zera offset e slope
    39cc:	00 00       	bra	@r0		
    39ce:	00 00       	bra	@r0		
    39d0:	44 00       	rrcm.a	#1,	r4	
    39d2:	ad 01 48 00 	adda	#0x10048,r13	
        PPMOffset[i] = 0;
    39d6:	00 00       	bra	@r0		
    39d8:	00 00       	bra	@r0		
    39da:	00 00       	bra	@r0		
    39dc:	44 00       	rrcm.a	#1,	r4	
    39de:	ae 01 5c 00 	adda	#0x1005c,r14	
    39e2:	00 00       	bra	@r0		
    39e4:	00 00       	bra	@r0		
    39e6:	00 00       	bra	@r0		
        PPMSlope[i] = 1;
    39e8:	44 00       	rrcm.a	#1,	r4	
    39ea:	b0 01 62 00 	suba	#0x10062,r0	
    39ee:	00 00       	bra	@r0		
    39f0:	00 00       	bra	@r0		
    39f2:	00 00       	bra	@r0		
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
    39f4:	44 00       	rrcm.a	#1,	r4	
    39f6:	ae 01 6e 00 	adda	#0x1006e,r14	
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    39fa:	00 00       	bra	@r0		
        PPMMin[i] = PPMValue[i];
    39fc:	00 00       	bra	@r0		
    39fe:	00 00       	bra	@r0		
    3a00:	44 00       	rrcm.a	#1,	r4	
    3a02:	b3 01       	.word	0x01b3;	????	Illegal as address instr
    3a04:	74 00 00 00 	mova	r0,	0(r4)	;0x0000(r4)
    3a08:	00 00       	bra	@r0		
    3a0a:	00 00       	bra	@r0		
    3a0c:	44 00       	rrcm.a	#1,	r4	
    3a0e:	b4 01 78 00 	suba	#0x10078,r4	
    3a12:	00 00       	bra	@r0		
    3a14:	00 00       	bra	@r0		
    3a16:	00 00       	bra	@r0		
    3a18:	44 00       	rrcm.a	#1,	r4	
    3a1a:	b6 01 7c 00 	suba	#0x1007c,r6	
    3a1e:	00 00       	bra	@r0		
    3a20:	00 00       	bra	@r0		
    3a22:	00 00       	bra	@r0		
    3a24:	44 00       	rrcm.a	#1,	r4	
        PPMMax[i] = PPMMin[i];
    3a26:	b7 01 8a 00 	suba	#0x1008a,r7	
    3a2a:	00 00       	bra	@r0		
    3a2c:	00 00       	bra	@r0		
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    3a2e:	00 00       	bra	@r0		
    3a30:	44 00       	rrcm.a	#1,	r4	
    3a32:	b8 01 98 00 	suba	#0x10098,r8	
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    3a36:	00 00       	bra	@r0		
        draw_rc_inputs(1);
    3a38:	92 2c       	jc	$+294    	;abs 0x3b5e
    3a3a:	00 00       	bra	@r0		
    3a3c:	40 00       	rrcm.a	#1,	r0	
        lcd_goto(0, 14);
    3a3e:	a4 01 0b 00 	adda	#0x1000b,r4	
    3a42:	00 00       	bra	@r0		
    3a44:	0d 2b       	jnc	$-484    	;abs 0x3860
    3a46:	00 00       	bra	@r0		
        printf("%d ", k);
    3a48:	40 00       	rrcm.a	#1,	r0	
    3a4a:	a6 01 0a 00 	adda	#0x1000a,r6	
    3a4e:	00 00       	bra	@r0		
    3a50:	19 2b       	jnc	$-460    	;abs 0x3884
        delayms(1);
    3a52:	00 00       	bra	@r0		
    3a54:	40 00       	rrcm.a	#1,	r0	
    3a56:	a6 01 09 00 	adda	#0x10009,r6	
        for(i = 0; i < 8; i++){ // pega max min
    3a5a:	00 00       	bra	@r0		
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    3a5c:	00 00       	bra	@r0		
    3a5e:	00 00       	bra	@r0		
    3a60:	c0 00       	bra	r0		
    3a62:	00 00       	bra	@r0		
    3a64:	1a 00       	mova	#0x00000,r10	
    3a66:	00 00       	bra	@r0		
    3a68:	00 00       	bra	@r0		
    3a6a:	00 00       	bra	@r0		
    3a6c:	e0 00       	adda	r0,	r0	
    3a6e:	00 00       	bra	@r0		
    3a70:	98 00 00 00 	cmpa	#0x00000,r8	
    3a74:	00 00       	bra	@r0		
    3a76:	00 00       	bra	@r0		
    3a78:	24 00 00 00 	mova	&0x00000,r4	
    3a7c:	a4 00 00 00 	adda	#0x00000,r4	
    3a80:	9b 2c       	jc	$+312    	;abs 0x3bb8
    3a82:	00 00       	bra	@r0		
    3a84:	24 00 bb 01 	mova	&0x001bb,r4	
    3a88:	4a 4c       	mov.b	r12,	r10	
    3a8a:	00 00       	bra	@r0		
    3a8c:	00 00       	bra	@r0		
    3a8e:	00 00       	bra	@r0		
    3a90:	44 00       	rrcm.a	#1,	r4	
    3a92:	bb 01 00 00 	suba	#0x10000,r11	
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
    3a96:	00 00       	bra	@r0		
    3a98:	00 00       	bra	@r0		
    3a9a:	00 00       	bra	@r0		
    3a9c:	44 00       	rrcm.a	#1,	r4	
    3a9e:	bc 01 00 00 	suba	#0x10000,r12	
    3aa2:	00 00       	bra	@r0		
    3aa4:	00 00       	bra	@r0		
    3aa6:	00 00       	bra	@r0		
    3aa8:	44 00       	rrcm.a	#1,	r4	
    3aaa:	bd 01 0c 00 	suba	#0x1000c,r13	
    3aae:	00 00       	bra	@r0		
    3ab0:	00 00       	bra	@r0		
    3ab2:	00 00       	bra	@r0		
    3ab4:	44 00       	rrcm.a	#1,	r4	
    3ab6:	bf 01 10 00 	suba	#0x10010,r15	
    3aba:	00 00       	bra	@r0		
    3abc:	00 00       	bra	@r0		
    3abe:	00 00       	bra	@r0		
    3ac0:	44 00       	rrcm.a	#1,	r4	
    3ac2:	c0 01       	bra	r1		
    3ac4:	14 00       	mova	#0x00000,r4	
    3ac6:	00 00       	bra	@r0		
    3ac8:	00 00       	bra	@r0		
    3aca:	00 00       	bra	@r0		
                PPMMin[i] = PPMValue[i];
    3acc:	24 00 00 00 	mova	&0x00000,r4	
    3ad0:	16 00       	mova	#0x00000,r6	
    3ad2:	00 00       	bra	@r0		
    3ad4:	af 2c       	jc	$+352    	;abs 0x3c34
    3ad6:	00 00       	bra	@r0		
    3ad8:	24 00 c3 01 	mova	&0x001c3,r4	
    3adc:	60 4c       	br	@r12		
    3ade:	00 00       	bra	@r0		
    3ae0:	cb 2a       	jnc	$-616    	;abs 0x3878
    3ae2:	00 00       	bra	@r0		
    3ae4:	40 00       	rrcm.a	#1,	r0	
    3ae6:	c2 01       	mova	r1,	r2	
    3ae8:	0f 00       	mova	@r0,	r15	
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
    3aea:	00 00       	bra	@r0		
    3aec:	d5 2a       	jnc	$-596    	;abs 0x3898
    3aee:	00 00       	bra	@r0		
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    3af0:	40 00       	rrcm.a	#1,	r0	
    3af2:	c2 01       	mova	r1,	r2	
    3af4:	0e 00       	mova	@r0,	r14	
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    lcd_clear(BLACK);
    3af6:	00 00       	bra	@r0		
    3af8:	00 00       	bra	@r0		
    3afa:	00 00       	bra	@r0		
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
    3afc:	44 00       	rrcm.a	#1,	r4	
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
    3afe:	c3 01       	.word	0x01c3;	????	Illegal as address instr
	...
    3b08:	44 00       	rrcm.a	#1,	r4	
    3b0a:	c4 01       	mova	r1,	r4	
	...
    3b14:	44 00       	rrcm.a	#1,	r4	
    3b16:	c5 01       	mova	r1,	r5	
    3b18:	08 00       	mova	@r0,	r8	
    3b1a:	00 00       	bra	@r0		
    3b1c:	00 00       	bra	@r0		
    3b1e:	00 00       	bra	@r0		
    3b20:	44 00       	rrcm.a	#1,	r4	
    3b22:	c7 01       	mova	r1,	r7	
    3b24:	10 00       	bra	#0x00000	
    3b26:	00 00       	bra	@r0		
    3b28:	00 00       	bra	@r0		
    3b2a:	00 00       	bra	@r0		
    3b2c:	44 00       	rrcm.a	#1,	r4	
    3b2e:	c8 01       	mova	r1,	r8	
    3b30:	14 00       	mova	#0x00000,r4	
    3b32:	00 00       	bra	@r0		
    3b34:	00 00       	bra	@r0		
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    3b36:	00 00       	bra	@r0		
    3b38:	44 00       	rrcm.a	#1,	r4	
    3b3a:	c9 01       	mova	r1,	r9	
    3b3c:	18 00       	mova	#0x00000,r8	
    3b3e:	00 00       	bra	@r0		
    3b40:	00 00       	bra	@r0		
    3b42:	00 00       	bra	@r0		
    3b44:	24 00 00 00 	mova	&0x00000,r4	
    3b48:	1a 00       	mova	#0x00000,r10	
    3b4a:	00 00       	bra	@r0		
    3b4c:	c0 2c       	jc	$+386    	;abs 0x3cce
    3b4e:	00 00       	bra	@r0		
    3b50:	24 00 cc 01 	mova	&0x001cc,r4	
        }
    }
    
    lcd_clear(BLACK);
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
    3b54:	7a 4c       	mov.b	@r12+,	r10	
    3b56:	00 00       	bra	@r0		
    3b58:	d3 2c       	jc	$+424    	;abs 0x3d00
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
    3b5a:	00 00       	bra	@r0		
    3b5c:	40 00       	rrcm.a	#1,	r0	
    3b5e:	cb 01       	mova	r1,	r11	
        i2c_change_address(EEPROM_I2C_ADDR);
    3b60:	0b 00       	mova	@r0,	r11	
    3b62:	00 00       	bra	@r0		
    3b64:	00 00       	bra	@r0		
    3b66:	00 00       	bra	@r0		
        
        // grava yaw slope 
        ValorAux.f = PPMSlope[YAW_CH];
    3b68:	44 00       	rrcm.a	#1,	r4	
    3b6a:	cc 01       	mova	r1,	r12	
	...
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    3b74:	44 00       	rrcm.a	#1,	r4	
    3b76:	d1 01       	cmpa	r1,	r1	
    3b78:	0e 00       	mova	@r0,	r14	
    3b7a:	00 00       	bra	@r0		
    3b7c:	00 00       	bra	@r0		
    3b7e:	00 00       	bra	@r0		
    3b80:	44 00       	rrcm.a	#1,	r4	
    3b82:	d2 01       	cmpa	r1,	r2	
        
        delayms(100);
    3b84:	1e 00       	mova	#0x00000,r14	
    3b86:	00 00       	bra	@r0		
    3b88:	00 00       	bra	@r0		
    3b8a:	00 00       	bra	@r0		
        
        // grava throttle slope 
        ValorAux.f = PPMSlope[THROTTLE_CH];
    3b8c:	44 00       	rrcm.a	#1,	r4	
    3b8e:	d3 01       	.word	0x01d3;	????	Illegal as address instr
    3b90:	2c 00 00 00 	mova	&0x00000,r12	
    3b94:	00 00       	bra	@r0		
    3b96:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    3b98:	44 00       	rrcm.a	#1,	r4	
    3b9a:	d4 01       	cmpa	r1,	r4	
    3b9c:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x03b9e
    3ba0:	00 00       	bra	@r0		
    3ba2:	00 00       	bra	@r0		
    3ba4:	44 00       	rrcm.a	#1,	r4	
    3ba6:	d7 01       	cmpa	r1,	r7	
        
        delayms(100);
    3ba8:	4a 00       	rrcm.a	#1,	r10	
    3baa:	00 00       	bra	@r0		
    3bac:	00 00       	bra	@r0		
    3bae:	00 00       	bra	@r0		
        
        // grava pitch slope 
        ValorAux.f = PPMSlope[PITCH_CH];
    3bb0:	44 00       	rrcm.a	#1,	r4	
    3bb2:	d8 01       	cmpa	r1,	r8	
    3bb4:	4c 00       	rrcm.a	#1,	r12	
    3bb6:	00 00       	bra	@r0		
    3bb8:	00 00       	bra	@r0		
    3bba:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    3bbc:	44 00       	rrcm.a	#1,	r4	
    3bbe:	da 01       	cmpa	r1,	r10	
    3bc0:	56 00       	rrcm	#1,	r6	
    3bc2:	00 00       	bra	@r0		
    3bc4:	00 00       	bra	@r0		
    3bc6:	00 00       	bra	@r0		
    3bc8:	44 00       	rrcm.a	#1,	r4	
    3bca:	dc 01       	cmpa	r1,	r12	
        
        delayms(100);
    3bcc:	5c 00       	rrcm	#1,	r12	
    3bce:	00 00       	bra	@r0		
    3bd0:	00 00       	bra	@r0		
    3bd2:	00 00       	bra	@r0		
        
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
    3bd4:	44 00       	rrcm.a	#1,	r4	
    3bd6:	dd 01       	cmpa	r1,	r13	
    3bd8:	68 00 00 00 	mova	r0,	&0x80000
    3bdc:	00 00       	bra	@r0		
    3bde:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    3be0:	44 00       	rrcm.a	#1,	r4	
    3be2:	df 01       	cmpa	r1,	r15	
    3be4:	6e 00 00 00 	mova	r0,	&0xe0000
    3be8:	00 00       	bra	@r0		
    3bea:	00 00       	bra	@r0		
    3bec:	44 00       	rrcm.a	#1,	r4	
    3bee:	e0 01       	adda	r1,	r0	
        
        delayms(100);
    3bf0:	72 00 00 00 	mova	r0,	&0x0000	
    3bf4:	00 00       	bra	@r0		
    3bf6:	00 00       	bra	@r0		
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
    3bf8:	44 00       	rrcm.a	#1,	r4	
    3bfa:	dd 01       	cmpa	r1,	r13	
    3bfc:	80 00 00 00 	bra	#0x00000	
    3c00:	00 00       	bra	@r0		
    3c02:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    3c04:	44 00       	rrcm.a	#1,	r4	
    3c06:	e3 01       	.word	0x01e3;	????	Illegal as address instr
    3c08:	92 00 00 00 	cmpa	#0x00000,r2	
    3c0c:	00 00       	bra	@r0		
    3c0e:	00 00       	bra	@r0		
    3c10:	44 00       	rrcm.a	#1,	r4	
    3c12:	e4 01       	adda	r1,	r4	
        
        delayms(100);
    3c14:	9c 00 00 00 	cmpa	#0x00000,r12	
    3c18:	00 00       	bra	@r0		
    3c1a:	00 00       	bra	@r0		
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    3c1c:	44 00       	rrcm.a	#1,	r4	
    3c1e:	da 01       	cmpa	r1,	r10	
    3c20:	9e 00 00 00 	cmpa	#0x00000,r14	
    3c24:	00 00       	bra	@r0		
    3c26:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    3c28:	44 00       	rrcm.a	#1,	r4	
    3c2a:	e6 01       	adda	r1,	r6	
    3c2c:	a4 00 00 00 	adda	#0x00000,r4	
    3c30:	1c 2a       	jnc	$-966    	;abs 0x386a
    3c32:	00 00       	bra	@r0		
    3c34:	40 00       	rrcm.a	#1,	r0	
    3c36:	ce 01       	mova	r1,	r14	
        
        delayms(100);
    3c38:	0a 00       	mova	@r0,	r10	
    3c3a:	00 00       	bra	@r0		
    3c3c:	dd 2c       	jc	$+444    	;abs 0x3df8
    3c3e:	00 00       	bra	@r0		
        
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
    3c40:	40 00       	rrcm.a	#1,	r0	
    3c42:	ce 01       	mova	r1,	r14	
    3c44:	07 00       	mova	@r0,	r7	
    3c46:	00 00       	bra	@r0		
    3c48:	0f 2a       	jnc	$-992    	;abs 0x3868
    3c4a:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    3c4c:	40 00       	rrcm.a	#1,	r0	
    3c4e:	ce 01       	mova	r1,	r14	
    3c50:	08 00       	mova	@r0,	r8	
    3c52:	00 00       	bra	@r0		
    3c54:	00 00       	bra	@r0		
    3c56:	00 00       	bra	@r0		
    3c58:	c0 00       	bra	r0		
    3c5a:	00 00       	bra	@r0		
        
        delayms(100);
    3c5c:	0e 00       	mova	@r0,	r14	
    3c5e:	00 00       	bra	@r0		
    3c60:	00 00       	bra	@r0		
    3c62:	00 00       	bra	@r0		
        
        // grava yaw offset 
        ValorAux.f = PPMOffset[YAW_CH];
    3c64:	e0 00       	adda	r0,	r0	
    3c66:	00 00       	bra	@r0		
    3c68:	a4 00 00 00 	adda	#0x00000,r4	
    3c6c:	00 00       	bra	@r0		
    3c6e:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3c70:	24 00 00 00 	mova	&0x00000,r4	
    3c74:	b2 00 00 00 	suba	#0x00000,r2	
    3c78:	e7 2c       	jc	$+464    	;abs 0x3e48
    3c7a:	00 00       	bra	@r0		
    3c7c:	24 00 e9 01 	mova	&0x001e9,r4	
        
        delayms(100);
    3c80:	2c 4d       	mov	@r13,	r12	
    3c82:	00 00       	bra	@r0		
    3c84:	d3 2c       	jc	$+424    	;abs 0x3e2c
    3c86:	00 00       	bra	@r0		
        
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
    3c88:	40 00       	rrcm.a	#1,	r0	
    3c8a:	e8 01       	adda	r1,	r8	
    3c8c:	0b 00       	mova	@r0,	r11	
    3c8e:	00 00       	bra	@r0		
    3c90:	00 00       	bra	@r0		
    3c92:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    3c94:	44 00       	rrcm.a	#1,	r4	
    3c96:	e9 01       	adda	r1,	r9	
	...
    3ca0:	44 00       	rrcm.a	#1,	r4	
    3ca2:	ea 01       	adda	r1,	r10	
        
        delayms(100);
    3ca4:	04 00       	mova	@r0,	r4	
    3ca6:	00 00       	bra	@r0		
    3ca8:	00 00       	bra	@r0		
    3caa:	00 00       	bra	@r0		
        
        // grava pitch offset 
        ValorAux.f = PPMOffset[PITCH_CH];
    3cac:	44 00       	rrcm.a	#1,	r4	
    3cae:	f0 01       	suba	r1,	r0	
    3cb0:	12 00       	mova	#0x00000,r2	
    3cb2:	00 00       	bra	@r0		
    3cb4:	00 00       	bra	@r0		
    3cb6:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    3cb8:	44 00       	rrcm.a	#1,	r4	
    3cba:	f3 01       	.word	0x01f3;	????	Illegal as address instr
    3cbc:	28 00 00 00 	mova	&0x00000,r8	
    3cc0:	00 00       	bra	@r0		
    3cc2:	00 00       	bra	@r0		
    3cc4:	44 00       	rrcm.a	#1,	r4	
    3cc6:	f4 01       	suba	r1,	r4	
        
        delayms(100);
    3cc8:	2c 00 00 00 	mova	&0x00000,r12	
    3ccc:	00 00       	bra	@r0		
    3cce:	00 00       	bra	@r0		
        
        // grava roll offset 
        ValorAux.f = PPMOffset[ROLL_CH];
    3cd0:	44 00       	rrcm.a	#1,	r4	
    3cd2:	f5 01       	suba	r1,	r5	
    3cd4:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x03cd6
    3cd8:	00 00       	bra	@r0		
    3cda:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    3cdc:	44 00       	rrcm.a	#1,	r4	
    3cde:	ee 01       	adda	r1,	r14	
    3ce0:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x03ce2
    3ce4:	00 00       	bra	@r0		
    3ce6:	00 00       	bra	@r0		
    3ce8:	44 00       	rrcm.a	#1,	r4	
    3cea:	ef 01       	adda	r1,	r15	
        
        delayms(100);
    3cec:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x03cee
    3cf0:	00 00       	bra	@r0		
    3cf2:	00 00       	bra	@r0		
        
        // grava ch5 offset 
        ValorAux.f = PPMOffset[CH5_CH];
    3cf4:	44 00       	rrcm.a	#1,	r4	
    3cf6:	ec 01       	adda	r1,	r12	
    3cf8:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x03cfa
    3cfc:	00 00       	bra	@r0		
    3cfe:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    3d00:	44 00       	rrcm.a	#1,	r4	
    3d02:	f8 01       	suba	r1,	r8	
    3d04:	42 00       	rrcm.a	#1,	r2	
    3d06:	00 00       	bra	@r0		
    3d08:	00 00       	bra	@r0		
    3d0a:	00 00       	bra	@r0		
    3d0c:	24 00 00 00 	mova	&0x00000,r4	
        
        delayms(100);
    3d10:	46 00       	rrcm.a	#1,	r6	
    3d12:	00 00       	bra	@r0		
    3d14:	fb 2c       	jc	$+504    	;abs 0x3f0c
    3d16:	00 00       	bra	@r0		
        
        // grava ch6 offset 
        ValorAux.f = PPMOffset[CH6_CH];
    3d18:	24 00 fa 01 	mova	&0x001fa,r4	
    3d1c:	72 4d       	mov.b	@r13+,	r2	
    3d1e:	00 00       	bra	@r0		
    3d20:	17 2d       	jc	$+560    	;abs 0x3f50
    3d22:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    3d24:	40 00       	rrcm.a	#1,	r0	
    3d26:	fa 01       	suba	r1,	r10	
    3d28:	06 00       	mova	@r0,	r6	
    3d2a:	00 00       	bra	@r0		
    3d2c:	20 2d       	jc	$+578    	;abs 0x3f6e
    3d2e:	00 00       	bra	@r0		
    3d30:	40 00       	rrcm.a	#1,	r0	
    3d32:	fa 01       	suba	r1,	r10	
        
        delayms(100);
    3d34:	05 00       	mova	@r0,	r5	
    3d36:	00 00       	bra	@r0		
    3d38:	29 2d       	jc	$+596    	;abs 0x3f8c
    3d3a:	00 00       	bra	@r0		
        
        // grava ch7 offset 
        ValorAux.f = PPMOffset[CH7_CH];
    3d3c:	40 00       	rrcm.a	#1,	r0	
    3d3e:	fa 01       	suba	r1,	r10	
    3d40:	08 00       	mova	@r0,	r8	
    3d42:	00 00       	bra	@r0		
    3d44:	33 2d       	jc	$+616    	;abs 0x3fac
    3d46:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    3d48:	40 00       	rrcm.a	#1,	r0	
    3d4a:	fa 01       	suba	r1,	r10	
    3d4c:	07 00       	mova	@r0,	r7	
    3d4e:	00 00       	bra	@r0		
    3d50:	f4 2b       	jnc	$-22     	;abs 0x3d3a
    3d52:	00 00       	bra	@r0		
    3d54:	a0 00 fa 01 	adda	#0x001fa,r0	
        
        delayms(100);
    3d58:	00 00       	bra	@r0		
    3d5a:	00 00       	bra	@r0		
    3d5c:	3d 2d       	jc	$+636    	;abs 0x3fd8
    3d5e:	00 00       	bra	@r0		
        
        lcd_goto(2,2);
    3d60:	a0 00 fa 01 	adda	#0x001fa,r0	
    3d64:	02 00       	mova	@r0,	r2	
    3d66:	00 00       	bra	@r0		
        printf("Params saved.");
    3d68:	52 2d       	jc	$+678    	;abs 0x400e
    3d6a:	00 00       	bra	@r0		
    3d6c:	a0 00 fa 01 	adda	#0x001fa,r0	
        delayms(2000);
    3d70:	04 00       	mova	@r0,	r4	
    3d72:	00 00       	bra	@r0		
    3d74:	00 00       	bra	@r0		
    3d76:	00 00       	bra	@r0		
    3d78:	44 00       	rrcm.a	#1,	r4	
    3d7a:	fa 01       	suba	r1,	r10	
	...
    3d84:	44 00       	rrcm.a	#1,	r4	
    3d86:	fb 01       	suba	r1,	r11	
    3d88:	28 00 00 00 	mova	&0x00000,r8	
    3d8c:	00 00       	bra	@r0		
    3d8e:	00 00       	bra	@r0		
    3d90:	44 00       	rrcm.a	#1,	r4	
    3d92:	fc 01       	suba	r1,	r12	
    3d94:	48 00       	rrcm.a	#1,	r8	
    3d96:	00 00       	bra	@r0		
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
    3d98:	00 00       	bra	@r0		
    3d9a:	00 00       	bra	@r0		
    3d9c:	44 00       	rrcm.a	#1,	r4	
    3d9e:	fd 01       	suba	r1,	r13	
    3da0:	56 00       	rrcm	#1,	r6	
    3da2:	00 00       	bra	@r0		
    3da4:	00 00       	bra	@r0		
    3da6:	00 00       	bra	@r0		
    3da8:	44 00       	rrcm.a	#1,	r4	
    3daa:	fe 01       	suba	r1,	r14	
    3dac:	6c 00 00 00 	mova	r0,	&0xc0000
    3db0:	01 2c       	jc	$+4      	;abs 0x3db4
    3db2:	00 00       	bra	@r0		
    3db4:	40 00       	rrcm.a	#1,	r0	
    3db6:	fa 01       	suba	r1,	r10	
    3db8:	09 00       	mova	@r0,	r9	
    3dba:	00 00       	bra	@r0		
    3dbc:	61 2d       	jc	$+708    	;abs 0x4080
    3dbe:	00 00       	bra	@r0		
    3dc0:	40 00       	rrcm.a	#1,	r0	
    3dc2:	fa 01       	suba	r1,	r10	
    3dc4:	04 00       	mova	@r0,	r4	
    3dc6:	00 00       	bra	@r0		
    3dc8:	76 2d       	jc	$+750    	;abs 0x40b6
    3dca:	00 00       	bra	@r0		
    3dcc:	40 00       	rrcm.a	#1,	r0	
    3dce:	fa 01       	suba	r1,	r10	
    3dd0:	0f 00       	mova	@r0,	r15	
    3dd2:	00 00       	bra	@r0		
    3dd4:	00 00       	bra	@r0		
    3dd6:	00 00       	bra	@r0		
    3dd8:	24 00 00 00 	mova	&0x00000,r4	
    3ddc:	7e 00 00 00 	mova	r0,	0(r14)	;0x0000(r14)
        
        lcd_goto(2,2);
        printf("Params saved.");
        delayms(2000);
    }
}
    3de0:	85 2d       	jc	$+780    	;abs 0x40ec
    3de2:	00 00       	bra	@r0		
    3de4:	20 00 12 00 	bra	&0x00012	
    3de8:	00 00       	bra	@r0		
    3dea:	00 00       	bra	@r0		
    3dec:	91 2d       	jc	$+804    	;abs 0x4110
    3dee:	00 00       	bra	@r0		
    3df0:	20 00 14 00 	bra	&0x00014	

void process_rc(void){
    3df4:	00 00       	bra	@r0		
    ChannelInput[THROTTLE_CH] = PPMValue[THROTTLE_CH] * PPMSlope[THROTTLE_CH] + PPMOffset[THROTTLE_CH];
    3df6:	00 00       	bra	@r0		
    3df8:	9e 2d       	jc	$+830    	;abs 0x4136
    3dfa:	00 00       	bra	@r0		
    3dfc:	20 00 16 00 	bra	&0x00016	
    3e00:	00 00       	bra	@r0		
    3e02:	00 00       	bra	@r0		
    3e04:	aa 2d       	jc	$+854    	;abs 0x415a
    3e06:	00 00       	bra	@r0		
    3e08:	20 00 18 00 	bra	&0x00018	
    3e0c:	00 00       	bra	@r0		
    3e0e:	00 00       	bra	@r0		
    3e10:	b7 2d       	jc	$+880    	;abs 0x4180
    3e12:	00 00       	bra	@r0		
    3e14:	20 00 1a 00 	bra	&0x0001a	
    3e18:	00 00       	bra	@r0		
    3e1a:	00 00       	bra	@r0		
    3e1c:	c3 2d       	jc	$+904    	;abs 0x41a4
    3e1e:	00 00       	bra	@r0		
    3e20:	20 00 1c 00 	bra	&0x0001c	
    3e24:	00 00       	bra	@r0		
    3e26:	00 00       	bra	@r0		
    3e28:	d1 2d       	jc	$+932    	;abs 0x41cc
    3e2a:	00 00       	bra	@r0		
    ChannelInput[YAW_CH] = PPMValue[YAW_CH] * PPMSlope[YAW_CH] + PPMOffset[YAW_CH];
    3e2c:	20 00 1e 00 	bra	&0x0001e	
    3e30:	00 00       	bra	@r0		
    3e32:	00 00       	bra	@r0		
    3e34:	df 2d       	jc	$+960    	;abs 0x41f4
    3e36:	00 00       	bra	@r0		
    3e38:	20 00 20 00 	bra	&0x00020	
    3e3c:	00 00       	bra	@r0		
    3e3e:	00 00       	bra	@r0		
    3e40:	ee 2d       	jc	$+990    	;abs 0x421e
    3e42:	00 00       	bra	@r0		
    3e44:	20 00 88 00 	bra	&0x00088	
    3e48:	00 00       	bra	@r0		
    3e4a:	00 00       	bra	@r0		
    3e4c:	fc 2d       	jc	$+1018   	;abs 0x4246
    3e4e:	00 00       	bra	@r0		
    3e50:	20 00 8c 00 	bra	&0x0008c	
    3e54:	00 00       	bra	@r0		
    3e56:	00 00       	bra	@r0		
    3e58:	0a 2e       	jc	$-1002   	;abs 0x3a6e
    3e5a:	00 00       	bra	@r0		
    3e5c:	20 00 90 00 	bra	&0x00090	
    3e60:	00 00       	bra	@r0		
    ChannelInput[PITCH_CH] = PPMValue[PITCH_CH] * PPMSlope[PITCH_CH] + PPMOffset[PITCH_CH]; // pitch invertido
    3e62:	00 00       	bra	@r0		
    3e64:	18 2e       	jc	$-974    	;abs 0x3a96
    3e66:	00 00       	bra	@r0		
    3e68:	20 00 94 00 	bra	&0x00094	
    3e6c:	00 00       	bra	@r0		
    3e6e:	00 00       	bra	@r0		
    3e70:	26 2e       	jc	$-946    	;abs 0x3abe
    3e72:	00 00       	bra	@r0		
    3e74:	20 00 98 00 	bra	&0x00098	
    3e78:	00 00       	bra	@r0		
    3e7a:	00 00       	bra	@r0		
    3e7c:	34 2e       	jc	$-918    	;abs 0x3ae6
    3e7e:	00 00       	bra	@r0		
    3e80:	20 00 9c 00 	bra	&0x0009c	
    3e84:	00 00       	bra	@r0		
    3e86:	00 00       	bra	@r0		
    3e88:	cf 1a       	.word	0x1acf;	????	
    3e8a:	00 00       	bra	@r0		
    3e8c:	20 00 7a 00 	bra	&0x0007a	
    3e90:	00 00       	bra	@r0		
    3e92:	00 00       	bra	@r0		
    3e94:	e3 1a       	.word	0x1ae3;	????	
    3e96:	00 00       	bra	@r0		
    ChannelInput[ROLL_CH] = PPMValue[ROLL_CH] * PPMSlope[ROLL_CH] + PPMOffset[ROLL_CH];
    3e98:	20 00 7c 00 	bra	&0x0007c	
    3e9c:	00 00       	bra	@r0		
    3e9e:	00 00       	bra	@r0		
    3ea0:	f0 1a       	.word	0x1af0;	????	
    3ea2:	00 00       	bra	@r0		
    3ea4:	20 00 7e 00 	bra	&0x0007e	
    3ea8:	00 00       	bra	@r0		
    3eaa:	00 00       	bra	@r0		
    3eac:	fd 1a       	.word	0x1afd;	????	
    3eae:	00 00       	bra	@r0		
    3eb0:	20 00 80 00 	bra	&0x00080	
    3eb4:	00 00       	bra	@r0		
    3eb6:	00 00       	bra	@r0		
    3eb8:	0a 1b       	.word	0x1b0a;	????	
    3eba:	00 00       	bra	@r0		
    3ebc:	20 00 82 00 	bra	&0x00082	
    3ec0:	00 00       	bra	@r0		
    3ec2:	00 00       	bra	@r0		
    3ec4:	17 1b       	.word	0x1b17;	????	
    3ec6:	00 00       	bra	@r0		
    3ec8:	20 00 84 00 	bra	&0x00084	
    3ecc:	00 00       	bra	@r0		
    ChannelInput[CH5_CH] = PPMValue[CH5_CH] * PPMSlope[CH5_CH] + PPMOffset[CH5_CH];
    3ece:	00 00       	bra	@r0		
    3ed0:	23 1b       	.word	0x1b23;	????	
    3ed2:	00 00       	bra	@r0		
    3ed4:	20 00 86 00 	bra	&0x00086	
    3ed8:	00 00       	bra	@r0		
    3eda:	00 00       	bra	@r0		
    3edc:	30 1b       	.word	0x1b30;	????	
    3ede:	00 00       	bra	@r0		
    3ee0:	20 00 89 00 	bra	&0x00089	
    3ee4:	00 00       	bra	@r0		
    3ee6:	00 00       	bra	@r0		
    3ee8:	3d 1b       	.word	0x1b3d;	????	
    3eea:	00 00       	bra	@r0		
    3eec:	20 00 8f 00 	bra	&0x0008f	
    3ef0:	00 00       	bra	@r0		
    3ef2:	00 00       	bra	@r0		
    3ef4:	49 1b       	.word	0x1b49;	????	
    3ef6:	00 00       	bra	@r0		
    3ef8:	20 00 91 00 	bra	&0x00091	
    3efc:	00 00       	bra	@r0		
    3efe:	00 00       	bra	@r0		
    3f00:	56 1b       	.word	0x1b56;	????	
    3f02:	00 00       	bra	@r0		
    ChannelInput[CH6_CH] = PPMValue[CH6_CH] * PPMSlope[CH6_CH] + PPMOffset[CH6_CH];
    3f04:	20 00 93 00 	bra	&0x00093	
    3f08:	00 00       	bra	@r0		
    3f0a:	00 00       	bra	@r0		
    3f0c:	63 1b       	.word	0x1b63;	????	
    3f0e:	00 00       	bra	@r0		
    3f10:	20 00 95 00 	bra	&0x00095	
    3f14:	00 00       	bra	@r0		
    3f16:	00 00       	bra	@r0		
    3f18:	70 1b       	.word	0x1b70;	????	
    3f1a:	00 00       	bra	@r0		
    3f1c:	20 00 97 00 	bra	&0x00097	
    3f20:	00 00       	bra	@r0		
    3f22:	00 00       	bra	@r0		
    3f24:	7d 1b       	.word	0x1b7d;	????	
    3f26:	00 00       	bra	@r0		
    3f28:	20 00 99 00 	bra	&0x00099	
    3f2c:	00 00       	bra	@r0		
    3f2e:	00 00       	bra	@r0		
    3f30:	89 1b       	.word	0x1b89;	????	
    3f32:	00 00       	bra	@r0		
    3f34:	20 00 9b 00 	bra	&0x0009b	
    3f38:	00 00       	bra	@r0		
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
    3f3a:	00 00       	bra	@r0		
    3f3c:	96 1b       	.word	0x1b96;	????	
    3f3e:	00 00       	bra	@r0		
    3f40:	20 00 9e 00 	bra	&0x0009e	
    3f44:	00 00       	bra	@r0		
    3f46:	00 00       	bra	@r0		
    3f48:	a3 1b       	.word	0x1ba3;	????	
    3f4a:	00 00       	bra	@r0		
    3f4c:	20 00 a4 00 	bra	&0x000a4	
    3f50:	00 00       	bra	@r0		
    3f52:	00 00       	bra	@r0		
    3f54:	af 1b       	.word	0x1baf;	????	
    3f56:	00 00       	bra	@r0		
    3f58:	20 00 a6 00 	bra	&0x000a6	
    3f5c:	00 00       	bra	@r0		
    3f5e:	00 00       	bra	@r0		
    3f60:	bc 1b       	.word	0x1bbc;	????	
    3f62:	00 00       	bra	@r0		
    3f64:	20 00 a8 00 	bra	&0x000a8	
    3f68:	00 00       	bra	@r0		
    3f6a:	00 00       	bra	@r0		
    3f6c:	c9 1b       	.word	0x1bc9;	????	
    3f6e:	00 00       	bra	@r0		
    3f70:	20 00 aa 00 	bra	&0x000aa	
    3f74:	00 00       	bra	@r0		
    3f76:	00 00       	bra	@r0		
    3f78:	d6 1b       	.word	0x1bd6;	????	
    3f7a:	00 00       	bra	@r0		
    3f7c:	20 00 ad 00 	bra	&0x000ad	
    3f80:	00 00       	bra	@r0		
    3f82:	00 00       	bra	@r0		
    3f84:	e3 1b       	.word	0x1be3;	????	
    3f86:	00 00       	bra	@r0		
    3f88:	20 00 b3 00 	bra	&0x000b3	
    3f8c:	00 00       	bra	@r0		
    3f8e:	00 00       	bra	@r0		
    3f90:	ef 1b       	.word	0x1bef;	????	
    3f92:	00 00       	bra	@r0		
    3f94:	20 00 b5 00 	bra	&0x000b5	
    3f98:	00 00       	bra	@r0		
    3f9a:	00 00       	bra	@r0		
    3f9c:	fc 1b       	.word	0x1bfc;	????	
    3f9e:	00 00       	bra	@r0		
    3fa0:	20 00 b7 00 	bra	&0x000b7	
    3fa4:	00 00       	bra	@r0		
    3fa6:	00 00       	bra	@r0		
    3fa8:	09 1c       	.word	0x1c09;	????	
    3faa:	00 00       	bra	@r0		
    3fac:	20 00 b9 00 	bra	&0x000b9	
    3fb0:	00 00       	bra	@r0		
    3fb2:	00 00       	bra	@r0		
    3fb4:	16 1c       	.word	0x1c16;	????	
    3fb6:	00 00       	bra	@r0		
    3fb8:	20 00 bc 00 	bra	&0x000bc	
    3fbc:	00 00       	bra	@r0		
    3fbe:	00 00       	bra	@r0		
    3fc0:	23 1c       	.word	0x1c23;	????	
    3fc2:	00 00       	bra	@r0		
}
    3fc4:	20 00 c2 00 	bra	&0x000c2	

void load_transmitter_values(void){
    3fc8:	00 00       	bra	@r0		
    fourbytes ValorAux;

    if(EEPROMFound == 1){
    3fca:	00 00       	bra	@r0		
    3fcc:	2f 1c       	.word	0x1c2f;	????	
    3fce:	00 00       	bra	@r0		
        i2c_change_address(EEPROM_I2C_ADDR);    
    3fd0:	20 00 c4 00 	bra	&0x000c4	
    3fd4:	00 00       	bra	@r0		
    3fd6:	00 00       	bra	@r0		

        // load yaw slope e offset
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    3fd8:	3c 1c       	.word	0x1c3c;	????	
    3fda:	00 00       	bra	@r0		
    3fdc:	20 00 c6 00 	bra	&0x000c6	
    3fe0:	00 00       	bra	@r0		
    3fe2:	00 00       	bra	@r0		
        PPMSlope[YAW_CH] = ValorAux.f;
    3fe4:	49 1c       	.word	0x1c49;	????	
    3fe6:	00 00       	bra	@r0		
    3fe8:	20 00 c8 00 	bra	&0x000c8	
    3fec:	00 00       	bra	@r0		
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3fee:	00 00       	bra	@r0		
    3ff0:	56 1c       	.word	0x1c56;	????	
    3ff2:	00 00       	bra	@r0		
    3ff4:	20 00 cb 00 	bra	&0x000cb	
    3ff8:	00 00       	bra	@r0		
        PPMOffset[YAW_CH] = ValorAux.f;
    3ffa:	00 00       	bra	@r0		
    3ffc:	63 1c       	.word	0x1c63;	????	
    3ffe:	00 00       	bra	@r0		
    4000:	20 00 d1 00 	bra	&0x000d1	
        
        // load throttle slope  e offset
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    4004:	00 00       	bra	@r0		
    4006:	00 00       	bra	@r0		
    4008:	6f 1c       	.word	0x1c6f;	????	
    400a:	00 00       	bra	@r0		
    400c:	20 00 d3 00 	bra	&0x000d3	
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    4010:	00 00       	bra	@r0		
    4012:	00 00       	bra	@r0		
    4014:	7c 1c       	.word	0x1c7c;	????	
    4016:	00 00       	bra	@r0		
    4018:	20 00 d5 00 	bra	&0x000d5	
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    401c:	00 00       	bra	@r0		
    401e:	00 00       	bra	@r0		
    4020:	89 1c       	.word	0x1c89;	????	
    4022:	00 00       	bra	@r0		
    4024:	20 00 d7 00 	bra	&0x000d7	
        PPMOffset[THROTTLE_CH] = ValorAux.f;
    4028:	00 00       	bra	@r0		
    402a:	00 00       	bra	@r0		
    402c:	96 1c       	.word	0x1c96;	????	
    402e:	00 00       	bra	@r0		
        
        // load pitch slope  e offset
        i2c_read16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    4030:	20 00 da 00 	bra	&0x000da	
    4034:	00 00       	bra	@r0		
    4036:	00 00       	bra	@r0		
    4038:	a3 1c       	.word	0x1ca3;	????	
    403a:	00 00       	bra	@r0		
        PPMSlope[PITCH_CH] = ValorAux.f;
    403c:	20 00 e0 00 	bra	&0x000e0	
    4040:	00 00       	bra	@r0		
    4042:	00 00       	bra	@r0		
    4044:	af 1c       	.word	0x1caf;	????	
        i2c_read16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    4046:	00 00       	bra	@r0		
    4048:	20 00 e2 00 	bra	&0x000e2	
    404c:	00 00       	bra	@r0		
    404e:	00 00       	bra	@r0		
    4050:	bc 1c       	.word	0x1cbc;	????	
        PPMOffset[PITCH_CH] = ValorAux.f;
    4052:	00 00       	bra	@r0		
    4054:	20 00 e4 00 	bra	&0x000e4	
    4058:	00 00       	bra	@r0		
    405a:	00 00       	bra	@r0		
        
        // load roll slope  e offset
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    405c:	c9 1c       	.word	0x1cc9;	????	
    405e:	00 00       	bra	@r0		
    4060:	20 00 e6 00 	bra	&0x000e6	
    4064:	00 00       	bra	@r0		
    4066:	00 00       	bra	@r0		
        PPMSlope[ROLL_CH] = ValorAux.f;
    4068:	d6 1c       	.word	0x1cd6;	????	
    406a:	00 00       	bra	@r0		
    406c:	20 00 e9 00 	bra	&0x000e9	
    4070:	00 00       	bra	@r0		
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    4072:	00 00       	bra	@r0		
    4074:	e3 1c       	.word	0x1ce3;	????	
    4076:	00 00       	bra	@r0		
    4078:	20 00 ef 00 	bra	&0x000ef	
    407c:	00 00       	bra	@r0		
        PPMOffset[ROLL_CH] = ValorAux.f;
    407e:	00 00       	bra	@r0		
    4080:	ef 1c       	.word	0x1cef;	????	
    4082:	00 00       	bra	@r0		
    4084:	20 00 f1 00 	bra	&0x000f1	
    
        // load ch5 slope  e offset
        i2c_read16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    4088:	00 00       	bra	@r0		
    408a:	00 00       	bra	@r0		
    408c:	fc 1c       	.word	0x1cfc;	????	
    408e:	00 00       	bra	@r0		
    4090:	20 00 f3 00 	bra	&0x000f3	
        PPMSlope[CH5_CH] = ValorAux.f;
    4094:	00 00       	bra	@r0		
    4096:	00 00       	bra	@r0		
    4098:	09 1d       	.word	0x1d09;	????	
    409a:	00 00       	bra	@r0		
    409c:	20 00 f5 00 	bra	&0x000f5	
        i2c_read16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    40a0:	00 00       	bra	@r0		
    40a2:	00 00       	bra	@r0		
    40a4:	16 1d       	.word	0x1d16;	????	
    40a6:	00 00       	bra	@r0		
    40a8:	20 00 f8 00 	bra	&0x000f8	
        PPMOffset[CH5_CH] = ValorAux.f;
    40ac:	00 00       	bra	@r0		
    40ae:	00 00       	bra	@r0		
    40b0:	23 1d       	.word	0x1d23;	????	
    40b2:	00 00       	bra	@r0		
    
        // load ch6 slope  e offset
        i2c_read16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    40b4:	20 00 fc 00 	bra	&0x000fc	
    40b8:	00 00       	bra	@r0		
    40ba:	00 00       	bra	@r0		
    40bc:	33 1d       	.word	0x1d33;	????	
    40be:	00 00       	bra	@r0		
        PPMSlope[CH6_CH] = ValorAux.f;
    40c0:	20 00 fe 00 	bra	&0x000fe	
    40c4:	00 00       	bra	@r0		
    40c6:	00 00       	bra	@r0		
    40c8:	43 1d       	.word	0x1d43;	????	
        i2c_read16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    40ca:	00 00       	bra	@r0		
    40cc:	20 00 00 01 	bra	&0x00100	
    40d0:	00 00       	bra	@r0		
    40d2:	00 00       	bra	@r0		
    40d4:	52 1d       	.word	0x1d52;	????	
        PPMOffset[CH6_CH] = ValorAux.f;
    40d6:	00 00       	bra	@r0		
    40d8:	20 00 02 01 	bra	&0x00102	
    40dc:	00 00       	bra	@r0		
    40de:	00 00       	bra	@r0		
        
        // load ch7 slope  e offset
        i2c_read16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    40e0:	61 1d       	.word	0x1d61;	????	
    40e2:	00 00       	bra	@r0		
    40e4:	20 00 04 01 	bra	&0x00104	
    40e8:	00 00       	bra	@r0		
    40ea:	00 00       	bra	@r0		
        PPMSlope[CH7_CH] = ValorAux.f;
    40ec:	71 1d       	.word	0x1d71;	????	
    40ee:	00 00       	bra	@r0		
    40f0:	20 00 06 01 	bra	&0x00106	
    40f4:	00 00       	bra	@r0		
        i2c_read16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    40f6:	00 00       	bra	@r0		
    40f8:	81 1d       	.word	0x1d81;	????	
    40fa:	00 00       	bra	@r0		
    40fc:	20 00 08 01 	bra	&0x00108	
    4100:	00 00       	bra	@r0		
        PPMOffset[CH7_CH] = ValorAux.f;
    4102:	00 00       	bra	@r0		
    4104:	92 1d       	.word	0x1d92;	????	
    4106:	00 00       	bra	@r0		
    4108:	20 00 0a 01 	bra	&0x0010a	
    }
}
    410c:	00 00       	bra	@r0		
    410e:	00 00       	bra	@r0		
    4110:	a3 1d       	.word	0x1da3;	????	
    4112:	00 00       	bra	@r0		
    4114:	20 00 0c 01 	bra	&0x0010c	
    4118:	00 00       	bra	@r0		
    411a:	00 00       	bra	@r0		
    411c:	b4 1d       	.word	0x1db4;	????	
    411e:	00 00       	bra	@r0		
    4120:	20 00 0e 01 	bra	&0x0010e	
    4124:	00 00       	bra	@r0		
    4126:	00 00       	bra	@r0		
    4128:	c6 1d       	.word	0x1dc6;	????	
    412a:	00 00       	bra	@r0		
    412c:	20 00 10 01 	bra	&0x00110	

void draw_rc_inputs(char raw){
    4130:	00 00       	bra	@r0		
    4132:	00 00       	bra	@r0		
    4134:	d8 1d       	.word	0x1dd8;	????	
    4136:	00 00       	bra	@r0		
    4138:	20 00 13 01 	bra	&0x00113	
    unsigned int i = 0, k = 0, h = 0;
    lcd_goto(0,0);
    413c:	00 00       	bra	@r0		
    413e:	00 00       	bra	@r0		
    4140:	e8 1d       	.word	0x1de8;	????	
    4142:	00 00       	bra	@r0		
    printf("     RC inputs");
    4144:	20 00 15 01 	bra	&0x00115	
    4148:	00 00       	bra	@r0		
    414a:	00 00       	bra	@r0		
    lcd_goto(0,2);
    414c:	f8 1d       	.word	0x1df8;	????	
    414e:	00 00       	bra	@r0		
    4150:	20 00 17 01 	bra	&0x00117	
    
    for(i = 0; i < 8; i++){
    4154:	00 00       	bra	@r0		
        if(!raw){
    4156:	00 00       	bra	@r0		
    4158:	07 1e       	.word	0x1e07;	????	
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
    415a:	00 00       	bra	@r0		
    415c:	20 00 19 01 	bra	&0x00119	
    4160:	00 00       	bra	@r0		
    4162:	00 00       	bra	@r0		
    4164:	16 1e       	.word	0x1e16;	????	
    4166:	00 00       	bra	@r0		
    4168:	20 00 1b 01 	bra	&0x0011b	
    416c:	00 00       	bra	@r0		
    416e:	00 00       	bra	@r0		
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
        }
        k = 21 + (8 * i); //posicao inicial em y
    4170:	27 1e       	.word	0x1e27;	????	
    4172:	00 00       	bra	@r0		
    4174:	20 00 1d 01 	bra	&0x0011d	
    4178:	00 00       	bra	@r0		
        if(!raw){
    417a:	00 00       	bra	@r0		
    417c:	37 1e       	.word	0x1e37;	????	
            if(ChannelInput[i] > 4000){
    417e:	00 00       	bra	@r0		
    4180:	20 00 1f 01 	bra	&0x0011f	
    4184:	00 00       	bra	@r0		
                h=100;
            }
            else{
                if(ChannelInput[i] < 2001){
    4186:	00 00       	bra	@r0		
    4188:	48 1e       	.word	0x1e48;	????	
    418a:	00 00       	bra	@r0		
    418c:	20 00 21 01 	bra	&0x00121	
                    h = 0;
                }
                else{
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
    4190:	00 00       	bra	@r0		
    4192:	00 00       	bra	@r0		
    4194:	42 2e       	jc	$-890    	;abs 0x3e1a
    4196:	00 00       	bra	@r0		
    4198:	20 00 23 01 	bra	&0x00123	
    419c:	00 00       	bra	@r0		
    419e:	00 00       	bra	@r0		
    41a0:	54 2e       	jc	$-854    	;abs 0x3e4a
    41a2:	00 00       	bra	@r0		
    41a4:	20 00 25 01 	bra	&0x00125	
    41a8:	00 00       	bra	@r0		
    41aa:	00 00       	bra	@r0		
    41ac:	7d 1e       	.word	0x1e7d;	????	
    41ae:	00 00       	bra	@r0		
            if(PPMValue[i] > 4000){
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
                    h = 0;
    41b0:	20 00 2c 01 	bra	&0x0012c	
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
                h=100;
    41b4:	00 00       	bra	@r0		
    41b6:	00 00       	bra	@r0		
    41b8:	8d 1e       	.word	0x1e8d;	????	
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
    41ba:	00 00       	bra	@r0		
    41bc:	20 00 2e 01 	bra	&0x0012e	
    41c0:	00 00       	bra	@r0		
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
    41c2:	00 00       	bra	@r0		
    41c4:	9d 1e       	.word	0x1e9d;	????	
    41c6:	00 00       	bra	@r0		
    41c8:	20 00 30 01 	bra	&0x00130	
                    h = 0;
                }
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
    41cc:	00 00       	bra	@r0		
    41ce:	00 00       	bra	@r0		
    for(i = 0; i < 8; i++){
        if(!raw){
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
    41d0:	ac 1e       	.word	0x1eac;	????	
    41d2:	00 00       	bra	@r0		
    41d4:	20 00 32 01 	bra	&0x00132	
    41d8:	00 00       	bra	@r0		
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    41da:	00 00       	bra	@r0		
    41dc:	bb 1e       	.word	0x1ebb;	????	
    41de:	00 00       	bra	@r0		
    41e0:	20 00 34 01 	bra	&0x00134	
    41e4:	00 00       	bra	@r0		
    41e6:	00 00       	bra	@r0		
    41e8:	cb 1e       	.word	0x1ecb;	????	
    41ea:	00 00       	bra	@r0		
    41ec:	20 00 36 01 	bra	&0x00136	
    41f0:	00 00       	bra	@r0		
    41f2:	00 00       	bra	@r0		
    unsigned int i = 0, k = 0, h = 0;
    lcd_goto(0,0);
    printf("     RC inputs");
    lcd_goto(0,2);
    
    for(i = 0; i < 8; i++){
    41f4:	db 1e       	.word	0x1edb;	????	
    41f6:	00 00       	bra	@r0		
    41f8:	20 00 38 01 	bra	&0x00138	
    41fc:	00 00       	bra	@r0		
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}
    41fe:	00 00       	bra	@r0		
    4200:	ec 1e       	.word	0x1eec;	????	
    4202:	00 00       	bra	@r0		
    4204:	20 00 3a 01 	bra	&0x0013a	
    4208:	00 00       	bra	@r0		

int find_first(int startaddress){
    420a:	00 00       	bra	@r0		
    420c:	fd 1e       	.word	0x1efd;	????	
    for(; startaddress < 255; startaddress++){
    420e:	00 00       	bra	@r0		
    4210:	20 00 3c 01 	bra	&0x0013c	
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
        }
    }   
    return 0;
    4214:	00 00       	bra	@r0		
    4216:	00 00       	bra	@r0		
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
    4218:	0e 1f       	.word	0x1f0e;	????	
    421a:	00 00       	bra	@r0		
    421c:	20 00 3e 01 	bra	&0x0013e	
        if(!i2c_find_device()){
    4220:	00 00       	bra	@r0		
    4222:	00 00       	bra	@r0		
    4224:	20 1f       	.word	0x1f20;	????	
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
    4226:	00 00       	bra	@r0		
    4228:	20 00 40 01 	bra	&0x00140	
    422c:	00 00       	bra	@r0		
    422e:	00 00       	bra	@r0		
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
    4230:	32 1f       	.word	0x1f32;	????	
        }
    }   
    return 0;
}
    4232:	00 00       	bra	@r0		
    4234:	20 00 43 01 	bra	&0x00143	

// loop de controle
void main_loop(){
    
    
}
    4238:	00 00       	bra	@r0		
    423a:	00 00       	bra	@r0		
    423c:	42 1f       	.word	0x1f42;	????	
    423e:	00 00       	bra	@r0		
    4240:	20 00 45 01 	bra	&0x00145	
    4244:	00 00       	bra	@r0		
    4246:	00 00       	bra	@r0		
    4248:	52 1f       	.word	0x1f52;	????	
    424a:	00 00       	bra	@r0		
    424c:	20 00 47 01 	bra	&0x00147	
    4250:	00 00       	bra	@r0		
    4252:	00 00       	bra	@r0		
    4254:	61 1f       	.word	0x1f61;	????	
    4256:	00 00       	bra	@r0		
    4258:	20 00 49 01 	bra	&0x00149	
    425c:	00 00       	bra	@r0		
    425e:	00 00       	bra	@r0		
    4260:	70 1f       	.word	0x1f70;	????	
    4262:	00 00       	bra	@r0		
    4264:	20 00 4b 01 	bra	&0x0014b	
    4268:	00 00       	bra	@r0		
    426a:	00 00       	bra	@r0		
    426c:	81 1f       	.word	0x1f81;	????	
    426e:	00 00       	bra	@r0		
    4270:	20 00 4d 01 	bra	&0x0014d	
    4274:	00 00       	bra	@r0		
    4276:	00 00       	bra	@r0		
    4278:	91 1f       	.word	0x1f91;	????	
    427a:	00 00       	bra	@r0		
    427c:	20 00 4f 01 	bra	&0x0014f	
    4280:	00 00       	bra	@r0		
    4282:	00 00       	bra	@r0		
    4284:	a2 1f       	.word	0x1fa2;	????	
    4286:	00 00       	bra	@r0		
    4288:	20 00 51 01 	bra	&0x00151	

void setup(){
    
    clock_init();
    428c:	00 00       	bra	@r0		
    428e:	00 00       	bra	@r0		
    
    timer_a3_init();
    4290:	66 2e       	jc	$-818    	;abs 0x3f5e
    4292:	00 00       	bra	@r0		
    
    p1_init();
    4294:	20 00 53 01 	bra	&0x00153	
    
    analog_init();
    4298:	00 00       	bra	@r0		
    429a:	00 00       	bra	@r0		
    
    i2c_init();
    429c:	78 2e       	jc	$-782    	;abs 0x3f8e
    429e:	00 00       	bra	@r0		
    
    eint();
    42a0:	20 00 55 01 	bra	&0x00155	
    
    lcd_init(BLACK);
    42a4:	00 00       	bra	@r0		
    42a6:	00 00       	bra	@r0		
    
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));

    i2c_config(EEPROM_I2C_ADDR);
    42a8:	d7 1f       	.word	0x1fd7;	????	
    42aa:	00 00       	bra	@r0		
    42ac:	20 00 58 01 	bra	&0x00158	
    EEPROMFound = !(i2c_find_device());
    42b0:	00 00       	bra	@r0		
    42b2:	00 00       	bra	@r0		
    42b4:	e4 1f       	.word	0x1fe4;	????	
    42b6:	00 00       	bra	@r0		
    42b8:	20 00 5a 01 	bra	&0x0015a	
    42bc:	00 00       	bra	@r0		
    42be:	00 00       	bra	@r0		
    
    if(EEPROMFound){
    42c0:	8a 2e       	jc	$-746    	;abs 0x3fd6
    42c2:	00 00       	bra	@r0		
        printf("EEPROM found\n");
    42c4:	20 00 1a 00 	bra	&0x0001a	
    42c8:	00 00       	bra	@r0		
    42ca:	00 00       	bra	@r0		
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    42cc:	98 2e       	jc	$-718    	;abs 0x3ffe
    42ce:	00 00       	bra	@r0		
    42d0:	20 00 1c 00 	bra	&0x0001c	
    42d4:	00 00       	bra	@r0		
    42d6:	00 00       	bra	@r0		
    42d8:	a7 2e       	jc	$-688    	;abs 0x4028
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);
    42da:	00 00       	bra	@r0		
    42dc:	20 00 1e 00 	bra	&0x0001e	
    42e0:	00 00       	bra	@r0		
    42e2:	00 00       	bra	@r0		
    42e4:	b4 2e       	jc	$-662    	;abs 0x404e
    42e6:	00 00       	bra	@r0		
    42e8:	20 00 21 00 	bra	&0x00021	
    42ec:	00 00       	bra	@r0		
    42ee:	00 00       	bra	@r0		
    42f0:	c5 2e       	jc	$-628    	;abs 0x407c
    42f2:	00 00       	bra	@r0		
    42f4:	20 00 23 00 	bra	&0x00023	
    42f8:	00 00       	bra	@r0		

        //if(1){
        if(StatusFlags[0] != 0){
    42fa:	00 00       	bra	@r0		
    42fc:	d6 2e       	jc	$-594    	;abs 0x40aa
    42fe:	00 00       	bra	@r0		
    4300:	20 00 25 00 	bra	&0x00025	
            printf("Calibrando radio...\n");
    4304:	00 00       	bra	@r0		
    4306:	00 00       	bra	@r0		
    4308:	e6 2e       	jc	$-562    	;abs 0x40d6
            delayms(4000);
    430a:	00 00       	bra	@r0		
    430c:	20 00 27 00 	bra	&0x00027	
    4310:	00 00       	bra	@r0		
            calibrate_radio();
    4312:	00 00       	bra	@r0		
    4314:	f6 2e       	jc	$-530    	;abs 0x4102
            StatusFlags[0] = 0;
    4316:	00 00       	bra	@r0		
    4318:	20 00 47 00 	bra	&0x00047	
            StatusFlags[1] = 0;
    431c:	00 00       	bra	@r0		
            StatusFlags[2] = 0;
    431e:	00 00       	bra	@r0		
    4320:	07 2f       	jc	$-496    	;abs 0x4130
            i2c_write16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    4322:	00 00       	bra	@r0		
    4324:	20 00 49 00 	bra	&0x00049	
    4328:	00 00       	bra	@r0		
    432a:	00 00       	bra	@r0		
    432c:	17 2f       	jc	$-464    	;abs 0x415c
    432e:	00 00       	bra	@r0		
    4330:	20 00 ac 00 	bra	&0x000ac	
        }
        else{
            load_transmitter_values();
    4334:	00 00       	bra	@r0		
            printf("RC params loaded\n");
    4336:	00 00       	bra	@r0		
    4338:	26 2f       	jc	$-434    	;abs 0x4186
    433a:	00 00       	bra	@r0		
    433c:	20 00 16 00 	bra	&0x00016	
            //carregar os outros parametros
        }
    }
    else{
        color_fore = RED;
    4340:	00 00       	bra	@r0		
    4342:	00 00       	bra	@r0		
    4344:	33 2f       	jc	$-408    	;abs 0x41ac
        printf("EEPROM not found\n");
    4346:	00 00       	bra	@r0		
    4348:	20 00 18 00 	bra	&0x00018	
    434c:	00 00       	bra	@r0		
        color_fore = LIME;
    434e:	00 00       	bra	@r0		
    4350:	41 2f       	jc	$-380    	;abs 0x41d4
    4352:	00 00       	bra	@r0		
    }
    analog_graph_clear_all();    
    4354:	20 00 1a 00 	bra	&0x0001a	
    
    lcd_drawline(10,80,90,90,RED);
    4358:	00 00       	bra	@r0		
    435a:	00 00       	bra	@r0		
    435c:	4d 2f       	jc	$-356    	;abs 0x41f8
    435e:	00 00       	bra	@r0		
    4360:	20 00 1d 00 	bra	&0x0001d	
    4364:	00 00       	bra	@r0		
    4366:	00 00       	bra	@r0		
    4368:	5d 2f       	jc	$-324    	;abs 0x4224
    436a:	00 00       	bra	@r0		
    436c:	20 00 1f 00 	bra	&0x0001f	
    lcd_drawline(10,90,90,80,BLUE);
    4370:	00 00       	bra	@r0		
    4372:	00 00       	bra	@r0		
    4374:	6d 2f       	jc	$-292    	;abs 0x4250
    4376:	00 00       	bra	@r0		
    4378:	20 00 21 00 	bra	&0x00021	
    437c:	00 00       	bra	@r0		
    437e:	00 00       	bra	@r0		
    4380:	7d 2f       	jc	$-260    	;abs 0x427c
    4382:	00 00       	bra	@r0		
    4384:	20 00 23 00 	bra	&0x00023	
    
    delayms(1500);
    4388:	00 00       	bra	@r0		
    438a:	00 00       	bra	@r0		
    438c:	8c 2f       	jc	$-230    	;abs 0x42a6
    438e:	00 00       	bra	@r0		

    SetupDone = 1;
    4390:	20 00 25 00 	bra	&0x00025	
    4394:	00 00       	bra	@r0		
}
    4396:	00 00       	bra	@r0		
    4398:	9b 2f       	jc	$-200    	;abs 0x42d0

void analog_graph_clear_all(void){
    439a:	00 00       	bra	@r0		
    int i;
    for(i = 0; i < 8; i++){
    439c:	20 00 27 00 	bra	&0x00027	
        analog_graph_clear(i);
    43a0:	00 00       	bra	@r0		
    43a2:	00 00       	bra	@r0		
    SetupDone = 1;
}

void analog_graph_clear_all(void){
    int i;
    for(i = 0; i < 8; i++){
    43a4:	aa 2f       	jc	$-170    	;abs 0x42fa
    43a6:	00 00       	bra	@r0		
    43a8:	20 00 2c 00 	bra	&0x0002c	
        analog_graph_clear(i);
    }
}
    43ac:	00 00       	bra	@r0		
    43ae:	00 00       	bra	@r0		
    43b0:	ba 2f       	jc	$-138    	;abs 0x4326
    43b2:	00 00       	bra	@r0		
    43b4:	20 00 2e 00 	bra	&0x0002e	
    43b8:	00 00       	bra	@r0		
    43ba:	00 00       	bra	@r0		
    43bc:	ca 2f       	jc	$-106    	;abs 0x4352
    43be:	00 00       	bra	@r0		
    43c0:	20 00 30 00 	bra	&0x00030	
    43c4:	00 00       	bra	@r0		
    43c6:	00 00       	bra	@r0		
    43c8:	da 2f       	jc	$-74     	;abs 0x437e
    43ca:	00 00       	bra	@r0		
    43cc:	20 00 32 00 	bra	&0x00032	
    43d0:	00 00       	bra	@r0		
    43d2:	00 00       	bra	@r0		
    43d4:	ea 2f       	jc	$-42     	;abs 0x43aa
    43d6:	00 00       	bra	@r0		
    43d8:	20 00 34 00 	bra	&0x00034	
    43dc:	00 00       	bra	@r0		
    43de:	00 00       	bra	@r0		
    43e0:	f9 2f       	jc	$-12     	;abs 0x43d4
    43e2:	00 00       	bra	@r0		
    43e4:	20 00 36 00 	bra	&0x00036	
    43e8:	00 00       	bra	@r0		
    43ea:	00 00       	bra	@r0		
    43ec:	08 30       	jn	$+18     	;abs 0x43fe
    43ee:	00 00       	bra	@r0		
    43f0:	20 00 38 00 	bra	&0x00038	
    43f4:	00 00       	bra	@r0		
    43f6:	00 00       	bra	@r0		
    43f8:	17 30       	jn	$+48     	;abs 0x4428
    43fa:	00 00       	bra	@r0		
    43fc:	20 00 3a 00 	bra	&0x0003a	
    4400:	00 00       	bra	@r0		
    4402:	00 00       	bra	@r0		
    4404:	26 30       	jn	$+78     	;abs 0x4452
    4406:	00 00       	bra	@r0		
    4408:	20 00 7a 00 	bra	&0x0007a	
    440c:	00 00       	bra	@r0		
    440e:	00 00       	bra	@r0		
    4410:	9d 21       	jnz	$+828    	;abs 0x474c
    4412:	00 00       	bra	@r0		
    4414:	20 00 14 00 	bra	&0x00014	
    4418:	00 00       	bra	@r0		
    441a:	00 00       	bra	@r0		
    441c:	ab 21       	jnz	$+856    	;abs 0x4774
    441e:	00 00       	bra	@r0		
    4420:	20 00 16 00 	bra	&0x00016	
    4424:	00 00       	bra	@r0		
    4426:	00 00       	bra	@r0		
    4428:	ba 21       	jnz	$+886    	;abs 0x479e
    442a:	00 00       	bra	@r0		
    442c:	20 00 18 00 	bra	&0x00018	
    4430:	00 00       	bra	@r0		
    4432:	00 00       	bra	@r0		
    4434:	c9 21       	jnz	$+916    	;abs 0x47c8
    4436:	00 00       	bra	@r0		
    4438:	20 00 1b 00 	bra	&0x0001b	
    443c:	00 00       	bra	@r0		
    443e:	00 00       	bra	@r0		
    4440:	35 30       	jn	$+108    	;abs 0x44ac
    4442:	00 00       	bra	@r0		
    4444:	20 00 14 00 	bra	&0x00014	
    4448:	00 00       	bra	@r0		
    444a:	00 00       	bra	@r0		
    444c:	43 30       	jn	$+136    	;abs 0x44d4
    444e:	00 00       	bra	@r0		
    4450:	20 00 16 00 	bra	&0x00016	
    4454:	00 00       	bra	@r0		
    4456:	00 00       	bra	@r0		
    4458:	51 30       	jn	$+164    	;abs 0x44fc
    445a:	00 00       	bra	@r0		
    445c:	20 00 18 00 	bra	&0x00018	
    4460:	00 00       	bra	@r0		
    4462:	00 00       	bra	@r0		
    4464:	02 22       	jnz	$-1018   	;abs 0x406a
    4466:	00 00       	bra	@r0		
    4468:	20 00 14 00 	bra	&0x00014	
    446c:	00 00       	bra	@r0		
    446e:	00 00       	bra	@r0		
    4470:	10 22       	jnz	$-990    	;abs 0x4092
    4472:	00 00       	bra	@r0		
    4474:	20 00 16 00 	bra	&0x00016	
    4478:	00 00       	bra	@r0		
    447a:	00 00       	bra	@r0		
    447c:	1e 22       	jnz	$-962    	;abs 0x40ba
    447e:	00 00       	bra	@r0		
    4480:	20 00 18 00 	bra	&0x00018	
    4484:	00 00       	bra	@r0		
    4486:	00 00       	bra	@r0		
    4488:	5f 30       	jn	$+192    	;abs 0x4548
    448a:	00 00       	bra	@r0		
    448c:	20 00 12 00 	bra	&0x00012	
    4490:	00 00       	bra	@r0		
    4492:	00 00       	bra	@r0		
    4494:	71 30       	jn	$+228    	;abs 0x4578
    4496:	00 00       	bra	@r0		
    4498:	20 00 14 00 	bra	&0x00014	
    449c:	00 00       	bra	@r0		
    449e:	00 00       	bra	@r0		
    44a0:	83 30       	jn	$+264    	;abs 0x45a8
    44a2:	00 00       	bra	@r0		
    44a4:	20 00 16 00 	bra	&0x00016	
    44a8:	00 00       	bra	@r0		
    44aa:	00 00       	bra	@r0		
    44ac:	94 30       	jn	$+298    	;abs 0x45d6
    44ae:	00 00       	bra	@r0		
    44b0:	20 00 18 00 	bra	&0x00018	
    44b4:	00 00       	bra	@r0		
    44b6:	00 00       	bra	@r0		
    44b8:	a4 30       	jn	$+330    	;abs 0x4602
    44ba:	00 00       	bra	@r0		
    44bc:	20 00 1a 00 	bra	&0x0001a	
    44c0:	00 00       	bra	@r0		
    44c2:	00 00       	bra	@r0		
    44c4:	b4 30       	jn	$+362    	;abs 0x462e
    44c6:	00 00       	bra	@r0		
    44c8:	20 00 58 00 	bra	&0x00058	
    44cc:	00 00       	bra	@r0		
    44ce:	00 00       	bra	@r0		
    44d0:	c2 30       	jn	$+390    	;abs 0x4656
    44d2:	00 00       	bra	@r0		
    44d4:	20 00 64 00 	bra	&0x00064	
    44d8:	00 00       	bra	@r0		
    44da:	00 00       	bra	@r0		
    44dc:	d4 30       	jn	$+426    	;abs 0x4686
    44de:	00 00       	bra	@r0		
    44e0:	20 00 66 00 	bra	&0x00066	
    44e4:	00 00       	bra	@r0		
    44e6:	00 00       	bra	@r0		
    44e8:	e6 30       	jn	$+462    	;abs 0x46b6
    44ea:	00 00       	bra	@r0		
    44ec:	20 00 68 00 	bra	&0x00068	
    44f0:	00 00       	bra	@r0		
    44f2:	00 00       	bra	@r0		
    44f4:	f8 30       	jn	$+498    	;abs 0x46e6
    44f6:	00 00       	bra	@r0		
    44f8:	20 00 6a 00 	bra	&0x0006a	
    44fc:	00 00       	bra	@r0		
    44fe:	00 00       	bra	@r0		
    4500:	0a 31       	jn	$+534    	;abs 0x4716
    4502:	00 00       	bra	@r0		
    4504:	20 00 6c 00 	bra	&0x0006c	
    4508:	00 00       	bra	@r0		
    450a:	00 00       	bra	@r0		
    450c:	1c 31       	jn	$+570    	;abs 0x4746
    450e:	00 00       	bra	@r0		
    4510:	20 00 6e 00 	bra	&0x0006e	
    4514:	00 00       	bra	@r0		
    4516:	00 00       	bra	@r0		
    4518:	2e 31       	jn	$+606    	;abs 0x4776
    451a:	00 00       	bra	@r0		
    451c:	20 00 70 00 	bra	&0x00070	
    4520:	00 00       	bra	@r0		
    4522:	00 00       	bra	@r0		
    4524:	40 31       	jn	$+642    	;abs 0x47a6
    4526:	00 00       	bra	@r0		
    4528:	20 00 72 00 	bra	&0x00072	
    452c:	00 00       	bra	@r0		
    452e:	00 00       	bra	@r0		
    4530:	52 31       	jn	$+678    	;abs 0x47d6
    4532:	00 00       	bra	@r0		
    4534:	20 00 74 00 	bra	&0x00074	
    4538:	00 00       	bra	@r0		
    453a:	00 00       	bra	@r0		
    453c:	64 31       	jn	$+714    	;abs 0x4806
    453e:	00 00       	bra	@r0		
    4540:	20 00 76 00 	bra	&0x00076	
    4544:	00 00       	bra	@r0		
    4546:	00 00       	bra	@r0		
    4548:	76 31       	jn	$+750    	;abs 0x4836
    454a:	00 00       	bra	@r0		
    454c:	20 00 78 00 	bra	&0x00078	
    4550:	00 00       	bra	@r0		
    4552:	00 00       	bra	@r0		
    4554:	89 31       	jn	$+788    	;abs 0x4868
    4556:	00 00       	bra	@r0		
    4558:	20 00 7a 00 	bra	&0x0007a	
    455c:	00 00       	bra	@r0		
    455e:	00 00       	bra	@r0		
    4560:	9c 31       	jn	$+826    	;abs 0x489a
    4562:	00 00       	bra	@r0		
    4564:	20 00 7c 00 	bra	&0x0007c	
    4568:	00 00       	bra	@r0		
    456a:	00 00       	bra	@r0		
    456c:	af 31       	jn	$+864    	;abs 0x48cc
    456e:	00 00       	bra	@r0		
    4570:	20 00 7e 00 	bra	&0x0007e	
    4574:	00 00       	bra	@r0		
    4576:	00 00       	bra	@r0		
    4578:	c2 31       	jn	$+902    	;abs 0x48fe
    457a:	00 00       	bra	@r0		
    457c:	20 00 80 00 	bra	&0x00080	
    4580:	00 00       	bra	@r0		
    4582:	00 00       	bra	@r0		
    4584:	d5 31       	jn	$+940    	;abs 0x4930
    4586:	00 00       	bra	@r0		
    4588:	20 00 82 00 	bra	&0x00082	
    458c:	00 00       	bra	@r0		
    458e:	00 00       	bra	@r0		
    4590:	b3 23       	jnz	$-152    	;abs 0x44f8
    4592:	00 00       	bra	@r0		
    4594:	20 00 8b 00 	bra	&0x0008b	
    4598:	00 00       	bra	@r0		
    459a:	00 00       	bra	@r0		
    459c:	c5 23       	jnz	$-116    	;abs 0x4528
    459e:	00 00       	bra	@r0		
    45a0:	20 00 8d 00 	bra	&0x0008d	
    45a4:	00 00       	bra	@r0		
    45a6:	00 00       	bra	@r0		
    45a8:	d7 23       	jnz	$-80     	;abs 0x4558
    45aa:	00 00       	bra	@r0		
    45ac:	20 00 8f 00 	bra	&0x0008f	
    45b0:	00 00       	bra	@r0		
    45b2:	00 00       	bra	@r0		
    45b4:	e9 23       	jnz	$-44     	;abs 0x4588
    45b6:	00 00       	bra	@r0		
    45b8:	20 00 91 00 	bra	&0x00091	
    45bc:	00 00       	bra	@r0		
    45be:	00 00       	bra	@r0		
    45c0:	fb 23       	jnz	$-8      	;abs 0x45b8
    45c2:	00 00       	bra	@r0		
    45c4:	20 00 93 00 	bra	&0x00093	
    45c8:	00 00       	bra	@r0		
    45ca:	00 00       	bra	@r0		
    45cc:	0d 24       	jz	$+28     	;abs 0x45e8
    45ce:	00 00       	bra	@r0		
    45d0:	20 00 95 00 	bra	&0x00095	
    45d4:	00 00       	bra	@r0		
    45d6:	00 00       	bra	@r0		
    45d8:	1f 24       	jz	$+64     	;abs 0x4618
    45da:	00 00       	bra	@r0		
    45dc:	20 00 97 00 	bra	&0x00097	
    45e0:	00 00       	bra	@r0		
    45e2:	00 00       	bra	@r0		
    45e4:	31 24       	jz	$+100    	;abs 0x4648
    45e6:	00 00       	bra	@r0		
    45e8:	20 00 99 00 	bra	&0x00099	
    45ec:	00 00       	bra	@r0		
    45ee:	00 00       	bra	@r0		
    45f0:	43 24       	jz	$+136    	;abs 0x4678
    45f2:	00 00       	bra	@r0		
    45f4:	20 00 9b 00 	bra	&0x0009b	
    45f8:	00 00       	bra	@r0		
    45fa:	00 00       	bra	@r0		
    45fc:	55 24       	jz	$+172    	;abs 0x46a8
    45fe:	00 00       	bra	@r0		
    4600:	20 00 9d 00 	bra	&0x0009d	
    4604:	00 00       	bra	@r0		
    4606:	00 00       	bra	@r0		
    4608:	67 24       	jz	$+208    	;abs 0x46d8
    460a:	00 00       	bra	@r0		
    460c:	20 00 9f 00 	bra	&0x0009f	
    4610:	00 00       	bra	@r0		
    4612:	00 00       	bra	@r0		
    4614:	7a 24       	jz	$+246    	;abs 0x470a
    4616:	00 00       	bra	@r0		
    4618:	20 00 a1 00 	bra	&0x000a1	
    461c:	00 00       	bra	@r0		
    461e:	00 00       	bra	@r0		
    4620:	8d 24       	jz	$+284    	;abs 0x473c
    4622:	00 00       	bra	@r0		
    4624:	20 00 a3 00 	bra	&0x000a3	
    4628:	00 00       	bra	@r0		
    462a:	00 00       	bra	@r0		
    462c:	a0 24       	jz	$+322    	;abs 0x476e
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
            printf("WAIT CH7 BACK    ");
            
            if(ChannelInput[CH7_CH] < 2500){
    462e:	00 00       	bra	@r0		
    4630:	20 00 a5 00 	bra	&0x000a5	
                MenuStep = DISPLAY;
            }
    4634:	00 00       	bra	@r0		
            break;
                    
        case PROCESS_OPTION:
    4636:	00 00       	bra	@r0		
            process_option();
    4638:	b3 24       	jz	$+360    	;abs 0x47a0
    463a:	00 00       	bra	@r0		
            break;
    463c:	20 00 a7 00 	bra	&0x000a7	
            
    4640:	00 00       	bra	@r0		
}

void process_option(){
    int i;
    switch (MenuOption){
        case RADIO_RAW:
    4642:	00 00       	bra	@r0		
    4644:	c6 24       	jz	$+398    	;abs 0x47d2
            draw_rc_inputs(1);
    4646:	00 00       	bra	@r0		
    4648:	20 00 a9 00 	bra	&0x000a9	
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
    464c:	00 00       	bra	@r0		
            break;
    464e:	00 00       	bra	@r0		
    4650:	e8 31       	jn	$+978    	;abs 0x4a22
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
    4652:	00 00       	bra	@r0		
    4654:	20 00 12 00 	bra	&0x00012	
            for(i = 5; i >= 0; i--){ // contagem regressiva
    4658:	00 00       	bra	@r0		
                lcd_goto(8,8);
    465a:	00 00       	bra	@r0		
    465c:	fb 31       	jn	$+1016   	;abs 0x4a54
                printf("%d", i);
                delayms(1000);
    465e:	00 00       	bra	@r0		
            }
    4660:	20 00 14 00 	bra	&0x00014	
    4664:	00 00       	bra	@r0		
            MotorArmed = TRUE;
    4666:	00 00       	bra	@r0		
    4668:	0e 32       	jn	$-994    	;abs 0x4286
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
            break;
            
    466a:	00 00       	bra	@r0		
    466c:	20 00 16 00 	bra	&0x00016	
        case INITIAL_SETTINGS:
    4670:	00 00       	bra	@r0		
            
    4672:	00 00       	bra	@r0		
    4674:	21 32       	jn	$-956    	;abs 0x42b8
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
                lcd_goto(8,8);
                printf("%d", i);
                delayms(1000);
    4676:	00 00       	bra	@r0		
    4678:	20 00 18 00 	bra	&0x00018	
            
        case INITIAL_SETTINGS:
            
            // seta o flag initial setup
            break;          
    }
    467c:	00 00       	bra	@r0		
    467e:	00 00       	bra	@r0		
    4680:	34 32       	jn	$-918    	;abs 0x42ea
    4682:	00 00       	bra	@r0		
    4684:	20 00 18 00 	bra	&0x00018	
    
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
    4688:	00 00       	bra	@r0		
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    468a:	00 00       	bra	@r0		
    468c:	44 32       	jn	$-886    	;abs 0x4316
    468e:	00 00       	bra	@r0		
                delayms(1000);
            }
            MotorArmed = TRUE;
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
    4690:	20 00 1a 00 	bra	&0x0001a	
    4694:	00 00       	bra	@r0		
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
    4696:	00 00       	bra	@r0		
    4698:	54 32       	jn	$-854    	;abs 0x4342
    469a:	00 00       	bra	@r0		
    }
    
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        analog_graph_clear_all();
    469c:	20 00 1d 00 	bra	&0x0001d	
        lcd_clear(BLACK);
    }
}
    46a0:	00 00       	bra	@r0		
    46a2:	00 00       	bra	@r0		

    46a4:	62 32       	jn	$-826    	;abs 0x436a
    46a6:	00 00       	bra	@r0		
    46a8:	20 00 3f 00 	bra	&0x0003f	
void draw_analog_graph(void){
    int i, k;
    46ac:	00 00       	bra	@r0		
    for(i = 0; i < 8; i++){
    46ae:	00 00       	bra	@r0		
    46b0:	63 25       	jz	$+712    	;abs 0x4978
        if((1 << i) & AnalogChecked){
    46b2:	00 00       	bra	@r0		
    46b4:	20 00 41 00 	bra	&0x00041	
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
    46b8:	00 00       	bra	@r0		
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
    46ba:	00 00       	bra	@r0		
    46bc:	72 32       	jn	$-794    	;abs 0x43a2
    46be:	00 00       	bra	@r0		
    46c0:	20 00 43 00 	bra	&0x00043	
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
    46c4:	00 00       	bra	@r0		
            }
    46c6:	00 00       	bra	@r0		
    46c8:	88 25       	jz	$+786    	;abs 0x49da
    46ca:	00 00       	bra	@r0		
    46cc:	20 00 45 00 	bra	&0x00045	
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
        }
    }
    46d0:	00 00       	bra	@r0		
    46d2:	00 00       	bra	@r0		
    46d4:	82 32       	jn	$-762    	;abs 0x43da
    46d6:	00 00       	bra	@r0		
    
}
    46d8:	20 00 47 00 	bra	&0x00047	
    46dc:	00 00       	bra	@r0		
    46de:	00 00       	bra	@r0		
    46e0:	92 32       	jn	$-730    	;abs 0x4406
    46e2:	00 00       	bra	@r0		

void analog_graph_clear(int n){
    46e4:	20 00 49 00 	bra	&0x00049	
    46e8:	00 00       	bra	@r0		
    46ea:	00 00       	bra	@r0		
    46ec:	a1 32       	jn	$-700    	;abs 0x4430
    int i;
    46ee:	00 00       	bra	@r0		
    46f0:	20 00 4c 00 	bra	&0x0004c	
    46f4:	00 00       	bra	@r0		
    46f6:	00 00       	bra	@r0		
    for(i = 0; i < GRAPH_LENGHT; i++){
    46f8:	c5 25       	jz	$+908    	;abs 0x4a84
    46fa:	00 00       	bra	@r0		
    46fc:	20 00 4e 00 	bra	&0x0004e	
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
        AnalogGraph[n][i] = 0;
    }
    4700:	00 00       	bra	@r0		
    4702:	00 00       	bra	@r0		
    4704:	b1 32       	jn	$-668    	;abs 0x4468
    4706:	00 00       	bra	@r0		
    4708:	20 00 50 00 	bra	&0x00050	
}

    470c:	00 00       	bra	@r0		
    470e:	00 00       	bra	@r0		
    4710:	c1 32       	jn	$-636    	;abs 0x4494
    4712:	00 00       	bra	@r0		
void process_analog_menu(void){
    draw_analog_graph();
    4714:	20 00 52 00 	bra	&0x00052	
    4718:	00 00       	bra	@r0		
    471a:	00 00       	bra	@r0		
    switch(MenuAnalog){
    471c:	d0 32       	jn	$-606    	;abs 0x44be
    471e:	00 00       	bra	@r0		
    4720:	20 00 54 00 	bra	&0x00054	
        case DISPLAY:
    4724:	00 00       	bra	@r0		
    4726:	00 00       	bra	@r0		
    4728:	e0 32       	jn	$-574    	;abs 0x44ea
    472a:	00 00       	bra	@r0		
    472c:	20 00 56 00 	bra	&0x00056	
            lcd_goto(4,0);
    4730:	00 00       	bra	@r0		
    4732:	00 00       	bra	@r0		
    4734:	ef 32       	jn	$-544    	;abs 0x4514
    4736:	00 00       	bra	@r0		
            printf("ANALOG GRAPH   ");
    4738:	20 00 59 00 	bra	&0x00059	
    473c:	00 00       	bra	@r0		
    473e:	00 00       	bra	@r0		
    4740:	21 26       	jz	$-956    	;abs 0x4384
            
    4742:	00 00       	bra	@r0		
    4744:	20 00 5b 00 	bra	&0x0005b	
    4748:	00 00       	bra	@r0		
    474a:	00 00       	bra	@r0		
            lcd_goto(0,14);
    474c:	ff 32       	jn	$-512    	;abs 0x454c
    474e:	00 00       	bra	@r0		
    4750:	20 00 5d 00 	bra	&0x0005d	
    4754:	00 00       	bra	@r0		
            printf("DISPLAY             ");
    4756:	00 00       	bra	@r0		
    4758:	3f 26       	jz	$-896    	;abs 0x43d8
    475a:	00 00       	bra	@r0		
    475c:	20 00 5f 00 	bra	&0x0005f	

            refresh_analog_menu();
    4760:	00 00       	bra	@r0		
    4762:	00 00       	bra	@r0		
    4764:	0f 33       	jn	$-480    	;abs 0x4584
    4766:	00 00       	bra	@r0		
            MenuAnalog = SELECT;
    4768:	20 00 61 00 	bra	&0x00061	
    476c:	00 00       	bra	@r0		
    476e:	00 00       	bra	@r0		
            break;
    4770:	1f 33       	jn	$-448    	;abs 0x45b0
    4772:	00 00       	bra	@r0		
    4774:	20 00 63 00 	bra	&0x00063	
    4778:	00 00       	bra	@r0		
        case SELECT:
    477a:	00 00       	bra	@r0		
    477c:	2e 33       	jn	$-418    	;abs 0x45da
    477e:	00 00       	bra	@r0		
    4780:	20 00 47 00 	bra	&0x00047	
            lcd_goto(0,14);
    4784:	00 00       	bra	@r0		
    4786:	00 00       	bra	@r0		
    4788:	7b 26       	jz	$-776    	;abs 0x4480
    478a:	00 00       	bra	@r0		
    478c:	20 00 45 00 	bra	&0x00045	
            printf("SELECT            ");
    4790:	00 00       	bra	@r0		
    4792:	00 00       	bra	@r0		
    4794:	86 26       	jz	$-754    	;abs 0x44a2
    4796:	00 00       	bra	@r0		

    4798:	20 00 4c 00 	bra	&0x0004c	
    479c:	00 00       	bra	@r0		
    479e:	00 00       	bra	@r0		
    47a0:	92 26       	jz	$-730    	;abs 0x44c6
            // move para os lados
    47a2:	00 00       	bra	@r0		
    47a4:	20 00 54 00 	bra	&0x00054	
    47a8:	00 00       	bra	@r0		
    47aa:	00 00       	bra	@r0		
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
    47ac:	9d 26       	jz	$-708    	;abs 0x44e8
    47ae:	00 00       	bra	@r0		
    47b0:	20 00 5c 00 	bra	&0x0005c	
            }
    47b4:	00 00       	bra	@r0		
    47b6:	00 00       	bra	@r0		
    47b8:	3d 33       	jn	$-388    	;abs 0x4634
    47ba:	00 00       	bra	@r0		
    47bc:	20 00 6e 00 	bra	&0x0006e	
            else{
    47c0:	00 00       	bra	@r0		
    47c2:	00 00       	bra	@r0		
    47c4:	be 26       	jz	$-642    	;abs 0x4542
    47c6:	00 00       	bra	@r0		
                if(ChannelInput[ROLL_CH] < 2500){
    47c8:	20 00 70 00 	bra	&0x00070	
    47cc:	00 00       	bra	@r0		
    47ce:	00 00       	bra	@r0		
    47d0:	d4 26       	jz	$-598    	;abs 0x457a
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
    47d2:	00 00       	bra	@r0		
    47d4:	20 00 72 00 	bra	&0x00072	
    47d8:	00 00       	bra	@r0		
    47da:	00 00       	bra	@r0		
            
            // check uncheck
    47dc:	ea 26       	jz	$-554    	;abs 0x45b2
    47de:	00 00       	bra	@r0		
    47e0:	20 00 74 00 	bra	&0x00074	
    47e4:	00 00       	bra	@r0		
    47e6:	00 00       	bra	@r0		
    47e8:	01 27       	jz	$-508    	;abs 0x45ec
    47ea:	00 00       	bra	@r0		
    47ec:	20 00 76 00 	bra	&0x00076	
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
            }
    47f0:	00 00       	bra	@r0		
    47f2:	00 00       	bra	@r0		
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
                }
    47f4:	18 27       	jz	$-462    	;abs 0x4626
    47f6:	00 00       	bra	@r0		
    47f8:	20 00 93 00 	bra	&0x00093	
    47fc:	00 00       	bra	@r0		
    47fe:	00 00       	bra	@r0		
    4800:	2c 27       	jz	$-422    	;abs 0x465a
    4802:	00 00       	bra	@r0		
    4804:	20 00 95 00 	bra	&0x00095	
            }
    4808:	00 00       	bra	@r0		
            
            break;
        case WAIT_PITCH_DOWN:
    480a:	00 00       	bra	@r0		
    480c:	40 27       	jz	$-382    	;abs 0x468e
            lcd_goto(0,14);
    480e:	00 00       	bra	@r0		
    4810:	20 00 97 00 	bra	&0x00097	
    4814:	00 00       	bra	@r0		
            printf("WAIT PITCH DOWN    ");
    4816:	00 00       	bra	@r0		
    4818:	54 27       	jz	$-342    	;abs 0x46c2
    481a:	00 00       	bra	@r0		
    481c:	20 00 99 00 	bra	&0x00099	

    4820:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] > 2500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
    4822:	00 00       	bra	@r0		
    4824:	68 27       	jz	$-302    	;abs 0x46f6
    4826:	00 00       	bra	@r0		
    4828:	20 00 9b 00 	bra	&0x0009b	
            }
    482c:	00 00       	bra	@r0		
    482e:	00 00       	bra	@r0		
    4830:	7b 27       	jz	$-264    	;abs 0x4728
            break;
    4832:	00 00       	bra	@r0		
    4834:	20 00 9d 00 	bra	&0x0009d	
    4838:	00 00       	bra	@r0		
            
    483a:	00 00       	bra	@r0		
    483c:	8e 27       	jz	$-226    	;abs 0x475a
    483e:	00 00       	bra	@r0		
    4840:	20 00 9f 00 	bra	&0x0009f	
        case WAIT_PITCH_UP:
    4844:	00 00       	bra	@r0		
    4846:	00 00       	bra	@r0		
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");

    4848:	a1 27       	jz	$-188    	;abs 0x478c
    484a:	00 00       	bra	@r0		
    484c:	20 00 a1 00 	bra	&0x000a1	
    4850:	00 00       	bra	@r0		
    4852:	00 00       	bra	@r0		
    4854:	52 33       	jn	$-346    	;abs 0x46fa
    4856:	00 00       	bra	@r0		
    4858:	20 00 21 00 	bra	&0x00021	
    485c:	00 00       	bra	@r0		
    485e:	00 00       	bra	@r0		
    4860:	68 33       	jn	$-302    	;abs 0x4732
            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                analog_graph_clear(AnalogSelect);
    4862:	00 00       	bra	@r0		
    4864:	20 00 22 00 	bra	&0x00022	
    4868:	00 00       	bra	@r0		
    486a:	00 00       	bra	@r0		
    486c:	7e 33       	jn	$-258    	;abs 0x476a
    486e:	00 00       	bra	@r0		
    4870:	20 00 23 00 	bra	&0x00023	
                MenuAnalog = DISPLAY;
    4874:	00 00       	bra	@r0		
    4876:	00 00       	bra	@r0		
    4878:	91 33       	jn	$-220    	;abs 0x479c
    487a:	00 00       	bra	@r0		
    487c:	20 00 24 00 	bra	&0x00024	
    4880:	00 00       	bra	@r0		
    4882:	00 00       	bra	@r0		
            }
            break;
    4884:	a4 33       	jn	$-182    	;abs 0x47ce
    4886:	00 00       	bra	@r0		
    4888:	20 00 26 00 	bra	&0x00026	
	...
            
        case WAIT_ROLL_RIGHT:
    4894:	64 00 00 00 	mova	r0,	&0x40000
    4898:	f0 4d 00 00 	mov.b	@r13+,	0x0000	;PC rel. 0x0489c
    489c:	cc 33       	jn	$-102    	;abs 0x4836
    489e:	00 00       	bra	@r0		
    48a0:	64 00 00 00 	mova	r0,	&0x40000
                lcd_goto(0,14);
    48a4:	f0 4d 00 00 	mov.b	@r13+,	0x0000	;PC rel. 0x048a8
    48a8:	f2 33       	jn	$-26     	;abs 0x488e
                printf("WAIT ROLL RIGHT ");

    48aa:	00 00       	bra	@r0		
    48ac:	64 00 00 00 	mova	r0,	&0x40000
    48b0:	f0 4d 00 00 	mov.b	@r13+,	0x0000	;PC rel. 0x048b4
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
    48b4:	6a 00 00 00 	mova	r0,	&0xa0000
                printf("WAIT ROLL RIGHT ");

                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
                        AnalogSelect--;
    48b8:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x048ba
                    }
    48bc:	00 00       	bra	@r0		
    48be:	00 00       	bra	@r0		
                    MenuAnalog = DISPLAY;
                }
    48c0:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    48c4:	80 00 00 00 	bra	#0x00000	
    48c8:	00 00       	bra	@r0		
    48ca:	00 00       	bra	@r0		
    48cc:	99 00 00 00 	cmpa	#0x00000,r9	
            break;
    48d0:	80 00 00 00 	bra	#0x00000	
    48d4:	00 00       	bra	@r0		
    48d6:	00 00       	bra	@r0		
    48d8:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    48da:	00 00       	bra	@r0		
            
    48dc:	80 00 00 00 	bra	#0x00000	
    48e0:	00 00       	bra	@r0		
    48e2:	00 00       	bra	@r0		
    48e4:	ec 00       	adda	r0,	r12	
    48e6:	00 00       	bra	@r0		
        case WAIT_ROLL_LEFT:
                lcd_goto(0,14);
                printf("WAIT ROLL LEFT   ");
    48e8:	80 00 00 00 	bra	#0x00000	
    48ec:	00 00       	bra	@r0		
    48ee:	00 00       	bra	@r0		
    48f0:	24 01 00 00 	mova	&0x10000,r4	
    48f4:	80 00 00 00 	bra	#0x00000	
    48f8:	00 00       	bra	@r0		
    48fa:	00 00       	bra	@r0		
    48fc:	66 01 00 00 	mova	r1,	&0x60000
    4900:	80 00 00 00 	bra	#0x00000	
    4904:	00 00       	bra	@r0		
    4906:	00 00       	bra	@r0		
    4908:	b7 01 00 00 	suba	#0x10000,r7	
        
    490c:	80 00 00 00 	bra	#0x00000	
    4910:	00 00       	bra	@r0		
                if(ChannelInput[PITCH_CH] > 2500){
    4912:	00 00       	bra	@r0		
    4914:	08 02       	mova	#4,	r8	;r2 As==10
                   if(AnalogSelect < 7){
    4916:	00 00       	bra	@r0		
    4918:	80 00 00 00 	bra	#0x00000	
    491c:	00 00       	bra	@r0		
    491e:	00 00       	bra	@r0		
    4920:	2e 02 00 00 	mova	&0x20000,r14	
    4924:	80 00 00 00 	bra	#0x00000	
                        AnalogSelect++;
                    }
    4928:	00 00       	bra	@r0		
                    MenuAnalog = DISPLAY;
    492a:	00 00       	bra	@r0		
    492c:	6c 02 00 00 	mova	r2,	&0xc0000
    4930:	80 00 00 00 	bra	#0x00000	
    4934:	00 00       	bra	@r0		
    4936:	00 00       	bra	@r0		
    4938:	96 02 00 00 	cmpa	#0x20000,r6	
    493c:	80 00 00 00 	bra	#0x00000	
    4940:	00 00       	bra	@r0		

    4942:	00 00       	bra	@r0		
    4944:	bf 02 00 00 	suba	#0x20000,r15	
    4948:	80 00 00 00 	bra	#0x00000	
    494c:	00 00       	bra	@r0		
    494e:	00 00       	bra	@r0		
    4950:	d9 02       	cmpa	r2,	r9	
    4952:	00 00       	bra	@r0		
    4954:	80 00 00 00 	bra	#0x00000	
    4958:	00 00       	bra	@r0		
                }
    495a:	00 00       	bra	@r0		
    495c:	f4 02       	suba	r2,	r4	
    495e:	00 00       	bra	@r0		
    4960:	80 00 00 00 	bra	#0x00000	
    4964:	00 00       	bra	@r0		
    4966:	00 00       	bra	@r0		
    4968:	14 03       	mova	#-1,	r4	;r3 As==11
    496a:	00 00       	bra	@r0		
    496c:	80 00 00 00 	bra	#0x00000	
    4970:	00 00       	bra	@r0		
            break;
    4972:	00 00       	bra	@r0		
    4974:	4d 03       	rrum.a	#1,	r13	
    4976:	00 00       	bra	@r0		
    4978:	80 00 00 00 	bra	#0x00000	
    497c:	00 00       	bra	@r0		
    497e:	00 00       	bra	@r0		
    4980:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    4984:	80 00 00 00 	bra	#0x00000	
    4988:	00 00       	bra	@r0		
            
    498a:	00 00       	bra	@r0		
    498c:	8a 03 00 00 	mova	#0x30000,r10	
        case PROCESS_OPTION:
    4990:	80 00 00 00 	bra	#0x00000	
    4994:	00 00       	bra	@r0		
            break;
    4996:	00 00       	bra	@r0		
        case WAIT_CH7_BACK:
    4998:	ae 03 00 00 	adda	#0x30000,r14	
            break;
    499c:	80 00 00 00 	bra	#0x00000	
    49a0:	00 00       	bra	@r0		
    49a2:	00 00       	bra	@r0		
    49a4:	d7 03       	tsta	r7		
    49a6:	00 00       	bra	@r0		
    49a8:	80 00 00 00 	bra	#0x00000	
    49ac:	00 00       	bra	@r0		
    49ae:	00 00       	bra	@r0		
    49b0:	f2 33       	jn	$-26     	;abs 0x4996
    49b2:	00 00       	bra	@r0		
    49b4:	82 00 00 00 	mova	#0x00000,r2	
    49b8:	c2 dd 02 00 	bis.b	r13,	&0x0002	
    49bc:	cf 09       	mova	r9,	r15	
    49be:	00 00       	bra	@r0		
    49c0:	c2 00       	mova	r0,	r2	
    }
}
    49c2:	00 00       	bra	@r0		

    49c4:	00 00       	bra	@r0		
    49c6:	00 00       	bra	@r0		
void refresh_analog_menu(void){
    49c8:	ab 09 00 00 	adda	#0x90000,r11	
    49cc:	c2 00       	mova	r0,	r2	
    49ce:	00 00       	bra	@r0		
    49d0:	00 00       	bra	@r0		
    int i;
    49d2:	00 00       	bra	@r0		
    49d4:	cd 04       	mova	r4,	r13	
    49d6:	00 00       	bra	@r0		
    49d8:	c2 00       	mova	r0,	r2	
    49da:	00 00       	bra	@r0		
    49dc:	91 34       	jge	$+292    	;abs 0x4b00
    49de:	00 00       	bra	@r0		
    49e0:	f6 09       	suba	r9,	r6	
    49e2:	00 00       	bra	@r0		
    49e4:	c2 00       	mova	r0,	r2	
    lcd_goto(1,12);
    49e6:	00 00       	bra	@r0		
    49e8:	00 00       	bra	@r0		
    49ea:	00 00       	bra	@r0		
    49ec:	1c 0a       	mova	@r10+,	r12	
    49ee:	00 00       	bra	@r0		
    49f0:	c2 00       	mova	r0,	r2	
    49f2:	00 00       	bra	@r0		
    49f4:	00 00       	bra	@r0		
    49f6:	00 00       	bra	@r0		
    49f8:	43 0a       	rlam.a	#3,	#0	;r3 As==00
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    49fa:	00 00       	bra	@r0		
    49fc:	c2 00       	mova	r0,	r2	
    49fe:	00 00       	bra	@r0		
    4a00:	c1 68 00 00 	addc.b	r8,	0(r1)	;0x0000(r1)
    4a04:	41 0c       	rrcm.a	#4,	r1	
    4a06:	00 00       	bra	@r0		
    4a08:	c2 00       	mova	r0,	r2	
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
    4a0a:	00 00       	bra	@r0		
    4a0c:	00 00       	bra	@r0		
    4a0e:	00 00       	bra	@r0		
    4a10:	68 0c 00 00 	mova	r12,	&0x80000
    4a14:	c2 00       	mova	r0,	r2	
    4a16:	00 00       	bra	@r0		
    4a18:	3e 8a       	sub	@r10+,	r14	
            color_back = LIME;          // a cor do fundo muda para azul
    4a1a:	00 00       	bra	@r0		
    4a1c:	eb 0e       	adda	r14,	r11	
    4a1e:	00 00       	bra	@r0		
    4a20:	c2 00       	mova	r0,	r2	
    4a22:	00 00       	bra	@r0		
    4a24:	90 a7 00 00 	dadd	0(r7),	0x11de	;0x0000(r7), PC rel. 0x05c08
    4a28:	de 11 
    4a2a:	00 00       	bra	@r0		
    4a2c:	c2 00       	mova	r0,	r2	
            color_fore = BLACK;
    4a2e:	00 00       	bra	@r0		
    4a30:	00 00       	bra	@r0		
    4a32:	00 00       	bra	@r0		
    4a34:	0c 12       	push	r12		
    4a36:	00 00       	bra	@r0		
    4a38:	c2 00       	mova	r0,	r2	
    4a3a:	00 00       	bra	@r0		
    4a3c:	00 00       	bra	@r0		
        }
    4a3e:	00 00       	bra	@r0		
    4a40:	34 12       	push	@r4+		
    4a42:	00 00       	bra	@r0		
    4a44:	c2 00       	mova	r0,	r2	
    4a46:	00 00       	bra	@r0		
    4a48:	00 00       	bra	@r0		
    4a4a:	00 00       	bra	@r0		
    4a4c:	5c 12 00 00 	push.b	0(r12)		;0x0000(r12)
    4a50:	c2 00       	mova	r0,	r2	
        else{                           // senao
    4a52:	00 00       	bra	@r0		
    4a54:	0c af       	dadd	r15,	r12	
    4a56:	00 00       	bra	@r0		
    4a58:	7b 15       	pushm	#8,	r11	
    4a5a:	00 00       	bra	@r0		
    4a5c:	c2 00       	mova	r0,	r2	
    4a5e:	00 00       	bra	@r0		
    4a60:	00 00       	bra	@r0		
    4a62:	00 00       	bra	@r0		
    4a64:	a3 15       	pushm	#11,	#0	;r3 As==00
    4a66:	00 00       	bra	@r0		
    4a68:	c2 00       	mova	r0,	r2	
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
    4a6a:	00 00       	bra	@r0		
    4a6c:	00 00       	bra	@r0		
    4a6e:	00 00       	bra	@r0		
    4a70:	c9 15       	pushm	#13,	r9	
    4a72:	00 00       	bra	@r0		
    4a74:	c2 00       	mova	r0,	r2	
    4a76:	00 00       	bra	@r0		
    4a78:	00 00       	bra	@r0		
    4a7a:	00 00       	bra	@r0		
    4a7c:	fa 33       	jn	$-10     	;abs 0x4a72
    4a7e:	00 00       	bra	@r0		
        }
        
    4a80:	24 00 0f 00 	mova	&0x0000f,r4	
    4a84:	f0 4d 00 00 	mov.b	@r13+,	0x0000	;PC rel. 0x04a88
    4a88:	00 00       	bra	@r0		
    4a8a:	00 00       	bra	@r0		
    4a8c:	44 00       	rrcm.a	#1,	r4	
    4a8e:	0f 00       	mova	@r0,	r15	
	...
    4a98:	44 00       	rrcm.a	#1,	r4	
    4a9a:	12 00       	mova	#0x00000,r2	
	...
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    4aa4:	44 00       	rrcm.a	#1,	r4	
            color_fore = RED;           // a cor da letra muda para vermelho 
    4aa6:	14 00       	mova	#0x00000,r4	
	...
        else{                           // se nao                        
            if(color_back == LIME){
                color_fore = BLACK;
            }
        }                               
        
    4ab0:	24 00 00 00 	mova	&0x00000,r4	
        printf("%d",i);
        // ajusta as cores para o normal
    4ab4:	02 00       	mova	@r0,	r2	
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
    4ab6:	00 00       	bra	@r0		
    4ab8:	0b 34       	jge	$+24     	;abs 0x4ad0
}

    4aba:	00 00       	bra	@r0		
interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    4abc:	24 00 17 00 	mova	&0x00017,r4	
    ControlCounter++;
    RCCounter++;
    4ac0:	f2 4d 00 00 	mov.b	@r13+,	&0x0000	
    4ac4:	00 00       	bra	@r0		
    4ac6:	00 00       	bra	@r0		
    MenuCounter++;
}
    4ac8:	44 00       	rrcm.a	#1,	r4	
    4aca:	17 00       	mova	#0x00000,r7	
	...

void clock_init(void)
    4ad4:	44 00       	rrcm.a	#1,	r4	
    4ad6:	1a 00       	mova	#0x00000,r10	
	...
{
    /* 
     * Basic Clock System Control 2
    4ae0:	44 00       	rrcm.a	#1,	r4	
     * 
     * SELM_0 -- DCOCLK
    4ae2:	1c 00       	mova	#0x00000,r12	
	...
     * DIVM_0 -- Divide by 1
     * ~SELS -- DCOCLK
    4aec:	24 00 00 00 	mova	&0x00000,r4	
    4af0:	02 00       	mova	@r0,	r2	
    4af2:	00 00       	bra	@r0		
    4af4:	1c 34       	jge	$+58     	;abs 0x4b2e
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
    4af6:	00 00       	bra	@r0		
    4af8:	24 00 21 00 	mova	&0x00021,r4	
    4afc:	f4 4d 00 00 	mov.b	@r13+,	0(r4)	;0x0000(r4)
     */
    4b00:	2c 34       	jge	$+90     	;abs 0x4b5a
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    4b02:	00 00       	bra	@r0		
    4b04:	40 00       	rrcm.a	#1,	r0	
    
    4b06:	20 00 0f 00 	bra	&0x0000f	
    DCOCTL = 0x77;      
        /* 
     * Basic Clock System Control 1
    4b0a:	00 00       	bra	@r0		
    4b0c:	00 00       	bra	@r0		
     * 
    4b0e:	00 00       	bra	@r0		
     * XT2OFF -- Disable XT2CLK
    4b10:	44 00       	rrcm.a	#1,	r4	
    4b12:	21 00 00 00 	mova	&0x00000,r1	
    4b16:	00 00       	bra	@r0		
    4b18:	00 00       	bra	@r0		
    4b1a:	00 00       	bra	@r0		
    4b1c:	44 00       	rrcm.a	#1,	r4	
    4b1e:	24 00 00 00 	mova	&0x00000,r4	
            }
        }                               
        
        printf("%d",i);
        // ajusta as cores para o normal
        color_fore = LIME;
    4b22:	00 00       	bra	@r0		
        color_back = BLACK;
    4b24:	00 00       	bra	@r0		
    4b26:	00 00       	bra	@r0		
    4b28:	44 00       	rrcm.a	#1,	r4	
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
    4b2a:	25 00 0e 00 	mova	&0x0000e,r5	
                color_fore = BLACK;
    4b2e:	00 00       	bra	@r0		
    4b30:	be 17       	popm	#12,	r9	
    4b32:	00 00       	bra	@r0		
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    4b34:	40 00       	rrcm.a	#1,	r0	
    4b36:	22 00 0e 00 	mova	&0x0000e,r2	
    4b3a:	00 00       	bra	@r0		
    4b3c:	00 00       	bra	@r0		
    4b3e:	00 00       	bra	@r0		
    4b40:	c0 00       	bra	r0		
	...
    BCSCTL1 = 0xcf;     

    /* 
    4b4a:	00 00       	bra	@r0		
    4b4c:	e0 00       	adda	r0,	r0	
    4b4e:	00 00       	bra	@r0		
     * Basic Clock System Control 3
    4b50:	10 00       	bra	#0x00000	
    4b52:	00 00       	bra	@r0		
    4b54:	00 00       	bra	@r0		
    4b56:	00 00       	bra	@r0		
    4b58:	24 00 00 00 	mova	&0x00000,r4	
     * 
    4b5c:	10 00       	bra	#0x00000	
    4b5e:	00 00       	bra	@r0		
    4b60:	39 34       	jge	$+116    	;abs 0x4bd4
    4b62:	00 00       	bra	@r0		
    4b64:	24 00 2a 00 	mova	&0x0002a,r4	
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
    4b68:	04 4e       	mov	r14,	r4	
    4b6a:	00 00       	bra	@r0		
    4b6c:	2c 34       	jge	$+90     	;abs 0x4bc6
    4b6e:	00 00       	bra	@r0		
    4b70:	40 00       	rrcm.a	#1,	r0	
    4b72:	29 00 0a 00 	mova	&0x0000a,r9	
     * XCAP_0 -- ~1 pF
    4b76:	00 00       	bra	@r0		
    4b78:	00 00       	bra	@r0		
    4b7a:	00 00       	bra	@r0		
     */
    BCSCTL3 = 0xa0;
}
    4b7c:	44 00       	rrcm.a	#1,	r4	
    4b7e:	2a 00 00 00 	mova	&0x00000,r10	

    4b82:	00 00       	bra	@r0		
void p1_init(){
        /* Port 1 Output Register */
    4b84:	00 00       	bra	@r0		
    4b86:	00 00       	bra	@r0		
    4b88:	44 00       	rrcm.a	#1,	r4	
    4b8a:	2d 00 06 00 	mova	&0x00006,r13	
    4b8e:	00 00       	bra	@r0		
    4b90:	00 00       	bra	@r0		
    P1OUT = PPM_P1MASK;
    4b92:	00 00       	bra	@r0		
    4b94:	44 00       	rrcm.a	#1,	r4	
    4b96:	2e 00 1a 00 	mova	&0x0001a,r14	
    4b9a:	00 00       	bra	@r0		
    4b9c:	be 17       	popm	#12,	r9	
    4b9e:	00 00       	bra	@r0		

    4ba0:	40 00       	rrcm.a	#1,	r0	
    4ba2:	2b 00 0b 00 	mova	&0x0000b,r11	
    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;

    4ba6:	00 00       	bra	@r0		
    4ba8:	00 00       	bra	@r0		
    4baa:	00 00       	bra	@r0		
    4bac:	c0 00       	bra	r0		
    4bae:	00 00       	bra	@r0		
    4bb0:	06 00       	mova	@r0,	r6	
    4bb2:	00 00       	bra	@r0		
    4bb4:	00 00       	bra	@r0		
    4bb6:	00 00       	bra	@r0		
    4bb8:	e0 00       	adda	r0,	r0	
    4bba:	00 00       	bra	@r0		
    4bbc:	1a 00       	mova	#0x00000,r10	
    4bbe:	00 00       	bra	@r0		
    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida

    4bc0:	00 00       	bra	@r0		
    4bc2:	00 00       	bra	@r0		
    4bc4:	24 00 00 00 	mova	&0x00000,r4	
    4bc8:	20 00 00 00 	bra	&0x00000	
    4bcc:	49 34       	jge	$+148    	;abs 0x4c60
    4bce:	00 00       	bra	@r0		
    /* Port 1 Interrupt Flag Register */
    4bd0:	20 00 12 00 	bra	&0x00012	
    4bd4:	00 00       	bra	@r0		
    4bd6:	00 00       	bra	@r0		
    4bd8:	54 34       	jge	$+170    	;abs 0x4c82
    4bda:	00 00       	bra	@r0		
    4bdc:	20 00 14 00 	bra	&0x00014	
    4be0:	00 00       	bra	@r0		
    P1IFG = 0;

    4be2:	00 00       	bra	@r0		
    4be4:	60 34       	jge	$+194    	;abs 0x4ca6
    4be6:	00 00       	bra	@r0		
    4be8:	20 00 16 00 	bra	&0x00016	
    4bec:	00 00       	bra	@r0		
    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;
    4bee:	00 00       	bra	@r0		
    4bf0:	6b 34       	jge	$+216    	;abs 0x4cc8
    4bf2:	00 00       	bra	@r0		
    4bf4:	20 00 18 00 	bra	&0x00018	
    4bf8:	00 00       	bra	@r0		
    4bfa:	00 00       	bra	@r0		
    4bfc:	77 34       	jge	$+240    	;abs 0x4cec
    4bfe:	00 00       	bra	@r0		
    4c00:	20 00 1a 00 	bra	&0x0001a	

    4c04:	00 00       	bra	@r0		
    4c06:	00 00       	bra	@r0		
}

    4c08:	82 34       	jge	$+262    	;abs 0x4d0e
    4c0a:	00 00       	bra	@r0		
    4c0c:	20 00 1c 00 	bra	&0x0001c	
    4c10:	00 00       	bra	@r0		
    4c12:	00 00       	bra	@r0		
    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;

    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;

    4c14:	8f 34       	jge	$+288    	;abs 0x4d34
    4c16:	00 00       	bra	@r0		
    4c18:	20 00 1e 00 	bra	&0x0001e	
}

void timer_a3_init(void)
{
    /* 
    4c1c:	00 00       	bra	@r0		
     * TACCTL0, Capture/Compare Control Register 0
    4c1e:	00 00       	bra	@r0		
    4c20:	9c 34       	jge	$+314    	;abs 0x4d5a
     * 
     * CM_0 -- No Capture
    4c22:	00 00       	bra	@r0		
    4c24:	20 00 20 00 	bra	&0x00020	
    4c28:	00 00       	bra	@r0		
    4c2a:	00 00       	bra	@r0		
    4c2c:	aa 34       	jge	$+342    	;abs 0x4d82
    4c2e:	00 00       	bra	@r0		
     * CCIS_0 -- CCIxA
    4c30:	20 00 88 00 	bra	&0x00088	
    4c34:	00 00       	bra	@r0		
    4c36:	00 00       	bra	@r0		
    4c38:	b7 34       	jge	$+368    	;abs 0x4da8
    4c3a:	00 00       	bra	@r0		
    4c3c:	20 00 8c 00 	bra	&0x0008c	
     * ~SCS -- Asynchronous Capture
    4c40:	00 00       	bra	@r0		
    4c42:	00 00       	bra	@r0		
    4c44:	c4 34       	jge	$+394    	;abs 0x4dce
    4c46:	00 00       	bra	@r0		
    4c48:	20 00 90 00 	bra	&0x00090	
     * ~SCCI -- Latched capture signal (read)
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
    4c4c:	00 00       	bra	@r0		
    4c4e:	00 00       	bra	@r0		
    4c50:	d1 34       	jge	$+420    	;abs 0x4df4
    4c52:	00 00       	bra	@r0		
    4c54:	20 00 94 00 	bra	&0x00094	
     * Note: ~<BIT> indicates that <BIT> has value zero
    4c58:	00 00       	bra	@r0		
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    4c5a:	00 00       	bra	@r0		
    4c5c:	de 34       	jge	$+446    	;abs 0x4e1a

    4c5e:	00 00       	bra	@r0		
    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;

    /* 
    4c60:	20 00 98 00 	bra	&0x00098	
    4c64:	00 00       	bra	@r0		
    4c66:	00 00       	bra	@r0		
     * TACTL, Timer_A3 Control Register
    4c68:	eb 34       	jge	$+472    	;abs 0x4e40
    4c6a:	00 00       	bra	@r0		
    4c6c:	20 00 9c 00 	bra	&0x0009c	
     * 
     * TASSEL_2 -- SMCLK
    4c70:	00 00       	bra	@r0		
    4c72:	00 00       	bra	@r0		
     * ID_3 -- Divider - /8
    4c74:	f8 34       	jge	$+498    	;abs 0x4e66
    4c76:	00 00       	bra	@r0		
     * MC_1 -- Up Mode
    4c78:	20 00 7a 00 	bra	&0x0007a	
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
}
    4c7c:	00 00       	bra	@r0		
    4c7e:	00 00       	bra	@r0		
    4c80:	0c 35       	jge	$+538    	;abs 0x4e9a
    4c82:	00 00       	bra	@r0		
    4c84:	20 00 7c 00 	bra	&0x0007c	

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    4c88:	00 00       	bra	@r0		
    4c8a:	00 00       	bra	@r0		
    4c8c:	19 35       	jge	$+564    	;abs 0x4ec0
    4c8e:	00 00       	bra	@r0		
    4c90:	20 00 7e 00 	bra	&0x0007e	
    4c94:	00 00       	bra	@r0		
    4c96:	00 00       	bra	@r0		
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    4c98:	26 35       	jge	$+590    	;abs 0x4ee6
    4c9a:	00 00       	bra	@r0		
    4c9c:	20 00 80 00 	bra	&0x00080	
    4ca0:	00 00       	bra	@r0		
    4ca2:	00 00       	bra	@r0		
    4ca4:	33 35       	jge	$+616    	;abs 0x4f0c
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    4ca6:	00 00       	bra	@r0		
    4ca8:	20 00 82 00 	bra	&0x00082	
    4cac:	00 00       	bra	@r0		
    4cae:	00 00       	bra	@r0		
    4cb0:	40 35       	jge	$+642    	;abs 0x4f32
    4cb2:	00 00       	bra	@r0		
            if(!(P1IES & PPM_ch_counter)){ // low to high
    4cb4:	20 00 84 00 	bra	&0x00084	
    4cb8:	00 00       	bra	@r0		
    4cba:	00 00       	bra	@r0		
    4cbc:	4c 35       	jge	$+666    	;abs 0x4f56
    4cbe:	00 00       	bra	@r0		
    4cc0:	20 00 86 00 	bra	&0x00086	
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
    4cc4:	00 00       	bra	@r0		
            else{ // high to low
    4cc6:	00 00       	bra	@r0		
    4cc8:	59 35       	jge	$+692    	;abs 0x4f7c
    4cca:	00 00       	bra	@r0		
    4ccc:	20 00 89 00 	bra	&0x00089	
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    4cd0:	00 00       	bra	@r0		
    4cd2:	00 00       	bra	@r0		
    4cd4:	66 35       	jge	$+718    	;abs 0x4fa2
                }
                else{ // se nao deu overflow na contagem do timer
    4cd6:	00 00       	bra	@r0		
    4cd8:	20 00 8f 00 	bra	&0x0008f	
    4cdc:	00 00       	bra	@r0		
    4cde:	00 00       	bra	@r0		
    4ce0:	72 35       	jge	$+742    	;abs 0x4fc6
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    4ce2:	00 00       	bra	@r0		
    4ce4:	20 00 91 00 	bra	&0x00091	
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
    4ce8:	00 00       	bra	@r0		
    4cea:	00 00       	bra	@r0		
            }
    4cec:	7f 35       	jge	$+768    	;abs 0x4fec
    4cee:	00 00       	bra	@r0		
    4cf0:	20 00 93 00 	bra	&0x00093	
    4cf4:	00 00       	bra	@r0		
    4cf6:	00 00       	bra	@r0		
    4cf8:	8c 35       	jge	$+794    	;abs 0x5012
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    4cfa:	00 00       	bra	@r0		
    4cfc:	20 00 95 00 	bra	&0x00095	
    4d00:	00 00       	bra	@r0		
    4d02:	00 00       	bra	@r0		
    4d04:	99 35       	jge	$+820    	;abs 0x5038
    4d06:	00 00       	bra	@r0		
    4d08:	20 00 97 00 	bra	&0x00097	
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    4d0c:	00 00       	bra	@r0		
    4d0e:	00 00       	bra	@r0		
    4d10:	a6 35       	jge	$+846    	;abs 0x505e
    4d12:	00 00       	bra	@r0		
    4d14:	20 00 99 00 	bra	&0x00099	
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    4d18:	00 00       	bra	@r0		
    4d1a:	00 00       	bra	@r0		
    4d1c:	b2 35       	jge	$+870    	;abs 0x5082
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}

    4d1e:	00 00       	bra	@r0		
    4d20:	20 00 9b 00 	bra	&0x0009b	
    4d24:	00 00       	bra	@r0		
    4d26:	00 00       	bra	@r0		
    4d28:	bf 35       	jge	$+896    	;abs 0x50a8
    4d2a:	00 00       	bra	@r0		
void calibrate_radio(void){
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    4d2c:	20 00 9e 00 	bra	&0x0009e	
        return;
    4d30:	00 00       	bra	@r0		
    4d32:	00 00       	bra	@r0		
    4d34:	cc 35       	jge	$+922    	;abs 0x50ce
    4d36:	00 00       	bra	@r0		
    4d38:	20 00 a4 00 	bra	&0x000a4	
    4d3c:	00 00       	bra	@r0		
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    4d3e:	00 00       	bra	@r0		
    4d40:	d8 35       	jge	$+946    	;abs 0x50f2
    4d42:	00 00       	bra	@r0		
    4d44:	20 00 a6 00 	bra	&0x000a6	
    4d48:	00 00       	bra	@r0		
    4d4a:	00 00       	bra	@r0		
    4d4c:	e5 35       	jge	$+972    	;abs 0x5118
    4d4e:	00 00       	bra	@r0		
    4d50:	20 00 a8 00 	bra	&0x000a8	
    
    lcd_goto(2,5);
    color_fore = RED;
    4d54:	00 00       	bra	@r0		
    4d56:	00 00       	bra	@r0		
    printf("MOVE STICKS\nALL DIRECTIONS");
    4d58:	f2 35       	jge	$+998    	;abs 0x513e
    4d5a:	00 00       	bra	@r0		
    4d5c:	20 00 aa 00 	bra	&0x000aa	
    color_fore = LIME;
    4d60:	00 00       	bra	@r0		
    4d62:	00 00       	bra	@r0		
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4d64:	ff 35       	jge	$+1024   	;abs 0x5164
    4d66:	00 00       	bra	@r0		
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4d68:	20 00 ad 00 	bra	&0x000ad	
void calibrate_radio(void){
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    4d6c:	00 00       	bra	@r0		
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    4d6e:	00 00       	bra	@r0		
    4d70:	0c 36       	jge	$-998    	;abs 0x498a
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
    4d72:	00 00       	bra	@r0		
    4d74:	20 00 b3 00 	bra	&0x000b3	
    4d78:	00 00       	bra	@r0		
    4d7a:	00 00       	bra	@r0		
    4d7c:	18 36       	jge	$-974    	;abs 0x49ae
    4d7e:	00 00       	bra	@r0		
    4d80:	20 00 b5 00 	bra	&0x000b5	
    4d84:	00 00       	bra	@r0		
    4d86:	00 00       	bra	@r0		
    4d88:	25 36       	jge	$-948    	;abs 0x49d4
    4d8a:	00 00       	bra	@r0		
    4d8c:	20 00 b7 00 	bra	&0x000b7	
    4d90:	00 00       	bra	@r0		
    4d92:	00 00       	bra	@r0		
    4d94:	32 36       	jge	$-922    	;abs 0x49fa
    4d96:	00 00       	bra	@r0		
    4d98:	20 00 b9 00 	bra	&0x000b9	
        PPMSlope[i] = 1;
    4d9c:	00 00       	bra	@r0		
    4d9e:	00 00       	bra	@r0		
    4da0:	3f 36       	jge	$-896    	;abs 0x4a20
    4da2:	00 00       	bra	@r0		
    4da4:	20 00 bc 00 	bra	&0x000bc	
    4da8:	00 00       	bra	@r0		
    4daa:	00 00       	bra	@r0		
    4dac:	4c 36       	jge	$-870    	;abs 0x4a46
    4dae:	00 00       	bra	@r0		
    4db0:	20 00 c2 00 	bra	&0x000c2	
    4db4:	00 00       	bra	@r0		
    4db6:	00 00       	bra	@r0		
    4db8:	58 36       	jge	$-846    	;abs 0x4a6a
    }
    4dba:	00 00       	bra	@r0		
    4dbc:	20 00 c4 00 	bra	&0x000c4	
    4dc0:	00 00       	bra	@r0		
    4dc2:	00 00       	bra	@r0		
    4dc4:	65 36       	jge	$-820    	;abs 0x4a90
    4dc6:	00 00       	bra	@r0		

    4dc8:	20 00 c6 00 	bra	&0x000c6	
    4dcc:	00 00       	bra	@r0		
    4dce:	00 00       	bra	@r0		
    4dd0:	72 36       	jge	$-794    	;abs 0x4ab6
    4dd2:	00 00       	bra	@r0		
    4dd4:	20 00 c8 00 	bra	&0x000c8	
    4dd8:	00 00       	bra	@r0		
    4dda:	00 00       	bra	@r0		
    4ddc:	7f 36       	jge	$-768    	;abs 0x4adc
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    4dde:	00 00       	bra	@r0		
    4de0:	20 00 cb 00 	bra	&0x000cb	
    4de4:	00 00       	bra	@r0		
    4de6:	00 00       	bra	@r0		
    4de8:	8c 36       	jge	$-742    	;abs 0x4b02
    4dea:	00 00       	bra	@r0		
    4dec:	20 00 d1 00 	bra	&0x000d1	

/*
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
    4df0:	00 00       	bra	@r0		
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE

MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal
    4df2:	00 00       	bra	@r0		
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
    4df4:	98 36       	jge	$-718    	;abs 0x4b26
    4df6:	00 00       	bra	@r0		
    4df8:	20 00 d3 00 	bra	&0x000d3	
    4dfc:	00 00       	bra	@r0		
    4dfe:	00 00       	bra	@r0		
    4e00:	a5 36       	jge	$-692    	;abs 0x4b4c
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    4e02:	00 00       	bra	@r0		
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()

// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    4e04:	20 00 d5 00 	bra	&0x000d5	
    4e08:	00 00       	bra	@r0		
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    4e0a:	00 00       	bra	@r0		
    4e0c:	b2 36       	jge	$-666    	;abs 0x4b72
    4e0e:	00 00       	bra	@r0		
    4e10:	20 00 d7 00 	bra	&0x000d7	
    4e14:	00 00       	bra	@r0		
    4e16:	00 00       	bra	@r0		
    4e18:	bf 36       	jge	$-640    	;abs 0x4b98
    4e1a:	00 00       	bra	@r0		
    4e1c:	20 00 da 00 	bra	&0x000da	
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    4e20:	00 00       	bra	@r0		
    4e22:	00 00       	bra	@r0		
    4e24:	cc 36       	jge	$-614    	;abs 0x4bbe
    4e26:	00 00       	bra	@r0		
    4e28:	20 00 e0 00 	bra	&0x000e0	
    4e2c:	00 00       	bra	@r0		
    4e2e:	00 00       	bra	@r0		
    4e30:	d8 36       	jge	$-590    	;abs 0x4be2
    4e32:	00 00       	bra	@r0		
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
    4e34:	20 00 e2 00 	bra	&0x000e2	
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 
    4e38:	00 00       	bra	@r0		

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    4e3a:	00 00       	bra	@r0		
    4e3c:	e5 36       	jge	$-564    	;abs 0x4c08
    4e3e:	00 00       	bra	@r0		

    4e40:	20 00 e4 00 	bra	&0x000e4	
// variaveis leitura radio raw
    4e44:	00 00       	bra	@r0		
    4e46:	00 00       	bra	@r0		
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    4e48:	f2 36       	jge	$-538    	;abs 0x4c2e
    4e4a:	00 00       	bra	@r0		
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    4e4c:	20 00 e6 00 	bra	&0x000e6	
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    4e50:	00 00       	bra	@r0		

    4e52:	00 00       	bra	@r0		
    4e54:	ff 36       	jge	$-512    	;abs 0x4c54
    INICIO: //loop main, vir para ca no caso de um reset
    4e56:	00 00       	bra	@r0		
    4e58:	20 00 e9 00 	bra	&0x000e9	
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    4e5c:	00 00       	bra	@r0		

    lcd_clear(BLACK);
    4e5e:	00 00       	bra	@r0		
    4e60:	0c 37       	jge	$-486    	;abs 0x4c7a
    
    4e62:	00 00       	bra	@r0		
    4e64:	20 00 ef 00 	bra	&0x000ef	
    MenuOption = RADIO_RAW;
    4e68:	00 00       	bra	@r0		
    MenuStep = DISPLAY;
    4e6a:	00 00       	bra	@r0		
    4e6c:	18 37       	jge	$-462    	;abs 0x4c9e
    MenuVisible = TRUE;     // inicializa mostrando o menu
    4e6e:	00 00       	bra	@r0		
        
    while(1){
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
    4e70:	20 00 f1 00 	bra	&0x000f1	
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
    4e74:	00 00       	bra	@r0		
    4e76:	00 00       	bra	@r0		
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
    4e78:	25 37       	jge	$-436    	;abs 0x4cc4
    4e7a:	00 00       	bra	@r0		
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
    4e7c:	20 00 f3 00 	bra	&0x000f3	
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
    4e80:	00 00       	bra	@r0		
    4e82:	00 00       	bra	@r0		
        P1 completa. */
    4e84:	32 37       	jge	$-410    	;abs 0x4cea
    4e86:	00 00       	bra	@r0		
        if(ControlCounter >= CONTROL_PERIOD){
    4e88:	20 00 f5 00 	bra	&0x000f5	
            analog_refresh_all();
            if(MotorArmed == TRUE){
                main_loop();
            }
            ControlCounter = 0;
        }
    4e8c:	00 00       	bra	@r0		
    4e8e:	00 00       	bra	@r0		
        
    4e90:	3f 37       	jge	$-384    	;abs 0x4d10
    4e92:	00 00       	bra	@r0		
        if(SetupDone == TRUE){
    4e94:	20 00 f8 00 	bra	&0x000f8	
            if(RCCounter >= RC_PERIOD){
    4e98:	00 00       	bra	@r0		
    4e9a:	00 00       	bra	@r0		
                process_rc();
    4e9c:	4c 37       	jge	$-358    	;abs 0x4d36
    4e9e:	00 00       	bra	@r0		
    4ea0:	20 00 fc 00 	bra	&0x000fc	
    4ea4:	00 00       	bra	@r0		
    4ea6:	00 00       	bra	@r0		
                RCCounter = 0;
    4ea8:	5c 37       	jge	$-326    	;abs 0x4d62
    4eaa:	00 00       	bra	@r0		
            }
    4eac:	20 00 fe 00 	bra	&0x000fe	
        }
    4eb0:	00 00       	bra	@r0		
    4eb2:	00 00       	bra	@r0		
    
    4eb4:	6c 37       	jge	$-294    	;abs 0x4d8e
    4eb6:	00 00       	bra	@r0		
    4eb8:	20 00 00 01 	bra	&0x00100	
        if(MenuVisible == TRUE){
            if(MenuCounter >= MENU_PERIOD){
                process_menu();
    4ebc:	00 00       	bra	@r0		
    4ebe:	00 00       	bra	@r0		
                MenuCounter = 0;   
            }
        }
        else{
    4ec0:	7b 37       	jge	$-264    	;abs 0x4db8
    4ec2:	00 00       	bra	@r0		
    4ec4:	20 00 02 01 	bra	&0x00102	
            if(ChannelInput[CH6_CH] > 3500){
    4ec8:	00 00       	bra	@r0		
    4eca:	00 00       	bra	@r0		
    4ecc:	8a 37       	jge	$-234    	;abs 0x4de2
    4ece:	00 00       	bra	@r0		
    4ed0:	20 00 04 01 	bra	&0x00104	
                MenuVisible = TRUE;
    4ed4:	00 00       	bra	@r0		
    4ed6:	00 00       	bra	@r0		
                MotorArmed = FALSE;
    4ed8:	9a 37       	jge	$-202    	;abs 0x4e0e
    4eda:	00 00       	bra	@r0		
            }
    4edc:	20 00 06 01 	bra	&0x00106	
        }
    4ee0:	00 00       	bra	@r0		
    4ee2:	00 00       	bra	@r0		
    }
    4ee4:	aa 37       	jge	$-170    	;abs 0x4e3a
    4ee6:	00 00       	bra	@r0		
}
    4ee8:	20 00 08 01 	bra	&0x00108	

void process_menu(void){
    switch(MenuStep){
    4eec:	00 00       	bra	@r0		
    4eee:	00 00       	bra	@r0		
    4ef0:	bb 37       	jge	$-136    	;abs 0x4e68
        case DISPLAY:
    4ef2:	00 00       	bra	@r0		
    4ef4:	20 00 0a 01 	bra	&0x0010a	
            lcd_goto(0,14);
            printf("DISPLAY             ");
            
    4ef8:	00 00       	bra	@r0		
    4efa:	00 00       	bra	@r0		
            lcd_clear(BLACK);
    4efc:	cc 37       	jge	$-102    	;abs 0x4e96
            lcd_goto(0,0);
            printf("   MAIN MENU\n\n");
    4efe:	00 00       	bra	@r0		
    4f00:	20 00 0c 01 	bra	&0x0010c	
    4f04:	00 00       	bra	@r0		
    4f06:	00 00       	bra	@r0		
    4f08:	dd 37       	jge	$-68     	;abs 0x4ec4
    4f0a:	00 00       	bra	@r0		
    4f0c:	20 00 0e 01 	bra	&0x0010e	
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
    4f10:	00 00       	bra	@r0		
            MenuStep = SELECT;
    4f12:	00 00       	bra	@r0		
    4f14:	ef 37       	jge	$-32     	;abs 0x4ef4
            break;
    4f16:	00 00       	bra	@r0		
    4f18:	20 00 10 01 	bra	&0x00110	
        
    4f1c:	00 00       	bra	@r0		
        case SELECT: // fica neste step a maior parte do tempo
    4f1e:	00 00       	bra	@r0		
    4f20:	01 38       	jl	$+4      	;abs 0x4f24
            lcd_goto(0,14);
    4f22:	00 00       	bra	@r0		
    4f24:	20 00 13 01 	bra	&0x00113	
    switch(MenuStep){
        case DISPLAY:
            lcd_goto(0,14);
            printf("DISPLAY             ");
            
            lcd_clear(BLACK);
    4f28:	00 00       	bra	@r0		
    4f2a:	00 00       	bra	@r0		
            break;
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
            printf("SELECT            ");
            
    4f2c:	11 38       	jl	$+36     	;abs 0x4f50
    4f2e:	00 00       	bra	@r0		
    4f30:	20 00 15 01 	bra	&0x00115	
            lcd_goto(0,(int)MenuOption + 2);
            printf(">");
            
    4f34:	00 00       	bra	@r0		
    4f36:	00 00       	bra	@r0		
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    4f38:	21 38       	jl	$+68     	;abs 0x4f7c
                MenuStep = WAIT_PITCH_DOWN;
            }
    4f3a:	00 00       	bra	@r0		
    4f3c:	20 00 17 01 	bra	&0x00117	
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuStep = WAIT_PITCH_UP;
    4f40:	00 00       	bra	@r0		
                }
    4f42:	00 00       	bra	@r0		
    4f44:	30 38       	jl	$+98     	;abs 0x4fa6
            }
    4f46:	00 00       	bra	@r0		
    4f48:	20 00 19 01 	bra	&0x00119	
            
    4f4c:	00 00       	bra	@r0		
    4f4e:	00 00       	bra	@r0		
    4f50:	3f 38       	jl	$+128    	;abs 0x4fd0
            // select
    4f52:	00 00       	bra	@r0		
    4f54:	20 00 1b 01 	bra	&0x0011b	
            if(ChannelInput[ROLL_CH] > 3500){
    4f58:	00 00       	bra	@r0		
                MenuStep = WAIT_ROLL_LEFT;
    4f5a:	00 00       	bra	@r0		
    4f5c:	50 38       	jl	$+162    	;abs 0x4ffe
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
    4f5e:	00 00       	bra	@r0		
    4f60:	20 00 1d 01 	bra	&0x0011d	
            // select
            if(ChannelInput[ROLL_CH] > 3500){
                MenuStep = WAIT_ROLL_LEFT;
            }
            
            break;
    4f64:	00 00       	bra	@r0		
        
    4f66:	00 00       	bra	@r0		
    4f68:	60 38       	jl	$+194    	;abs 0x502a
    4f6a:	00 00       	bra	@r0		
            printf("WAIT PITCH DOWN    ");
            
            if(ChannelInput[PITCH_CH] > 2500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
    4f6c:	20 00 1f 01 	bra	&0x0011f	
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
    4f70:	00 00       	bra	@r0		
            }
    4f72:	00 00       	bra	@r0		
    4f74:	71 38       	jl	$+228    	;abs 0x5058
    4f76:	00 00       	bra	@r0		
    4f78:	20 00 21 01 	bra	&0x00121	
            break;
    4f7c:	00 00       	bra	@r0		
    4f7e:	00 00       	bra	@r0		
        
    4f80:	82 38       	jl	$+262    	;abs 0x5086
    4f82:	00 00       	bra	@r0		
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    4f84:	20 00 23 01 	bra	&0x00123	
            printf("WAIT PITCH UP    ");
    4f88:	00 00       	bra	@r0		

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
    4f8a:	00 00       	bra	@r0		
    4f8c:	93 38       	jl	$+296    	;abs 0x50b4
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    4f8e:	00 00       	bra	@r0		
    4f90:	20 00 25 01 	bra	&0x00125	
                }
    4f94:	00 00       	bra	@r0		
    4f96:	00 00       	bra	@r0		
                MenuStep = SELECT;
    4f98:	a4 38       	jl	$+330    	;abs 0x50e2
    4f9a:	00 00       	bra	@r0		
    4f9c:	20 00 2c 01 	bra	&0x0012c	
            }
    4fa0:	00 00       	bra	@r0		
            break;
        
    4fa2:	00 00       	bra	@r0		
        case WAIT_ROLL_LEFT:
    4fa4:	b4 38       	jl	$+362    	;abs 0x510e
    4fa6:	00 00       	bra	@r0		
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    4fa8:	20 00 2e 01 	bra	&0x0012e	
    4fac:	00 00       	bra	@r0		
    4fae:	00 00       	bra	@r0		
    4fb0:	c4 38       	jl	$+394    	;abs 0x513a
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
    4fb2:	00 00       	bra	@r0		
    4fb4:	20 00 30 01 	bra	&0x00130	
                MenuStep = PROCESS_OPTION;
    4fb8:	00 00       	bra	@r0		
    4fba:	00 00       	bra	@r0		
    4fbc:	d3 38       	jl	$+424    	;abs 0x5164
            }
    4fbe:	00 00       	bra	@r0		
    4fc0:	20 00 32 01 	bra	&0x00132	
            break;
    4fc4:	00 00       	bra	@r0		
    4fc6:	00 00       	bra	@r0		
    4fc8:	e2 38       	jl	$+454    	;abs 0x518e
            
    4fca:	00 00       	bra	@r0		
    4fcc:	20 00 34 01 	bra	&0x00134	
        case WAIT_CH7_BACK:
    4fd0:	00 00       	bra	@r0		
    4fd2:	00 00       	bra	@r0		
    4fd4:	f2 38       	jl	$+486    	;abs 0x51ba
            lcd_goto(0,14);
    4fd6:	00 00       	bra	@r0		
    4fd8:	20 00 36 01 	bra	&0x00136	
            printf("WAIT CH7 BACK    ");
    4fdc:	00 00       	bra	@r0		
    4fde:	00 00       	bra	@r0		
            
            if(ChannelInput[CH7_CH] < 2500){
    4fe0:	02 39       	jl	$+518    	;abs 0x51e6
                MenuStep = DISPLAY;
    4fe2:	00 00       	bra	@r0		
    4fe4:	20 00 38 01 	bra	&0x00138	
    4fe8:	00 00       	bra	@r0		
            }
            break;
                    
    4fea:	00 00       	bra	@r0		
    4fec:	13 39       	jl	$+552    	;abs 0x5214
    4fee:	00 00       	bra	@r0		
    4ff0:	20 00 3a 01 	bra	&0x0013a	
    4ff4:	00 00       	bra	@r0		
    4ff6:	00 00       	bra	@r0		
    4ff8:	24 39       	jl	$+586    	;abs 0x5242
        case PROCESS_OPTION:
    4ffa:	00 00       	bra	@r0		
            process_option();
            break;
    4ffc:	20 00 3c 01 	bra	&0x0013c	
            
    5000:	00 00       	bra	@r0		
    5002:	00 00       	bra	@r0		
    5004:	35 39       	jl	$+620    	;abs 0x5270
    5006:	00 00       	bra	@r0		
        case WAIT_ROLL_RIGHT:
    5008:	20 00 3e 01 	bra	&0x0013e	
    500c:	00 00       	bra	@r0		
            break;    
    500e:	00 00       	bra	@r0		
    5010:	47 39       	jl	$+656    	;abs 0x52a0
    5012:	00 00       	bra	@r0		
    }
    5014:	20 00 40 01 	bra	&0x00140	
    5018:	00 00       	bra	@r0		
}
    501a:	00 00       	bra	@r0		
    501c:	59 39       	jl	$+692    	;abs 0x52d0
    501e:	00 00       	bra	@r0		

void process_option(){
    5020:	20 00 43 01 	bra	&0x00143	
    5024:	00 00       	bra	@r0		
    5026:	00 00       	bra	@r0		
    5028:	69 39       	jl	$+724    	;abs 0x52fc
    502a:	00 00       	bra	@r0		
    int i;
    502c:	20 00 45 01 	bra	&0x00145	
    5030:	00 00       	bra	@r0		
    5032:	00 00       	bra	@r0		
    5034:	79 39       	jl	$+756    	;abs 0x5328
    5036:	00 00       	bra	@r0		
    switch (MenuOption){
        case RADIO_RAW:
    5038:	20 00 47 01 	bra	&0x00147	
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
    503c:	00 00       	bra	@r0		
            draw_rc_inputs(0);
    503e:	00 00       	bra	@r0		
    5040:	88 39       	jl	$+786    	;abs 0x5352
    5042:	00 00       	bra	@r0		
    5044:	20 00 49 01 	bra	&0x00149	
    5048:	00 00       	bra	@r0		
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
    504a:	00 00       	bra	@r0		
    504c:	97 39       	jl	$+816    	;abs 0x537c
    504e:	00 00       	bra	@r0		
    5050:	20 00 4b 01 	bra	&0x0014b	
            break;
        
        case READY:
    5054:	00 00       	bra	@r0		
    5056:	00 00       	bra	@r0		
            lcd_clear(BLACK);
    5058:	a8 39       	jl	$+850    	;abs 0x53aa
    505a:	00 00       	bra	@r0		
    505c:	20 00 4d 01 	bra	&0x0014d	
            for(i = 5; i >= 0; i--){ // contagem regressiva
    5060:	00 00       	bra	@r0		
    5062:	00 00       	bra	@r0		
    5064:	b8 39       	jl	$+882    	;abs 0x53d6
                lcd_goto(8,8);
    5066:	00 00       	bra	@r0		
    5068:	20 00 4f 01 	bra	&0x0014f	
    506c:	00 00       	bra	@r0		
    506e:	00 00       	bra	@r0		
                printf("%d", i);
    5070:	c9 39       	jl	$+916    	;abs 0x5404
    5072:	00 00       	bra	@r0		
    5074:	20 00 51 01 	bra	&0x00151	
                delayms(1000);
    5078:	00 00       	bra	@r0		
    507a:	00 00       	bra	@r0		
    507c:	da 39       	jl	$+950    	;abs 0x5432
            }
    507e:	00 00       	bra	@r0		
    5080:	20 00 53 01 	bra	&0x00153	
            MotorArmed = TRUE;
    5084:	00 00       	bra	@r0		
    5086:	00 00       	bra	@r0		
    5088:	eb 39       	jl	$+984    	;abs 0x5460
            MenuVisible = FALSE;
    508a:	00 00       	bra	@r0		
    508c:	20 00 55 01 	bra	&0x00155	
            lcd_clear(BLACK);
    5090:	00 00       	bra	@r0		
    5092:	00 00       	bra	@r0		
            MenuStep = DISPLAY;
            break;
    5094:	fc 39       	jl	$+1018   	;abs 0x548e
            
    5096:	00 00       	bra	@r0		
    5098:	20 00 58 01 	bra	&0x00158	
    509c:	00 00       	bra	@r0		
        case INITIAL_SETTINGS:
            
            // seta o flag initial setup
    509e:	00 00       	bra	@r0		
    50a0:	09 3a       	jl	$-1004   	;abs 0x4cb4
    50a2:	00 00       	bra	@r0		
    50a4:	20 00 5a 01 	bra	&0x0015a	
    50a8:	00 00       	bra	@r0		
    50aa:	00 00       	bra	@r0		
    50ac:	17 3a       	jl	$-976    	;abs 0x4cdc
            break;          
    50ae:	00 00       	bra	@r0		
    }
    
    50b0:	20 00 1a 00 	bra	&0x0001a	
    if(ChannelInput[CH7_CH] > 3500){
    50b4:	00 00       	bra	@r0		
    50b6:	00 00       	bra	@r0		
    50b8:	24 3a       	jl	$-950    	;abs 0x4d02
    50ba:	00 00       	bra	@r0		
        MenuStep = WAIT_CH7_BACK;
    50bc:	20 00 1c 00 	bra	&0x0001c	
    50c0:	00 00       	bra	@r0		
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    50c2:	00 00       	bra	@r0		
    50c4:	32 3a       	jl	$-922    	;abs 0x4d2a
    50c6:	00 00       	bra	@r0		
    50c8:	20 00 1e 00 	bra	&0x0001e	
        analog_graph_clear_all();
    50cc:	00 00       	bra	@r0		
    50ce:	00 00       	bra	@r0		
    50d0:	3e 3a       	jl	$-898    	;abs 0x4d4e
        lcd_clear(BLACK);
    50d2:	00 00       	bra	@r0		
    50d4:	20 00 21 00 	bra	&0x00021	
    50d8:	00 00       	bra	@r0		
    }
    50da:	00 00       	bra	@r0		
    50dc:	4e 3a       	jl	$-866    	;abs 0x4d7a
    50de:	00 00       	bra	@r0		
}
    50e0:	20 00 23 00 	bra	&0x00023	
    50e4:	00 00       	bra	@r0		

void draw_analog_graph(void){
    50e6:	00 00       	bra	@r0		
    50e8:	5e 3a       	jl	$-834    	;abs 0x4da6
    50ea:	00 00       	bra	@r0		
    50ec:	20 00 25 00 	bra	&0x00025	
    50f0:	00 00       	bra	@r0		
    int i, k;
    50f2:	00 00       	bra	@r0		
    50f4:	6d 3a       	jl	$-804    	;abs 0x4dd0
    50f6:	00 00       	bra	@r0		
    50f8:	20 00 27 00 	bra	&0x00027	
    50fc:	00 00       	bra	@r0		
    for(i = 0; i < 8; i++){
        if((1 << i) & AnalogChecked){
    50fe:	00 00       	bra	@r0		
    5100:	7c 3a       	jl	$-774    	;abs 0x4dfa
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
    5102:	00 00       	bra	@r0		
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
    5104:	20 00 47 00 	bra	&0x00047	
    5108:	00 00       	bra	@r0		
    510a:	00 00       	bra	@r0		
    510c:	8c 3a       	jl	$-742    	;abs 0x4e26
    510e:	00 00       	bra	@r0		
            }
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
        }
    5110:	20 00 49 00 	bra	&0x00049	
    5114:	00 00       	bra	@r0		
    5116:	00 00       	bra	@r0		
    5118:	9b 3a       	jl	$-712    	;abs 0x4e50
    }
    
}
    511a:	00 00       	bra	@r0		
    511c:	20 00 ac 00 	bra	&0x000ac	

    5120:	00 00       	bra	@r0		
    5122:	00 00       	bra	@r0		
    5124:	a9 3a       	jl	$-684    	;abs 0x4e78
void analog_graph_clear(int n){
    5126:	00 00       	bra	@r0		
    5128:	20 00 16 00 	bra	&0x00016	
    int i;
    512c:	00 00       	bra	@r0		
    512e:	00 00       	bra	@r0		
    5130:	b5 3a       	jl	$-660    	;abs 0x4e9c
    for(i = 0; i < GRAPH_LENGHT; i++){
    5132:	00 00       	bra	@r0		
    5134:	20 00 18 00 	bra	&0x00018	
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
    5138:	00 00       	bra	@r0		
    513a:	00 00       	bra	@r0		
        AnalogGraph[n][i] = 0;
    513c:	c2 3a       	jl	$-634    	;abs 0x4ec2
    513e:	00 00       	bra	@r0		
    5140:	20 00 1a 00 	bra	&0x0001a	
    5144:	00 00       	bra	@r0		
    }
    5146:	00 00       	bra	@r0		
    5148:	cd 3a       	jl	$-612    	;abs 0x4ee4
    514a:	00 00       	bra	@r0		
}
    514c:	20 00 1d 00 	bra	&0x0001d	
    5150:	00 00       	bra	@r0		
    5152:	00 00       	bra	@r0		

    5154:	dc 3a       	jl	$-582    	;abs 0x4f0e
    5156:	00 00       	bra	@r0		
    5158:	20 00 1f 00 	bra	&0x0001f	
void process_analog_menu(void){
    515c:	00 00       	bra	@r0		
    draw_analog_graph();
    switch(MenuAnalog){
    515e:	00 00       	bra	@r0		
        case DISPLAY:
    5160:	eb 3a       	jl	$-552    	;abs 0x4f38
    5162:	00 00       	bra	@r0		
    5164:	20 00 21 00 	bra	&0x00021	
            lcd_goto(4,0);
            printf("ANALOG GRAPH   ");
            
    5168:	00 00       	bra	@r0		
    516a:	00 00       	bra	@r0		
    516c:	fa 3a       	jl	$-522    	;abs 0x4f62
    516e:	00 00       	bra	@r0		
    5170:	20 00 23 00 	bra	&0x00023	
    5174:	00 00       	bra	@r0		
    5176:	00 00       	bra	@r0		
            lcd_goto(0,14);
    5178:	08 3b       	jl	$-494    	;abs 0x4f8a
            printf("DISPLAY             ");

    517a:	00 00       	bra	@r0		
    517c:	20 00 25 00 	bra	&0x00025	
            refresh_analog_menu();
    5180:	00 00       	bra	@r0		
    5182:	00 00       	bra	@r0		
    5184:	16 3b       	jl	$-466    	;abs 0x4fb2
            MenuAnalog = SELECT;
    5186:	00 00       	bra	@r0		
    5188:	20 00 27 00 	bra	&0x00027	
            break;
    518c:	00 00       	bra	@r0		
    518e:	00 00       	bra	@r0		
    5190:	24 3b       	jl	$-438    	;abs 0x4fda
        case SELECT:
    5192:	00 00       	bra	@r0		
    5194:	20 00 2c 00 	bra	&0x0002c	
            lcd_goto(0,14);
    5198:	00 00       	bra	@r0		
    519a:	00 00       	bra	@r0		
            printf("SELECT            ");
    519c:	33 3b       	jl	$-408    	;abs 0x5004
    519e:	00 00       	bra	@r0		
    51a0:	20 00 2e 00 	bra	&0x0002e	
    51a4:	00 00       	bra	@r0		

    51a6:	00 00       	bra	@r0		
    51a8:	42 3b       	jl	$-378    	;abs 0x502e
    51aa:	00 00       	bra	@r0		
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    51ac:	20 00 30 00 	bra	&0x00030	
    51b0:	00 00       	bra	@r0		
    51b2:	00 00       	bra	@r0		
    51b4:	51 3b       	jl	$-348    	;abs 0x5058
    51b6:	00 00       	bra	@r0		
    51b8:	20 00 32 00 	bra	&0x00032	
                MenuAnalog = WAIT_ROLL_LEFT;
            }
    51bc:	00 00       	bra	@r0		
    51be:	00 00       	bra	@r0		
    51c0:	60 3b       	jl	$-318    	;abs 0x5082
    51c2:	00 00       	bra	@r0		
    51c4:	20 00 34 00 	bra	&0x00034	
            else{
    51c8:	00 00       	bra	@r0		
    51ca:	00 00       	bra	@r0		
    51cc:	6e 3b       	jl	$-290    	;abs 0x50aa
                if(ChannelInput[ROLL_CH] < 2500){
    51ce:	00 00       	bra	@r0		
    51d0:	20 00 36 00 	bra	&0x00036	
    51d4:	00 00       	bra	@r0		
    51d6:	00 00       	bra	@r0		
    51d8:	7c 3b       	jl	$-262    	;abs 0x50d2
    51da:	00 00       	bra	@r0		
    51dc:	20 00 38 00 	bra	&0x00038	
    51e0:	00 00       	bra	@r0		
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
    51e2:	00 00       	bra	@r0		
    51e4:	8a 3b       	jl	$-234    	;abs 0x50fa
    51e6:	00 00       	bra	@r0		
    51e8:	20 00 3a 00 	bra	&0x0003a	
            }
    51ec:	00 00       	bra	@r0		
    51ee:	00 00       	bra	@r0		
    51f0:	98 3b       	jl	$-206    	;abs 0x5122
            
    51f2:	00 00       	bra	@r0		
    51f4:	20 00 7a 00 	bra	&0x0007a	
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
    51f8:	00 00       	bra	@r0		
    51fa:	00 00       	bra	@r0		
    51fc:	a7 3b       	jl	$-176    	;abs 0x514c
    51fe:	00 00       	bra	@r0		
    5200:	20 00 14 00 	bra	&0x00014	
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    5204:	00 00       	bra	@r0		
    5206:	00 00       	bra	@r0		
    5208:	b5 3b       	jl	$-148    	;abs 0x5174
    520a:	00 00       	bra	@r0		
    520c:	20 00 16 00 	bra	&0x00016	
                    MenuAnalog = WAIT_PITCH_UP;
                }
            }
    5210:	00 00       	bra	@r0		
            
    5212:	00 00       	bra	@r0		
    5214:	c4 3b       	jl	$-118    	;abs 0x519e
    5216:	00 00       	bra	@r0		
    5218:	20 00 18 00 	bra	&0x00018	
            break;
    521c:	00 00       	bra	@r0		
    521e:	00 00       	bra	@r0		
        case WAIT_PITCH_DOWN:
    5220:	d3 3b       	jl	$-88     	;abs 0x51c8
    5222:	00 00       	bra	@r0		
    5224:	20 00 1b 00 	bra	&0x0001b	
    5228:	00 00       	bra	@r0		
            lcd_goto(0,14);
    522a:	00 00       	bra	@r0		
    522c:	e2 3b       	jl	$-58     	;abs 0x51f2
    522e:	00 00       	bra	@r0		
            printf("WAIT PITCH DOWN    ");
    5230:	20 00 14 00 	bra	&0x00014	
    5234:	00 00       	bra	@r0		
    5236:	00 00       	bra	@r0		

    5238:	ef 3b       	jl	$-32     	;abs 0x5218
    523a:	00 00       	bra	@r0		
    523c:	20 00 16 00 	bra	&0x00016	
            if(ChannelInput[PITCH_CH] > 2500){
    5240:	00 00       	bra	@r0		
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    5242:	00 00       	bra	@r0		
    5244:	fc 3b       	jl	$-6      	;abs 0x523e
    5246:	00 00       	bra	@r0		
    5248:	20 00 18 00 	bra	&0x00018	
                MenuAnalog = DISPLAY;
    524c:	00 00       	bra	@r0		
    524e:	00 00       	bra	@r0		
    5250:	09 3c       	jmp	$+20     	;abs 0x5264
            }
    5252:	00 00       	bra	@r0		
    5254:	20 00 14 00 	bra	&0x00014	
    5258:	00 00       	bra	@r0		
            break;
    525a:	00 00       	bra	@r0		
    525c:	17 3c       	jmp	$+48     	;abs 0x528c
    525e:	00 00       	bra	@r0		
            
    5260:	20 00 16 00 	bra	&0x00016	
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    5264:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");
    5266:	00 00       	bra	@r0		
    5268:	25 3c       	jmp	$+76     	;abs 0x52b4
    526a:	00 00       	bra	@r0		
    526c:	20 00 18 00 	bra	&0x00018	

            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    5270:	00 00       	bra	@r0		
    5272:	00 00       	bra	@r0		
    5274:	31 3c       	jmp	$+100    	;abs 0x52d8
    5276:	00 00       	bra	@r0		
    5278:	20 00 12 00 	bra	&0x00012	
    527c:	00 00       	bra	@r0		
                analog_graph_clear(AnalogSelect);
    527e:	00 00       	bra	@r0		
                MenuAnalog = DISPLAY;
            }
    5280:	42 3c       	jmp	$+134    	;abs 0x5306
    5282:	00 00       	bra	@r0		
            break;
    5284:	20 00 14 00 	bra	&0x00014	
    5288:	00 00       	bra	@r0		
    528a:	00 00       	bra	@r0		
            
    528c:	53 3c       	jmp	$+168    	;abs 0x5334
    528e:	00 00       	bra	@r0		
    5290:	20 00 16 00 	bra	&0x00016	
        case WAIT_ROLL_RIGHT:
    5294:	00 00       	bra	@r0		
    5296:	00 00       	bra	@r0		
    5298:	63 3c       	jmp	$+200    	;abs 0x5360
    529a:	00 00       	bra	@r0		
                lcd_goto(0,14);
    529c:	20 00 18 00 	bra	&0x00018	
    52a0:	00 00       	bra	@r0		
                printf("WAIT ROLL RIGHT ");
    52a2:	00 00       	bra	@r0		
    52a4:	72 3c       	jmp	$+230    	;abs 0x538a
    52a6:	00 00       	bra	@r0		
    52a8:	20 00 1a 00 	bra	&0x0001a	

    52ac:	00 00       	bra	@r0		
    52ae:	00 00       	bra	@r0		
                if(ChannelInput[PITCH_CH] < 3500){
    52b0:	81 3c       	jmp	$+260    	;abs 0x53b4
    52b2:	00 00       	bra	@r0		
                    if(AnalogSelect > 0){
    52b4:	20 00 58 00 	bra	&0x00058	
    52b8:	00 00       	bra	@r0		
    52ba:	00 00       	bra	@r0		
    52bc:	8f 3c       	jmp	$+288    	;abs 0x53dc
                        AnalogSelect--;
    52be:	00 00       	bra	@r0		
    52c0:	20 00 64 00 	bra	&0x00064	
                    }
                    MenuAnalog = DISPLAY;
    52c4:	00 00       	bra	@r0		
    52c6:	00 00       	bra	@r0		
    52c8:	a0 3c       	jmp	$+322    	;abs 0x540a
    52ca:	00 00       	bra	@r0		
    52cc:	20 00 66 00 	bra	&0x00066	
    52d0:	00 00       	bra	@r0		
                }
            break;
    52d2:	00 00       	bra	@r0		
    52d4:	b1 3c       	jmp	$+356    	;abs 0x5438
    52d6:	00 00       	bra	@r0		
    52d8:	20 00 68 00 	bra	&0x00068	
    52dc:	00 00       	bra	@r0		
    52de:	00 00       	bra	@r0		
            
    52e0:	c2 3c       	jmp	$+390    	;abs 0x5466
    52e2:	00 00       	bra	@r0		
    52e4:	20 00 6a 00 	bra	&0x0006a	
        case WAIT_ROLL_LEFT:
    52e8:	00 00       	bra	@r0		
    52ea:	00 00       	bra	@r0		
    52ec:	d3 3c       	jmp	$+424    	;abs 0x5494
    52ee:	00 00       	bra	@r0		
    52f0:	20 00 6c 00 	bra	&0x0006c	
    52f4:	00 00       	bra	@r0		
    52f6:	00 00       	bra	@r0		
    52f8:	e4 3c       	jmp	$+458    	;abs 0x54c2
                lcd_goto(0,14);
                printf("WAIT ROLL LEFT   ");
    52fa:	00 00       	bra	@r0		
    52fc:	20 00 6e 00 	bra	&0x0006e	
    5300:	00 00       	bra	@r0		
    5302:	00 00       	bra	@r0		
        
    5304:	f5 3c       	jmp	$+492    	;abs 0x54f0
    5306:	00 00       	bra	@r0		
    5308:	20 00 70 00 	bra	&0x00070	
                if(ChannelInput[PITCH_CH] > 2500){
    530c:	00 00       	bra	@r0		
                   if(AnalogSelect < 7){
                        AnalogSelect++;
    530e:	00 00       	bra	@r0		
                    }
    5310:	06 3d       	jmp	$+526    	;abs 0x551e
    5312:	00 00       	bra	@r0		
    5314:	20 00 72 00 	bra	&0x00072	
    5318:	00 00       	bra	@r0		
    531a:	00 00       	bra	@r0		
#include "signal.h"
#include "msp430x261x.h"
#include "delay.h"
#include "analog.h"
#include "lcd6100.h"
#include "eeprom.h"
    531c:	17 3d       	jmp	$+560    	;abs 0x554c
    531e:	00 00       	bra	@r0		
#include "i2c.h"
#include "microquad.h"
    5320:	20 00 74 00 	bra	&0x00074	

    5324:	00 00       	bra	@r0		
    5326:	00 00       	bra	@r0		
    5328:	28 3d       	jmp	$+594    	;abs 0x557a
volatile unsigned int ControlCounter = 0;
    532a:	00 00       	bra	@r0		
    532c:	20 00 76 00 	bra	&0x00076	
volatile unsigned int RCCounter = 0;
    5330:	00 00       	bra	@r0		
    5332:	00 00       	bra	@r0		
volatile unsigned int MenuCounter = 0;
    5334:	39 3d       	jmp	$+628    	;abs 0x55a8

/*
    5336:	00 00       	bra	@r0		
    5338:	20 00 78 00 	bra	&0x00078	
    533c:	00 00       	bra	@r0		
    533e:	00 00       	bra	@r0		
    5340:	4b 3d       	jmp	$+664    	;abs 0x55d8
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    5342:	00 00       	bra	@r0		
    5344:	20 00 7a 00 	bra	&0x0007a	
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
    5348:	00 00       	bra	@r0		
    534a:	00 00       	bra	@r0		
    534c:	5d 3d       	jmp	$+700    	;abs 0x5608
    534e:	00 00       	bra	@r0		
    5350:	20 00 7c 00 	bra	&0x0007c	
    5354:	00 00       	bra	@r0		
    5356:	00 00       	bra	@r0		
    5358:	6f 3d       	jmp	$+736    	;abs 0x5638
    535a:	00 00       	bra	@r0		
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
    535c:	20 00 7e 00 	bra	&0x0007e	
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
    5360:	00 00       	bra	@r0		
    5362:	00 00       	bra	@r0		
    5364:	81 3d       	jmp	$+772    	;abs 0x5668
    5366:	00 00       	bra	@r0		
    5368:	20 00 80 00 	bra	&0x00080	
    536c:	00 00       	bra	@r0		
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE
    536e:	00 00       	bra	@r0		
    5370:	93 3d       	jmp	$+808    	;abs 0x5698

    5372:	00 00       	bra	@r0		
    5374:	20 00 82 00 	bra	&0x00082	
MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
    5378:	00 00       	bra	@r0		
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
    537a:	00 00       	bra	@r0		
    537c:	a5 3d       	jmp	$+844    	;abs 0x56c8
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal
    537e:	00 00       	bra	@r0		
    5380:	20 00 8b 00 	bra	&0x0008b	

    5384:	00 00       	bra	@r0		
    5386:	00 00       	bra	@r0		
    5388:	b7 3d       	jmp	$+880    	;abs 0x56f8
    538a:	00 00       	bra	@r0		
    538c:	20 00 8d 00 	bra	&0x0008d	
    5390:	00 00       	bra	@r0		
    5392:	00 00       	bra	@r0		
    5394:	c9 3d       	jmp	$+916    	;abs 0x5728
    5396:	00 00       	bra	@r0		
    5398:	20 00 8f 00 	bra	&0x0008f	
    539c:	00 00       	bra	@r0		
    539e:	00 00       	bra	@r0		
    53a0:	db 3d       	jmp	$+952    	;abs 0x5758
    53a2:	00 00       	bra	@r0		
    53a4:	20 00 91 00 	bra	&0x00091	
    53a8:	00 00       	bra	@r0		
    53aa:	00 00       	bra	@r0		
    53ac:	ed 3d       	jmp	$+988    	;abs 0x5788
    53ae:	00 00       	bra	@r0		
    53b0:	20 00 93 00 	bra	&0x00093	
    53b4:	00 00       	bra	@r0		
    53b6:	00 00       	bra	@r0		
    53b8:	ff 3d       	jmp	$+1024   	;abs 0x57b8
    53ba:	00 00       	bra	@r0		
    53bc:	20 00 95 00 	bra	&0x00095	
    53c0:	00 00       	bra	@r0		
    53c2:	00 00       	bra	@r0		
    53c4:	11 3e       	jmp	$-988    	;abs 0x4fe8
    53c6:	00 00       	bra	@r0		
    53c8:	20 00 97 00 	bra	&0x00097	
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
    53cc:	00 00       	bra	@r0		
    53ce:	00 00       	bra	@r0		
    53d0:	23 3e       	jmp	$-952    	;abs 0x5018
MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
    53d2:	00 00       	bra	@r0		
    53d4:	20 00 99 00 	bra	&0x00099	
    53d8:	00 00       	bra	@r0		
    53da:	00 00       	bra	@r0		
    53dc:	35 3e       	jmp	$-916    	;abs 0x5048
    53de:	00 00       	bra	@r0		
    53e0:	20 00 9b 00 	bra	&0x0009b	
    53e4:	00 00       	bra	@r0		
    53e6:	00 00       	bra	@r0		
    53e8:	47 3e       	jmp	$-880    	;abs 0x5078
    53ea:	00 00       	bra	@r0		
    53ec:	20 00 9d 00 	bra	&0x0009d	
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
    53f0:	00 00       	bra	@r0		
    53f2:	00 00       	bra	@r0		
    53f4:	59 3e       	jmp	$-844    	;abs 0x50a8
    53f6:	00 00       	bra	@r0		
    53f8:	20 00 9f 00 	bra	&0x0009f	
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

    53fc:	00 00       	bra	@r0		
// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    53fe:	00 00       	bra	@r0		
    5400:	6c 3e       	jmp	$-806    	;abs 0x50da
    5402:	00 00       	bra	@r0		
    5404:	20 00 a1 00 	bra	&0x000a1	
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    5408:	00 00       	bra	@r0		
    540a:	00 00       	bra	@r0		
    540c:	7f 3e       	jmp	$-768    	;abs 0x510c
    540e:	00 00       	bra	@r0		
    5410:	20 00 a3 00 	bra	&0x000a3	
    5414:	00 00       	bra	@r0		
    5416:	00 00       	bra	@r0		
    5418:	92 3e       	jmp	$-730    	;abs 0x513e
    541a:	00 00       	bra	@r0		

    541c:	20 00 a5 00 	bra	&0x000a5	
// variaveis leitura radio raw
    5420:	00 00       	bra	@r0		
    5422:	00 00       	bra	@r0		
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    5424:	a5 3e       	jmp	$-692    	;abs 0x5170
    5426:	00 00       	bra	@r0		
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    5428:	20 00 a7 00 	bra	&0x000a7	
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    542c:	00 00       	bra	@r0		
    542e:	00 00       	bra	@r0		
    5430:	b8 3e       	jmp	$-654    	;abs 0x51a2

    5432:	00 00       	bra	@r0		
    5434:	20 00 a9 00 	bra	&0x000a9	
    5438:	00 00       	bra	@r0		
    543a:	00 00       	bra	@r0		
    543c:	cb 3e       	jmp	$-616    	;abs 0x51d4
    543e:	00 00       	bra	@r0		
    5440:	20 00 12 00 	bra	&0x00012	
    5444:	00 00       	bra	@r0		
    5446:	00 00       	bra	@r0		
int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    5448:	dd 3e       	jmp	$-580    	;abs 0x5204
    544a:	00 00       	bra	@r0		
    544c:	20 00 14 00 	bra	&0x00014	
    5450:	00 00       	bra	@r0		
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    5452:	00 00       	bra	@r0		
    5454:	ef 3e       	jmp	$-544    	;abs 0x5234
    5456:	00 00       	bra	@r0		
int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio

    5458:	20 00 16 00 	bra	&0x00016	
    545c:	00 00       	bra	@r0		
    lcd_clear(BLACK);
    
    545e:	00 00       	bra	@r0		
    MenuOption = RADIO_RAW;
    5460:	01 3f       	jmp	$-508    	;abs 0x5264
    5462:	00 00       	bra	@r0		
    5464:	20 00 18 00 	bra	&0x00018	
    5468:	00 00       	bra	@r0		
    546a:	00 00       	bra	@r0		
    546c:	13 3f       	jmp	$-472    	;abs 0x5294
    546e:	00 00       	bra	@r0		
    5470:	20 00 18 00 	bra	&0x00018	
    5474:	00 00       	bra	@r0		
    MenuStep = DISPLAY;
    5476:	00 00       	bra	@r0		
    5478:	22 3f       	jmp	$-442    	;abs 0x52be
    MenuVisible = TRUE;     // inicializa mostrando o menu
    547a:	00 00       	bra	@r0		
    547c:	20 00 1a 00 	bra	&0x0001a	
        
    5480:	00 00       	bra	@r0		
    while(1){
    5482:	00 00       	bra	@r0		
    5484:	31 3f       	jmp	$-412    	;abs 0x52e8
        /* os Counters sao incrementados na interrution do timerA
    5486:	00 00       	bra	@r0		
    5488:	20 00 1d 00 	bra	&0x0001d	
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
    548c:	00 00       	bra	@r0		
    548e:	00 00       	bra	@r0		
    5490:	3e 3f       	jmp	$-386    	;abs 0x530e
    5492:	00 00       	bra	@r0		
    5494:	20 00 3f 00 	bra	&0x0003f	
    5498:	00 00       	bra	@r0		
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
    549a:	00 00       	bra	@r0		
    while(1){
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
    549c:	4d 3f       	jmp	$-356    	;abs 0x5338
    549e:	00 00       	bra	@r0		
    54a0:	20 00 41 00 	bra	&0x00041	
    54a4:	00 00       	bra	@r0		
    54a6:	00 00       	bra	@r0		
    54a8:	62 3f       	jmp	$-314    	;abs 0x536e
    54aa:	00 00       	bra	@r0		
    54ac:	20 00 43 00 	bra	&0x00043	
    54b0:	00 00       	bra	@r0		
    54b2:	00 00       	bra	@r0		
    54b4:	71 3f       	jmp	$-284    	;abs 0x5398
    54b6:	00 00       	bra	@r0		
    54b8:	20 00 45 00 	bra	&0x00045	
    54bc:	00 00       	bra	@r0		
    54be:	00 00       	bra	@r0		
    54c0:	7f 3f       	jmp	$-256    	;abs 0x53c0
    54c2:	00 00       	bra	@r0		
    54c4:	20 00 47 00 	bra	&0x00047	
    54c8:	00 00       	bra	@r0		
    54ca:	00 00       	bra	@r0		
    54cc:	8e 3f       	jmp	$-226    	;abs 0x53ea
    54ce:	00 00       	bra	@r0		
    54d0:	20 00 49 00 	bra	&0x00049	
    54d4:	00 00       	bra	@r0		
    54d6:	00 00       	bra	@r0		
    54d8:	9c 3f       	jmp	$-198    	;abs 0x5412
    54da:	00 00       	bra	@r0		
    54dc:	20 00 4c 00 	bra	&0x0004c	
    54e0:	00 00       	bra	@r0		
     */
    BCSCTL1 = 0xcf;     

    /* 
     * Basic Clock System Control 3
     * 
    54e2:	00 00       	bra	@r0		
    54e4:	ab 3f       	jmp	$-168    	;abs 0x543c
    54e6:	00 00       	bra	@r0		
    54e8:	20 00 4e 00 	bra	&0x0004e	
    54ec:	00 00       	bra	@r0		
    54ee:	00 00       	bra	@r0		
    54f0:	b9 3f       	jmp	$-140    	;abs 0x5464
    54f2:	00 00       	bra	@r0		
    54f4:	20 00 50 00 	bra	&0x00050	

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    54f8:	00 00       	bra	@r0		
    54fa:	00 00       	bra	@r0		
    54fc:	c8 3f       	jmp	$-110    	;abs 0x548e
    54fe:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5500:	20 00 52 00 	bra	&0x00052	
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5504:	00 00       	bra	@r0		
    5506:	00 00       	bra	@r0		
    5508:	d6 3f       	jmp	$-82     	;abs 0x54b6
    550a:	00 00       	bra	@r0		
    550c:	20 00 54 00 	bra	&0x00054	
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5510:	00 00       	bra	@r0		
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5512:	00 00       	bra	@r0		
    5514:	e5 3f       	jmp	$-52     	;abs 0x54e0
    5516:	00 00       	bra	@r0		
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5518:	20 00 56 00 	bra	&0x00056	
            lcd_goto(0,14);
    551c:	00 00       	bra	@r0		
    551e:	00 00       	bra	@r0		
    5520:	f3 3f       	jmp	$-24     	;abs 0x5508
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5522:	00 00       	bra	@r0		
    5524:	20 00 59 00 	bra	&0x00059	
    5528:	00 00       	bra	@r0		
    552a:	00 00       	bra	@r0		
    552c:	02 40       	mov	r0,	r2	
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
            break;
    552e:	00 00       	bra	@r0		
    5530:	20 00 5b 00 	bra	&0x0005b	
     * CM_0 -- No Capture
     * CCIS_0 -- CCIxA
     * ~SCS -- Asynchronous Capture
     * ~SCCI -- Latched capture signal (read)
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
    5534:	00 00       	bra	@r0		
    5536:	00 00       	bra	@r0		
    5538:	10 40 00 00 	br	0x0000		;PC rel. 0x0553c
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    553c:	20 00 5d 00 	bra	&0x0005d	
    5540:	00 00       	bra	@r0		
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5542:	00 00       	bra	@r0		
    5544:	1f 40 00 00 	mov	0x0000,	r15	;PC rel. 0x05548
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5548:	20 00 5f 00 	bra	&0x0005f	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    554c:	00 00       	bra	@r0		
    554e:	00 00       	bra	@r0		
            
    5550:	2d 40       	mov	@r0,	r13	
    5552:	00 00       	bra	@r0		
    5554:	20 00 61 00 	bra	&0x00061	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5558:	00 00       	bra	@r0		
{
    /* 
     * TACCTL0, Capture/Compare Control Register 0
     * 
     * CM_0 -- No Capture
     * CCIS_0 -- CCIxA
    555a:	00 00       	bra	@r0		
    555c:	3c 40 00 00 	mov	#0,	r12	;#0x0000
    5560:	20 00 63 00 	bra	&0x00063	
    5564:	00 00       	bra	@r0		
    5566:	00 00       	bra	@r0		
    5568:	4a 40       	mov.b	r0,	r10	
    556a:	00 00       	bra	@r0		
     * ~SCS -- Asynchronous Capture
    556c:	20 00 47 00 	bra	&0x00047	
    5570:	00 00       	bra	@r0		
    5572:	00 00       	bra	@r0		
    5574:	58 40 00 00 	mov.b	0x0000,	r8	;PC rel. 0x05578
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
        i2c_change_address(EEPROM_I2C_ADDR);
    5578:	20 00 45 00 	bra	&0x00045	
    557c:	00 00       	bra	@r0		
    557e:	00 00       	bra	@r0		
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5580:	63 40       	.word	0x4063;	????	Illegal as 2-op instr
    5582:	00 00       	bra	@r0		
    5584:	20 00 4c 00 	bra	&0x0004c	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5588:	00 00       	bra	@r0		
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    558a:	00 00       	bra	@r0		
    558c:	6f 40       	mov.b	@r0,	r15	
    TACCR0 = 4001;

    /* 
     * TACTL, Timer_A3 Control Register
     * 
     * TASSEL_2 -- SMCLK
    558e:	00 00       	bra	@r0		
    5590:	20 00 54 00 	bra	&0x00054	
     * ID_3 -- Divider - /8
    5594:	00 00       	bra	@r0		
     * MC_1 -- Up Mode
    5596:	00 00       	bra	@r0		
    5598:	7a 40 00 00 	mov.b	#0,	r10	;#0x0000
    559c:	20 00 5c 00 	bra	&0x0005c	
     */
    55a0:	00 00       	bra	@r0		
    55a2:	00 00       	bra	@r0		
    55a4:	86 40 00 00 	mov	r0,	0(r6)	;0x0000(r6)
    TACTL = TASSEL_2 + ID_3 + MC_1;
}
    55a8:	20 00 6e 00 	bra	&0x0006e	

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    55ac:	00 00       	bra	@r0		
    55ae:	00 00       	bra	@r0		
    55b0:	9a 40 00 00 	mov	0x0000,	32(r10)	;PC rel. 0x055b4, 0x0020(r10)
    55b4:	20 00 
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    55b6:	70 00 00 00 	mova	r0,	0x0000	;PC rel. 0x055b8
    55ba:	00 00       	bra	@r0		
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
    55bc:	b0 40 00 00 	mov	#0,	0x0020	;#0x0000, PC rel. 0x055e2
    55c0:	20 00 
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    55c2:	72 00 00 00 	mova	r0,	&0x0000	
    55c6:	00 00       	bra	@r0		
    55c8:	c6 40 00 00 	mov.b	r0,	0(r6)	;0x0000(r6)
    55cc:	20 00 74 00 	bra	&0x00074	
    55d0:	00 00       	bra	@r0		
    55d2:	00 00       	bra	@r0		
    55d4:	dd 40 00 00 	mov.b	0x0000,	32(r13)	;PC rel. 0x055d8, 0x0020(r13)
    55d8:	20 00 
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    55da:	76 00 00 00 	mova	r0,	0(r6)	;0x0000(r6)
                }
    55de:	00 00       	bra	@r0		
    55e0:	f4 40 00 00 	mov.b	#0,	32(r4)	;#0x0000, 0x0020(r4)
    55e4:	20 00 
    55e6:	93 00       	.word	0x0093;	????	Illegal as address instr
    55e8:	00 00       	bra	@r0		
    55ea:	00 00       	bra	@r0		
    55ec:	08 41       	mov	r1,	r8	
    55ee:	00 00       	bra	@r0		
    55f0:	20 00 95 00 	bra	&0x00095	
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    55f4:	00 00       	bra	@r0		
    55f6:	00 00       	bra	@r0		
    55f8:	1c 41 00 00 	mov	0(r1),	r12	;0x0000(r1)
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    55fc:	20 00 97 00 	bra	&0x00097	
    
    lcd_goto(2,5);
    5600:	00 00       	bra	@r0		
    5602:	00 00       	bra	@r0		
    5604:	30 41       	ret			
    5606:	00 00       	bra	@r0		
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    5608:	20 00 99 00 	bra	&0x00099	
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
    560c:	00 00       	bra	@r0		
    560e:	00 00       	bra	@r0		
        PPMSlope[i] = 1;
    5610:	44 41       	mov.b	r1,	r4	
    5612:	00 00       	bra	@r0		
    5614:	20 00 9b 00 	bra	&0x0009b	
    5618:	00 00       	bra	@r0		
    561a:	00 00       	bra	@r0		
    }
    
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
    561c:	57 41 00 00 	mov.b	0(r1),	r7	;0x0000(r1)
    5620:	20 00 9d 00 	bra	&0x0009d	
    5624:	00 00       	bra	@r0		
    5626:	00 00       	bra	@r0		
    5628:	6a 41       	mov.b	@r1,	r10	
    562a:	00 00       	bra	@r0		
    562c:	20 00 9f 00 	bra	&0x0009f	
    5630:	00 00       	bra	@r0		
    5632:	00 00       	bra	@r0		
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
    5634:	7d 41       	pop.b	r13		
    5636:	00 00       	bra	@r0		
    5638:	20 00 a1 00 	bra	&0x000a1	
	...
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    5644:	64 00 00 00 	mova	r0,	&0x40000
    5648:	24 4e       	mov	@r14,	r4	
    564a:	00 00       	bra	@r0		
    564c:	cc 33       	jn	$-102    	;abs 0x55e6
    564e:	00 00       	bra	@r0		
    5650:	64 00 00 00 	mova	r0,	&0x40000
    5654:	24 4e       	mov	@r14,	r4	
    5656:	00 00       	bra	@r0		
    5658:	90 41 00 00 	mov	0(r1),	0x0064	;0x0000(r1), PC rel. 0x056c2
    565c:	64 00 
    565e:	00 00       	bra	@r0		
    5660:	24 4e       	mov	@r14,	r4	
    5662:	00 00       	bra	@r0		
    5664:	6a 00 00 00 	mova	r0,	&0xa0000
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    lcd_clear(BLACK);
    5668:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0566a
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    566c:	00 00       	bra	@r0		
    566e:	00 00       	bra	@r0		
    5670:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    }

    5674:	80 00 00 00 	bra	#0x00000	
    5678:	00 00       	bra	@r0		
    567a:	00 00       	bra	@r0		
    567c:	99 00 00 00 	cmpa	#0x00000,r9	
    5680:	80 00 00 00 	bra	#0x00000	
    5684:	00 00       	bra	@r0		
    5686:	00 00       	bra	@r0		
    5688:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    568a:	00 00       	bra	@r0		
    // grava dados na EEPROM
    568c:	80 00 00 00 	bra	#0x00000	
    5690:	00 00       	bra	@r0		
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    5692:	00 00       	bra	@r0		
    5694:	ec 00       	adda	r0,	r12	
    }
    5696:	00 00       	bra	@r0		
    5698:	80 00 00 00 	bra	#0x00000	
    
    569c:	00 00       	bra	@r0		
    569e:	00 00       	bra	@r0		
    56a0:	24 01 00 00 	mova	&0x10000,r4	
    
    lcd_goto(2,5);
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    56a4:	80 00 00 00 	bra	#0x00000	
    56a8:	00 00       	bra	@r0		
    56aa:	00 00       	bra	@r0		
    56ac:	66 01 00 00 	mova	r1,	&0x60000
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
                PPMMin[i] = PPMValue[i];
            }
    56b0:	80 00 00 00 	bra	#0x00000	
        }
    56b4:	00 00       	bra	@r0		
    56b6:	00 00       	bra	@r0		
    }
    56b8:	b7 01 00 00 	suba	#0x10000,r7	
    56bc:	80 00 00 00 	bra	#0x00000	
    56c0:	00 00       	bra	@r0		
    56c2:	00 00       	bra	@r0		
    56c4:	08 02       	mova	#4,	r8	;r2 As==10
    56c6:	00 00       	bra	@r0		
    56c8:	80 00 00 00 	bra	#0x00000	
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
    56cc:	00 00       	bra	@r0		
        }
        channel_num++;
    }
    56ce:	00 00       	bra	@r0		
    56d0:	2e 02 00 00 	mova	&0x20000,r14	
}

void calibrate_radio(void){
    
    56d4:	80 00 00 00 	bra	#0x00000	
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    56d8:	00 00       	bra	@r0		
    56da:	00 00       	bra	@r0		
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
}

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    56dc:	6c 02 00 00 	mova	r2,	&0xc0000
    56e0:	80 00 00 00 	bra	#0x00000	
    56e4:	00 00       	bra	@r0		
    56e6:	00 00       	bra	@r0		
    56e8:	96 02 00 00 	cmpa	#0x20000,r6	
    56ec:	80 00 00 00 	bra	#0x00000	
    56f0:	00 00       	bra	@r0		

    // grava dados na EEPROM
    if(EEPROMFound){
        i2c_change_address(EEPROM_I2C_ADDR);
        
        // grava yaw slope 
    56f2:	00 00       	bra	@r0		
    56f4:	bf 02 00 00 	suba	#0x20000,r15	
    56f8:	80 00 00 00 	bra	#0x00000	
    56fc:	00 00       	bra	@r0		
    56fe:	00 00       	bra	@r0		
    5700:	d9 02       	cmpa	r2,	r9	
    5702:	00 00       	bra	@r0		
        ValorAux.f = PPMSlope[YAW_CH];
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        
        delayms(100);
    5704:	80 00 00 00 	bra	#0x00000	
    5708:	00 00       	bra	@r0		
        // grava throttle slope 
        ValorAux.f = PPMSlope[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
    570a:	00 00       	bra	@r0		
    570c:	f4 02       	suba	r2,	r4	
    570e:	00 00       	bra	@r0		
    5710:	80 00 00 00 	bra	#0x00000	
        // grava pitch slope 
    5714:	00 00       	bra	@r0		
    5716:	00 00       	bra	@r0		
    5718:	14 03       	mova	#-1,	r4	;r3 As==11
        ValorAux.f = PPMSlope[PITCH_CH];
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    571a:	00 00       	bra	@r0		
    571c:	80 00 00 00 	bra	#0x00000	
    5720:	00 00       	bra	@r0		
    5722:	00 00       	bra	@r0		
    5724:	4d 03       	rrum.a	#1,	r13	
        
    5726:	00 00       	bra	@r0		
    5728:	80 00 00 00 	bra	#0x00000	
    572c:	00 00       	bra	@r0		
    572e:	00 00       	bra	@r0		
    5730:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    5734:	80 00 00 00 	bra	#0x00000	
        delayms(100);
        
    5738:	00 00       	bra	@r0		
    573a:	00 00       	bra	@r0		
    573c:	8a 03 00 00 	mova	#0x30000,r10	
    5740:	80 00 00 00 	bra	#0x00000	
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
    5744:	00 00       	bra	@r0		
    5746:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    5748:	ae 03 00 00 	adda	#0x30000,r14	
    574c:	80 00 00 00 	bra	#0x00000	
        
        delayms(100);
        
        // grava ch5 slope 
    5750:	00 00       	bra	@r0		
    5752:	00 00       	bra	@r0		
    5754:	d7 03       	tsta	r7		
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    5756:	00 00       	bra	@r0		
    5758:	80 00 00 00 	bra	#0x00000	
    575c:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    575e:	00 00       	bra	@r0		
    5760:	90 41 00 00 	mov	0(r1),	0x0082	;0x0000(r1), PC rel. 0x057e8
    5764:	82 00 
        
        delayms(100);
    5766:	00 00       	bra	@r0		
    5768:	24 05 00 00 	mova	&0x50000,r4	
    576c:	0d 16       	popm.a	#1,	r13	
    576e:	00 00       	bra	@r0		
    5770:	82 00 00 00 	mova	#0x00000,r2	
        
    5774:	02 17       	popm	#1,	r2	
    5776:	00 00       	bra	@r0		
    5778:	99 41 00 00 	mov	0(r1),	128(r9)	;0x0000(r1), 0x0080(r9)
    577c:	80 00 
    577e:	24 00 00 00 	mova	&0x00000,r4	
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
    5782:	00 00       	bra	@r0		
    5784:	00 00       	bra	@r0		
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
        
    5786:	00 00       	bra	@r0		
    5788:	a2 00 00 00 	adda	#0x00000,r2	
    578c:	00 00       	bra	@r0		
    578e:	00 00       	bra	@r0		
    5790:	05 42       	mov	r2,	r5	
    5792:	00 00       	bra	@r0		
        delayms(100);
        
    5794:	20 00 03 00 	bra	&0x00003	
	...
    clock_init();
    
    timer_a3_init();
    
    p1_init();
    
    57a0:	64 00 00 00 	mova	r0,	&0x40000
    57a4:	24 4e       	mov	@r14,	r4	
    
    i2c_init();
    
    eint();
    
    lcd_init(BLACK);
    57a6:	00 00       	bra	@r0		
    57a8:	cc 33       	jn	$-102    	;abs 0x5742
    57aa:	00 00       	bra	@r0		
    57ac:	64 00 00 00 	mova	r0,	&0x40000
    
    57b0:	24 4e       	mov	@r14,	r4	
    57b2:	00 00       	bra	@r0		
    57b4:	19 42 00 00 	mov	&0x0000,r9	
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));

    57b8:	64 00 00 00 	mova	r0,	&0x40000
    57bc:	24 4e       	mov	@r14,	r4	
    57be:	00 00       	bra	@r0		
    57c0:	6a 00 00 00 	mova	r0,	&0xa0000
    i2c_config(EEPROM_I2C_ADDR);
    57c4:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x057c6
    57c8:	00 00       	bra	@r0		
    57ca:	00 00       	bra	@r0		
    57cc:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    57d0:	80 00 00 00 	bra	#0x00000	
    EEPROMFound = !(i2c_find_device());
    
    57d4:	00 00       	bra	@r0		
    57d6:	00 00       	bra	@r0		
    57d8:	99 00 00 00 	cmpa	#0x00000,r9	
    57dc:	80 00 00 00 	bra	#0x00000	
    if(EEPROMFound){
        printf("EEPROM found\n");
    57e0:	00 00       	bra	@r0		
    57e2:	00 00       	bra	@r0		
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    57e4:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    57e6:	00 00       	bra	@r0		
    57e8:	80 00 00 00 	bra	#0x00000	
        
        delayms(100);
        
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    57ec:	00 00       	bra	@r0		
    57ee:	00 00       	bra	@r0		
    57f0:	ec 00       	adda	r0,	r12	
    57f2:	00 00       	bra	@r0		
    57f4:	80 00 00 00 	bra	#0x00000	
    57f8:	00 00       	bra	@r0		
    57fa:	00 00       	bra	@r0		
    57fc:	24 01 00 00 	mova	&0x10000,r4	
    5800:	80 00 00 00 	bra	#0x00000	
    5804:	00 00       	bra	@r0		
    5806:	00 00       	bra	@r0		
        
    5808:	66 01 00 00 	mova	r1,	&0x60000
    580c:	80 00 00 00 	bra	#0x00000	
        delayms(100);
    5810:	00 00       	bra	@r0		
    5812:	00 00       	bra	@r0		

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5814:	b7 01 00 00 	suba	#0x10000,r7	
    5818:	80 00 00 00 	bra	#0x00000	
    581c:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    581e:	00 00       	bra	@r0		
    5820:	08 02       	mova	#4,	r8	;r2 As==10
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5822:	00 00       	bra	@r0		
    5824:	80 00 00 00 	bra	#0x00000	
    5828:	00 00       	bra	@r0		
    582a:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    582c:	2e 02 00 00 	mova	&0x20000,r14	
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5830:	80 00 00 00 	bra	#0x00000	
    5834:	00 00       	bra	@r0		
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5836:	00 00       	bra	@r0		
    5838:	6c 02 00 00 	mova	r2,	&0xc0000
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    583c:	80 00 00 00 	bra	#0x00000	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5840:	00 00       	bra	@r0		
    5842:	00 00       	bra	@r0		
        
        // grava ch7 offset 
        ValorAux.f = PPMOffset[CH7_CH];
        i2c_write16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
        
        delayms(100);
    5844:	96 02 00 00 	cmpa	#0x20000,r6	
    5848:	80 00 00 00 	bra	#0x00000	
    584c:	00 00       	bra	@r0		
    584e:	00 00       	bra	@r0		
    5850:	bf 02 00 00 	suba	#0x20000,r15	
        
    5854:	80 00 00 00 	bra	#0x00000	
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
            break;
    5858:	00 00       	bra	@r0		
    585a:	00 00       	bra	@r0		
            if(ChannelInput[PITCH_CH] > 2500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
    585c:	d9 02       	cmpa	r2,	r9	
    585e:	00 00       	bra	@r0		
    5860:	80 00 00 00 	bra	#0x00000	
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5864:	00 00       	bra	@r0		
    5866:	00 00       	bra	@r0		
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5868:	f4 02       	suba	r2,	r4	
    586a:	00 00       	bra	@r0		
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    586c:	80 00 00 00 	bra	#0x00000	
    5870:	00 00       	bra	@r0		
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5872:	00 00       	bra	@r0		
    5874:	14 03       	mova	#-1,	r4	;r3 As==11
        delayms(100);
        
        lcd_goto(2,2);
        printf("Params saved.");
        delayms(2000);
    }
    5876:	00 00       	bra	@r0		
    5878:	80 00 00 00 	bra	#0x00000	
    587c:	00 00       	bra	@r0		
    587e:	00 00       	bra	@r0		
    5880:	4d 03       	rrum.a	#1,	r13	
    5882:	00 00       	bra	@r0		
    5884:	80 00 00 00 	bra	#0x00000	
}
    5888:	00 00       	bra	@r0		
    588a:	00 00       	bra	@r0		
    588c:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5890:	80 00 00 00 	bra	#0x00000	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5894:	00 00       	bra	@r0		
    5896:	00 00       	bra	@r0		
            
    5898:	8a 03 00 00 	mova	#0x30000,r10	
    589c:	80 00 00 00 	bra	#0x00000	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    58a0:	00 00       	bra	@r0		
    ChannelInput[THROTTLE_CH] = PPMValue[THROTTLE_CH] * PPMSlope[THROTTLE_CH] + PPMOffset[THROTTLE_CH];
    ChannelInput[YAW_CH] = PPMValue[YAW_CH] * PPMSlope[YAW_CH] + PPMOffset[YAW_CH];
    ChannelInput[PITCH_CH] = PPMValue[PITCH_CH] * PPMSlope[PITCH_CH] + PPMOffset[PITCH_CH]; // pitch invertido
    ChannelInput[ROLL_CH] = PPMValue[ROLL_CH] * PPMSlope[ROLL_CH] + PPMOffset[ROLL_CH];
    ChannelInput[CH5_CH] = PPMValue[CH5_CH] * PPMSlope[CH5_CH] + PPMOffset[CH5_CH];
    ChannelInput[CH6_CH] = PPMValue[CH6_CH] * PPMSlope[CH6_CH] + PPMOffset[CH6_CH];
    58a2:	00 00       	bra	@r0		
    58a4:	ae 03 00 00 	adda	#0x30000,r14	
    58a8:	80 00 00 00 	bra	#0x00000	
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
    58ac:	00 00       	bra	@r0		
    58ae:	00 00       	bra	@r0		
    58b0:	d7 03       	tsta	r7		
}
    58b2:	00 00       	bra	@r0		
    58b4:	80 00 00 00 	bra	#0x00000	

void load_transmitter_values(void){
    fourbytes ValorAux;

    58b8:	00 00       	bra	@r0		
    58ba:	00 00       	bra	@r0		
    if(EEPROMFound == 1){
        i2c_change_address(EEPROM_I2C_ADDR);    

        // load yaw slope e offset
    58bc:	19 42 00 00 	mov	&0x0000,r9	
    58c0:	82 00 00 00 	mova	#0x00000,r2	
    58c4:	15 d1 03 00 	bis	3(r1),	r5	;0x0003(r1)
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        PPMSlope[YAW_CH] = ValorAux.f;
    58c8:	62 16       	popm.a	#7,	r8	
    58ca:	00 00       	bra	@r0		
    58cc:	c2 00       	mova	r0,	r2	
    58ce:	00 00       	bra	@r0		
    58d0:	00 00       	bra	@r0		
    58d2:	00 00       	bra	@r0		
    58d4:	cf 09       	mova	r9,	r15	
    58d6:	00 00       	bra	@r0		
    58d8:	c2 00       	mova	r0,	r2	
    58da:	00 00       	bra	@r0		
    58dc:	00 00       	bra	@r0		
    58de:	00 00       	bra	@r0		
    58e0:	ab 09 00 00 	adda	#0x90000,r11	
    58e4:	c2 00       	mova	r0,	r2	
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    58e6:	00 00       	bra	@r0		
    58e8:	00 00       	bra	@r0		
    58ea:	00 00       	bra	@r0		
    58ec:	cd 04       	mova	r4,	r13	
    58ee:	00 00       	bra	@r0		
    58f0:	c2 00       	mova	r0,	r2	
    58f2:	00 00       	bra	@r0		
    58f4:	91 34       	jge	$+292    	;abs 0x5a18
    58f6:	00 00       	bra	@r0		
    58f8:	f6 09       	suba	r9,	r6	
        PPMOffset[YAW_CH] = ValorAux.f;
        
    58fa:	00 00       	bra	@r0		
    58fc:	c2 00       	mova	r0,	r2	
        // load throttle slope  e offset
    58fe:	00 00       	bra	@r0		
    5900:	00 00       	bra	@r0		
    5902:	00 00       	bra	@r0		
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    5904:	1c 0a       	mova	@r10+,	r12	
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
        PPMOffset[THROTTLE_CH] = ValorAux.f;
    5906:	00 00       	bra	@r0		
    5908:	c2 00       	mova	r0,	r2	
        
    590a:	00 00       	bra	@r0		
    590c:	00 00       	bra	@r0		
    590e:	00 00       	bra	@r0		
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
}

void load_transmitter_values(void){
    fourbytes ValorAux;

    5910:	43 0a       	rlam.a	#3,	#0	;r3 As==00
    5912:	00 00       	bra	@r0		
    5914:	c2 00       	mova	r0,	r2	
    5916:	00 00       	bra	@r0		
    5918:	c1 68 00 00 	addc.b	r8,	0(r1)	;0x0000(r1)
    lcd_goto(0,0);
    printf("     RC inputs");
    lcd_goto(0,2);
    
    for(i = 0; i < 8; i++){
        if(!raw){
    591c:	41 0c       	rrcm.a	#4,	r1	
    591e:	00 00       	bra	@r0		
    5920:	c2 00       	mova	r0,	r2	
    5922:	00 00       	bra	@r0		
    5924:	00 00       	bra	@r0		
    5926:	00 00       	bra	@r0		
    5928:	68 0c 00 00 	mova	r12,	&0x80000
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
    592c:	c2 00       	mova	r0,	r2	
    592e:	00 00       	bra	@r0		
    5930:	3e 8a       	sub	@r10+,	r14	
    5932:	00 00       	bra	@r0		
    5934:	eb 0e       	adda	r14,	r11	
    5936:	00 00       	bra	@r0		
    5938:	c2 00       	mova	r0,	r2	
    593a:	00 00       	bra	@r0		
        }
        else{
    593c:	90 a7 00 00 	dadd	0(r7),	0x11de	;0x0000(r7), PC rel. 0x06b20
    5940:	de 11 
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
        }
        k = 21 + (8 * i); //posicao inicial em y
        if(!raw){
    5942:	00 00       	bra	@r0		
    5944:	c2 00       	mova	r0,	r2	
    5946:	00 00       	bra	@r0		
            if(ChannelInput[i] > 4000){
                h=100;
    5948:	00 00       	bra	@r0		
    594a:	00 00       	bra	@r0		
    594c:	0c 12       	push	r12		
            }
    594e:	00 00       	bra	@r0		
    5950:	c2 00       	mova	r0,	r2	
    5952:	00 00       	bra	@r0		
    5954:	00 00       	bra	@r0		
    5956:	00 00       	bra	@r0		
    5958:	34 12       	push	@r4+		
            else{
                if(ChannelInput[i] < 2001){
    595a:	00 00       	bra	@r0		
    595c:	c2 00       	mova	r0,	r2	
    595e:	00 00       	bra	@r0		
    5960:	00 00       	bra	@r0		
    5962:	00 00       	bra	@r0		
                    h = 0;
    5964:	5c 12 00 00 	push.b	0(r12)		;0x0000(r12)
    5968:	c2 00       	mova	r0,	r2	
                }
                else{
    596a:	00 00       	bra	@r0		
    596c:	0c af       	dadd	r15,	r12	
    596e:	00 00       	bra	@r0		
    5970:	7b 15       	pushm	#8,	r11	
    5972:	00 00       	bra	@r0		
    5974:	c2 00       	mova	r0,	r2	
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
                }
    5976:	00 00       	bra	@r0		
    5978:	00 00       	bra	@r0		
    597a:	00 00       	bra	@r0		
            }
        }
    597c:	a3 15       	pushm	#11,	#0	;r3 As==00
    597e:	00 00       	bra	@r0		
    5980:	c2 00       	mova	r0,	r2	
        else{
            if(PPMValue[i] > 4000){
    5982:	00 00       	bra	@r0		
    5984:	00 00       	bra	@r0		
                h=100;
    5986:	00 00       	bra	@r0		
    5988:	c9 15       	pushm	#13,	r9	
    598a:	00 00       	bra	@r0		
    598c:	c2 00       	mova	r0,	r2	
            }
    598e:	00 00       	bra	@r0		
            else{
    5990:	00 00       	bra	@r0		
    5992:	00 00       	bra	@r0		
    5994:	f2 15       	pushm	#16,	r2	
    5996:	00 00       	bra	@r0		
    5998:	c2 00       	mova	r0,	r2	
    599a:	00 00       	bra	@r0		
    599c:	00 00       	bra	@r0		
    599e:	00 00       	bra	@r0		
    59a0:	1f 42 00 00 	mov	&0x0000,r15	

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
    59a4:	24 00 1a 00 	mova	&0x0001a,r4	
    59a8:	24 4e       	mov	@r14,	r4	
    59aa:	00 00       	bra	@r0		
    59ac:	32 42       	mov	#8,	r2	;r2 As==11
    59ae:	00 00       	bra	@r0		
    59b0:	40 00       	rrcm.a	#1,	r0	
    59b2:	19 00       	mova	#0x00000,r9	
    59b4:	0b 00       	mova	@r0,	r11	
void main_loop(){
    
    
}

void setup(){
    59b6:	00 00       	bra	@r0		
    59b8:	00 00       	bra	@r0		
    59ba:	00 00       	bra	@r0		
    59bc:	44 00       	rrcm.a	#1,	r4	
    59be:	1a 00       	mova	#0x00000,r10	
	...
    
    clock_init();
    59c8:	44 00       	rrcm.a	#1,	r4	
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
        }
    }   
    59ca:	1b 00       	mova	#0x00000,r11	
    59cc:	04 00       	mova	@r0,	r4	
    return 0;
}


// loop de controle
    59ce:	00 00       	bra	@r0		
    59d0:	00 00       	bra	@r0		
    59d2:	00 00       	bra	@r0		
    59d4:	44 00       	rrcm.a	#1,	r4	
    59d6:	1c 00       	mova	#0x00000,r12	
    59d8:	08 00       	mova	@r0,	r8	
void main_loop(){
    
    
    59da:	00 00       	bra	@r0		
    59dc:	00 00       	bra	@r0		
    59de:	00 00       	bra	@r0		
    59e0:	44 00       	rrcm.a	#1,	r4	
    59e2:	1d 00       	mova	#0x00000,r13	
    59e4:	0c 00       	mova	@r0,	r12	
    59e6:	00 00       	bra	@r0		
    59e8:	00 00       	bra	@r0		
    59ea:	00 00       	bra	@r0		
    59ec:	24 00 00 00 	mova	&0x00000,r4	
    59f0:	10 00       	bra	#0x00000	
}

void setup(){
    
    clock_init();
    
    59f2:	00 00       	bra	@r0		
    59f4:	45 42       	mov.b	r2,	r5	
    59f6:	00 00       	bra	@r0		
    59f8:	24 00 20 00 	mova	&0x00020,r4	
    59fc:	34 4e       	mov	@r14+,	r4	
    59fe:	00 00       	bra	@r0		
    5a00:	32 42       	mov	#8,	r2	;r2 As==11
    5a02:	00 00       	bra	@r0		
    5a04:	40 00       	rrcm.a	#1,	r0	
    5a06:	1f 00       	mova	#0x00000,r15	
    5a08:	0f 00       	mova	@r0,	r15	
    5a0a:	00 00       	bra	@r0		
    5a0c:	00 00       	bra	@r0		
    5a0e:	00 00       	bra	@r0		
    5a10:	44 00       	rrcm.a	#1,	r4	
    5a12:	20 00 00 00 	bra	&0x00000	
    5a16:	00 00       	bra	@r0		
    5a18:	00 00       	bra	@r0		
    5a1a:	00 00       	bra	@r0		
    5a1c:	44 00       	rrcm.a	#1,	r4	
    5a1e:	21 00 00 00 	mova	&0x00000,r1	
    5a22:	00 00       	bra	@r0		
    5a24:	00 00       	bra	@r0		
    5a26:	00 00       	bra	@r0		
    5a28:	44 00       	rrcm.a	#1,	r4	
    5a2a:	22 00 04 00 	mova	&0x00004,r2	
    5a2e:	00 00       	bra	@r0		
    5a30:	00 00       	bra	@r0		
    5a32:	00 00       	bra	@r0		
    5a34:	24 00 00 00 	mova	&0x00000,r4	
    5a38:	06 00       	mova	@r0,	r6	
    5a3a:	00 00       	bra	@r0		
    5a3c:	60 42       	br	#4		;r2 As==10
    5a3e:	00 00       	bra	@r0		
    5a40:	24 00 25 00 	mova	&0x00025,r4	
    5a44:	3a 4e       	mov	@r14+,	r10	
    5a46:	00 00       	bra	@r0		
    5a48:	00 00       	bra	@r0		
    5a4a:	00 00       	bra	@r0		
    5a4c:	44 00       	rrcm.a	#1,	r4	
    5a4e:	25 00 00 00 	mova	&0x00000,r5	

        //if(1){
        if(StatusFlags[0] != 0){
            printf("Calibrando radio...\n");
            delayms(4000);
            calibrate_radio();
    5a52:	00 00       	bra	@r0		
    5a54:	00 00       	bra	@r0		
    5a56:	00 00       	bra	@r0		
    5a58:	44 00       	rrcm.a	#1,	r4	
    5a5a:	26 00 00 00 	mova	&0x00000,r6	
    5a5e:	00 00       	bra	@r0		

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5a60:	00 00       	bra	@r0		
    5a62:	00 00       	bra	@r0		
    5a64:	44 00       	rrcm.a	#1,	r4	
    5a66:	27 00 06 00 	mova	&0x00006,r7	
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5a6a:	00 00       	bra	@r0		
    5a6c:	00 00       	bra	@r0		
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5a6e:	00 00       	bra	@r0		
    5a70:	44 00       	rrcm.a	#1,	r4	
    5a72:	28 00 0a 00 	mova	&0x0000a,r8	
    5a76:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5a78:	00 00       	bra	@r0		
    5a7a:	00 00       	bra	@r0		
        }
    }
    else{
        color_fore = RED;
        printf("EEPROM not found\n");
        color_fore = LIME;
    5a7c:	44 00       	rrcm.a	#1,	r4	
    5a7e:	29 00 0e 00 	mova	&0x0000e,r9	
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5a82:	00 00       	bra	@r0		
    5a84:	00 00       	bra	@r0		
    5a86:	00 00       	bra	@r0		
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5a88:	44 00       	rrcm.a	#1,	r4	
    5a8a:	2a 00 12 00 	mova	&0x00012,r10	
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5a8e:	00 00       	bra	@r0		
    5a90:	00 00       	bra	@r0		
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5a92:	00 00       	bra	@r0		
    5a94:	24 00 00 00 	mova	&0x00000,r4	
        printf("EEPROM not found\n");
        color_fore = LIME;
    }
    analog_graph_clear_all();    
    
    lcd_drawline(10,80,90,90,RED);
    5a98:	14 00       	mova	#0x00000,r4	
    5a9a:	00 00       	bra	@r0		
    5a9c:	71 42       	mov.b	#8,	r1	;r2 As==11
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
            break;
    5a9e:	00 00       	bra	@r0		
    5aa0:	24 00 2d 00 	mova	&0x0002d,r4	
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5aa4:	4e 4e       	mov.b	r14,	r14	
    5aa6:	00 00       	bra	@r0		
    5aa8:	00 00       	bra	@r0		
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5aaa:	00 00       	bra	@r0		
    5aac:	44 00       	rrcm.a	#1,	r4	
    
    delayms(1500);

    SetupDone = 1;
}

    5aae:	2d 00 00 00 	mova	&0x00000,r13	
    5ab2:	00 00       	bra	@r0		
    5ab4:	00 00       	bra	@r0		
void analog_graph_clear_all(void){
    5ab6:	00 00       	bra	@r0		
    5ab8:	44 00       	rrcm.a	#1,	r4	
    int i;
    5aba:	2e 00 00 00 	mova	&0x00000,r14	
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5abe:	00 00       	bra	@r0		
    5ac0:	00 00       	bra	@r0		
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5ac2:	00 00       	bra	@r0		
    5ac4:	44 00       	rrcm.a	#1,	r4	
void analog_graph_clear_all(void){
    int i;
    for(i = 0; i < 8; i++){
        analog_graph_clear(i);
    }
}
    5ac6:	2f 00 04 00 	mova	&0x00004,r15	

    5aca:	00 00       	bra	@r0		
    5acc:	00 00       	bra	@r0		
    5ace:	00 00       	bra	@r0		
    5ad0:	44 00       	rrcm.a	#1,	r4	
    5ad2:	30 00 08 00 	bra	0x0008		;PC rel. 0x05adc
    5ad6:	00 00       	bra	@r0		
    5ad8:	00 00       	bra	@r0		
    5ada:	00 00       	bra	@r0		
    5adc:	44 00       	rrcm.a	#1,	r4	
    5ade:	31 00 0c 00 	mova	0x000c,	r1	;PC rel. 0x05aec
    5ae2:	00 00       	bra	@r0		
    5ae4:	00 00       	bra	@r0		
    5ae6:	00 00       	bra	@r0		
    5ae8:	44 00       	rrcm.a	#1,	r4	
    5aea:	33 00       	.word	0x0033;	????	Illegal as address instr
    5aec:	10 00       	bra	#0x00000	
    5aee:	00 00       	bra	@r0		
    5af0:	00 00       	bra	@r0		
    5af2:	00 00       	bra	@r0		
    5af4:	44 00       	rrcm.a	#1,	r4	
    5af6:	34 00 14 00 	mova	0x0014,	r4	;PC rel. 0x05b0c
    5afa:	00 00       	bra	@r0		
    5afc:	00 00       	bra	@r0		
    5afe:	00 00       	bra	@r0		
    5b00:	44 00       	rrcm.a	#1,	r4	
    5b02:	35 00 18 00 	mova	0x0018,	r5	;PC rel. 0x05b1c
    5b06:	00 00       	bra	@r0		
    5b08:	00 00       	bra	@r0		
    5b0a:	00 00       	bra	@r0		
    5b0c:	44 00       	rrcm.a	#1,	r4	
    5b0e:	36 00 1c 00 	mova	0x001c,	r6	;PC rel. 0x05b2c
    5b12:	00 00       	bra	@r0		
    5b14:	00 00       	bra	@r0		
    5b16:	00 00       	bra	@r0		
    5b18:	44 00       	rrcm.a	#1,	r4	
    5b1a:	37 00 20 00 	mova	0x0020,	r7	;PC rel. 0x05b3c
    5b1e:	00 00       	bra	@r0		
    5b20:	00 00       	bra	@r0		
    5b22:	00 00       	bra	@r0		
    5b24:	24 00 00 00 	mova	&0x00000,r4	
    5b28:	22 00 00 00 	mova	&0x00000,r2	
    5b2c:	83 42       	mov	r2,	#1	;r3 As==01
    5b2e:	00 00       	bra	@r0		
    5b30:	24 00 3a 00 	mova	&0x0003a,r4	
    5b34:	70 4e       	br	@r14+		
    5b36:	00 00       	bra	@r0		
    5b38:	00 00       	bra	@r0		
    5b3a:	00 00       	bra	@r0		
    5b3c:	44 00       	rrcm.a	#1,	r4	
    5b3e:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x05b40
    5b42:	00 00       	bra	@r0		
    5b44:	00 00       	bra	@r0		
    5b46:	00 00       	bra	@r0		
    5b48:	44 00       	rrcm.a	#1,	r4	
    5b4a:	3b 00 00 00 	mova	0x0000,	r11	;PC rel. 0x05b4c
    5b4e:	00 00       	bra	@r0		
    5b50:	00 00       	bra	@r0		
    5b52:	00 00       	bra	@r0		
    5b54:	44 00       	rrcm.a	#1,	r4	
    5b56:	3c 00 04 00 	mova	0x0004,	r12	;PC rel. 0x05b5c
    5b5a:	00 00       	bra	@r0		
    5b5c:	00 00       	bra	@r0		
    5b5e:	00 00       	bra	@r0		
    5b60:	44 00       	rrcm.a	#1,	r4	
    5b62:	3d 00 08 00 	mova	0x0008,	r13	;PC rel. 0x05b6c
    5b66:	00 00       	bra	@r0		
    5b68:	00 00       	bra	@r0		
    5b6a:	00 00       	bra	@r0		
    5b6c:	44 00       	rrcm.a	#1,	r4	
    5b6e:	3e 00 0c 00 	mova	0x000c,	r14	;PC rel. 0x05b7c
    5b72:	00 00       	bra	@r0		
    5b74:	00 00       	bra	@r0		
    5b76:	00 00       	bra	@r0		
    5b78:	44 00       	rrcm.a	#1,	r4	
    5b7a:	3f 00 10 00 	mova	0x0010,	r15	;PC rel. 0x05b8c
    5b7e:	00 00       	bra	@r0		
    5b80:	00 00       	bra	@r0		
    5b82:	00 00       	bra	@r0		
    5b84:	44 00       	rrcm.a	#1,	r4	
    5b86:	40 00       	rrcm.a	#1,	r0	
    5b88:	14 00       	mova	#0x00000,r4	
    5b8a:	00 00       	bra	@r0		
    5b8c:	00 00       	bra	@r0		
    5b8e:	00 00       	bra	@r0		
    5b90:	44 00       	rrcm.a	#1,	r4	
    5b92:	41 00       	rrcm.a	#1,	r1	
    5b94:	18 00       	mova	#0x00000,r8	
    5b96:	00 00       	bra	@r0		
    5b98:	00 00       	bra	@r0		
    5b9a:	00 00       	bra	@r0		
    5b9c:	24 00 00 00 	mova	&0x00000,r4	
    5ba0:	1a 00       	mova	#0x00000,r10	
    5ba2:	00 00       	bra	@r0		
    5ba4:	94 42 00 00 	mov	&0x0000,36(r4)	;0x0024(r4)
    5ba8:	24 00 
    5baa:	44 00       	rrcm.a	#1,	r4	
    5bac:	8a 4e 00 00 	mov	r14,	0(r10)	;0x0000(r10)

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5bb0:	00 00       	bra	@r0		
    5bb2:	00 00       	bra	@r0		
    5bb4:	44 00       	rrcm.a	#1,	r4	
    5bb6:	44 00       	rrcm.a	#1,	r4	
	...
    5bc0:	44 00       	rrcm.a	#1,	r4	
    5bc2:	47 00       	rrcm.a	#1,	r7	
    5bc4:	02 00       	mova	@r0,	r2	
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5bc6:	00 00       	bra	@r0		
    5bc8:	00 00       	bra	@r0		
    5bca:	00 00       	bra	@r0		
    5bcc:	44 00       	rrcm.a	#1,	r4	
    5bce:	48 00       	rrcm.a	#1,	r8	
    5bd0:	06 00       	mova	@r0,	r6	
    5bd2:	00 00       	bra	@r0		
    5bd4:	00 00       	bra	@r0		
    5bd6:	00 00       	bra	@r0		
    5bd8:	44 00       	rrcm.a	#1,	r4	
    5bda:	49 00       	rrcm.a	#1,	r9	
    5bdc:	0a 00       	mova	@r0,	r10	
    5bde:	00 00       	bra	@r0		
    5be0:	00 00       	bra	@r0		
    5be2:	00 00       	bra	@r0		
    5be4:	44 00       	rrcm.a	#1,	r4	
    5be6:	4a 00       	rrcm.a	#1,	r10	
    5be8:	0e 00       	mova	@r0,	r14	
    5bea:	00 00       	bra	@r0		
    5bec:	00 00       	bra	@r0		
    5bee:	00 00       	bra	@r0		
    5bf0:	44 00       	rrcm.a	#1,	r4	
    5bf2:	4b 00       	rrcm.a	#1,	r11	
    5bf4:	12 00       	mova	#0x00000,r2	
    5bf6:	00 00       	bra	@r0		
    5bf8:	00 00       	bra	@r0		
    5bfa:	00 00       	bra	@r0		
    5bfc:	44 00       	rrcm.a	#1,	r4	
    5bfe:	4c 00       	rrcm.a	#1,	r12	
    5c00:	1e 00       	mova	#0x00000,r14	
    5c02:	00 00       	bra	@r0		
    5c04:	00 00       	bra	@r0		
    5c06:	00 00       	bra	@r0		
    5c08:	44 00       	rrcm.a	#1,	r4	
    5c0a:	4d 00       	rrcm.a	#1,	r13	
    5c0c:	22 00 00 00 	mova	&0x00000,r2	

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5c10:	00 00       	bra	@r0		
    5c12:	00 00       	bra	@r0		
    5c14:	44 00       	rrcm.a	#1,	r4	
    5c16:	4e 00       	rrcm.a	#1,	r14	
    5c18:	26 00 00 00 	mova	&0x00000,r6	
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5c1c:	00 00       	bra	@r0		
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5c1e:	00 00       	bra	@r0		
    5c20:	44 00       	rrcm.a	#1,	r4	
    5c22:	4f 00       	rrcm.a	#1,	r15	
    5c24:	2a 00 00 00 	mova	&0x00000,r10	
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5c28:	00 00       	bra	@r0		
    5c2a:	00 00       	bra	@r0		
    5c2c:	44 00       	rrcm.a	#1,	r4	
    5c2e:	51 00       	rrcm	#1,	r1	
    5c30:	30 00 00 00 	bra	0x0000		;PC rel. 0x05c32
    5c34:	00 00       	bra	@r0		
    5c36:	00 00       	bra	@r0		
    5c38:	44 00       	rrcm.a	#1,	r4	
    5c3a:	52 00       	rrcm	#1,	r2	
    5c3c:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x05c3e
    5c40:	1c 2a       	jnc	$-966    	;abs 0x587a
    5c42:	00 00       	bra	@r0		
    5c44:	40 00       	rrcm.a	#1,	r0	
    5c46:	45 00       	rrcm.a	#1,	r5	
    5c48:	0b 00       	mova	@r0,	r11	
    5c4a:	00 00       	bra	@r0		
    5c4c:	00 00       	bra	@r0		
    5c4e:	00 00       	bra	@r0		
    5c50:	c0 00       	bra	r0		
    5c52:	00 00       	bra	@r0		
    5c54:	02 00       	mova	@r0,	r2	
    5c56:	00 00       	bra	@r0		
    5c58:	00 00       	bra	@r0		
    5c5a:	00 00       	bra	@r0		
    5c5c:	e0 00       	adda	r0,	r0	
    5c5e:	00 00       	bra	@r0		
    5c60:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x05c62
    5c64:	00 00       	bra	@r0		
    5c66:	00 00       	bra	@r0		
    5c68:	24 00 00 00 	mova	&0x00000,r4	
    5c6c:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x05c6e
    5c70:	a9 42 00 00 	mov	#4,	0(r9)	;r2 As==10, 0x0000(r9)

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5c74:	24 00 55 00 	mova	&0x00055,r4	
    5c78:	c0 4e 00 00 	mov.b	r14,	0x0000	;PC rel. 0x05c7c
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5c7c:	be 42 00 00 	mov	#8,	0(r14)	;r2 As==11, 0x0000(r14)
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5c80:	40 00       	rrcm.a	#1,	r0	
    5c82:	54 00       	rrcm	#1,	r4	
    5c84:	0f 00       	mova	@r0,	r15	
    5c86:	00 00       	bra	@r0		
    5c88:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5c8a:	00 00       	bra	@r0		
    5c8c:	44 00       	rrcm.a	#1,	r4	
    5c8e:	55 00       	rrcm	#1,	r5	
	...
    5c98:	44 00       	rrcm.a	#1,	r4	
    5c9a:	56 00       	rrcm	#1,	r6	
	...
    5ca4:	44 00       	rrcm.a	#1,	r4	
    5ca6:	57 00       	rrcm	#1,	r7	
    5ca8:	06 00       	mova	@r0,	r6	
    5caa:	00 00       	bra	@r0		
    5cac:	00 00       	bra	@r0		
    5cae:	00 00       	bra	@r0		
    5cb0:	44 00       	rrcm.a	#1,	r4	
    5cb2:	58 00       	rrcm	#1,	r8	
    5cb4:	14 00       	mova	#0x00000,r4	
    5cb6:	00 00       	bra	@r0		
    5cb8:	00 00       	bra	@r0		
    5cba:	00 00       	bra	@r0		
    5cbc:	44 00       	rrcm.a	#1,	r4	
    5cbe:	59 00       	rrcm	#1,	r9	
    5cc0:	18 00       	mova	#0x00000,r8	
    5cc2:	00 00       	bra	@r0		
    5cc4:	00 00       	bra	@r0		
    5cc6:	00 00       	bra	@r0		
    5cc8:	44 00       	rrcm.a	#1,	r4	
    5cca:	5a 00       	rrcm	#1,	r10	
    5ccc:	1c 00       	mova	#0x00000,r12	
    5cce:	00 00       	bra	@r0		
    5cd0:	00 00       	bra	@r0		
    5cd2:	00 00       	bra	@r0		
    5cd4:	44 00       	rrcm.a	#1,	r4	
    5cd6:	5b 00       	rrcm	#1,	r11	
    5cd8:	20 00 00 00 	bra	&0x00000	
    5cdc:	00 00       	bra	@r0		
    5cde:	00 00       	bra	@r0		
    5ce0:	44 00       	rrcm.a	#1,	r4	
    5ce2:	5c 00       	rrcm	#1,	r12	
    5ce4:	24 00 00 00 	mova	&0x00000,r4	
    5ce8:	00 00       	bra	@r0		
    5cea:	00 00       	bra	@r0		
    5cec:	44 00       	rrcm.a	#1,	r4	
    5cee:	5d 00       	rrcm	#1,	r13	
    5cf0:	28 00 00 00 	mova	&0x00000,r8	
    5cf4:	00 00       	bra	@r0		
    5cf6:	00 00       	bra	@r0		
    5cf8:	24 00 00 00 	mova	&0x00000,r4	
    5cfc:	2a 00 00 00 	mova	&0x00000,r10	
    5d00:	d3 42 00 00 	mov.b	&0x0000,#1	;r3 As==01
    5d04:	24 00 60 00 	mova	&0x00060,r4	
    5d08:	ea 4e 00 00 	mov.b	@r14,	0(r10)	;0x0000(r10)
    5d0c:	e6 42 00 00 	mov.b	#4,	0(r6)	;r2 As==10, 0x0000(r6)
    5d10:	40 00       	rrcm.a	#1,	r0	
    5d12:	5f 00       	rrcm	#1,	r15	
    5d14:	09 00       	mova	@r0,	r9	
    5d16:	00 00       	bra	@r0		
    5d18:	00 00       	bra	@r0		
    5d1a:	00 00       	bra	@r0		
    5d1c:	44 00       	rrcm.a	#1,	r4	
    5d1e:	60 00 00 00 	mova	r0,	&0x00000
    5d22:	00 00       	bra	@r0		
    5d24:	00 00       	bra	@r0		
    5d26:	00 00       	bra	@r0		
    5d28:	44 00       	rrcm.a	#1,	r4	
    5d2a:	61 00 08 00 	mova	r0,	&0x10008
    5d2e:	00 00       	bra	@r0		
    5d30:	00 00       	bra	@r0		
    5d32:	00 00       	bra	@r0		
    5d34:	44 00       	rrcm.a	#1,	r4	
    5d36:	64 00 0c 00 	mova	r0,	&0x4000c
    5d3a:	00 00       	bra	@r0		
    5d3c:	00 00       	bra	@r0		
    5d3e:	00 00       	bra	@r0		
    5d40:	44 00       	rrcm.a	#1,	r4	
    5d42:	65 00 12 00 	mova	r0,	&0x50012
    5d46:	00 00       	bra	@r0		
    5d48:	00 00       	bra	@r0		
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5d4a:	00 00       	bra	@r0		
    5d4c:	44 00       	rrcm.a	#1,	r4	
    5d4e:	67 00 14 00 	mova	r0,	&0x70014
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5d52:	00 00       	bra	@r0		
    5d54:	00 00       	bra	@r0		

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5d56:	00 00       	bra	@r0		
    5d58:	44 00       	rrcm.a	#1,	r4	
    5d5a:	68 00 24 00 	mova	r0,	&0x80024
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5d5e:	00 00       	bra	@r0		
    5d60:	00 00       	bra	@r0		
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5d62:	00 00       	bra	@r0		
    5d64:	44 00       	rrcm.a	#1,	r4	
    5d66:	69 00 28 00 	mova	r0,	&0x90028
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5d6a:	00 00       	bra	@r0		
    5d6c:	00 00       	bra	@r0		
    5d6e:	00 00       	bra	@r0		
    5d70:	44 00       	rrcm.a	#1,	r4	
    5d72:	6a 00 2c 00 	mova	r0,	&0xa002c
    5d76:	00 00       	bra	@r0		
    5d78:	00 00       	bra	@r0		
    5d7a:	00 00       	bra	@r0		
    5d7c:	44 00       	rrcm.a	#1,	r4	
    5d7e:	6b 00 30 00 	mova	r0,	&0xb0030
    5d82:	00 00       	bra	@r0		
    5d84:	00 00       	bra	@r0		
    5d86:	00 00       	bra	@r0		
    5d88:	44 00       	rrcm.a	#1,	r4	
    5d8a:	6c 00 34 00 	mova	r0,	&0xc0034
    5d8e:	00 00       	bra	@r0		
    5d90:	00 00       	bra	@r0		
    5d92:	00 00       	bra	@r0		
    5d94:	44 00       	rrcm.a	#1,	r4	
    5d96:	6d 00 38 00 	mova	r0,	&0xd0038
    5d9a:	00 00       	bra	@r0		
    5d9c:	00 00       	bra	@r0		
    5d9e:	00 00       	bra	@r0		
    5da0:	44 00       	rrcm.a	#1,	r4	
    5da2:	65 00 3c 00 	mova	r0,	&0x5003c
    5da6:	00 00       	bra	@r0		
    5da8:	00 00       	bra	@r0		
    5daa:	00 00       	bra	@r0		
    5dac:	44 00       	rrcm.a	#1,	r4	
    5dae:	6f 00 42 00 	mova	r0,	&0xf0042
    5db2:	00 00       	bra	@r0		
    5db4:	0f 2a       	jnc	$-992    	;abs 0x59d4
    5db6:	00 00       	bra	@r0		
    5db8:	40 00       	rrcm.a	#1,	r0	
    5dba:	61 00 0a 00 	mova	r0,	&0x1000a
    5dbe:	00 00       	bra	@r0		
    5dc0:	1c 2a       	jnc	$-966    	;abs 0x59fa
    5dc2:	00 00       	bra	@r0		
    5dc4:	40 00       	rrcm.a	#1,	r0	
    5dc6:	62 00 0b 00 	mova	r0,	&0x2000b
    5dca:	00 00       	bra	@r0		
    5dcc:	00 00       	bra	@r0		
    5dce:	00 00       	bra	@r0		
    5dd0:	c0 00       	bra	r0		
    5dd2:	00 00       	bra	@r0		
    5dd4:	08 00       	mova	@r0,	r8	
    5dd6:	00 00       	bra	@r0		
        case PROCESS_OPTION:
            process_option();
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    5dd8:	00 00       	bra	@r0		
    5dda:	00 00       	bra	@r0		
    5ddc:	e0 00       	adda	r0,	r0	
    5dde:	00 00       	bra	@r0		
    5de0:	42 00       	rrcm.a	#1,	r2	
    5de2:	00 00       	bra	@r0		
    }
}
    5de4:	00 00       	bra	@r0		
    5de6:	00 00       	bra	@r0		
    5de8:	24 00 00 00 	mova	&0x00000,r4	

    5dec:	4a 00       	rrcm.a	#1,	r10	
    5dee:	00 00       	bra	@r0		
void process_option(){
    5df0:	f0 42 00 00 	mov.b	#8,	0x0000	;r2 As==11, PC rel. 0x05df4

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5df4:	24 00 72 00 	mova	&0x00072,r4	
    5df8:	34 4f       	mov	@r15+,	r4	
    5dfa:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5dfc:	00 00       	bra	@r0		
    5dfe:	00 00       	bra	@r0		

void process_option(){
    int i;
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
    5e00:	44 00       	rrcm.a	#1,	r4	
    5e02:	72 00 00 00 	mova	r0,	&0x0000	
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
    5e06:	00 00       	bra	@r0		
    5e08:	00 00       	bra	@r0		
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5e0a:	00 00       	bra	@r0		
    5e0c:	44 00       	rrcm.a	#1,	r4	
    5e0e:	74 00 04 00 	mova	r0,	4(r4)	;0x0004(r4)
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5e12:	00 00       	bra	@r0		
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5e14:	00 00       	bra	@r0		
    5e16:	00 00       	bra	@r0		
    5e18:	44 00       	rrcm.a	#1,	r4	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5e1a:	76 00 06 00 	mova	r0,	6(r6)	;0x0006(r6)
            for(i = 5; i >= 0; i--){ // contagem regressiva
                lcd_goto(8,8);
                printf("%d", i);
                delayms(1000);
            }
            MotorArmed = TRUE;
    5e1e:	00 00       	bra	@r0		
    5e20:	00 00       	bra	@r0		
    5e22:	00 00       	bra	@r0		
    5e24:	44 00       	rrcm.a	#1,	r4	
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
            break;
            
        case INITIAL_SETTINGS:
    5e26:	77 00 0a 00 	mova	r0,	10(r7)	;0x000a(r7)
    5e2a:	00 00       	bra	@r0		
    5e2c:	00 00       	bra	@r0		
    5e2e:	00 00       	bra	@r0		
            
            // seta o flag initial setup
            break;          
    }
    
    if(ChannelInput[CH7_CH] > 3500){
    5e30:	44 00       	rrcm.a	#1,	r4	
    5e32:	79 00 0c 00 	mova	r0,	12(r9)	;0x000c(r9)
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        analog_graph_clear_all();
        lcd_clear(BLACK);
    5e36:	00 00       	bra	@r0		
    5e38:	00 00       	bra	@r0		
    5e3a:	00 00       	bra	@r0		
    }
}

    5e3c:	44 00       	rrcm.a	#1,	r4	
    5e3e:	7a 00 0e 00 	mova	r0,	14(r10)	;0x000e(r10)
    int i, k;
    for(i = 0; i < 8; i++){
        if((1 << i) & AnalogChecked){
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
    5e42:	00 00       	bra	@r0		
    5e44:	00 00       	bra	@r0		
    5e46:	00 00       	bra	@r0		
    5e48:	44 00       	rrcm.a	#1,	r4	
    5e4a:	7b 00 12 00 	mova	r0,	18(r11)	;0x0012(r11)
    5e4e:	00 00       	bra	@r0		
    5e50:	00 00       	bra	@r0		
    5e52:	00 00       	bra	@r0		
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
        }
    }
    
}

    5e54:	44 00       	rrcm.a	#1,	r4	
    5e56:	7c 00 16 00 	mova	r0,	22(r12)	;0x0016(r12)
void analog_graph_clear(int n){
    int i;
    for(i = 0; i < GRAPH_LENGHT; i++){
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
    5e5a:	00 00       	bra	@r0		
    5e5c:	00 00       	bra	@r0		
    5e5e:	00 00       	bra	@r0		
        AnalogGraph[n][i] = 0;
    }
    5e60:	44 00       	rrcm.a	#1,	r4	
                if(ChannelInput[ROLL_CH] < 2500){
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
            
            // check uncheck
    5e62:	7d 00 1e 00 	mova	r0,	30(r13)	;0x001e(r13)
    5e66:	00 00       	bra	@r0		
    5e68:	00 00       	bra	@r0		
    5e6a:	00 00       	bra	@r0		
    5e6c:	44 00       	rrcm.a	#1,	r4	
    5e6e:	7e 00 22 00 	mova	r0,	34(r14)	;0x0022(r14)
    5e72:	00 00       	bra	@r0		
    5e74:	00 00       	bra	@r0		
    5e76:	00 00       	bra	@r0		
    5e78:	44 00       	rrcm.a	#1,	r4	
    5e7a:	7f 00 26 00 	mova	r0,	38(r15)	;0x0026(r15)
    5e7e:	00 00       	bra	@r0		
    5e80:	00 00       	bra	@r0		
        if((1 << i) & AnalogChecked){
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
            }
    5e82:	00 00       	bra	@r0		
    5e84:	44 00       	rrcm.a	#1,	r4	
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
    5e86:	77 00 2a 00 	mova	r0,	42(r7)	;0x002a(r7)
    5e8a:	00 00       	bra	@r0		
    5e8c:	00 00       	bra	@r0		
}

void draw_analog_graph(void){
    int i, k;
    for(i = 0; i < 8; i++){
        if((1 << i) & AnalogChecked){
    5e8e:	00 00       	bra	@r0		
    5e90:	44 00       	rrcm.a	#1,	r4	
    5e92:	82 00 30 00 	mova	#0x00030,r2	
    5e96:	00 00       	bra	@r0		
    5e98:	00 00       	bra	@r0		
    5e9a:	00 00       	bra	@r0		
    5e9c:	44 00       	rrcm.a	#1,	r4	
    5e9e:	83 00       	.word	0x0083;	????	Illegal as address instr
    5ea0:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x05ea2
    5ea4:	1c 2a       	jnc	$-966    	;abs 0x5ade
    5ea6:	00 00       	bra	@r0		
    5ea8:	40 00       	rrcm.a	#1,	r0	
    5eaa:	73 00       	.word	0x0073;	????	Illegal as address instr
    5eac:	0b 00       	mova	@r0,	r11	
    5eae:	00 00       	bra	@r0		
    5eb0:	02 43       	clr	r2		
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
    5eb2:	00 00       	bra	@r0		
    5eb4:	40 00       	rrcm.a	#1,	r0	
    5eb6:	74 00 0a 00 	mova	r0,	10(r4)	;0x000a(r4)
    5eba:	00 00       	bra	@r0		
    5ebc:	00 00       	bra	@r0		
    5ebe:	00 00       	bra	@r0		
    5ec0:	c0 00       	bra	r0		
    5ec2:	00 00       	bra	@r0		
    5ec4:	04 00       	mova	@r0,	r4	
    5ec6:	00 00       	bra	@r0		
    5ec8:	00 00       	bra	@r0		
    5eca:	00 00       	bra	@r0		
    5ecc:	e0 00       	adda	r0,	r0	
    5ece:	00 00       	bra	@r0		
    5ed0:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x05ed2
        AnalogGraph[n][i] = 0;
    }
}

void process_analog_menu(void){
    draw_analog_graph();
    5ed4:	00 00       	bra	@r0		
    5ed6:	00 00       	bra	@r0		
    switch(MenuAnalog){
        case DISPLAY:
    5ed8:	24 00 00 00 	mova	&0x00000,r4	
            lcd_goto(4,0);
    5edc:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x05ede
    5ee0:	0e 43       	clr	r14		
            printf("ANALOG GRAPH   ");
            
            lcd_goto(0,14);
            printf("DISPLAY             ");
    5ee2:	00 00       	bra	@r0		
    5ee4:	24 00 8b 00 	mova	&0x0008b,r4	

            refresh_analog_menu();
            MenuAnalog = SELECT;
            break;
    5ee8:	6c 4f       	mov.b	@r15,	r12	
    5eea:	00 00       	bra	@r0		
    5eec:	00 00       	bra	@r0		
    5eee:	00 00       	bra	@r0		
    5ef0:	44 00       	rrcm.a	#1,	r4	
    5ef2:	8b 00 00 00 	mova	#0x00000,r11	
    5ef6:	00 00       	bra	@r0		
    5ef8:	00 00       	bra	@r0		
    5efa:	00 00       	bra	@r0		
            printf("SELECT            ");

            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
            }
    5efc:	44 00       	rrcm.a	#1,	r4	
    5efe:	8e 00 02 00 	mova	#0x00002,r14	
            else{
                if(ChannelInput[ROLL_CH] < 2500){
    5f02:	00 00       	bra	@r0		
    5f04:	00 00       	bra	@r0		
    5f06:	00 00       	bra	@r0		
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
    5f08:	44 00       	rrcm.a	#1,	r4	
    5f0a:	8f 00 06 00 	mova	#0x00006,r15	
            }
    5f0e:	00 00       	bra	@r0		
    5f10:	00 00       	bra	@r0		

            refresh_analog_menu();
            MenuAnalog = SELECT;
            break;
        case SELECT:
            lcd_goto(0,14);
    5f12:	00 00       	bra	@r0		
    5f14:	44 00       	rrcm.a	#1,	r4	
            printf("SELECT            ");
    5f16:	90 00 0e 00 	cmpa	#0x0000e,r0	
    5f1a:	00 00       	bra	@r0		
    5f1c:	00 00       	bra	@r0		
    5f1e:	00 00       	bra	@r0		
    5f20:	44 00       	rrcm.a	#1,	r4	
    5f22:	91 00 14 00 	cmpa	#0x00014,r1	
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
                }
            }
    5f26:	00 00       	bra	@r0		
    5f28:	00 00       	bra	@r0		
    5f2a:	00 00       	bra	@r0		
    5f2c:	44 00       	rrcm.a	#1,	r4	
    5f2e:	93 00       	.word	0x0093;	????	Illegal as address instr
    5f30:	18 00       	mova	#0x00000,r8	
    5f32:	00 00       	bra	@r0		
    5f34:	00 00       	bra	@r0		
    5f36:	00 00       	bra	@r0		
    5f38:	44 00       	rrcm.a	#1,	r4	
    5f3a:	94 00 1a 00 	cmpa	#0x0001a,r4	
            
    5f3e:	00 00       	bra	@r0		
    5f40:	26 43       	mov	#2,	r6	;r3 As==10
    5f42:	00 00       	bra	@r0		
    5f44:	40 00       	rrcm.a	#1,	r0	
    5f46:	8c 00 0b 00 	mova	#0x0000b,r12	
    5f4a:	00 00       	bra	@r0		
    5f4c:	00 00       	bra	@r0		
    5f4e:	00 00       	bra	@r0		
    5f50:	c0 00       	bra	r0		
    5f52:	00 00       	bra	@r0		
    5f54:	02 00       	mova	@r0,	r2	
    5f56:	00 00       	bra	@r0		
    5f58:	00 00       	bra	@r0		
    5f5a:	00 00       	bra	@r0		
    5f5c:	e0 00       	adda	r0,	r0	
            break;
    5f5e:	00 00       	bra	@r0		
    5f60:	1a 00       	mova	#0x00000,r10	
    5f62:	00 00       	bra	@r0		
    5f64:	00 00       	bra	@r0		
    5f66:	00 00       	bra	@r0		
    5f68:	24 00 00 00 	mova	&0x00000,r4	
    5f6c:	1e 00       	mova	#0x00000,r14	
    5f6e:	00 00       	bra	@r0		
    5f70:	35 43       	mov	#-1,	r5	;r3 As==11
    5f72:	00 00       	bra	@r0		
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    5f74:	24 00 97 00 	mova	&0x00097,r4	
    5f78:	8a 4f 00 00 	mov	r15,	0(r10)	;0x0000(r10)
    5f7c:	e6 42 00 00 	mov.b	#4,	0(r6)	;r2 As==10, 0x0000(r6)
    5f80:	40 00       	rrcm.a	#1,	r0	
    5f82:	96 00 0b 00 	cmpa	#0x0000b,r6	
    5f86:	00 00       	bra	@r0		
                analog_graph_clear(AnalogSelect);
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
    5f88:	00 00       	bra	@r0		
    5f8a:	00 00       	bra	@r0		
        case WAIT_ROLL_LEFT:
                lcd_goto(0,14);
                printf("WAIT ROLL LEFT   ");
        
                if(ChannelInput[PITCH_CH] > 2500){
                   if(AnalogSelect < 7){
    5f8c:	44 00       	rrcm.a	#1,	r4	
    5f8e:	97 00 00 00 	cmpa	#0x00000,r7	
    5f92:	00 00       	bra	@r0		
    5f94:	00 00       	bra	@r0		
                        AnalogSelect++;
    5f96:	00 00       	bra	@r0		
    5f98:	44 00       	rrcm.a	#1,	r4	
    5f9a:	9a 00 04 00 	cmpa	#0x00004,r10	
    5f9e:	00 00       	bra	@r0		
    5fa0:	00 00       	bra	@r0		
    5fa2:	00 00       	bra	@r0		
    5fa4:	44 00       	rrcm.a	#1,	r4	
    5fa6:	9b 00 08 00 	cmpa	#0x00008,r11	
    5faa:	00 00       	bra	@r0		
                    }
    5fac:	00 00       	bra	@r0		
    5fae:	00 00       	bra	@r0		
    5fb0:	44 00       	rrcm.a	#1,	r4	
    5fb2:	9c 00 0e 00 	cmpa	#0x0000e,r12	

                }
            break;
            
        case PROCESS_OPTION:
            break;
    5fb6:	00 00       	bra	@r0		
    5fb8:	00 00       	bra	@r0		
        case WAIT_CH7_BACK:
    5fba:	00 00       	bra	@r0		
    5fbc:	44 00       	rrcm.a	#1,	r4	
            break;
    }
}
    5fbe:	9d 00 14 00 	cmpa	#0x00014,r13	
    5fc2:	00 00       	bra	@r0		
    5fc4:	00 00       	bra	@r0		
void refresh_analog_menu(void){
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
    5fc6:	00 00       	bra	@r0		
    5fc8:	44 00       	rrcm.a	#1,	r4	
    5fca:	9f 00 18 00 	cmpa	#0x00018,r15	
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
    5fce:	00 00       	bra	@r0		
    5fd0:	00 00       	bra	@r0		
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    5fd2:	00 00       	bra	@r0		
    5fd4:	44 00       	rrcm.a	#1,	r4	
    5fd6:	a0 00 1a 00 	adda	#0x0001a,r0	
    5fda:	00 00       	bra	@r0		
    5fdc:	26 43       	mov	#2,	r6	;r3 As==10
    5fde:	00 00       	bra	@r0		
    5fe0:	40 00       	rrcm.a	#1,	r0	
    5fe2:	98 00 0b 00 	cmpa	#0x0000b,r8	
    5fe6:	00 00       	bra	@r0		
    5fe8:	00 00       	bra	@r0		
    5fea:	00 00       	bra	@r0		
    5fec:	c0 00       	bra	r0		
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
    5fee:	00 00       	bra	@r0		
    5ff0:	04 00       	mova	@r0,	r4	
    5ff2:	00 00       	bra	@r0		
        else{                           // se nao                        
            if(color_back == LIME){
    5ff4:	00 00       	bra	@r0		
    5ff6:	00 00       	bra	@r0		
    5ff8:	e0 00       	adda	r0,	r0	
    5ffa:	00 00       	bra	@r0		
    5ffc:	1a 00       	mova	#0x00000,r10	
                color_fore = BLACK;
            }
    5ffe:	00 00       	bra	@r0		
    6000:	00 00       	bra	@r0		
        }                               
    6002:	00 00       	bra	@r0		
    6004:	24 00 00 00 	mova	&0x00000,r4	
    6008:	1e 00       	mova	#0x00000,r14	
    600a:	00 00       	bra	@r0		
    600c:	4d 43       	clr.b	r13		
     * 
     * SELM_0 -- DCOCLK
     * DIVM_0 -- Divide by 1
     * ~SELS -- DCOCLK
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
    600e:	00 00       	bra	@r0		
    6010:	24 00 a3 00 	mova	&0x000a3,r4	
    6014:	a8 4f 00 00 	mov	@r15,	0(r8)	;0x0000(r8)
        
        printf("%d",i);
        // ajusta as cores para o normal
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    6018:	64 43       	mov.b	#2,	r4	;r3 As==10
    601a:	00 00       	bra	@r0		
    601c:	40 00       	rrcm.a	#1,	r0	
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    
    DCOCTL = 0x77;      
    601e:	a2 00 0a 00 	adda	#0x0000a,r2	
    6022:	00 00       	bra	@r0		
    6024:	79 2a       	jnc	$-780    	;abs 0x5d18
        /* 
    6026:	00 00       	bra	@r0		
    6028:	40 00       	rrcm.a	#1,	r0	
    602a:	a2 00 09 00 	adda	#0x00009,r2	
     * Basic Clock System Control 1
    602e:	00 00       	bra	@r0		
    6030:	00 00       	bra	@r0		
    6032:	00 00       	bra	@r0		
    6034:	44 00       	rrcm.a	#1,	r4	
    6036:	a3 00       	.word	0x00a3;	????	Illegal as address instr
	...
    6040:	44 00       	rrcm.a	#1,	r4	
    6042:	a6 00 0a 00 	adda	#0x0000a,r6	
    6046:	00 00       	bra	@r0		
    6048:	00 00       	bra	@r0		
    604a:	00 00       	bra	@r0		
    604c:	44 00       	rrcm.a	#1,	r4	
    604e:	a7 00 0e 00 	adda	#0x0000e,r7	
    6052:	00 00       	bra	@r0		
    6054:	00 00       	bra	@r0		
    6056:	00 00       	bra	@r0		
    6058:	44 00       	rrcm.a	#1,	r4	
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
}
    605a:	a8 00 16 00 	adda	#0x00016,r8	
    605e:	00 00       	bra	@r0		
    6060:	00 00       	bra	@r0		

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    6062:	00 00       	bra	@r0		
    6064:	44 00       	rrcm.a	#1,	r4	
    6066:	a9 00 1c 00 	adda	#0x0001c,r9	
    RCCounter++;
    MenuCounter++;
}

void clock_init(void)
    606a:	00 00       	bra	@r0		
    606c:	00 00       	bra	@r0		
{
    /* 
    606e:	00 00       	bra	@r0		
    6070:	44 00       	rrcm.a	#1,	r4	
    6072:	aa 00 22 00 	adda	#0x00022,r10	
     * Basic Clock System Control 2
     * 
     * SELM_0 -- DCOCLK
     * DIVM_0 -- Divide by 1
    6076:	00 00       	bra	@r0		
    6078:	00 00       	bra	@r0		
    
    DCOCTL = 0x77;      
        /* 
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
    607a:	00 00       	bra	@r0		
    607c:	44 00       	rrcm.a	#1,	r4	
    607e:	ab 00 28 00 	adda	#0x00028,r11	
    6082:	00 00       	bra	@r0		
    6084:	00 00       	bra	@r0		

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    6086:	00 00       	bra	@r0		
    6088:	44 00       	rrcm.a	#1,	r4	
    608a:	ac 00 2e 00 	adda	#0x0002e,r12	
    608e:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    6090:	00 00       	bra	@r0		
    6092:	00 00       	bra	@r0		
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    6094:	44 00       	rrcm.a	#1,	r4	
    6096:	ad 00 34 00 	adda	#0x00034,r13	
    609a:	00 00       	bra	@r0		
    609c:	00 00       	bra	@r0		
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    609e:	00 00       	bra	@r0		
    60a0:	44 00       	rrcm.a	#1,	r4	
    60a2:	af 00 38 00 	adda	#0x00038,r15	
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    60a6:	00 00       	bra	@r0		
    60a8:	00 00       	bra	@r0		
    60aa:	00 00       	bra	@r0		
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    60ac:	44 00       	rrcm.a	#1,	r4	
    60ae:	b0 00 3a 00 	suba	#0x0003a,r0	
            lcd_goto(0,14);
    60b2:	00 00       	bra	@r0		
    60b4:	26 43       	mov	#2,	r6	;r3 As==10
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    60b6:	00 00       	bra	@r0		
    60b8:	40 00       	rrcm.a	#1,	r0	
    60ba:	a4 00 0b 00 	adda	#0x0000b,r4	
    60be:	00 00       	bra	@r0		
    60c0:	00 00       	bra	@r0		
    60c2:	00 00       	bra	@r0		
    60c4:	c0 00       	bra	r0		
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    60c6:	00 00       	bra	@r0		
    60c8:	0a 00       	mova	@r0,	r10	
    60ca:	00 00       	bra	@r0		
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    60cc:	00 00       	bra	@r0		
    60ce:	00 00       	bra	@r0		
            lcd_goto(0,14);
    60d0:	e0 00       	adda	r0,	r0	
    60d2:	00 00       	bra	@r0		
    60d4:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x060d6
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    60d8:	00 00       	bra	@r0		
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    60da:	00 00       	bra	@r0		
    60dc:	24 00 00 00 	mova	&0x00000,r4	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    60e0:	42 00       	rrcm.a	#1,	r2	
    60e2:	00 00       	bra	@r0		
            
    60e4:	70 43       	br	#-1		;r3 As==11
    60e6:	00 00       	bra	@r0		
    60e8:	24 00 b3 00 	mova	&0x000b3,r4	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    60ec:	ea 4f 00 00 	mov.b	@r15,	0(r10)	;0x0000(r10)
    60f0:	64 43       	mov.b	#2,	r4	;r3 As==10
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    60f2:	00 00       	bra	@r0		
    60f4:	40 00       	rrcm.a	#1,	r0	
    60f6:	b2 00 0b 00 	suba	#0x0000b,r2	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    60fa:	00 00       	bra	@r0		
    60fc:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00, 0x0000(r12)
    6100:	40 00       	rrcm.a	#1,	r0	
    6102:	b2 00 07 00 	suba	#0x00007,r2	
    6106:	00 00       	bra	@r0		
    6108:	9f 43 00 00 	mov	#1,	0(r15)	;r3 As==01, 0x0000(r15)
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    610c:	40 00       	rrcm.a	#1,	r0	
    610e:	b2 00 08 00 	suba	#0x00008,r2	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    6112:	00 00       	bra	@r0		
    6114:	00 00       	bra	@r0		
    6116:	00 00       	bra	@r0		
    6118:	44 00       	rrcm.a	#1,	r4	
    611a:	b3 00       	.word	0x00b3;	????	Illegal as address instr
	...
    6124:	44 00       	rrcm.a	#1,	r4	
    6126:	b4 00 10 00 	suba	#0x00010,r4	
    612a:	00 00       	bra	@r0		
    612c:	00 00       	bra	@r0		
    612e:	00 00       	bra	@r0		
    6130:	44 00       	rrcm.a	#1,	r4	
    6132:	b6 00 12 00 	suba	#0x00012,r6	
    6136:	00 00       	bra	@r0		
    6138:	00 00       	bra	@r0		
    613a:	00 00       	bra	@r0		
    613c:	44 00       	rrcm.a	#1,	r4	
    613e:	b7 00 16 00 	suba	#0x00016,r7	
    6142:	00 00       	bra	@r0		
    6144:	00 00       	bra	@r0		
    6146:	00 00       	bra	@r0		
    6148:	44 00       	rrcm.a	#1,	r4	
    614a:	b8 00 1e 00 	suba	#0x0001e,r8	
    614e:	00 00       	bra	@r0		
    6150:	00 00       	bra	@r0		
    6152:	00 00       	bra	@r0		
    6154:	44 00       	rrcm.a	#1,	r4	
    6156:	b9 00 24 00 	suba	#0x00024,r9	
    615a:	00 00       	bra	@r0		
    615c:	00 00       	bra	@r0		
    615e:	00 00       	bra	@r0		
    6160:	44 00       	rrcm.a	#1,	r4	
    6162:	ba 00 2a 00 	suba	#0x0002a,r10	
    6166:	00 00       	bra	@r0		
    6168:	00 00       	bra	@r0		
    616a:	00 00       	bra	@r0		
    616c:	44 00       	rrcm.a	#1,	r4	
    616e:	bb 00 30 00 	suba	#0x00030,r11	
    6172:	00 00       	bra	@r0		
    6174:	00 00       	bra	@r0		
    6176:	00 00       	bra	@r0		
    6178:	44 00       	rrcm.a	#1,	r4	
    617a:	bd 00 36 00 	suba	#0x00036,r13	
    617e:	00 00       	bra	@r0		
    6180:	00 00       	bra	@r0		
    6182:	00 00       	bra	@r0		
    6184:	44 00       	rrcm.a	#1,	r4	
    6186:	be 00 42 00 	suba	#0x00042,r14	
    618a:	00 00       	bra	@r0		
    618c:	00 00       	bra	@r0		
    618e:	00 00       	bra	@r0		
    6190:	44 00       	rrcm.a	#1,	r4	
    6192:	c0 00       	bra	r0		
    6194:	4e 00       	rrcm.a	#1,	r14	
    6196:	00 00       	bra	@r0		
    6198:	00 00       	bra	@r0		
    619a:	00 00       	bra	@r0		
    619c:	44 00       	rrcm.a	#1,	r4	
    619e:	c3 00       	.word	0x00c3;	????	Illegal as address instr
    61a0:	52 00       	rrcm	#1,	r2	
    61a2:	00 00       	bra	@r0		
    61a4:	00 00       	bra	@r0		
    61a6:	00 00       	bra	@r0		
    61a8:	44 00       	rrcm.a	#1,	r4	
    61aa:	c4 00       	mova	r0,	r4	
    61ac:	54 00       	rrcm	#1,	r4	
    61ae:	00 00       	bra	@r0		
    61b0:	1c 2a       	jnc	$-966    	;abs 0x5dea
    61b2:	00 00       	bra	@r0		
    61b4:	40 00       	rrcm.a	#1,	r0	
    61b6:	b4 00 09 00 	suba	#0x00009,r4	
    61ba:	00 00       	bra	@r0		
    61bc:	26 43       	mov	#2,	r6	;r3 As==10
    61be:	00 00       	bra	@r0		
    61c0:	40 00       	rrcm.a	#1,	r0	
    61c2:	b4 00 0a 00 	suba	#0x0000a,r4	
    61c6:	00 00       	bra	@r0		
    61c8:	00 00       	bra	@r0		
    61ca:	00 00       	bra	@r0		
    61cc:	c0 00       	bra	r0		
    61ce:	00 00       	bra	@r0		
    61d0:	10 00       	bra	#0x00000	
    61d2:	00 00       	bra	@r0		
    61d4:	00 00       	bra	@r0		
    61d6:	00 00       	bra	@r0		
    61d8:	e0 00       	adda	r0,	r0	
    61da:	00 00       	bra	@r0		
    61dc:	54 00       	rrcm	#1,	r4	
    61de:	00 00       	bra	@r0		
    61e0:	00 00       	bra	@r0		
    61e2:	00 00       	bra	@r0		
    61e4:	24 00 00 00 	mova	&0x00000,r4	
    61e8:	60 00 00 00 	mova	r0,	&0x00000
    61ec:	ab 43 00 00 	mov	#2,	0(r11)	;r3 As==10, 0x0000(r11)
    61f0:	24 00 c7 00 	mova	&0x000c7,r4	
    61f4:	4a 50       	add.b	r0,	r10	
    61f6:	00 00       	bra	@r0		
    61f8:	c4 43 00 00 	mov.b	#0,	0(r4)	;r3 As==00, 0x0000(r4)
    61fc:	40 00       	rrcm.a	#1,	r0	
    61fe:	c6 00       	mova	r0,	r6	
    6200:	0a 00       	mova	@r0,	r10	
    6202:	00 00       	bra	@r0		
    6204:	79 2a       	jnc	$-780    	;abs 0x5ef8
    6206:	00 00       	bra	@r0		
    6208:	40 00       	rrcm.a	#1,	r0	
    620a:	c6 00       	mova	r0,	r6	
    620c:	09 00       	mova	@r0,	r9	
    620e:	00 00       	bra	@r0		
    6210:	00 00       	bra	@r0		
    6212:	00 00       	bra	@r0		
    6214:	44 00       	rrcm.a	#1,	r4	
    6216:	c7 00       	mova	r0,	r7	
	...
    6220:	44 00       	rrcm.a	#1,	r4	
    6222:	ca 00       	mova	r0,	r10	
    6224:	0a 00       	mova	@r0,	r10	
    6226:	00 00       	bra	@r0		
    6228:	00 00       	bra	@r0		
    622a:	00 00       	bra	@r0		
    622c:	44 00       	rrcm.a	#1,	r4	
    622e:	cb 00       	mova	r0,	r11	
    6230:	0e 00       	mova	@r0,	r14	
    6232:	00 00       	bra	@r0		
    6234:	00 00       	bra	@r0		
    6236:	00 00       	bra	@r0		
    6238:	44 00       	rrcm.a	#1,	r4	
    623a:	cc 00       	mova	r0,	r12	
    623c:	16 00       	mova	#0x00000,r6	
    623e:	00 00       	bra	@r0		
    6240:	00 00       	bra	@r0		
    6242:	00 00       	bra	@r0		
    6244:	44 00       	rrcm.a	#1,	r4	
    6246:	cd 00       	mova	r0,	r13	
    6248:	1c 00       	mova	#0x00000,r12	
    624a:	00 00       	bra	@r0		
    624c:	00 00       	bra	@r0		
    624e:	00 00       	bra	@r0		
    6250:	44 00       	rrcm.a	#1,	r4	
    6252:	ce 00       	mova	r0,	r14	
    6254:	26 00 00 00 	mova	&0x00000,r6	
    6258:	00 00       	bra	@r0		
    625a:	00 00       	bra	@r0		
    625c:	44 00       	rrcm.a	#1,	r4	
    625e:	cf 00       	mova	r0,	r15	
    6260:	2c 00 00 00 	mova	&0x00000,r12	
    6264:	00 00       	bra	@r0		
    6266:	00 00       	bra	@r0		
    6268:	44 00       	rrcm.a	#1,	r4	
    626a:	d0 00       	cmpa	r0,	r0	
    626c:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0626e
    6270:	00 00       	bra	@r0		
    6272:	00 00       	bra	@r0		
    6274:	44 00       	rrcm.a	#1,	r4	
    6276:	d1 00       	cmpa	r0,	r1	
    6278:	3a 00 00 00 	mova	0x0000,	r10	;PC rel. 0x0627a
    627c:	00 00       	bra	@r0		
    627e:	00 00       	bra	@r0		
    6280:	44 00       	rrcm.a	#1,	r4	
    6282:	d2 00       	cmpa	r0,	r2	
    6284:	40 00       	rrcm.a	#1,	r0	
    6286:	00 00       	bra	@r0		
    6288:	00 00       	bra	@r0		
    628a:	00 00       	bra	@r0		
    628c:	44 00       	rrcm.a	#1,	r4	
    628e:	d3 00       	.word	0x00d3;	????	Illegal as address instr
    6290:	46 00       	rrcm.a	#1,	r6	
    6292:	00 00       	bra	@r0		
    6294:	00 00       	bra	@r0		
    6296:	00 00       	bra	@r0		
    6298:	44 00       	rrcm.a	#1,	r4	
    629a:	d5 00       	cmpa	r0,	r5	
    629c:	4a 00       	rrcm.a	#1,	r10	
    629e:	00 00       	bra	@r0		
    62a0:	00 00       	bra	@r0		
    62a2:	00 00       	bra	@r0		
    62a4:	44 00       	rrcm.a	#1,	r4	
    62a6:	d6 00       	cmpa	r0,	r6	
    62a8:	4c 00       	rrcm.a	#1,	r12	
    62aa:	00 00       	bra	@r0		
    62ac:	26 43       	mov	#2,	r6	;r3 As==10
    62ae:	00 00       	bra	@r0		
    62b0:	40 00       	rrcm.a	#1,	r0	
    62b2:	c8 00       	mova	r0,	r8	
    62b4:	0b 00       	mova	@r0,	r11	
    62b6:	00 00       	bra	@r0		
    62b8:	00 00       	bra	@r0		
    62ba:	00 00       	bra	@r0		
    62bc:	c0 00       	bra	r0		
    62be:	00 00       	bra	@r0		
    62c0:	0a 00       	mova	@r0,	r10	
    62c2:	00 00       	bra	@r0		
    62c4:	00 00       	bra	@r0		
    62c6:	00 00       	bra	@r0		
    62c8:	e0 00       	adda	r0,	r0	
    62ca:	00 00       	bra	@r0		
    62cc:	4c 00       	rrcm.a	#1,	r12	
    62ce:	00 00       	bra	@r0		
    62d0:	00 00       	bra	@r0		
    62d2:	00 00       	bra	@r0		
    62d4:	24 00 00 00 	mova	&0x00000,r4	
    62d8:	54 00       	rrcm	#1,	r4	
    62da:	00 00       	bra	@r0		
    62dc:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    62e0:	24 00 d9 00 	mova	&0x000d9,r4	
    62e4:	9e 50 00 00 	add	0x0000,	17348(r14);PC rel. 0x062e8, 0x43c4(r14)
    62e8:	c4 43 
    62ea:	00 00       	bra	@r0		
    62ec:	40 00       	rrcm.a	#1,	r0	
    62ee:	d8 00       	cmpa	r0,	r8	
    62f0:	0b 00       	mova	@r0,	r11	
    62f2:	00 00       	bra	@r0		
    62f4:	ed 43 00 00 	mov.b	#2,	0(r13)	;r3 As==10, 0x0000(r13)
    62f8:	40 00       	rrcm.a	#1,	r0	
    62fa:	d8 00       	cmpa	r0,	r8	
    62fc:	07 00       	mova	@r0,	r7	
    62fe:	00 00       	bra	@r0		
    6300:	9f 43 00 00 	mov	#1,	0(r15)	;r3 As==01, 0x0000(r15)
    6304:	40 00       	rrcm.a	#1,	r0	
    6306:	d8 00       	cmpa	r0,	r8	
    6308:	08 00       	mova	@r0,	r8	
    630a:	00 00       	bra	@r0		
    630c:	00 00       	bra	@r0		
    630e:	00 00       	bra	@r0		
    6310:	44 00       	rrcm.a	#1,	r4	
    6312:	d9 00       	cmpa	r0,	r9	
	...
    631c:	44 00       	rrcm.a	#1,	r4	
    631e:	da 00       	cmpa	r0,	r10	
    6320:	10 00       	bra	#0x00000	
    6322:	00 00       	bra	@r0		
    6324:	00 00       	bra	@r0		
    6326:	00 00       	bra	@r0		
    6328:	44 00       	rrcm.a	#1,	r4	
    632a:	dc 00       	cmpa	r0,	r12	
    632c:	12 00       	mova	#0x00000,r2	
    632e:	00 00       	bra	@r0		
    6330:	00 00       	bra	@r0		
    6332:	00 00       	bra	@r0		
    6334:	44 00       	rrcm.a	#1,	r4	
    6336:	dd 00       	cmpa	r0,	r13	
    6338:	16 00       	mova	#0x00000,r6	
    633a:	00 00       	bra	@r0		
    633c:	00 00       	bra	@r0		
    633e:	00 00       	bra	@r0		
    6340:	44 00       	rrcm.a	#1,	r4	
    6342:	de 00       	cmpa	r0,	r14	
    6344:	1e 00       	mova	#0x00000,r14	
    6346:	00 00       	bra	@r0		
    6348:	00 00       	bra	@r0		
    634a:	00 00       	bra	@r0		
    634c:	44 00       	rrcm.a	#1,	r4	
    634e:	df 00       	cmpa	r0,	r15	
    6350:	24 00 00 00 	mova	&0x00000,r4	
    6354:	00 00       	bra	@r0		
    6356:	00 00       	bra	@r0		
    6358:	44 00       	rrcm.a	#1,	r4	
    635a:	e0 00       	adda	r0,	r0	
    635c:	2e 00 00 00 	mova	&0x00000,r14	
    6360:	00 00       	bra	@r0		
    6362:	00 00       	bra	@r0		
    6364:	44 00       	rrcm.a	#1,	r4	
    6366:	e1 00       	adda	r0,	r1	
    6368:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0636a
    636c:	00 00       	bra	@r0		
    636e:	00 00       	bra	@r0		
    6370:	44 00       	rrcm.a	#1,	r4	
    6372:	e2 00       	adda	r0,	r2	
    6374:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x06376
    6378:	00 00       	bra	@r0		
    637a:	00 00       	bra	@r0		
    637c:	44 00       	rrcm.a	#1,	r4	
    637e:	e3 00       	.word	0x00e3;	????	Illegal as address instr
    6380:	42 00       	rrcm.a	#1,	r2	
    6382:	00 00       	bra	@r0		
    6384:	00 00       	bra	@r0		
    6386:	00 00       	bra	@r0		
    6388:	44 00       	rrcm.a	#1,	r4	
    638a:	e5 00       	adda	r0,	r5	
    638c:	48 00       	rrcm.a	#1,	r8	
    638e:	00 00       	bra	@r0		
    6390:	00 00       	bra	@r0		
    6392:	00 00       	bra	@r0		
    6394:	44 00       	rrcm.a	#1,	r4	
    6396:	e6 00       	adda	r0,	r6	
    6398:	54 00       	rrcm	#1,	r4	
    639a:	00 00       	bra	@r0		
    639c:	00 00       	bra	@r0		
    639e:	00 00       	bra	@r0		
    63a0:	44 00       	rrcm.a	#1,	r4	
    63a2:	e8 00       	adda	r0,	r8	
    63a4:	60 00 00 00 	mova	r0,	&0x00000
    63a8:	00 00       	bra	@r0		
    63aa:	00 00       	bra	@r0		
    63ac:	44 00       	rrcm.a	#1,	r4	
    63ae:	eb 00       	adda	r0,	r11	
    63b0:	64 00 00 00 	mova	r0,	&0x40000
    63b4:	00 00       	bra	@r0		
    63b6:	00 00       	bra	@r0		
    63b8:	44 00       	rrcm.a	#1,	r4	
    63ba:	ec 00       	adda	r0,	r12	
    63bc:	66 00 00 00 	mova	r0,	&0x60000
    63c0:	1c 2a       	jnc	$-966    	;abs 0x5ffa
    63c2:	00 00       	bra	@r0		
    63c4:	40 00       	rrcm.a	#1,	r0	
    63c6:	da 00       	cmpa	r0,	r10	
    63c8:	09 00       	mova	@r0,	r9	
    63ca:	00 00       	bra	@r0		
    63cc:	26 43       	mov	#2,	r6	;r3 As==10
    63ce:	00 00       	bra	@r0		
    63d0:	40 00       	rrcm.a	#1,	r0	
    63d2:	da 00       	cmpa	r0,	r10	
    63d4:	0a 00       	mova	@r0,	r10	
    63d6:	00 00       	bra	@r0		
    63d8:	00 00       	bra	@r0		
    63da:	00 00       	bra	@r0		
    63dc:	c0 00       	bra	r0		
    63de:	00 00       	bra	@r0		
    63e0:	10 00       	bra	#0x00000	
    63e2:	00 00       	bra	@r0		
    63e4:	00 00       	bra	@r0		
    63e6:	00 00       	bra	@r0		
    63e8:	e0 00       	adda	r0,	r0	
    63ea:	00 00       	bra	@r0		
    63ec:	66 00 00 00 	mova	r0,	&0x60000
    63f0:	00 00       	bra	@r0		
    63f2:	00 00       	bra	@r0		
    63f4:	24 00 00 00 	mova	&0x00000,r4	
    63f8:	72 00 00 00 	mova	r0,	&0x0000	
    63fc:	f8 43 00 00 	mov.b	#-1,	0(r8)	;r3 As==11, 0x0000(r8)
    6400:	24 00 ef 00 	mova	&0x000ef,r4	
    6404:	10 51 00 00 	add	0(r1),	r0	;0x0000(r1)
    6408:	64 43       	mov.b	#2,	r4	;r3 As==10
    640a:	00 00       	bra	@r0		
    640c:	40 00       	rrcm.a	#1,	r0	
    640e:	ee 00       	adda	r0,	r14	
    6410:	0a 00       	mova	@r0,	r10	
    6412:	00 00       	bra	@r0		
    6414:	ed 43 00 00 	mov.b	#2,	0(r13)	;r3 As==10, 0x0000(r13)
    6418:	40 00       	rrcm.a	#1,	r0	
    641a:	ee 00       	adda	r0,	r14	
    641c:	09 00       	mova	@r0,	r9	
    641e:	00 00       	bra	@r0		
    6420:	00 00       	bra	@r0		
    6422:	00 00       	bra	@r0		
    6424:	44 00       	rrcm.a	#1,	r4	
    6426:	ef 00       	adda	r0,	r15	
	...
    6430:	44 00       	rrcm.a	#1,	r4	
    6432:	f2 00       	suba	r0,	r2	
    6434:	0a 00       	mova	@r0,	r10	
    6436:	00 00       	bra	@r0		
    6438:	00 00       	bra	@r0		
    643a:	00 00       	bra	@r0		
    643c:	44 00       	rrcm.a	#1,	r4	
    643e:	f3 00       	.word	0x00f3;	????	Illegal as address instr
    6440:	0e 00       	mova	@r0,	r14	
    6442:	00 00       	bra	@r0		
    6444:	00 00       	bra	@r0		
    6446:	00 00       	bra	@r0		
    6448:	44 00       	rrcm.a	#1,	r4	
    644a:	f4 00       	suba	r0,	r4	
    644c:	16 00       	mova	#0x00000,r6	
    644e:	00 00       	bra	@r0		
    6450:	00 00       	bra	@r0		
    6452:	00 00       	bra	@r0		
    6454:	44 00       	rrcm.a	#1,	r4	
    6456:	f5 00       	suba	r0,	r5	
    6458:	1c 00       	mova	#0x00000,r12	
    645a:	00 00       	bra	@r0		
    645c:	00 00       	bra	@r0		
    645e:	00 00       	bra	@r0		
    6460:	44 00       	rrcm.a	#1,	r4	
    6462:	f6 00       	suba	r0,	r6	
    6464:	22 00 00 00 	mova	&0x00000,r2	
    6468:	00 00       	bra	@r0		
    646a:	00 00       	bra	@r0		
    646c:	44 00       	rrcm.a	#1,	r4	
    646e:	f7 00       	suba	r0,	r7	
    6470:	28 00 00 00 	mova	&0x00000,r8	
    6474:	00 00       	bra	@r0		
    6476:	00 00       	bra	@r0		
    6478:	44 00       	rrcm.a	#1,	r4	
    647a:	f8 00       	suba	r0,	r8	
    647c:	2c 00 00 00 	mova	&0x00000,r12	
    6480:	00 00       	bra	@r0		
    6482:	00 00       	bra	@r0		
    6484:	44 00       	rrcm.a	#1,	r4	
    6486:	f9 00       	suba	r0,	r9	
    6488:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x0648a
    648c:	00 00       	bra	@r0		
    648e:	00 00       	bra	@r0		
    6490:	44 00       	rrcm.a	#1,	r4	
    6492:	fa 00       	suba	r0,	r10	
    6494:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x06496
    6498:	00 00       	bra	@r0		
    649a:	00 00       	bra	@r0		
    649c:	44 00       	rrcm.a	#1,	r4	
    649e:	fb 00       	suba	r0,	r11	
    64a0:	44 00       	rrcm.a	#1,	r4	
    64a2:	00 00       	bra	@r0		
    64a4:	00 00       	bra	@r0		
    64a6:	00 00       	bra	@r0		
    64a8:	44 00       	rrcm.a	#1,	r4	
    64aa:	fc 00       	suba	r0,	r12	
    64ac:	4a 00       	rrcm.a	#1,	r10	
    64ae:	00 00       	bra	@r0		
    64b0:	00 00       	bra	@r0		
    64b2:	00 00       	bra	@r0		
    64b4:	44 00       	rrcm.a	#1,	r4	
    64b6:	fe 00       	suba	r0,	r14	
    64b8:	4e 00       	rrcm.a	#1,	r14	
    64ba:	00 00       	bra	@r0		
    64bc:	00 00       	bra	@r0		
    64be:	00 00       	bra	@r0		
    64c0:	44 00       	rrcm.a	#1,	r4	
    64c2:	ff 00       	suba	r0,	r15	
    64c4:	50 00       	rrcm	#1,	r0	
    64c6:	00 00       	bra	@r0		
    64c8:	26 43       	mov	#2,	r6	;r3 As==10
    64ca:	00 00       	bra	@r0		
    64cc:	40 00       	rrcm.a	#1,	r0	
    64ce:	f0 00       	suba	r0,	r0	
    64d0:	0b 00       	mova	@r0,	r11	
    64d2:	00 00       	bra	@r0		
    64d4:	00 00       	bra	@r0		
    64d6:	00 00       	bra	@r0		
    64d8:	c0 00       	bra	r0		
    64da:	00 00       	bra	@r0		
    64dc:	0a 00       	mova	@r0,	r10	
    64de:	00 00       	bra	@r0		
    64e0:	00 00       	bra	@r0		
    64e2:	00 00       	bra	@r0		
    64e4:	e0 00       	adda	r0,	r0	
    64e6:	00 00       	bra	@r0		
    64e8:	50 00       	rrcm	#1,	r0	
    64ea:	00 00       	bra	@r0		
    64ec:	00 00       	bra	@r0		
    64ee:	00 00       	bra	@r0		
    64f0:	24 00 00 00 	mova	&0x00000,r4	
    64f4:	58 00       	rrcm	#1,	r8	
    64f6:	00 00       	bra	@r0		
    64f8:	0e 44       	mov	r4,	r14	
    64fa:	00 00       	bra	@r0		
    64fc:	24 00 02 01 	mova	&0x00102,r4	
    6500:	68 51       	add.b	@r1,	r8	
    6502:	00 00       	bra	@r0		
    6504:	64 43       	mov.b	#2,	r4	;r3 As==10
    6506:	00 00       	bra	@r0		
    6508:	40 00       	rrcm.a	#1,	r0	
    650a:	01 01       	mova	@r1,	r1	
    650c:	0b 00       	mova	@r0,	r11	
    650e:	00 00       	bra	@r0		
    6510:	ed 43 00 00 	mov.b	#2,	0(r13)	;r3 As==10, 0x0000(r13)
    6514:	40 00       	rrcm.a	#1,	r0	
    6516:	01 01       	mova	@r1,	r1	
    6518:	07 00       	mova	@r0,	r7	
    651a:	00 00       	bra	@r0		
    651c:	9f 43 00 00 	mov	#1,	0(r15)	;r3 As==01, 0x0000(r15)
    6520:	40 00       	rrcm.a	#1,	r0	
    6522:	01 01       	mova	@r1,	r1	
    6524:	09 00       	mova	@r0,	r9	
    6526:	00 00       	bra	@r0		
    6528:	00 00       	bra	@r0		
    652a:	00 00       	bra	@r0		
    652c:	44 00       	rrcm.a	#1,	r4	
    652e:	02 01       	mova	@r1,	r2	
	...
    6538:	44 00       	rrcm.a	#1,	r4	
    653a:	03 01       	.word	0x0103;	????	Illegal as address instr
    653c:	10 00       	bra	#0x00000	
    653e:	00 00       	bra	@r0		
    6540:	00 00       	bra	@r0		
    6542:	00 00       	bra	@r0		
    6544:	44 00       	rrcm.a	#1,	r4	
    6546:	05 01       	mova	@r1,	r5	
    6548:	12 00       	mova	#0x00000,r2	
    654a:	00 00       	bra	@r0		
    654c:	00 00       	bra	@r0		
    654e:	00 00       	bra	@r0		
    6550:	44 00       	rrcm.a	#1,	r4	
    6552:	06 01       	mova	@r1,	r6	
    6554:	16 00       	mova	#0x00000,r6	
    6556:	00 00       	bra	@r0		
    6558:	00 00       	bra	@r0		
    655a:	00 00       	bra	@r0		
    655c:	44 00       	rrcm.a	#1,	r4	
    655e:	07 01       	mova	@r1,	r7	
    6560:	1e 00       	mova	#0x00000,r14	
    6562:	00 00       	bra	@r0		
    6564:	00 00       	bra	@r0		
    6566:	00 00       	bra	@r0		
    6568:	44 00       	rrcm.a	#1,	r4	
    656a:	08 01       	mova	@r1,	r8	
    656c:	24 00 00 00 	mova	&0x00000,r4	
    6570:	00 00       	bra	@r0		
    6572:	00 00       	bra	@r0		
    6574:	44 00       	rrcm.a	#1,	r4	
    6576:	09 01       	mova	@r1,	r9	
    6578:	2a 00 00 00 	mova	&0x00000,r10	
    657c:	00 00       	bra	@r0		
    657e:	00 00       	bra	@r0		
    6580:	44 00       	rrcm.a	#1,	r4	
    6582:	0a 01       	mova	@r1,	r10	
    6584:	30 00 00 00 	bra	0x0000		;PC rel. 0x06586
    6588:	00 00       	bra	@r0		
    658a:	00 00       	bra	@r0		
    658c:	44 00       	rrcm.a	#1,	r4	
    658e:	0b 01       	mova	@r1,	r11	
    6590:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x06592
    6594:	00 00       	bra	@r0		
    6596:	00 00       	bra	@r0		
    6598:	44 00       	rrcm.a	#1,	r4	
    659a:	0c 01       	mova	@r1,	r12	
    659c:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x0659e
    65a0:	00 00       	bra	@r0		
    65a2:	00 00       	bra	@r0		
    65a4:	44 00       	rrcm.a	#1,	r4	
    65a6:	0e 01       	mova	@r1,	r14	
    65a8:	44 00       	rrcm.a	#1,	r4	
    65aa:	00 00       	bra	@r0		
    65ac:	00 00       	bra	@r0		
    65ae:	00 00       	bra	@r0		
    65b0:	44 00       	rrcm.a	#1,	r4	
    65b2:	10 01       	reta			
    65b4:	52 00       	rrcm	#1,	r2	
    65b6:	00 00       	bra	@r0		
    65b8:	00 00       	bra	@r0		
    65ba:	00 00       	bra	@r0		
    65bc:	44 00       	rrcm.a	#1,	r4	
    65be:	11 01       	mova	@r1+,	r1	
    65c0:	60 00 00 00 	mova	r0,	&0x00000
    65c4:	00 00       	bra	@r0		
    65c6:	00 00       	bra	@r0		
    65c8:	44 00       	rrcm.a	#1,	r4	
    65ca:	12 01       	mova	@r1+,	r2	
    65cc:	66 00 00 00 	mova	r0,	&0x60000
    65d0:	00 00       	bra	@r0		
    65d2:	00 00       	bra	@r0		
    65d4:	44 00       	rrcm.a	#1,	r4	
    65d6:	14 01       	mova	@r1+,	r4	
    65d8:	7a 00 00 00 	mova	r0,	0(r10)	;0x0000(r10)
    65dc:	00 00       	bra	@r0		
    65de:	00 00       	bra	@r0		
    65e0:	44 00       	rrcm.a	#1,	r4	
    65e2:	15 01       	mova	@r1+,	r5	
    65e4:	84 00 00 00 	mova	#0x00000,r4	
    65e8:	00 00       	bra	@r0		
    65ea:	00 00       	bra	@r0		
    65ec:	44 00       	rrcm.a	#1,	r4	
    65ee:	16 01       	mova	@r1+,	r6	
    65f0:	8a 00 00 00 	mova	#0x00000,r10	
    65f4:	00 00       	bra	@r0		
    65f6:	00 00       	bra	@r0		
    65f8:	44 00       	rrcm.a	#1,	r4	
    65fa:	18 01       	mova	@r1+,	r8	
    65fc:	8e 00 00 00 	mova	#0x00000,r14	
    6600:	00 00       	bra	@r0		
    6602:	00 00       	bra	@r0		
    6604:	44 00       	rrcm.a	#1,	r4	
    6606:	19 01       	mova	@r1+,	r9	
    6608:	90 00 00 00 	cmpa	#0x00000,r0	
    660c:	1c 2a       	jnc	$-966    	;abs 0x6246
    660e:	00 00       	bra	@r0		
    6610:	40 00       	rrcm.a	#1,	r0	
    6612:	03 01       	.word	0x0103;	????	Illegal as address instr
    6614:	08 00       	mova	@r0,	r8	
    6616:	00 00       	bra	@r0		
    6618:	26 43       	mov	#2,	r6	;r3 As==10
    661a:	00 00       	bra	@r0		
    661c:	40 00       	rrcm.a	#1,	r0	
    661e:	03 01       	.word	0x0103;	????	Illegal as address instr
    6620:	0a 00       	mova	@r0,	r10	
    6622:	00 00       	bra	@r0		
    6624:	00 00       	bra	@r0		
    6626:	00 00       	bra	@r0		
    6628:	c0 00       	bra	r0		
    662a:	00 00       	bra	@r0		
    662c:	10 00       	bra	#0x00000	
    662e:	00 00       	bra	@r0		
    6630:	00 00       	bra	@r0		
    6632:	00 00       	bra	@r0		
    6634:	e0 00       	adda	r0,	r0	
    6636:	00 00       	bra	@r0		
    6638:	90 00 00 00 	cmpa	#0x00000,r0	
    663c:	00 00       	bra	@r0		
    663e:	00 00       	bra	@r0		
    6640:	24 00 00 00 	mova	&0x00000,r4	
    6644:	9c 00 00 00 	cmpa	#0x00000,r12	
    6648:	29 44       	mov	@r4,	r9	
    664a:	00 00       	bra	@r0		
    664c:	24 00 1c 01 	mova	&0x0011c,r4	
    6650:	04 52       	add	r2,	r4	
    6652:	00 00       	bra	@r0		
    6654:	c4 43 00 00 	mov.b	#0,	0(r4)	;r3 As==00, 0x0000(r4)
    6658:	40 00       	rrcm.a	#1,	r0	
    665a:	1b 01       	mova	@r1+,	r11	
    665c:	0a 00       	mova	@r0,	r10	
    665e:	00 00       	bra	@r0		
    6660:	ed 43 00 00 	mov.b	#2,	0(r13)	;r3 As==10, 0x0000(r13)
    6664:	40 00       	rrcm.a	#1,	r0	
    6666:	1b 01       	mova	@r1+,	r11	
    6668:	09 00       	mova	@r0,	r9	
    666a:	00 00       	bra	@r0		
    666c:	00 00       	bra	@r0		
    666e:	00 00       	bra	@r0		
    6670:	44 00       	rrcm.a	#1,	r4	
    6672:	1c 01       	mova	@r1+,	r12	
	...
    667c:	44 00       	rrcm.a	#1,	r4	
    667e:	1f 01       	mova	@r1+,	r15	
    6680:	0a 00       	mova	@r0,	r10	
    6682:	00 00       	bra	@r0		
    6684:	00 00       	bra	@r0		
    6686:	00 00       	bra	@r0		
    6688:	44 00       	rrcm.a	#1,	r4	
    668a:	20 01 0e 00 	bra	&0x1000e	
    668e:	00 00       	bra	@r0		
    6690:	00 00       	bra	@r0		
    6692:	00 00       	bra	@r0		
    6694:	44 00       	rrcm.a	#1,	r4	
    6696:	21 01 16 00 	mova	&0x10016,r1	
    669a:	00 00       	bra	@r0		
    669c:	00 00       	bra	@r0		
    669e:	00 00       	bra	@r0		
    66a0:	44 00       	rrcm.a	#1,	r4	
    66a2:	22 01 1c 00 	mova	&0x1001c,r2	
    66a6:	00 00       	bra	@r0		
    66a8:	00 00       	bra	@r0		
    66aa:	00 00       	bra	@r0		
    66ac:	44 00       	rrcm.a	#1,	r4	
    66ae:	23 01       	.word	0x0123;	????	Illegal as address instr
    66b0:	26 00 00 00 	mova	&0x00000,r6	
    66b4:	00 00       	bra	@r0		
    66b6:	00 00       	bra	@r0		
    66b8:	44 00       	rrcm.a	#1,	r4	
    66ba:	24 01 2c 00 	mova	&0x1002c,r4	
    66be:	00 00       	bra	@r0		
    66c0:	00 00       	bra	@r0		
    66c2:	00 00       	bra	@r0		
    66c4:	44 00       	rrcm.a	#1,	r4	
    66c6:	25 01 34 00 	mova	&0x10034,r5	
    66ca:	00 00       	bra	@r0		
    66cc:	00 00       	bra	@r0		
    66ce:	00 00       	bra	@r0		
    66d0:	44 00       	rrcm.a	#1,	r4	
    66d2:	26 01 3a 00 	mova	&0x1003a,r6	
    66d6:	00 00       	bra	@r0		
    66d8:	00 00       	bra	@r0		
    66da:	00 00       	bra	@r0		
    66dc:	44 00       	rrcm.a	#1,	r4	
    66de:	27 01 3e 00 	mova	&0x1003e,r7	
    66e2:	00 00       	bra	@r0		
    66e4:	00 00       	bra	@r0		
    66e6:	00 00       	bra	@r0		
    66e8:	44 00       	rrcm.a	#1,	r4	
    66ea:	28 01 48 00 	mova	&0x10048,r8	
    66ee:	00 00       	bra	@r0		
    66f0:	00 00       	bra	@r0		
    66f2:	00 00       	bra	@r0		
    66f4:	44 00       	rrcm.a	#1,	r4	
    66f6:	29 01 4e 00 	mova	&0x1004e,r9	
    66fa:	00 00       	bra	@r0		
    66fc:	00 00       	bra	@r0		
    66fe:	00 00       	bra	@r0		
    6700:	44 00       	rrcm.a	#1,	r4	
    6702:	2a 01 56 00 	mova	&0x10056,r10	
    6706:	00 00       	bra	@r0		
    6708:	00 00       	bra	@r0		
    670a:	00 00       	bra	@r0		
    670c:	44 00       	rrcm.a	#1,	r4	
    670e:	2b 01 5c 00 	mova	&0x1005c,r11	
    6712:	00 00       	bra	@r0		
    6714:	00 00       	bra	@r0		
    6716:	00 00       	bra	@r0		
    6718:	44 00       	rrcm.a	#1,	r4	
    671a:	2d 01 60 00 	mova	&0x10060,r13	
    671e:	00 00       	bra	@r0		
    6720:	00 00       	bra	@r0		
    6722:	00 00       	bra	@r0		
    6724:	44 00       	rrcm.a	#1,	r4	
    6726:	2e 01 62 00 	mova	&0x10062,r14	
    672a:	00 00       	bra	@r0		
    672c:	26 43       	mov	#2,	r6	;r3 As==10
    672e:	00 00       	bra	@r0		
    6730:	40 00       	rrcm.a	#1,	r0	
    6732:	1d 01       	mova	@r1+,	r13	
    6734:	0b 00       	mova	@r0,	r11	
    6736:	00 00       	bra	@r0		
    6738:	00 00       	bra	@r0		
    673a:	00 00       	bra	@r0		
    673c:	c0 00       	bra	r0		
    673e:	00 00       	bra	@r0		
    6740:	0a 00       	mova	@r0,	r10	
    6742:	00 00       	bra	@r0		
    6744:	00 00       	bra	@r0		
    6746:	00 00       	bra	@r0		
    6748:	e0 00       	adda	r0,	r0	
    674a:	00 00       	bra	@r0		
    674c:	62 00 00 00 	mova	r0,	&0x20000
    6750:	00 00       	bra	@r0		
    6752:	00 00       	bra	@r0		
    6754:	24 00 00 00 	mova	&0x00000,r4	
    6758:	6a 00 00 00 	mova	r0,	&0xa0000
    675c:	41 44       	mov.b	r4,	r1	
    675e:	00 00       	bra	@r0		
    6760:	24 00 31 01 	mova	&0x00131,r4	
    6764:	6e 52       	add.b	#4,	r14	;r2 As==10
    6766:	00 00       	bra	@r0		
    6768:	c4 43 00 00 	mov.b	#0,	0(r4)	;r3 As==00, 0x0000(r4)
    676c:	40 00       	rrcm.a	#1,	r0	
    676e:	30 01 0b 00 	bra	11(r1)		;0x000b(r1)
    6772:	00 00       	bra	@r0		
    6774:	ed 43 00 00 	mov.b	#2,	0(r13)	;r3 As==10, 0x0000(r13)
    6778:	40 00       	rrcm.a	#1,	r0	
    677a:	30 01 08 00 	bra	8(r1)		;0x0008(r1)
    677e:	00 00       	bra	@r0		
    6780:	9f 43 00 00 	mov	#1,	0(r15)	;r3 As==01, 0x0000(r15)
    6784:	40 00       	rrcm.a	#1,	r0	
    6786:	30 01 09 00 	bra	9(r1)		;0x0009(r1)
    678a:	00 00       	bra	@r0		
    678c:	00 00       	bra	@r0		
    678e:	00 00       	bra	@r0		
    6790:	44 00       	rrcm.a	#1,	r4	
    6792:	31 01 00 00 	mova	0(r1),	r1	;0x0000(r1)
    6796:	00 00       	bra	@r0		
    6798:	00 00       	bra	@r0		
    679a:	00 00       	bra	@r0		
    679c:	44 00       	rrcm.a	#1,	r4	
    679e:	32 01 10 00 	mova	16(r1),	r2	;0x0010(r1)
    67a2:	00 00       	bra	@r0		
    67a4:	00 00       	bra	@r0		
    67a6:	00 00       	bra	@r0		
    67a8:	44 00       	rrcm.a	#1,	r4	
    67aa:	34 01 12 00 	mova	18(r1),	r4	;0x0012(r1)
    67ae:	00 00       	bra	@r0		
    67b0:	00 00       	bra	@r0		
    67b2:	00 00       	bra	@r0		
    67b4:	44 00       	rrcm.a	#1,	r4	
    67b6:	35 01 16 00 	mova	22(r1),	r5	;0x0016(r1)
    67ba:	00 00       	bra	@r0		
    67bc:	00 00       	bra	@r0		
    67be:	00 00       	bra	@r0		
    67c0:	44 00       	rrcm.a	#1,	r4	
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE

MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

    67c2:	36 01 1e 00 	mova	30(r1),	r6	;0x001e(r1)
// variaveis usadas no menu analog graph
    67c6:	00 00       	bra	@r0		
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
    67c8:	00 00       	bra	@r0		
    67ca:	00 00       	bra	@r0		
    67cc:	44 00       	rrcm.a	#1,	r4	
    67ce:	37 01 24 00 	mova	36(r1),	r7	;0x0024(r1)
    67d2:	00 00       	bra	@r0		
    67d4:	00 00       	bra	@r0		
    67d6:	00 00       	bra	@r0		
    67d8:	44 00       	rrcm.a	#1,	r4	
    67da:	38 01 2e 00 	mova	46(r1),	r8	;0x002e(r1)
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

    67de:	00 00       	bra	@r0		
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
    67e0:	00 00       	bra	@r0		
    67e2:	00 00       	bra	@r0		
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
    67e4:	44 00       	rrcm.a	#1,	r4	
    67e6:	39 01 34 00 	mova	52(r1),	r9	;0x0034(r1)
    67ea:	00 00       	bra	@r0		
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    67ec:	00 00       	bra	@r0		
    67ee:	00 00       	bra	@r0		
    67f0:	44 00       	rrcm.a	#1,	r4	
    67f2:	3a 01 3c 00 	mova	60(r1),	r10	;0x003c(r1)
    67f6:	00 00       	bra	@r0		
    67f8:	00 00       	bra	@r0		
    67fa:	00 00       	bra	@r0		
    67fc:	44 00       	rrcm.a	#1,	r4	
    67fe:	3b 01 42 00 	mova	66(r1),	r11	;0x0042(r1)
    6802:	00 00       	bra	@r0		
    6804:	00 00       	bra	@r0		
    6806:	00 00       	bra	@r0		
    6808:	44 00       	rrcm.a	#1,	r4	
    680a:	3c 01 46 00 	mova	70(r1),	r12	;0x0046(r1)
    680e:	00 00       	bra	@r0		
    6810:	00 00       	bra	@r0		
    6812:	00 00       	bra	@r0		
    6814:	44 00       	rrcm.a	#1,	r4	
    6816:	3d 01 50 00 	mova	80(r1),	r13	;0x0050(r1)
    681a:	00 00       	bra	@r0		
    681c:	00 00       	bra	@r0		
    681e:	00 00       	bra	@r0		
    6820:	44 00       	rrcm.a	#1,	r4	
    6822:	3f 01 56 00 	mova	86(r1),	r15	;0x0056(r1)
    6826:	00 00       	bra	@r0		
    6828:	00 00       	bra	@r0		
    682a:	00 00       	bra	@r0		
    682c:	44 00       	rrcm.a	#1,	r4	
    682e:	41 01       	rram.a	#1,	r1	
    6830:	64 00 00 00 	mova	r0,	&0x40000
    6834:	00 00       	bra	@r0		
    6836:	00 00       	bra	@r0		
    6838:	44 00       	rrcm.a	#1,	r4	
    683a:	42 01       	rram.a	#1,	r2	
    683c:	72 00 00 00 	mova	r0,	&0x0000	
    6840:	00 00       	bra	@r0		
    6842:	00 00       	bra	@r0		
    6844:	44 00       	rrcm.a	#1,	r4	
    6846:	43 01       	rram.a	#1,	#0	;r3 As==00
    6848:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
    684c:	00 00       	bra	@r0		
    684e:	00 00       	bra	@r0		
    6850:	44 00       	rrcm.a	#1,	r4	
    6852:	45 01       	rram.a	#1,	r5	
    6854:	8c 00 00 00 	mova	#0x00000,r12	
    6858:	00 00       	bra	@r0		
    685a:	00 00       	bra	@r0		
    685c:	44 00       	rrcm.a	#1,	r4	
    685e:	46 01       	rram.a	#1,	r6	
    6860:	96 00 00 00 	cmpa	#0x00000,r6	
    6864:	00 00       	bra	@r0		
    6866:	00 00       	bra	@r0		
    6868:	44 00       	rrcm.a	#1,	r4	
    686a:	47 01       	rram.a	#1,	r7	
    686c:	9c 00 00 00 	cmpa	#0x00000,r12	
    6870:	00 00       	bra	@r0		
    6872:	00 00       	bra	@r0		
    6874:	44 00       	rrcm.a	#1,	r4	
    6876:	49 01       	rram.a	#1,	r9	
    6878:	a0 00 00 00 	adda	#0x00000,r0	
    687c:	00 00       	bra	@r0		
    687e:	00 00       	bra	@r0		
    6880:	44 00       	rrcm.a	#1,	r4	
    6882:	4a 01       	rram.a	#1,	r10	
    6884:	a2 00 00 00 	adda	#0x00000,r2	
    6888:	1c 2a       	jnc	$-966    	;abs 0x64c2
    688a:	00 00       	bra	@r0		
    688c:	40 00       	rrcm.a	#1,	r0	
    688e:	32 01 07 00 	mova	7(r1),	r2	;0x0007(r1)
    6892:	00 00       	bra	@r0		
    6894:	26 43       	mov	#2,	r6	;r3 As==10
    6896:	00 00       	bra	@r0		
    6898:	40 00       	rrcm.a	#1,	r0	
    689a:	32 01 0a 00 	mova	10(r1),	r2	;0x000a(r1)
    689e:	00 00       	bra	@r0		
    68a0:	00 00       	bra	@r0		
    68a2:	00 00       	bra	@r0		
    68a4:	c0 00       	bra	r0		
    68a6:	00 00       	bra	@r0		
    68a8:	10 00       	bra	#0x00000	
    68aa:	00 00       	bra	@r0		
    68ac:	00 00       	bra	@r0		
    68ae:	00 00       	bra	@r0		
    68b0:	e0 00       	adda	r0,	r0	
    68b2:	00 00       	bra	@r0		
    68b4:	a2 00 00 00 	adda	#0x00000,r2	
    68b8:	00 00       	bra	@r0		
    68ba:	00 00       	bra	@r0		
    68bc:	24 00 00 00 	mova	&0x00000,r4	
    68c0:	ae 00 00 00 	adda	#0x00000,r14	
    68c4:	5e 44 00 00 	mov.b	0(r4),	r14	;0x0000(r4)
    68c8:	20 00 12 00 	bra	&0x00012	
    68cc:	00 00       	bra	@r0		
    68ce:	00 00       	bra	@r0		
    68d0:	6a 44       	mov.b	@r4,	r10	
    68d2:	00 00       	bra	@r0		
    68d4:	20 00 14 00 	bra	&0x00014	
    68d8:	00 00       	bra	@r0		
    68da:	00 00       	bra	@r0		
    68dc:	77 44       	mov.b	@r4+,	r7	
    68de:	00 00       	bra	@r0		
    68e0:	20 00 16 00 	bra	&0x00016	
    68e4:	00 00       	bra	@r0		
    68e6:	00 00       	bra	@r0		
    68e8:	83 44       	mov	r4,	#1	;r3 As==01
    68ea:	00 00       	bra	@r0		
    68ec:	20 00 18 00 	bra	&0x00018	
    68f0:	00 00       	bra	@r0		
    68f2:	00 00       	bra	@r0		
    68f4:	90 44 00 00 	mov	0(r4),	0x0020	;0x0000(r4), PC rel. 0x0691a
    68f8:	20 00 
    68fa:	1a 00       	mova	#0x00000,r10	
    68fc:	00 00       	bra	@r0		
    68fe:	00 00       	bra	@r0		
    6900:	9c 44 00 00 	mov	0(r4),	32(r12)	;0x0000(r4), 0x0020(r12)
    6904:	20 00 
    6906:	1c 00       	mova	#0x00000,r12	
    6908:	00 00       	bra	@r0		
    690a:	00 00       	bra	@r0		
    690c:	aa 44 00 00 	mov	@r4,	0(r10)	;0x0000(r10)
    6910:	20 00 1e 00 	bra	&0x0001e	
    6914:	00 00       	bra	@r0		
    6916:	00 00       	bra	@r0		
    6918:	b8 44 00 00 	mov	@r4+,	0(r8)	;0x0000(r8)
    691c:	20 00 20 00 	bra	&0x00020	
    6920:	00 00       	bra	@r0		
    6922:	00 00       	bra	@r0		
    6924:	c7 44 00 00 	mov.b	r4,	0(r7)	;0x0000(r7)
    6928:	20 00 88 00 	bra	&0x00088	
    692c:	00 00       	bra	@r0		
    692e:	00 00       	bra	@r0		
    6930:	d4 44 00 00 	mov.b	0(r4),	32(r4)	;0x0000(r4), 0x0020(r4)
    6934:	20 00 
    6936:	8c 00 00 00 	mova	#0x00000,r12	
    693a:	00 00       	bra	@r0		
    693c:	e1 44 00 00 	mov.b	@r4,	0(r1)	;0x0000(r1)
    6940:	20 00 90 00 	bra	&0x00090	
    6944:	00 00       	bra	@r0		
    6946:	00 00       	bra	@r0		
    6948:	ee 44 00 00 	mov.b	@r4,	0(r14)	;0x0000(r14)
    694c:	20 00 94 00 	bra	&0x00094	
    6950:	00 00       	bra	@r0		
    6952:	00 00       	bra	@r0		
    6954:	fb 44 00 00 	mov.b	@r4+,	0(r11)	;0x0000(r11)
    6958:	20 00 98 00 	bra	&0x00098	
    695c:	00 00       	bra	@r0		
    695e:	00 00       	bra	@r0		
    6960:	08 45       	mov	r5,	r8	
    6962:	00 00       	bra	@r0		
    6964:	20 00 9c 00 	bra	&0x0009c	
    6968:	00 00       	bra	@r0		
    696a:	00 00       	bra	@r0		
    696c:	cf 1a       	.word	0x1acf;	????	
    696e:	00 00       	bra	@r0		
    6970:	20 00 7a 00 	bra	&0x0007a	
    6974:	00 00       	bra	@r0		
    6976:	00 00       	bra	@r0		
    6978:	e3 1a       	.word	0x1ae3;	????	
    697a:	00 00       	bra	@r0		
    697c:	20 00 7c 00 	bra	&0x0007c	
    6980:	00 00       	bra	@r0		
    6982:	00 00       	bra	@r0		
    6984:	f0 1a       	.word	0x1af0;	????	
    6986:	00 00       	bra	@r0		
    6988:	20 00 7e 00 	bra	&0x0007e	
    698c:	00 00       	bra	@r0		
    698e:	00 00       	bra	@r0		
    6990:	fd 1a       	.word	0x1afd;	????	
    6992:	00 00       	bra	@r0		
    6994:	20 00 80 00 	bra	&0x00080	
    6998:	00 00       	bra	@r0		
    699a:	00 00       	bra	@r0		
    699c:	0a 1b       	.word	0x1b0a;	????	
    699e:	00 00       	bra	@r0		
    69a0:	20 00 82 00 	bra	&0x00082	
    69a4:	00 00       	bra	@r0		
    69a6:	00 00       	bra	@r0		
    69a8:	17 1b       	.word	0x1b17;	????	
    69aa:	00 00       	bra	@r0		
    69ac:	20 00 84 00 	bra	&0x00084	
    69b0:	00 00       	bra	@r0		
    69b2:	00 00       	bra	@r0		
    69b4:	23 1b       	.word	0x1b23;	????	
    69b6:	00 00       	bra	@r0		
    69b8:	20 00 86 00 	bra	&0x00086	
    69bc:	00 00       	bra	@r0		
    69be:	00 00       	bra	@r0		
    69c0:	30 1b       	.word	0x1b30;	????	
    69c2:	00 00       	bra	@r0		
    69c4:	20 00 89 00 	bra	&0x00089	
    69c8:	00 00       	bra	@r0		
    69ca:	00 00       	bra	@r0		
    69cc:	3d 1b       	.word	0x1b3d;	????	
    69ce:	00 00       	bra	@r0		
    69d0:	20 00 8f 00 	bra	&0x0008f	
    69d4:	00 00       	bra	@r0		
    69d6:	00 00       	bra	@r0		
    69d8:	49 1b       	.word	0x1b49;	????	
    69da:	00 00       	bra	@r0		
    69dc:	20 00 91 00 	bra	&0x00091	
    69e0:	00 00       	bra	@r0		
    69e2:	00 00       	bra	@r0		
    69e4:	56 1b       	.word	0x1b56;	????	
    69e6:	00 00       	bra	@r0		
    69e8:	20 00 93 00 	bra	&0x00093	
    69ec:	00 00       	bra	@r0		
    69ee:	00 00       	bra	@r0		
    69f0:	63 1b       	.word	0x1b63;	????	
    69f2:	00 00       	bra	@r0		
    69f4:	20 00 95 00 	bra	&0x00095	
    69f8:	00 00       	bra	@r0		
    69fa:	00 00       	bra	@r0		
    69fc:	70 1b       	.word	0x1b70;	????	
    69fe:	00 00       	bra	@r0		
    6a00:	20 00 97 00 	bra	&0x00097	
    6a04:	00 00       	bra	@r0		
    6a06:	00 00       	bra	@r0		
    6a08:	7d 1b       	.word	0x1b7d;	????	
    6a0a:	00 00       	bra	@r0		
    6a0c:	20 00 99 00 	bra	&0x00099	
    6a10:	00 00       	bra	@r0		
    6a12:	00 00       	bra	@r0		
    6a14:	89 1b       	.word	0x1b89;	????	
    6a16:	00 00       	bra	@r0		
    6a18:	20 00 9b 00 	bra	&0x0009b	
    6a1c:	00 00       	bra	@r0		
    6a1e:	00 00       	bra	@r0		
    6a20:	96 1b       	.word	0x1b96;	????	
    6a22:	00 00       	bra	@r0		
    6a24:	20 00 9e 00 	bra	&0x0009e	
    6a28:	00 00       	bra	@r0		
    6a2a:	00 00       	bra	@r0		
    6a2c:	a3 1b       	.word	0x1ba3;	????	
    6a2e:	00 00       	bra	@r0		
    6a30:	20 00 a4 00 	bra	&0x000a4	
    6a34:	00 00       	bra	@r0		
    6a36:	00 00       	bra	@r0		
    6a38:	af 1b       	.word	0x1baf;	????	
    6a3a:	00 00       	bra	@r0		
    6a3c:	20 00 a6 00 	bra	&0x000a6	
    6a40:	00 00       	bra	@r0		
    6a42:	00 00       	bra	@r0		
    6a44:	bc 1b       	.word	0x1bbc;	????	
    6a46:	00 00       	bra	@r0		
    6a48:	20 00 a8 00 	bra	&0x000a8	
    6a4c:	00 00       	bra	@r0		
    6a4e:	00 00       	bra	@r0		
    6a50:	c9 1b       	.word	0x1bc9;	????	
    6a52:	00 00       	bra	@r0		
    6a54:	20 00 aa 00 	bra	&0x000aa	
    6a58:	00 00       	bra	@r0		
    6a5a:	00 00       	bra	@r0		
    6a5c:	d6 1b       	.word	0x1bd6;	????	
    6a5e:	00 00       	bra	@r0		
    6a60:	20 00 ad 00 	bra	&0x000ad	
    6a64:	00 00       	bra	@r0		
    6a66:	00 00       	bra	@r0		
    6a68:	e3 1b       	.word	0x1be3;	????	
    6a6a:	00 00       	bra	@r0		
    6a6c:	20 00 b3 00 	bra	&0x000b3	
    6a70:	00 00       	bra	@r0		
    6a72:	00 00       	bra	@r0		
    6a74:	ef 1b       	.word	0x1bef;	????	
    6a76:	00 00       	bra	@r0		
    6a78:	20 00 b5 00 	bra	&0x000b5	
    6a7c:	00 00       	bra	@r0		
    6a7e:	00 00       	bra	@r0		
    6a80:	fc 1b       	.word	0x1bfc;	????	
    6a82:	00 00       	bra	@r0		
    6a84:	20 00 b7 00 	bra	&0x000b7	
    6a88:	00 00       	bra	@r0		
    6a8a:	00 00       	bra	@r0		
    6a8c:	09 1c       	.word	0x1c09;	????	
    6a8e:	00 00       	bra	@r0		
    6a90:	20 00 b9 00 	bra	&0x000b9	
    6a94:	00 00       	bra	@r0		
    6a96:	00 00       	bra	@r0		
    6a98:	16 1c       	.word	0x1c16;	????	
    6a9a:	00 00       	bra	@r0		
    6a9c:	20 00 bc 00 	bra	&0x000bc	
    6aa0:	00 00       	bra	@r0		
    6aa2:	00 00       	bra	@r0		
    6aa4:	23 1c       	.word	0x1c23;	????	
    6aa6:	00 00       	bra	@r0		
    6aa8:	20 00 c2 00 	bra	&0x000c2	
    6aac:	00 00       	bra	@r0		
    6aae:	00 00       	bra	@r0		
    6ab0:	2f 1c       	.word	0x1c2f;	????	
    6ab2:	00 00       	bra	@r0		
    6ab4:	20 00 c4 00 	bra	&0x000c4	
    6ab8:	00 00       	bra	@r0		
    6aba:	00 00       	bra	@r0		
    6abc:	3c 1c       	.word	0x1c3c;	????	
    6abe:	00 00       	bra	@r0		
    6ac0:	20 00 c6 00 	bra	&0x000c6	
    6ac4:	00 00       	bra	@r0		
    6ac6:	00 00       	bra	@r0		
    6ac8:	49 1c       	.word	0x1c49;	????	
    6aca:	00 00       	bra	@r0		
    6acc:	20 00 c8 00 	bra	&0x000c8	
    6ad0:	00 00       	bra	@r0		
    6ad2:	00 00       	bra	@r0		
    6ad4:	56 1c       	.word	0x1c56;	????	
    6ad6:	00 00       	bra	@r0		
    6ad8:	20 00 cb 00 	bra	&0x000cb	
    6adc:	00 00       	bra	@r0		
    6ade:	00 00       	bra	@r0		
    6ae0:	63 1c       	.word	0x1c63;	????	
    6ae2:	00 00       	bra	@r0		
    6ae4:	20 00 d1 00 	bra	&0x000d1	
    6ae8:	00 00       	bra	@r0		
    6aea:	00 00       	bra	@r0		
    6aec:	6f 1c       	.word	0x1c6f;	????	
    6aee:	00 00       	bra	@r0		
    6af0:	20 00 d3 00 	bra	&0x000d3	
    6af4:	00 00       	bra	@r0		
    6af6:	00 00       	bra	@r0		
    6af8:	7c 1c       	.word	0x1c7c;	????	
    6afa:	00 00       	bra	@r0		
    6afc:	20 00 d5 00 	bra	&0x000d5	
    6b00:	00 00       	bra	@r0		
    6b02:	00 00       	bra	@r0		
    6b04:	89 1c       	.word	0x1c89;	????	
    6b06:	00 00       	bra	@r0		
    6b08:	20 00 d7 00 	bra	&0x000d7	
    6b0c:	00 00       	bra	@r0		
    6b0e:	00 00       	bra	@r0		
    6b10:	96 1c       	.word	0x1c96;	????	
    6b12:	00 00       	bra	@r0		
    6b14:	20 00 da 00 	bra	&0x000da	
    6b18:	00 00       	bra	@r0		
    6b1a:	00 00       	bra	@r0		
    6b1c:	a3 1c       	.word	0x1ca3;	????	
    6b1e:	00 00       	bra	@r0		
    6b20:	20 00 e0 00 	bra	&0x000e0	
    6b24:	00 00       	bra	@r0		
    6b26:	00 00       	bra	@r0		
    6b28:	af 1c       	.word	0x1caf;	????	
    6b2a:	00 00       	bra	@r0		
    6b2c:	20 00 e2 00 	bra	&0x000e2	
    6b30:	00 00       	bra	@r0		
    6b32:	00 00       	bra	@r0		
    6b34:	bc 1c       	.word	0x1cbc;	????	
    6b36:	00 00       	bra	@r0		
    6b38:	20 00 e4 00 	bra	&0x000e4	
    6b3c:	00 00       	bra	@r0		
    6b3e:	00 00       	bra	@r0		
    6b40:	c9 1c       	.word	0x1cc9;	????	
    6b42:	00 00       	bra	@r0		
    6b44:	20 00 e6 00 	bra	&0x000e6	
    6b48:	00 00       	bra	@r0		
    6b4a:	00 00       	bra	@r0		
    6b4c:	d6 1c       	.word	0x1cd6;	????	
    6b4e:	00 00       	bra	@r0		
    6b50:	20 00 e9 00 	bra	&0x000e9	
    6b54:	00 00       	bra	@r0		
    6b56:	00 00       	bra	@r0		
    6b58:	e3 1c       	.word	0x1ce3;	????	
    6b5a:	00 00       	bra	@r0		
    6b5c:	20 00 ef 00 	bra	&0x000ef	
    6b60:	00 00       	bra	@r0		
    6b62:	00 00       	bra	@r0		
    6b64:	ef 1c       	.word	0x1cef;	????	
    6b66:	00 00       	bra	@r0		
    6b68:	20 00 f1 00 	bra	&0x000f1	
    6b6c:	00 00       	bra	@r0		
    6b6e:	00 00       	bra	@r0		
    6b70:	fc 1c       	.word	0x1cfc;	????	
    6b72:	00 00       	bra	@r0		
    6b74:	20 00 f3 00 	bra	&0x000f3	
    6b78:	00 00       	bra	@r0		
    6b7a:	00 00       	bra	@r0		
    6b7c:	09 1d       	.word	0x1d09;	????	
    6b7e:	00 00       	bra	@r0		
    6b80:	20 00 f5 00 	bra	&0x000f5	
    6b84:	00 00       	bra	@r0		
    6b86:	00 00       	bra	@r0		
    6b88:	16 1d       	.word	0x1d16;	????	
    6b8a:	00 00       	bra	@r0		
    6b8c:	20 00 f8 00 	bra	&0x000f8	
    6b90:	00 00       	bra	@r0		
    6b92:	00 00       	bra	@r0		
    6b94:	23 1d       	.word	0x1d23;	????	
    6b96:	00 00       	bra	@r0		
    6b98:	20 00 fc 00 	bra	&0x000fc	
    6b9c:	00 00       	bra	@r0		
    6b9e:	00 00       	bra	@r0		
    6ba0:	33 1d       	.word	0x1d33;	????	
    6ba2:	00 00       	bra	@r0		
    6ba4:	20 00 fe 00 	bra	&0x000fe	
    6ba8:	00 00       	bra	@r0		
    6baa:	00 00       	bra	@r0		
    6bac:	43 1d       	.word	0x1d43;	????	
    6bae:	00 00       	bra	@r0		
    6bb0:	20 00 00 01 	bra	&0x00100	
    6bb4:	00 00       	bra	@r0		
    6bb6:	00 00       	bra	@r0		
    6bb8:	52 1d       	.word	0x1d52;	????	
    6bba:	00 00       	bra	@r0		
    6bbc:	20 00 02 01 	bra	&0x00102	
    6bc0:	00 00       	bra	@r0		
    6bc2:	00 00       	bra	@r0		
    6bc4:	61 1d       	.word	0x1d61;	????	
    6bc6:	00 00       	bra	@r0		
    6bc8:	20 00 04 01 	bra	&0x00104	
    6bcc:	00 00       	bra	@r0		
    6bce:	00 00       	bra	@r0		
    6bd0:	71 1d       	.word	0x1d71;	????	
    6bd2:	00 00       	bra	@r0		
    6bd4:	20 00 06 01 	bra	&0x00106	
    6bd8:	00 00       	bra	@r0		
    6bda:	00 00       	bra	@r0		
    6bdc:	81 1d       	.word	0x1d81;	????	
    6bde:	00 00       	bra	@r0		
    6be0:	20 00 08 01 	bra	&0x00108	
    6be4:	00 00       	bra	@r0		
    6be6:	00 00       	bra	@r0		
    6be8:	92 1d       	.word	0x1d92;	????	
    6bea:	00 00       	bra	@r0		
    6bec:	20 00 0a 01 	bra	&0x0010a	
    6bf0:	00 00       	bra	@r0		
    6bf2:	00 00       	bra	@r0		
    6bf4:	a3 1d       	.word	0x1da3;	????	
    6bf6:	00 00       	bra	@r0		
    6bf8:	20 00 0c 01 	bra	&0x0010c	
    6bfc:	00 00       	bra	@r0		
    6bfe:	00 00       	bra	@r0		
    6c00:	b4 1d       	.word	0x1db4;	????	
    6c02:	00 00       	bra	@r0		
    6c04:	20 00 0e 01 	bra	&0x0010e	
    6c08:	00 00       	bra	@r0		
    6c0a:	00 00       	bra	@r0		
    6c0c:	c6 1d       	.word	0x1dc6;	????	
    6c0e:	00 00       	bra	@r0		
    6c10:	20 00 10 01 	bra	&0x00110	
    6c14:	00 00       	bra	@r0		
    6c16:	00 00       	bra	@r0		
    6c18:	d8 1d       	.word	0x1dd8;	????	
    6c1a:	00 00       	bra	@r0		
    6c1c:	20 00 13 01 	bra	&0x00113	
    6c20:	00 00       	bra	@r0		
    6c22:	00 00       	bra	@r0		
    6c24:	e8 1d       	.word	0x1de8;	????	
    6c26:	00 00       	bra	@r0		
    6c28:	20 00 15 01 	bra	&0x00115	
    6c2c:	00 00       	bra	@r0		
    6c2e:	00 00       	bra	@r0		
    6c30:	f8 1d       	.word	0x1df8;	????	
    6c32:	00 00       	bra	@r0		
    6c34:	20 00 17 01 	bra	&0x00117	
    6c38:	00 00       	bra	@r0		
    6c3a:	00 00       	bra	@r0		
    6c3c:	07 1e       	.word	0x1e07;	????	
    6c3e:	00 00       	bra	@r0		
    6c40:	20 00 19 01 	bra	&0x00119	
    6c44:	00 00       	bra	@r0		
    6c46:	00 00       	bra	@r0		
    6c48:	16 1e       	.word	0x1e16;	????	
    6c4a:	00 00       	bra	@r0		
    6c4c:	20 00 1b 01 	bra	&0x0011b	
    6c50:	00 00       	bra	@r0		
    6c52:	00 00       	bra	@r0		
    6c54:	27 1e       	.word	0x1e27;	????	
    6c56:	00 00       	bra	@r0		
    6c58:	20 00 1d 01 	bra	&0x0011d	
    6c5c:	00 00       	bra	@r0		
    6c5e:	00 00       	bra	@r0		
    6c60:	37 1e       	.word	0x1e37;	????	
    6c62:	00 00       	bra	@r0		
    6c64:	20 00 1f 01 	bra	&0x0011f	
    6c68:	00 00       	bra	@r0		
    6c6a:	00 00       	bra	@r0		
    6c6c:	48 1e       	.word	0x1e48;	????	
    6c6e:	00 00       	bra	@r0		
    6c70:	20 00 21 01 	bra	&0x00121	
    6c74:	00 00       	bra	@r0		
    6c76:	00 00       	bra	@r0		
    6c78:	15 45 00 00 	mov	0(r5),	r5	;0x0000(r5)
    6c7c:	20 00 23 01 	bra	&0x00123	
    6c80:	00 00       	bra	@r0		
    6c82:	00 00       	bra	@r0		
    6c84:	27 45       	mov	@r5,	r7	
    6c86:	00 00       	bra	@r0		
    6c88:	20 00 25 01 	bra	&0x00125	
    6c8c:	00 00       	bra	@r0		
    6c8e:	00 00       	bra	@r0		
    6c90:	7d 1e       	.word	0x1e7d;	????	
    6c92:	00 00       	bra	@r0		
    6c94:	20 00 2c 01 	bra	&0x0012c	
    6c98:	00 00       	bra	@r0		
    6c9a:	00 00       	bra	@r0		
    6c9c:	8d 1e       	.word	0x1e8d;	????	
    6c9e:	00 00       	bra	@r0		
    6ca0:	20 00 2e 01 	bra	&0x0012e	
    6ca4:	00 00       	bra	@r0		
    6ca6:	00 00       	bra	@r0		
    6ca8:	9d 1e       	.word	0x1e9d;	????	
    6caa:	00 00       	bra	@r0		
    6cac:	20 00 30 01 	bra	&0x00130	
    6cb0:	00 00       	bra	@r0		
    6cb2:	00 00       	bra	@r0		
    6cb4:	ac 1e       	.word	0x1eac;	????	
    6cb6:	00 00       	bra	@r0		
    6cb8:	20 00 32 01 	bra	&0x00132	
    6cbc:	00 00       	bra	@r0		
    6cbe:	00 00       	bra	@r0		
    6cc0:	bb 1e       	.word	0x1ebb;	????	
    6cc2:	00 00       	bra	@r0		
    6cc4:	20 00 34 01 	bra	&0x00134	
    6cc8:	00 00       	bra	@r0		
    6cca:	00 00       	bra	@r0		
    6ccc:	cb 1e       	.word	0x1ecb;	????	
    6cce:	00 00       	bra	@r0		
    6cd0:	20 00 36 01 	bra	&0x00136	
    6cd4:	00 00       	bra	@r0		
    6cd6:	00 00       	bra	@r0		
    6cd8:	db 1e       	.word	0x1edb;	????	
    6cda:	00 00       	bra	@r0		
    6cdc:	20 00 38 01 	bra	&0x00138	
    6ce0:	00 00       	bra	@r0		
    6ce2:	00 00       	bra	@r0		
    6ce4:	ec 1e       	.word	0x1eec;	????	
    6ce6:	00 00       	bra	@r0		
    6ce8:	20 00 3a 01 	bra	&0x0013a	
    6cec:	00 00       	bra	@r0		
    6cee:	00 00       	bra	@r0		
    6cf0:	fd 1e       	.word	0x1efd;	????	
    6cf2:	00 00       	bra	@r0		
    6cf4:	20 00 3c 01 	bra	&0x0013c	
    6cf8:	00 00       	bra	@r0		
    6cfa:	00 00       	bra	@r0		
    6cfc:	0e 1f       	.word	0x1f0e;	????	
    6cfe:	00 00       	bra	@r0		
    6d00:	20 00 3e 01 	bra	&0x0013e	
    6d04:	00 00       	bra	@r0		
    6d06:	00 00       	bra	@r0		
    6d08:	20 1f       	.word	0x1f20;	????	
    6d0a:	00 00       	bra	@r0		
    6d0c:	20 00 40 01 	bra	&0x00140	
    6d10:	00 00       	bra	@r0		
    6d12:	00 00       	bra	@r0		
    6d14:	32 1f       	.word	0x1f32;	????	
    6d16:	00 00       	bra	@r0		
    6d18:	20 00 43 01 	bra	&0x00143	
    6d1c:	00 00       	bra	@r0		
    6d1e:	00 00       	bra	@r0		
    6d20:	42 1f       	.word	0x1f42;	????	
    6d22:	00 00       	bra	@r0		
    6d24:	20 00 45 01 	bra	&0x00145	
    6d28:	00 00       	bra	@r0		
    6d2a:	00 00       	bra	@r0		
    6d2c:	52 1f       	.word	0x1f52;	????	
    6d2e:	00 00       	bra	@r0		
    6d30:	20 00 47 01 	bra	&0x00147	
    6d34:	00 00       	bra	@r0		
    6d36:	00 00       	bra	@r0		
    6d38:	61 1f       	.word	0x1f61;	????	
    6d3a:	00 00       	bra	@r0		
    6d3c:	20 00 49 01 	bra	&0x00149	
    6d40:	00 00       	bra	@r0		
    6d42:	00 00       	bra	@r0		
    6d44:	70 1f       	.word	0x1f70;	????	
    6d46:	00 00       	bra	@r0		
    6d48:	20 00 4b 01 	bra	&0x0014b	
    6d4c:	00 00       	bra	@r0		
    6d4e:	00 00       	bra	@r0		
    6d50:	81 1f       	.word	0x1f81;	????	
    6d52:	00 00       	bra	@r0		
    6d54:	20 00 4d 01 	bra	&0x0014d	
    6d58:	00 00       	bra	@r0		
    6d5a:	00 00       	bra	@r0		
    6d5c:	91 1f       	.word	0x1f91;	????	
    6d5e:	00 00       	bra	@r0		
    6d60:	20 00 4f 01 	bra	&0x0014f	
    6d64:	00 00       	bra	@r0		
    6d66:	00 00       	bra	@r0		
    6d68:	a2 1f       	.word	0x1fa2;	????	
    6d6a:	00 00       	bra	@r0		
    6d6c:	20 00 51 01 	bra	&0x00151	
    6d70:	00 00       	bra	@r0		
    6d72:	00 00       	bra	@r0		
    6d74:	39 45       	mov	@r5+,	r9	
    6d76:	00 00       	bra	@r0		
    6d78:	20 00 53 01 	bra	&0x00153	
    6d7c:	00 00       	bra	@r0		
    6d7e:	00 00       	bra	@r0		
    6d80:	4b 45       	mov.b	r5,	r11	
    6d82:	00 00       	bra	@r0		
    6d84:	20 00 55 01 	bra	&0x00155	
    6d88:	00 00       	bra	@r0		
    6d8a:	00 00       	bra	@r0		
    6d8c:	d7 1f       	.word	0x1fd7;	????	
    6d8e:	00 00       	bra	@r0		
    6d90:	20 00 58 01 	bra	&0x00158	
    6d94:	00 00       	bra	@r0		
    6d96:	00 00       	bra	@r0		
    6d98:	e4 1f       	.word	0x1fe4;	????	
    6d9a:	00 00       	bra	@r0		
    6d9c:	20 00 5a 01 	bra	&0x0015a	
    6da0:	00 00       	bra	@r0		
    6da2:	00 00       	bra	@r0		
    6da4:	5d 45 00 00 	mov.b	0(r5),	r13	;0x0000(r5)
    6da8:	20 00 1a 00 	bra	&0x0001a	
    6dac:	00 00       	bra	@r0		
    6dae:	00 00       	bra	@r0		
    6db0:	6b 45       	mov.b	@r5,	r11	
    6db2:	00 00       	bra	@r0		
    6db4:	20 00 1c 00 	bra	&0x0001c	
    6db8:	00 00       	bra	@r0		
    6dba:	00 00       	bra	@r0		
    6dbc:	7a 45       	mov.b	@r5+,	r10	
    6dbe:	00 00       	bra	@r0		
    6dc0:	20 00 1e 00 	bra	&0x0001e	
    6dc4:	00 00       	bra	@r0		
    6dc6:	00 00       	bra	@r0		
    6dc8:	87 45 00 00 	mov	r5,	0(r7)	;0x0000(r7)
    6dcc:	20 00 21 00 	bra	&0x00021	
    6dd0:	00 00       	bra	@r0		
    6dd2:	00 00       	bra	@r0		
    6dd4:	98 45 00 00 	mov	0(r5),	32(r8)	;0x0000(r5), 0x0020(r8)
    6dd8:	20 00 
    6dda:	23 00       	.word	0x0023;	????	Illegal as address instr
    6ddc:	00 00       	bra	@r0		
    6dde:	00 00       	bra	@r0		
    6de0:	a9 45 00 00 	mov	@r5,	0(r9)	;0x0000(r9)
    6de4:	20 00 25 00 	bra	&0x00025	
    6de8:	00 00       	bra	@r0		
    6dea:	00 00       	bra	@r0		
    6dec:	b9 45 00 00 	mov	@r5+,	0(r9)	;0x0000(r9)
    6df0:	20 00 27 00 	bra	&0x00027	
    6df4:	00 00       	bra	@r0		
    6df6:	00 00       	bra	@r0		
    6df8:	c9 45 00 00 	mov.b	r5,	0(r9)	;0x0000(r9)
    6dfc:	20 00 47 00 	bra	&0x00047	
    6e00:	00 00       	bra	@r0		
    6e02:	00 00       	bra	@r0		
    6e04:	da 45 00 00 	mov.b	0(r5),	32(r10)	;0x0000(r5), 0x0020(r10)
    6e08:	20 00 
    6e0a:	49 00       	rrcm.a	#1,	r9	
    6e0c:	00 00       	bra	@r0		
    6e0e:	00 00       	bra	@r0		
    6e10:	ea 45 00 00 	mov.b	@r5,	0(r10)	;0x0000(r10)
    6e14:	20 00 ac 00 	bra	&0x000ac	
    6e18:	00 00       	bra	@r0		
    6e1a:	00 00       	bra	@r0		
    6e1c:	f9 45 00 00 	mov.b	@r5+,	0(r9)	;0x0000(r9)
    6e20:	20 00 16 00 	bra	&0x00016	
    6e24:	00 00       	bra	@r0		
    6e26:	00 00       	bra	@r0		
    6e28:	06 46       	mov	r6,	r6	
    6e2a:	00 00       	bra	@r0		
    6e2c:	20 00 18 00 	bra	&0x00018	
    6e30:	00 00       	bra	@r0		
    6e32:	00 00       	bra	@r0		
    6e34:	14 46 00 00 	mov	0(r6),	r4	;0x0000(r6)
    6e38:	20 00 1a 00 	bra	&0x0001a	
    6e3c:	00 00       	bra	@r0		
    6e3e:	00 00       	bra	@r0		
    6e40:	20 46       	br	@r6		
    6e42:	00 00       	bra	@r0		
    6e44:	20 00 1d 00 	bra	&0x0001d	
    6e48:	00 00       	bra	@r0		
    6e4a:	00 00       	bra	@r0		
    6e4c:	30 46       	br	@r6+		
    6e4e:	00 00       	bra	@r0		
    6e50:	20 00 1f 00 	bra	&0x0001f	
    6e54:	00 00       	bra	@r0		
    6e56:	00 00       	bra	@r0		
    6e58:	40 46       	br	r6		
    6e5a:	00 00       	bra	@r0		
    6e5c:	20 00 21 00 	bra	&0x00021	
    6e60:	00 00       	bra	@r0		
    6e62:	00 00       	bra	@r0		
    6e64:	50 46 00 00 	br	0(r6)		;0x0000(r6)
    6e68:	20 00 23 00 	bra	&0x00023	
    6e6c:	00 00       	bra	@r0		
    6e6e:	00 00       	bra	@r0		
    6e70:	5f 46 00 00 	mov.b	0(r6),	r15	;0x0000(r6)
    6e74:	20 00 25 00 	bra	&0x00025	
    6e78:	00 00       	bra	@r0		
    6e7a:	00 00       	bra	@r0		
    6e7c:	6e 46       	mov.b	@r6,	r14	
    6e7e:	00 00       	bra	@r0		
    6e80:	20 00 27 00 	bra	&0x00027	
    6e84:	00 00       	bra	@r0		
    6e86:	00 00       	bra	@r0		
    6e88:	7d 46       	mov.b	@r6+,	r13	
    6e8a:	00 00       	bra	@r0		
    6e8c:	20 00 2c 00 	bra	&0x0002c	
    6e90:	00 00       	bra	@r0		
    6e92:	00 00       	bra	@r0		
    6e94:	8d 46 00 00 	mov	r6,	0(r13)	;0x0000(r13)
    6e98:	20 00 2e 00 	bra	&0x0002e	
    6e9c:	00 00       	bra	@r0		
    6e9e:	00 00       	bra	@r0		
    6ea0:	9d 46 00 00 	mov	0(r6),	32(r13)	;0x0000(r6), 0x0020(r13)
    6ea4:	20 00 
    6ea6:	30 00 00 00 	bra	0x0000		;PC rel. 0x06ea8
    6eaa:	00 00       	bra	@r0		
    6eac:	ad 46 00 00 	mov	@r6,	0(r13)	;0x0000(r13)
    6eb0:	20 00 32 00 	bra	&0x00032	
    6eb4:	00 00       	bra	@r0		
    6eb6:	00 00       	bra	@r0		
    6eb8:	bd 46 00 00 	mov	@r6+,	0(r13)	;0x0000(r13)
    6ebc:	20 00 34 00 	bra	&0x00034	
    6ec0:	00 00       	bra	@r0		
    6ec2:	00 00       	bra	@r0		
    6ec4:	cc 46 00 00 	mov.b	r6,	0(r12)	;0x0000(r12)
    6ec8:	20 00 36 00 	bra	&0x00036	
    6ecc:	00 00       	bra	@r0		
    6ece:	00 00       	bra	@r0		
    6ed0:	db 46 00 00 	mov.b	0(r6),	32(r11)	;0x0000(r6), 0x0020(r11)
    6ed4:	20 00 
    6ed6:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x06ed8
    6eda:	00 00       	bra	@r0		
    6edc:	ea 46 00 00 	mov.b	@r6,	0(r10)	;0x0000(r10)
    6ee0:	20 00 3a 00 	bra	&0x0003a	
    6ee4:	00 00       	bra	@r0		
    6ee6:	00 00       	bra	@r0		
    6ee8:	f9 46 00 00 	mov.b	@r6+,	0(r9)	;0x0000(r9)
    6eec:	20 00 7a 00 	bra	&0x0007a	
    6ef0:	00 00       	bra	@r0		
    6ef2:	00 00       	bra	@r0		
    6ef4:	9d 21       	jnz	$+828    	;abs 0x7230
    6ef6:	00 00       	bra	@r0		
    6ef8:	20 00 14 00 	bra	&0x00014	
    6efc:	00 00       	bra	@r0		
    6efe:	00 00       	bra	@r0		
    6f00:	ab 21       	jnz	$+856    	;abs 0x7258
    6f02:	00 00       	bra	@r0		
    6f04:	20 00 16 00 	bra	&0x00016	
    6f08:	00 00       	bra	@r0		
    6f0a:	00 00       	bra	@r0		
    6f0c:	ba 21       	jnz	$+886    	;abs 0x7282
    6f0e:	00 00       	bra	@r0		
    6f10:	20 00 18 00 	bra	&0x00018	
    6f14:	00 00       	bra	@r0		
    6f16:	00 00       	bra	@r0		
    6f18:	c9 21       	jnz	$+916    	;abs 0x72ac
    6f1a:	00 00       	bra	@r0		
    6f1c:	20 00 1b 00 	bra	&0x0001b	
    6f20:	00 00       	bra	@r0		
    6f22:	00 00       	bra	@r0		
    6f24:	08 47       	mov	r7,	r8	
    6f26:	00 00       	bra	@r0		
    6f28:	20 00 14 00 	bra	&0x00014	
    6f2c:	00 00       	bra	@r0		
    6f2e:	00 00       	bra	@r0		
    6f30:	16 47 00 00 	mov	0(r7),	r6	;0x0000(r7)
    6f34:	20 00 16 00 	bra	&0x00016	
    6f38:	00 00       	bra	@r0		
    6f3a:	00 00       	bra	@r0		
    6f3c:	24 47       	mov	@r7,	r4	
    6f3e:	00 00       	bra	@r0		
    6f40:	20 00 18 00 	bra	&0x00018	
    6f44:	00 00       	bra	@r0		
    6f46:	00 00       	bra	@r0		
    6f48:	02 22       	jnz	$-1018   	;abs 0x6b4e
    6f4a:	00 00       	bra	@r0		
    6f4c:	20 00 14 00 	bra	&0x00014	
    6f50:	00 00       	bra	@r0		
    6f52:	00 00       	bra	@r0		
    6f54:	10 22       	jnz	$-990    	;abs 0x6b76
    6f56:	00 00       	bra	@r0		
    6f58:	20 00 16 00 	bra	&0x00016	
    6f5c:	00 00       	bra	@r0		
    6f5e:	00 00       	bra	@r0		
    6f60:	1e 22       	jnz	$-962    	;abs 0x6b9e
    6f62:	00 00       	bra	@r0		
    6f64:	20 00 18 00 	bra	&0x00018	
    6f68:	00 00       	bra	@r0		
    6f6a:	00 00       	bra	@r0		
    6f6c:	32 47       	mov	@r7+,	r2	
    6f6e:	00 00       	bra	@r0		
    6f70:	20 00 12 00 	bra	&0x00012	
    6f74:	00 00       	bra	@r0		
    6f76:	00 00       	bra	@r0		
    6f78:	44 47       	mov.b	r7,	r4	
    6f7a:	00 00       	bra	@r0		
    6f7c:	20 00 14 00 	bra	&0x00014	
    6f80:	00 00       	bra	@r0		
    6f82:	00 00       	bra	@r0		
    6f84:	56 47 00 00 	mov.b	0(r7),	r6	;0x0000(r7)
    6f88:	20 00 16 00 	bra	&0x00016	
    6f8c:	00 00       	bra	@r0		
    6f8e:	00 00       	bra	@r0		
    6f90:	67 47       	mov.b	@r7,	r7	
    6f92:	00 00       	bra	@r0		
    6f94:	20 00 18 00 	bra	&0x00018	
    6f98:	00 00       	bra	@r0		
    6f9a:	00 00       	bra	@r0		
    6f9c:	77 47       	mov.b	@r7+,	r7	
    6f9e:	00 00       	bra	@r0		
    6fa0:	20 00 1a 00 	bra	&0x0001a	
    6fa4:	00 00       	bra	@r0		
    6fa6:	00 00       	bra	@r0		
    6fa8:	87 47 00 00 	mov	r7,	0(r7)	;0x0000(r7)
    6fac:	20 00 58 00 	bra	&0x00058	
    6fb0:	00 00       	bra	@r0		
    6fb2:	00 00       	bra	@r0		
    6fb4:	95 47 00 00 	mov	0(r7),	32(r5)	;0x0000(r7), 0x0020(r5)
    6fb8:	20 00 
    6fba:	64 00 00 00 	mova	r0,	&0x40000
    6fbe:	00 00       	bra	@r0		
    6fc0:	a7 47 00 00 	mov	@r7,	0(r7)	;0x0000(r7)
    6fc4:	20 00 66 00 	bra	&0x00066	
    6fc8:	00 00       	bra	@r0		
    6fca:	00 00       	bra	@r0		
    6fcc:	b9 47 00 00 	mov	@r7+,	0(r9)	;0x0000(r9)
    6fd0:	20 00 68 00 	bra	&0x00068	
    6fd4:	00 00       	bra	@r0		
    6fd6:	00 00       	bra	@r0		
    6fd8:	cb 47 00 00 	mov.b	r7,	0(r11)	;0x0000(r11)
    6fdc:	20 00 6a 00 	bra	&0x0006a	
    6fe0:	00 00       	bra	@r0		
    6fe2:	00 00       	bra	@r0		
    6fe4:	dd 47 00 00 	mov.b	0(r7),	32(r13)	;0x0000(r7), 0x0020(r13)
    6fe8:	20 00 
    6fea:	6c 00 00 00 	mova	r0,	&0xc0000
    6fee:	00 00       	bra	@r0		
    6ff0:	ef 47 00 00 	mov.b	@r7,	0(r15)	;0x0000(r15)
    6ff4:	20 00 6e 00 	bra	&0x0006e	
    6ff8:	00 00       	bra	@r0		
    6ffa:	00 00       	bra	@r0		
    6ffc:	01 48       	mov	r8,	r1	
    6ffe:	00 00       	bra	@r0		
    7000:	20 00 70 00 	bra	&0x00070	
    7004:	00 00       	bra	@r0		
    7006:	00 00       	bra	@r0		
    7008:	13 48       	.word	0x4813;	????	Illegal as 2-op instr
    700a:	00 00       	bra	@r0		
    700c:	20 00 72 00 	bra	&0x00072	
    7010:	00 00       	bra	@r0		
    7012:	00 00       	bra	@r0		
    7014:	25 48       	mov	@r8,	r5	
    7016:	00 00       	bra	@r0		
    7018:	20 00 74 00 	bra	&0x00074	
    701c:	00 00       	bra	@r0		
    701e:	00 00       	bra	@r0		
    7020:	37 48       	mov	@r8+,	r7	
    7022:	00 00       	bra	@r0		
    7024:	20 00 76 00 	bra	&0x00076	
    7028:	00 00       	bra	@r0		
    702a:	00 00       	bra	@r0		
    702c:	49 48       	mov.b	r8,	r9	
    702e:	00 00       	bra	@r0		
    7030:	20 00 78 00 	bra	&0x00078	
    7034:	00 00       	bra	@r0		
    7036:	00 00       	bra	@r0		
    7038:	5c 48 00 00 	mov.b	0(r8),	r12	;0x0000(r8)
    703c:	20 00 7a 00 	bra	&0x0007a	
    7040:	00 00       	bra	@r0		
    7042:	00 00       	bra	@r0		
    7044:	6f 48       	mov.b	@r8,	r15	
    7046:	00 00       	bra	@r0		
    7048:	20 00 7c 00 	bra	&0x0007c	
    704c:	00 00       	bra	@r0		
    704e:	00 00       	bra	@r0		
    7050:	82 48 00 00 	mov	r8,	&0x0000	
    7054:	20 00 7e 00 	bra	&0x0007e	
    7058:	00 00       	bra	@r0		
    705a:	00 00       	bra	@r0		
    705c:	95 48 00 00 	mov	0(r8),	32(r5)	;0x0000(r8), 0x0020(r5)
    7060:	20 00 
    7062:	80 00 00 00 	bra	#0x00000	
    7066:	00 00       	bra	@r0		
    7068:	a8 48 00 00 	mov	@r8,	0(r8)	;0x0000(r8)
    706c:	20 00 82 00 	bra	&0x00082	
    7070:	00 00       	bra	@r0		
    7072:	00 00       	bra	@r0		
    7074:	b3 23       	jnz	$-152    	;abs 0x6fdc
    7076:	00 00       	bra	@r0		
    7078:	20 00 8b 00 	bra	&0x0008b	
    707c:	00 00       	bra	@r0		
    707e:	00 00       	bra	@r0		
    7080:	c5 23       	jnz	$-116    	;abs 0x700c
    7082:	00 00       	bra	@r0		
    7084:	20 00 8d 00 	bra	&0x0008d	
    7088:	00 00       	bra	@r0		
    708a:	00 00       	bra	@r0		
    708c:	d7 23       	jnz	$-80     	;abs 0x703c
    708e:	00 00       	bra	@r0		
    7090:	20 00 8f 00 	bra	&0x0008f	
    7094:	00 00       	bra	@r0		
    7096:	00 00       	bra	@r0		
    7098:	e9 23       	jnz	$-44     	;abs 0x706c
    709a:	00 00       	bra	@r0		
    709c:	20 00 91 00 	bra	&0x00091	
    70a0:	00 00       	bra	@r0		
    70a2:	00 00       	bra	@r0		
    70a4:	fb 23       	jnz	$-8      	;abs 0x709c
    70a6:	00 00       	bra	@r0		
    70a8:	20 00 93 00 	bra	&0x00093	
    70ac:	00 00       	bra	@r0		
    70ae:	00 00       	bra	@r0		
    70b0:	0d 24       	jz	$+28     	;abs 0x70cc
    70b2:	00 00       	bra	@r0		
    70b4:	20 00 95 00 	bra	&0x00095	
    70b8:	00 00       	bra	@r0		
    70ba:	00 00       	bra	@r0		
    70bc:	1f 24       	jz	$+64     	;abs 0x70fc
    70be:	00 00       	bra	@r0		
    70c0:	20 00 97 00 	bra	&0x00097	
    70c4:	00 00       	bra	@r0		
    70c6:	00 00       	bra	@r0		
    70c8:	31 24       	jz	$+100    	;abs 0x712c
    70ca:	00 00       	bra	@r0		
    70cc:	20 00 99 00 	bra	&0x00099	
    70d0:	00 00       	bra	@r0		
    70d2:	00 00       	bra	@r0		
    70d4:	43 24       	jz	$+136    	;abs 0x715c
    70d6:	00 00       	bra	@r0		
    70d8:	20 00 9b 00 	bra	&0x0009b	
    70dc:	00 00       	bra	@r0		
    70de:	00 00       	bra	@r0		
    70e0:	55 24       	jz	$+172    	;abs 0x718c
    70e2:	00 00       	bra	@r0		
    70e4:	20 00 9d 00 	bra	&0x0009d	
    70e8:	00 00       	bra	@r0		
    70ea:	00 00       	bra	@r0		
    70ec:	67 24       	jz	$+208    	;abs 0x71bc
    70ee:	00 00       	bra	@r0		
    70f0:	20 00 9f 00 	bra	&0x0009f	
    70f4:	00 00       	bra	@r0		
    70f6:	00 00       	bra	@r0		
    70f8:	7a 24       	jz	$+246    	;abs 0x71ee
    70fa:	00 00       	bra	@r0		
    70fc:	20 00 a1 00 	bra	&0x000a1	
    7100:	00 00       	bra	@r0		
    7102:	00 00       	bra	@r0		
    7104:	8d 24       	jz	$+284    	;abs 0x7220
    7106:	00 00       	bra	@r0		
    7108:	20 00 a3 00 	bra	&0x000a3	
    710c:	00 00       	bra	@r0		
    710e:	00 00       	bra	@r0		
    7110:	a0 24       	jz	$+322    	;abs 0x7252
    7112:	00 00       	bra	@r0		
    7114:	20 00 a5 00 	bra	&0x000a5	
    7118:	00 00       	bra	@r0		
    711a:	00 00       	bra	@r0		
    711c:	b3 24       	jz	$+360    	;abs 0x7284
    711e:	00 00       	bra	@r0		
    7120:	20 00 a7 00 	bra	&0x000a7	
    7124:	00 00       	bra	@r0		
    7126:	00 00       	bra	@r0		
    7128:	c6 24       	jz	$+398    	;abs 0x72b6
    712a:	00 00       	bra	@r0		
    712c:	20 00 a9 00 	bra	&0x000a9	
    7130:	00 00       	bra	@r0		
    7132:	00 00       	bra	@r0		
    7134:	bb 48 00 00 	mov	@r8+,	0(r11)	;0x0000(r11)
    7138:	20 00 12 00 	bra	&0x00012	
    713c:	00 00       	bra	@r0		
    713e:	00 00       	bra	@r0		
    7140:	ce 48 00 00 	mov.b	r8,	0(r14)	;0x0000(r14)
    7144:	20 00 14 00 	bra	&0x00014	
    7148:	00 00       	bra	@r0		
    714a:	00 00       	bra	@r0		
    714c:	e1 48 00 00 	mov.b	@r8,	0(r1)	;0x0000(r1)
    7150:	20 00 16 00 	bra	&0x00016	
    7154:	00 00       	bra	@r0		
    7156:	00 00       	bra	@r0		
    7158:	f4 48 00 00 	mov.b	@r8+,	0(r4)	;0x0000(r4)
    715c:	20 00 18 00 	bra	&0x00018	
    7160:	00 00       	bra	@r0		
    7162:	00 00       	bra	@r0		
    7164:	07 49       	mov	r9,	r7	
    7166:	00 00       	bra	@r0		
    7168:	20 00 18 00 	bra	&0x00018	
    716c:	00 00       	bra	@r0		
    716e:	00 00       	bra	@r0		
    7170:	17 49 00 00 	mov	0(r9),	r7	;0x0000(r9)
    7174:	20 00 1a 00 	bra	&0x0001a	
    7178:	00 00       	bra	@r0		
    717a:	00 00       	bra	@r0		
    717c:	27 49       	mov	@r9,	r7	
    717e:	00 00       	bra	@r0		
    7180:	20 00 1d 00 	bra	&0x0001d	
    7184:	00 00       	bra	@r0		
    7186:	00 00       	bra	@r0		
    7188:	35 49       	mov	@r9+,	r5	
    718a:	00 00       	bra	@r0		
    718c:	20 00 3f 00 	bra	&0x0003f	
    7190:	00 00       	bra	@r0		
    7192:	00 00       	bra	@r0		
    7194:	63 25       	jz	$+712    	;abs 0x745c
    7196:	00 00       	bra	@r0		
    7198:	20 00 41 00 	bra	&0x00041	
    719c:	00 00       	bra	@r0		
    719e:	00 00       	bra	@r0		
    71a0:	45 49       	mov.b	r9,	r5	
    71a2:	00 00       	bra	@r0		
    71a4:	20 00 43 00 	bra	&0x00043	
    71a8:	00 00       	bra	@r0		
    71aa:	00 00       	bra	@r0		
    71ac:	88 25       	jz	$+786    	;abs 0x74be
    71ae:	00 00       	bra	@r0		
    71b0:	20 00 45 00 	bra	&0x00045	
    71b4:	00 00       	bra	@r0		
    71b6:	00 00       	bra	@r0		
    71b8:	55 49 00 00 	mov.b	0(r9),	r5	;0x0000(r9)
    71bc:	20 00 47 00 	bra	&0x00047	
    71c0:	00 00       	bra	@r0		
    71c2:	00 00       	bra	@r0		
    71c4:	65 49       	mov.b	@r9,	r5	
    71c6:	00 00       	bra	@r0		
    71c8:	20 00 49 00 	bra	&0x00049	
    71cc:	00 00       	bra	@r0		
    71ce:	00 00       	bra	@r0		
    71d0:	74 49       	mov.b	@r9+,	r4	
    71d2:	00 00       	bra	@r0		
    71d4:	20 00 4c 00 	bra	&0x0004c	
    71d8:	00 00       	bra	@r0		
    71da:	00 00       	bra	@r0		
    71dc:	c5 25       	jz	$+908    	;abs 0x7568
    71de:	00 00       	bra	@r0		
    71e0:	20 00 4e 00 	bra	&0x0004e	
    71e4:	00 00       	bra	@r0		
    71e6:	00 00       	bra	@r0		
    71e8:	84 49 00 00 	mov	r9,	0(r4)	;0x0000(r4)
    71ec:	20 00 50 00 	bra	&0x00050	
    71f0:	00 00       	bra	@r0		
    71f2:	00 00       	bra	@r0		
    71f4:	94 49 00 00 	mov	0(r9),	32(r4)	;0x0000(r9), 0x0020(r4)
    71f8:	20 00 
    71fa:	52 00       	rrcm	#1,	r2	
    71fc:	00 00       	bra	@r0		
    71fe:	00 00       	bra	@r0		
    7200:	a3 49       	mov	@r9,	#1	;r3 As==01
    7202:	00 00       	bra	@r0		
    7204:	20 00 54 00 	bra	&0x00054	
    7208:	00 00       	bra	@r0		
    720a:	00 00       	bra	@r0		
    720c:	b3 49       	mov	@r9+,	#1	;r3 As==01
    720e:	00 00       	bra	@r0		
    7210:	20 00 56 00 	bra	&0x00056	
    7214:	00 00       	bra	@r0		
    7216:	00 00       	bra	@r0		
    7218:	c2 49 00 00 	mov.b	r9,	&0x0000	
    721c:	20 00 59 00 	bra	&0x00059	
    7220:	00 00       	bra	@r0		
    7222:	00 00       	bra	@r0		
    7224:	21 26       	jz	$-956    	;abs 0x6e68
    7226:	00 00       	bra	@r0		
    7228:	20 00 5b 00 	bra	&0x0005b	
    722c:	00 00       	bra	@r0		
    722e:	00 00       	bra	@r0		
    7230:	d2 49 00 00 	mov.b	0(r9),	&0x0020	;0x0000(r9)
    7234:	20 00 
    7236:	5d 00       	rrcm	#1,	r13	
    7238:	00 00       	bra	@r0		
    723a:	00 00       	bra	@r0		
    723c:	3f 26       	jz	$-896    	;abs 0x6ebc
    723e:	00 00       	bra	@r0		
    7240:	20 00 5f 00 	bra	&0x0005f	
    7244:	00 00       	bra	@r0		
    7246:	00 00       	bra	@r0		
    7248:	e2 49 00 00 	mov.b	@r9,	&0x0000	
    724c:	20 00 61 00 	bra	&0x00061	
    7250:	00 00       	bra	@r0		
    7252:	00 00       	bra	@r0		
    7254:	f2 49 00 00 	mov.b	@r9+,	&0x0000	
    7258:	20 00 63 00 	bra	&0x00063	
    725c:	00 00       	bra	@r0		
    725e:	00 00       	bra	@r0		
    7260:	01 4a       	mov	r10,	r1	
    7262:	00 00       	bra	@r0		
    7264:	20 00 47 00 	bra	&0x00047	
    7268:	00 00       	bra	@r0		
    726a:	00 00       	bra	@r0		
    726c:	7b 26       	jz	$-776    	;abs 0x6f64
    726e:	00 00       	bra	@r0		
    7270:	20 00 45 00 	bra	&0x00045	
    7274:	00 00       	bra	@r0		
    7276:	00 00       	bra	@r0		
    7278:	86 26       	jz	$-754    	;abs 0x6f86
    727a:	00 00       	bra	@r0		
    727c:	20 00 4c 00 	bra	&0x0004c	
    7280:	00 00       	bra	@r0		
    7282:	00 00       	bra	@r0		
    7284:	92 26       	jz	$-730    	;abs 0x6faa
    7286:	00 00       	bra	@r0		
    7288:	20 00 54 00 	bra	&0x00054	
    728c:	00 00       	bra	@r0		
    728e:	00 00       	bra	@r0		
    7290:	9d 26       	jz	$-708    	;abs 0x6fcc
    7292:	00 00       	bra	@r0		
    7294:	20 00 5c 00 	bra	&0x0005c	
    7298:	00 00       	bra	@r0		
    729a:	00 00       	bra	@r0		
    729c:	10 4a 00 00 	br	0(r10)		;0x0000(r10)
    72a0:	20 00 6e 00 	bra	&0x0006e	
    72a4:	00 00       	bra	@r0		
    72a6:	00 00       	bra	@r0		
    72a8:	be 26       	jz	$-642    	;abs 0x7026
    72aa:	00 00       	bra	@r0		
    72ac:	20 00 70 00 	bra	&0x00070	
    72b0:	00 00       	bra	@r0		
    72b2:	00 00       	bra	@r0		
    72b4:	d4 26       	jz	$-598    	;abs 0x705e
    72b6:	00 00       	bra	@r0		
    72b8:	20 00 72 00 	bra	&0x00072	
    72bc:	00 00       	bra	@r0		
    72be:	00 00       	bra	@r0		
    72c0:	ea 26       	jz	$-554    	;abs 0x7096
    72c2:	00 00       	bra	@r0		
    72c4:	20 00 74 00 	bra	&0x00074	
    72c8:	00 00       	bra	@r0		
    72ca:	00 00       	bra	@r0		
    72cc:	01 27       	jz	$-508    	;abs 0x70d0
    72ce:	00 00       	bra	@r0		
    72d0:	20 00 76 00 	bra	&0x00076	
    72d4:	00 00       	bra	@r0		
    72d6:	00 00       	bra	@r0		
    72d8:	18 27       	jz	$-462    	;abs 0x710a
    72da:	00 00       	bra	@r0		
    72dc:	20 00 93 00 	bra	&0x00093	
    72e0:	00 00       	bra	@r0		
    72e2:	00 00       	bra	@r0		
    72e4:	2c 27       	jz	$-422    	;abs 0x713e
    72e6:	00 00       	bra	@r0		
    72e8:	20 00 95 00 	bra	&0x00095	
    72ec:	00 00       	bra	@r0		
    72ee:	00 00       	bra	@r0		
    72f0:	40 27       	jz	$-382    	;abs 0x7172
    72f2:	00 00       	bra	@r0		
    72f4:	20 00 97 00 	bra	&0x00097	
    72f8:	00 00       	bra	@r0		
    72fa:	00 00       	bra	@r0		
    72fc:	54 27       	jz	$-342    	;abs 0x71a6
    72fe:	00 00       	bra	@r0		
    7300:	20 00 99 00 	bra	&0x00099	
    7304:	00 00       	bra	@r0		
    7306:	00 00       	bra	@r0		
    7308:	68 27       	jz	$-302    	;abs 0x71da
    730a:	00 00       	bra	@r0		
    730c:	20 00 9b 00 	bra	&0x0009b	
    7310:	00 00       	bra	@r0		
    7312:	00 00       	bra	@r0		
    7314:	7b 27       	jz	$-264    	;abs 0x720c
    7316:	00 00       	bra	@r0		
    7318:	20 00 9d 00 	bra	&0x0009d	
    731c:	00 00       	bra	@r0		
    731e:	00 00       	bra	@r0		
    7320:	8e 27       	jz	$-226    	;abs 0x723e
    7322:	00 00       	bra	@r0		
    7324:	20 00 9f 00 	bra	&0x0009f	
    7328:	00 00       	bra	@r0		
    732a:	00 00       	bra	@r0		
    732c:	a1 27       	jz	$-188    	;abs 0x7270
    732e:	00 00       	bra	@r0		
    7330:	20 00 a1 00 	bra	&0x000a1	
    7334:	00 00       	bra	@r0		
    7336:	00 00       	bra	@r0		
    7338:	25 4a       	mov	@r10,	r5	
    733a:	00 00       	bra	@r0		
    733c:	20 00 12 00 	bra	&0x00012	
	...
    7348:	64 00 00 00 	mova	r0,	&0x40000
    734c:	1c 53       	inc	r12		
    734e:	00 00       	bra	@r0		
    7350:	cc 33       	jn	$-102    	;abs 0x72ea
    7352:	00 00       	bra	@r0		
    7354:	64 00 00 00 	mova	r0,	&0x40000
    7358:	1c 53       	inc	r12		
    735a:	00 00       	bra	@r0		
    735c:	3f 4a       	mov	@r10+,	r15	
    735e:	00 00       	bra	@r0		
    7360:	64 00 00 00 	mova	r0,	&0x40000
    7364:	1c 53       	inc	r12		
    7366:	00 00       	bra	@r0		
    7368:	6a 00 00 00 	mova	r0,	&0xa0000
    736c:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0736e
    7370:	00 00       	bra	@r0		
    7372:	00 00       	bra	@r0		
    7374:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    7378:	80 00 00 00 	bra	#0x00000	
    737c:	00 00       	bra	@r0		
    737e:	00 00       	bra	@r0		
    7380:	99 00 00 00 	cmpa	#0x00000,r9	
    7384:	80 00 00 00 	bra	#0x00000	
    7388:	00 00       	bra	@r0		
    738a:	00 00       	bra	@r0		
    738c:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    738e:	00 00       	bra	@r0		
    7390:	80 00 00 00 	bra	#0x00000	
    7394:	00 00       	bra	@r0		
    7396:	00 00       	bra	@r0		
    7398:	ec 00       	adda	r0,	r12	
    739a:	00 00       	bra	@r0		
    739c:	80 00 00 00 	bra	#0x00000	
    73a0:	00 00       	bra	@r0		
    73a2:	00 00       	bra	@r0		
    73a4:	24 01 00 00 	mova	&0x10000,r4	
    73a8:	80 00 00 00 	bra	#0x00000	
    73ac:	00 00       	bra	@r0		
    73ae:	00 00       	bra	@r0		
    73b0:	66 01 00 00 	mova	r1,	&0x60000
    73b4:	80 00 00 00 	bra	#0x00000	
    73b8:	00 00       	bra	@r0		
    73ba:	00 00       	bra	@r0		
    73bc:	b7 01 00 00 	suba	#0x10000,r7	
    73c0:	80 00 00 00 	bra	#0x00000	
    73c4:	00 00       	bra	@r0		
    73c6:	00 00       	bra	@r0		
    73c8:	08 02       	mova	#4,	r8	;r2 As==10
    73ca:	00 00       	bra	@r0		
    73cc:	80 00 00 00 	bra	#0x00000	
    73d0:	00 00       	bra	@r0		
    73d2:	00 00       	bra	@r0		
    73d4:	2e 02 00 00 	mova	&0x20000,r14	
    73d8:	80 00 00 00 	bra	#0x00000	
    73dc:	00 00       	bra	@r0		
    73de:	00 00       	bra	@r0		
    73e0:	6c 02 00 00 	mova	r2,	&0xc0000
    73e4:	80 00 00 00 	bra	#0x00000	
    73e8:	00 00       	bra	@r0		
    73ea:	00 00       	bra	@r0		
    73ec:	96 02 00 00 	cmpa	#0x20000,r6	
    73f0:	80 00 00 00 	bra	#0x00000	
    73f4:	00 00       	bra	@r0		
    73f6:	00 00       	bra	@r0		
    73f8:	bf 02 00 00 	suba	#0x20000,r15	
    73fc:	80 00 00 00 	bra	#0x00000	
    7400:	00 00       	bra	@r0		
    7402:	00 00       	bra	@r0		
    7404:	d9 02       	cmpa	r2,	r9	
    7406:	00 00       	bra	@r0		
    7408:	80 00 00 00 	bra	#0x00000	
    740c:	00 00       	bra	@r0		
    740e:	00 00       	bra	@r0		
    7410:	f4 02       	suba	r2,	r4	
    7412:	00 00       	bra	@r0		
    7414:	80 00 00 00 	bra	#0x00000	
    7418:	00 00       	bra	@r0		
    741a:	00 00       	bra	@r0		
    741c:	14 03       	mova	#-1,	r4	;r3 As==11
    741e:	00 00       	bra	@r0		
    7420:	80 00 00 00 	bra	#0x00000	
    7424:	00 00       	bra	@r0		
    7426:	00 00       	bra	@r0		
    7428:	4d 03       	rrum.a	#1,	r13	
    742a:	00 00       	bra	@r0		
    742c:	80 00 00 00 	bra	#0x00000	
    7430:	00 00       	bra	@r0		
    7432:	00 00       	bra	@r0		
    7434:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    7438:	80 00 00 00 	bra	#0x00000	
    743c:	00 00       	bra	@r0		
    743e:	00 00       	bra	@r0		
    7440:	8a 03 00 00 	mova	#0x30000,r10	
    7444:	80 00 00 00 	bra	#0x00000	
    7448:	00 00       	bra	@r0		
    744a:	00 00       	bra	@r0		
    744c:	ae 03 00 00 	adda	#0x30000,r14	
    7450:	80 00 00 00 	bra	#0x00000	
    7454:	00 00       	bra	@r0		
    7456:	00 00       	bra	@r0		
    7458:	d7 03       	tsta	r7		
    745a:	00 00       	bra	@r0		
    745c:	80 00 00 00 	bra	#0x00000	
    7460:	00 00       	bra	@r0		
    7462:	00 00       	bra	@r0		
    7464:	3f 4a       	mov	@r10+,	r15	
    7466:	00 00       	bra	@r0		
    7468:	82 00 00 00 	mova	#0x00000,r2	
    746c:	d4 00       	cmpa	r0,	r4	
    746e:	03 00       	.word	0x0003;	????	Illegal as address instr
    7470:	cf 09       	mova	r9,	r15	
    7472:	00 00       	bra	@r0		
    7474:	c2 00       	mova	r0,	r2	
    7476:	00 00       	bra	@r0		
    7478:	00 00       	bra	@r0		
    747a:	00 00       	bra	@r0		
    747c:	ab 09 00 00 	adda	#0x90000,r11	
    7480:	c2 00       	mova	r0,	r2	
    7482:	00 00       	bra	@r0		
    7484:	00 00       	bra	@r0		
    7486:	00 00       	bra	@r0		
    7488:	cd 04       	mova	r4,	r13	
    748a:	00 00       	bra	@r0		
    748c:	c2 00       	mova	r0,	r2	
    748e:	00 00       	bra	@r0		
    7490:	91 34       	jge	$+292    	;abs 0x75b4
    7492:	00 00       	bra	@r0		
    7494:	f6 09       	suba	r9,	r6	
    7496:	00 00       	bra	@r0		
    7498:	c2 00       	mova	r0,	r2	
    749a:	00 00       	bra	@r0		
    749c:	00 00       	bra	@r0		
    749e:	00 00       	bra	@r0		
    74a0:	1c 0a       	mova	@r10+,	r12	
    74a2:	00 00       	bra	@r0		
    74a4:	c2 00       	mova	r0,	r2	
    74a6:	00 00       	bra	@r0		
    74a8:	00 00       	bra	@r0		
    74aa:	00 00       	bra	@r0		
    74ac:	43 0a       	rlam.a	#3,	#0	;r3 As==00
    74ae:	00 00       	bra	@r0		
    74b0:	c2 00       	mova	r0,	r2	
    74b2:	00 00       	bra	@r0		
    74b4:	c1 68 00 00 	addc.b	r8,	0(r1)	;0x0000(r1)
    74b8:	41 0c       	rrcm.a	#4,	r1	
    74ba:	00 00       	bra	@r0		
    74bc:	c2 00       	mova	r0,	r2	
    74be:	00 00       	bra	@r0		
    74c0:	00 00       	bra	@r0		
    74c2:	00 00       	bra	@r0		
    74c4:	68 0c 00 00 	mova	r12,	&0x80000
    74c8:	c2 00       	mova	r0,	r2	
    74ca:	00 00       	bra	@r0		
    74cc:	3e 8a       	sub	@r10+,	r14	
    74ce:	00 00       	bra	@r0		
    74d0:	eb 0e       	adda	r14,	r11	
    74d2:	00 00       	bra	@r0		
    74d4:	c2 00       	mova	r0,	r2	
    74d6:	00 00       	bra	@r0		
    74d8:	90 a7 00 00 	dadd	0(r7),	0x11de	;0x0000(r7), PC rel. 0x086bc
    74dc:	de 11 
    74de:	00 00       	bra	@r0		
    74e0:	c2 00       	mova	r0,	r2	
    74e2:	00 00       	bra	@r0		
    74e4:	00 00       	bra	@r0		
    74e6:	00 00       	bra	@r0		
    74e8:	0c 12       	push	r12		
    74ea:	00 00       	bra	@r0		
    74ec:	c2 00       	mova	r0,	r2	
    74ee:	00 00       	bra	@r0		
    74f0:	00 00       	bra	@r0		
    74f2:	00 00       	bra	@r0		
    74f4:	34 12       	push	@r4+		
    74f6:	00 00       	bra	@r0		
    74f8:	c2 00       	mova	r0,	r2	
    74fa:	00 00       	bra	@r0		
    74fc:	00 00       	bra	@r0		
    74fe:	00 00       	bra	@r0		
    7500:	5c 12 00 00 	push.b	0(r12)		;0x0000(r12)
    7504:	c2 00       	mova	r0,	r2	
    7506:	00 00       	bra	@r0		
    7508:	0c af       	dadd	r15,	r12	
    750a:	00 00       	bra	@r0		
    750c:	7b 15       	pushm	#8,	r11	
    750e:	00 00       	bra	@r0		
    7510:	c2 00       	mova	r0,	r2	
    7512:	00 00       	bra	@r0		
    7514:	00 00       	bra	@r0		
    7516:	00 00       	bra	@r0		
    7518:	a3 15       	pushm	#11,	#0	;r3 As==00
    751a:	00 00       	bra	@r0		
    751c:	c2 00       	mova	r0,	r2	
    751e:	00 00       	bra	@r0		
    7520:	00 00       	bra	@r0		
    7522:	00 00       	bra	@r0		
    7524:	c9 15       	pushm	#13,	r9	
    7526:	00 00       	bra	@r0		
    7528:	c2 00       	mova	r0,	r2	
    752a:	00 00       	bra	@r0		
    752c:	00 00       	bra	@r0		
    752e:	00 00       	bra	@r0		
    7530:	fa 15       	pushm	#16,	r10	
    7532:	00 00       	bra	@r0		
    7534:	c2 00       	mova	r0,	r2	
    7536:	00 00       	bra	@r0		
    7538:	00 00       	bra	@r0		
    753a:	00 00       	bra	@r0		
    753c:	48 4a       	mov.b	r10,	r8	
    753e:	00 00       	bra	@r0		
    7540:	24 00 07 00 	mova	&0x00007,r4	
    7544:	1c 53       	inc	r12		
    7546:	00 00       	bra	@r0		
    7548:	00 00       	bra	@r0		
    754a:	00 00       	bra	@r0		
    754c:	44 00       	rrcm.a	#1,	r4	
    754e:	07 00       	mova	@r0,	r7	
	...
    7558:	44 00       	rrcm.a	#1,	r4	
    755a:	08 00       	mova	@r0,	r8	
	...
    7564:	44 00       	rrcm.a	#1,	r4	
    7566:	0a 00       	mova	@r0,	r10	
    7568:	04 00       	mova	@r0,	r4	
    756a:	00 00       	bra	@r0		
    756c:	00 00       	bra	@r0		
    756e:	00 00       	bra	@r0		
    7570:	44 00       	rrcm.a	#1,	r4	
    7572:	0b 00       	mova	@r0,	r11	
    7574:	08 00       	mova	@r0,	r8	
    7576:	00 00       	bra	@r0		
    7578:	00 00       	bra	@r0		
    757a:	00 00       	bra	@r0		
    757c:	44 00       	rrcm.a	#1,	r4	
    757e:	0c 00       	mova	@r0,	r12	
    7580:	0e 00       	mova	@r0,	r14	
    7582:	00 00       	bra	@r0		
    7584:	00 00       	bra	@r0		
    7586:	00 00       	bra	@r0		
    7588:	44 00       	rrcm.a	#1,	r4	
    758a:	0d 00       	mova	@r0,	r13	
    758c:	14 00       	mova	#0x00000,r4	
    758e:	00 00       	bra	@r0		
    7590:	00 00       	bra	@r0		
    7592:	00 00       	bra	@r0		
    7594:	44 00       	rrcm.a	#1,	r4	
    7596:	0e 00       	mova	@r0,	r14	
    7598:	18 00       	mova	#0x00000,r8	
    759a:	00 00       	bra	@r0		
    759c:	00 00       	bra	@r0		
    759e:	00 00       	bra	@r0		
    75a0:	24 00 00 00 	mova	&0x00000,r4	
    75a4:	1a 00       	mova	#0x00000,r10	
    75a6:	00 00       	bra	@r0		
    75a8:	5c 4a 00 00 	mov.b	0(r10),	r12	;0x0000(r10)
    75ac:	24 00 10 00 	mova	&0x00010,r4	
    75b0:	36 53       	add	#-1,	r6	;r3 As==11
    75b2:	00 00       	bra	@r0		
    75b4:	7d 4a       	mov.b	@r10+,	r13	
    75b6:	00 00       	bra	@r0		
    75b8:	40 00       	rrcm.a	#1,	r0	
    75ba:	10 00       	bra	#0x00000	
    75bc:	07 00       	mova	@r0,	r7	
    75be:	00 00       	bra	@r0		
    75c0:	00 00       	bra	@r0		
    75c2:	00 00       	bra	@r0		
    75c4:	44 00       	rrcm.a	#1,	r4	
    75c6:	10 00       	bra	#0x00000	
	...
    75d0:	44 00       	rrcm.a	#1,	r4	
    75d2:	13 00       	.word	0x0013;	????	Illegal as address instr
    75d4:	0c 00       	mova	@r0,	r12	
    75d6:	00 00       	bra	@r0		
    75d8:	00 00       	bra	@r0		
    75da:	00 00       	bra	@r0		
    75dc:	44 00       	rrcm.a	#1,	r4	
    75de:	15 00       	mova	#0x00000,r5	
    75e0:	10 00       	bra	#0x00000	
    75e2:	00 00       	bra	@r0		
    75e4:	00 00       	bra	@r0		
    75e6:	00 00       	bra	@r0		
    75e8:	44 00       	rrcm.a	#1,	r4	
    75ea:	16 00       	mova	#0x00000,r6	
    75ec:	26 00 00 00 	mova	&0x00000,r6	
    75f0:	00 00       	bra	@r0		
    75f2:	00 00       	bra	@r0		
    75f4:	44 00       	rrcm.a	#1,	r4	
    75f6:	17 00       	mova	#0x00000,r7	
    75f8:	2a 00 00 00 	mova	&0x00000,r10	
    75fc:	00 00       	bra	@r0		
    75fe:	00 00       	bra	@r0		
    7600:	44 00       	rrcm.a	#1,	r4	
    7602:	18 00       	mova	#0x00000,r8	
    7604:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x07606
    7608:	00 00       	bra	@r0		
    760a:	00 00       	bra	@r0		
    760c:	44 00       	rrcm.a	#1,	r4	
    760e:	19 00       	mova	#0x00000,r9	
    7610:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x07612
    7614:	00 00       	bra	@r0		
    7616:	00 00       	bra	@r0		
    7618:	44 00       	rrcm.a	#1,	r4	
    761a:	1a 00       	mova	#0x00000,r10	
    761c:	40 00       	rrcm.a	#1,	r0	
    761e:	00 00       	bra	@r0		
    7620:	00 00       	bra	@r0		
    7622:	00 00       	bra	@r0		
    7624:	44 00       	rrcm.a	#1,	r4	
    7626:	1b 00       	mova	#0x00000,r11	
    7628:	44 00       	rrcm.a	#1,	r4	
    762a:	00 00       	bra	@r0		
    762c:	00 00       	bra	@r0		
    762e:	00 00       	bra	@r0		
    7630:	44 00       	rrcm.a	#1,	r4	
    7632:	1c 00       	mova	#0x00000,r12	
    7634:	48 00       	rrcm.a	#1,	r8	
    7636:	00 00       	bra	@r0		
    7638:	00 00       	bra	@r0		
    763a:	00 00       	bra	@r0		
    763c:	44 00       	rrcm.a	#1,	r4	
    763e:	1d 00       	mova	#0x00000,r13	
    7640:	4e 00       	rrcm.a	#1,	r14	
    7642:	00 00       	bra	@r0		
    7644:	00 00       	bra	@r0		
    7646:	00 00       	bra	@r0		
    7648:	44 00       	rrcm.a	#1,	r4	
    764a:	16 00       	mova	#0x00000,r6	
    764c:	94 00 00 00 	cmpa	#0x00000,r4	
    7650:	00 00       	bra	@r0		
    7652:	00 00       	bra	@r0		
    7654:	44 00       	rrcm.a	#1,	r4	
    7656:	1f 00       	mova	#0x00000,r15	
    7658:	9c 00 00 00 	cmpa	#0x00000,r12	
    765c:	00 00       	bra	@r0		
    765e:	00 00       	bra	@r0		
    7660:	44 00       	rrcm.a	#1,	r4	
    7662:	21 00 b8 00 	mova	&0x000b8,r1	
    7666:	00 00       	bra	@r0		
    7668:	e1 17       	popm	#15,	r15	
    766a:	00 00       	bra	@r0		
    766c:	40 00       	rrcm.a	#1,	r0	
    766e:	11 00       	mova	#0x00000,r1	
    7670:	08 00       	mova	@r0,	r8	
    7672:	00 00       	bra	@r0		
    7674:	86 4a 00 00 	mov	r10,	0(r6)	;0x0000(r6)
    7678:	40 00       	rrcm.a	#1,	r0	
    767a:	12 00       	mova	#0x00000,r2	
    767c:	0f 00       	mova	@r0,	r15	
    767e:	00 00       	bra	@r0		
    7680:	8f 4a 00 00 	mov	r10,	0(r15)	;0x0000(r15)
    7684:	40 00       	rrcm.a	#1,	r0	
    7686:	13 00       	.word	0x0013;	????	Illegal as address instr
    7688:	0a 00       	mova	@r0,	r10	
    768a:	00 00       	bra	@r0		
    768c:	00 00       	bra	@r0		
    768e:	00 00       	bra	@r0		
    7690:	c0 00       	bra	r0		
    7692:	00 00       	bra	@r0		
    7694:	0c 00       	mova	@r0,	r12	
    7696:	00 00       	bra	@r0		
    7698:	00 00       	bra	@r0		
    769a:	00 00       	bra	@r0		
    769c:	e0 00       	adda	r0,	r0	
    769e:	00 00       	bra	@r0		
    76a0:	b8 00 00 00 	suba	#0x00000,r8	
    76a4:	00 00       	bra	@r0		
    76a6:	00 00       	bra	@r0		
    76a8:	24 00 00 00 	mova	&0x00000,r4	
    76ac:	c4 00       	mova	r0,	r4	
    76ae:	00 00       	bra	@r0		
    76b0:	9d 4a 00 00 	mov	0(r10),	36(r13)	;0x0000(r10), 0x0024(r13)
    76b4:	24 00 
    76b6:	23 00       	.word	0x0023;	????	Illegal as address instr
    76b8:	fa 53 00 00 	add.b	#-1,	0(r10)	;r3 As==11, 0x0000(r10)
    76bc:	00 00       	bra	@r0		
    76be:	00 00       	bra	@r0		
    76c0:	44 00       	rrcm.a	#1,	r4	
    76c2:	23 00       	.word	0x0023;	????	Illegal as address instr
	...
    76cc:	44 00       	rrcm.a	#1,	r4	
    76ce:	25 00 04 00 	mova	&0x00004,r5	
    76d2:	00 00       	bra	@r0		
    76d4:	00 00       	bra	@r0		
    76d6:	00 00       	bra	@r0		
    76d8:	44 00       	rrcm.a	#1,	r4	
    76da:	26 00 0c 00 	mova	&0x0000c,r6	
    76de:	00 00       	bra	@r0		
    76e0:	00 00       	bra	@r0		
    76e2:	00 00       	bra	@r0		
    76e4:	44 00       	rrcm.a	#1,	r4	
    76e6:	27 00 22 00 	mova	&0x00022,r7	
    76ea:	00 00       	bra	@r0		
    76ec:	00 00       	bra	@r0		
    76ee:	00 00       	bra	@r0		
    76f0:	44 00       	rrcm.a	#1,	r4	
    76f2:	28 00 26 00 	mova	&0x00026,r8	
    76f6:	00 00       	bra	@r0		
    76f8:	00 00       	bra	@r0		
    76fa:	00 00       	bra	@r0		
    76fc:	44 00       	rrcm.a	#1,	r4	
    76fe:	29 00 2a 00 	mova	&0x0002a,r9	
    7702:	00 00       	bra	@r0		
    7704:	00 00       	bra	@r0		
    7706:	00 00       	bra	@r0		
    7708:	44 00       	rrcm.a	#1,	r4	
    770a:	2a 00 2e 00 	mova	&0x0002e,r10	
    770e:	00 00       	bra	@r0		
    7710:	00 00       	bra	@r0		
    7712:	00 00       	bra	@r0		
    7714:	44 00       	rrcm.a	#1,	r4	
    7716:	2b 00 32 00 	mova	&0x00032,r11	
    771a:	00 00       	bra	@r0		
    771c:	00 00       	bra	@r0		
    771e:	00 00       	bra	@r0		
    7720:	44 00       	rrcm.a	#1,	r4	
    7722:	2c 00 38 00 	mova	&0x00038,r12	
    7726:	00 00       	bra	@r0		
    7728:	00 00       	bra	@r0		
    772a:	00 00       	bra	@r0		
    772c:	44 00       	rrcm.a	#1,	r4	
    772e:	2f 00 4e 00 	mova	&0x0004e,r15	
    7732:	00 00       	bra	@r0		
    7734:	00 00       	bra	@r0		
    7736:	00 00       	bra	@r0		
    7738:	44 00       	rrcm.a	#1,	r4	
    773a:	25 00 58 00 	mova	&0x00058,r5	
    773e:	00 00       	bra	@r0		
    7740:	00 00       	bra	@r0		
    7742:	00 00       	bra	@r0		
    7744:	44 00       	rrcm.a	#1,	r4	
    7746:	32 00 5e 00 	mova	0x005e,	r2	;PC rel. 0x077a6
    774a:	00 00       	bra	@r0		
    774c:	be 17       	popm	#12,	r9	
    774e:	00 00       	bra	@r0		
    7750:	40 00       	rrcm.a	#1,	r0	
    7752:	24 00 0d 00 	mova	&0x0000d,r4	
    7756:	00 00       	bra	@r0		
    7758:	00 00       	bra	@r0		
    775a:	00 00       	bra	@r0		
    775c:	c0 00       	bra	r0		
    775e:	00 00       	bra	@r0		
    7760:	04 00       	mova	@r0,	r4	
    7762:	00 00       	bra	@r0		
    7764:	00 00       	bra	@r0		
    7766:	00 00       	bra	@r0		
    7768:	e0 00       	adda	r0,	r0	
    776a:	00 00       	bra	@r0		
    776c:	5e 00       	rrcm	#1,	r14	
    776e:	00 00       	bra	@r0		
    7770:	00 00       	bra	@r0		
    7772:	00 00       	bra	@r0		
    7774:	24 00 00 00 	mova	&0x00000,r4	
    7778:	64 00 00 00 	mova	r0,	&0x40000
    777c:	b8 4a 00 00 	mov	@r10+,	0(r8)	;0x0000(r8)
    7780:	24 00 34 00 	mova	&0x00034,r4	
    7784:	5e 54 00 00 	add.b	0(r4),	r14	;0x0000(r4)
    7788:	7d 4a       	mov.b	@r10+,	r13	
    778a:	00 00       	bra	@r0		
    778c:	40 00       	rrcm.a	#1,	r0	
    778e:	34 00 0d 00 	mova	0x000d,	r4	;PC rel. 0x0779d
    7792:	00 00       	bra	@r0		
    7794:	00 00       	bra	@r0		
    7796:	00 00       	bra	@r0		
    7798:	44 00       	rrcm.a	#1,	r4	
    779a:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0779c
    779e:	00 00       	bra	@r0		
    77a0:	00 00       	bra	@r0		
    77a2:	00 00       	bra	@r0		
    77a4:	44 00       	rrcm.a	#1,	r4	
    77a6:	35 00 02 00 	mova	0x0002,	r5	;PC rel. 0x077aa
    77aa:	00 00       	bra	@r0		
    77ac:	00 00       	bra	@r0		
    77ae:	00 00       	bra	@r0		
    77b0:	44 00       	rrcm.a	#1,	r4	
    77b2:	36 00 18 00 	mova	0x0018,	r6	;PC rel. 0x077cc
    77b6:	00 00       	bra	@r0		
    77b8:	00 00       	bra	@r0		
    77ba:	00 00       	bra	@r0		
    77bc:	44 00       	rrcm.a	#1,	r4	
    77be:	37 00 1c 00 	mova	0x001c,	r7	;PC rel. 0x077dc
    77c2:	00 00       	bra	@r0		
    77c4:	00 00       	bra	@r0		
    77c6:	00 00       	bra	@r0		
    77c8:	44 00       	rrcm.a	#1,	r4	
    77ca:	38 00 20 00 	mova	0x0020,	r8	;PC rel. 0x077ec
    77ce:	00 00       	bra	@r0		
    77d0:	00 00       	bra	@r0		
    77d2:	00 00       	bra	@r0		
    77d4:	44 00       	rrcm.a	#1,	r4	
    77d6:	39 00 24 00 	mova	0x0024,	r9	;PC rel. 0x077fc
    77da:	00 00       	bra	@r0		
    77dc:	00 00       	bra	@r0		
    77de:	00 00       	bra	@r0		
    77e0:	44 00       	rrcm.a	#1,	r4	
    77e2:	3a 00 28 00 	mova	0x0028,	r10	;PC rel. 0x0780c
    77e6:	00 00       	bra	@r0		
    77e8:	00 00       	bra	@r0		
    77ea:	00 00       	bra	@r0		
    77ec:	44 00       	rrcm.a	#1,	r4	
    77ee:	3b 00 2e 00 	mova	0x002e,	r11	;PC rel. 0x0781e
    77f2:	00 00       	bra	@r0		
    77f4:	00 00       	bra	@r0		
    77f6:	00 00       	bra	@r0		
    77f8:	44 00       	rrcm.a	#1,	r4	
    77fa:	40 00       	rrcm.a	#1,	r0	
    77fc:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x077fe
    7800:	00 00       	bra	@r0		
    7802:	00 00       	bra	@r0		
    7804:	44 00       	rrcm.a	#1,	r4	
    7806:	3e 00 3e 00 	mova	0x003e,	r14	;PC rel. 0x07846
    780a:	00 00       	bra	@r0		
    780c:	00 00       	bra	@r0		
    780e:	00 00       	bra	@r0		
    7810:	44 00       	rrcm.a	#1,	r4	
    7812:	40 00       	rrcm.a	#1,	r0	
    7814:	44 00       	rrcm.a	#1,	r4	
    7816:	00 00       	bra	@r0		
    7818:	00 00       	bra	@r0		
    781a:	00 00       	bra	@r0		
    781c:	24 00 00 00 	mova	&0x00000,r4	
    7820:	46 00       	rrcm.a	#1,	r6	
    7822:	00 00       	bra	@r0		
    7824:	49 34       	jge	$+148    	;abs 0x78b8
    7826:	00 00       	bra	@r0		
    7828:	20 00 12 00 	bra	&0x00012	
    782c:	00 00       	bra	@r0		
    782e:	00 00       	bra	@r0		
    7830:	54 34       	jge	$+170    	;abs 0x78da
    7832:	00 00       	bra	@r0		
    7834:	20 00 14 00 	bra	&0x00014	
    7838:	00 00       	bra	@r0		
    783a:	00 00       	bra	@r0		
    783c:	60 34       	jge	$+194    	;abs 0x78fe
    783e:	00 00       	bra	@r0		
    7840:	20 00 16 00 	bra	&0x00016	
    7844:	00 00       	bra	@r0		
    7846:	00 00       	bra	@r0		
    7848:	6b 34       	jge	$+216    	;abs 0x7920
    784a:	00 00       	bra	@r0		
    784c:	20 00 18 00 	bra	&0x00018	
    7850:	00 00       	bra	@r0		
    7852:	00 00       	bra	@r0		
    7854:	77 34       	jge	$+240    	;abs 0x7944
    7856:	00 00       	bra	@r0		
    7858:	20 00 1a 00 	bra	&0x0001a	
    785c:	00 00       	bra	@r0		
    785e:	00 00       	bra	@r0		
    7860:	82 34       	jge	$+262    	;abs 0x7966
    7862:	00 00       	bra	@r0		
    7864:	20 00 1c 00 	bra	&0x0001c	
    7868:	00 00       	bra	@r0		
    786a:	00 00       	bra	@r0		
    786c:	8f 34       	jge	$+288    	;abs 0x798c
    786e:	00 00       	bra	@r0		
    7870:	20 00 1e 00 	bra	&0x0001e	
    7874:	00 00       	bra	@r0		
    7876:	00 00       	bra	@r0		
    7878:	9c 34       	jge	$+314    	;abs 0x79b2
    787a:	00 00       	bra	@r0		
    787c:	20 00 20 00 	bra	&0x00020	
    7880:	00 00       	bra	@r0		
    7882:	00 00       	bra	@r0		
    7884:	aa 34       	jge	$+342    	;abs 0x79da
    7886:	00 00       	bra	@r0		
    7888:	20 00 88 00 	bra	&0x00088	
    788c:	00 00       	bra	@r0		
    788e:	00 00       	bra	@r0		
    7890:	b7 34       	jge	$+368    	;abs 0x7a00
    7892:	00 00       	bra	@r0		
    7894:	20 00 8c 00 	bra	&0x0008c	
    7898:	00 00       	bra	@r0		
    789a:	00 00       	bra	@r0		
    789c:	c4 34       	jge	$+394    	;abs 0x7a26
    789e:	00 00       	bra	@r0		
    78a0:	20 00 90 00 	bra	&0x00090	
    78a4:	00 00       	bra	@r0		
    78a6:	00 00       	bra	@r0		
    78a8:	d1 34       	jge	$+420    	;abs 0x7a4c
    78aa:	00 00       	bra	@r0		
    78ac:	20 00 94 00 	bra	&0x00094	
    78b0:	00 00       	bra	@r0		
    78b2:	00 00       	bra	@r0		
    78b4:	de 34       	jge	$+446    	;abs 0x7a72
    78b6:	00 00       	bra	@r0		
    78b8:	20 00 98 00 	bra	&0x00098	
    78bc:	00 00       	bra	@r0		
    78be:	00 00       	bra	@r0		
    78c0:	eb 34       	jge	$+472    	;abs 0x7a98
    78c2:	00 00       	bra	@r0		
    78c4:	20 00 9c 00 	bra	&0x0009c	
    78c8:	00 00       	bra	@r0		
    78ca:	00 00       	bra	@r0		
    78cc:	f8 34       	jge	$+498    	;abs 0x7abe
    78ce:	00 00       	bra	@r0		
    78d0:	20 00 7a 00 	bra	&0x0007a	
    78d4:	00 00       	bra	@r0		
    78d6:	00 00       	bra	@r0		
    78d8:	0c 35       	jge	$+538    	;abs 0x7af2
    78da:	00 00       	bra	@r0		
    78dc:	20 00 7c 00 	bra	&0x0007c	
    78e0:	00 00       	bra	@r0		
    78e2:	00 00       	bra	@r0		
    78e4:	19 35       	jge	$+564    	;abs 0x7b18
    78e6:	00 00       	bra	@r0		
    78e8:	20 00 7e 00 	bra	&0x0007e	
    78ec:	00 00       	bra	@r0		
    78ee:	00 00       	bra	@r0		
    78f0:	26 35       	jge	$+590    	;abs 0x7b3e
    78f2:	00 00       	bra	@r0		
    78f4:	20 00 80 00 	bra	&0x00080	
    78f8:	00 00       	bra	@r0		
    78fa:	00 00       	bra	@r0		
    78fc:	33 35       	jge	$+616    	;abs 0x7b64
    78fe:	00 00       	bra	@r0		
    7900:	20 00 82 00 	bra	&0x00082	
    7904:	00 00       	bra	@r0		
    7906:	00 00       	bra	@r0		
    7908:	40 35       	jge	$+642    	;abs 0x7b8a
    790a:	00 00       	bra	@r0		
    790c:	20 00 84 00 	bra	&0x00084	
    7910:	00 00       	bra	@r0		
    7912:	00 00       	bra	@r0		
    7914:	4c 35       	jge	$+666    	;abs 0x7bae
    7916:	00 00       	bra	@r0		
    7918:	20 00 86 00 	bra	&0x00086	
    791c:	00 00       	bra	@r0		
    791e:	00 00       	bra	@r0		
    7920:	59 35       	jge	$+692    	;abs 0x7bd4
    7922:	00 00       	bra	@r0		
    7924:	20 00 89 00 	bra	&0x00089	
    7928:	00 00       	bra	@r0		
    792a:	00 00       	bra	@r0		
    792c:	66 35       	jge	$+718    	;abs 0x7bfa
    792e:	00 00       	bra	@r0		
    7930:	20 00 8f 00 	bra	&0x0008f	
    7934:	00 00       	bra	@r0		
    7936:	00 00       	bra	@r0		
    7938:	72 35       	jge	$+742    	;abs 0x7c1e
    793a:	00 00       	bra	@r0		
    793c:	20 00 91 00 	bra	&0x00091	
    7940:	00 00       	bra	@r0		
    7942:	00 00       	bra	@r0		
    7944:	7f 35       	jge	$+768    	;abs 0x7c44
    7946:	00 00       	bra	@r0		
    7948:	20 00 93 00 	bra	&0x00093	
    794c:	00 00       	bra	@r0		
    794e:	00 00       	bra	@r0		
    7950:	8c 35       	jge	$+794    	;abs 0x7c6a
    7952:	00 00       	bra	@r0		
    7954:	20 00 95 00 	bra	&0x00095	
    7958:	00 00       	bra	@r0		
    795a:	00 00       	bra	@r0		
    795c:	99 35       	jge	$+820    	;abs 0x7c90
    795e:	00 00       	bra	@r0		
    7960:	20 00 97 00 	bra	&0x00097	
    7964:	00 00       	bra	@r0		
    7966:	00 00       	bra	@r0		
    7968:	a6 35       	jge	$+846    	;abs 0x7cb6
    796a:	00 00       	bra	@r0		
    796c:	20 00 99 00 	bra	&0x00099	
    7970:	00 00       	bra	@r0		
    7972:	00 00       	bra	@r0		
    7974:	b2 35       	jge	$+870    	;abs 0x7cda
    7976:	00 00       	bra	@r0		
    7978:	20 00 9b 00 	bra	&0x0009b	
    797c:	00 00       	bra	@r0		
    797e:	00 00       	bra	@r0		
    7980:	bf 35       	jge	$+896    	;abs 0x7d00
    7982:	00 00       	bra	@r0		
    7984:	20 00 9e 00 	bra	&0x0009e	
    7988:	00 00       	bra	@r0		
    798a:	00 00       	bra	@r0		
    798c:	cc 35       	jge	$+922    	;abs 0x7d26
    798e:	00 00       	bra	@r0		
    7990:	20 00 a4 00 	bra	&0x000a4	
    7994:	00 00       	bra	@r0		
    7996:	00 00       	bra	@r0		
    7998:	d8 35       	jge	$+946    	;abs 0x7d4a
    799a:	00 00       	bra	@r0		
    799c:	20 00 a6 00 	bra	&0x000a6	
    79a0:	00 00       	bra	@r0		
    79a2:	00 00       	bra	@r0		
    79a4:	e5 35       	jge	$+972    	;abs 0x7d70
    79a6:	00 00       	bra	@r0		
    79a8:	20 00 a8 00 	bra	&0x000a8	
    79ac:	00 00       	bra	@r0		
    79ae:	00 00       	bra	@r0		
    79b0:	f2 35       	jge	$+998    	;abs 0x7d96
    79b2:	00 00       	bra	@r0		
    79b4:	20 00 aa 00 	bra	&0x000aa	
    79b8:	00 00       	bra	@r0		
    79ba:	00 00       	bra	@r0		
    79bc:	ff 35       	jge	$+1024   	;abs 0x7dbc
    79be:	00 00       	bra	@r0		
    79c0:	20 00 ad 00 	bra	&0x000ad	
    79c4:	00 00       	bra	@r0		
    79c6:	00 00       	bra	@r0		
    79c8:	0c 36       	jge	$-998    	;abs 0x75e2
    79ca:	00 00       	bra	@r0		
    79cc:	20 00 b3 00 	bra	&0x000b3	
    79d0:	00 00       	bra	@r0		
    79d2:	00 00       	bra	@r0		
    79d4:	18 36       	jge	$-974    	;abs 0x7606
    79d6:	00 00       	bra	@r0		
    79d8:	20 00 b5 00 	bra	&0x000b5	
    79dc:	00 00       	bra	@r0		
    79de:	00 00       	bra	@r0		
    79e0:	25 36       	jge	$-948    	;abs 0x762c
    79e2:	00 00       	bra	@r0		
    79e4:	20 00 b7 00 	bra	&0x000b7	
    79e8:	00 00       	bra	@r0		
    79ea:	00 00       	bra	@r0		
    79ec:	32 36       	jge	$-922    	;abs 0x7652
    79ee:	00 00       	bra	@r0		
    79f0:	20 00 b9 00 	bra	&0x000b9	
    79f4:	00 00       	bra	@r0		
    79f6:	00 00       	bra	@r0		
    79f8:	3f 36       	jge	$-896    	;abs 0x7678
    79fa:	00 00       	bra	@r0		
    79fc:	20 00 bc 00 	bra	&0x000bc	
    7a00:	00 00       	bra	@r0		
    7a02:	00 00       	bra	@r0		
    7a04:	4c 36       	jge	$-870    	;abs 0x769e
    7a06:	00 00       	bra	@r0		
    7a08:	20 00 c2 00 	bra	&0x000c2	
    7a0c:	00 00       	bra	@r0		
    7a0e:	00 00       	bra	@r0		
    7a10:	58 36       	jge	$-846    	;abs 0x76c2
    7a12:	00 00       	bra	@r0		
    7a14:	20 00 c4 00 	bra	&0x000c4	
    7a18:	00 00       	bra	@r0		
    7a1a:	00 00       	bra	@r0		
    7a1c:	65 36       	jge	$-820    	;abs 0x76e8
    7a1e:	00 00       	bra	@r0		
    7a20:	20 00 c6 00 	bra	&0x000c6	
    7a24:	00 00       	bra	@r0		
    7a26:	00 00       	bra	@r0		
    7a28:	72 36       	jge	$-794    	;abs 0x770e
    7a2a:	00 00       	bra	@r0		
    7a2c:	20 00 c8 00 	bra	&0x000c8	
    7a30:	00 00       	bra	@r0		
    7a32:	00 00       	bra	@r0		
    7a34:	7f 36       	jge	$-768    	;abs 0x7734
    7a36:	00 00       	bra	@r0		
    7a38:	20 00 cb 00 	bra	&0x000cb	
    7a3c:	00 00       	bra	@r0		
    7a3e:	00 00       	bra	@r0		
    7a40:	8c 36       	jge	$-742    	;abs 0x775a
    7a42:	00 00       	bra	@r0		
    7a44:	20 00 d1 00 	bra	&0x000d1	
    7a48:	00 00       	bra	@r0		
    7a4a:	00 00       	bra	@r0		
    7a4c:	98 36       	jge	$-718    	;abs 0x777e
    7a4e:	00 00       	bra	@r0		
    7a50:	20 00 d3 00 	bra	&0x000d3	
    7a54:	00 00       	bra	@r0		
    7a56:	00 00       	bra	@r0		
    7a58:	a5 36       	jge	$-692    	;abs 0x77a4
    7a5a:	00 00       	bra	@r0		
    7a5c:	20 00 d5 00 	bra	&0x000d5	
    7a60:	00 00       	bra	@r0		
    7a62:	00 00       	bra	@r0		
    7a64:	b2 36       	jge	$-666    	;abs 0x77ca
    7a66:	00 00       	bra	@r0		
    7a68:	20 00 d7 00 	bra	&0x000d7	
    7a6c:	00 00       	bra	@r0		
    7a6e:	00 00       	bra	@r0		
    7a70:	bf 36       	jge	$-640    	;abs 0x77f0
    7a72:	00 00       	bra	@r0		
    7a74:	20 00 da 00 	bra	&0x000da	
    7a78:	00 00       	bra	@r0		
    7a7a:	00 00       	bra	@r0		
    7a7c:	cc 36       	jge	$-614    	;abs 0x7816
    7a7e:	00 00       	bra	@r0		
    7a80:	20 00 e0 00 	bra	&0x000e0	
    7a84:	00 00       	bra	@r0		
    7a86:	00 00       	bra	@r0		
    7a88:	d8 36       	jge	$-590    	;abs 0x783a
    7a8a:	00 00       	bra	@r0		
    7a8c:	20 00 e2 00 	bra	&0x000e2	
    7a90:	00 00       	bra	@r0		
    7a92:	00 00       	bra	@r0		
    7a94:	e5 36       	jge	$-564    	;abs 0x7860
    7a96:	00 00       	bra	@r0		
    7a98:	20 00 e4 00 	bra	&0x000e4	
    7a9c:	00 00       	bra	@r0		
    7a9e:	00 00       	bra	@r0		
    7aa0:	f2 36       	jge	$-538    	;abs 0x7886
    7aa2:	00 00       	bra	@r0		
    7aa4:	20 00 e6 00 	bra	&0x000e6	
    7aa8:	00 00       	bra	@r0		
    7aaa:	00 00       	bra	@r0		
    7aac:	ff 36       	jge	$-512    	;abs 0x78ac
    7aae:	00 00       	bra	@r0		
    7ab0:	20 00 e9 00 	bra	&0x000e9	
    7ab4:	00 00       	bra	@r0		
    7ab6:	00 00       	bra	@r0		
    7ab8:	0c 37       	jge	$-486    	;abs 0x78d2
    7aba:	00 00       	bra	@r0		
    7abc:	20 00 ef 00 	bra	&0x000ef	
    7ac0:	00 00       	bra	@r0		
    7ac2:	00 00       	bra	@r0		
    7ac4:	18 37       	jge	$-462    	;abs 0x78f6
    7ac6:	00 00       	bra	@r0		
    7ac8:	20 00 f1 00 	bra	&0x000f1	
    7acc:	00 00       	bra	@r0		
    7ace:	00 00       	bra	@r0		
    7ad0:	25 37       	jge	$-436    	;abs 0x791c
    7ad2:	00 00       	bra	@r0		
    7ad4:	20 00 f3 00 	bra	&0x000f3	
    7ad8:	00 00       	bra	@r0		
    7ada:	00 00       	bra	@r0		
    7adc:	32 37       	jge	$-410    	;abs 0x7942
    7ade:	00 00       	bra	@r0		
    7ae0:	20 00 f5 00 	bra	&0x000f5	
    7ae4:	00 00       	bra	@r0		
    7ae6:	00 00       	bra	@r0		
    7ae8:	3f 37       	jge	$-384    	;abs 0x7968
    7aea:	00 00       	bra	@r0		
    7aec:	20 00 f8 00 	bra	&0x000f8	
    7af0:	00 00       	bra	@r0		
    7af2:	00 00       	bra	@r0		
    7af4:	4c 37       	jge	$-358    	;abs 0x798e
    7af6:	00 00       	bra	@r0		
    7af8:	20 00 fc 00 	bra	&0x000fc	
    7afc:	00 00       	bra	@r0		
    7afe:	00 00       	bra	@r0		
    7b00:	5c 37       	jge	$-326    	;abs 0x79ba
    7b02:	00 00       	bra	@r0		
    7b04:	20 00 fe 00 	bra	&0x000fe	
    7b08:	00 00       	bra	@r0		
    7b0a:	00 00       	bra	@r0		
    7b0c:	6c 37       	jge	$-294    	;abs 0x79e6
    7b0e:	00 00       	bra	@r0		
    7b10:	20 00 00 01 	bra	&0x00100	
    7b14:	00 00       	bra	@r0		
    7b16:	00 00       	bra	@r0		
    7b18:	7b 37       	jge	$-264    	;abs 0x7a10
    7b1a:	00 00       	bra	@r0		
    7b1c:	20 00 02 01 	bra	&0x00102	
    7b20:	00 00       	bra	@r0		
    7b22:	00 00       	bra	@r0		
    7b24:	8a 37       	jge	$-234    	;abs 0x7a3a
    7b26:	00 00       	bra	@r0		
    7b28:	20 00 04 01 	bra	&0x00104	
    7b2c:	00 00       	bra	@r0		
    7b2e:	00 00       	bra	@r0		
    7b30:	9a 37       	jge	$-202    	;abs 0x7a66
    7b32:	00 00       	bra	@r0		
    7b34:	20 00 06 01 	bra	&0x00106	
    7b38:	00 00       	bra	@r0		
    7b3a:	00 00       	bra	@r0		
    7b3c:	aa 37       	jge	$-170    	;abs 0x7a92
    7b3e:	00 00       	bra	@r0		
    7b40:	20 00 08 01 	bra	&0x00108	
    7b44:	00 00       	bra	@r0		
    7b46:	00 00       	bra	@r0		
    7b48:	bb 37       	jge	$-136    	;abs 0x7ac0
    7b4a:	00 00       	bra	@r0		
    7b4c:	20 00 0a 01 	bra	&0x0010a	
    7b50:	00 00       	bra	@r0		
    7b52:	00 00       	bra	@r0		
    7b54:	cc 37       	jge	$-102    	;abs 0x7aee
    7b56:	00 00       	bra	@r0		
    7b58:	20 00 0c 01 	bra	&0x0010c	
    7b5c:	00 00       	bra	@r0		
    7b5e:	00 00       	bra	@r0		
    7b60:	dd 37       	jge	$-68     	;abs 0x7b1c
    7b62:	00 00       	bra	@r0		
    7b64:	20 00 0e 01 	bra	&0x0010e	
    7b68:	00 00       	bra	@r0		
    7b6a:	00 00       	bra	@r0		
    7b6c:	ef 37       	jge	$-32     	;abs 0x7b4c
    7b6e:	00 00       	bra	@r0		
    7b70:	20 00 10 01 	bra	&0x00110	
    7b74:	00 00       	bra	@r0		
    7b76:	00 00       	bra	@r0		
    7b78:	01 38       	jl	$+4      	;abs 0x7b7c
    7b7a:	00 00       	bra	@r0		
    7b7c:	20 00 13 01 	bra	&0x00113	
    7b80:	00 00       	bra	@r0		
    7b82:	00 00       	bra	@r0		
    7b84:	11 38       	jl	$+36     	;abs 0x7ba8
    7b86:	00 00       	bra	@r0		
    7b88:	20 00 15 01 	bra	&0x00115	
    7b8c:	00 00       	bra	@r0		
    7b8e:	00 00       	bra	@r0		
    7b90:	21 38       	jl	$+68     	;abs 0x7bd4
    7b92:	00 00       	bra	@r0		
    7b94:	20 00 17 01 	bra	&0x00117	
    7b98:	00 00       	bra	@r0		
    7b9a:	00 00       	bra	@r0		
    7b9c:	30 38       	jl	$+98     	;abs 0x7bfe
    7b9e:	00 00       	bra	@r0		
    7ba0:	20 00 19 01 	bra	&0x00119	
    7ba4:	00 00       	bra	@r0		
    7ba6:	00 00       	bra	@r0		
    7ba8:	3f 38       	jl	$+128    	;abs 0x7c28
    7baa:	00 00       	bra	@r0		
    7bac:	20 00 1b 01 	bra	&0x0011b	
    7bb0:	00 00       	bra	@r0		
    7bb2:	00 00       	bra	@r0		
    7bb4:	50 38       	jl	$+162    	;abs 0x7c56
    7bb6:	00 00       	bra	@r0		
    7bb8:	20 00 1d 01 	bra	&0x0011d	
    7bbc:	00 00       	bra	@r0		
    7bbe:	00 00       	bra	@r0		
    7bc0:	60 38       	jl	$+194    	;abs 0x7c82
    7bc2:	00 00       	bra	@r0		
    7bc4:	20 00 1f 01 	bra	&0x0011f	
    7bc8:	00 00       	bra	@r0		
    7bca:	00 00       	bra	@r0		
    7bcc:	71 38       	jl	$+228    	;abs 0x7cb0
    7bce:	00 00       	bra	@r0		
    7bd0:	20 00 21 01 	bra	&0x00121	
    7bd4:	00 00       	bra	@r0		
    7bd6:	00 00       	bra	@r0		
    7bd8:	82 38       	jl	$+262    	;abs 0x7cde
    7bda:	00 00       	bra	@r0		
    7bdc:	20 00 23 01 	bra	&0x00123	
    7be0:	00 00       	bra	@r0		
    7be2:	00 00       	bra	@r0		
    7be4:	93 38       	jl	$+296    	;abs 0x7d0c
    7be6:	00 00       	bra	@r0		
    7be8:	20 00 25 01 	bra	&0x00125	
    7bec:	00 00       	bra	@r0		
    7bee:	00 00       	bra	@r0		
    7bf0:	a4 38       	jl	$+330    	;abs 0x7d3a
    7bf2:	00 00       	bra	@r0		
    7bf4:	20 00 2c 01 	bra	&0x0012c	
    7bf8:	00 00       	bra	@r0		
    7bfa:	00 00       	bra	@r0		
    7bfc:	b4 38       	jl	$+362    	;abs 0x7d66
    7bfe:	00 00       	bra	@r0		
    7c00:	20 00 2e 01 	bra	&0x0012e	
    7c04:	00 00       	bra	@r0		
    7c06:	00 00       	bra	@r0		
    7c08:	c4 38       	jl	$+394    	;abs 0x7d92
    7c0a:	00 00       	bra	@r0		
    7c0c:	20 00 30 01 	bra	&0x00130	
    7c10:	00 00       	bra	@r0		
    7c12:	00 00       	bra	@r0		
    7c14:	d3 38       	jl	$+424    	;abs 0x7dbc
    7c16:	00 00       	bra	@r0		
    7c18:	20 00 32 01 	bra	&0x00132	
    7c1c:	00 00       	bra	@r0		
    7c1e:	00 00       	bra	@r0		
    7c20:	e2 38       	jl	$+454    	;abs 0x7de6
    7c22:	00 00       	bra	@r0		
    7c24:	20 00 34 01 	bra	&0x00134	
    7c28:	00 00       	bra	@r0		
    7c2a:	00 00       	bra	@r0		
    7c2c:	f2 38       	jl	$+486    	;abs 0x7e12
    7c2e:	00 00       	bra	@r0		
    7c30:	20 00 36 01 	bra	&0x00136	
    7c34:	00 00       	bra	@r0		
    7c36:	00 00       	bra	@r0		
    7c38:	02 39       	jl	$+518    	;abs 0x7e3e
    7c3a:	00 00       	bra	@r0		
    7c3c:	20 00 38 01 	bra	&0x00138	
    7c40:	00 00       	bra	@r0		
    7c42:	00 00       	bra	@r0		
    7c44:	13 39       	jl	$+552    	;abs 0x7e6c
    7c46:	00 00       	bra	@r0		
    7c48:	20 00 3a 01 	bra	&0x0013a	
    7c4c:	00 00       	bra	@r0		
    7c4e:	00 00       	bra	@r0		
    7c50:	24 39       	jl	$+586    	;abs 0x7e9a
    7c52:	00 00       	bra	@r0		
    7c54:	20 00 3c 01 	bra	&0x0013c	
    7c58:	00 00       	bra	@r0		
    7c5a:	00 00       	bra	@r0		
    7c5c:	35 39       	jl	$+620    	;abs 0x7ec8
    7c5e:	00 00       	bra	@r0		
    7c60:	20 00 3e 01 	bra	&0x0013e	
    7c64:	00 00       	bra	@r0		
    7c66:	00 00       	bra	@r0		
    7c68:	47 39       	jl	$+656    	;abs 0x7ef8
    7c6a:	00 00       	bra	@r0		
    7c6c:	20 00 40 01 	bra	&0x00140	
    7c70:	00 00       	bra	@r0		
    7c72:	00 00       	bra	@r0		
    7c74:	59 39       	jl	$+692    	;abs 0x7f28
    7c76:	00 00       	bra	@r0		
    7c78:	20 00 43 01 	bra	&0x00143	
    7c7c:	00 00       	bra	@r0		
    7c7e:	00 00       	bra	@r0		
    7c80:	69 39       	jl	$+724    	;abs 0x7f54
    7c82:	00 00       	bra	@r0		
    7c84:	20 00 45 01 	bra	&0x00145	
    7c88:	00 00       	bra	@r0		
    7c8a:	00 00       	bra	@r0		
    7c8c:	79 39       	jl	$+756    	;abs 0x7f80
    7c8e:	00 00       	bra	@r0		
    7c90:	20 00 47 01 	bra	&0x00147	
    7c94:	00 00       	bra	@r0		
    7c96:	00 00       	bra	@r0		
    7c98:	88 39       	jl	$+786    	;abs 0x7faa
    7c9a:	00 00       	bra	@r0		
    7c9c:	20 00 49 01 	bra	&0x00149	
    7ca0:	00 00       	bra	@r0		
    7ca2:	00 00       	bra	@r0		
    7ca4:	97 39       	jl	$+816    	;abs 0x7fd4
    7ca6:	00 00       	bra	@r0		
    7ca8:	20 00 4b 01 	bra	&0x0014b	
    7cac:	00 00       	bra	@r0		
    7cae:	00 00       	bra	@r0		
    7cb0:	a8 39       	jl	$+850    	;abs 0x8002
    7cb2:	00 00       	bra	@r0		
    7cb4:	20 00 4d 01 	bra	&0x0014d	
    7cb8:	00 00       	bra	@r0		
    7cba:	00 00       	bra	@r0		
    7cbc:	b8 39       	jl	$+882    	;abs 0x802e
    7cbe:	00 00       	bra	@r0		
    7cc0:	20 00 4f 01 	bra	&0x0014f	
    7cc4:	00 00       	bra	@r0		
    7cc6:	00 00       	bra	@r0		
    7cc8:	c9 39       	jl	$+916    	;abs 0x805c
    7cca:	00 00       	bra	@r0		
    7ccc:	20 00 51 01 	bra	&0x00151	
    7cd0:	00 00       	bra	@r0		
    7cd2:	00 00       	bra	@r0		
    7cd4:	da 39       	jl	$+950    	;abs 0x808a
    7cd6:	00 00       	bra	@r0		
    7cd8:	20 00 53 01 	bra	&0x00153	
    7cdc:	00 00       	bra	@r0		
    7cde:	00 00       	bra	@r0		
    7ce0:	eb 39       	jl	$+984    	;abs 0x80b8
    7ce2:	00 00       	bra	@r0		
    7ce4:	20 00 55 01 	bra	&0x00155	
    7ce8:	00 00       	bra	@r0		
    7cea:	00 00       	bra	@r0		
    7cec:	fc 39       	jl	$+1018   	;abs 0x80e6
    7cee:	00 00       	bra	@r0		
    7cf0:	20 00 58 01 	bra	&0x00158	
    7cf4:	00 00       	bra	@r0		
    7cf6:	00 00       	bra	@r0		
    7cf8:	09 3a       	jl	$-1004   	;abs 0x790c
    7cfa:	00 00       	bra	@r0		
    7cfc:	20 00 5a 01 	bra	&0x0015a	
    7d00:	00 00       	bra	@r0		
    7d02:	00 00       	bra	@r0		
    7d04:	17 3a       	jl	$-976    	;abs 0x7934
    7d06:	00 00       	bra	@r0		
    7d08:	20 00 1a 00 	bra	&0x0001a	
    7d0c:	00 00       	bra	@r0		
    7d0e:	00 00       	bra	@r0		
    7d10:	24 3a       	jl	$-950    	;abs 0x795a
    7d12:	00 00       	bra	@r0		
    7d14:	20 00 1c 00 	bra	&0x0001c	
    7d18:	00 00       	bra	@r0		
    7d1a:	00 00       	bra	@r0		
    7d1c:	32 3a       	jl	$-922    	;abs 0x7982
    7d1e:	00 00       	bra	@r0		
    7d20:	20 00 1e 00 	bra	&0x0001e	
    7d24:	00 00       	bra	@r0		
    7d26:	00 00       	bra	@r0		
    7d28:	3e 3a       	jl	$-898    	;abs 0x79a6
    7d2a:	00 00       	bra	@r0		
    7d2c:	20 00 21 00 	bra	&0x00021	
    7d30:	00 00       	bra	@r0		
    7d32:	00 00       	bra	@r0		
    7d34:	4e 3a       	jl	$-866    	;abs 0x79d2
    7d36:	00 00       	bra	@r0		
    7d38:	20 00 23 00 	bra	&0x00023	
    7d3c:	00 00       	bra	@r0		
    7d3e:	00 00       	bra	@r0		
    7d40:	5e 3a       	jl	$-834    	;abs 0x79fe
    7d42:	00 00       	bra	@r0		
    7d44:	20 00 25 00 	bra	&0x00025	
    7d48:	00 00       	bra	@r0		
    7d4a:	00 00       	bra	@r0		
    7d4c:	6d 3a       	jl	$-804    	;abs 0x7a28
    7d4e:	00 00       	bra	@r0		
    7d50:	20 00 27 00 	bra	&0x00027	
    7d54:	00 00       	bra	@r0		
    7d56:	00 00       	bra	@r0		
    7d58:	7c 3a       	jl	$-774    	;abs 0x7a52
    7d5a:	00 00       	bra	@r0		
    7d5c:	20 00 47 00 	bra	&0x00047	
    7d60:	00 00       	bra	@r0		
    7d62:	00 00       	bra	@r0		
    7d64:	8c 3a       	jl	$-742    	;abs 0x7a7e
    7d66:	00 00       	bra	@r0		
    7d68:	20 00 49 00 	bra	&0x00049	
    7d6c:	00 00       	bra	@r0		
    7d6e:	00 00       	bra	@r0		
    7d70:	9b 3a       	jl	$-712    	;abs 0x7aa8
    7d72:	00 00       	bra	@r0		
    7d74:	20 00 ac 00 	bra	&0x000ac	
    7d78:	00 00       	bra	@r0		
    7d7a:	00 00       	bra	@r0		
    7d7c:	a9 3a       	jl	$-684    	;abs 0x7ad0
    7d7e:	00 00       	bra	@r0		
    7d80:	20 00 16 00 	bra	&0x00016	
    7d84:	00 00       	bra	@r0		
    7d86:	00 00       	bra	@r0		
    7d88:	b5 3a       	jl	$-660    	;abs 0x7af4
    7d8a:	00 00       	bra	@r0		
    7d8c:	20 00 18 00 	bra	&0x00018	
    7d90:	00 00       	bra	@r0		
    7d92:	00 00       	bra	@r0		
    7d94:	c2 3a       	jl	$-634    	;abs 0x7b1a
    7d96:	00 00       	bra	@r0		
    7d98:	20 00 1a 00 	bra	&0x0001a	
    7d9c:	00 00       	bra	@r0		
    7d9e:	00 00       	bra	@r0		
    7da0:	cd 3a       	jl	$-612    	;abs 0x7b3c
    7da2:	00 00       	bra	@r0		
    7da4:	20 00 1d 00 	bra	&0x0001d	
    7da8:	00 00       	bra	@r0		
    7daa:	00 00       	bra	@r0		
    7dac:	dc 3a       	jl	$-582    	;abs 0x7b66
    7dae:	00 00       	bra	@r0		
    7db0:	20 00 1f 00 	bra	&0x0001f	
    7db4:	00 00       	bra	@r0		
    7db6:	00 00       	bra	@r0		
    7db8:	eb 3a       	jl	$-552    	;abs 0x7b90
    7dba:	00 00       	bra	@r0		
    7dbc:	20 00 21 00 	bra	&0x00021	
    7dc0:	00 00       	bra	@r0		
    7dc2:	00 00       	bra	@r0		
    7dc4:	fa 3a       	jl	$-522    	;abs 0x7bba
    7dc6:	00 00       	bra	@r0		
    7dc8:	20 00 23 00 	bra	&0x00023	
    7dcc:	00 00       	bra	@r0		
    7dce:	00 00       	bra	@r0		
    7dd0:	08 3b       	jl	$-494    	;abs 0x7be2
    7dd2:	00 00       	bra	@r0		
    7dd4:	20 00 25 00 	bra	&0x00025	
    7dd8:	00 00       	bra	@r0		
    7dda:	00 00       	bra	@r0		
    7ddc:	16 3b       	jl	$-466    	;abs 0x7c0a
    7dde:	00 00       	bra	@r0		
    7de0:	20 00 27 00 	bra	&0x00027	
    7de4:	00 00       	bra	@r0		
    7de6:	00 00       	bra	@r0		
    7de8:	24 3b       	jl	$-438    	;abs 0x7c32
    7dea:	00 00       	bra	@r0		
    7dec:	20 00 2c 00 	bra	&0x0002c	
    7df0:	00 00       	bra	@r0		
    7df2:	00 00       	bra	@r0		
    7df4:	33 3b       	jl	$-408    	;abs 0x7c5c
    7df6:	00 00       	bra	@r0		
    7df8:	20 00 2e 00 	bra	&0x0002e	
    7dfc:	00 00       	bra	@r0		
    7dfe:	00 00       	bra	@r0		
    7e00:	42 3b       	jl	$-378    	;abs 0x7c86
    7e02:	00 00       	bra	@r0		
    7e04:	20 00 30 00 	bra	&0x00030	
    7e08:	00 00       	bra	@r0		
    7e0a:	00 00       	bra	@r0		
    7e0c:	51 3b       	jl	$-348    	;abs 0x7cb0
    7e0e:	00 00       	bra	@r0		
    7e10:	20 00 32 00 	bra	&0x00032	
    7e14:	00 00       	bra	@r0		
    7e16:	00 00       	bra	@r0		
    7e18:	60 3b       	jl	$-318    	;abs 0x7cda
    7e1a:	00 00       	bra	@r0		
    7e1c:	20 00 34 00 	bra	&0x00034	
    7e20:	00 00       	bra	@r0		
    7e22:	00 00       	bra	@r0		
    7e24:	6e 3b       	jl	$-290    	;abs 0x7d02
    7e26:	00 00       	bra	@r0		
    7e28:	20 00 36 00 	bra	&0x00036	
    7e2c:	00 00       	bra	@r0		
    7e2e:	00 00       	bra	@r0		
    7e30:	7c 3b       	jl	$-262    	;abs 0x7d2a
    7e32:	00 00       	bra	@r0		
    7e34:	20 00 38 00 	bra	&0x00038	
    7e38:	00 00       	bra	@r0		
    7e3a:	00 00       	bra	@r0		
    7e3c:	8a 3b       	jl	$-234    	;abs 0x7d52
    7e3e:	00 00       	bra	@r0		
    7e40:	20 00 3a 00 	bra	&0x0003a	
    7e44:	00 00       	bra	@r0		
    7e46:	00 00       	bra	@r0		
    7e48:	98 3b       	jl	$-206    	;abs 0x7d7a
    7e4a:	00 00       	bra	@r0		
    7e4c:	20 00 7a 00 	bra	&0x0007a	
    7e50:	00 00       	bra	@r0		
    7e52:	00 00       	bra	@r0		
    7e54:	a7 3b       	jl	$-176    	;abs 0x7da4
    7e56:	00 00       	bra	@r0		
    7e58:	20 00 14 00 	bra	&0x00014	
    7e5c:	00 00       	bra	@r0		
    7e5e:	00 00       	bra	@r0		
    7e60:	b5 3b       	jl	$-148    	;abs 0x7dcc
    7e62:	00 00       	bra	@r0		
    7e64:	20 00 16 00 	bra	&0x00016	
    7e68:	00 00       	bra	@r0		
    7e6a:	00 00       	bra	@r0		
    7e6c:	c4 3b       	jl	$-118    	;abs 0x7df6
    7e6e:	00 00       	bra	@r0		
    7e70:	20 00 18 00 	bra	&0x00018	
    7e74:	00 00       	bra	@r0		
    7e76:	00 00       	bra	@r0		
    7e78:	d3 3b       	jl	$-88     	;abs 0x7e20
    7e7a:	00 00       	bra	@r0		
    7e7c:	20 00 1b 00 	bra	&0x0001b	
    7e80:	00 00       	bra	@r0		
    7e82:	00 00       	bra	@r0		
    7e84:	e2 3b       	jl	$-58     	;abs 0x7e4a
    7e86:	00 00       	bra	@r0		
    7e88:	20 00 14 00 	bra	&0x00014	
    7e8c:	00 00       	bra	@r0		
    7e8e:	00 00       	bra	@r0		
    7e90:	ef 3b       	jl	$-32     	;abs 0x7e70
    7e92:	00 00       	bra	@r0		
    7e94:	20 00 16 00 	bra	&0x00016	
    7e98:	00 00       	bra	@r0		
    7e9a:	00 00       	bra	@r0		
    7e9c:	fc 3b       	jl	$-6      	;abs 0x7e96
    7e9e:	00 00       	bra	@r0		
    7ea0:	20 00 18 00 	bra	&0x00018	
    7ea4:	00 00       	bra	@r0		
    7ea6:	00 00       	bra	@r0		
    7ea8:	09 3c       	jmp	$+20     	;abs 0x7ebc
    7eaa:	00 00       	bra	@r0		
    7eac:	20 00 14 00 	bra	&0x00014	
    7eb0:	00 00       	bra	@r0		
    7eb2:	00 00       	bra	@r0		
    7eb4:	17 3c       	jmp	$+48     	;abs 0x7ee4
    7eb6:	00 00       	bra	@r0		
    7eb8:	20 00 16 00 	bra	&0x00016	
    7ebc:	00 00       	bra	@r0		
    7ebe:	00 00       	bra	@r0		
    7ec0:	25 3c       	jmp	$+76     	;abs 0x7f0c
    7ec2:	00 00       	bra	@r0		
    7ec4:	20 00 18 00 	bra	&0x00018	
    7ec8:	00 00       	bra	@r0		
    7eca:	00 00       	bra	@r0		
    7ecc:	31 3c       	jmp	$+100    	;abs 0x7f30
    7ece:	00 00       	bra	@r0		
    7ed0:	20 00 12 00 	bra	&0x00012	
    7ed4:	00 00       	bra	@r0		
    7ed6:	00 00       	bra	@r0		
    7ed8:	42 3c       	jmp	$+134    	;abs 0x7f5e
    7eda:	00 00       	bra	@r0		
    7edc:	20 00 14 00 	bra	&0x00014	
    7ee0:	00 00       	bra	@r0		
    7ee2:	00 00       	bra	@r0		
    7ee4:	53 3c       	jmp	$+168    	;abs 0x7f8c
    7ee6:	00 00       	bra	@r0		
    7ee8:	20 00 16 00 	bra	&0x00016	
    7eec:	00 00       	bra	@r0		
    7eee:	00 00       	bra	@r0		
    7ef0:	63 3c       	jmp	$+200    	;abs 0x7fb8
    7ef2:	00 00       	bra	@r0		
    7ef4:	20 00 18 00 	bra	&0x00018	
    7ef8:	00 00       	bra	@r0		
    7efa:	00 00       	bra	@r0		
    7efc:	72 3c       	jmp	$+230    	;abs 0x7fe2
    7efe:	00 00       	bra	@r0		
    7f00:	20 00 1a 00 	bra	&0x0001a	
    7f04:	00 00       	bra	@r0		
    7f06:	00 00       	bra	@r0		
    7f08:	81 3c       	jmp	$+260    	;abs 0x800c
    7f0a:	00 00       	bra	@r0		
    7f0c:	20 00 58 00 	bra	&0x00058	
    7f10:	00 00       	bra	@r0		
    7f12:	00 00       	bra	@r0		
    7f14:	8f 3c       	jmp	$+288    	;abs 0x8034
    7f16:	00 00       	bra	@r0		
    7f18:	20 00 64 00 	bra	&0x00064	
    7f1c:	00 00       	bra	@r0		
    7f1e:	00 00       	bra	@r0		
    7f20:	a0 3c       	jmp	$+322    	;abs 0x8062
    7f22:	00 00       	bra	@r0		
    7f24:	20 00 66 00 	bra	&0x00066	
    7f28:	00 00       	bra	@r0		
    7f2a:	00 00       	bra	@r0		
    7f2c:	b1 3c       	jmp	$+356    	;abs 0x8090
    7f2e:	00 00       	bra	@r0		
    7f30:	20 00 68 00 	bra	&0x00068	
    7f34:	00 00       	bra	@r0		
    7f36:	00 00       	bra	@r0		
    7f38:	c2 3c       	jmp	$+390    	;abs 0x80be
    7f3a:	00 00       	bra	@r0		
    7f3c:	20 00 6a 00 	bra	&0x0006a	
    7f40:	00 00       	bra	@r0		
    7f42:	00 00       	bra	@r0		
    7f44:	d3 3c       	jmp	$+424    	;abs 0x80ec
    7f46:	00 00       	bra	@r0		
    7f48:	20 00 6c 00 	bra	&0x0006c	
    7f4c:	00 00       	bra	@r0		
    7f4e:	00 00       	bra	@r0		
    7f50:	e4 3c       	jmp	$+458    	;abs 0x811a
    7f52:	00 00       	bra	@r0		
    7f54:	20 00 6e 00 	bra	&0x0006e	
    7f58:	00 00       	bra	@r0		
    7f5a:	00 00       	bra	@r0		
    7f5c:	f5 3c       	jmp	$+492    	;abs 0x8148
    7f5e:	00 00       	bra	@r0		
    7f60:	20 00 70 00 	bra	&0x00070	
    7f64:	00 00       	bra	@r0		
    7f66:	00 00       	bra	@r0		
    7f68:	06 3d       	jmp	$+526    	;abs 0x8176
    7f6a:	00 00       	bra	@r0		
    7f6c:	20 00 72 00 	bra	&0x00072	
    7f70:	00 00       	bra	@r0		
    7f72:	00 00       	bra	@r0		
    7f74:	17 3d       	jmp	$+560    	;abs 0x81a4
    7f76:	00 00       	bra	@r0		
    7f78:	20 00 74 00 	bra	&0x00074	
    7f7c:	00 00       	bra	@r0		
    7f7e:	00 00       	bra	@r0		
    7f80:	28 3d       	jmp	$+594    	;abs 0x81d2
    7f82:	00 00       	bra	@r0		
    7f84:	20 00 76 00 	bra	&0x00076	
    7f88:	00 00       	bra	@r0		
    7f8a:	00 00       	bra	@r0		
    7f8c:	39 3d       	jmp	$+628    	;abs 0x8200
    7f8e:	00 00       	bra	@r0		
    7f90:	20 00 78 00 	bra	&0x00078	
    7f94:	00 00       	bra	@r0		
    7f96:	00 00       	bra	@r0		
    7f98:	4b 3d       	jmp	$+664    	;abs 0x8230
    7f9a:	00 00       	bra	@r0		
    7f9c:	20 00 7a 00 	bra	&0x0007a	
    7fa0:	00 00       	bra	@r0		
    7fa2:	00 00       	bra	@r0		
    7fa4:	5d 3d       	jmp	$+700    	;abs 0x8260
    7fa6:	00 00       	bra	@r0		
    7fa8:	20 00 7c 00 	bra	&0x0007c	
    7fac:	00 00       	bra	@r0		
    7fae:	00 00       	bra	@r0		
    7fb0:	6f 3d       	jmp	$+736    	;abs 0x8290
    7fb2:	00 00       	bra	@r0		
    7fb4:	20 00 7e 00 	bra	&0x0007e	
    7fb8:	00 00       	bra	@r0		
    7fba:	00 00       	bra	@r0		
    7fbc:	81 3d       	jmp	$+772    	;abs 0x82c0
    7fbe:	00 00       	bra	@r0		
    7fc0:	20 00 80 00 	bra	&0x00080	
    7fc4:	00 00       	bra	@r0		
    7fc6:	00 00       	bra	@r0		
    7fc8:	93 3d       	jmp	$+808    	;abs 0x82f0
    7fca:	00 00       	bra	@r0		
    7fcc:	20 00 82 00 	bra	&0x00082	
    7fd0:	00 00       	bra	@r0		
    7fd2:	00 00       	bra	@r0		
    7fd4:	a5 3d       	jmp	$+844    	;abs 0x8320
    7fd6:	00 00       	bra	@r0		
    7fd8:	20 00 8b 00 	bra	&0x0008b	
    7fdc:	00 00       	bra	@r0		
    7fde:	00 00       	bra	@r0		
    7fe0:	b7 3d       	jmp	$+880    	;abs 0x8350
    7fe2:	00 00       	bra	@r0		
    7fe4:	20 00 8d 00 	bra	&0x0008d	
    7fe8:	00 00       	bra	@r0		
    7fea:	00 00       	bra	@r0		
    7fec:	c9 3d       	jmp	$+916    	;abs 0x8380
    7fee:	00 00       	bra	@r0		
    7ff0:	20 00 8f 00 	bra	&0x0008f	
    7ff4:	00 00       	bra	@r0		
    7ff6:	00 00       	bra	@r0		
    7ff8:	db 3d       	jmp	$+952    	;abs 0x83b0
    7ffa:	00 00       	bra	@r0		
    7ffc:	20 00 91 00 	bra	&0x00091	
    8000:	00 00       	bra	@r0		
    8002:	00 00       	bra	@r0		
    8004:	ed 3d       	jmp	$+988    	;abs 0x83e0
    8006:	00 00       	bra	@r0		
    8008:	20 00 93 00 	bra	&0x00093	
    800c:	00 00       	bra	@r0		
    800e:	00 00       	bra	@r0		
    8010:	ff 3d       	jmp	$+1024   	;abs 0x8410
    8012:	00 00       	bra	@r0		
    8014:	20 00 95 00 	bra	&0x00095	
    8018:	00 00       	bra	@r0		
    801a:	00 00       	bra	@r0		
    801c:	11 3e       	jmp	$-988    	;abs 0x7c40
    801e:	00 00       	bra	@r0		
    8020:	20 00 97 00 	bra	&0x00097	
    8024:	00 00       	bra	@r0		
    8026:	00 00       	bra	@r0		
    8028:	23 3e       	jmp	$-952    	;abs 0x7c70
    802a:	00 00       	bra	@r0		
    802c:	20 00 99 00 	bra	&0x00099	
    8030:	00 00       	bra	@r0		
    8032:	00 00       	bra	@r0		
    8034:	35 3e       	jmp	$-916    	;abs 0x7ca0
    8036:	00 00       	bra	@r0		
    8038:	20 00 9b 00 	bra	&0x0009b	
    803c:	00 00       	bra	@r0		
    803e:	00 00       	bra	@r0		
    8040:	47 3e       	jmp	$-880    	;abs 0x7cd0
    8042:	00 00       	bra	@r0		
    8044:	20 00 9d 00 	bra	&0x0009d	
    8048:	00 00       	bra	@r0		
    804a:	00 00       	bra	@r0		
    804c:	59 3e       	jmp	$-844    	;abs 0x7d00
    804e:	00 00       	bra	@r0		
    8050:	20 00 9f 00 	bra	&0x0009f	
    8054:	00 00       	bra	@r0		
    8056:	00 00       	bra	@r0		
    8058:	6c 3e       	jmp	$-806    	;abs 0x7d32
    805a:	00 00       	bra	@r0		
    805c:	20 00 a1 00 	bra	&0x000a1	
    8060:	00 00       	bra	@r0		
    8062:	00 00       	bra	@r0		
    8064:	7f 3e       	jmp	$-768    	;abs 0x7d64
    8066:	00 00       	bra	@r0		
    8068:	20 00 a3 00 	bra	&0x000a3	
    806c:	00 00       	bra	@r0		
    806e:	00 00       	bra	@r0		
    8070:	92 3e       	jmp	$-730    	;abs 0x7d96
    8072:	00 00       	bra	@r0		
    8074:	20 00 a5 00 	bra	&0x000a5	
    8078:	00 00       	bra	@r0		
    807a:	00 00       	bra	@r0		
    807c:	a5 3e       	jmp	$-692    	;abs 0x7dc8
    807e:	00 00       	bra	@r0		
    8080:	20 00 a7 00 	bra	&0x000a7	
    8084:	00 00       	bra	@r0		
    8086:	00 00       	bra	@r0		
    8088:	b8 3e       	jmp	$-654    	;abs 0x7dfa
    808a:	00 00       	bra	@r0		
    808c:	20 00 a9 00 	bra	&0x000a9	
    8090:	00 00       	bra	@r0		
    8092:	00 00       	bra	@r0		
    8094:	cb 3e       	jmp	$-616    	;abs 0x7e2c
    8096:	00 00       	bra	@r0		
    8098:	20 00 12 00 	bra	&0x00012	
    809c:	00 00       	bra	@r0		
    809e:	00 00       	bra	@r0		
    80a0:	dd 3e       	jmp	$-580    	;abs 0x7e5c
    80a2:	00 00       	bra	@r0		
    80a4:	20 00 14 00 	bra	&0x00014	
    80a8:	00 00       	bra	@r0		
    80aa:	00 00       	bra	@r0		
    80ac:	ef 3e       	jmp	$-544    	;abs 0x7e8c
    80ae:	00 00       	bra	@r0		
    80b0:	20 00 16 00 	bra	&0x00016	
    80b4:	00 00       	bra	@r0		
    80b6:	00 00       	bra	@r0		
    80b8:	01 3f       	jmp	$-508    	;abs 0x7ebc
    80ba:	00 00       	bra	@r0		
    80bc:	20 00 18 00 	bra	&0x00018	
    80c0:	00 00       	bra	@r0		
    80c2:	00 00       	bra	@r0		
    80c4:	13 3f       	jmp	$-472    	;abs 0x7eec
    80c6:	00 00       	bra	@r0		
    80c8:	20 00 18 00 	bra	&0x00018	
    80cc:	00 00       	bra	@r0		
    80ce:	00 00       	bra	@r0		
    80d0:	22 3f       	jmp	$-442    	;abs 0x7f16
    80d2:	00 00       	bra	@r0		
    80d4:	20 00 1a 00 	bra	&0x0001a	
    80d8:	00 00       	bra	@r0		
    80da:	00 00       	bra	@r0		
    80dc:	31 3f       	jmp	$-412    	;abs 0x7f40
    80de:	00 00       	bra	@r0		
    80e0:	20 00 1d 00 	bra	&0x0001d	
    80e4:	00 00       	bra	@r0		
    80e6:	00 00       	bra	@r0		
    80e8:	3e 3f       	jmp	$-386    	;abs 0x7f66
    80ea:	00 00       	bra	@r0		
    80ec:	20 00 3f 00 	bra	&0x0003f	
    80f0:	00 00       	bra	@r0		
    80f2:	00 00       	bra	@r0		
    80f4:	4d 3f       	jmp	$-356    	;abs 0x7f90
    80f6:	00 00       	bra	@r0		
    80f8:	20 00 41 00 	bra	&0x00041	
    80fc:	00 00       	bra	@r0		
    80fe:	00 00       	bra	@r0		
    8100:	62 3f       	jmp	$-314    	;abs 0x7fc6
    8102:	00 00       	bra	@r0		
    8104:	20 00 43 00 	bra	&0x00043	
    8108:	00 00       	bra	@r0		
    810a:	00 00       	bra	@r0		
    810c:	71 3f       	jmp	$-284    	;abs 0x7ff0
    810e:	00 00       	bra	@r0		
    8110:	20 00 45 00 	bra	&0x00045	
    8114:	00 00       	bra	@r0		
    8116:	00 00       	bra	@r0		
    8118:	7f 3f       	jmp	$-256    	;abs 0x8018
    811a:	00 00       	bra	@r0		
    811c:	20 00 47 00 	bra	&0x00047	
    8120:	00 00       	bra	@r0		
    8122:	00 00       	bra	@r0		
    8124:	8e 3f       	jmp	$-226    	;abs 0x8042
    8126:	00 00       	bra	@r0		
    8128:	20 00 49 00 	bra	&0x00049	
    812c:	00 00       	bra	@r0		
    812e:	00 00       	bra	@r0		
    8130:	9c 3f       	jmp	$-198    	;abs 0x806a
    8132:	00 00       	bra	@r0		
    8134:	20 00 4c 00 	bra	&0x0004c	
    8138:	00 00       	bra	@r0		
    813a:	00 00       	bra	@r0		
    813c:	ab 3f       	jmp	$-168    	;abs 0x8094
    813e:	00 00       	bra	@r0		
    8140:	20 00 4e 00 	bra	&0x0004e	
    8144:	00 00       	bra	@r0		
    8146:	00 00       	bra	@r0		
    8148:	b9 3f       	jmp	$-140    	;abs 0x80bc
    814a:	00 00       	bra	@r0		
    814c:	20 00 50 00 	bra	&0x00050	
    8150:	00 00       	bra	@r0		
    8152:	00 00       	bra	@r0		
    8154:	c8 3f       	jmp	$-110    	;abs 0x80e6
    8156:	00 00       	bra	@r0		
    8158:	20 00 52 00 	bra	&0x00052	
    815c:	00 00       	bra	@r0		
    815e:	00 00       	bra	@r0		
    8160:	d6 3f       	jmp	$-82     	;abs 0x810e
    8162:	00 00       	bra	@r0		
    8164:	20 00 54 00 	bra	&0x00054	
    8168:	00 00       	bra	@r0		
    816a:	00 00       	bra	@r0		
    816c:	e5 3f       	jmp	$-52     	;abs 0x8138
    816e:	00 00       	bra	@r0		
    8170:	20 00 56 00 	bra	&0x00056	
    8174:	00 00       	bra	@r0		
    8176:	00 00       	bra	@r0		
    8178:	f3 3f       	jmp	$-24     	;abs 0x8160
    817a:	00 00       	bra	@r0		
    817c:	20 00 59 00 	bra	&0x00059	
    8180:	00 00       	bra	@r0		
    8182:	00 00       	bra	@r0		
    8184:	02 40       	mov	r0,	r2	
    8186:	00 00       	bra	@r0		
    8188:	20 00 5b 00 	bra	&0x0005b	
    818c:	00 00       	bra	@r0		
    818e:	00 00       	bra	@r0		
    8190:	10 40 00 00 	br	0x0000		;PC rel. 0x08194
    8194:	20 00 5d 00 	bra	&0x0005d	
    8198:	00 00       	bra	@r0		
    819a:	00 00       	bra	@r0		
    819c:	1f 40 00 00 	mov	0x0000,	r15	;PC rel. 0x081a0
    81a0:	20 00 5f 00 	bra	&0x0005f	
    81a4:	00 00       	bra	@r0		
    81a6:	00 00       	bra	@r0		
    81a8:	2d 40       	mov	@r0,	r13	
    81aa:	00 00       	bra	@r0		
    81ac:	20 00 61 00 	bra	&0x00061	
    81b0:	00 00       	bra	@r0		
    81b2:	00 00       	bra	@r0		
    81b4:	3c 40 00 00 	mov	#0,	r12	;#0x0000
    81b8:	20 00 63 00 	bra	&0x00063	
    81bc:	00 00       	bra	@r0		
    81be:	00 00       	bra	@r0		
    81c0:	4a 40       	mov.b	r0,	r10	
    81c2:	00 00       	bra	@r0		
    81c4:	20 00 47 00 	bra	&0x00047	
    81c8:	00 00       	bra	@r0		
    81ca:	00 00       	bra	@r0		
    81cc:	58 40 00 00 	mov.b	0x0000,	r8	;PC rel. 0x081d0
    81d0:	20 00 45 00 	bra	&0x00045	
    81d4:	00 00       	bra	@r0		
    81d6:	00 00       	bra	@r0		
    81d8:	63 40       	.word	0x4063;	????	Illegal as 2-op instr
    81da:	00 00       	bra	@r0		
    81dc:	20 00 4c 00 	bra	&0x0004c	
    81e0:	00 00       	bra	@r0		
    81e2:	00 00       	bra	@r0		
    81e4:	6f 40       	mov.b	@r0,	r15	
    81e6:	00 00       	bra	@r0		
    81e8:	20 00 54 00 	bra	&0x00054	
    81ec:	00 00       	bra	@r0		
    81ee:	00 00       	bra	@r0		
    81f0:	7a 40 00 00 	mov.b	#0,	r10	;#0x0000
    81f4:	20 00 5c 00 	bra	&0x0005c	
    81f8:	00 00       	bra	@r0		
    81fa:	00 00       	bra	@r0		
    81fc:	86 40 00 00 	mov	r0,	0(r6)	;0x0000(r6)
    8200:	20 00 6e 00 	bra	&0x0006e	
    8204:	00 00       	bra	@r0		
    8206:	00 00       	bra	@r0		
    8208:	9a 40 00 00 	mov	0x0000,	32(r10)	;PC rel. 0x0820c, 0x0020(r10)
    820c:	20 00 
    820e:	70 00 00 00 	mova	r0,	0x0000	;PC rel. 0x08210
    8212:	00 00       	bra	@r0		
    8214:	b0 40 00 00 	mov	#0,	0x0020	;#0x0000, PC rel. 0x0823a
    8218:	20 00 
    821a:	72 00 00 00 	mova	r0,	&0x0000	
    821e:	00 00       	bra	@r0		
    8220:	c6 40 00 00 	mov.b	r0,	0(r6)	;0x0000(r6)
    8224:	20 00 74 00 	bra	&0x00074	
    8228:	00 00       	bra	@r0		
    822a:	00 00       	bra	@r0		
    822c:	dd 40 00 00 	mov.b	0x0000,	32(r13)	;PC rel. 0x08230, 0x0020(r13)
    8230:	20 00 
    8232:	76 00 00 00 	mova	r0,	0(r6)	;0x0000(r6)
    8236:	00 00       	bra	@r0		
    8238:	f4 40 00 00 	mov.b	#0,	32(r4)	;#0x0000, 0x0020(r4)
    823c:	20 00 
    823e:	93 00       	.word	0x0093;	????	Illegal as address instr
    8240:	00 00       	bra	@r0		
    8242:	00 00       	bra	@r0		
    8244:	08 41       	mov	r1,	r8	
    8246:	00 00       	bra	@r0		
    8248:	20 00 95 00 	bra	&0x00095	
    824c:	00 00       	bra	@r0		
    824e:	00 00       	bra	@r0		
    8250:	1c 41 00 00 	mov	0(r1),	r12	;0x0000(r1)
    8254:	20 00 97 00 	bra	&0x00097	
    8258:	00 00       	bra	@r0		
    825a:	00 00       	bra	@r0		
    825c:	30 41       	ret			
    825e:	00 00       	bra	@r0		
    8260:	20 00 99 00 	bra	&0x00099	
    8264:	00 00       	bra	@r0		
    8266:	00 00       	bra	@r0		
    8268:	44 41       	mov.b	r1,	r4	
    826a:	00 00       	bra	@r0		
    826c:	20 00 9b 00 	bra	&0x0009b	
    8270:	00 00       	bra	@r0		
    8272:	00 00       	bra	@r0		
    8274:	57 41 00 00 	mov.b	0(r1),	r7	;0x0000(r1)
    8278:	20 00 9d 00 	bra	&0x0009d	
    827c:	00 00       	bra	@r0		
    827e:	00 00       	bra	@r0		
    8280:	6a 41       	mov.b	@r1,	r10	
    8282:	00 00       	bra	@r0		
    8284:	20 00 9f 00 	bra	&0x0009f	
    8288:	00 00       	bra	@r0		
    828a:	00 00       	bra	@r0		
    828c:	7d 41       	pop.b	r13		
    828e:	00 00       	bra	@r0		
    8290:	20 00 a1 00 	bra	&0x000a1	
    8294:	00 00       	bra	@r0		
    8296:	00 00       	bra	@r0		
    8298:	d7 4a 00 00 	mov.b	0(r10),	32(r7)	;0x0000(r10), 0x0020(r7)
    829c:	20 00 
    829e:	04 00       	mova	@r0,	r4	
    82a0:	00 00       	bra	@r0		
    82a2:	00 00       	bra	@r0		
    82a4:	fd 4a 00 00 	mov.b	@r10+,	0(r13)	;0x0000(r13)
    82a8:	20 00 05 00 	bra	&0x00005	
	...
    82b4:	64 00 00 00 	mova	r0,	&0x40000
    82b8:	a4 54 00 00 	add	@r4,	0(r4)	;0x0000(r4)
    82bc:	10 4b 00 00 	br	0(r11)		;0x0000(r11)
    82c0:	64 00 00 00 	mova	r0,	&0x40000
    82c4:	a4 54 00 00 	add	@r4,	0(r4)	;0x0000(r4)
    82c8:	41 4b       	mov.b	r11,	r1	
    82ca:	00 00       	bra	@r0		
    82cc:	64 00 00 00 	mova	r0,	&0x40000
    82d0:	a4 54 00 00 	add	@r4,	0(r4)	;0x0000(r4)
    82d4:	6a 00 00 00 	mova	r0,	&0xa0000
    82d8:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x082da
    82dc:	00 00       	bra	@r0		
    82de:	00 00       	bra	@r0		
    82e0:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    82e4:	80 00 00 00 	bra	#0x00000	
    82e8:	00 00       	bra	@r0		
    82ea:	00 00       	bra	@r0		
    82ec:	99 00 00 00 	cmpa	#0x00000,r9	
    82f0:	80 00 00 00 	bra	#0x00000	
    82f4:	00 00       	bra	@r0		
    82f6:	00 00       	bra	@r0		
    82f8:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    82fa:	00 00       	bra	@r0		
    82fc:	80 00 00 00 	bra	#0x00000	
    8300:	00 00       	bra	@r0		
    8302:	00 00       	bra	@r0		
    8304:	ec 00       	adda	r0,	r12	
    8306:	00 00       	bra	@r0		
    8308:	80 00 00 00 	bra	#0x00000	
    830c:	00 00       	bra	@r0		
    830e:	00 00       	bra	@r0		
    8310:	24 01 00 00 	mova	&0x10000,r4	
    8314:	80 00 00 00 	bra	#0x00000	
    8318:	00 00       	bra	@r0		
    831a:	00 00       	bra	@r0		
    831c:	66 01 00 00 	mova	r1,	&0x60000
    8320:	80 00 00 00 	bra	#0x00000	
    8324:	00 00       	bra	@r0		
    8326:	00 00       	bra	@r0		
    8328:	b7 01 00 00 	suba	#0x10000,r7	
    832c:	80 00 00 00 	bra	#0x00000	
    8330:	00 00       	bra	@r0		
    8332:	00 00       	bra	@r0		
    8334:	08 02       	mova	#4,	r8	;r2 As==10
    8336:	00 00       	bra	@r0		
    8338:	80 00 00 00 	bra	#0x00000	
    833c:	00 00       	bra	@r0		
    833e:	00 00       	bra	@r0		
    8340:	2e 02 00 00 	mova	&0x20000,r14	
    8344:	80 00 00 00 	bra	#0x00000	
    8348:	00 00       	bra	@r0		
    834a:	00 00       	bra	@r0		
    834c:	6c 02 00 00 	mova	r2,	&0xc0000
    8350:	80 00 00 00 	bra	#0x00000	
    8354:	00 00       	bra	@r0		
    8356:	00 00       	bra	@r0		
    8358:	96 02 00 00 	cmpa	#0x20000,r6	
    835c:	80 00 00 00 	bra	#0x00000	
    8360:	00 00       	bra	@r0		
    8362:	00 00       	bra	@r0		
    8364:	bf 02 00 00 	suba	#0x20000,r15	
    8368:	80 00 00 00 	bra	#0x00000	
    836c:	00 00       	bra	@r0		
    836e:	00 00       	bra	@r0		
    8370:	d9 02       	cmpa	r2,	r9	
    8372:	00 00       	bra	@r0		
    8374:	80 00 00 00 	bra	#0x00000	
    8378:	00 00       	bra	@r0		
    837a:	00 00       	bra	@r0		
    837c:	f4 02       	suba	r2,	r4	
    837e:	00 00       	bra	@r0		
    8380:	80 00 00 00 	bra	#0x00000	
    8384:	00 00       	bra	@r0		
    8386:	00 00       	bra	@r0		
    8388:	14 03       	mova	#-1,	r4	;r3 As==11
    838a:	00 00       	bra	@r0		
    838c:	80 00 00 00 	bra	#0x00000	
    8390:	00 00       	bra	@r0		
    8392:	00 00       	bra	@r0		
    8394:	4d 03       	rrum.a	#1,	r13	
    8396:	00 00       	bra	@r0		
    8398:	80 00 00 00 	bra	#0x00000	
    839c:	00 00       	bra	@r0		
    839e:	00 00       	bra	@r0		
    83a0:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    83a4:	80 00 00 00 	bra	#0x00000	
    83a8:	00 00       	bra	@r0		
    83aa:	00 00       	bra	@r0		
    83ac:	8a 03 00 00 	mova	#0x30000,r10	
    83b0:	80 00 00 00 	bra	#0x00000	
    83b4:	00 00       	bra	@r0		
    83b6:	00 00       	bra	@r0		
    83b8:	ae 03 00 00 	adda	#0x30000,r14	
    83bc:	80 00 00 00 	bra	#0x00000	
    83c0:	00 00       	bra	@r0		
    83c2:	00 00       	bra	@r0		
    83c4:	d7 03       	tsta	r7		
    83c6:	00 00       	bra	@r0		
    83c8:	80 00 00 00 	bra	#0x00000	
    83cc:	00 00       	bra	@r0		
    83ce:	00 00       	bra	@r0		
    83d0:	41 4b       	mov.b	r11,	r1	
    83d2:	00 00       	bra	@r0		
    83d4:	82 00 00 00 	mova	#0x00000,r2	
    83d8:	e4 07       	adda	r7,	r4	
    83da:	00 00       	bra	@r0		
    83dc:	4b 4b       	mov.b	r11,	r11	
    83de:	00 00       	bra	@r0		
    83e0:	82 00 00 00 	mova	#0x00000,r2	
    83e4:	e5 1d       	.word	0x1de5;	????	
    83e6:	00 00       	bra	@r0		
    83e8:	55 4b 00 00 	mov.b	0(r11),	r5	;0x0000(r11)
    83ec:	80 00 07 00 	bra	#0x00007	
    83f0:	00 00       	bra	@r0		
    83f2:	00 00       	bra	@r0		
    83f4:	78 4b       	mov.b	@r11+,	r8	
    83f6:	00 00       	bra	@r0		
    83f8:	80 00 09 00 	bra	#0x00009	
    83fc:	00 00       	bra	@r0		
    83fe:	00 00       	bra	@r0		
    8400:	9f 4b 00 00 	mov	0(r11),	128(r15);0x0000(r11), 0x0080(r15)
    8404:	80 00 
    8406:	0b 00       	mova	@r0,	r11	
    8408:	00 00       	bra	@r0		
    840a:	00 00       	bra	@r0		
    840c:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    8410:	82 00 00 00 	mova	#0x00000,r2	
	...
    841c:	a2 00 00 00 	adda	#0x00000,r2	
    8420:	00 00       	bra	@r0		
    8422:	00 00       	bra	@r0		
    8424:	db 4b 00 00 	mov.b	0(r11),	130(r11);0x0000(r11), 0x0082(r11)
    8428:	82 00 
	...
    8432:	00 00       	bra	@r0		
    8434:	a2 00 00 00 	adda	#0x00000,r2	
    8438:	00 00       	bra	@r0		
    843a:	00 00       	bra	@r0		
    843c:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    8440:	82 00 00 00 	mova	#0x00000,r2	
    8444:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    8448:	0b 4c       	mov	r12,	r11	
    844a:	00 00       	bra	@r0		
    844c:	80 00 00 00 	bra	#0x00000	
    8450:	00 00       	bra	@r0		
    8452:	00 00       	bra	@r0		
    8454:	af 4c 00 00 	mov	@r12,	0(r15)	;0x0000(r15)
    8458:	80 00 00 00 	bra	#0x00000	
    845c:	00 00       	bra	@r0		
    845e:	00 00       	bra	@r0		
    8460:	e9 4c 00 00 	mov.b	@r12,	0(r9)	;0x0000(r9)
    8464:	80 00 49 04 	bra	#0x00449	
    8468:	00 00       	bra	@r0		
    846a:	00 00       	bra	@r0		
    846c:	06 4d       	mov	r13,	r6	
    846e:	00 00       	bra	@r0		
    8470:	82 00 00 00 	mova	#0x00000,r2	
	...
    847c:	a2 00 00 00 	adda	#0x00000,r2	
	...
    8488:	a2 00 00 00 	adda	#0x00000,r2	
    848c:	00 00       	bra	@r0		
    848e:	00 00       	bra	@r0		
    8490:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    8494:	82 00 00 00 	mova	#0x00000,r2	
	...
    84a0:	a2 00 00 00 	adda	#0x00000,r2	
	...
    84ac:	a2 00 00 00 	adda	#0x00000,r2	
    84b0:	00 00       	bra	@r0		
    84b2:	00 00       	bra	@r0		
    84b4:	21 4d       	mov	@r13,	r1	
    84b6:	00 00       	bra	@r0		
    84b8:	82 00 00 00 	mova	#0x00000,r2	
    84bc:	00 00       	bra	@r0		
    84be:	00 00       	bra	@r0		
    84c0:	2b 4d       	mov	@r13,	r11	
    84c2:	00 00       	bra	@r0		
    84c4:	82 00 00 00 	mova	#0x00000,r2	
    84c8:	13 10       	rrc	#1		;r3 As==01
    84ca:	00 00       	bra	@r0		
    84cc:	6c 4d       	mov.b	@r13,	r12	
    84ce:	00 00       	bra	@r0		
    84d0:	80 00 97 00 	bra	#0x00097	
    84d4:	00 00       	bra	@r0		
    84d6:	00 00       	bra	@r0		
    84d8:	83 4d       	mov	r13,	#1	;r3 As==01
    84da:	00 00       	bra	@r0		
    84dc:	80 00 d5 00 	bra	#0x000d5	
    84e0:	00 00       	bra	@r0		
    84e2:	00 00       	bra	@r0		
    84e4:	97 4d 00 00 	mov	0(r13),	128(r7)	;0x0000(r13), 0x0080(r7)
    84e8:	80 00 
    84ea:	45 01       	rram.a	#1,	r5	
	...
    84f4:	a2 00 00 00 	adda	#0x00000,r2	
	...
    8500:	a2 00 00 00 	adda	#0x00000,r2	
    8504:	00 00       	bra	@r0		
    8506:	00 00       	bra	@r0		
    8508:	ac 4d 00 00 	mov	@r13,	0(r12)	;0x0000(r12)
    850c:	82 00 00 00 	mova	#0x00000,r2	
    8510:	5f 50 00 00 	add.b	0x0000,	r15	;PC rel. 0x08514
    8514:	b6 4d 00 00 	mov	@r13+,	0(r6)	;0x0000(r6)
    8518:	80 00 43 00 	bra	#0x00043	
    851c:	00 00       	bra	@r0		
    851e:	00 00       	bra	@r0		
    8520:	cc 4d 00 00 	mov.b	r13,	0(r12)	;0x0000(r12)
    8524:	80 00 44 00 	bra	#0x00044	
    8528:	00 00       	bra	@r0		
    852a:	00 00       	bra	@r0		
    852c:	e3 4d       	mov.b	@r13,	#1	;r3 As==01
    852e:	00 00       	bra	@r0		
    8530:	80 00 45 00 	bra	#0x00045	
    8534:	00 00       	bra	@r0		
    8536:	00 00       	bra	@r0		
    8538:	f8 4d 00 00 	mov.b	@r13+,	0(r8)	;0x0000(r8)
    853c:	80 00 46 00 	bra	#0x00046	
    8540:	00 00       	bra	@r0		
    8542:	00 00       	bra	@r0		
    8544:	0e 4e       	mov	r14,	r14	
    8546:	00 00       	bra	@r0		
    8548:	80 00 49 00 	bra	#0x00049	
    854c:	00 00       	bra	@r0		
    854e:	00 00       	bra	@r0		
    8550:	23 4e       	.word	0x4e23;	????	Illegal as 2-op instr
    8552:	00 00       	bra	@r0		
    8554:	80 00 4a 00 	bra	#0x0004a	
    8558:	00 00       	bra	@r0		
    855a:	00 00       	bra	@r0		
    855c:	39 4e       	mov	@r14+,	r9	
    855e:	00 00       	bra	@r0		
    8560:	80 00 4d 00 	bra	#0x0004d	
    8564:	00 00       	bra	@r0		
    8566:	00 00       	bra	@r0		
    8568:	4e 4e       	mov.b	r14,	r14	
    856a:	00 00       	bra	@r0		
    856c:	80 00 4e 00 	bra	#0x0004e	
    8570:	00 00       	bra	@r0		
    8572:	00 00       	bra	@r0		
    8574:	64 4e       	mov.b	@r14,	r4	
    8576:	00 00       	bra	@r0		
    8578:	80 00 59 00 	bra	#0x00059	
    857c:	00 00       	bra	@r0		
    857e:	00 00       	bra	@r0		
    8580:	7a 4e       	mov.b	@r14+,	r10	
    8582:	00 00       	bra	@r0		
    8584:	80 00 5a 00 	bra	#0x0005a	
    8588:	00 00       	bra	@r0		
    858a:	00 00       	bra	@r0		
    858c:	91 4e 00 00 	mov	0(r14),	128(r1)	;0x0000(r14), 0x0080(r1)
    8590:	80 00 
    8592:	7a 00 00 00 	mova	r0,	0(r10)	;0x0000(r10)
    8596:	00 00       	bra	@r0		
    8598:	aa 4e 00 00 	mov	@r14,	0(r10)	;0x0000(r10)
    859c:	80 00 00 00 	bra	#0x00000	
    85a0:	00 00       	bra	@r0		
    85a2:	00 00       	bra	@r0		
    85a4:	e2 4e 00 00 	mov.b	@r14,	&0x0000	
    85a8:	80 00 29 01 	bra	#0x00129	
    85ac:	00 00       	bra	@r0		
    85ae:	00 00       	bra	@r0		
    85b0:	1d 4f 00 00 	mov	0(r15),	r13	;0x0000(r15)
    85b4:	82 00 00 00 	mova	#0x00000,r2	
	...
    85c0:	a2 00 00 00 	adda	#0x00000,r2	
	...
    85cc:	a2 00 00 00 	adda	#0x00000,r2	
    85d0:	00 00       	bra	@r0		
    85d2:	00 00       	bra	@r0		
    85d4:	28 4f       	mov	@r15,	r8	
    85d6:	00 00       	bra	@r0		
    85d8:	82 00 00 00 	mova	#0x00000,r2	
	...
    85e4:	a2 00 00 00 	adda	#0x00000,r2	
    85e8:	00 00       	bra	@r0		
    85ea:	00 00       	bra	@r0		
    85ec:	69 4f       	mov.b	@r15,	r9	
    85ee:	00 00       	bra	@r0		
    85f0:	24 00 a8 04 	mova	&0x004a8,r4	
    85f4:	a4 54 00 00 	add	@r4,	0(r4)	;0x0000(r4)
    85f8:	7e 4f       	mov.b	@r15+,	r14	
    85fa:	00 00       	bra	@r0		
    85fc:	40 00       	rrcm.a	#1,	r0	
    85fe:	a7 04 0a 00 	adda	#0x4000a,r7	
    8602:	00 00       	bra	@r0		
    8604:	00 00       	bra	@r0		
    8606:	00 00       	bra	@r0		
    8608:	44 00       	rrcm.a	#1,	r4	
    860a:	a8 04 00 00 	adda	#0x40000,r8	
    860e:	00 00       	bra	@r0		
    8610:	00 00       	bra	@r0		
    8612:	00 00       	bra	@r0		
    8614:	44 00       	rrcm.a	#1,	r4	
    8616:	a9 04 08 00 	adda	#0x40008,r9	
    861a:	00 00       	bra	@r0		
    861c:	00 00       	bra	@r0		
    861e:	00 00       	bra	@r0		
    8620:	44 00       	rrcm.a	#1,	r4	
    8622:	aa 04 16 00 	adda	#0x40016,r10	
    8626:	00 00       	bra	@r0		
    8628:	00 00       	bra	@r0		
    862a:	00 00       	bra	@r0		
    862c:	44 00       	rrcm.a	#1,	r4	
    862e:	ab 04 30 00 	adda	#0x40030,r11	
    8632:	00 00       	bra	@r0		
    8634:	00 00       	bra	@r0		
    8636:	00 00       	bra	@r0		
    8638:	44 00       	rrcm.a	#1,	r4	
    863a:	ac 04 38 00 	adda	#0x40038,r12	
    863e:	00 00       	bra	@r0		
    8640:	00 00       	bra	@r0		
    8642:	00 00       	bra	@r0		
    8644:	24 00 00 00 	mova	&0x00000,r4	
    8648:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x0864a
    864c:	00 00       	bra	@r0		
    864e:	00 00       	bra	@r0		
    8650:	64 00 00 00 	mova	r0,	&0x40000
    8654:	e2 54 00 00 	add.b	@r4,	&0x0000	
    8658:	10 4b 00 00 	br	0(r11)		;0x0000(r11)
    865c:	64 00 00 00 	mova	r0,	&0x40000
    8660:	e2 54 00 00 	add.b	@r4,	&0x0000	
    8664:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    8668:	64 00 00 00 	mova	r0,	&0x40000
    866c:	e2 54 00 00 	add.b	@r4,	&0x0000	
    8670:	6a 00 00 00 	mova	r0,	&0xa0000
    8674:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x08676
    8678:	00 00       	bra	@r0		
    867a:	00 00       	bra	@r0		
    867c:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    8680:	80 00 00 00 	bra	#0x00000	
    8684:	00 00       	bra	@r0		
    8686:	00 00       	bra	@r0		
    8688:	99 00 00 00 	cmpa	#0x00000,r9	
    868c:	80 00 00 00 	bra	#0x00000	
    8690:	00 00       	bra	@r0		
    8692:	00 00       	bra	@r0		
    8694:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    8696:	00 00       	bra	@r0		
    8698:	80 00 00 00 	bra	#0x00000	
    869c:	00 00       	bra	@r0		
    869e:	00 00       	bra	@r0		
    86a0:	ec 00       	adda	r0,	r12	
    86a2:	00 00       	bra	@r0		
    86a4:	80 00 00 00 	bra	#0x00000	
    86a8:	00 00       	bra	@r0		
    86aa:	00 00       	bra	@r0		
    86ac:	24 01 00 00 	mova	&0x10000,r4	
    86b0:	80 00 00 00 	bra	#0x00000	
    86b4:	00 00       	bra	@r0		
    86b6:	00 00       	bra	@r0		
    86b8:	66 01 00 00 	mova	r1,	&0x60000
    86bc:	80 00 00 00 	bra	#0x00000	
    86c0:	00 00       	bra	@r0		
    86c2:	00 00       	bra	@r0		
    86c4:	b7 01 00 00 	suba	#0x10000,r7	
    86c8:	80 00 00 00 	bra	#0x00000	
    86cc:	00 00       	bra	@r0		
    86ce:	00 00       	bra	@r0		
    86d0:	08 02       	mova	#4,	r8	;r2 As==10
    86d2:	00 00       	bra	@r0		
    86d4:	80 00 00 00 	bra	#0x00000	
    86d8:	00 00       	bra	@r0		
    86da:	00 00       	bra	@r0		
    86dc:	2e 02 00 00 	mova	&0x20000,r14	
    86e0:	80 00 00 00 	bra	#0x00000	
    86e4:	00 00       	bra	@r0		
    86e6:	00 00       	bra	@r0		
    86e8:	6c 02 00 00 	mova	r2,	&0xc0000
    86ec:	80 00 00 00 	bra	#0x00000	
    86f0:	00 00       	bra	@r0		
    86f2:	00 00       	bra	@r0		
    86f4:	96 02 00 00 	cmpa	#0x20000,r6	
    86f8:	80 00 00 00 	bra	#0x00000	
    86fc:	00 00       	bra	@r0		
    86fe:	00 00       	bra	@r0		
    8700:	bf 02 00 00 	suba	#0x20000,r15	
    8704:	80 00 00 00 	bra	#0x00000	
    8708:	00 00       	bra	@r0		
    870a:	00 00       	bra	@r0		
    870c:	d9 02       	cmpa	r2,	r9	
    870e:	00 00       	bra	@r0		
    8710:	80 00 00 00 	bra	#0x00000	
    8714:	00 00       	bra	@r0		
    8716:	00 00       	bra	@r0		
    8718:	f4 02       	suba	r2,	r4	
    871a:	00 00       	bra	@r0		
    871c:	80 00 00 00 	bra	#0x00000	
    8720:	00 00       	bra	@r0		
    8722:	00 00       	bra	@r0		
    8724:	14 03       	mova	#-1,	r4	;r3 As==11
    8726:	00 00       	bra	@r0		
    8728:	80 00 00 00 	bra	#0x00000	
    872c:	00 00       	bra	@r0		
    872e:	00 00       	bra	@r0		
    8730:	4d 03       	rrum.a	#1,	r13	
    8732:	00 00       	bra	@r0		
    8734:	80 00 00 00 	bra	#0x00000	
    8738:	00 00       	bra	@r0		
    873a:	00 00       	bra	@r0		
    873c:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    8740:	80 00 00 00 	bra	#0x00000	
    8744:	00 00       	bra	@r0		
    8746:	00 00       	bra	@r0		
    8748:	8a 03 00 00 	mova	#0x30000,r10	
    874c:	80 00 00 00 	bra	#0x00000	
    8750:	00 00       	bra	@r0		
    8752:	00 00       	bra	@r0		
    8754:	ae 03 00 00 	adda	#0x30000,r14	
    8758:	80 00 00 00 	bra	#0x00000	
    875c:	00 00       	bra	@r0		
    875e:	00 00       	bra	@r0		
    8760:	d7 03       	tsta	r7		
    8762:	00 00       	bra	@r0		
    8764:	80 00 00 00 	bra	#0x00000	
    8768:	00 00       	bra	@r0		
    876a:	00 00       	bra	@r0		
    876c:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    8770:	82 00 00 00 	mova	#0x00000,r2	
    8774:	36 5e       	add	@r14+,	r6	
    8776:	00 00       	bra	@r0		
    8778:	4b 4b       	mov.b	r11,	r11	
    877a:	00 00       	bra	@r0		
    877c:	c2 00       	mova	r0,	r2	
    877e:	00 00       	bra	@r0		
    8780:	e5 1d       	.word	0x1de5;	????	
    8782:	00 00       	bra	@r0		
    8784:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    8788:	c2 00       	mova	r0,	r2	
    878a:	00 00       	bra	@r0		
    878c:	00 00       	bra	@r0		
    878e:	00 00       	bra	@r0		
    8790:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    8794:	c2 00 
    8796:	00 00       	bra	@r0		
    8798:	00 00       	bra	@r0		
    879a:	00 00       	bra	@r0		
    879c:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    87a0:	c2 00       	mova	r0,	r2	
    87a2:	00 00       	bra	@r0		
    87a4:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    87a8:	06 4d       	mov	r13,	r6	
    87aa:	00 00       	bra	@r0		
    87ac:	c2 00       	mova	r0,	r2	
    87ae:	00 00       	bra	@r0		
    87b0:	00 00       	bra	@r0		
    87b2:	00 00       	bra	@r0		
    87b4:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    87b8:	c2 00       	mova	r0,	r2	
    87ba:	00 00       	bra	@r0		
    87bc:	00 00       	bra	@r0		
    87be:	00 00       	bra	@r0		
    87c0:	91 4f 00 00 	mov	0(r15),	130(r1)	;0x0000(r15), 0x0082(r1)
    87c4:	82 00 
    87c6:	00 00       	bra	@r0		
    87c8:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    87cc:	a1 4f 00 00 	mov	@r15,	0(r1)	;0x0000(r1)
    87d0:	80 00 5a 00 	bra	#0x0005a	
    87d4:	00 00       	bra	@r0		
    87d6:	00 00       	bra	@r0		
    87d8:	b6 4f 00 00 	mov	@r15+,	0(r6)	;0x0000(r6)
    87dc:	80 00 5b 00 	bra	#0x0005b	
    87e0:	00 00       	bra	@r0		
    87e2:	00 00       	bra	@r0		
    87e4:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
    87e8:	80 00 5d 00 	bra	#0x0005d	
    87ec:	00 00       	bra	@r0		
    87ee:	00 00       	bra	@r0		
    87f0:	df 4f 00 00 	mov.b	0(r15),	128(r15);0x0000(r15), 0x0080(r15)
    87f4:	80 00 
    87f6:	5e 00       	rrcm	#1,	r14	
    87f8:	00 00       	bra	@r0		
    87fa:	00 00       	bra	@r0		
    87fc:	f3 4f       	mov.b	@r15+,	#1	;r3 As==01
    87fe:	00 00       	bra	@r0		
    8800:	80 00 5f 00 	bra	#0x0005f	
    8804:	00 00       	bra	@r0		
    8806:	00 00       	bra	@r0		
    8808:	07 50       	add	r0,	r7	
    880a:	00 00       	bra	@r0		
    880c:	80 00 66 00 	bra	#0x00066	
    8810:	00 00       	bra	@r0		
    8812:	00 00       	bra	@r0		
    8814:	1c 50 00 00 	add	0x0000,	r12	;PC rel. 0x08818
    8818:	80 00 67 00 	bra	#0x00067	
    881c:	00 00       	bra	@r0		
    881e:	00 00       	bra	@r0		
    8820:	31 50 00 00 	add	#0,	r1	;#0x0000
    8824:	80 00 68 00 	bra	#0x00068	
    8828:	00 00       	bra	@r0		
    882a:	00 00       	bra	@r0		
    882c:	46 50       	add.b	r0,	r6	
    882e:	00 00       	bra	@r0		
    8830:	80 00 82 00 	bra	#0x00082	
    8834:	00 00       	bra	@r0		
    8836:	00 00       	bra	@r0		
    8838:	5c 50 00 00 	add.b	0x0000,	r12	;PC rel. 0x0883c
    883c:	80 00 83 00 	bra	#0x00083	
    8840:	00 00       	bra	@r0		
    8842:	00 00       	bra	@r0		
    8844:	77 50 00 00 	add.b	#0,	r7	;#0x0000
    8848:	80 00 84 00 	bra	#0x00084	
    884c:	00 00       	bra	@r0		
    884e:	00 00       	bra	@r0		
    8850:	8e 50 00 00 	add	r0,	0(r14)	;0x0000(r14)
    8854:	80 00 85 00 	bra	#0x00085	
    8858:	00 00       	bra	@r0		
    885a:	00 00       	bra	@r0		
    885c:	a4 50 00 00 	add	@r0,	0(r4)	;0x0000(r4)
    8860:	80 00 00 00 	bra	#0x00000	
    8864:	00 00       	bra	@r0		
    8866:	00 00       	bra	@r0		
    8868:	f8 50 00 00 	add.b	#0,	128(r8)	;#0x0000, 0x0080(r8)
    886c:	80 00 
    886e:	00 01       	bra	@r1		
    8870:	00 00       	bra	@r0		
    8872:	00 00       	bra	@r0		
    8874:	15 51 00 00 	add	0(r1),	r5	;0x0000(r1)
    8878:	80 00 13 01 	bra	#0x00113	
    887c:	00 00       	bra	@r0		
    887e:	00 00       	bra	@r0		
    8880:	dd 51 00 00 	add.b	0(r1),	128(r13);0x0000(r1), 0x0080(r13)
    8884:	80 00 
    8886:	3a 01 00 00 	mova	0(r1),	r10	;0x0000(r1)
    888a:	00 00       	bra	@r0		
    888c:	00 00       	bra	@r0		
    888e:	00 00       	bra	@r0		
    8890:	a2 00 00 00 	adda	#0x00000,r2	
    8894:	00 00       	bra	@r0		
    8896:	00 00       	bra	@r0		
    8898:	6e 52       	add.b	#4,	r14	;r2 As==10
    889a:	00 00       	bra	@r0		
    889c:	24 00 97 01 	mova	&0x00197,r4	
    88a0:	e2 54 00 00 	add.b	@r4,	&0x0000	
    88a4:	8a 52 00 00 	add	r2,	0(r10)	;0x0000(r10)
    88a8:	40 00       	rrcm.a	#1,	r0	
    88aa:	94 01 0b 00 	cmpa	#0x1000b,r4	
    88ae:	00 00       	bra	@r0		
    88b0:	93 52 00 00 	add	&0x0000,#1	;r3 As==01
    88b4:	40 00       	rrcm.a	#1,	r0	
    88b6:	95 01 0a 00 	cmpa	#0x1000a,r5	
    88ba:	00 00       	bra	@r0		
    88bc:	9c 52 00 00 	add	&0x0000,64(r12)	;0x0040(r12)
    88c0:	40 00 
    88c2:	96 01 09 00 	cmpa	#0x10009,r6	
    88c6:	00 00       	bra	@r0		
    88c8:	00 00       	bra	@r0		
    88ca:	00 00       	bra	@r0		
    88cc:	44 00       	rrcm.a	#1,	r4	
    88ce:	97 01 00 00 	cmpa	#0x10000,r7	
    88d2:	00 00       	bra	@r0		
    88d4:	00 00       	bra	@r0		
    88d6:	00 00       	bra	@r0		
    88d8:	44 00       	rrcm.a	#1,	r4	
    88da:	9a 00 14 00 	cmpa	#0x00014,r10	
    88de:	00 00       	bra	@r0		
    88e0:	00 00       	bra	@r0		
    88e2:	00 00       	bra	@r0		
    88e4:	44 00       	rrcm.a	#1,	r4	
    88e6:	99 00 1e 00 	cmpa	#0x0001e,r9	
    88ea:	00 00       	bra	@r0		
    88ec:	00 00       	bra	@r0		
    88ee:	00 00       	bra	@r0		
    88f0:	44 00       	rrcm.a	#1,	r4	
    88f2:	9a 00 22 00 	cmpa	#0x00022,r10	
    88f6:	00 00       	bra	@r0		
    88f8:	00 00       	bra	@r0		
    88fa:	00 00       	bra	@r0		
    88fc:	44 00       	rrcm.a	#1,	r4	
    88fe:	99 00 2c 00 	cmpa	#0x0002c,r9	
    8902:	00 00       	bra	@r0		
    8904:	00 00       	bra	@r0		
    8906:	00 00       	bra	@r0		
    8908:	44 00       	rrcm.a	#1,	r4	
    890a:	a1 00 30 00 	adda	#0x00030,r1	
    890e:	00 00       	bra	@r0		
    8910:	00 00       	bra	@r0		
    8912:	00 00       	bra	@r0		
    8914:	44 00       	rrcm.a	#1,	r4	
    8916:	a0 00 36 00 	adda	#0x00036,r0	
    891a:	00 00       	bra	@r0		
    891c:	00 00       	bra	@r0		
    891e:	00 00       	bra	@r0		
    8920:	44 00       	rrcm.a	#1,	r4	
    8922:	a1 00 3a 00 	adda	#0x0003a,r1	
    8926:	00 00       	bra	@r0		
    8928:	00 00       	bra	@r0		
    892a:	00 00       	bra	@r0		
    892c:	44 00       	rrcm.a	#1,	r4	
    892e:	a0 00 40 00 	adda	#0x00040,r0	
    8932:	00 00       	bra	@r0		
    8934:	00 00       	bra	@r0		
    8936:	00 00       	bra	@r0		
    8938:	44 00       	rrcm.a	#1,	r4	
    893a:	90 00 4c 00 	cmpa	#0x0004c,r0	
    893e:	00 00       	bra	@r0		
    8940:	00 00       	bra	@r0		
    8942:	00 00       	bra	@r0		
    8944:	44 00       	rrcm.a	#1,	r4	
    8946:	8d 00 50 00 	mova	#0x00050,r13	
    894a:	00 00       	bra	@r0		
    894c:	00 00       	bra	@r0		
    894e:	00 00       	bra	@r0		
    8950:	44 00       	rrcm.a	#1,	r4	
    8952:	bb 01 52 00 	suba	#0x10052,r11	
    8956:	00 00       	bra	@r0		
    8958:	00 00       	bra	@r0		
    895a:	00 00       	bra	@r0		
    895c:	44 00       	rrcm.a	#1,	r4	
    895e:	a1 00 5a 00 	adda	#0x0005a,r1	
    8962:	00 00       	bra	@r0		
    8964:	00 00       	bra	@r0		
    8966:	00 00       	bra	@r0		
    8968:	44 00       	rrcm.a	#1,	r4	
    896a:	a0 00 60 00 	adda	#0x00060,r0	
    896e:	00 00       	bra	@r0		
    8970:	00 00       	bra	@r0		
    8972:	00 00       	bra	@r0		
    8974:	44 00       	rrcm.a	#1,	r4	
    8976:	aa 00 64 00 	adda	#0x00064,r10	
    897a:	00 00       	bra	@r0		
    897c:	00 00       	bra	@r0		
    897e:	00 00       	bra	@r0		
    8980:	44 00       	rrcm.a	#1,	r4	
    8982:	a9 00 6a 00 	adda	#0x0006a,r9	
    8986:	00 00       	bra	@r0		
    8988:	00 00       	bra	@r0		
    898a:	00 00       	bra	@r0		
    898c:	44 00       	rrcm.a	#1,	r4	
    898e:	aa 00 6e 00 	adda	#0x0006e,r10	
    8992:	00 00       	bra	@r0		
    8994:	00 00       	bra	@r0		
    8996:	00 00       	bra	@r0		
    8998:	44 00       	rrcm.a	#1,	r4	
    899a:	a9 00 74 00 	adda	#0x00074,r9	
    899e:	00 00       	bra	@r0		
    89a0:	00 00       	bra	@r0		
    89a2:	00 00       	bra	@r0		
    89a4:	44 00       	rrcm.a	#1,	r4	
    89a6:	b7 01 78 00 	suba	#0x10078,r7	
    89aa:	00 00       	bra	@r0		
    89ac:	00 00       	bra	@r0		
    89ae:	00 00       	bra	@r0		
    89b0:	44 00       	rrcm.a	#1,	r4	
    89b2:	b8 01 8a 00 	suba	#0x1008a,r8	
    89b6:	00 00       	bra	@r0		
    89b8:	00 00       	bra	@r0		
    89ba:	00 00       	bra	@r0		
    89bc:	44 00       	rrcm.a	#1,	r4	
    89be:	1b 02       	mova	#8,	r11	;r2 As==11
    89c0:	96 00 00 00 	cmpa	#0x00000,r6	
    89c4:	00 00       	bra	@r0		
    89c6:	00 00       	bra	@r0		
    89c8:	44 00       	rrcm.a	#1,	r4	
    89ca:	aa 00 9e 00 	adda	#0x0009e,r10	
    89ce:	00 00       	bra	@r0		
    89d0:	00 00       	bra	@r0		
    89d2:	00 00       	bra	@r0		
    89d4:	44 00       	rrcm.a	#1,	r4	
    89d6:	a9 00 a4 00 	adda	#0x000a4,r9	
    89da:	00 00       	bra	@r0		
    89dc:	00 00       	bra	@r0		
    89de:	00 00       	bra	@r0		
    89e0:	44 00       	rrcm.a	#1,	r4	
    89e2:	bf 01 a8 00 	suba	#0x100a8,r15	
    89e6:	00 00       	bra	@r0		
    89e8:	00 00       	bra	@r0		
    89ea:	00 00       	bra	@r0		
    89ec:	44 00       	rrcm.a	#1,	r4	
    89ee:	c7 01       	mova	r1,	r7	
    89f0:	ac 00 00 00 	adda	#0x00000,r12	
    89f4:	00 00       	bra	@r0		
    89f6:	00 00       	bra	@r0		
    89f8:	44 00       	rrcm.a	#1,	r4	
    89fa:	c8 01       	mova	r1,	r8	
    89fc:	b0 00 00 00 	suba	#0x00000,r0	
    8a00:	00 00       	bra	@r0		
    8a02:	00 00       	bra	@r0		
    8a04:	44 00       	rrcm.a	#1,	r4	
    8a06:	c9 01       	mova	r1,	r9	
    8a08:	b4 00 00 00 	suba	#0x00000,r4	
    8a0c:	00 00       	bra	@r0		
    8a0e:	00 00       	bra	@r0		
    8a10:	44 00       	rrcm.a	#1,	r4	
    8a12:	ca 01       	mova	r1,	r10	
    8a14:	bc 00 00 00 	suba	#0x00000,r12	
    8a18:	00 00       	bra	@r0		
    8a1a:	00 00       	bra	@r0		
    8a1c:	44 00       	rrcm.a	#1,	r4	
    8a1e:	cc 01       	mova	r1,	r12	
    8a20:	c4 00       	mova	r0,	r4	
    8a22:	00 00       	bra	@r0		
    8a24:	00 00       	bra	@r0		
    8a26:	00 00       	bra	@r0		
    8a28:	44 00       	rrcm.a	#1,	r4	
    8a2a:	ce 01       	mova	r1,	r14	
    8a2c:	c8 00       	mova	r0,	r8	
    8a2e:	00 00       	bra	@r0		
    8a30:	00 00       	bra	@r0		
    8a32:	00 00       	bra	@r0		
    8a34:	44 00       	rrcm.a	#1,	r4	
    8a36:	d0 01       	cmpa	r1,	r0	
    8a38:	ca 00       	mova	r0,	r10	
    8a3a:	00 00       	bra	@r0		
    8a3c:	00 00       	bra	@r0		
    8a3e:	00 00       	bra	@r0		
    8a40:	44 00       	rrcm.a	#1,	r4	
    8a42:	d3 01       	.word	0x01d3;	????	Illegal as address instr
    8a44:	d0 00       	cmpa	r0,	r0	
    8a46:	00 00       	bra	@r0		
    8a48:	00 00       	bra	@r0		
    8a4a:	00 00       	bra	@r0		
    8a4c:	44 00       	rrcm.a	#1,	r4	
    8a4e:	d5 01       	cmpa	r1,	r5	
    8a50:	da 00       	cmpa	r0,	r10	
    8a52:	00 00       	bra	@r0		
    8a54:	00 00       	bra	@r0		
    8a56:	00 00       	bra	@r0		
    8a58:	44 00       	rrcm.a	#1,	r4	
    8a5a:	d6 01       	cmpa	r1,	r6	
    8a5c:	dc 00       	cmpa	r0,	r12	
    8a5e:	00 00       	bra	@r0		
    8a60:	00 00       	bra	@r0		
    8a62:	00 00       	bra	@r0		
    8a64:	44 00       	rrcm.a	#1,	r4	
    8a66:	d8 01       	cmpa	r1,	r8	
    8a68:	f4 00       	suba	r0,	r4	
    8a6a:	00 00       	bra	@r0		
    8a6c:	00 00       	bra	@r0		
    8a6e:	00 00       	bra	@r0		
    8a70:	44 00       	rrcm.a	#1,	r4	
    8a72:	da 01       	cmpa	r1,	r10	
    8a74:	f8 00       	suba	r0,	r8	
    8a76:	00 00       	bra	@r0		
    8a78:	00 00       	bra	@r0		
    8a7a:	00 00       	bra	@r0		
    8a7c:	44 00       	rrcm.a	#1,	r4	
    8a7e:	db 01       	cmpa	r1,	r11	
    8a80:	fa 00       	suba	r0,	r10	
    8a82:	00 00       	bra	@r0		
    8a84:	00 00       	bra	@r0		
    8a86:	00 00       	bra	@r0		
    8a88:	44 00       	rrcm.a	#1,	r4	
    8a8a:	ee 01       	adda	r1,	r14	
    8a8c:	10 01       	reta			
    8a8e:	00 00       	bra	@r0		
    8a90:	00 00       	bra	@r0		
    8a92:	00 00       	bra	@r0		
    8a94:	44 00       	rrcm.a	#1,	r4	
    8a96:	f0 01       	suba	r1,	r0	
    8a98:	1a 01       	mova	@r1+,	r10	
    8a9a:	00 00       	bra	@r0		
    8a9c:	00 00       	bra	@r0		
    8a9e:	00 00       	bra	@r0		
    8aa0:	44 00       	rrcm.a	#1,	r4	
    8aa2:	f2 01       	suba	r1,	r2	
    8aa4:	1e 01       	mova	@r1+,	r14	
    8aa6:	00 00       	bra	@r0		
    8aa8:	00 00       	bra	@r0		
    8aaa:	00 00       	bra	@r0		
    8aac:	44 00       	rrcm.a	#1,	r4	
    8aae:	f8 01       	suba	r1,	r8	
    8ab0:	26 01 00 00 	mova	&0x10000,r6	
    8ab4:	00 00       	bra	@r0		
    8ab6:	00 00       	bra	@r0		
    8ab8:	44 00       	rrcm.a	#1,	r4	
    8aba:	fa 01       	suba	r1,	r10	
    8abc:	2a 01 00 00 	mova	&0x10000,r10	
    8ac0:	00 00       	bra	@r0		
    8ac2:	00 00       	bra	@r0		
    8ac4:	44 00       	rrcm.a	#1,	r4	
    8ac6:	fb 01       	suba	r1,	r11	
    8ac8:	2e 01 00 00 	mova	&0x10000,r14	
    8acc:	00 00       	bra	@r0		
    8ace:	00 00       	bra	@r0		
    8ad0:	44 00       	rrcm.a	#1,	r4	
    8ad2:	06 02       	mova	#4,	r6	;r2 As==10
    8ad4:	3a 01 00 00 	mova	0(r1),	r10	;0x0000(r1)
    8ad8:	00 00       	bra	@r0		
    8ada:	00 00       	bra	@r0		
    8adc:	44 00       	rrcm.a	#1,	r4	
    8ade:	08 02       	mova	#4,	r8	;r2 As==10
    8ae0:	52 01       	rram	#1,	r2	
    8ae2:	00 00       	bra	@r0		
    8ae4:	00 00       	bra	@r0		
    8ae6:	00 00       	bra	@r0		
    8ae8:	44 00       	rrcm.a	#1,	r4	
    8aea:	09 02       	mova	#4,	r9	;r2 As==10
    8aec:	62 01 00 00 	mova	r1,	&0x20000
    8af0:	00 00       	bra	@r0		
    8af2:	00 00       	bra	@r0		
    8af4:	44 00       	rrcm.a	#1,	r4	
    8af6:	12 02       	mova	#8,	r2	;r2 As==11
    8af8:	84 01 00 00 	mova	#0x10000,r4	
    8afc:	00 00       	bra	@r0		
    8afe:	00 00       	bra	@r0		
    8b00:	44 00       	rrcm.a	#1,	r4	
    8b02:	16 02       	mova	#8,	r6	;r2 As==11
    8b04:	8a 01 00 00 	mova	#0x10000,r10	
    8b08:	00 00       	bra	@r0		
    8b0a:	00 00       	bra	@r0		
    8b0c:	44 00       	rrcm.a	#1,	r4	
    8b0e:	18 02       	mova	#8,	r8	;r2 As==11
    8b10:	90 01 00 00 	cmpa	#0x10000,r0	
    8b14:	00 00       	bra	@r0		
    8b16:	00 00       	bra	@r0		
    8b18:	44 00       	rrcm.a	#1,	r4	
    8b1a:	19 02       	mova	#8,	r9	;r2 As==11
    8b1c:	aa 01 00 00 	adda	#0x10000,r10	
    8b20:	00 00       	bra	@r0		
    8b22:	00 00       	bra	@r0		
    8b24:	44 00       	rrcm.a	#1,	r4	
    8b26:	00 02       	bra	#4		;r2 As==10
    8b28:	b0 01 00 00 	suba	#0x10000,r0	
    8b2c:	00 00       	bra	@r0		
    8b2e:	00 00       	bra	@r0		
    8b30:	44 00       	rrcm.a	#1,	r4	
    8b32:	01 02       	mova	#4,	r1	;r2 As==10
    8b34:	b4 01 00 00 	suba	#0x10000,r4	
    8b38:	00 00       	bra	@r0		
    8b3a:	00 00       	bra	@r0		
    8b3c:	44 00       	rrcm.a	#1,	r4	
    8b3e:	02 02       	mova	#4,	r2	;r2 As==10
    8b40:	b8 01 00 00 	suba	#0x10000,r8	
    8b44:	00 00       	bra	@r0		
    8b46:	00 00       	bra	@r0		
    8b48:	44 00       	rrcm.a	#1,	r4	
    8b4a:	f6 01       	suba	r1,	r6	
    8b4c:	c2 01       	mova	r1,	r2	
    8b4e:	00 00       	bra	@r0		
    8b50:	00 00       	bra	@r0		
    8b52:	00 00       	bra	@r0		
    8b54:	44 00       	rrcm.a	#1,	r4	
    8b56:	0e 02       	mova	#4,	r14	;r2 As==10
    8b58:	cc 01       	mova	r1,	r12	
    8b5a:	00 00       	bra	@r0		
    8b5c:	00 00       	bra	@r0		
    8b5e:	00 00       	bra	@r0		
    8b60:	44 00       	rrcm.a	#1,	r4	
    8b62:	0f 02       	mova	#4,	r15	;r2 As==10
    8b64:	d2 01       	cmpa	r1,	r2	
    8b66:	00 00       	bra	@r0		
    8b68:	00 00       	bra	@r0		
    8b6a:	00 00       	bra	@r0		
    8b6c:	44 00       	rrcm.a	#1,	r4	
    8b6e:	10 02       	bra	#8		;r2 As==11
    8b70:	d6 01       	cmpa	r1,	r6	
    8b72:	00 00       	bra	@r0		
    8b74:	00 00       	bra	@r0		
    8b76:	00 00       	bra	@r0		
    8b78:	44 00       	rrcm.a	#1,	r4	
    8b7a:	e1 01       	adda	r1,	r1	
    8b7c:	e8 01       	adda	r1,	r8	
    8b7e:	00 00       	bra	@r0		
    8b80:	00 00       	bra	@r0		
    8b82:	00 00       	bra	@r0		
    8b84:	44 00       	rrcm.a	#1,	r4	
    8b86:	e4 01       	adda	r1,	r4	
    8b88:	ec 01       	adda	r1,	r12	
    8b8a:	00 00       	bra	@r0		
    8b8c:	00 00       	bra	@r0		
    8b8e:	00 00       	bra	@r0		
    8b90:	44 00       	rrcm.a	#1,	r4	
    8b92:	e8 01       	adda	r1,	r8	
    8b94:	f2 01       	suba	r1,	r2	
    8b96:	00 00       	bra	@r0		
    8b98:	00 00       	bra	@r0		
    8b9a:	00 00       	bra	@r0		
    8b9c:	44 00       	rrcm.a	#1,	r4	
    8b9e:	e9 01       	adda	r1,	r9	
    8ba0:	f4 01       	suba	r1,	r4	
    8ba2:	00 00       	bra	@r0		
    8ba4:	00 00       	bra	@r0		
    8ba6:	00 00       	bra	@r0		
    8ba8:	44 00       	rrcm.a	#1,	r4	
    8baa:	cf 01       	mova	r1,	r15	
    8bac:	fa 01       	suba	r1,	r10	
    8bae:	00 00       	bra	@r0		
    8bb0:	00 00       	bra	@r0		
    8bb2:	00 00       	bra	@r0		
    8bb4:	44 00       	rrcm.a	#1,	r4	
    8bb6:	1d 02       	mova	#8,	r13	;r2 As==11
    8bb8:	10 02       	bra	#8		;r2 As==11
    8bba:	00 00       	bra	@r0		
    8bbc:	a7 52 00 00 	add	#4,	0(r7)	;r2 As==10, 0x0000(r7)
    8bc0:	40 00       	rrcm.a	#1,	r0	
    8bc2:	98 01 0e 00 	cmpa	#0x1000e,r8	
    8bc6:	00 00       	bra	@r0		
    8bc8:	b9 52 00 00 	add	#8,	0(r9)	;r2 As==11, 0x0000(r9)
    8bcc:	40 00       	rrcm.a	#1,	r0	
    8bce:	9b 01 05 00 	cmpa	#0x10005,r11	
    8bd2:	00 00       	bra	@r0		
    8bd4:	cd 52 00 00 	add.b	r2,	0(r13)	;0x0000(r13)
    8bd8:	40 00       	rrcm.a	#1,	r0	
    8bda:	9c 01 06 00 	cmpa	#0x10006,r12	
    8bde:	00 00       	bra	@r0		
    8be0:	e1 52 00 00 	add.b	#4,	0(r1)	;r2 As==10, 0x0000(r1)
    8be4:	40 00       	rrcm.a	#1,	r0	
    8be6:	9d 01 0c 00 	cmpa	#0x1000c,r13	
    8bea:	00 00       	bra	@r0		
    8bec:	f3 52       	add.b	#8,	#1	;r2 As==11, r3 As==01
    8bee:	00 00       	bra	@r0		
    8bf0:	40 00       	rrcm.a	#1,	r0	
    8bf2:	9e 01 07 00 	cmpa	#0x10007,r14	
    8bf6:	00 00       	bra	@r0		
    8bf8:	00 00       	bra	@r0		
    8bfa:	00 00       	bra	@r0		
    8bfc:	c0 00       	bra	r0		
    8bfe:	00 00       	bra	@r0		
    8c00:	14 00       	mova	#0x00000,r4	
    8c02:	00 00       	bra	@r0		
    8c04:	05 53       	add	#0,	r5	;r3 As==00
    8c06:	00 00       	bra	@r0		
    8c08:	40 00       	rrcm.a	#1,	r0	
    8c0a:	c5 01       	mova	r1,	r5	
    8c0c:	0f 00       	mova	@r0,	r15	
    8c0e:	00 00       	bra	@r0		
    8c10:	00 00       	bra	@r0		
    8c12:	00 00       	bra	@r0		
    8c14:	c0 00       	bra	r0		
    8c16:	00 00       	bra	@r0		
    8c18:	ac 00 00 00 	adda	#0x00000,r12	
    8c1c:	00 00       	bra	@r0		
    8c1e:	00 00       	bra	@r0		
    8c20:	e0 00       	adda	r0,	r0	
    8c22:	00 00       	bra	@r0		
    8c24:	10 01       	reta			
    8c26:	00 00       	bra	@r0		
    8c28:	05 53       	add	#0,	r5	;r3 As==00
    8c2a:	00 00       	bra	@r0		
    8c2c:	40 00       	rrcm.a	#1,	r0	
    8c2e:	c5 01       	mova	r1,	r5	
    8c30:	0f 00       	mova	@r0,	r15	
    8c32:	00 00       	bra	@r0		
    8c34:	00 00       	bra	@r0		
    8c36:	00 00       	bra	@r0		
    8c38:	c0 00       	bra	r0		
    8c3a:	00 00       	bra	@r0		
    8c3c:	e8 01       	adda	r1,	r8	
    8c3e:	00 00       	bra	@r0		
    8c40:	00 00       	bra	@r0		
    8c42:	00 00       	bra	@r0		
    8c44:	e0 00       	adda	r0,	r0	
    8c46:	00 00       	bra	@r0		
    8c48:	00 02       	bra	#4		;r2 As==10
    8c4a:	00 00       	bra	@r0		
    8c4c:	00 00       	bra	@r0		
    8c4e:	00 00       	bra	@r0		
    8c50:	e0 00       	adda	r0,	r0	
    8c52:	00 00       	bra	@r0		
    8c54:	10 02       	bra	#8		;r2 As==11
    8c56:	00 00       	bra	@r0		
    8c58:	00 00       	bra	@r0		
    8c5a:	00 00       	bra	@r0		
    8c5c:	24 00 00 00 	mova	&0x00000,r4	
    8c60:	22 02 00 00 	mova	&0x20000,r2	
    8c64:	11 53       	inc	r1		
    8c66:	00 00       	bra	@r0		
    8c68:	24 00 21 02 	mova	&0x00221,r4	
    8c6c:	04 57       	add	r7,	r4	
    8c6e:	00 00       	bra	@r0		
    8c70:	22 53       	incd	r2		
    8c72:	00 00       	bra	@r0		
    8c74:	40 00       	rrcm.a	#1,	r0	
    8c76:	20 02 0e 00 	bra	&0x2000e	
    8c7a:	00 00       	bra	@r0		
    8c7c:	30 53       	add	#-1,	r0	;r3 As==11
    8c7e:	00 00       	bra	@r0		
    8c80:	40 00       	rrcm.a	#1,	r0	
    8c82:	20 02 0c 00 	bra	&0x2000c	
    8c86:	00 00       	bra	@r0		
    8c88:	00 00       	bra	@r0		
    8c8a:	00 00       	bra	@r0		
    8c8c:	44 00       	rrcm.a	#1,	r4	
    8c8e:	21 02 00 00 	mova	&0x20000,r1	
    8c92:	00 00       	bra	@r0		
    8c94:	00 00       	bra	@r0		
    8c96:	00 00       	bra	@r0		
    8c98:	44 00       	rrcm.a	#1,	r4	
    8c9a:	28 02 06 00 	mova	&0x20006,r8	
    8c9e:	00 00       	bra	@r0		
    8ca0:	00 00       	bra	@r0		
    8ca2:	00 00       	bra	@r0		
    8ca4:	44 00       	rrcm.a	#1,	r4	
    8ca6:	29 02 0e 00 	mova	&0x2000e,r9	
    8caa:	00 00       	bra	@r0		
    8cac:	00 00       	bra	@r0		
    8cae:	00 00       	bra	@r0		
    8cb0:	44 00       	rrcm.a	#1,	r4	
    8cb2:	2b 02 16 00 	mova	&0x20016,r11	
    8cb6:	00 00       	bra	@r0		
    8cb8:	00 00       	bra	@r0		
    8cba:	00 00       	bra	@r0		
    8cbc:	44 00       	rrcm.a	#1,	r4	
    8cbe:	2c 02 22 00 	mova	&0x20022,r12	
    8cc2:	00 00       	bra	@r0		
    8cc4:	00 00       	bra	@r0		
    8cc6:	00 00       	bra	@r0		
    8cc8:	44 00       	rrcm.a	#1,	r4	
    8cca:	2e 02 32 00 	mova	&0x20032,r14	
    8cce:	00 00       	bra	@r0		
    8cd0:	00 00       	bra	@r0		
    8cd2:	00 00       	bra	@r0		
    8cd4:	44 00       	rrcm.a	#1,	r4	
    8cd6:	30 02 40 00 	bra	&0x0040	
    8cda:	00 00       	bra	@r0		
    8cdc:	00 00       	bra	@r0		
    8cde:	00 00       	bra	@r0		
    8ce0:	44 00       	rrcm.a	#1,	r4	
    8ce2:	31 02 44 00 	mova	&0x0044,r1	
    8ce6:	00 00       	bra	@r0		
    8ce8:	3e 53       	add	#-1,	r14	;r3 As==11
    8cea:	00 00       	bra	@r0		
    8cec:	80 00 22 02 	bra	#0x00222	
    8cf0:	00 00       	bra	@r0		
    8cf2:	00 00       	bra	@r0		
    8cf4:	47 53       	add.b	#0,	r7	;r3 As==00
    8cf6:	00 00       	bra	@r0		
    8cf8:	80 00 23 02 	bra	#0x00223	
    8cfc:	08 00       	mova	@r0,	r8	
    8cfe:	00 00       	bra	@r0		
    8d00:	50 53       	inc.b	r0		
    8d02:	00 00       	bra	@r0		
    8d04:	80 00 24 02 	bra	#0x00224	
    8d08:	10 00       	bra	#0x00000	
    8d0a:	00 00       	bra	@r0		
    8d0c:	5b 53       	inc.b	r11		
    8d0e:	00 00       	bra	@r0		
    8d10:	40 00       	rrcm.a	#1,	r0	
    8d12:	25 02 0f 00 	mova	&0x2000f,r5	
    8d16:	00 00       	bra	@r0		
    8d18:	66 53       	incd.b	r6		
    8d1a:	00 00       	bra	@r0		
    8d1c:	80 00 26 02 	bra	#0x00226	
    8d20:	18 00       	mova	#0x00000,r8	
    8d22:	00 00       	bra	@r0		
    8d24:	70 53       	add.b	#-1,	r0	;r3 As==11
    8d26:	00 00       	bra	@r0		
    8d28:	80 00 26 02 	bra	#0x00226	
    8d2c:	1c 00       	mova	#0x00000,r12	
    8d2e:	00 00       	bra	@r0		
    8d30:	00 00       	bra	@r0		
    8d32:	00 00       	bra	@r0		
    8d34:	c0 00       	bra	r0		
    8d36:	00 00       	bra	@r0		
    8d38:	06 00       	mova	@r0,	r6	
    8d3a:	00 00       	bra	@r0		
    8d3c:	00 00       	bra	@r0		
    8d3e:	00 00       	bra	@r0		
    8d40:	e0 00       	adda	r0,	r0	
    8d42:	00 00       	bra	@r0		
    8d44:	44 00       	rrcm.a	#1,	r4	
    8d46:	00 00       	bra	@r0		
    8d48:	00 00       	bra	@r0		
    8d4a:	00 00       	bra	@r0		
    8d4c:	24 00 00 00 	mova	&0x00000,r4	
    8d50:	4c 00       	rrcm.a	#1,	r12	
    8d52:	00 00       	bra	@r0		
    8d54:	7a 53       	add.b	#-1,	r10	;r3 As==11
    8d56:	00 00       	bra	@r0		
    8d58:	24 00 35 02 	mova	&0x00235,r4	
    8d5c:	50 57 00 00 	add.b	0(r7),	r0	;0x0000(r7)
    8d60:	22 53       	incd	r2		
    8d62:	00 00       	bra	@r0		
    8d64:	40 00       	rrcm.a	#1,	r0	
    8d66:	34 02 0e 00 	mova	&0x000e,r4	
    8d6a:	00 00       	bra	@r0		
    8d6c:	30 53       	add	#-1,	r0	;r3 As==11
    8d6e:	00 00       	bra	@r0		
    8d70:	40 00       	rrcm.a	#1,	r0	
    8d72:	34 02 0c 00 	mova	&0x000c,r4	
    8d76:	00 00       	bra	@r0		
    8d78:	00 00       	bra	@r0		
    8d7a:	00 00       	bra	@r0		
    8d7c:	44 00       	rrcm.a	#1,	r4	
    8d7e:	35 02 00 00 	mova	&0x0000,r5	
    8d82:	00 00       	bra	@r0		
    8d84:	00 00       	bra	@r0		
    8d86:	00 00       	bra	@r0		
    8d88:	44 00       	rrcm.a	#1,	r4	
    8d8a:	3c 02 06 00 	mova	&0x0006,r12	
    8d8e:	00 00       	bra	@r0		
    8d90:	00 00       	bra	@r0		
    8d92:	00 00       	bra	@r0		
    8d94:	44 00       	rrcm.a	#1,	r4	
    8d96:	3d 02 0e 00 	mova	&0x000e,r13	
    8d9a:	00 00       	bra	@r0		
    8d9c:	00 00       	bra	@r0		
    8d9e:	00 00       	bra	@r0		
    8da0:	44 00       	rrcm.a	#1,	r4	
    8da2:	3f 02 16 00 	mova	&0x0016,r15	
    8da6:	00 00       	bra	@r0		
    8da8:	00 00       	bra	@r0		
    8daa:	00 00       	bra	@r0		
    8dac:	44 00       	rrcm.a	#1,	r4	
    8dae:	40 02       	rlam.a	#1,	r0	
    8db0:	22 00 00 00 	mova	&0x00000,r2	
    8db4:	00 00       	bra	@r0		
    8db6:	00 00       	bra	@r0		
    8db8:	44 00       	rrcm.a	#1,	r4	
    8dba:	42 02       	rlam.a	#1,	r2	
    8dbc:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x08dbe
    8dc0:	00 00       	bra	@r0		
    8dc2:	00 00       	bra	@r0		
    8dc4:	44 00       	rrcm.a	#1,	r4	
    8dc6:	44 02       	rlam.a	#1,	r4	
    8dc8:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x08dca
    8dcc:	00 00       	bra	@r0		
    8dce:	00 00       	bra	@r0		
    8dd0:	44 00       	rrcm.a	#1,	r4	
    8dd2:	46 02       	rlam.a	#1,	r6	
    8dd4:	44 00       	rrcm.a	#1,	r4	
    8dd6:	00 00       	bra	@r0		
    8dd8:	00 00       	bra	@r0		
    8dda:	00 00       	bra	@r0		
    8ddc:	44 00       	rrcm.a	#1,	r4	
    8dde:	47 02       	rlam.a	#1,	r7	
    8de0:	48 00       	rrcm.a	#1,	r8	
    8de2:	00 00       	bra	@r0		
    8de4:	3e 53       	add	#-1,	r14	;r3 As==11
    8de6:	00 00       	bra	@r0		
    8de8:	80 00 36 02 	bra	#0x00236	
    8dec:	00 00       	bra	@r0		
    8dee:	00 00       	bra	@r0		
    8df0:	47 53       	add.b	#0,	r7	;r3 As==00
    8df2:	00 00       	bra	@r0		
    8df4:	80 00 37 02 	bra	#0x00237	
    8df8:	08 00       	mova	@r0,	r8	
    8dfa:	00 00       	bra	@r0		
    8dfc:	50 53       	inc.b	r0		
    8dfe:	00 00       	bra	@r0		
    8e00:	80 00 38 02 	bra	#0x00238	
    8e04:	10 00       	bra	#0x00000	
    8e06:	00 00       	bra	@r0		
    8e08:	5b 53       	inc.b	r11		
    8e0a:	00 00       	bra	@r0		
    8e0c:	40 00       	rrcm.a	#1,	r0	
    8e0e:	39 02 0f 00 	mova	&0x000f,r9	
    8e12:	00 00       	bra	@r0		
    8e14:	66 53       	incd.b	r6		
    8e16:	00 00       	bra	@r0		
    8e18:	80 00 3a 02 	bra	#0x0023a	
    8e1c:	18 00       	mova	#0x00000,r8	
    8e1e:	00 00       	bra	@r0		
    8e20:	70 53       	add.b	#-1,	r0	;r3 As==11
    8e22:	00 00       	bra	@r0		
    8e24:	80 00 3a 02 	bra	#0x0023a	
    8e28:	1c 00       	mova	#0x00000,r12	
    8e2a:	00 00       	bra	@r0		
    8e2c:	00 00       	bra	@r0		
    8e2e:	00 00       	bra	@r0		
    8e30:	c0 00       	bra	r0		
    8e32:	00 00       	bra	@r0		
    8e34:	06 00       	mova	@r0,	r6	
    8e36:	00 00       	bra	@r0		
    8e38:	00 00       	bra	@r0		
    8e3a:	00 00       	bra	@r0		
    8e3c:	e0 00       	adda	r0,	r0	
    8e3e:	00 00       	bra	@r0		
    8e40:	48 00       	rrcm.a	#1,	r8	
    8e42:	00 00       	bra	@r0		
    8e44:	00 00       	bra	@r0		
    8e46:	00 00       	bra	@r0		
    8e48:	24 00 00 00 	mova	&0x00000,r4	
    8e4c:	50 00       	rrcm	#1,	r0	
    8e4e:	00 00       	bra	@r0		
    8e50:	00 00       	bra	@r0		
    8e52:	00 00       	bra	@r0		
    8e54:	64 00 00 00 	mova	r0,	&0x40000
    8e58:	a0 57 00 00 	add	@r7,	0x0000	;PC rel. 0x08e5c
    8e5c:	10 4b 00 00 	br	0(r11)		;0x0000(r11)
    8e60:	64 00 00 00 	mova	r0,	&0x40000
    8e64:	a0 57 00 00 	add	@r7,	0x0000	;PC rel. 0x08e68
    8e68:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    8e6c:	64 00 00 00 	mova	r0,	&0x40000
    8e70:	a0 57 00 00 	add	@r7,	0x0000	;PC rel. 0x08e74
    8e74:	6a 00 00 00 	mova	r0,	&0xa0000
    8e78:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x08e7a
    8e7c:	00 00       	bra	@r0		
    8e7e:	00 00       	bra	@r0		
    8e80:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    8e84:	80 00 00 00 	bra	#0x00000	
    8e88:	00 00       	bra	@r0		
    8e8a:	00 00       	bra	@r0		
    8e8c:	99 00 00 00 	cmpa	#0x00000,r9	
    8e90:	80 00 00 00 	bra	#0x00000	
    8e94:	00 00       	bra	@r0		
    8e96:	00 00       	bra	@r0		
    8e98:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    8e9a:	00 00       	bra	@r0		
    8e9c:	80 00 00 00 	bra	#0x00000	
    8ea0:	00 00       	bra	@r0		
    8ea2:	00 00       	bra	@r0		
    8ea4:	ec 00       	adda	r0,	r12	
    8ea6:	00 00       	bra	@r0		
    8ea8:	80 00 00 00 	bra	#0x00000	
    8eac:	00 00       	bra	@r0		
    8eae:	00 00       	bra	@r0		
    8eb0:	24 01 00 00 	mova	&0x10000,r4	
    8eb4:	80 00 00 00 	bra	#0x00000	
    8eb8:	00 00       	bra	@r0		
    8eba:	00 00       	bra	@r0		
    8ebc:	66 01 00 00 	mova	r1,	&0x60000
    8ec0:	80 00 00 00 	bra	#0x00000	
    8ec4:	00 00       	bra	@r0		
    8ec6:	00 00       	bra	@r0		
    8ec8:	b7 01 00 00 	suba	#0x10000,r7	
    8ecc:	80 00 00 00 	bra	#0x00000	
    8ed0:	00 00       	bra	@r0		
    8ed2:	00 00       	bra	@r0		
    8ed4:	08 02       	mova	#4,	r8	;r2 As==10
    8ed6:	00 00       	bra	@r0		
    8ed8:	80 00 00 00 	bra	#0x00000	
    8edc:	00 00       	bra	@r0		
    8ede:	00 00       	bra	@r0		
    8ee0:	2e 02 00 00 	mova	&0x20000,r14	
    8ee4:	80 00 00 00 	bra	#0x00000	
    8ee8:	00 00       	bra	@r0		
    8eea:	00 00       	bra	@r0		
    8eec:	6c 02 00 00 	mova	r2,	&0xc0000
    8ef0:	80 00 00 00 	bra	#0x00000	
    8ef4:	00 00       	bra	@r0		
    8ef6:	00 00       	bra	@r0		
    8ef8:	96 02 00 00 	cmpa	#0x20000,r6	
    8efc:	80 00 00 00 	bra	#0x00000	
    8f00:	00 00       	bra	@r0		
    8f02:	00 00       	bra	@r0		
    8f04:	bf 02 00 00 	suba	#0x20000,r15	
    8f08:	80 00 00 00 	bra	#0x00000	
    8f0c:	00 00       	bra	@r0		
    8f0e:	00 00       	bra	@r0		
    8f10:	d9 02       	cmpa	r2,	r9	
    8f12:	00 00       	bra	@r0		
    8f14:	80 00 00 00 	bra	#0x00000	
    8f18:	00 00       	bra	@r0		
    8f1a:	00 00       	bra	@r0		
    8f1c:	f4 02       	suba	r2,	r4	
    8f1e:	00 00       	bra	@r0		
    8f20:	80 00 00 00 	bra	#0x00000	
    8f24:	00 00       	bra	@r0		
    8f26:	00 00       	bra	@r0		
    8f28:	14 03       	mova	#-1,	r4	;r3 As==11
    8f2a:	00 00       	bra	@r0		
    8f2c:	80 00 00 00 	bra	#0x00000	
    8f30:	00 00       	bra	@r0		
    8f32:	00 00       	bra	@r0		
    8f34:	4d 03       	rrum.a	#1,	r13	
    8f36:	00 00       	bra	@r0		
    8f38:	80 00 00 00 	bra	#0x00000	
    8f3c:	00 00       	bra	@r0		
    8f3e:	00 00       	bra	@r0		
    8f40:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    8f44:	80 00 00 00 	bra	#0x00000	
    8f48:	00 00       	bra	@r0		
    8f4a:	00 00       	bra	@r0		
    8f4c:	8a 03 00 00 	mova	#0x30000,r10	
    8f50:	80 00 00 00 	bra	#0x00000	
    8f54:	00 00       	bra	@r0		
    8f56:	00 00       	bra	@r0		
    8f58:	ae 03 00 00 	adda	#0x30000,r14	
    8f5c:	80 00 00 00 	bra	#0x00000	
    8f60:	00 00       	bra	@r0		
    8f62:	00 00       	bra	@r0		
    8f64:	d7 03       	tsta	r7		
    8f66:	00 00       	bra	@r0		
    8f68:	80 00 00 00 	bra	#0x00000	
    8f6c:	00 00       	bra	@r0		
    8f6e:	00 00       	bra	@r0		
    8f70:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    8f74:	82 00 00 00 	mova	#0x00000,r2	
    8f78:	a2 37       	jge	$-186    	;abs 0x8ebe
    8f7a:	00 00       	bra	@r0		
    8f7c:	4b 4b       	mov.b	r11,	r11	
    8f7e:	00 00       	bra	@r0		
    8f80:	c2 00       	mova	r0,	r2	
    8f82:	00 00       	bra	@r0		
    8f84:	e5 1d       	.word	0x1de5;	????	
    8f86:	00 00       	bra	@r0		
    8f88:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    8f8c:	c2 00       	mova	r0,	r2	
    8f8e:	00 00       	bra	@r0		
    8f90:	00 00       	bra	@r0		
    8f92:	00 00       	bra	@r0		
    8f94:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    8f98:	c2 00 
    8f9a:	00 00       	bra	@r0		
    8f9c:	00 00       	bra	@r0		
    8f9e:	00 00       	bra	@r0		
    8fa0:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    8fa4:	c2 00       	mova	r0,	r2	
    8fa6:	00 00       	bra	@r0		
    8fa8:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    8fac:	06 4d       	mov	r13,	r6	
    8fae:	00 00       	bra	@r0		
    8fb0:	c2 00       	mova	r0,	r2	
    8fb2:	00 00       	bra	@r0		
    8fb4:	00 00       	bra	@r0		
    8fb6:	00 00       	bra	@r0		
    8fb8:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    8fbc:	c2 00       	mova	r0,	r2	
    8fbe:	00 00       	bra	@r0		
    8fc0:	00 00       	bra	@r0		
    8fc2:	00 00       	bra	@r0		
    8fc4:	91 4f 00 00 	mov	0(r15),	194(r1)	;0x0000(r15), 0x00c2(r1)
    8fc8:	c2 00 
    8fca:	00 00       	bra	@r0		
    8fcc:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    8fd0:	8b 53 00 00 	add	#0,	0(r11)	;r3 As==00, 0x0000(r11)
    8fd4:	24 00 f7 02 	mova	&0x002f7,r4	
    8fd8:	a0 57 00 00 	add	@r7,	0x0000	;PC rel. 0x08fdc
    8fdc:	22 53       	incd	r2		
    8fde:	00 00       	bra	@r0		
    8fe0:	40 00       	rrcm.a	#1,	r0	
    8fe2:	f6 02       	suba	r2,	r6	
    8fe4:	0e 00       	mova	@r0,	r14	
    8fe6:	00 00       	bra	@r0		
    8fe8:	30 53       	add	#-1,	r0	;r3 As==11
    8fea:	00 00       	bra	@r0		
    8fec:	40 00       	rrcm.a	#1,	r0	
    8fee:	f6 02       	suba	r2,	r6	
    8ff0:	0c 00       	mova	@r0,	r12	
    8ff2:	00 00       	bra	@r0		
    8ff4:	00 00       	bra	@r0		
    8ff6:	00 00       	bra	@r0		
    8ff8:	44 00       	rrcm.a	#1,	r4	
    8ffa:	f7 02       	suba	r2,	r7	
	...
    9004:	44 00       	rrcm.a	#1,	r4	
    9006:	fe 02       	suba	r2,	r14	
    9008:	06 00       	mova	@r0,	r6	
    900a:	00 00       	bra	@r0		
    900c:	00 00       	bra	@r0		
    900e:	00 00       	bra	@r0		
    9010:	44 00       	rrcm.a	#1,	r4	
    9012:	ff 02       	suba	r2,	r15	
    9014:	0e 00       	mova	@r0,	r14	
    9016:	00 00       	bra	@r0		
    9018:	00 00       	bra	@r0		
    901a:	00 00       	bra	@r0		
    901c:	44 00       	rrcm.a	#1,	r4	
    901e:	01 03       	mova	#2,	r1	;r3 As==10
    9020:	16 00       	mova	#0x00000,r6	
    9022:	00 00       	bra	@r0		
    9024:	00 00       	bra	@r0		
    9026:	00 00       	bra	@r0		
    9028:	44 00       	rrcm.a	#1,	r4	
    902a:	02 03       	mova	#2,	r2	;r3 As==10
    902c:	22 00 00 00 	mova	&0x00000,r2	
    9030:	00 00       	bra	@r0		
    9032:	00 00       	bra	@r0		
    9034:	44 00       	rrcm.a	#1,	r4	
    9036:	04 03       	mova	#2,	r4	;r3 As==10
    9038:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x0903a
    903c:	00 00       	bra	@r0		
    903e:	00 00       	bra	@r0		
    9040:	44 00       	rrcm.a	#1,	r4	
    9042:	06 03       	mova	#2,	r6	;r3 As==10
    9044:	40 00       	rrcm.a	#1,	r0	
    9046:	00 00       	bra	@r0		
    9048:	00 00       	bra	@r0		
    904a:	00 00       	bra	@r0		
    904c:	44 00       	rrcm.a	#1,	r4	
    904e:	07 03       	mova	#2,	r7	;r3 As==10
    9050:	44 00       	rrcm.a	#1,	r4	
    9052:	00 00       	bra	@r0		
    9054:	3e 53       	add	#-1,	r14	;r3 As==11
    9056:	00 00       	bra	@r0		
    9058:	80 00 f8 02 	bra	#0x002f8	
    905c:	00 00       	bra	@r0		
    905e:	00 00       	bra	@r0		
    9060:	47 53       	add.b	#0,	r7	;r3 As==00
    9062:	00 00       	bra	@r0		
    9064:	80 00 f9 02 	bra	#0x002f9	
    9068:	08 00       	mova	@r0,	r8	
    906a:	00 00       	bra	@r0		
    906c:	50 53       	inc.b	r0		
    906e:	00 00       	bra	@r0		
    9070:	80 00 fa 02 	bra	#0x002fa	
    9074:	10 00       	bra	#0x00000	
    9076:	00 00       	bra	@r0		
    9078:	9c 53 00 00 	inc	0(r12)		;0x0000(r12)
    907c:	40 00       	rrcm.a	#1,	r0	
    907e:	fb 02       	suba	r2,	r11	
    9080:	0f 00       	mova	@r0,	r15	
    9082:	00 00       	bra	@r0		
    9084:	66 53       	incd.b	r6		
    9086:	00 00       	bra	@r0		
    9088:	80 00 fc 02 	bra	#0x002fc	
    908c:	18 00       	mova	#0x00000,r8	
    908e:	00 00       	bra	@r0		
    9090:	70 53       	add.b	#-1,	r0	;r3 As==11
    9092:	00 00       	bra	@r0		
    9094:	80 00 fc 02 	bra	#0x002fc	
    9098:	1c 00       	mova	#0x00000,r12	
    909a:	00 00       	bra	@r0		
    909c:	00 00       	bra	@r0		
    909e:	00 00       	bra	@r0		
    90a0:	c0 00       	bra	r0		
    90a2:	00 00       	bra	@r0		
    90a4:	06 00       	mova	@r0,	r6	
    90a6:	00 00       	bra	@r0		
    90a8:	00 00       	bra	@r0		
    90aa:	00 00       	bra	@r0		
    90ac:	e0 00       	adda	r0,	r0	
    90ae:	00 00       	bra	@r0		
    90b0:	44 00       	rrcm.a	#1,	r4	
    90b2:	00 00       	bra	@r0		
    90b4:	00 00       	bra	@r0		
    90b6:	00 00       	bra	@r0		
    90b8:	24 00 00 00 	mova	&0x00000,r4	
    90bc:	4c 00       	rrcm.a	#1,	r12	
    90be:	00 00       	bra	@r0		
    90c0:	af 53 00 00 	incd	0(r15)		;0x0000(r15)
    90c4:	24 00 4f 02 	mova	&0x0024f,r4	
    90c8:	ec 57 00 00 	add.b	@r7,	0(r12)	;0x0000(r12)
    90cc:	8a 52 00 00 	add	r2,	0(r10)	;0x0000(r10)
    90d0:	40 00       	rrcm.a	#1,	r0	
    90d2:	4c 02       	rlam.a	#1,	r12	
    90d4:	09 00       	mova	@r0,	r9	
    90d6:	00 00       	bra	@r0		
    90d8:	93 52 00 00 	add	&0x0000,#1	;r3 As==01
    90dc:	40 00       	rrcm.a	#1,	r0	
    90de:	4d 02       	rlam.a	#1,	r13	
    90e0:	06 00       	mova	@r0,	r6	
    90e2:	00 00       	bra	@r0		
    90e4:	c3 53       	add.b	#0,	#1	;r3 As==00, r3 As==01
    90e6:	00 00       	bra	@r0		
    90e8:	a0 00 4e 02 	adda	#0x0024e,r0	
	...
    90f4:	44 00       	rrcm.a	#1,	r4	
    90f6:	4f 02       	rlam.a	#1,	r15	
	...
    9100:	44 00       	rrcm.a	#1,	r4	
    9102:	50 02       	rlam	#1,	r0	
    9104:	1c 00       	mova	#0x00000,r12	
    9106:	00 00       	bra	@r0		
    9108:	00 00       	bra	@r0		
    910a:	00 00       	bra	@r0		
    910c:	44 00       	rrcm.a	#1,	r4	
    910e:	51 02       	rlam	#1,	r1	
    9110:	24 00 00 00 	mova	&0x00000,r4	
    9114:	00 00       	bra	@r0		
    9116:	00 00       	bra	@r0		
    9118:	44 00       	rrcm.a	#1,	r4	
    911a:	9a 00 28 00 	cmpa	#0x00028,r10	
    911e:	00 00       	bra	@r0		
    9120:	00 00       	bra	@r0		
    9122:	00 00       	bra	@r0		
    9124:	44 00       	rrcm.a	#1,	r4	
    9126:	99 00 32 00 	cmpa	#0x00032,r9	
    912a:	00 00       	bra	@r0		
    912c:	00 00       	bra	@r0		
    912e:	00 00       	bra	@r0		
    9130:	44 00       	rrcm.a	#1,	r4	
    9132:	9a 00 36 00 	cmpa	#0x00036,r10	
    9136:	00 00       	bra	@r0		
    9138:	00 00       	bra	@r0		
    913a:	00 00       	bra	@r0		
    913c:	44 00       	rrcm.a	#1,	r4	
    913e:	99 00 40 00 	cmpa	#0x00040,r9	
    9142:	00 00       	bra	@r0		
    9144:	00 00       	bra	@r0		
    9146:	00 00       	bra	@r0		
    9148:	44 00       	rrcm.a	#1,	r4	
    914a:	a1 00 44 00 	adda	#0x00044,r1	
    914e:	00 00       	bra	@r0		
    9150:	00 00       	bra	@r0		
    9152:	00 00       	bra	@r0		
    9154:	44 00       	rrcm.a	#1,	r4	
    9156:	a0 00 4a 00 	adda	#0x0004a,r0	
    915a:	00 00       	bra	@r0		
    915c:	00 00       	bra	@r0		
    915e:	00 00       	bra	@r0		
    9160:	44 00       	rrcm.a	#1,	r4	
    9162:	aa 00 4e 00 	adda	#0x0004e,r10	
    9166:	00 00       	bra	@r0		
    9168:	00 00       	bra	@r0		
    916a:	00 00       	bra	@r0		
    916c:	44 00       	rrcm.a	#1,	r4	
    916e:	a9 00 54 00 	adda	#0x00054,r9	
    9172:	00 00       	bra	@r0		
    9174:	00 00       	bra	@r0		
    9176:	00 00       	bra	@r0		
    9178:	44 00       	rrcm.a	#1,	r4	
    917a:	8d 00 58 00 	mova	#0x00058,r13	
    917e:	00 00       	bra	@r0		
    9180:	00 00       	bra	@r0		
    9182:	00 00       	bra	@r0		
    9184:	44 00       	rrcm.a	#1,	r4	
    9186:	6f 02 58 00 	mova	r2,	&0xf0058
    918a:	00 00       	bra	@r0		
    918c:	00 00       	bra	@r0		
    918e:	00 00       	bra	@r0		
    9190:	44 00       	rrcm.a	#1,	r4	
    9192:	70 02 68 00 	mova	r2,	0x0068	;PC rel. 0x091fc
    9196:	00 00       	bra	@r0		
    9198:	00 00       	bra	@r0		
    919a:	00 00       	bra	@r0		
    919c:	44 00       	rrcm.a	#1,	r4	
    919e:	90 00 6c 00 	cmpa	#0x0006c,r0	
    91a2:	00 00       	bra	@r0		
    91a4:	00 00       	bra	@r0		
    91a6:	00 00       	bra	@r0		
    91a8:	44 00       	rrcm.a	#1,	r4	
    91aa:	8d 00 70 00 	mova	#0x00070,r13	
    91ae:	00 00       	bra	@r0		
    91b0:	00 00       	bra	@r0		
    91b2:	00 00       	bra	@r0		
    91b4:	44 00       	rrcm.a	#1,	r4	
    91b6:	a1 00 76 00 	adda	#0x00076,r1	
    91ba:	00 00       	bra	@r0		
    91bc:	00 00       	bra	@r0		
    91be:	00 00       	bra	@r0		
    91c0:	44 00       	rrcm.a	#1,	r4	
    91c2:	a0 00 7c 00 	adda	#0x0007c,r0	
    91c6:	00 00       	bra	@r0		
    91c8:	00 00       	bra	@r0		
    91ca:	00 00       	bra	@r0		
    91cc:	44 00       	rrcm.a	#1,	r4	
    91ce:	aa 00 80 00 	adda	#0x00080,r10	
    91d2:	00 00       	bra	@r0		
    91d4:	00 00       	bra	@r0		
    91d6:	00 00       	bra	@r0		
    91d8:	44 00       	rrcm.a	#1,	r4	
    91da:	a9 00 86 00 	adda	#0x00086,r9	
    91de:	00 00       	bra	@r0		
    91e0:	00 00       	bra	@r0		
    91e2:	00 00       	bra	@r0		
    91e4:	44 00       	rrcm.a	#1,	r4	
    91e6:	74 02 8a 00 	mova	r2,	138(r4)	;0x008a(r4)
    91ea:	00 00       	bra	@r0		
    91ec:	00 00       	bra	@r0		
    91ee:	00 00       	bra	@r0		
    91f0:	44 00       	rrcm.a	#1,	r4	
    91f2:	75 02 9a 00 	mova	r2,	154(r5)	;0x009a(r5)
    91f6:	00 00       	bra	@r0		
    91f8:	00 00       	bra	@r0		
    91fa:	00 00       	bra	@r0		
    91fc:	44 00       	rrcm.a	#1,	r4	
    91fe:	aa 00 a2 00 	adda	#0x000a2,r10	
    9202:	00 00       	bra	@r0		
    9204:	00 00       	bra	@r0		
    9206:	00 00       	bra	@r0		
    9208:	44 00       	rrcm.a	#1,	r4	
    920a:	a9 00 a8 00 	adda	#0x000a8,r9	
    920e:	00 00       	bra	@r0		
    9210:	00 00       	bra	@r0		
    9212:	00 00       	bra	@r0		
    9214:	44 00       	rrcm.a	#1,	r4	
    9216:	aa 00 ac 00 	adda	#0x000ac,r10	
    921a:	00 00       	bra	@r0		
    921c:	00 00       	bra	@r0		
    921e:	00 00       	bra	@r0		
    9220:	44 00       	rrcm.a	#1,	r4	
    9222:	a9 00 b2 00 	adda	#0x000b2,r9	
    9226:	00 00       	bra	@r0		
    9228:	00 00       	bra	@r0		
    922a:	00 00       	bra	@r0		
    922c:	44 00       	rrcm.a	#1,	r4	
    922e:	7d 02 b6 00 	mova	r2,	182(r13);0x00b6(r13)
    9232:	00 00       	bra	@r0		
    9234:	00 00       	bra	@r0		
    9236:	00 00       	bra	@r0		
    9238:	44 00       	rrcm.a	#1,	r4	
    923a:	7e 02 be 00 	mova	r2,	190(r14);0x00be(r14)
    923e:	00 00       	bra	@r0		
    9240:	00 00       	bra	@r0		
    9242:	00 00       	bra	@r0		
    9244:	44 00       	rrcm.a	#1,	r4	
    9246:	7f 02 c6 00 	mova	r2,	198(r15);0x00c6(r15)
    924a:	00 00       	bra	@r0		
    924c:	00 00       	bra	@r0		
    924e:	00 00       	bra	@r0		
    9250:	44 00       	rrcm.a	#1,	r4	
    9252:	83 02       	.word	0x0283;	????	Illegal as address instr
    9254:	ca 00       	mova	r0,	r10	
    9256:	00 00       	bra	@r0		
    9258:	00 00       	bra	@r0		
    925a:	00 00       	bra	@r0		
    925c:	44 00       	rrcm.a	#1,	r4	
    925e:	87 02 d0 00 	mova	#0x200d0,r7	
    9262:	00 00       	bra	@r0		
    9264:	00 00       	bra	@r0		
    9266:	00 00       	bra	@r0		
    9268:	44 00       	rrcm.a	#1,	r4	
    926a:	89 02 dc 00 	mova	#0x200dc,r9	
    926e:	00 00       	bra	@r0		
    9270:	00 00       	bra	@r0		
    9272:	00 00       	bra	@r0		
    9274:	44 00       	rrcm.a	#1,	r4	
    9276:	8a 02 fa 00 	mova	#0x200fa,r10	
    927a:	00 00       	bra	@r0		
    927c:	00 00       	bra	@r0		
    927e:	00 00       	bra	@r0		
    9280:	44 00       	rrcm.a	#1,	r4	
    9282:	8c 02 0e 01 	mova	#0x2010e,r12	
    9286:	00 00       	bra	@r0		
    9288:	00 00       	bra	@r0		
    928a:	00 00       	bra	@r0		
    928c:	44 00       	rrcm.a	#1,	r4	
    928e:	8d 02 12 01 	mova	#0x20112,r13	
    9292:	00 00       	bra	@r0		
    9294:	00 00       	bra	@r0		
    9296:	00 00       	bra	@r0		
    9298:	44 00       	rrcm.a	#1,	r4	
    929a:	8f 02 18 01 	mova	#0x20118,r15	
    929e:	00 00       	bra	@r0		
    92a0:	00 00       	bra	@r0		
    92a2:	00 00       	bra	@r0		
    92a4:	44 00       	rrcm.a	#1,	r4	
    92a6:	91 02 1a 01 	cmpa	#0x2011a,r1	
    92aa:	00 00       	bra	@r0		
    92ac:	00 00       	bra	@r0		
    92ae:	00 00       	bra	@r0		
    92b0:	44 00       	rrcm.a	#1,	r4	
    92b2:	92 02 1e 01 	cmpa	#0x2011e,r2	
    92b6:	00 00       	bra	@r0		
    92b8:	00 00       	bra	@r0		
    92ba:	00 00       	bra	@r0		
    92bc:	44 00       	rrcm.a	#1,	r4	
    92be:	83 02       	.word	0x0283;	????	Illegal as address instr
    92c0:	24 01 00 00 	mova	&0x10000,r4	
    92c4:	00 00       	bra	@r0		
    92c6:	00 00       	bra	@r0		
    92c8:	44 00       	rrcm.a	#1,	r4	
    92ca:	ba 02 30 01 	suba	#0x20130,r10	
    92ce:	00 00       	bra	@r0		
    92d0:	00 00       	bra	@r0		
    92d2:	00 00       	bra	@r0		
    92d4:	44 00       	rrcm.a	#1,	r4	
    92d6:	bb 02 3e 01 	suba	#0x2013e,r11	
    92da:	00 00       	bra	@r0		
    92dc:	00 00       	bra	@r0		
    92de:	00 00       	bra	@r0		
    92e0:	44 00       	rrcm.a	#1,	r4	
    92e2:	bd 02 50 01 	suba	#0x20150,r13	
    92e6:	00 00       	bra	@r0		
    92e8:	00 00       	bra	@r0		
    92ea:	00 00       	bra	@r0		
    92ec:	44 00       	rrcm.a	#1,	r4	
    92ee:	c1 02       	mova	r2,	r1	
    92f0:	56 01       	rram	#1,	r6	
    92f2:	00 00       	bra	@r0		
    92f4:	00 00       	bra	@r0		
    92f6:	00 00       	bra	@r0		
    92f8:	44 00       	rrcm.a	#1,	r4	
    92fa:	c3 02       	.word	0x02c3;	????	Illegal as address instr
    92fc:	5c 01       	rram	#1,	r12	
    92fe:	00 00       	bra	@r0		
    9300:	00 00       	bra	@r0		
    9302:	00 00       	bra	@r0		
    9304:	44 00       	rrcm.a	#1,	r4	
    9306:	c4 02       	mova	r2,	r4	
    9308:	62 01 00 00 	mova	r1,	&0x20000
    930c:	00 00       	bra	@r0		
    930e:	00 00       	bra	@r0		
    9310:	44 00       	rrcm.a	#1,	r4	
    9312:	c6 02       	mova	r2,	r6	
    9314:	6e 01 00 00 	mova	r1,	&0xe0000
    9318:	00 00       	bra	@r0		
    931a:	00 00       	bra	@r0		
    931c:	44 00       	rrcm.a	#1,	r4	
    931e:	c7 02       	mova	r2,	r7	
    9320:	78 01 00 00 	mova	r1,	0(r8)	;0x0000(r8)
    9324:	00 00       	bra	@r0		
    9326:	00 00       	bra	@r0		
    9328:	44 00       	rrcm.a	#1,	r4	
    932a:	c9 02       	mova	r2,	r9	
    932c:	7e 01 00 00 	mova	r1,	0(r14)	;0x0000(r14)
    9330:	00 00       	bra	@r0		
    9332:	00 00       	bra	@r0		
    9334:	44 00       	rrcm.a	#1,	r4	
    9336:	cb 02       	mova	r2,	r11	
    9338:	8a 01 00 00 	mova	#0x10000,r10	
    933c:	00 00       	bra	@r0		
    933e:	00 00       	bra	@r0		
    9340:	44 00       	rrcm.a	#1,	r4	
    9342:	cd 02       	mova	r2,	r13	
    9344:	90 01 00 00 	cmpa	#0x10000,r0	
    9348:	00 00       	bra	@r0		
    934a:	00 00       	bra	@r0		
    934c:	44 00       	rrcm.a	#1,	r4	
    934e:	cf 02       	mova	r2,	r15	
    9350:	96 01 00 00 	cmpa	#0x10000,r6	
    9354:	00 00       	bra	@r0		
    9356:	00 00       	bra	@r0		
    9358:	44 00       	rrcm.a	#1,	r4	
    935a:	d0 02       	cmpa	r2,	r0	
    935c:	9a 01 00 00 	cmpa	#0x10000,r10	
    9360:	00 00       	bra	@r0		
    9362:	00 00       	bra	@r0		
    9364:	44 00       	rrcm.a	#1,	r4	
    9366:	d1 02       	cmpa	r2,	r1	
    9368:	a2 01 00 00 	adda	#0x10000,r2	
    936c:	00 00       	bra	@r0		
    936e:	00 00       	bra	@r0		
    9370:	44 00       	rrcm.a	#1,	r4	
    9372:	d2 02       	cmpa	r2,	r2	
    9374:	a4 01 00 00 	adda	#0x10000,r4	
    9378:	00 00       	bra	@r0		
    937a:	00 00       	bra	@r0		
    937c:	44 00       	rrcm.a	#1,	r4	
    937e:	e3 02       	.word	0x02e3;	????	Illegal as address instr
    9380:	b6 01 00 00 	suba	#0x10000,r6	
    9384:	00 00       	bra	@r0		
    9386:	00 00       	bra	@r0		
    9388:	44 00       	rrcm.a	#1,	r4	
    938a:	f0 02       	suba	r2,	r0	
    938c:	ca 01       	mova	r1,	r10	
    938e:	00 00       	bra	@r0		
    9390:	00 00       	bra	@r0		
    9392:	00 00       	bra	@r0		
    9394:	44 00       	rrcm.a	#1,	r4	
    9396:	f1 02       	suba	r2,	r1	
    9398:	d4 01       	cmpa	r1,	r4	
    939a:	00 00       	bra	@r0		
    939c:	00 00       	bra	@r0		
    939e:	00 00       	bra	@r0		
    93a0:	44 00       	rrcm.a	#1,	r4	
    93a2:	f2 02       	suba	r2,	r2	
    93a4:	da 01       	cmpa	r1,	r10	
    93a6:	00 00       	bra	@r0		
    93a8:	00 00       	bra	@r0		
    93aa:	00 00       	bra	@r0		
    93ac:	44 00       	rrcm.a	#1,	r4	
    93ae:	e5 02       	adda	r2,	r5	
    93b0:	de 01       	cmpa	r1,	r14	
    93b2:	00 00       	bra	@r0		
    93b4:	00 00       	bra	@r0		
    93b6:	00 00       	bra	@r0		
    93b8:	44 00       	rrcm.a	#1,	r4	
    93ba:	ea 02       	adda	r2,	r10	
    93bc:	e2 01       	adda	r1,	r2	
    93be:	00 00       	bra	@r0		
    93c0:	00 00       	bra	@r0		
    93c2:	00 00       	bra	@r0		
    93c4:	44 00       	rrcm.a	#1,	r4	
    93c6:	ed 02       	adda	r2,	r13	
    93c8:	ee 01       	adda	r1,	r14	
    93ca:	00 00       	bra	@r0		
    93cc:	00 00       	bra	@r0		
    93ce:	00 00       	bra	@r0		
    93d0:	44 00       	rrcm.a	#1,	r4	
    93d2:	f3 02       	.word	0x02f3;	????	Illegal as address instr
    93d4:	06 02       	mova	#4,	r6	;r2 As==10
    93d6:	00 00       	bra	@r0		
    93d8:	ce 53 00 00 	add.b	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    93dc:	80 00 50 02 	bra	#0x00250	
    93e0:	02 00       	mova	@r0,	r2	
    93e2:	00 00       	bra	@r0		
    93e4:	d8 53 00 00 	inc.b	0(r8)		;0x0000(r8)
    93e8:	40 00       	rrcm.a	#1,	r0	
    93ea:	51 02       	rlam	#1,	r1	
    93ec:	04 00       	mova	@r0,	r4	
    93ee:	00 00       	bra	@r0		
    93f0:	00 00       	bra	@r0		
    93f2:	00 00       	bra	@r0		
    93f4:	c0 00       	bra	r0		
    93f6:	00 00       	bra	@r0		
    93f8:	1c 00       	mova	#0x00000,r12	
    93fa:	00 00       	bra	@r0		
    93fc:	e4 53 00 00 	incd.b	0(r4)		;0x0000(r4)
    9400:	40 00       	rrcm.a	#1,	r0	
    9402:	7d 02 0a 00 	mova	r2,	10(r13)	;0x000a(r13)
    9406:	00 00       	bra	@r0		
    9408:	ed 53 00 00 	incd.b	0(r13)		;0x0000(r13)
    940c:	40 00       	rrcm.a	#1,	r0	
    940e:	7e 02 0c 00 	mova	r2,	12(r14)	;0x000c(r14)
    9412:	00 00       	bra	@r0		
    9414:	f9 53 00 00 	add.b	#-1,	0(r9)	;r3 As==11, 0x0000(r9)
    9418:	40 00       	rrcm.a	#1,	r0	
    941a:	7f 02 07 00 	mova	r2,	7(r15)	;0x0007(r15)
    941e:	00 00       	bra	@r0		
    9420:	06 54       	add	r4,	r6	
    9422:	00 00       	bra	@r0		
    9424:	80 00 80 02 	bra	#0x00280	
    9428:	06 00       	mova	@r0,	r6	
    942a:	00 00       	bra	@r0		
    942c:	00 00       	bra	@r0		
    942e:	00 00       	bra	@r0		
    9430:	c0 00       	bra	r0		
    9432:	00 00       	bra	@r0		
    9434:	b6 00 00 00 	suba	#0x00000,r6	
    9438:	10 54 00 00 	add	0(r4),	r0	;0x0000(r4)
    943c:	80 00 85 02 	bra	#0x00285	
    9440:	08 00       	mova	@r0,	r8	
    9442:	00 00       	bra	@r0		
    9444:	00 00       	bra	@r0		
    9446:	00 00       	bra	@r0		
    9448:	c0 00       	bra	r0		
    944a:	00 00       	bra	@r0		
    944c:	d0 00       	cmpa	r0,	r0	
    944e:	00 00       	bra	@r0		
    9450:	00 00       	bra	@r0		
    9452:	00 00       	bra	@r0		
    9454:	e0 00       	adda	r0,	r0	
    9456:	00 00       	bra	@r0		
    9458:	24 01 00 00 	mova	&0x10000,r4	
    945c:	00 00       	bra	@r0		
    945e:	00 00       	bra	@r0		
    9460:	e0 00       	adda	r0,	r0	
    9462:	00 00       	bra	@r0		
    9464:	30 01 00 00 	bra	0(r1)		;0x0000(r1)
    9468:	00 00       	bra	@r0		
    946a:	00 00       	bra	@r0		
    946c:	e0 00       	adda	r0,	r0	
    946e:	00 00       	bra	@r0		
    9470:	06 02       	mova	#4,	r6	;r2 As==10
    9472:	00 00       	bra	@r0		
    9474:	00 00       	bra	@r0		
    9476:	00 00       	bra	@r0		
    9478:	24 00 00 00 	mova	&0x00000,r4	
    947c:	1e 02       	mova	#8,	r14	;r2 As==11
    947e:	00 00       	bra	@r0		
    9480:	00 00       	bra	@r0		
    9482:	00 00       	bra	@r0		
    9484:	64 00 00 00 	mova	r0,	&0x40000
    9488:	0a 5a       	rla	r10		
    948a:	00 00       	bra	@r0		
    948c:	10 4b 00 00 	br	0(r11)		;0x0000(r11)
    9490:	64 00 00 00 	mova	r0,	&0x40000
    9494:	0a 5a       	rla	r10		
    9496:	00 00       	bra	@r0		
    9498:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    949c:	64 00 00 00 	mova	r0,	&0x40000
    94a0:	0a 5a       	rla	r10		
    94a2:	00 00       	bra	@r0		
    94a4:	6a 00 00 00 	mova	r0,	&0xa0000
    94a8:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x094aa
    94ac:	00 00       	bra	@r0		
    94ae:	00 00       	bra	@r0		
    94b0:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    94b4:	80 00 00 00 	bra	#0x00000	
    94b8:	00 00       	bra	@r0		
    94ba:	00 00       	bra	@r0		
    94bc:	99 00 00 00 	cmpa	#0x00000,r9	
    94c0:	80 00 00 00 	bra	#0x00000	
    94c4:	00 00       	bra	@r0		
    94c6:	00 00       	bra	@r0		
    94c8:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    94ca:	00 00       	bra	@r0		
    94cc:	80 00 00 00 	bra	#0x00000	
    94d0:	00 00       	bra	@r0		
    94d2:	00 00       	bra	@r0		
    94d4:	ec 00       	adda	r0,	r12	
    94d6:	00 00       	bra	@r0		
    94d8:	80 00 00 00 	bra	#0x00000	
    94dc:	00 00       	bra	@r0		
    94de:	00 00       	bra	@r0		
    94e0:	24 01 00 00 	mova	&0x10000,r4	
    94e4:	80 00 00 00 	bra	#0x00000	
    94e8:	00 00       	bra	@r0		
    94ea:	00 00       	bra	@r0		
    94ec:	66 01 00 00 	mova	r1,	&0x60000
    94f0:	80 00 00 00 	bra	#0x00000	
    94f4:	00 00       	bra	@r0		
    94f6:	00 00       	bra	@r0		
    94f8:	b7 01 00 00 	suba	#0x10000,r7	
    94fc:	80 00 00 00 	bra	#0x00000	
    9500:	00 00       	bra	@r0		
    9502:	00 00       	bra	@r0		
    9504:	08 02       	mova	#4,	r8	;r2 As==10
    9506:	00 00       	bra	@r0		
    9508:	80 00 00 00 	bra	#0x00000	
    950c:	00 00       	bra	@r0		
    950e:	00 00       	bra	@r0		
    9510:	2e 02 00 00 	mova	&0x20000,r14	
    9514:	80 00 00 00 	bra	#0x00000	
    9518:	00 00       	bra	@r0		
    951a:	00 00       	bra	@r0		
    951c:	6c 02 00 00 	mova	r2,	&0xc0000
    9520:	80 00 00 00 	bra	#0x00000	
    9524:	00 00       	bra	@r0		
    9526:	00 00       	bra	@r0		
    9528:	96 02 00 00 	cmpa	#0x20000,r6	
    952c:	80 00 00 00 	bra	#0x00000	
    9530:	00 00       	bra	@r0		
    9532:	00 00       	bra	@r0		
    9534:	bf 02 00 00 	suba	#0x20000,r15	
    9538:	80 00 00 00 	bra	#0x00000	
    953c:	00 00       	bra	@r0		
    953e:	00 00       	bra	@r0		
    9540:	d9 02       	cmpa	r2,	r9	
    9542:	00 00       	bra	@r0		
    9544:	80 00 00 00 	bra	#0x00000	
    9548:	00 00       	bra	@r0		
    954a:	00 00       	bra	@r0		
    954c:	f4 02       	suba	r2,	r4	
    954e:	00 00       	bra	@r0		
    9550:	80 00 00 00 	bra	#0x00000	
    9554:	00 00       	bra	@r0		
    9556:	00 00       	bra	@r0		
    9558:	14 03       	mova	#-1,	r4	;r3 As==11
    955a:	00 00       	bra	@r0		
    955c:	80 00 00 00 	bra	#0x00000	
    9560:	00 00       	bra	@r0		
    9562:	00 00       	bra	@r0		
    9564:	4d 03       	rrum.a	#1,	r13	
    9566:	00 00       	bra	@r0		
    9568:	80 00 00 00 	bra	#0x00000	
    956c:	00 00       	bra	@r0		
    956e:	00 00       	bra	@r0		
    9570:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    9574:	80 00 00 00 	bra	#0x00000	
    9578:	00 00       	bra	@r0		
    957a:	00 00       	bra	@r0		
    957c:	8a 03 00 00 	mova	#0x30000,r10	
    9580:	80 00 00 00 	bra	#0x00000	
    9584:	00 00       	bra	@r0		
    9586:	00 00       	bra	@r0		
    9588:	ae 03 00 00 	adda	#0x30000,r14	
    958c:	80 00 00 00 	bra	#0x00000	
    9590:	00 00       	bra	@r0		
    9592:	00 00       	bra	@r0		
    9594:	d7 03       	tsta	r7		
    9596:	00 00       	bra	@r0		
    9598:	80 00 00 00 	bra	#0x00000	
    959c:	00 00       	bra	@r0		
    959e:	00 00       	bra	@r0		
    95a0:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    95a4:	82 00 00 00 	mova	#0x00000,r2	
    95a8:	3c 32       	jn	$-902    	;abs 0x9222
    95aa:	00 00       	bra	@r0		
    95ac:	4b 4b       	mov.b	r11,	r11	
    95ae:	00 00       	bra	@r0		
    95b0:	c2 00       	mova	r0,	r2	
    95b2:	00 00       	bra	@r0		
    95b4:	e5 1d       	.word	0x1de5;	????	
    95b6:	00 00       	bra	@r0		
    95b8:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    95bc:	c2 00       	mova	r0,	r2	
    95be:	00 00       	bra	@r0		
    95c0:	00 00       	bra	@r0		
    95c2:	00 00       	bra	@r0		
    95c4:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    95c8:	c2 00 
    95ca:	00 00       	bra	@r0		
    95cc:	00 00       	bra	@r0		
    95ce:	00 00       	bra	@r0		
    95d0:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    95d4:	c2 00       	mova	r0,	r2	
    95d6:	00 00       	bra	@r0		
    95d8:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    95dc:	06 4d       	mov	r13,	r6	
    95de:	00 00       	bra	@r0		
    95e0:	c2 00       	mova	r0,	r2	
    95e2:	00 00       	bra	@r0		
    95e4:	00 00       	bra	@r0		
    95e6:	00 00       	bra	@r0		
    95e8:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    95ec:	c2 00       	mova	r0,	r2	
    95ee:	00 00       	bra	@r0		
    95f0:	00 00       	bra	@r0		
    95f2:	00 00       	bra	@r0		
    95f4:	91 4f 00 00 	mov	0(r15),	194(r1)	;0x0000(r15), 0x00c2(r1)
    95f8:	c2 00 
    95fa:	00 00       	bra	@r0		
    95fc:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    9600:	1c 54 00 00 	add	0(r4),	r12	;0x0000(r4)
    9604:	24 00 66 03 	mova	&0x00366,r4	
    9608:	0a 5a       	rla	r10		
    960a:	00 00       	bra	@r0		
    960c:	22 53       	incd	r2		
    960e:	00 00       	bra	@r0		
    9610:	40 00       	rrcm.a	#1,	r0	
    9612:	65 03 0e 00 	mova	#0,	&0x5000e;r3 As==00
    9616:	00 00       	bra	@r0		
    9618:	30 53       	add	#-1,	r0	;r3 As==11
    961a:	00 00       	bra	@r0		
    961c:	40 00       	rrcm.a	#1,	r0	
    961e:	65 03 0c 00 	mova	#0,	&0x5000c;r3 As==00
    9622:	00 00       	bra	@r0		
    9624:	00 00       	bra	@r0		
    9626:	00 00       	bra	@r0		
    9628:	44 00       	rrcm.a	#1,	r4	
    962a:	66 03 00 00 	mova	#0,	&0x60000;r3 As==00
    962e:	00 00       	bra	@r0		
    9630:	00 00       	bra	@r0		
    9632:	00 00       	bra	@r0		
    9634:	44 00       	rrcm.a	#1,	r4	
    9636:	6c 03 06 00 	mova	#0,	&0xc0006;r3 As==00
    963a:	00 00       	bra	@r0		
    963c:	00 00       	bra	@r0		
    963e:	00 00       	bra	@r0		
    9640:	44 00       	rrcm.a	#1,	r4	
    9642:	6d 03 0e 00 	mova	#0,	&0xd000e;r3 As==00
    9646:	00 00       	bra	@r0		
    9648:	00 00       	bra	@r0		
    964a:	00 00       	bra	@r0		
    964c:	44 00       	rrcm.a	#1,	r4	
    964e:	6f 03 16 00 	mova	#0,	&0xf0016;r3 As==00
    9652:	00 00       	bra	@r0		
    9654:	00 00       	bra	@r0		
    9656:	00 00       	bra	@r0		
    9658:	44 00       	rrcm.a	#1,	r4	
    965a:	70 03 22 00 	mova	#0,	0x0022	;r3 As==00, PC rel. 0x0967e
    965e:	00 00       	bra	@r0		
    9660:	00 00       	bra	@r0		
    9662:	00 00       	bra	@r0		
    9664:	44 00       	rrcm.a	#1,	r4	
    9666:	72 03 32 00 	mova	#0,	&0x0032	;r3 As==00
    966a:	00 00       	bra	@r0		
    966c:	00 00       	bra	@r0		
    966e:	00 00       	bra	@r0		
    9670:	44 00       	rrcm.a	#1,	r4	
    9672:	74 03 3a 00 	mova	#0,	58(r4)	;r3 As==00, 0x003a(r4)
    9676:	00 00       	bra	@r0		
    9678:	00 00       	bra	@r0		
    967a:	00 00       	bra	@r0		
    967c:	44 00       	rrcm.a	#1,	r4	
    967e:	75 03 3e 00 	mova	#0,	62(r5)	;r3 As==00, 0x003e(r5)
    9682:	00 00       	bra	@r0		
    9684:	3e 53       	add	#-1,	r14	;r3 As==11
    9686:	00 00       	bra	@r0		
    9688:	80 00 67 03 	bra	#0x00367	
    968c:	00 00       	bra	@r0		
    968e:	00 00       	bra	@r0		
    9690:	47 53       	add.b	#0,	r7	;r3 As==00
    9692:	00 00       	bra	@r0		
    9694:	80 00 68 03 	bra	#0x00368	
    9698:	08 00       	mova	@r0,	r8	
    969a:	00 00       	bra	@r0		
    969c:	9c 53 00 00 	inc	0(r12)		;0x0000(r12)
    96a0:	40 00       	rrcm.a	#1,	r0	
    96a2:	69 03 0f 00 	mova	#0,	&0x9000f;r3 As==00
    96a6:	00 00       	bra	@r0		
    96a8:	66 53       	incd.b	r6		
    96aa:	00 00       	bra	@r0		
    96ac:	80 00 6a 03 	bra	#0x0036a	
    96b0:	10 00       	bra	#0x00000	
    96b2:	00 00       	bra	@r0		
    96b4:	70 53       	add.b	#-1,	r0	;r3 As==11
    96b6:	00 00       	bra	@r0		
    96b8:	80 00 6a 03 	bra	#0x0036a	
    96bc:	14 00       	mova	#0x00000,r4	
    96be:	00 00       	bra	@r0		
    96c0:	00 00       	bra	@r0		
    96c2:	00 00       	bra	@r0		
    96c4:	c0 00       	bra	r0		
    96c6:	00 00       	bra	@r0		
    96c8:	06 00       	mova	@r0,	r6	
    96ca:	00 00       	bra	@r0		
    96cc:	00 00       	bra	@r0		
    96ce:	00 00       	bra	@r0		
    96d0:	e0 00       	adda	r0,	r0	
    96d2:	00 00       	bra	@r0		
    96d4:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x096d6
    96d8:	00 00       	bra	@r0		
    96da:	00 00       	bra	@r0		
    96dc:	24 00 00 00 	mova	&0x00000,r4	
    96e0:	46 00       	rrcm.a	#1,	r6	
    96e2:	00 00       	bra	@r0		
    96e4:	2d 54       	add	@r4,	r13	
    96e6:	00 00       	bra	@r0		
    96e8:	24 00 0e 03 	mova	&0x0030e,r4	
    96ec:	50 5a 00 00 	add.b	0(r10),	r0	;0x0000(r10)
    96f0:	8a 52 00 00 	add	r2,	0(r10)	;0x0000(r10)
    96f4:	40 00       	rrcm.a	#1,	r0	
    96f6:	0c 03       	mova	#2,	r12	;r3 As==10
    96f8:	0b 00       	mova	@r0,	r11	
    96fa:	00 00       	bra	@r0		
    96fc:	93 52 00 00 	add	&0x0000,#1	;r3 As==01
    9700:	40 00       	rrcm.a	#1,	r0	
    9702:	0d 03       	mova	#2,	r13	;r3 As==10
    9704:	0e 00       	mova	@r0,	r14	
    9706:	00 00       	bra	@r0		
    9708:	00 00       	bra	@r0		
    970a:	00 00       	bra	@r0		
    970c:	44 00       	rrcm.a	#1,	r4	
    970e:	0e 03       	mova	#2,	r14	;r3 As==10
	...
    9718:	44 00       	rrcm.a	#1,	r4	
    971a:	9a 00 10 00 	cmpa	#0x00010,r10	
    971e:	00 00       	bra	@r0		
    9720:	00 00       	bra	@r0		
    9722:	00 00       	bra	@r0		
    9724:	44 00       	rrcm.a	#1,	r4	
    9726:	99 00 1a 00 	cmpa	#0x0001a,r9	
    972a:	00 00       	bra	@r0		
    972c:	00 00       	bra	@r0		
    972e:	00 00       	bra	@r0		
    9730:	44 00       	rrcm.a	#1,	r4	
    9732:	9a 00 1e 00 	cmpa	#0x0001e,r10	
    9736:	00 00       	bra	@r0		
    9738:	00 00       	bra	@r0		
    973a:	00 00       	bra	@r0		
    973c:	44 00       	rrcm.a	#1,	r4	
    973e:	99 00 28 00 	cmpa	#0x00028,r9	
    9742:	00 00       	bra	@r0		
    9744:	00 00       	bra	@r0		
    9746:	00 00       	bra	@r0		
    9748:	44 00       	rrcm.a	#1,	r4	
    974a:	1d 03       	mova	#-1,	r13	;r3 As==11
    974c:	2c 00 00 00 	mova	&0x00000,r12	
    9750:	00 00       	bra	@r0		
    9752:	00 00       	bra	@r0		
    9754:	44 00       	rrcm.a	#1,	r4	
    9756:	a1 00 32 00 	adda	#0x00032,r1	
    975a:	00 00       	bra	@r0		
    975c:	00 00       	bra	@r0		
    975e:	00 00       	bra	@r0		
    9760:	44 00       	rrcm.a	#1,	r4	
    9762:	a0 00 38 00 	adda	#0x00038,r0	
    9766:	00 00       	bra	@r0		
    9768:	00 00       	bra	@r0		
    976a:	00 00       	bra	@r0		
    976c:	44 00       	rrcm.a	#1,	r4	
    976e:	aa 00 3c 00 	adda	#0x0003c,r10	
    9772:	00 00       	bra	@r0		
    9774:	00 00       	bra	@r0		
    9776:	00 00       	bra	@r0		
    9778:	44 00       	rrcm.a	#1,	r4	
    977a:	a9 00 42 00 	adda	#0x00042,r9	
    977e:	00 00       	bra	@r0		
    9780:	00 00       	bra	@r0		
    9782:	00 00       	bra	@r0		
    9784:	44 00       	rrcm.a	#1,	r4	
    9786:	21 03 46 00 	mova	&0x30046,r1	
    978a:	00 00       	bra	@r0		
    978c:	00 00       	bra	@r0		
    978e:	00 00       	bra	@r0		
    9790:	44 00       	rrcm.a	#1,	r4	
    9792:	60 03 4a 00 	mova	#0,	&0x0004a;r3 As==00
    9796:	00 00       	bra	@r0		
    9798:	00 00       	bra	@r0		
    979a:	00 00       	bra	@r0		
    979c:	44 00       	rrcm.a	#1,	r4	
    979e:	90 00 4e 00 	cmpa	#0x0004e,r0	
    97a2:	00 00       	bra	@r0		
    97a4:	00 00       	bra	@r0		
    97a6:	00 00       	bra	@r0		
    97a8:	44 00       	rrcm.a	#1,	r4	
    97aa:	8d 00 52 00 	mova	#0x00052,r13	
    97ae:	00 00       	bra	@r0		
    97b0:	00 00       	bra	@r0		
    97b2:	00 00       	bra	@r0		
    97b4:	44 00       	rrcm.a	#1,	r4	
    97b6:	a1 00 54 00 	adda	#0x00054,r1	
    97ba:	00 00       	bra	@r0		
    97bc:	00 00       	bra	@r0		
    97be:	00 00       	bra	@r0		
    97c0:	44 00       	rrcm.a	#1,	r4	
    97c2:	a0 00 5a 00 	adda	#0x0005a,r0	
    97c6:	00 00       	bra	@r0		
    97c8:	00 00       	bra	@r0		
    97ca:	00 00       	bra	@r0		
    97cc:	44 00       	rrcm.a	#1,	r4	
    97ce:	28 03 5e 00 	mova	&0x3005e,r8	
    97d2:	00 00       	bra	@r0		
    97d4:	00 00       	bra	@r0		
    97d6:	00 00       	bra	@r0		
    97d8:	44 00       	rrcm.a	#1,	r4	
    97da:	29 03 66 00 	mova	&0x30066,r9	
    97de:	00 00       	bra	@r0		
    97e0:	00 00       	bra	@r0		
    97e2:	00 00       	bra	@r0		
    97e4:	44 00       	rrcm.a	#1,	r4	
    97e6:	2a 03 6a 00 	mova	&0x3006a,r10	
    97ea:	00 00       	bra	@r0		
    97ec:	00 00       	bra	@r0		
    97ee:	00 00       	bra	@r0		
    97f0:	44 00       	rrcm.a	#1,	r4	
    97f2:	aa 00 6c 00 	adda	#0x0006c,r10	
    97f6:	00 00       	bra	@r0		
    97f8:	00 00       	bra	@r0		
    97fa:	00 00       	bra	@r0		
    97fc:	44 00       	rrcm.a	#1,	r4	
    97fe:	a9 00 72 00 	adda	#0x00072,r9	
    9802:	00 00       	bra	@r0		
    9804:	00 00       	bra	@r0		
    9806:	00 00       	bra	@r0		
    9808:	44 00       	rrcm.a	#1,	r4	
    980a:	2e 03 76 00 	mova	&0x30076,r14	
    980e:	00 00       	bra	@r0		
    9810:	00 00       	bra	@r0		
    9812:	00 00       	bra	@r0		
    9814:	44 00       	rrcm.a	#1,	r4	
    9816:	2f 03 7a 00 	mova	&0x3007a,r15	
    981a:	00 00       	bra	@r0		
    981c:	00 00       	bra	@r0		
    981e:	00 00       	bra	@r0		
    9820:	44 00       	rrcm.a	#1,	r4	
    9822:	39 03 7c 00 	mova	#1,	r9	;r3 As==01
    9826:	00 00       	bra	@r0		
    9828:	00 00       	bra	@r0		
    982a:	00 00       	bra	@r0		
    982c:	44 00       	rrcm.a	#1,	r4	
    982e:	3a 03 88 00 	mova	#1,	r10	;r3 As==01
    9832:	00 00       	bra	@r0		
    9834:	00 00       	bra	@r0		
    9836:	00 00       	bra	@r0		
    9838:	44 00       	rrcm.a	#1,	r4	
    983a:	3b 03 90 00 	mova	#1,	r11	;r3 As==01
    983e:	00 00       	bra	@r0		
    9840:	00 00       	bra	@r0		
    9842:	00 00       	bra	@r0		
    9844:	44 00       	rrcm.a	#1,	r4	
    9846:	3d 03 98 00 	mova	#1,	r13	;r3 As==01
    984a:	00 00       	bra	@r0		
    984c:	00 00       	bra	@r0		
    984e:	00 00       	bra	@r0		
    9850:	44 00       	rrcm.a	#1,	r4	
    9852:	40 03       	rrum.a	#1,	r0	
    9854:	a2 00 00 00 	adda	#0x00000,r2	
    9858:	00 00       	bra	@r0		
    985a:	00 00       	bra	@r0		
    985c:	44 00       	rrcm.a	#1,	r4	
    985e:	41 03       	rrum.a	#1,	r1	
    9860:	a6 00 00 00 	adda	#0x00000,r6	
    9864:	00 00       	bra	@r0		
    9866:	00 00       	bra	@r0		
    9868:	44 00       	rrcm.a	#1,	r4	
    986a:	43 03       	rrum.a	#1,	#0	;r3 As==00
    986c:	ac 00 00 00 	adda	#0x00000,r12	
    9870:	00 00       	bra	@r0		
    9872:	00 00       	bra	@r0		
    9874:	44 00       	rrcm.a	#1,	r4	
    9876:	44 03       	rrum.a	#1,	r4	
    9878:	b2 00 00 00 	suba	#0x00000,r2	
    987c:	00 00       	bra	@r0		
    987e:	00 00       	bra	@r0		
    9880:	44 00       	rrcm.a	#1,	r4	
    9882:	48 03       	rrum.a	#1,	r8	
    9884:	b6 00 00 00 	suba	#0x00000,r6	
    9888:	00 00       	bra	@r0		
    988a:	00 00       	bra	@r0		
    988c:	44 00       	rrcm.a	#1,	r4	
    988e:	4a 03       	rrum.a	#1,	r10	
    9890:	c0 00       	bra	r0		
    9892:	00 00       	bra	@r0		
    9894:	00 00       	bra	@r0		
    9896:	00 00       	bra	@r0		
    9898:	44 00       	rrcm.a	#1,	r4	
    989a:	4b 03       	rrum.a	#1,	r11	
    989c:	c4 00       	mova	r0,	r4	
    989e:	00 00       	bra	@r0		
    98a0:	00 00       	bra	@r0		
    98a2:	00 00       	bra	@r0		
    98a4:	44 00       	rrcm.a	#1,	r4	
    98a6:	4d 03       	rrum.a	#1,	r13	
    98a8:	c8 00       	mova	r0,	r8	
    98aa:	00 00       	bra	@r0		
    98ac:	00 00       	bra	@r0		
    98ae:	00 00       	bra	@r0		
    98b0:	44 00       	rrcm.a	#1,	r4	
    98b2:	4e 03       	rrum.a	#1,	r14	
    98b4:	ce 00       	mova	r0,	r14	
    98b6:	00 00       	bra	@r0		
    98b8:	00 00       	bra	@r0		
    98ba:	00 00       	bra	@r0		
    98bc:	44 00       	rrcm.a	#1,	r4	
    98be:	51 03       	rrum	#1,	r1	
    98c0:	da 00       	cmpa	r0,	r10	
    98c2:	00 00       	bra	@r0		
    98c4:	00 00       	bra	@r0		
    98c6:	00 00       	bra	@r0		
    98c8:	44 00       	rrcm.a	#1,	r4	
    98ca:	5f 03       	rrum	#1,	r15	
    98cc:	ee 00       	adda	r0,	r14	
    98ce:	00 00       	bra	@r0		
    98d0:	00 00       	bra	@r0		
    98d2:	00 00       	bra	@r0		
    98d4:	44 00       	rrcm.a	#1,	r4	
    98d6:	53 03       	rrum	#1,	#0	;r3 As==00
    98d8:	f8 00       	suba	r0,	r8	
    98da:	00 00       	bra	@r0		
    98dc:	00 00       	bra	@r0		
    98de:	00 00       	bra	@r0		
    98e0:	44 00       	rrcm.a	#1,	r4	
    98e2:	58 03       	rrum	#1,	r8	
    98e4:	fc 00       	suba	r0,	r12	
    98e6:	00 00       	bra	@r0		
    98e8:	00 00       	bra	@r0		
    98ea:	00 00       	bra	@r0		
    98ec:	44 00       	rrcm.a	#1,	r4	
    98ee:	5b 03       	rrum	#1,	r11	
    98f0:	02 01       	mova	@r1,	r2	
    98f2:	00 00       	bra	@r0		
    98f4:	00 00       	bra	@r0		
    98f6:	00 00       	bra	@r0		
    98f8:	44 00       	rrcm.a	#1,	r4	
    98fa:	62 03 1a 01 	mova	#0,	&0x2011a;r3 As==00
    98fe:	00 00       	bra	@r0		
    9900:	41 54       	add.b	r4,	r1	
    9902:	00 00       	bra	@r0		
    9904:	40 00       	rrcm.a	#1,	r0	
    9906:	0f 03       	mova	#2,	r15	;r3 As==10
    9908:	0e 00       	mova	@r0,	r14	
    990a:	00 00       	bra	@r0		
    990c:	4c 54       	add.b	r4,	r12	
    990e:	00 00       	bra	@r0		
    9910:	40 00       	rrcm.a	#1,	r0	
    9912:	10 03       	bra	#-1		;r3 As==11
    9914:	09 00       	mova	@r0,	r9	
    9916:	00 00       	bra	@r0		
    9918:	5d 54 00 00 	add.b	0(r4),	r13	;0x0000(r4)
    991c:	40 00       	rrcm.a	#1,	r0	
    991e:	11 03       	mova	#-1,	r1	;r3 As==11
    9920:	07 00       	mova	@r0,	r7	
    9922:	00 00       	bra	@r0		
    9924:	70 54       	add.b	@r4+,	r0	
    9926:	00 00       	bra	@r0		
    9928:	40 00       	rrcm.a	#1,	r0	
    992a:	12 03       	mova	#-1,	r2	;r3 As==11
    992c:	05 00       	mova	@r0,	r5	
    992e:	00 00       	bra	@r0		
    9930:	00 00       	bra	@r0		
    9932:	00 00       	bra	@r0		
    9934:	c0 00       	bra	r0		
    9936:	00 00       	bra	@r0		
    9938:	10 00       	bra	#0x00000	
    993a:	00 00       	bra	@r0		
    993c:	00 00       	bra	@r0		
    993e:	00 00       	bra	@r0		
    9940:	e0 00       	adda	r0,	r0	
    9942:	00 00       	bra	@r0		
    9944:	1a 01       	mova	@r1+,	r10	
    9946:	00 00       	bra	@r0		
    9948:	00 00       	bra	@r0		
    994a:	00 00       	bra	@r0		
    994c:	24 00 00 00 	mova	&0x00000,r4	
    9950:	2c 01 00 00 	mova	&0x10000,r12	
    9954:	00 00       	bra	@r0		
    9956:	00 00       	bra	@r0		
    9958:	64 00 00 00 	mova	r0,	&0x40000
    995c:	7c 5b       	add.b	@r11+,	r12	
    995e:	00 00       	bra	@r0		
    9960:	10 4b 00 00 	br	0(r11)		;0x0000(r11)
    9964:	64 00 00 00 	mova	r0,	&0x40000
    9968:	7c 5b       	add.b	@r11+,	r12	
    996a:	00 00       	bra	@r0		
    996c:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    9970:	64 00 00 00 	mova	r0,	&0x40000
    9974:	7c 5b       	add.b	@r11+,	r12	
    9976:	00 00       	bra	@r0		
    9978:	6a 00 00 00 	mova	r0,	&0xa0000
    997c:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0997e
    9980:	00 00       	bra	@r0		
    9982:	00 00       	bra	@r0		
    9984:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    9988:	80 00 00 00 	bra	#0x00000	
    998c:	00 00       	bra	@r0		
    998e:	00 00       	bra	@r0		
    9990:	99 00 00 00 	cmpa	#0x00000,r9	
    9994:	80 00 00 00 	bra	#0x00000	
    9998:	00 00       	bra	@r0		
    999a:	00 00       	bra	@r0		
    999c:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    999e:	00 00       	bra	@r0		
    99a0:	80 00 00 00 	bra	#0x00000	
    99a4:	00 00       	bra	@r0		
    99a6:	00 00       	bra	@r0		
    99a8:	ec 00       	adda	r0,	r12	
    99aa:	00 00       	bra	@r0		
    99ac:	80 00 00 00 	bra	#0x00000	
    99b0:	00 00       	bra	@r0		
    99b2:	00 00       	bra	@r0		
    99b4:	24 01 00 00 	mova	&0x10000,r4	
    99b8:	80 00 00 00 	bra	#0x00000	
    99bc:	00 00       	bra	@r0		
    99be:	00 00       	bra	@r0		
    99c0:	66 01 00 00 	mova	r1,	&0x60000
    99c4:	80 00 00 00 	bra	#0x00000	
    99c8:	00 00       	bra	@r0		
    99ca:	00 00       	bra	@r0		
    99cc:	b7 01 00 00 	suba	#0x10000,r7	
    99d0:	80 00 00 00 	bra	#0x00000	
    99d4:	00 00       	bra	@r0		
    99d6:	00 00       	bra	@r0		
    99d8:	08 02       	mova	#4,	r8	;r2 As==10
    99da:	00 00       	bra	@r0		
    99dc:	80 00 00 00 	bra	#0x00000	
    99e0:	00 00       	bra	@r0		
    99e2:	00 00       	bra	@r0		
    99e4:	2e 02 00 00 	mova	&0x20000,r14	
    99e8:	80 00 00 00 	bra	#0x00000	
    99ec:	00 00       	bra	@r0		
    99ee:	00 00       	bra	@r0		
    99f0:	6c 02 00 00 	mova	r2,	&0xc0000
    99f4:	80 00 00 00 	bra	#0x00000	
    99f8:	00 00       	bra	@r0		
    99fa:	00 00       	bra	@r0		
    99fc:	96 02 00 00 	cmpa	#0x20000,r6	
    9a00:	80 00 00 00 	bra	#0x00000	
    9a04:	00 00       	bra	@r0		
    9a06:	00 00       	bra	@r0		
    9a08:	bf 02 00 00 	suba	#0x20000,r15	
    9a0c:	80 00 00 00 	bra	#0x00000	
    9a10:	00 00       	bra	@r0		
    9a12:	00 00       	bra	@r0		
    9a14:	d9 02       	cmpa	r2,	r9	
    9a16:	00 00       	bra	@r0		
    9a18:	80 00 00 00 	bra	#0x00000	
    9a1c:	00 00       	bra	@r0		
    9a1e:	00 00       	bra	@r0		
    9a20:	f4 02       	suba	r2,	r4	
    9a22:	00 00       	bra	@r0		
    9a24:	80 00 00 00 	bra	#0x00000	
    9a28:	00 00       	bra	@r0		
    9a2a:	00 00       	bra	@r0		
    9a2c:	14 03       	mova	#-1,	r4	;r3 As==11
    9a2e:	00 00       	bra	@r0		
    9a30:	80 00 00 00 	bra	#0x00000	
    9a34:	00 00       	bra	@r0		
    9a36:	00 00       	bra	@r0		
    9a38:	4d 03       	rrum.a	#1,	r13	
    9a3a:	00 00       	bra	@r0		
    9a3c:	80 00 00 00 	bra	#0x00000	
    9a40:	00 00       	bra	@r0		
    9a42:	00 00       	bra	@r0		
    9a44:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    9a48:	80 00 00 00 	bra	#0x00000	
    9a4c:	00 00       	bra	@r0		
    9a4e:	00 00       	bra	@r0		
    9a50:	8a 03 00 00 	mova	#0x30000,r10	
    9a54:	80 00 00 00 	bra	#0x00000	
    9a58:	00 00       	bra	@r0		
    9a5a:	00 00       	bra	@r0		
    9a5c:	ae 03 00 00 	adda	#0x30000,r14	
    9a60:	80 00 00 00 	bra	#0x00000	
    9a64:	00 00       	bra	@r0		
    9a66:	00 00       	bra	@r0		
    9a68:	d7 03       	tsta	r7		
    9a6a:	00 00       	bra	@r0		
    9a6c:	80 00 00 00 	bra	#0x00000	
    9a70:	00 00       	bra	@r0		
    9a72:	00 00       	bra	@r0		
    9a74:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    9a78:	82 00 00 00 	mova	#0x00000,r2	
    9a7c:	77 11       	rra.b	@r7+		
    9a7e:	00 00       	bra	@r0		
    9a80:	4b 4b       	mov.b	r11,	r11	
    9a82:	00 00       	bra	@r0		
    9a84:	c2 00       	mova	r0,	r2	
    9a86:	00 00       	bra	@r0		
    9a88:	e5 1d       	.word	0x1de5;	????	
    9a8a:	00 00       	bra	@r0		
    9a8c:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    9a90:	c2 00       	mova	r0,	r2	
    9a92:	00 00       	bra	@r0		
    9a94:	00 00       	bra	@r0		
    9a96:	00 00       	bra	@r0		
    9a98:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    9a9c:	c2 00 
    9a9e:	00 00       	bra	@r0		
    9aa0:	00 00       	bra	@r0		
    9aa2:	00 00       	bra	@r0		
    9aa4:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    9aa8:	c2 00       	mova	r0,	r2	
    9aaa:	00 00       	bra	@r0		
    9aac:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    9ab0:	06 4d       	mov	r13,	r6	
    9ab2:	00 00       	bra	@r0		
    9ab4:	c2 00       	mova	r0,	r2	
    9ab6:	00 00       	bra	@r0		
    9ab8:	00 00       	bra	@r0		
    9aba:	00 00       	bra	@r0		
    9abc:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    9ac0:	c2 00       	mova	r0,	r2	
    9ac2:	00 00       	bra	@r0		
    9ac4:	00 00       	bra	@r0		
    9ac6:	00 00       	bra	@r0		
    9ac8:	91 4f 00 00 	mov	0(r15),	194(r1)	;0x0000(r15), 0x00c2(r1)
    9acc:	c2 00 
    9ace:	00 00       	bra	@r0		
    9ad0:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    9ad4:	80 54 00 00 	add	r4,	0x0000	;PC rel. 0x09ad8
    9ad8:	24 00 10 04 	mova	&0x00410,r4	
    9adc:	7c 5b       	add.b	@r11+,	r12	
    9ade:	00 00       	bra	@r0		
    9ae0:	22 53       	incd	r2		
    9ae2:	00 00       	bra	@r0		
    9ae4:	40 00       	rrcm.a	#1,	r0	
    9ae6:	0f 04       	mova	@r4,	r15	
    9ae8:	0e 00       	mova	@r0,	r14	
    9aea:	00 00       	bra	@r0		
    9aec:	30 53       	add	#-1,	r0	;r3 As==11
    9aee:	00 00       	bra	@r0		
    9af0:	40 00       	rrcm.a	#1,	r0	
    9af2:	0f 04       	mova	@r4,	r15	
    9af4:	0c 00       	mova	@r0,	r12	
    9af6:	00 00       	bra	@r0		
    9af8:	00 00       	bra	@r0		
    9afa:	00 00       	bra	@r0		
    9afc:	44 00       	rrcm.a	#1,	r4	
    9afe:	10 04       	bra	@r4+		
	...
    9b08:	44 00       	rrcm.a	#1,	r4	
    9b0a:	15 04       	mova	@r4+,	r5	
    9b0c:	06 00       	mova	@r0,	r6	
    9b0e:	00 00       	bra	@r0		
    9b10:	00 00       	bra	@r0		
    9b12:	00 00       	bra	@r0		
    9b14:	44 00       	rrcm.a	#1,	r4	
    9b16:	16 04       	mova	@r4+,	r6	
    9b18:	0e 00       	mova	@r0,	r14	
    9b1a:	00 00       	bra	@r0		
    9b1c:	00 00       	bra	@r0		
    9b1e:	00 00       	bra	@r0		
    9b20:	44 00       	rrcm.a	#1,	r4	
    9b22:	18 04       	mova	@r4+,	r8	
    9b24:	16 00       	mova	#0x00000,r6	
    9b26:	00 00       	bra	@r0		
    9b28:	00 00       	bra	@r0		
    9b2a:	00 00       	bra	@r0		
    9b2c:	44 00       	rrcm.a	#1,	r4	
    9b2e:	19 04       	mova	@r4+,	r9	
    9b30:	22 00 00 00 	mova	&0x00000,r2	
    9b34:	00 00       	bra	@r0		
    9b36:	00 00       	bra	@r0		
    9b38:	44 00       	rrcm.a	#1,	r4	
    9b3a:	9a 00 32 00 	cmpa	#0x00032,r10	
    9b3e:	00 00       	bra	@r0		
    9b40:	00 00       	bra	@r0		
    9b42:	00 00       	bra	@r0		
    9b44:	44 00       	rrcm.a	#1,	r4	
    9b46:	99 00 3c 00 	cmpa	#0x0003c,r9	
    9b4a:	00 00       	bra	@r0		
    9b4c:	00 00       	bra	@r0		
    9b4e:	00 00       	bra	@r0		
    9b50:	44 00       	rrcm.a	#1,	r4	
    9b52:	9a 00 40 00 	cmpa	#0x00040,r10	
    9b56:	00 00       	bra	@r0		
    9b58:	00 00       	bra	@r0		
    9b5a:	00 00       	bra	@r0		
    9b5c:	44 00       	rrcm.a	#1,	r4	
    9b5e:	99 00 4a 00 	cmpa	#0x0004a,r9	
    9b62:	00 00       	bra	@r0		
    9b64:	00 00       	bra	@r0		
    9b66:	00 00       	bra	@r0		
    9b68:	44 00       	rrcm.a	#1,	r4	
    9b6a:	1c 04       	mova	@r4+,	r12	
    9b6c:	4e 00       	rrcm.a	#1,	r14	
    9b6e:	00 00       	bra	@r0		
    9b70:	00 00       	bra	@r0		
    9b72:	00 00       	bra	@r0		
    9b74:	44 00       	rrcm.a	#1,	r4	
    9b76:	1e 04       	mova	@r4+,	r14	
    9b78:	52 00       	rrcm	#1,	r2	
    9b7a:	00 00       	bra	@r0		
    9b7c:	00 00       	bra	@r0		
    9b7e:	00 00       	bra	@r0		
    9b80:	44 00       	rrcm.a	#1,	r4	
    9b82:	1f 04       	mova	@r4+,	r15	
    9b84:	5a 00       	rrcm	#1,	r10	
    9b86:	00 00       	bra	@r0		
    9b88:	3e 53       	add	#-1,	r14	;r3 As==11
    9b8a:	00 00       	bra	@r0		
    9b8c:	80 00 11 04 	bra	#0x00411	
    9b90:	00 00       	bra	@r0		
    9b92:	00 00       	bra	@r0		
    9b94:	47 53       	add.b	#0,	r7	;r3 As==00
    9b96:	00 00       	bra	@r0		
    9b98:	80 00 12 04 	bra	#0x00412	
    9b9c:	08 00       	mova	@r0,	r8	
    9b9e:	00 00       	bra	@r0		
    9ba0:	66 53       	incd.b	r6		
    9ba2:	00 00       	bra	@r0		
    9ba4:	80 00 13 04 	bra	#0x00413	
    9ba8:	10 00       	bra	#0x00000	
    9baa:	00 00       	bra	@r0		
    9bac:	70 53       	add.b	#-1,	r0	;r3 As==11
    9bae:	00 00       	bra	@r0		
    9bb0:	80 00 13 04 	bra	#0x00413	
    9bb4:	14 00       	mova	#0x00000,r4	
    9bb6:	00 00       	bra	@r0		
    9bb8:	00 00       	bra	@r0		
    9bba:	00 00       	bra	@r0		
    9bbc:	c0 00       	bra	r0		
    9bbe:	00 00       	bra	@r0		
    9bc0:	06 00       	mova	@r0,	r6	
    9bc2:	00 00       	bra	@r0		
    9bc4:	00 00       	bra	@r0		
    9bc6:	00 00       	bra	@r0		
    9bc8:	e0 00       	adda	r0,	r0	
    9bca:	00 00       	bra	@r0		
    9bcc:	5a 00       	rrcm	#1,	r10	
    9bce:	00 00       	bra	@r0		
    9bd0:	00 00       	bra	@r0		
    9bd2:	00 00       	bra	@r0		
    9bd4:	24 00 00 00 	mova	&0x00000,r4	
    9bd8:	62 00 00 00 	mova	r0,	&0x20000
    9bdc:	00 00       	bra	@r0		
    9bde:	00 00       	bra	@r0		
    9be0:	64 00 00 00 	mova	r0,	&0x40000
    9be4:	de 5b 00 00 	add.b	0(r11),	19216(r14);0x0000(r11), 0x4b10(r14)
    9be8:	10 4b 
    9bea:	00 00       	bra	@r0		
    9bec:	64 00 00 00 	mova	r0,	&0x40000
    9bf0:	de 5b 00 00 	add.b	0(r11),	20360(r14);0x0000(r11), 0x4f88(r14)
    9bf4:	88 4f 
    9bf6:	00 00       	bra	@r0		
    9bf8:	64 00 00 00 	mova	r0,	&0x40000
    9bfc:	de 5b 00 00 	add.b	0(r11),	106(r14);0x0000(r11), 0x006a(r14)
    9c00:	6a 00 
    9c02:	00 00       	bra	@r0		
    9c04:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x09c06
    9c08:	00 00       	bra	@r0		
    9c0a:	00 00       	bra	@r0		
    9c0c:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    9c10:	80 00 00 00 	bra	#0x00000	
    9c14:	00 00       	bra	@r0		
    9c16:	00 00       	bra	@r0		
    9c18:	99 00 00 00 	cmpa	#0x00000,r9	
    9c1c:	80 00 00 00 	bra	#0x00000	
    9c20:	00 00       	bra	@r0		
    9c22:	00 00       	bra	@r0		
    9c24:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    9c26:	00 00       	bra	@r0		
    9c28:	80 00 00 00 	bra	#0x00000	
    9c2c:	00 00       	bra	@r0		
    9c2e:	00 00       	bra	@r0		
    9c30:	ec 00       	adda	r0,	r12	
    9c32:	00 00       	bra	@r0		
    9c34:	80 00 00 00 	bra	#0x00000	
    9c38:	00 00       	bra	@r0		
    9c3a:	00 00       	bra	@r0		
    9c3c:	24 01 00 00 	mova	&0x10000,r4	
    9c40:	80 00 00 00 	bra	#0x00000	
    9c44:	00 00       	bra	@r0		
    9c46:	00 00       	bra	@r0		
    9c48:	66 01 00 00 	mova	r1,	&0x60000
    9c4c:	80 00 00 00 	bra	#0x00000	
    9c50:	00 00       	bra	@r0		
    9c52:	00 00       	bra	@r0		
    9c54:	b7 01 00 00 	suba	#0x10000,r7	
    9c58:	80 00 00 00 	bra	#0x00000	
    9c5c:	00 00       	bra	@r0		
    9c5e:	00 00       	bra	@r0		
    9c60:	08 02       	mova	#4,	r8	;r2 As==10
    9c62:	00 00       	bra	@r0		
    9c64:	80 00 00 00 	bra	#0x00000	
    9c68:	00 00       	bra	@r0		
    9c6a:	00 00       	bra	@r0		
    9c6c:	2e 02 00 00 	mova	&0x20000,r14	
    9c70:	80 00 00 00 	bra	#0x00000	
    9c74:	00 00       	bra	@r0		
    9c76:	00 00       	bra	@r0		
    9c78:	6c 02 00 00 	mova	r2,	&0xc0000
    9c7c:	80 00 00 00 	bra	#0x00000	
    9c80:	00 00       	bra	@r0		
    9c82:	00 00       	bra	@r0		
    9c84:	96 02 00 00 	cmpa	#0x20000,r6	
    9c88:	80 00 00 00 	bra	#0x00000	
    9c8c:	00 00       	bra	@r0		
    9c8e:	00 00       	bra	@r0		
    9c90:	bf 02 00 00 	suba	#0x20000,r15	
    9c94:	80 00 00 00 	bra	#0x00000	
    9c98:	00 00       	bra	@r0		
    9c9a:	00 00       	bra	@r0		
    9c9c:	d9 02       	cmpa	r2,	r9	
    9c9e:	00 00       	bra	@r0		
    9ca0:	80 00 00 00 	bra	#0x00000	
    9ca4:	00 00       	bra	@r0		
    9ca6:	00 00       	bra	@r0		
    9ca8:	f4 02       	suba	r2,	r4	
    9caa:	00 00       	bra	@r0		
    9cac:	80 00 00 00 	bra	#0x00000	
    9cb0:	00 00       	bra	@r0		
    9cb2:	00 00       	bra	@r0		
    9cb4:	14 03       	mova	#-1,	r4	;r3 As==11
    9cb6:	00 00       	bra	@r0		
    9cb8:	80 00 00 00 	bra	#0x00000	
    9cbc:	00 00       	bra	@r0		
    9cbe:	00 00       	bra	@r0		
    9cc0:	4d 03       	rrum.a	#1,	r13	
    9cc2:	00 00       	bra	@r0		
    9cc4:	80 00 00 00 	bra	#0x00000	
    9cc8:	00 00       	bra	@r0		
    9cca:	00 00       	bra	@r0		
    9ccc:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    9cd0:	80 00 00 00 	bra	#0x00000	
    9cd4:	00 00       	bra	@r0		
    9cd6:	00 00       	bra	@r0		
    9cd8:	8a 03 00 00 	mova	#0x30000,r10	
    9cdc:	80 00 00 00 	bra	#0x00000	
    9ce0:	00 00       	bra	@r0		
    9ce2:	00 00       	bra	@r0		
    9ce4:	ae 03 00 00 	adda	#0x30000,r14	
    9ce8:	80 00 00 00 	bra	#0x00000	
    9cec:	00 00       	bra	@r0		
    9cee:	00 00       	bra	@r0		
    9cf0:	d7 03       	tsta	r7		
    9cf2:	00 00       	bra	@r0		
    9cf4:	80 00 00 00 	bra	#0x00000	
    9cf8:	00 00       	bra	@r0		
    9cfa:	00 00       	bra	@r0		
    9cfc:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    9d00:	82 00 00 00 	mova	#0x00000,r2	
    9d04:	68 11       	rra.b	@r8		
    9d06:	00 00       	bra	@r0		
    9d08:	4b 4b       	mov.b	r11,	r11	
    9d0a:	00 00       	bra	@r0		
    9d0c:	c2 00       	mova	r0,	r2	
    9d0e:	00 00       	bra	@r0		
    9d10:	e5 1d       	.word	0x1de5;	????	
    9d12:	00 00       	bra	@r0		
    9d14:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    9d18:	c2 00       	mova	r0,	r2	
    9d1a:	00 00       	bra	@r0		
    9d1c:	00 00       	bra	@r0		
    9d1e:	00 00       	bra	@r0		
    9d20:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    9d24:	c2 00 
    9d26:	00 00       	bra	@r0		
    9d28:	00 00       	bra	@r0		
    9d2a:	00 00       	bra	@r0		
    9d2c:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    9d30:	c2 00       	mova	r0,	r2	
    9d32:	00 00       	bra	@r0		
    9d34:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    9d38:	06 4d       	mov	r13,	r6	
    9d3a:	00 00       	bra	@r0		
    9d3c:	c2 00       	mova	r0,	r2	
    9d3e:	00 00       	bra	@r0		
    9d40:	00 00       	bra	@r0		
    9d42:	00 00       	bra	@r0		
    9d44:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    9d48:	c2 00       	mova	r0,	r2	
    9d4a:	00 00       	bra	@r0		
    9d4c:	00 00       	bra	@r0		
    9d4e:	00 00       	bra	@r0		
    9d50:	91 4f 00 00 	mov	0(r15),	194(r1)	;0x0000(r15), 0x00c2(r1)
    9d54:	c2 00 
    9d56:	00 00       	bra	@r0		
    9d58:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    9d5c:	8f 54 00 00 	add	r4,	0(r15)	;0x0000(r15)
    9d60:	24 00 25 04 	mova	&0x00425,r4	
    9d64:	de 5b 00 00 	add.b	0(r11),	21282(r14);0x0000(r11), 0x5322(r14)
    9d68:	22 53 
    9d6a:	00 00       	bra	@r0		
    9d6c:	40 00       	rrcm.a	#1,	r0	
    9d6e:	24 04 0e 00 	mova	&0x4000e,r4	
    9d72:	00 00       	bra	@r0		
    9d74:	30 53       	add	#-1,	r0	;r3 As==11
    9d76:	00 00       	bra	@r0		
    9d78:	40 00       	rrcm.a	#1,	r0	
    9d7a:	24 04 0c 00 	mova	&0x4000c,r4	
    9d7e:	00 00       	bra	@r0		
    9d80:	00 00       	bra	@r0		
    9d82:	00 00       	bra	@r0		
    9d84:	44 00       	rrcm.a	#1,	r4	
    9d86:	25 04 00 00 	mova	&0x40000,r5	
    9d8a:	00 00       	bra	@r0		
    9d8c:	00 00       	bra	@r0		
    9d8e:	00 00       	bra	@r0		
    9d90:	44 00       	rrcm.a	#1,	r4	
    9d92:	2a 04 06 00 	mova	&0x40006,r10	
    9d96:	00 00       	bra	@r0		
    9d98:	00 00       	bra	@r0		
    9d9a:	00 00       	bra	@r0		
    9d9c:	44 00       	rrcm.a	#1,	r4	
    9d9e:	2b 04 0e 00 	mova	&0x4000e,r11	
    9da2:	00 00       	bra	@r0		
    9da4:	00 00       	bra	@r0		
    9da6:	00 00       	bra	@r0		
    9da8:	44 00       	rrcm.a	#1,	r4	
    9daa:	2d 04 16 00 	mova	&0x40016,r13	
    9dae:	00 00       	bra	@r0		
    9db0:	00 00       	bra	@r0		
    9db2:	00 00       	bra	@r0		
    9db4:	44 00       	rrcm.a	#1,	r4	
    9db6:	2e 04 22 00 	mova	&0x40022,r14	
    9dba:	00 00       	bra	@r0		
    9dbc:	00 00       	bra	@r0		
    9dbe:	00 00       	bra	@r0		
    9dc0:	44 00       	rrcm.a	#1,	r4	
    9dc2:	9a 00 32 00 	cmpa	#0x00032,r10	
    9dc6:	00 00       	bra	@r0		
    9dc8:	00 00       	bra	@r0		
    9dca:	00 00       	bra	@r0		
    9dcc:	44 00       	rrcm.a	#1,	r4	
    9dce:	99 00 3c 00 	cmpa	#0x0003c,r9	
    9dd2:	00 00       	bra	@r0		
    9dd4:	00 00       	bra	@r0		
    9dd6:	00 00       	bra	@r0		
    9dd8:	44 00       	rrcm.a	#1,	r4	
    9dda:	9a 00 40 00 	cmpa	#0x00040,r10	
    9dde:	00 00       	bra	@r0		
    9de0:	00 00       	bra	@r0		
    9de2:	00 00       	bra	@r0		
    9de4:	44 00       	rrcm.a	#1,	r4	
    9de6:	99 00 4a 00 	cmpa	#0x0004a,r9	
    9dea:	00 00       	bra	@r0		
    9dec:	00 00       	bra	@r0		
    9dee:	00 00       	bra	@r0		
    9df0:	44 00       	rrcm.a	#1,	r4	
    9df2:	31 04 4e 00 	mova	78(r4),	r1	;0x004e(r4)
    9df6:	00 00       	bra	@r0		
    9df8:	00 00       	bra	@r0		
    9dfa:	00 00       	bra	@r0		
    9dfc:	44 00       	rrcm.a	#1,	r4	
    9dfe:	32 04 52 00 	mova	82(r4),	r2	;0x0052(r4)
    9e02:	00 00       	bra	@r0		
    9e04:	00 00       	bra	@r0		
    9e06:	00 00       	bra	@r0		
    9e08:	44 00       	rrcm.a	#1,	r4	
    9e0a:	33 04       	.word	0x0433;	????	Illegal as address instr
    9e0c:	5a 00       	rrcm	#1,	r10	
    9e0e:	00 00       	bra	@r0		
    9e10:	3e 53       	add	#-1,	r14	;r3 As==11
    9e12:	00 00       	bra	@r0		
    9e14:	80 00 26 04 	bra	#0x00426	
    9e18:	00 00       	bra	@r0		
    9e1a:	00 00       	bra	@r0		
    9e1c:	47 53       	add.b	#0,	r7	;r3 As==00
    9e1e:	00 00       	bra	@r0		
    9e20:	80 00 27 04 	bra	#0x00427	
    9e24:	08 00       	mova	@r0,	r8	
    9e26:	00 00       	bra	@r0		
    9e28:	66 53       	incd.b	r6		
    9e2a:	00 00       	bra	@r0		
    9e2c:	80 00 28 04 	bra	#0x00428	
    9e30:	10 00       	bra	#0x00000	
    9e32:	00 00       	bra	@r0		
    9e34:	70 53       	add.b	#-1,	r0	;r3 As==11
    9e36:	00 00       	bra	@r0		
    9e38:	80 00 28 04 	bra	#0x00428	
    9e3c:	14 00       	mova	#0x00000,r4	
    9e3e:	00 00       	bra	@r0		
    9e40:	00 00       	bra	@r0		
    9e42:	00 00       	bra	@r0		
    9e44:	c0 00       	bra	r0		
    9e46:	00 00       	bra	@r0		
    9e48:	06 00       	mova	@r0,	r6	
    9e4a:	00 00       	bra	@r0		
    9e4c:	00 00       	bra	@r0		
    9e4e:	00 00       	bra	@r0		
    9e50:	e0 00       	adda	r0,	r0	
    9e52:	00 00       	bra	@r0		
    9e54:	5a 00       	rrcm	#1,	r10	
    9e56:	00 00       	bra	@r0		
    9e58:	00 00       	bra	@r0		
    9e5a:	00 00       	bra	@r0		
    9e5c:	24 00 00 00 	mova	&0x00000,r4	
    9e60:	62 00 00 00 	mova	r0,	&0x20000
    9e64:	00 00       	bra	@r0		
    9e66:	00 00       	bra	@r0		
    9e68:	64 00 00 00 	mova	r0,	&0x40000
    9e6c:	40 5c       	add.b	r12,	r0	
    9e6e:	00 00       	bra	@r0		
    9e70:	10 4b 00 00 	br	0(r11)		;0x0000(r11)
    9e74:	64 00 00 00 	mova	r0,	&0x40000
    9e78:	40 5c       	add.b	r12,	r0	
    9e7a:	00 00       	bra	@r0		
    9e7c:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    9e80:	64 00 00 00 	mova	r0,	&0x40000
    9e84:	40 5c       	add.b	r12,	r0	
    9e86:	00 00       	bra	@r0		
    9e88:	6a 00 00 00 	mova	r0,	&0xa0000
    9e8c:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x09e8e
    9e90:	00 00       	bra	@r0		
    9e92:	00 00       	bra	@r0		
    9e94:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    9e98:	80 00 00 00 	bra	#0x00000	
    9e9c:	00 00       	bra	@r0		
    9e9e:	00 00       	bra	@r0		
    9ea0:	99 00 00 00 	cmpa	#0x00000,r9	
    9ea4:	80 00 00 00 	bra	#0x00000	
    9ea8:	00 00       	bra	@r0		
    9eaa:	00 00       	bra	@r0		
    9eac:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    9eae:	00 00       	bra	@r0		
    9eb0:	80 00 00 00 	bra	#0x00000	
    9eb4:	00 00       	bra	@r0		
    9eb6:	00 00       	bra	@r0		
    9eb8:	ec 00       	adda	r0,	r12	
    9eba:	00 00       	bra	@r0		
    9ebc:	80 00 00 00 	bra	#0x00000	
    9ec0:	00 00       	bra	@r0		
    9ec2:	00 00       	bra	@r0		
    9ec4:	24 01 00 00 	mova	&0x10000,r4	
    9ec8:	80 00 00 00 	bra	#0x00000	
    9ecc:	00 00       	bra	@r0		
    9ece:	00 00       	bra	@r0		
    9ed0:	66 01 00 00 	mova	r1,	&0x60000
    9ed4:	80 00 00 00 	bra	#0x00000	
    9ed8:	00 00       	bra	@r0		
    9eda:	00 00       	bra	@r0		
    9edc:	b7 01 00 00 	suba	#0x10000,r7	
    9ee0:	80 00 00 00 	bra	#0x00000	
    9ee4:	00 00       	bra	@r0		
    9ee6:	00 00       	bra	@r0		
    9ee8:	08 02       	mova	#4,	r8	;r2 As==10
    9eea:	00 00       	bra	@r0		
    9eec:	80 00 00 00 	bra	#0x00000	
    9ef0:	00 00       	bra	@r0		
    9ef2:	00 00       	bra	@r0		
    9ef4:	2e 02 00 00 	mova	&0x20000,r14	
    9ef8:	80 00 00 00 	bra	#0x00000	
    9efc:	00 00       	bra	@r0		
    9efe:	00 00       	bra	@r0		
    9f00:	6c 02 00 00 	mova	r2,	&0xc0000
    9f04:	80 00 00 00 	bra	#0x00000	
    9f08:	00 00       	bra	@r0		
    9f0a:	00 00       	bra	@r0		
    9f0c:	96 02 00 00 	cmpa	#0x20000,r6	
    9f10:	80 00 00 00 	bra	#0x00000	
    9f14:	00 00       	bra	@r0		
    9f16:	00 00       	bra	@r0		
    9f18:	bf 02 00 00 	suba	#0x20000,r15	
    9f1c:	80 00 00 00 	bra	#0x00000	
    9f20:	00 00       	bra	@r0		
    9f22:	00 00       	bra	@r0		
    9f24:	d9 02       	cmpa	r2,	r9	
    9f26:	00 00       	bra	@r0		
    9f28:	80 00 00 00 	bra	#0x00000	
    9f2c:	00 00       	bra	@r0		
    9f2e:	00 00       	bra	@r0		
    9f30:	f4 02       	suba	r2,	r4	
    9f32:	00 00       	bra	@r0		
    9f34:	80 00 00 00 	bra	#0x00000	
    9f38:	00 00       	bra	@r0		
    9f3a:	00 00       	bra	@r0		
    9f3c:	14 03       	mova	#-1,	r4	;r3 As==11
    9f3e:	00 00       	bra	@r0		
    9f40:	80 00 00 00 	bra	#0x00000	
    9f44:	00 00       	bra	@r0		
    9f46:	00 00       	bra	@r0		
    9f48:	4d 03       	rrum.a	#1,	r13	
    9f4a:	00 00       	bra	@r0		
    9f4c:	80 00 00 00 	bra	#0x00000	
    9f50:	00 00       	bra	@r0		
    9f52:	00 00       	bra	@r0		
    9f54:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    9f58:	80 00 00 00 	bra	#0x00000	
    9f5c:	00 00       	bra	@r0		
    9f5e:	00 00       	bra	@r0		
    9f60:	8a 03 00 00 	mova	#0x30000,r10	
    9f64:	80 00 00 00 	bra	#0x00000	
    9f68:	00 00       	bra	@r0		
    9f6a:	00 00       	bra	@r0		
    9f6c:	ae 03 00 00 	adda	#0x30000,r14	
    9f70:	80 00 00 00 	bra	#0x00000	
    9f74:	00 00       	bra	@r0		
    9f76:	00 00       	bra	@r0		
    9f78:	d7 03       	tsta	r7		
    9f7a:	00 00       	bra	@r0		
    9f7c:	80 00 00 00 	bra	#0x00000	
    9f80:	00 00       	bra	@r0		
    9f82:	00 00       	bra	@r0		
    9f84:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    9f88:	82 00 00 00 	mova	#0x00000,r2	
    9f8c:	7c 11       	rra.b	@r12+		
    9f8e:	00 00       	bra	@r0		
    9f90:	4b 4b       	mov.b	r11,	r11	
    9f92:	00 00       	bra	@r0		
    9f94:	c2 00       	mova	r0,	r2	
    9f96:	00 00       	bra	@r0		
    9f98:	e5 1d       	.word	0x1de5;	????	
    9f9a:	00 00       	bra	@r0		
    9f9c:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    9fa0:	c2 00       	mova	r0,	r2	
    9fa2:	00 00       	bra	@r0		
    9fa4:	00 00       	bra	@r0		
    9fa6:	00 00       	bra	@r0		
    9fa8:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    9fac:	c2 00 
    9fae:	00 00       	bra	@r0		
    9fb0:	00 00       	bra	@r0		
    9fb2:	00 00       	bra	@r0		
    9fb4:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    9fb8:	c2 00       	mova	r0,	r2	
    9fba:	00 00       	bra	@r0		
    9fbc:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    9fc0:	06 4d       	mov	r13,	r6	
    9fc2:	00 00       	bra	@r0		
    9fc4:	c2 00       	mova	r0,	r2	
    9fc6:	00 00       	bra	@r0		
    9fc8:	00 00       	bra	@r0		
    9fca:	00 00       	bra	@r0		
    9fcc:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    9fd0:	c2 00       	mova	r0,	r2	
    9fd2:	00 00       	bra	@r0		
    9fd4:	00 00       	bra	@r0		
    9fd6:	00 00       	bra	@r0		
    9fd8:	91 4f 00 00 	mov	0(r15),	194(r1)	;0x0000(r15), 0x00c2(r1)
    9fdc:	c2 00 
    9fde:	00 00       	bra	@r0		
    9fe0:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    9fe4:	9e 54 00 00 	add	0(r4),	36(r14)	;0x0000(r4), 0x0024(r14)
    9fe8:	24 00 
    9fea:	39 04 40 5c 	mova	23616(r4),r9	;0x5c40(r4)
    9fee:	00 00       	bra	@r0		
    9ff0:	22 53       	incd	r2		
    9ff2:	00 00       	bra	@r0		
    9ff4:	40 00       	rrcm.a	#1,	r0	
    9ff6:	38 04 0e 00 	mova	14(r4),	r8	;0x000e(r4)
    9ffa:	00 00       	bra	@r0		
    9ffc:	30 53       	add	#-1,	r0	;r3 As==11
    9ffe:	00 00       	bra	@r0		
    a000:	40 00       	rrcm.a	#1,	r0	
    a002:	38 04 0c 00 	mova	12(r4),	r8	;0x000c(r4)
    a006:	00 00       	bra	@r0		
    a008:	00 00       	bra	@r0		
    a00a:	00 00       	bra	@r0		
    a00c:	44 00       	rrcm.a	#1,	r4	
    a00e:	39 04 00 00 	mova	0(r4),	r9	;0x0000(r4)
    a012:	00 00       	bra	@r0		
    a014:	00 00       	bra	@r0		
    a016:	00 00       	bra	@r0		
    a018:	44 00       	rrcm.a	#1,	r4	
    a01a:	3e 04 06 00 	mova	6(r4),	r14	;0x0006(r4)
    a01e:	00 00       	bra	@r0		
    a020:	00 00       	bra	@r0		
    a022:	00 00       	bra	@r0		
    a024:	44 00       	rrcm.a	#1,	r4	
    a026:	3f 04 0e 00 	mova	14(r4),	r15	;0x000e(r4)
    a02a:	00 00       	bra	@r0		
    a02c:	00 00       	bra	@r0		
    a02e:	00 00       	bra	@r0		
    a030:	44 00       	rrcm.a	#1,	r4	
    a032:	41 04       	rrcm.a	#2,	r1	
    a034:	16 00       	mova	#0x00000,r6	
    a036:	00 00       	bra	@r0		
    a038:	00 00       	bra	@r0		
    a03a:	00 00       	bra	@r0		
    a03c:	44 00       	rrcm.a	#1,	r4	
    a03e:	42 04       	rrcm.a	#2,	r2	
    a040:	22 00 00 00 	mova	&0x00000,r2	
    a044:	00 00       	bra	@r0		
    a046:	00 00       	bra	@r0		
    a048:	44 00       	rrcm.a	#1,	r4	
    a04a:	9a 00 32 00 	cmpa	#0x00032,r10	
    a04e:	00 00       	bra	@r0		
    a050:	00 00       	bra	@r0		
    a052:	00 00       	bra	@r0		
    a054:	44 00       	rrcm.a	#1,	r4	
    a056:	99 00 3c 00 	cmpa	#0x0003c,r9	
    a05a:	00 00       	bra	@r0		
    a05c:	00 00       	bra	@r0		
    a05e:	00 00       	bra	@r0		
    a060:	44 00       	rrcm.a	#1,	r4	
    a062:	9a 00 40 00 	cmpa	#0x00040,r10	
    a066:	00 00       	bra	@r0		
    a068:	00 00       	bra	@r0		
    a06a:	00 00       	bra	@r0		
    a06c:	44 00       	rrcm.a	#1,	r4	
    a06e:	99 00 4a 00 	cmpa	#0x0004a,r9	
    a072:	00 00       	bra	@r0		
    a074:	00 00       	bra	@r0		
    a076:	00 00       	bra	@r0		
    a078:	44 00       	rrcm.a	#1,	r4	
    a07a:	45 04       	rrcm.a	#2,	r5	
    a07c:	4e 00       	rrcm.a	#1,	r14	
    a07e:	00 00       	bra	@r0		
    a080:	00 00       	bra	@r0		
    a082:	00 00       	bra	@r0		
    a084:	44 00       	rrcm.a	#1,	r4	
    a086:	47 04       	rrcm.a	#2,	r7	
    a088:	52 00       	rrcm	#1,	r2	
    a08a:	00 00       	bra	@r0		
    a08c:	00 00       	bra	@r0		
    a08e:	00 00       	bra	@r0		
    a090:	44 00       	rrcm.a	#1,	r4	
    a092:	48 04       	rrcm.a	#2,	r8	
    a094:	5a 00       	rrcm	#1,	r10	
    a096:	00 00       	bra	@r0		
    a098:	3e 53       	add	#-1,	r14	;r3 As==11
    a09a:	00 00       	bra	@r0		
    a09c:	80 00 3a 04 	bra	#0x0043a	
    a0a0:	00 00       	bra	@r0		
    a0a2:	00 00       	bra	@r0		
    a0a4:	47 53       	add.b	#0,	r7	;r3 As==00
    a0a6:	00 00       	bra	@r0		
    a0a8:	80 00 3b 04 	bra	#0x0043b	
    a0ac:	08 00       	mova	@r0,	r8	
    a0ae:	00 00       	bra	@r0		
    a0b0:	66 53       	incd.b	r6		
    a0b2:	00 00       	bra	@r0		
    a0b4:	80 00 3c 04 	bra	#0x0043c	
    a0b8:	10 00       	bra	#0x00000	
    a0ba:	00 00       	bra	@r0		
    a0bc:	70 53       	add.b	#-1,	r0	;r3 As==11
    a0be:	00 00       	bra	@r0		
    a0c0:	80 00 3c 04 	bra	#0x0043c	
    a0c4:	14 00       	mova	#0x00000,r4	
    a0c6:	00 00       	bra	@r0		
    a0c8:	00 00       	bra	@r0		
    a0ca:	00 00       	bra	@r0		
    a0cc:	c0 00       	bra	r0		
    a0ce:	00 00       	bra	@r0		
    a0d0:	06 00       	mova	@r0,	r6	
    a0d2:	00 00       	bra	@r0		
    a0d4:	00 00       	bra	@r0		
    a0d6:	00 00       	bra	@r0		
    a0d8:	e0 00       	adda	r0,	r0	
    a0da:	00 00       	bra	@r0		
    a0dc:	5a 00       	rrcm	#1,	r10	
    a0de:	00 00       	bra	@r0		
    a0e0:	00 00       	bra	@r0		
    a0e2:	00 00       	bra	@r0		
    a0e4:	24 00 00 00 	mova	&0x00000,r4	
    a0e8:	62 00 00 00 	mova	r0,	&0x20000
    a0ec:	00 00       	bra	@r0		
    a0ee:	00 00       	bra	@r0		
    a0f0:	64 00 00 00 	mova	r0,	&0x40000
    a0f4:	a2 5c 00 00 	add	@r12,	&0x0000	
    a0f8:	10 4b 00 00 	br	0(r11)		;0x0000(r11)
    a0fc:	64 00 00 00 	mova	r0,	&0x40000
    a100:	a2 5c 00 00 	add	@r12,	&0x0000	
    a104:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    a108:	64 00 00 00 	mova	r0,	&0x40000
    a10c:	a2 5c 00 00 	add	@r12,	&0x0000	
    a110:	6a 00 00 00 	mova	r0,	&0xa0000
    a114:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0a116
    a118:	00 00       	bra	@r0		
    a11a:	00 00       	bra	@r0		
    a11c:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    a120:	80 00 00 00 	bra	#0x00000	
    a124:	00 00       	bra	@r0		
    a126:	00 00       	bra	@r0		
    a128:	99 00 00 00 	cmpa	#0x00000,r9	
    a12c:	80 00 00 00 	bra	#0x00000	
    a130:	00 00       	bra	@r0		
    a132:	00 00       	bra	@r0		
    a134:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    a136:	00 00       	bra	@r0		
    a138:	80 00 00 00 	bra	#0x00000	
    a13c:	00 00       	bra	@r0		
    a13e:	00 00       	bra	@r0		
    a140:	ec 00       	adda	r0,	r12	
    a142:	00 00       	bra	@r0		
    a144:	80 00 00 00 	bra	#0x00000	
    a148:	00 00       	bra	@r0		
    a14a:	00 00       	bra	@r0		
    a14c:	24 01 00 00 	mova	&0x10000,r4	
    a150:	80 00 00 00 	bra	#0x00000	
    a154:	00 00       	bra	@r0		
    a156:	00 00       	bra	@r0		
    a158:	66 01 00 00 	mova	r1,	&0x60000
    a15c:	80 00 00 00 	bra	#0x00000	
    a160:	00 00       	bra	@r0		
    a162:	00 00       	bra	@r0		
    a164:	b7 01 00 00 	suba	#0x10000,r7	
    a168:	80 00 00 00 	bra	#0x00000	
    a16c:	00 00       	bra	@r0		
    a16e:	00 00       	bra	@r0		
    a170:	08 02       	mova	#4,	r8	;r2 As==10
    a172:	00 00       	bra	@r0		
    a174:	80 00 00 00 	bra	#0x00000	
    a178:	00 00       	bra	@r0		
    a17a:	00 00       	bra	@r0		
    a17c:	2e 02 00 00 	mova	&0x20000,r14	
    a180:	80 00 00 00 	bra	#0x00000	
    a184:	00 00       	bra	@r0		
    a186:	00 00       	bra	@r0		
    a188:	6c 02 00 00 	mova	r2,	&0xc0000
    a18c:	80 00 00 00 	bra	#0x00000	
    a190:	00 00       	bra	@r0		
    a192:	00 00       	bra	@r0		
    a194:	96 02 00 00 	cmpa	#0x20000,r6	
    a198:	80 00 00 00 	bra	#0x00000	
    a19c:	00 00       	bra	@r0		
    a19e:	00 00       	bra	@r0		
    a1a0:	bf 02 00 00 	suba	#0x20000,r15	
    a1a4:	80 00 00 00 	bra	#0x00000	
    a1a8:	00 00       	bra	@r0		
    a1aa:	00 00       	bra	@r0		
    a1ac:	d9 02       	cmpa	r2,	r9	
    a1ae:	00 00       	bra	@r0		
    a1b0:	80 00 00 00 	bra	#0x00000	
    a1b4:	00 00       	bra	@r0		
    a1b6:	00 00       	bra	@r0		
    a1b8:	f4 02       	suba	r2,	r4	
    a1ba:	00 00       	bra	@r0		
    a1bc:	80 00 00 00 	bra	#0x00000	
    a1c0:	00 00       	bra	@r0		
    a1c2:	00 00       	bra	@r0		
    a1c4:	14 03       	mova	#-1,	r4	;r3 As==11
    a1c6:	00 00       	bra	@r0		
    a1c8:	80 00 00 00 	bra	#0x00000	
    a1cc:	00 00       	bra	@r0		
    a1ce:	00 00       	bra	@r0		
    a1d0:	4d 03       	rrum.a	#1,	r13	
    a1d2:	00 00       	bra	@r0		
    a1d4:	80 00 00 00 	bra	#0x00000	
    a1d8:	00 00       	bra	@r0		
    a1da:	00 00       	bra	@r0		
    a1dc:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    a1e0:	80 00 00 00 	bra	#0x00000	
    a1e4:	00 00       	bra	@r0		
    a1e6:	00 00       	bra	@r0		
    a1e8:	8a 03 00 00 	mova	#0x30000,r10	
    a1ec:	80 00 00 00 	bra	#0x00000	
    a1f0:	00 00       	bra	@r0		
    a1f2:	00 00       	bra	@r0		
    a1f4:	ae 03 00 00 	adda	#0x30000,r14	
    a1f8:	80 00 00 00 	bra	#0x00000	
    a1fc:	00 00       	bra	@r0		
    a1fe:	00 00       	bra	@r0		
    a200:	d7 03       	tsta	r7		
    a202:	00 00       	bra	@r0		
    a204:	80 00 00 00 	bra	#0x00000	
    a208:	00 00       	bra	@r0		
    a20a:	00 00       	bra	@r0		
    a20c:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    a210:	82 00 00 00 	mova	#0x00000,r2	
    a214:	11 0b       	mova	@r11+,	r1	
    a216:	00 00       	bra	@r0		
    a218:	4b 4b       	mov.b	r11,	r11	
    a21a:	00 00       	bra	@r0		
    a21c:	c2 00       	mova	r0,	r2	
    a21e:	00 00       	bra	@r0		
    a220:	e5 1d       	.word	0x1de5;	????	
    a222:	00 00       	bra	@r0		
    a224:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    a228:	c2 00       	mova	r0,	r2	
    a22a:	00 00       	bra	@r0		
    a22c:	00 00       	bra	@r0		
    a22e:	00 00       	bra	@r0		
    a230:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    a234:	c2 00 
    a236:	00 00       	bra	@r0		
    a238:	00 00       	bra	@r0		
    a23a:	00 00       	bra	@r0		
    a23c:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    a240:	c2 00       	mova	r0,	r2	
    a242:	00 00       	bra	@r0		
    a244:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    a248:	06 4d       	mov	r13,	r6	
    a24a:	00 00       	bra	@r0		
    a24c:	c2 00       	mova	r0,	r2	
    a24e:	00 00       	bra	@r0		
    a250:	00 00       	bra	@r0		
    a252:	00 00       	bra	@r0		
    a254:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    a258:	c2 00       	mova	r0,	r2	
    a25a:	00 00       	bra	@r0		
    a25c:	00 00       	bra	@r0		
    a25e:	00 00       	bra	@r0		
    a260:	91 4f 00 00 	mov	0(r15),	194(r1)	;0x0000(r15), 0x00c2(r1)
    a264:	c2 00 
    a266:	00 00       	bra	@r0		
    a268:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    a26c:	ad 54 00 00 	add	@r4,	0(r13)	;0x0000(r13)
    a270:	24 00 77 04 	mova	&0x00477,r4	
    a274:	a2 5c 00 00 	add	@r12,	&0x0000	
    a278:	c1 54 00 00 	add.b	r4,	0(r1)	;0x0000(r1)
    a27c:	40 00       	rrcm.a	#1,	r0	
    a27e:	76 04 0d 00 	mova	r4,	13(r6)	;0x000d(r6)
    a282:	00 00       	bra	@r0		
    a284:	00 00       	bra	@r0		
    a286:	00 00       	bra	@r0		
    a288:	44 00       	rrcm.a	#1,	r4	
    a28a:	77 04 00 00 	mova	r4,	0(r7)	;0x0000(r7)
    a28e:	00 00       	bra	@r0		
    a290:	00 00       	bra	@r0		
    a292:	00 00       	bra	@r0		
    a294:	44 00       	rrcm.a	#1,	r4	
    a296:	7a 04 08 00 	mova	r4,	8(r10)	;0x0008(r10)
    a29a:	00 00       	bra	@r0		
    a29c:	00 00       	bra	@r0		
    a29e:	00 00       	bra	@r0		
    a2a0:	44 00       	rrcm.a	#1,	r4	
    a2a2:	7b 04 0e 00 	mova	r4,	14(r11)	;0x000e(r11)
    a2a6:	00 00       	bra	@r0		
    a2a8:	00 00       	bra	@r0		
    a2aa:	00 00       	bra	@r0		
    a2ac:	44 00       	rrcm.a	#1,	r4	
    a2ae:	7c 04 1a 00 	mova	r4,	26(r12)	;0x001a(r12)
    a2b2:	00 00       	bra	@r0		
    a2b4:	00 00       	bra	@r0		
    a2b6:	00 00       	bra	@r0		
    a2b8:	44 00       	rrcm.a	#1,	r4	
    a2ba:	7e 04 22 00 	mova	r4,	34(r14)	;0x0022(r14)
    a2be:	00 00       	bra	@r0		
    a2c0:	00 00       	bra	@r0		
    a2c2:	00 00       	bra	@r0		
    a2c4:	44 00       	rrcm.a	#1,	r4	
    a2c6:	96 04 26 00 	cmpa	#0x40026,r6	
    a2ca:	00 00       	bra	@r0		
    a2cc:	00 00       	bra	@r0		
    a2ce:	00 00       	bra	@r0		
    a2d0:	44 00       	rrcm.a	#1,	r4	
    a2d2:	82 04 2e 00 	mova	#0x4002e,r2	
    a2d6:	00 00       	bra	@r0		
    a2d8:	00 00       	bra	@r0		
    a2da:	00 00       	bra	@r0		
    a2dc:	44 00       	rrcm.a	#1,	r4	
    a2de:	83 04       	.word	0x0483;	????	Illegal as address instr
    a2e0:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0a2e2
    a2e4:	00 00       	bra	@r0		
    a2e6:	00 00       	bra	@r0		
    a2e8:	44 00       	rrcm.a	#1,	r4	
    a2ea:	87 04 38 00 	mova	#0x40038,r7	
    a2ee:	00 00       	bra	@r0		
    a2f0:	00 00       	bra	@r0		
    a2f2:	00 00       	bra	@r0		
    a2f4:	44 00       	rrcm.a	#1,	r4	
    a2f6:	8b 04 42 00 	mova	#0x40042,r11	
    a2fa:	00 00       	bra	@r0		
    a2fc:	00 00       	bra	@r0		
    a2fe:	00 00       	bra	@r0		
    a300:	44 00       	rrcm.a	#1,	r4	
    a302:	8e 04 4a 00 	mova	#0x4004a,r14	
    a306:	00 00       	bra	@r0		
    a308:	00 00       	bra	@r0		
    a30a:	00 00       	bra	@r0		
    a30c:	44 00       	rrcm.a	#1,	r4	
    a30e:	90 04 52 00 	cmpa	#0x40052,r0	
    a312:	00 00       	bra	@r0		
    a314:	00 00       	bra	@r0		
    a316:	00 00       	bra	@r0		
    a318:	44 00       	rrcm.a	#1,	r4	
    a31a:	92 04 64 00 	cmpa	#0x40064,r2	
    a31e:	00 00       	bra	@r0		
    a320:	00 00       	bra	@r0		
    a322:	00 00       	bra	@r0		
    a324:	44 00       	rrcm.a	#1,	r4	
    a326:	93 04       	.word	0x0493;	????	Illegal as address instr
    a328:	6c 00 00 00 	mova	r0,	&0xc0000
    a32c:	00 00       	bra	@r0		
    a32e:	00 00       	bra	@r0		
    a330:	44 00       	rrcm.a	#1,	r4	
    a332:	89 04 86 00 	mova	#0x40086,r9	
    a336:	00 00       	bra	@r0		
    a338:	00 00       	bra	@r0		
    a33a:	00 00       	bra	@r0		
    a33c:	44 00       	rrcm.a	#1,	r4	
    a33e:	97 04 8c 00 	cmpa	#0x4008c,r7	
    a342:	00 00       	bra	@r0		
    a344:	ce 54 00 00 	add.b	r4,	0(r14)	;0x0000(r14)
    a348:	80 00 78 04 	bra	#0x00478	
	...
    a354:	c0 00       	bra	r0		
    a356:	00 00       	bra	@r0		
    a358:	08 00       	mova	@r0,	r8	
    a35a:	00 00       	bra	@r0		
    a35c:	00 00       	bra	@r0		
    a35e:	00 00       	bra	@r0		
    a360:	e0 00       	adda	r0,	r0	
    a362:	00 00       	bra	@r0		
    a364:	8c 00 00 00 	mova	#0x00000,r12	
    a368:	00 00       	bra	@r0		
    a36a:	00 00       	bra	@r0		
    a36c:	24 00 00 00 	mova	&0x00000,r4	
    a370:	92 00 00 00 	cmpa	#0x00000,r2	
    a374:	00 00       	bra	@r0		
    a376:	00 00       	bra	@r0		
    a378:	64 00 00 00 	mova	r0,	&0x40000
    a37c:	34 5d       	add	@r13+,	r4	
    a37e:	00 00       	bra	@r0		
    a380:	10 4b 00 00 	br	0(r11)		;0x0000(r11)
    a384:	64 00 00 00 	mova	r0,	&0x40000
    a388:	34 5d       	add	@r13+,	r4	
    a38a:	00 00       	bra	@r0		
    a38c:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    a390:	64 00 00 00 	mova	r0,	&0x40000
    a394:	34 5d       	add	@r13+,	r4	
    a396:	00 00       	bra	@r0		
    a398:	6a 00 00 00 	mova	r0,	&0xa0000
    a39c:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0a39e
    a3a0:	00 00       	bra	@r0		
    a3a2:	00 00       	bra	@r0		
    a3a4:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    a3a8:	80 00 00 00 	bra	#0x00000	
    a3ac:	00 00       	bra	@r0		
    a3ae:	00 00       	bra	@r0		
    a3b0:	99 00 00 00 	cmpa	#0x00000,r9	
    a3b4:	80 00 00 00 	bra	#0x00000	
    a3b8:	00 00       	bra	@r0		
    a3ba:	00 00       	bra	@r0		
    a3bc:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    a3be:	00 00       	bra	@r0		
    a3c0:	80 00 00 00 	bra	#0x00000	
    a3c4:	00 00       	bra	@r0		
    a3c6:	00 00       	bra	@r0		
    a3c8:	ec 00       	adda	r0,	r12	
    a3ca:	00 00       	bra	@r0		
    a3cc:	80 00 00 00 	bra	#0x00000	
    a3d0:	00 00       	bra	@r0		
    a3d2:	00 00       	bra	@r0		
    a3d4:	24 01 00 00 	mova	&0x10000,r4	
    a3d8:	80 00 00 00 	bra	#0x00000	
    a3dc:	00 00       	bra	@r0		
    a3de:	00 00       	bra	@r0		
    a3e0:	66 01 00 00 	mova	r1,	&0x60000
    a3e4:	80 00 00 00 	bra	#0x00000	
    a3e8:	00 00       	bra	@r0		
    a3ea:	00 00       	bra	@r0		
    a3ec:	b7 01 00 00 	suba	#0x10000,r7	
    a3f0:	80 00 00 00 	bra	#0x00000	
    a3f4:	00 00       	bra	@r0		
    a3f6:	00 00       	bra	@r0		
    a3f8:	08 02       	mova	#4,	r8	;r2 As==10
    a3fa:	00 00       	bra	@r0		
    a3fc:	80 00 00 00 	bra	#0x00000	
    a400:	00 00       	bra	@r0		
    a402:	00 00       	bra	@r0		
    a404:	2e 02 00 00 	mova	&0x20000,r14	
    a408:	80 00 00 00 	bra	#0x00000	
    a40c:	00 00       	bra	@r0		
    a40e:	00 00       	bra	@r0		
    a410:	6c 02 00 00 	mova	r2,	&0xc0000
    a414:	80 00 00 00 	bra	#0x00000	
    a418:	00 00       	bra	@r0		
    a41a:	00 00       	bra	@r0		
    a41c:	96 02 00 00 	cmpa	#0x20000,r6	
    a420:	80 00 00 00 	bra	#0x00000	
    a424:	00 00       	bra	@r0		
    a426:	00 00       	bra	@r0		
    a428:	bf 02 00 00 	suba	#0x20000,r15	
    a42c:	80 00 00 00 	bra	#0x00000	
    a430:	00 00       	bra	@r0		
    a432:	00 00       	bra	@r0		
    a434:	d9 02       	cmpa	r2,	r9	
    a436:	00 00       	bra	@r0		
    a438:	80 00 00 00 	bra	#0x00000	
    a43c:	00 00       	bra	@r0		
    a43e:	00 00       	bra	@r0		
    a440:	f4 02       	suba	r2,	r4	
    a442:	00 00       	bra	@r0		
    a444:	80 00 00 00 	bra	#0x00000	
    a448:	00 00       	bra	@r0		
    a44a:	00 00       	bra	@r0		
    a44c:	14 03       	mova	#-1,	r4	;r3 As==11
    a44e:	00 00       	bra	@r0		
    a450:	80 00 00 00 	bra	#0x00000	
    a454:	00 00       	bra	@r0		
    a456:	00 00       	bra	@r0		
    a458:	4d 03       	rrum.a	#1,	r13	
    a45a:	00 00       	bra	@r0		
    a45c:	80 00 00 00 	bra	#0x00000	
    a460:	00 00       	bra	@r0		
    a462:	00 00       	bra	@r0		
    a464:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    a468:	80 00 00 00 	bra	#0x00000	
    a46c:	00 00       	bra	@r0		
    a46e:	00 00       	bra	@r0		
    a470:	8a 03 00 00 	mova	#0x30000,r10	
    a474:	80 00 00 00 	bra	#0x00000	
    a478:	00 00       	bra	@r0		
    a47a:	00 00       	bra	@r0		
    a47c:	ae 03 00 00 	adda	#0x30000,r14	
    a480:	80 00 00 00 	bra	#0x00000	
    a484:	00 00       	bra	@r0		
    a486:	00 00       	bra	@r0		
    a488:	d7 03       	tsta	r7		
    a48a:	00 00       	bra	@r0		
    a48c:	80 00 00 00 	bra	#0x00000	
    a490:	00 00       	bra	@r0		
    a492:	00 00       	bra	@r0		
    a494:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    a498:	82 00 00 00 	mova	#0x00000,r2	
    a49c:	bb 0b 00 00 	suba	#0xb0000,r11	
    a4a0:	4b 4b       	mov.b	r11,	r11	
    a4a2:	00 00       	bra	@r0		
    a4a4:	c2 00       	mova	r0,	r2	
    a4a6:	00 00       	bra	@r0		
    a4a8:	e5 1d       	.word	0x1de5;	????	
    a4aa:	00 00       	bra	@r0		
    a4ac:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    a4b0:	c2 00       	mova	r0,	r2	
    a4b2:	00 00       	bra	@r0		
    a4b4:	00 00       	bra	@r0		
    a4b6:	00 00       	bra	@r0		
    a4b8:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    a4bc:	c2 00 
    a4be:	00 00       	bra	@r0		
    a4c0:	00 00       	bra	@r0		
    a4c2:	00 00       	bra	@r0		
    a4c4:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    a4c8:	c2 00       	mova	r0,	r2	
    a4ca:	00 00       	bra	@r0		
    a4cc:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    a4d0:	06 4d       	mov	r13,	r6	
    a4d2:	00 00       	bra	@r0		
    a4d4:	c2 00       	mova	r0,	r2	
    a4d6:	00 00       	bra	@r0		
    a4d8:	00 00       	bra	@r0		
    a4da:	00 00       	bra	@r0		
    a4dc:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    a4e0:	c2 00       	mova	r0,	r2	
    a4e2:	00 00       	bra	@r0		
    a4e4:	00 00       	bra	@r0		
    a4e6:	00 00       	bra	@r0		
    a4e8:	91 4f 00 00 	mov	0(r15),	194(r1)	;0x0000(r15), 0x00c2(r1)
    a4ec:	c2 00 
    a4ee:	00 00       	bra	@r0		
    a4f0:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    a4f4:	d8 54 00 00 	add.b	0(r4),	36(r8)	;0x0000(r4), 0x0024(r8)
    a4f8:	24 00 
    a4fa:	bd 04 34 5d 	suba	#0x45d34,r13	
    a4fe:	00 00       	bra	@r0		
    a500:	22 53       	incd	r2		
    a502:	00 00       	bra	@r0		
    a504:	40 00       	rrcm.a	#1,	r0	
    a506:	bc 04 0e 00 	suba	#0x4000e,r12	
    a50a:	00 00       	bra	@r0		
    a50c:	00 00       	bra	@r0		
    a50e:	00 00       	bra	@r0		
    a510:	44 00       	rrcm.a	#1,	r4	
    a512:	bd 04 00 00 	suba	#0x40000,r13	
    a516:	00 00       	bra	@r0		
    a518:	00 00       	bra	@r0		
    a51a:	00 00       	bra	@r0		
    a51c:	44 00       	rrcm.a	#1,	r4	
    a51e:	c2 04       	mova	r4,	r2	
    a520:	04 00       	mova	@r0,	r4	
    a522:	00 00       	bra	@r0		
    a524:	00 00       	bra	@r0		
    a526:	00 00       	bra	@r0		
    a528:	44 00       	rrcm.a	#1,	r4	
    a52a:	c3 04       	.word	0x04c3;	????	Illegal as address instr
    a52c:	0c 00       	mova	@r0,	r12	
    a52e:	00 00       	bra	@r0		
    a530:	00 00       	bra	@r0		
    a532:	00 00       	bra	@r0		
    a534:	44 00       	rrcm.a	#1,	r4	
    a536:	aa 00 16 00 	adda	#0x00016,r10	
    a53a:	00 00       	bra	@r0		
    a53c:	00 00       	bra	@r0		
    a53e:	00 00       	bra	@r0		
    a540:	44 00       	rrcm.a	#1,	r4	
    a542:	a9 00 1e 00 	adda	#0x0001e,r9	
    a546:	00 00       	bra	@r0		
    a548:	00 00       	bra	@r0		
    a54a:	00 00       	bra	@r0		
    a54c:	44 00       	rrcm.a	#1,	r4	
    a54e:	9a 00 22 00 	cmpa	#0x00022,r10	
    a552:	00 00       	bra	@r0		
    a554:	00 00       	bra	@r0		
    a556:	00 00       	bra	@r0		
    a558:	44 00       	rrcm.a	#1,	r4	
    a55a:	99 00 2a 00 	cmpa	#0x0002a,r9	
    a55e:	00 00       	bra	@r0		
    a560:	00 00       	bra	@r0		
    a562:	00 00       	bra	@r0		
    a564:	44 00       	rrcm.a	#1,	r4	
    a566:	a1 00 2e 00 	adda	#0x0002e,r1	
    a56a:	00 00       	bra	@r0		
    a56c:	00 00       	bra	@r0		
    a56e:	00 00       	bra	@r0		
    a570:	44 00       	rrcm.a	#1,	r4	
    a572:	a0 00 34 00 	adda	#0x00034,r0	
    a576:	00 00       	bra	@r0		
    a578:	00 00       	bra	@r0		
    a57a:	00 00       	bra	@r0		
    a57c:	44 00       	rrcm.a	#1,	r4	
    a57e:	cd 04       	mova	r4,	r13	
    a580:	38 00 00 00 	mova	0x0000,	r8	;PC rel. 0x0a582
    a584:	00 00       	bra	@r0		
    a586:	00 00       	bra	@r0		
    a588:	44 00       	rrcm.a	#1,	r4	
    a58a:	cf 04       	mova	r4,	r15	
    a58c:	40 00       	rrcm.a	#1,	r0	
    a58e:	00 00       	bra	@r0		
    a590:	00 00       	bra	@r0		
    a592:	00 00       	bra	@r0		
    a594:	44 00       	rrcm.a	#1,	r4	
    a596:	d0 04       	cmpa	r4,	r0	
    a598:	46 00       	rrcm.a	#1,	r6	
    a59a:	00 00       	bra	@r0		
    a59c:	00 00       	bra	@r0		
    a59e:	00 00       	bra	@r0		
    a5a0:	44 00       	rrcm.a	#1,	r4	
    a5a2:	d1 04       	cmpa	r4,	r1	
    a5a4:	5c 00       	rrcm	#1,	r12	
    a5a6:	00 00       	bra	@r0		
    a5a8:	00 00       	bra	@r0		
    a5aa:	00 00       	bra	@r0		
    a5ac:	44 00       	rrcm.a	#1,	r4	
    a5ae:	d2 04       	cmpa	r4,	r2	
    a5b0:	78 00 00 00 	mova	r0,	0(r8)	;0x0000(r8)
    a5b4:	00 00       	bra	@r0		
    a5b6:	00 00       	bra	@r0		
    a5b8:	44 00       	rrcm.a	#1,	r4	
    a5ba:	ce 04       	mova	r4,	r14	
    a5bc:	88 00 00 00 	mova	#0x00000,r8	
    a5c0:	00 00       	bra	@r0		
    a5c2:	00 00       	bra	@r0		
    a5c4:	44 00       	rrcm.a	#1,	r4	
    a5c6:	d3 04       	.word	0x04d3;	????	Illegal as address instr
    a5c8:	96 00 00 00 	cmpa	#0x00000,r6	
    a5cc:	3e 53       	add	#-1,	r14	;r3 As==11
    a5ce:	00 00       	bra	@r0		
    a5d0:	80 00 be 04 	bra	#0x004be	
    a5d4:	00 00       	bra	@r0		
    a5d6:	00 00       	bra	@r0		
    a5d8:	66 53       	incd.b	r6		
    a5da:	00 00       	bra	@r0		
    a5dc:	80 00 c0 04 	bra	#0x004c0	
    a5e0:	08 00       	mova	@r0,	r8	
    a5e2:	00 00       	bra	@r0		
    a5e4:	00 00       	bra	@r0		
    a5e6:	00 00       	bra	@r0		
    a5e8:	c0 00       	bra	r0		
    a5ea:	00 00       	bra	@r0		
    a5ec:	04 00       	mova	@r0,	r4	
    a5ee:	00 00       	bra	@r0		
    a5f0:	00 00       	bra	@r0		
    a5f2:	00 00       	bra	@r0		
    a5f4:	e0 00       	adda	r0,	r0	
    a5f6:	00 00       	bra	@r0		
    a5f8:	96 00 00 00 	cmpa	#0x00000,r6	
    a5fc:	00 00       	bra	@r0		
    a5fe:	00 00       	bra	@r0		
    a600:	24 00 00 00 	mova	&0x00000,r4	
    a604:	9c 00 00 00 	cmpa	#0x00000,r12	
    a608:	00 00       	bra	@r0		
    a60a:	00 00       	bra	@r0		
    a60c:	64 00 00 00 	mova	r0,	&0x40000
    a610:	d0 5d 00 00 	add.b	0(r13),	0x4b10	;0x0000(r13), PC rel. 0x0f126
    a614:	10 4b 
    a616:	00 00       	bra	@r0		
    a618:	64 00 00 00 	mova	r0,	&0x40000
    a61c:	d0 5d 00 00 	add.b	0(r13),	0x4f88	;0x0000(r13), PC rel. 0x0f5aa
    a620:	88 4f 
    a622:	00 00       	bra	@r0		
    a624:	64 00 00 00 	mova	r0,	&0x40000
    a628:	d0 5d 00 00 	add.b	0(r13),	0x006a	;0x0000(r13), PC rel. 0x0a698
    a62c:	6a 00 
    a62e:	00 00       	bra	@r0		
    a630:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0a632
    a634:	00 00       	bra	@r0		
    a636:	00 00       	bra	@r0		
    a638:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    a63c:	80 00 00 00 	bra	#0x00000	
    a640:	00 00       	bra	@r0		
    a642:	00 00       	bra	@r0		
    a644:	99 00 00 00 	cmpa	#0x00000,r9	
    a648:	80 00 00 00 	bra	#0x00000	
    a64c:	00 00       	bra	@r0		
    a64e:	00 00       	bra	@r0		
    a650:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    a652:	00 00       	bra	@r0		
    a654:	80 00 00 00 	bra	#0x00000	
    a658:	00 00       	bra	@r0		
    a65a:	00 00       	bra	@r0		
    a65c:	ec 00       	adda	r0,	r12	
    a65e:	00 00       	bra	@r0		
    a660:	80 00 00 00 	bra	#0x00000	
    a664:	00 00       	bra	@r0		
    a666:	00 00       	bra	@r0		
    a668:	24 01 00 00 	mova	&0x10000,r4	
    a66c:	80 00 00 00 	bra	#0x00000	
    a670:	00 00       	bra	@r0		
    a672:	00 00       	bra	@r0		
    a674:	66 01 00 00 	mova	r1,	&0x60000
    a678:	80 00 00 00 	bra	#0x00000	
    a67c:	00 00       	bra	@r0		
    a67e:	00 00       	bra	@r0		
    a680:	b7 01 00 00 	suba	#0x10000,r7	
    a684:	80 00 00 00 	bra	#0x00000	
    a688:	00 00       	bra	@r0		
    a68a:	00 00       	bra	@r0		
    a68c:	08 02       	mova	#4,	r8	;r2 As==10
    a68e:	00 00       	bra	@r0		
    a690:	80 00 00 00 	bra	#0x00000	
    a694:	00 00       	bra	@r0		
    a696:	00 00       	bra	@r0		
    a698:	2e 02 00 00 	mova	&0x20000,r14	
    a69c:	80 00 00 00 	bra	#0x00000	
    a6a0:	00 00       	bra	@r0		
    a6a2:	00 00       	bra	@r0		
    a6a4:	6c 02 00 00 	mova	r2,	&0xc0000
    a6a8:	80 00 00 00 	bra	#0x00000	
    a6ac:	00 00       	bra	@r0		
    a6ae:	00 00       	bra	@r0		
    a6b0:	96 02 00 00 	cmpa	#0x20000,r6	
    a6b4:	80 00 00 00 	bra	#0x00000	
    a6b8:	00 00       	bra	@r0		
    a6ba:	00 00       	bra	@r0		
    a6bc:	bf 02 00 00 	suba	#0x20000,r15	
    a6c0:	80 00 00 00 	bra	#0x00000	
    a6c4:	00 00       	bra	@r0		
    a6c6:	00 00       	bra	@r0		
    a6c8:	d9 02       	cmpa	r2,	r9	
    a6ca:	00 00       	bra	@r0		
    a6cc:	80 00 00 00 	bra	#0x00000	
    a6d0:	00 00       	bra	@r0		
    a6d2:	00 00       	bra	@r0		
    a6d4:	f4 02       	suba	r2,	r4	
    a6d6:	00 00       	bra	@r0		
    a6d8:	80 00 00 00 	bra	#0x00000	
    a6dc:	00 00       	bra	@r0		
    a6de:	00 00       	bra	@r0		
    a6e0:	14 03       	mova	#-1,	r4	;r3 As==11
    a6e2:	00 00       	bra	@r0		
    a6e4:	80 00 00 00 	bra	#0x00000	
    a6e8:	00 00       	bra	@r0		
    a6ea:	00 00       	bra	@r0		
    a6ec:	4d 03       	rrum.a	#1,	r13	
    a6ee:	00 00       	bra	@r0		
    a6f0:	80 00 00 00 	bra	#0x00000	
    a6f4:	00 00       	bra	@r0		
    a6f6:	00 00       	bra	@r0		
    a6f8:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    a6fc:	80 00 00 00 	bra	#0x00000	
    a700:	00 00       	bra	@r0		
    a702:	00 00       	bra	@r0		
    a704:	8a 03 00 00 	mova	#0x30000,r10	
    a708:	80 00 00 00 	bra	#0x00000	
    a70c:	00 00       	bra	@r0		
    a70e:	00 00       	bra	@r0		
    a710:	ae 03 00 00 	adda	#0x30000,r14	
    a714:	80 00 00 00 	bra	#0x00000	
    a718:	00 00       	bra	@r0		
    a71a:	00 00       	bra	@r0		
    a71c:	d7 03       	tsta	r7		
    a71e:	00 00       	bra	@r0		
    a720:	80 00 00 00 	bra	#0x00000	
    a724:	00 00       	bra	@r0		
    a726:	00 00       	bra	@r0		
    a728:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    a72c:	82 00 00 00 	mova	#0x00000,r2	
    a730:	2e 07 00 00 	mova	&0x70000,r14	
    a734:	4b 4b       	mov.b	r11,	r11	
    a736:	00 00       	bra	@r0		
    a738:	c2 00       	mova	r0,	r2	
    a73a:	00 00       	bra	@r0		
    a73c:	e5 1d       	.word	0x1de5;	????	
    a73e:	00 00       	bra	@r0		
    a740:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    a744:	c2 00       	mova	r0,	r2	
    a746:	00 00       	bra	@r0		
    a748:	00 00       	bra	@r0		
    a74a:	00 00       	bra	@r0		
    a74c:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    a750:	c2 00 
    a752:	00 00       	bra	@r0		
    a754:	00 00       	bra	@r0		
    a756:	00 00       	bra	@r0		
    a758:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    a75c:	c2 00       	mova	r0,	r2	
    a75e:	00 00       	bra	@r0		
    a760:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    a764:	06 4d       	mov	r13,	r6	
    a766:	00 00       	bra	@r0		
    a768:	c2 00       	mova	r0,	r2	
    a76a:	00 00       	bra	@r0		
    a76c:	00 00       	bra	@r0		
    a76e:	00 00       	bra	@r0		
    a770:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    a774:	c2 00       	mova	r0,	r2	
    a776:	00 00       	bra	@r0		
    a778:	00 00       	bra	@r0		
    a77a:	00 00       	bra	@r0		
    a77c:	91 4f 00 00 	mov	0(r15),	194(r1)	;0x0000(r15), 0x00c2(r1)
    a780:	c2 00 
    a782:	00 00       	bra	@r0		
    a784:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    a788:	e9 54 00 00 	add.b	@r4,	0(r9)	;0x0000(r9)
    a78c:	20 00 81 00 	bra	&0x00081	
	...
    a798:	64 00 00 00 	mova	r0,	&0x40000
    a79c:	d8 5d 00 00 	add.b	0(r13),	19216(r8);0x0000(r13), 0x4b10(r8)
    a7a0:	10 4b 
    a7a2:	00 00       	bra	@r0		
    a7a4:	64 00 00 00 	mova	r0,	&0x40000
    a7a8:	d8 5d 00 00 	add.b	0(r13),	20360(r8);0x0000(r13), 0x4f88(r8)
    a7ac:	88 4f 
    a7ae:	00 00       	bra	@r0		
    a7b0:	64 00 00 00 	mova	r0,	&0x40000
    a7b4:	d8 5d 00 00 	add.b	0(r13),	106(r8)	;0x0000(r13), 0x006a(r8)
    a7b8:	6a 00 
    a7ba:	00 00       	bra	@r0		
    a7bc:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0a7be
    a7c0:	00 00       	bra	@r0		
    a7c2:	00 00       	bra	@r0		
    a7c4:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    a7c8:	80 00 00 00 	bra	#0x00000	
    a7cc:	00 00       	bra	@r0		
    a7ce:	00 00       	bra	@r0		
    a7d0:	99 00 00 00 	cmpa	#0x00000,r9	
    a7d4:	80 00 00 00 	bra	#0x00000	
    a7d8:	00 00       	bra	@r0		
    a7da:	00 00       	bra	@r0		
    a7dc:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    a7de:	00 00       	bra	@r0		
    a7e0:	80 00 00 00 	bra	#0x00000	
    a7e4:	00 00       	bra	@r0		
    a7e6:	00 00       	bra	@r0		
    a7e8:	ec 00       	adda	r0,	r12	
    a7ea:	00 00       	bra	@r0		
    a7ec:	80 00 00 00 	bra	#0x00000	
    a7f0:	00 00       	bra	@r0		
    a7f2:	00 00       	bra	@r0		
    a7f4:	24 01 00 00 	mova	&0x10000,r4	
    a7f8:	80 00 00 00 	bra	#0x00000	
    a7fc:	00 00       	bra	@r0		
    a7fe:	00 00       	bra	@r0		
    a800:	66 01 00 00 	mova	r1,	&0x60000
    a804:	80 00 00 00 	bra	#0x00000	
    a808:	00 00       	bra	@r0		
    a80a:	00 00       	bra	@r0		
    a80c:	b7 01 00 00 	suba	#0x10000,r7	
    a810:	80 00 00 00 	bra	#0x00000	
    a814:	00 00       	bra	@r0		
    a816:	00 00       	bra	@r0		
    a818:	08 02       	mova	#4,	r8	;r2 As==10
    a81a:	00 00       	bra	@r0		
    a81c:	80 00 00 00 	bra	#0x00000	
    a820:	00 00       	bra	@r0		
    a822:	00 00       	bra	@r0		
    a824:	2e 02 00 00 	mova	&0x20000,r14	
    a828:	80 00 00 00 	bra	#0x00000	
    a82c:	00 00       	bra	@r0		
    a82e:	00 00       	bra	@r0		
    a830:	6c 02 00 00 	mova	r2,	&0xc0000
    a834:	80 00 00 00 	bra	#0x00000	
    a838:	00 00       	bra	@r0		
    a83a:	00 00       	bra	@r0		
    a83c:	96 02 00 00 	cmpa	#0x20000,r6	
    a840:	80 00 00 00 	bra	#0x00000	
    a844:	00 00       	bra	@r0		
    a846:	00 00       	bra	@r0		
    a848:	bf 02 00 00 	suba	#0x20000,r15	
    a84c:	80 00 00 00 	bra	#0x00000	
    a850:	00 00       	bra	@r0		
    a852:	00 00       	bra	@r0		
    a854:	d9 02       	cmpa	r2,	r9	
    a856:	00 00       	bra	@r0		
    a858:	80 00 00 00 	bra	#0x00000	
    a85c:	00 00       	bra	@r0		
    a85e:	00 00       	bra	@r0		
    a860:	f4 02       	suba	r2,	r4	
    a862:	00 00       	bra	@r0		
    a864:	80 00 00 00 	bra	#0x00000	
    a868:	00 00       	bra	@r0		
    a86a:	00 00       	bra	@r0		
    a86c:	14 03       	mova	#-1,	r4	;r3 As==11
    a86e:	00 00       	bra	@r0		
    a870:	80 00 00 00 	bra	#0x00000	
    a874:	00 00       	bra	@r0		
    a876:	00 00       	bra	@r0		
    a878:	4d 03       	rrum.a	#1,	r13	
    a87a:	00 00       	bra	@r0		
    a87c:	80 00 00 00 	bra	#0x00000	
    a880:	00 00       	bra	@r0		
    a882:	00 00       	bra	@r0		
    a884:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    a888:	80 00 00 00 	bra	#0x00000	
    a88c:	00 00       	bra	@r0		
    a88e:	00 00       	bra	@r0		
    a890:	8a 03 00 00 	mova	#0x30000,r10	
    a894:	80 00 00 00 	bra	#0x00000	
    a898:	00 00       	bra	@r0		
    a89a:	00 00       	bra	@r0		
    a89c:	ae 03 00 00 	adda	#0x30000,r14	
    a8a0:	80 00 00 00 	bra	#0x00000	
    a8a4:	00 00       	bra	@r0		
    a8a6:	00 00       	bra	@r0		
    a8a8:	d7 03       	tsta	r7		
    a8aa:	00 00       	bra	@r0		
    a8ac:	80 00 00 00 	bra	#0x00000	
    a8b0:	00 00       	bra	@r0		
    a8b2:	00 00       	bra	@r0		
    a8b4:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    a8b8:	82 00 00 00 	mova	#0x00000,r2	
    a8bc:	f4 1f       	.word	0x1ff4;	????	
    a8be:	00 00       	bra	@r0		
    a8c0:	4b 4b       	mov.b	r11,	r11	
    a8c2:	00 00       	bra	@r0		
    a8c4:	c2 00       	mova	r0,	r2	
    a8c6:	00 00       	bra	@r0		
    a8c8:	e5 1d       	.word	0x1de5;	????	
    a8ca:	00 00       	bra	@r0		
    a8cc:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    a8d0:	c2 00       	mova	r0,	r2	
    a8d2:	00 00       	bra	@r0		
    a8d4:	00 00       	bra	@r0		
    a8d6:	00 00       	bra	@r0		
    a8d8:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    a8dc:	c2 00 
    a8de:	00 00       	bra	@r0		
    a8e0:	00 00       	bra	@r0		
    a8e2:	00 00       	bra	@r0		
    a8e4:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    a8e8:	c2 00       	mova	r0,	r2	
    a8ea:	00 00       	bra	@r0		
    a8ec:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    a8f0:	06 4d       	mov	r13,	r6	
    a8f2:	00 00       	bra	@r0		
    a8f4:	c2 00       	mova	r0,	r2	
    a8f6:	00 00       	bra	@r0		
    a8f8:	00 00       	bra	@r0		
    a8fa:	00 00       	bra	@r0		
    a8fc:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    a900:	c2 00       	mova	r0,	r2	
    a902:	00 00       	bra	@r0		
    a904:	00 00       	bra	@r0		
    a906:	00 00       	bra	@r0		
    a908:	91 4f 00 00 	mov	0(r15),	194(r1)	;0x0000(r15), 0x00c2(r1)
    a90c:	c2 00 
    a90e:	00 00       	bra	@r0		
    a910:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    a914:	04 55       	add	r5,	r4	
    a916:	00 00       	bra	@r0		
    a918:	24 00 b9 00 	mova	&0x000b9,r4	
    a91c:	d8 5d 00 00 	add.b	0(r13),	21781(r8);0x0000(r13), 0x5515(r8)
    a920:	15 55 
    a922:	00 00       	bra	@r0		
    a924:	40 00       	rrcm.a	#1,	r0	
    a926:	b8 00 0f 00 	suba	#0x0000f,r8	
    a92a:	00 00       	bra	@r0		
    a92c:	00 00       	bra	@r0		
    a92e:	00 00       	bra	@r0		
    a930:	44 00       	rrcm.a	#1,	r4	
    a932:	b9 00 00 00 	suba	#0x00000,r9	
    a936:	00 00       	bra	@r0		
    a938:	00 00       	bra	@r0		
    a93a:	00 00       	bra	@r0		
    a93c:	44 00       	rrcm.a	#1,	r4	
    a93e:	bb 00 0c 00 	suba	#0x0000c,r11	
    a942:	00 00       	bra	@r0		
    a944:	00 00       	bra	@r0		
    a946:	00 00       	bra	@r0		
    a948:	44 00       	rrcm.a	#1,	r4	
    a94a:	bc 00 14 00 	suba	#0x00014,r12	
    a94e:	00 00       	bra	@r0		
    a950:	00 00       	bra	@r0		
    a952:	00 00       	bra	@r0		
    a954:	44 00       	rrcm.a	#1,	r4	
    a956:	bd 00 18 00 	suba	#0x00018,r13	
    a95a:	00 00       	bra	@r0		
    a95c:	00 00       	bra	@r0		
    a95e:	00 00       	bra	@r0		
    a960:	44 00       	rrcm.a	#1,	r4	
    a962:	9a 00 1a 00 	cmpa	#0x0001a,r10	
    a966:	00 00       	bra	@r0		
    a968:	00 00       	bra	@r0		
    a96a:	00 00       	bra	@r0		
    a96c:	44 00       	rrcm.a	#1,	r4	
    a96e:	99 00 24 00 	cmpa	#0x00024,r9	
    a972:	00 00       	bra	@r0		
    a974:	00 00       	bra	@r0		
    a976:	00 00       	bra	@r0		
    a978:	44 00       	rrcm.a	#1,	r4	
    a97a:	c1 00       	mova	r0,	r1	
    a97c:	28 00 00 00 	mova	&0x00000,r8	
    a980:	00 00       	bra	@r0		
    a982:	00 00       	bra	@r0		
    a984:	44 00       	rrcm.a	#1,	r4	
    a986:	c4 00       	mova	r0,	r4	
    a988:	2c 00 00 00 	mova	&0x00000,r12	
    a98c:	00 00       	bra	@r0		
    a98e:	00 00       	bra	@r0		
    a990:	44 00       	rrcm.a	#1,	r4	
    a992:	a1 00 32 00 	adda	#0x00032,r1	
    a996:	00 00       	bra	@r0		
    a998:	00 00       	bra	@r0		
    a99a:	00 00       	bra	@r0		
    a99c:	44 00       	rrcm.a	#1,	r4	
    a99e:	a0 00 38 00 	adda	#0x00038,r0	
    a9a2:	00 00       	bra	@r0		
    a9a4:	00 00       	bra	@r0		
    a9a6:	00 00       	bra	@r0		
    a9a8:	44 00       	rrcm.a	#1,	r4	
    a9aa:	aa 00 3c 00 	adda	#0x0003c,r10	
    a9ae:	00 00       	bra	@r0		
    a9b0:	00 00       	bra	@r0		
    a9b2:	00 00       	bra	@r0		
    a9b4:	44 00       	rrcm.a	#1,	r4	
    a9b6:	a9 00 42 00 	adda	#0x00042,r9	
    a9ba:	00 00       	bra	@r0		
    a9bc:	00 00       	bra	@r0		
    a9be:	00 00       	bra	@r0		
    a9c0:	44 00       	rrcm.a	#1,	r4	
    a9c2:	d1 00       	cmpa	r0,	r1	
    a9c4:	46 00       	rrcm.a	#1,	r6	
    a9c6:	00 00       	bra	@r0		
    a9c8:	00 00       	bra	@r0		
    a9ca:	00 00       	bra	@r0		
    a9cc:	44 00       	rrcm.a	#1,	r4	
    a9ce:	d7 00       	cmpa	r0,	r7	
    a9d0:	4e 00       	rrcm.a	#1,	r14	
    a9d2:	00 00       	bra	@r0		
    a9d4:	00 00       	bra	@r0		
    a9d6:	00 00       	bra	@r0		
    a9d8:	44 00       	rrcm.a	#1,	r4	
    a9da:	dd 00       	cmpa	r0,	r13	
    a9dc:	58 00       	rrcm	#1,	r8	
    a9de:	00 00       	bra	@r0		
    a9e0:	00 00       	bra	@r0		
    a9e2:	00 00       	bra	@r0		
    a9e4:	44 00       	rrcm.a	#1,	r4	
    a9e6:	e1 00       	adda	r0,	r1	
    a9e8:	5e 00       	rrcm	#1,	r14	
    a9ea:	00 00       	bra	@r0		
    a9ec:	00 00       	bra	@r0		
    a9ee:	00 00       	bra	@r0		
    a9f0:	44 00       	rrcm.a	#1,	r4	
    a9f2:	e4 00       	adda	r0,	r4	
    a9f4:	64 00 00 00 	mova	r0,	&0x40000
    a9f8:	00 00       	bra	@r0		
    a9fa:	00 00       	bra	@r0		
    a9fc:	44 00       	rrcm.a	#1,	r4	
    a9fe:	eb 00       	adda	r0,	r11	
    aa00:	68 00 00 00 	mova	r0,	&0x80000
    aa04:	00 00       	bra	@r0		
    aa06:	00 00       	bra	@r0		
    aa08:	44 00       	rrcm.a	#1,	r4	
    aa0a:	f3 00       	.word	0x00f3;	????	Illegal as address instr
    aa0c:	7c 00 00 00 	mova	r0,	0(r12)	;0x0000(r12)
    aa10:	00 00       	bra	@r0		
    aa12:	00 00       	bra	@r0		
    aa14:	44 00       	rrcm.a	#1,	r4	
    aa16:	f7 00       	suba	r0,	r7	
    aa18:	82 00 00 00 	mova	#0x00000,r2	
    aa1c:	00 00       	bra	@r0		
    aa1e:	00 00       	bra	@r0		
    aa20:	44 00       	rrcm.a	#1,	r4	
    aa22:	f9 00       	suba	r0,	r9	
    aa24:	88 00 00 00 	mova	#0x00000,r8	
    aa28:	00 00       	bra	@r0		
    aa2a:	00 00       	bra	@r0		
    aa2c:	44 00       	rrcm.a	#1,	r4	
    aa2e:	fb 00       	suba	r0,	r11	
    aa30:	8a 00 00 00 	mova	#0x00000,r10	
    aa34:	00 00       	bra	@r0		
    aa36:	00 00       	bra	@r0		
    aa38:	44 00       	rrcm.a	#1,	r4	
    aa3a:	17 01       	mova	@r1+,	r7	
    aa3c:	8a 00 00 00 	mova	#0x00000,r10	
    aa40:	00 00       	bra	@r0		
    aa42:	00 00       	bra	@r0		
    aa44:	44 00       	rrcm.a	#1,	r4	
    aa46:	ed 00       	adda	r0,	r13	
    aa48:	aa 00 00 00 	adda	#0x00000,r10	
    aa4c:	00 00       	bra	@r0		
    aa4e:	00 00       	bra	@r0		
    aa50:	44 00       	rrcm.a	#1,	r4	
    aa52:	ee 00       	adda	r0,	r14	
    aa54:	ae 00 00 00 	adda	#0x00000,r14	
    aa58:	00 00       	bra	@r0		
    aa5a:	00 00       	bra	@r0		
    aa5c:	44 00       	rrcm.a	#1,	r4	
    aa5e:	e8 00       	adda	r0,	r8	
    aa60:	b6 00 00 00 	suba	#0x00000,r6	
    aa64:	00 00       	bra	@r0		
    aa66:	00 00       	bra	@r0		
    aa68:	44 00       	rrcm.a	#1,	r4	
    aa6a:	e9 00       	adda	r0,	r9	
    aa6c:	da 00       	cmpa	r0,	r10	
    aa6e:	00 00       	bra	@r0		
    aa70:	00 00       	bra	@r0		
    aa72:	00 00       	bra	@r0		
    aa74:	44 00       	rrcm.a	#1,	r4	
    aa76:	fd 00       	suba	r0,	r13	
    aa78:	fa 00       	suba	r0,	r10	
    aa7a:	00 00       	bra	@r0		
    aa7c:	00 00       	bra	@r0		
    aa7e:	00 00       	bra	@r0		
    aa80:	44 00       	rrcm.a	#1,	r4	
    aa82:	ff 00       	suba	r0,	r15	
    aa84:	00 01       	bra	@r1		
    aa86:	00 00       	bra	@r0		
    aa88:	00 00       	bra	@r0		
    aa8a:	00 00       	bra	@r0		
    aa8c:	44 00       	rrcm.a	#1,	r4	
    aa8e:	00 01       	bra	@r1		
    aa90:	04 01       	mova	@r1,	r4	
    aa92:	00 00       	bra	@r0		
    aa94:	00 00       	bra	@r0		
    aa96:	00 00       	bra	@r0		
    aa98:	44 00       	rrcm.a	#1,	r4	
    aa9a:	04 01       	mova	@r1,	r4	
    aa9c:	0a 01       	mova	@r1,	r10	
    aa9e:	00 00       	bra	@r0		
    aaa0:	00 00       	bra	@r0		
    aaa2:	00 00       	bra	@r0		
    aaa4:	44 00       	rrcm.a	#1,	r4	
    aaa6:	08 01       	mova	@r1,	r8	
    aaa8:	10 01       	reta			
    aaaa:	00 00       	bra	@r0		
    aaac:	00 00       	bra	@r0		
    aaae:	00 00       	bra	@r0		
    aab0:	44 00       	rrcm.a	#1,	r4	
    aab2:	10 01       	reta			
    aab4:	24 01 00 00 	mova	&0x10000,r4	
    aab8:	00 00       	bra	@r0		
    aaba:	00 00       	bra	@r0		
    aabc:	44 00       	rrcm.a	#1,	r4	
    aabe:	12 01       	mova	@r1+,	r2	
    aac0:	2a 01 00 00 	mova	&0x10000,r10	
    aac4:	00 00       	bra	@r0		
    aac6:	00 00       	bra	@r0		
    aac8:	44 00       	rrcm.a	#1,	r4	
    aaca:	14 01       	mova	@r1+,	r4	
    aacc:	30 01 00 00 	bra	0(r1)		;0x0000(r1)
    aad0:	00 00       	bra	@r0		
    aad2:	00 00       	bra	@r0		
    aad4:	44 00       	rrcm.a	#1,	r4	
    aad6:	15 01       	mova	@r1+,	r5	
    aad8:	36 01 00 00 	mova	0(r1),	r6	;0x0000(r1)
    aadc:	00 00       	bra	@r0		
    aade:	00 00       	bra	@r0		
    aae0:	44 00       	rrcm.a	#1,	r4	
    aae2:	0a 01       	mova	@r1,	r10	
    aae4:	3a 01 00 00 	mova	0(r1),	r10	;0x0000(r1)
    aae8:	00 00       	bra	@r0		
    aaea:	00 00       	bra	@r0		
    aaec:	44 00       	rrcm.a	#1,	r4	
    aaee:	0b 01       	mova	@r1,	r11	
    aaf0:	3e 01 00 00 	mova	0(r1),	r14	;0x0000(r1)
    aaf4:	00 00       	bra	@r0		
    aaf6:	00 00       	bra	@r0		
    aaf8:	44 00       	rrcm.a	#1,	r4	
    aafa:	1f 01       	mova	@r1+,	r15	
    aafc:	4e 01       	rram.a	#1,	r14	
    aafe:	00 00       	bra	@r0		
    ab00:	00 00       	bra	@r0		
    ab02:	00 00       	bra	@r0		
    ab04:	44 00       	rrcm.a	#1,	r4	
    ab06:	20 01 66 01 	bra	&0x10166	
    ab0a:	00 00       	bra	@r0		
    ab0c:	00 00       	bra	@r0		
    ab0e:	00 00       	bra	@r0		
    ab10:	44 00       	rrcm.a	#1,	r4	
    ab12:	21 01 86 01 	mova	&0x10186,r1	
    ab16:	00 00       	bra	@r0		
    ab18:	00 00       	bra	@r0		
    ab1a:	00 00       	bra	@r0		
    ab1c:	44 00       	rrcm.a	#1,	r4	
    ab1e:	31 01 9c 01 	mova	412(r1),r1	;0x019c(r1)
    ab22:	00 00       	bra	@r0		
    ab24:	28 55       	add	@r5,	r8	
    ab26:	00 00       	bra	@r0		
    ab28:	80 00 ba 00 	bra	#0x000ba	
    ab2c:	00 00       	bra	@r0		
    ab2e:	00 00       	bra	@r0		
    ab30:	33 55       	.word	0x5533;	????	Illegal as 2-op instr
    ab32:	00 00       	bra	@r0		
    ab34:	40 00       	rrcm.a	#1,	r0	
    ab36:	bb 00 0c 00 	suba	#0x0000c,r11	
    ab3a:	00 00       	bra	@r0		
    ab3c:	43 55       	.word	0x5543;	????	Illegal as 2-op instr
    ab3e:	00 00       	bra	@r0		
    ab40:	40 00       	rrcm.a	#1,	r0	
    ab42:	bc 00 09 00 	suba	#0x00009,r12	
    ab46:	00 00       	bra	@r0		
    ab48:	4f 55       	add.b	r5,	r15	
    ab4a:	00 00       	bra	@r0		
    ab4c:	40 00       	rrcm.a	#1,	r0	
    ab4e:	bd 00 0a 00 	suba	#0x0000a,r13	
    ab52:	00 00       	bra	@r0		
    ab54:	00 00       	bra	@r0		
    ab56:	00 00       	bra	@r0		
    ab58:	c0 00       	bra	r0		
    ab5a:	00 00       	bra	@r0		
    ab5c:	0c 00       	mova	@r0,	r12	
    ab5e:	00 00       	bra	@r0		
    ab60:	5a 55 00 00 	add.b	0(r5),	r10	;0x0000(r5)
    ab64:	40 00       	rrcm.a	#1,	r0	
    ab66:	dd 00       	cmpa	r0,	r13	
    ab68:	08 00       	mova	@r0,	r8	
    ab6a:	00 00       	bra	@r0		
    ab6c:	00 00       	bra	@r0		
    ab6e:	00 00       	bra	@r0		
    ab70:	c0 00       	bra	r0		
    ab72:	00 00       	bra	@r0		
    ab74:	58 00       	rrcm	#1,	r8	
    ab76:	00 00       	bra	@r0		
    ab78:	00 00       	bra	@r0		
    ab7a:	00 00       	bra	@r0		
    ab7c:	e0 00       	adda	r0,	r0	
    ab7e:	00 00       	bra	@r0		
    ab80:	8a 00 00 00 	mova	#0x00000,r10	
    ab84:	5a 55 00 00 	add.b	0(r5),	r10	;0x0000(r5)
    ab88:	40 00       	rrcm.a	#1,	r0	
    ab8a:	dd 00       	cmpa	r0,	r13	
    ab8c:	08 00       	mova	@r0,	r8	
    ab8e:	00 00       	bra	@r0		
    ab90:	00 00       	bra	@r0		
    ab92:	00 00       	bra	@r0		
    ab94:	c0 00       	bra	r0		
    ab96:	00 00       	bra	@r0		
    ab98:	aa 00 00 00 	adda	#0x00000,r10	
    ab9c:	67 55       	add.b	@r5,	r7	
    ab9e:	00 00       	bra	@r0		
    aba0:	40 00       	rrcm.a	#1,	r0	
    aba2:	e8 00       	adda	r0,	r8	
    aba4:	07 00       	mova	@r0,	r7	
    aba6:	00 00       	bra	@r0		
    aba8:	00 00       	bra	@r0		
    abaa:	00 00       	bra	@r0		
    abac:	c0 00       	bra	r0		
    abae:	00 00       	bra	@r0		
    abb0:	b6 00 00 00 	suba	#0x00000,r6	
    abb4:	00 00       	bra	@r0		
    abb6:	00 00       	bra	@r0		
    abb8:	e0 00       	adda	r0,	r0	
    abba:	00 00       	bra	@r0		
    abbc:	fa 00       	suba	r0,	r10	
    abbe:	00 00       	bra	@r0		
    abc0:	00 00       	bra	@r0		
    abc2:	00 00       	bra	@r0		
    abc4:	e0 00       	adda	r0,	r0	
    abc6:	00 00       	bra	@r0		
    abc8:	fa 00       	suba	r0,	r10	
    abca:	00 00       	bra	@r0		
    abcc:	00 00       	bra	@r0		
    abce:	00 00       	bra	@r0		
    abd0:	e0 00       	adda	r0,	r0	
    abd2:	00 00       	bra	@r0		
    abd4:	9c 01 00 00 	cmpa	#0x10000,r12	
    abd8:	00 00       	bra	@r0		
    abda:	00 00       	bra	@r0		
    abdc:	24 00 00 00 	mova	&0x00000,r4	
    abe0:	b0 01 00 00 	suba	#0x10000,r0	
    abe4:	00 00       	bra	@r0		
    abe6:	00 00       	bra	@r0		
    abe8:	64 00 00 00 	mova	r0,	&0x40000
    abec:	88 5f 00 00 	add	r15,	0(r8)	;0x0000(r8)
    abf0:	10 4b 00 00 	br	0(r11)		;0x0000(r11)
    abf4:	64 00 00 00 	mova	r0,	&0x40000
    abf8:	88 5f 00 00 	add	r15,	0(r8)	;0x0000(r8)
    abfc:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    ac00:	64 00 00 00 	mova	r0,	&0x40000
    ac04:	88 5f 00 00 	add	r15,	0(r8)	;0x0000(r8)
    ac08:	6a 00 00 00 	mova	r0,	&0xa0000
    ac0c:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0ac0e
    ac10:	00 00       	bra	@r0		
    ac12:	00 00       	bra	@r0		
    ac14:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    ac18:	80 00 00 00 	bra	#0x00000	
    ac1c:	00 00       	bra	@r0		
    ac1e:	00 00       	bra	@r0		
    ac20:	99 00 00 00 	cmpa	#0x00000,r9	
    ac24:	80 00 00 00 	bra	#0x00000	
    ac28:	00 00       	bra	@r0		
    ac2a:	00 00       	bra	@r0		
    ac2c:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    ac2e:	00 00       	bra	@r0		
    ac30:	80 00 00 00 	bra	#0x00000	
    ac34:	00 00       	bra	@r0		
    ac36:	00 00       	bra	@r0		
    ac38:	ec 00       	adda	r0,	r12	
    ac3a:	00 00       	bra	@r0		
    ac3c:	80 00 00 00 	bra	#0x00000	
    ac40:	00 00       	bra	@r0		
    ac42:	00 00       	bra	@r0		
    ac44:	24 01 00 00 	mova	&0x10000,r4	
    ac48:	80 00 00 00 	bra	#0x00000	
    ac4c:	00 00       	bra	@r0		
    ac4e:	00 00       	bra	@r0		
    ac50:	66 01 00 00 	mova	r1,	&0x60000
    ac54:	80 00 00 00 	bra	#0x00000	
    ac58:	00 00       	bra	@r0		
    ac5a:	00 00       	bra	@r0		
    ac5c:	b7 01 00 00 	suba	#0x10000,r7	
    ac60:	80 00 00 00 	bra	#0x00000	
    ac64:	00 00       	bra	@r0		
    ac66:	00 00       	bra	@r0		
    ac68:	08 02       	mova	#4,	r8	;r2 As==10
    ac6a:	00 00       	bra	@r0		
    ac6c:	80 00 00 00 	bra	#0x00000	
    ac70:	00 00       	bra	@r0		
    ac72:	00 00       	bra	@r0		
    ac74:	2e 02 00 00 	mova	&0x20000,r14	
    ac78:	80 00 00 00 	bra	#0x00000	
    ac7c:	00 00       	bra	@r0		
    ac7e:	00 00       	bra	@r0		
    ac80:	6c 02 00 00 	mova	r2,	&0xc0000
    ac84:	80 00 00 00 	bra	#0x00000	
    ac88:	00 00       	bra	@r0		
    ac8a:	00 00       	bra	@r0		
    ac8c:	96 02 00 00 	cmpa	#0x20000,r6	
    ac90:	80 00 00 00 	bra	#0x00000	
    ac94:	00 00       	bra	@r0		
    ac96:	00 00       	bra	@r0		
    ac98:	bf 02 00 00 	suba	#0x20000,r15	
    ac9c:	80 00 00 00 	bra	#0x00000	
    aca0:	00 00       	bra	@r0		
    aca2:	00 00       	bra	@r0		
    aca4:	d9 02       	cmpa	r2,	r9	
    aca6:	00 00       	bra	@r0		
    aca8:	80 00 00 00 	bra	#0x00000	
    acac:	00 00       	bra	@r0		
    acae:	00 00       	bra	@r0		
    acb0:	f4 02       	suba	r2,	r4	
    acb2:	00 00       	bra	@r0		
    acb4:	80 00 00 00 	bra	#0x00000	
    acb8:	00 00       	bra	@r0		
    acba:	00 00       	bra	@r0		
    acbc:	14 03       	mova	#-1,	r4	;r3 As==11
    acbe:	00 00       	bra	@r0		
    acc0:	80 00 00 00 	bra	#0x00000	
    acc4:	00 00       	bra	@r0		
    acc6:	00 00       	bra	@r0		
    acc8:	4d 03       	rrum.a	#1,	r13	
    acca:	00 00       	bra	@r0		
    accc:	80 00 00 00 	bra	#0x00000	
    acd0:	00 00       	bra	@r0		
    acd2:	00 00       	bra	@r0		
    acd4:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    acd8:	80 00 00 00 	bra	#0x00000	
    acdc:	00 00       	bra	@r0		
    acde:	00 00       	bra	@r0		
    ace0:	8a 03 00 00 	mova	#0x30000,r10	
    ace4:	80 00 00 00 	bra	#0x00000	
    ace8:	00 00       	bra	@r0		
    acea:	00 00       	bra	@r0		
    acec:	ae 03 00 00 	adda	#0x30000,r14	
    acf0:	80 00 00 00 	bra	#0x00000	
    acf4:	00 00       	bra	@r0		
    acf6:	00 00       	bra	@r0		
    acf8:	d7 03       	tsta	r7		
    acfa:	00 00       	bra	@r0		
    acfc:	80 00 00 00 	bra	#0x00000	
    ad00:	00 00       	bra	@r0		
    ad02:	00 00       	bra	@r0		
    ad04:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    ad08:	82 00 00 00 	mova	#0x00000,r2	
    ad0c:	62 17       	popm	#7,	r8	
    ad0e:	00 00       	bra	@r0		
    ad10:	4b 4b       	mov.b	r11,	r11	
    ad12:	00 00       	bra	@r0		
    ad14:	c2 00       	mova	r0,	r2	
    ad16:	00 00       	bra	@r0		
    ad18:	e5 1d       	.word	0x1de5;	????	
    ad1a:	00 00       	bra	@r0		
    ad1c:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    ad20:	c2 00       	mova	r0,	r2	
    ad22:	00 00       	bra	@r0		
    ad24:	00 00       	bra	@r0		
    ad26:	00 00       	bra	@r0		
    ad28:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    ad2c:	c2 00 
    ad2e:	00 00       	bra	@r0		
    ad30:	00 00       	bra	@r0		
    ad32:	00 00       	bra	@r0		
    ad34:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    ad38:	c2 00       	mova	r0,	r2	
    ad3a:	00 00       	bra	@r0		
    ad3c:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    ad40:	06 4d       	mov	r13,	r6	
    ad42:	00 00       	bra	@r0		
    ad44:	c2 00       	mova	r0,	r2	
    ad46:	00 00       	bra	@r0		
    ad48:	00 00       	bra	@r0		
    ad4a:	00 00       	bra	@r0		
    ad4c:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    ad50:	c2 00       	mova	r0,	r2	
    ad52:	00 00       	bra	@r0		
    ad54:	00 00       	bra	@r0		
    ad56:	00 00       	bra	@r0		
    ad58:	91 4f 00 00 	mov	0(r15),	194(r1)	;0x0000(r15), 0x00c2(r1)
    ad5c:	c2 00 
    ad5e:	00 00       	bra	@r0		
    ad60:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    ad64:	75 55       	add.b	@r5+,	r5	
    ad66:	00 00       	bra	@r0		
    ad68:	24 00 37 01 	mova	&0x00137,r4	
    ad6c:	88 5f 00 00 	add	r15,	0(r8)	;0x0000(r8)
    ad70:	88 55 00 00 	add	r5,	0(r8)	;0x0000(r8)
    ad74:	40 00       	rrcm.a	#1,	r0	
    ad76:	36 01 0f 00 	mova	15(r1),	r6	;0x000f(r1)
    ad7a:	00 00       	bra	@r0		
    ad7c:	9b 55 00 00 	add	0(r5),	64(r11)	;0x0000(r5), 0x0040(r11)
    ad80:	40 00 
    ad82:	36 01 0b 00 	mova	11(r1),	r6	;0x000b(r1)
    ad86:	00 00       	bra	@r0		
    ad88:	00 00       	bra	@r0		
    ad8a:	00 00       	bra	@r0		
    ad8c:	44 00       	rrcm.a	#1,	r4	
    ad8e:	37 01 00 00 	mova	0(r1),	r7	;0x0000(r1)
    ad92:	00 00       	bra	@r0		
    ad94:	00 00       	bra	@r0		
    ad96:	00 00       	bra	@r0		
    ad98:	44 00       	rrcm.a	#1,	r4	
    ad9a:	48 01       	rram.a	#1,	r8	
    ad9c:	04 00       	mova	@r0,	r4	
    ad9e:	00 00       	bra	@r0		
    ada0:	00 00       	bra	@r0		
    ada2:	00 00       	bra	@r0		
    ada4:	44 00       	rrcm.a	#1,	r4	
    ada6:	49 01       	rram.a	#1,	r9	
    ada8:	0e 00       	mova	@r0,	r14	
    adaa:	00 00       	bra	@r0		
    adac:	00 00       	bra	@r0		
    adae:	00 00       	bra	@r0		
    adb0:	44 00       	rrcm.a	#1,	r4	
    adb2:	4a 01       	rram.a	#1,	r10	
    adb4:	24 00 00 00 	mova	&0x00000,r4	
    adb8:	00 00       	bra	@r0		
    adba:	00 00       	bra	@r0		
    adbc:	44 00       	rrcm.a	#1,	r4	
    adbe:	51 01       	rram	#1,	r1	
    adc0:	2e 00 00 00 	mova	&0x00000,r14	
    adc4:	00 00       	bra	@r0		
    adc6:	00 00       	bra	@r0		
    adc8:	44 00       	rrcm.a	#1,	r4	
    adca:	52 01       	rram	#1,	r2	
    adcc:	32 00 00 00 	mova	0x0000,	r2	;PC rel. 0x0adce
    add0:	00 00       	bra	@r0		
    add2:	00 00       	bra	@r0		
    add4:	44 00       	rrcm.a	#1,	r4	
    add6:	55 01       	rram	#1,	r5	
    add8:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x0adda
    addc:	00 00       	bra	@r0		
    adde:	00 00       	bra	@r0		
    ade0:	44 00       	rrcm.a	#1,	r4	
    ade2:	5c 01       	rram	#1,	r12	
    ade4:	3e 00 00 00 	mova	0x0000,	r14	;PC rel. 0x0ade6
    ade8:	00 00       	bra	@r0		
    adea:	00 00       	bra	@r0		
    adec:	44 00       	rrcm.a	#1,	r4	
    adee:	63 01 44 00 	mova	r1,	&0x30044
    adf2:	00 00       	bra	@r0		
    adf4:	00 00       	bra	@r0		
    adf6:	00 00       	bra	@r0		
    adf8:	44 00       	rrcm.a	#1,	r4	
    adfa:	64 01 4a 00 	mova	r1,	&0x4004a
    adfe:	00 00       	bra	@r0		
    ae00:	00 00       	bra	@r0		
    ae02:	00 00       	bra	@r0		
    ae04:	44 00       	rrcm.a	#1,	r4	
    ae06:	66 01 66 00 	mova	r1,	&0x60066
    ae0a:	00 00       	bra	@r0		
    ae0c:	00 00       	bra	@r0		
    ae0e:	00 00       	bra	@r0		
    ae10:	44 00       	rrcm.a	#1,	r4	
    ae12:	68 01 6c 00 	mova	r1,	&0x8006c
    ae16:	00 00       	bra	@r0		
    ae18:	00 00       	bra	@r0		
    ae1a:	00 00       	bra	@r0		
    ae1c:	44 00       	rrcm.a	#1,	r4	
    ae1e:	6a 01 76 00 	mova	r1,	&0xa0076
    ae22:	00 00       	bra	@r0		
    ae24:	00 00       	bra	@r0		
    ae26:	00 00       	bra	@r0		
    ae28:	44 00       	rrcm.a	#1,	r4	
    ae2a:	6b 01 7a 00 	mova	r1,	&0xb007a
    ae2e:	00 00       	bra	@r0		
    ae30:	00 00       	bra	@r0		
    ae32:	00 00       	bra	@r0		
    ae34:	44 00       	rrcm.a	#1,	r4	
    ae36:	85 01 86 00 	mova	#0x10086,r5	
    ae3a:	00 00       	bra	@r0		
    ae3c:	00 00       	bra	@r0		
    ae3e:	00 00       	bra	@r0		
    ae40:	44 00       	rrcm.a	#1,	r4	
    ae42:	71 01 90 00 	mova	r1,	144(r1)	;0x0090(r1)
    ae46:	00 00       	bra	@r0		
    ae48:	00 00       	bra	@r0		
    ae4a:	00 00       	bra	@r0		
    ae4c:	44 00       	rrcm.a	#1,	r4	
    ae4e:	8b 01 96 00 	mova	#0x10096,r11	
    ae52:	00 00       	bra	@r0		
    ae54:	00 00       	bra	@r0		
    ae56:	00 00       	bra	@r0		
    ae58:	44 00       	rrcm.a	#1,	r4	
    ae5a:	8c 01 9e 00 	mova	#0x1009e,r12	
    ae5e:	00 00       	bra	@r0		
    ae60:	00 00       	bra	@r0		
    ae62:	00 00       	bra	@r0		
    ae64:	44 00       	rrcm.a	#1,	r4	
    ae66:	8d 01 a4 00 	mova	#0x100a4,r13	
    ae6a:	00 00       	bra	@r0		
    ae6c:	00 00       	bra	@r0		
    ae6e:	00 00       	bra	@r0		
    ae70:	44 00       	rrcm.a	#1,	r4	
    ae72:	74 01 d2 00 	mova	r1,	210(r4)	;0x00d2(r4)
    ae76:	00 00       	bra	@r0		
    ae78:	00 00       	bra	@r0		
    ae7a:	00 00       	bra	@r0		
    ae7c:	44 00       	rrcm.a	#1,	r4	
    ae7e:	77 01 da 00 	mova	r1,	218(r7)	;0x00da(r7)
    ae82:	00 00       	bra	@r0		
    ae84:	00 00       	bra	@r0		
    ae86:	00 00       	bra	@r0		
    ae88:	44 00       	rrcm.a	#1,	r4	
    ae8a:	7c 01 e0 00 	mova	r1,	224(r12);0x00e0(r12)
    ae8e:	00 00       	bra	@r0		
    ae90:	00 00       	bra	@r0		
    ae92:	00 00       	bra	@r0		
    ae94:	44 00       	rrcm.a	#1,	r4	
    ae96:	7e 01 e6 00 	mova	r1,	230(r14);0x00e6(r14)
    ae9a:	00 00       	bra	@r0		
    ae9c:	00 00       	bra	@r0		
    ae9e:	00 00       	bra	@r0		
    aea0:	44 00       	rrcm.a	#1,	r4	
    aea2:	82 01 ec 00 	mova	#0x100ec,r2	
    aea6:	00 00       	bra	@r0		
    aea8:	00 00       	bra	@r0		
    aeaa:	00 00       	bra	@r0		
    aeac:	44 00       	rrcm.a	#1,	r4	
    aeae:	8f 01 f2 00 	mova	#0x100f2,r15	
    aeb2:	00 00       	bra	@r0		
    aeb4:	33 55       	.word	0x5533;	????	Illegal as 2-op instr
    aeb6:	00 00       	bra	@r0		
    aeb8:	40 00       	rrcm.a	#1,	r0	
    aeba:	3b 01 0c 00 	mova	12(r1),	r11	;0x000c(r1)
    aebe:	00 00       	bra	@r0		
    aec0:	4f 55       	add.b	r5,	r15	
    aec2:	00 00       	bra	@r0		
    aec4:	40 00       	rrcm.a	#1,	r0	
    aec6:	3c 01 0e 00 	mova	14(r1),	r12	;0x000e(r1)
    aeca:	00 00       	bra	@r0		
    aecc:	43 55       	.word	0x5543;	????	Illegal as 2-op instr
    aece:	00 00       	bra	@r0		
    aed0:	40 00       	rrcm.a	#1,	r0	
    aed2:	3d 01 0f 00 	mova	15(r1),	r13	;0x000f(r1)
    aed6:	00 00       	bra	@r0		
    aed8:	00 00       	bra	@r0		
    aeda:	00 00       	bra	@r0		
    aedc:	c0 00       	bra	r0		
    aede:	00 00       	bra	@r0		
    aee0:	04 00       	mova	@r0,	r4	
    aee2:	00 00       	bra	@r0		
    aee4:	00 00       	bra	@r0		
    aee6:	00 00       	bra	@r0		
    aee8:	e0 00       	adda	r0,	r0	
    aeea:	00 00       	bra	@r0		
    aeec:	f2 00       	suba	r0,	r2	
    aeee:	00 00       	bra	@r0		
    aef0:	00 00       	bra	@r0		
    aef2:	00 00       	bra	@r0		
    aef4:	24 00 00 00 	mova	&0x00000,r4	
    aef8:	f6 00       	suba	r0,	r6	
    aefa:	00 00       	bra	@r0		
    aefc:	00 00       	bra	@r0		
    aefe:	00 00       	bra	@r0		
    af00:	64 00 00 00 	mova	r0,	&0x40000
    af04:	7e 60 00 00 	addc.b	#0,	r14	;#0x0000
    af08:	10 4b 00 00 	br	0(r11)		;0x0000(r11)
    af0c:	64 00 00 00 	mova	r0,	&0x40000
    af10:	7e 60 00 00 	addc.b	#0,	r14	;#0x0000
    af14:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    af18:	64 00 00 00 	mova	r0,	&0x40000
    af1c:	7e 60 00 00 	addc.b	#0,	r14	;#0x0000
    af20:	6a 00 00 00 	mova	r0,	&0xa0000
    af24:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0af26
    af28:	00 00       	bra	@r0		
    af2a:	00 00       	bra	@r0		
    af2c:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    af30:	80 00 00 00 	bra	#0x00000	
    af34:	00 00       	bra	@r0		
    af36:	00 00       	bra	@r0		
    af38:	99 00 00 00 	cmpa	#0x00000,r9	
    af3c:	80 00 00 00 	bra	#0x00000	
    af40:	00 00       	bra	@r0		
    af42:	00 00       	bra	@r0		
    af44:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    af46:	00 00       	bra	@r0		
    af48:	80 00 00 00 	bra	#0x00000	
    af4c:	00 00       	bra	@r0		
    af4e:	00 00       	bra	@r0		
    af50:	ec 00       	adda	r0,	r12	
    af52:	00 00       	bra	@r0		
    af54:	80 00 00 00 	bra	#0x00000	
    af58:	00 00       	bra	@r0		
    af5a:	00 00       	bra	@r0		
    af5c:	24 01 00 00 	mova	&0x10000,r4	
    af60:	80 00 00 00 	bra	#0x00000	
    af64:	00 00       	bra	@r0		
    af66:	00 00       	bra	@r0		
    af68:	66 01 00 00 	mova	r1,	&0x60000
    af6c:	80 00 00 00 	bra	#0x00000	
    af70:	00 00       	bra	@r0		
    af72:	00 00       	bra	@r0		
    af74:	b7 01 00 00 	suba	#0x10000,r7	
    af78:	80 00 00 00 	bra	#0x00000	
    af7c:	00 00       	bra	@r0		
    af7e:	00 00       	bra	@r0		
    af80:	08 02       	mova	#4,	r8	;r2 As==10
    af82:	00 00       	bra	@r0		
    af84:	80 00 00 00 	bra	#0x00000	
    af88:	00 00       	bra	@r0		
    af8a:	00 00       	bra	@r0		
    af8c:	2e 02 00 00 	mova	&0x20000,r14	
    af90:	80 00 00 00 	bra	#0x00000	
    af94:	00 00       	bra	@r0		
    af96:	00 00       	bra	@r0		
    af98:	6c 02 00 00 	mova	r2,	&0xc0000
    af9c:	80 00 00 00 	bra	#0x00000	
    afa0:	00 00       	bra	@r0		
    afa2:	00 00       	bra	@r0		
    afa4:	96 02 00 00 	cmpa	#0x20000,r6	
    afa8:	80 00 00 00 	bra	#0x00000	
    afac:	00 00       	bra	@r0		
    afae:	00 00       	bra	@r0		
    afb0:	bf 02 00 00 	suba	#0x20000,r15	
    afb4:	80 00 00 00 	bra	#0x00000	
    afb8:	00 00       	bra	@r0		
    afba:	00 00       	bra	@r0		
    afbc:	d9 02       	cmpa	r2,	r9	
    afbe:	00 00       	bra	@r0		
    afc0:	80 00 00 00 	bra	#0x00000	
    afc4:	00 00       	bra	@r0		
    afc6:	00 00       	bra	@r0		
    afc8:	f4 02       	suba	r2,	r4	
    afca:	00 00       	bra	@r0		
    afcc:	80 00 00 00 	bra	#0x00000	
    afd0:	00 00       	bra	@r0		
    afd2:	00 00       	bra	@r0		
    afd4:	14 03       	mova	#-1,	r4	;r3 As==11
    afd6:	00 00       	bra	@r0		
    afd8:	80 00 00 00 	bra	#0x00000	
    afdc:	00 00       	bra	@r0		
    afde:	00 00       	bra	@r0		
    afe0:	4d 03       	rrum.a	#1,	r13	
    afe2:	00 00       	bra	@r0		
    afe4:	80 00 00 00 	bra	#0x00000	
    afe8:	00 00       	bra	@r0		
    afea:	00 00       	bra	@r0		
    afec:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    aff0:	80 00 00 00 	bra	#0x00000	
    aff4:	00 00       	bra	@r0		
    aff6:	00 00       	bra	@r0		
    aff8:	8a 03 00 00 	mova	#0x30000,r10	
    affc:	80 00 00 00 	bra	#0x00000	
    b000:	00 00       	bra	@r0		
    b002:	00 00       	bra	@r0		
    b004:	ae 03 00 00 	adda	#0x30000,r14	
    b008:	80 00 00 00 	bra	#0x00000	
    b00c:	00 00       	bra	@r0		
    b00e:	00 00       	bra	@r0		
    b010:	d7 03       	tsta	r7		
    b012:	00 00       	bra	@r0		
    b014:	80 00 00 00 	bra	#0x00000	
    b018:	00 00       	bra	@r0		
    b01a:	00 00       	bra	@r0		
    b01c:	88 4f 00 00 	mov	r15,	0(r8)	;0x0000(r8)
    b020:	82 00 00 00 	mova	#0x00000,r2	
    b024:	cd 0b       	mova	r11,	r13	
    b026:	00 00       	bra	@r0		
    b028:	4b 4b       	mov.b	r11,	r11	
    b02a:	00 00       	bra	@r0		
    b02c:	c2 00       	mova	r0,	r2	
    b02e:	00 00       	bra	@r0		
    b030:	e5 1d       	.word	0x1de5;	????	
    b032:	00 00       	bra	@r0		
    b034:	c5 4b 00 00 	mov.b	r11,	0(r5)	;0x0000(r5)
    b038:	c2 00       	mova	r0,	r2	
    b03a:	00 00       	bra	@r0		
    b03c:	00 00       	bra	@r0		
    b03e:	00 00       	bra	@r0		
    b040:	db 4b 00 00 	mov.b	0(r11),	194(r11);0x0000(r11), 0x00c2(r11)
    b044:	c2 00 
    b046:	00 00       	bra	@r0		
    b048:	00 00       	bra	@r0		
    b04a:	00 00       	bra	@r0		
    b04c:	f4 4b 00 00 	mov.b	@r11+,	0(r4)	;0x0000(r4)
    b050:	c2 00       	mova	r0,	r2	
    b052:	00 00       	bra	@r0		
    b054:	fe 42 00 00 	mov.b	#8,	0(r14)	;r2 As==11, 0x0000(r14)
    b058:	06 4d       	mov	r13,	r6	
    b05a:	00 00       	bra	@r0		
    b05c:	c2 00       	mova	r0,	r2	
    b05e:	00 00       	bra	@r0		
    b060:	00 00       	bra	@r0		
    b062:	00 00       	bra	@r0		
    b064:	16 4d 00 00 	mov	0(r13),	r6	;0x0000(r13)
    b068:	c2 00       	mova	r0,	r2	
    b06a:	00 00       	bra	@r0		
    b06c:	00 00       	bra	@r0		
    b06e:	00 00       	bra	@r0		
    b070:	91 4f 00 00 	mov	0(r15),	194(r1)	;0x0000(r15), 0x00c2(r1)
    b074:	c2 00 
    b076:	00 00       	bra	@r0		
    b078:	f2 b1 00 00 	bit.b	@r1+,	&0x0000	
    b07c:	ae 55 00 00 	add	@r5,	0(r14)	;0x0000(r14)
    b080:	24 00 81 03 	mova	&0x00381,r4	
    b084:	7e 60 00 00 	addc.b	#0,	r14	;#0x0000
    b088:	c5 55 00 00 	add.b	r5,	0(r5)	;0x0000(r5)
    b08c:	40 00       	rrcm.a	#1,	r0	
    b08e:	80 03 0f 00 	bra	#0x3000f	
    b092:	00 00       	bra	@r0		
    b094:	93 52 00 00 	add	&0x0000,#1	;r3 As==01
    b098:	40 00       	rrcm.a	#1,	r0	
    b09a:	80 03 0e 00 	bra	#0x3000e	
    b09e:	00 00       	bra	@r0		
    b0a0:	00 00       	bra	@r0		
    b0a2:	00 00       	bra	@r0		
    b0a4:	44 00       	rrcm.a	#1,	r4	
    b0a6:	81 03 00 00 	mova	#0x30000,r1	
    b0aa:	00 00       	bra	@r0		
    b0ac:	00 00       	bra	@r0		
    b0ae:	00 00       	bra	@r0		
    b0b0:	44 00       	rrcm.a	#1,	r4	
    b0b2:	9a 00 08 00 	cmpa	#0x00008,r10	
    b0b6:	00 00       	bra	@r0		
    b0b8:	00 00       	bra	@r0		
    b0ba:	00 00       	bra	@r0		
    b0bc:	44 00       	rrcm.a	#1,	r4	
    b0be:	99 00 12 00 	cmpa	#0x00012,r9	
    b0c2:	00 00       	bra	@r0		
    b0c4:	00 00       	bra	@r0		
    b0c6:	00 00       	bra	@r0		
    b0c8:	44 00       	rrcm.a	#1,	r4	
    b0ca:	9a 00 16 00 	cmpa	#0x00016,r10	
    b0ce:	00 00       	bra	@r0		
    b0d0:	00 00       	bra	@r0		
    b0d2:	00 00       	bra	@r0		
    b0d4:	44 00       	rrcm.a	#1,	r4	
    b0d6:	99 00 20 00 	cmpa	#0x00020,r9	
    b0da:	00 00       	bra	@r0		
    b0dc:	00 00       	bra	@r0		
    b0de:	00 00       	bra	@r0		
    b0e0:	44 00       	rrcm.a	#1,	r4	
    b0e2:	8c 03 24 00 	mova	#0x30024,r12	
    b0e6:	00 00       	bra	@r0		
    b0e8:	00 00       	bra	@r0		
    b0ea:	00 00       	bra	@r0		
    b0ec:	44 00       	rrcm.a	#1,	r4	
    b0ee:	a1 00 28 00 	adda	#0x00028,r1	
    b0f2:	00 00       	bra	@r0		
    b0f4:	00 00       	bra	@r0		
    b0f6:	00 00       	bra	@r0		
    b0f8:	44 00       	rrcm.a	#1,	r4	
    b0fa:	a0 00 2e 00 	adda	#0x0002e,r0	
    b0fe:	00 00       	bra	@r0		
    b100:	00 00       	bra	@r0		
    b102:	00 00       	bra	@r0		
    b104:	44 00       	rrcm.a	#1,	r4	
    b106:	a1 00 32 00 	adda	#0x00032,r1	
    b10a:	00 00       	bra	@r0		
    b10c:	00 00       	bra	@r0		
    b10e:	00 00       	bra	@r0		
    b110:	44 00       	rrcm.a	#1,	r4	
    b112:	a0 00 38 00 	adda	#0x00038,r0	
    b116:	00 00       	bra	@r0		
    b118:	00 00       	bra	@r0		
    b11a:	00 00       	bra	@r0		
    b11c:	44 00       	rrcm.a	#1,	r4	
    b11e:	99 03 3c 00 	cmpa	#0x3003c,r9	
    b122:	00 00       	bra	@r0		
    b124:	00 00       	bra	@r0		
    b126:	00 00       	bra	@r0		
    b128:	44 00       	rrcm.a	#1,	r4	
    b12a:	a1 00 48 00 	adda	#0x00048,r1	
    b12e:	00 00       	bra	@r0		
    b130:	00 00       	bra	@r0		
    b132:	00 00       	bra	@r0		
    b134:	44 00       	rrcm.a	#1,	r4	
    b136:	a0 00 4e 00 	adda	#0x0004e,r0	
    b13a:	00 00       	bra	@r0		
    b13c:	00 00       	bra	@r0		
    b13e:	00 00       	bra	@r0		
    b140:	44 00       	rrcm.a	#1,	r4	
    b142:	a1 00 52 00 	adda	#0x00052,r1	
    b146:	00 00       	bra	@r0		
    b148:	00 00       	bra	@r0		
    b14a:	00 00       	bra	@r0		
    b14c:	44 00       	rrcm.a	#1,	r4	
    b14e:	a0 00 58 00 	adda	#0x00058,r0	
    b152:	00 00       	bra	@r0		
    b154:	00 00       	bra	@r0		
    b156:	00 00       	bra	@r0		
    b158:	44 00       	rrcm.a	#1,	r4	
    b15a:	aa 00 5c 00 	adda	#0x0005c,r10	
    b15e:	00 00       	bra	@r0		
    b160:	00 00       	bra	@r0		
    b162:	00 00       	bra	@r0		
    b164:	44 00       	rrcm.a	#1,	r4	
    b166:	a9 00 62 00 	adda	#0x00062,r9	
    b16a:	00 00       	bra	@r0		
    b16c:	00 00       	bra	@r0		
    b16e:	00 00       	bra	@r0		
    b170:	44 00       	rrcm.a	#1,	r4	
    b172:	aa 00 66 00 	adda	#0x00066,r10	
    b176:	00 00       	bra	@r0		
    b178:	00 00       	bra	@r0		
    b17a:	00 00       	bra	@r0		
    b17c:	44 00       	rrcm.a	#1,	r4	
    b17e:	a9 00 6c 00 	adda	#0x0006c,r9	
    b182:	00 00       	bra	@r0		
    b184:	00 00       	bra	@r0		
    b186:	00 00       	bra	@r0		
    b188:	44 00       	rrcm.a	#1,	r4	
    b18a:	a6 03 70 00 	adda	#0x30070,r6	
    b18e:	00 00       	bra	@r0		
    b190:	00 00       	bra	@r0		
    b192:	00 00       	bra	@r0		
    b194:	44 00       	rrcm.a	#1,	r4	
    b196:	aa 00 74 00 	adda	#0x00074,r10	
    b19a:	00 00       	bra	@r0		
    b19c:	00 00       	bra	@r0		
    b19e:	00 00       	bra	@r0		
    b1a0:	44 00       	rrcm.a	#1,	r4	
    b1a2:	a9 00 7a 00 	adda	#0x0007a,r9	
    b1a6:	00 00       	bra	@r0		
    b1a8:	00 00       	bra	@r0		
    b1aa:	00 00       	bra	@r0		
    b1ac:	44 00       	rrcm.a	#1,	r4	
    b1ae:	aa 03 7e 00 	adda	#0x3007e,r10	
    b1b2:	00 00       	bra	@r0		
    b1b4:	00 00       	bra	@r0		
    b1b6:	00 00       	bra	@r0		
    b1b8:	44 00       	rrcm.a	#1,	r4	
    b1ba:	aa 00 8e 00 	adda	#0x0008e,r10	
    b1be:	00 00       	bra	@r0		
    b1c0:	00 00       	bra	@r0		
    b1c2:	00 00       	bra	@r0		
    b1c4:	44 00       	rrcm.a	#1,	r4	
    b1c6:	a9 00 94 00 	adda	#0x00094,r9	
    b1ca:	00 00       	bra	@r0		
    b1cc:	00 00       	bra	@r0		
    b1ce:	00 00       	bra	@r0		
    b1d0:	44 00       	rrcm.a	#1,	r4	
    b1d2:	ae 03 98 00 	adda	#0x30098,r14	
    b1d6:	00 00       	bra	@r0		
    b1d8:	00 00       	bra	@r0		
    b1da:	00 00       	bra	@r0		
    b1dc:	44 00       	rrcm.a	#1,	r4	
    b1de:	b1 03 a0 00 	suba	#0x300a0,r1	
    b1e2:	00 00       	bra	@r0		
    b1e4:	00 00       	bra	@r0		
    b1e6:	00 00       	bra	@r0		
    b1e8:	44 00       	rrcm.a	#1,	r4	
    b1ea:	c2 03       	mova	#0,	r2	;r3 As==00
    b1ec:	aa 00 00 00 	adda	#0x00000,r10	
    b1f0:	00 00       	bra	@r0		
    b1f2:	00 00       	bra	@r0		
    b1f4:	44 00       	rrcm.a	#1,	r4	
    b1f6:	b7 03 b0 00 	suba	#0x300b0,r7	
    b1fa:	00 00       	bra	@r0		
    b1fc:	00 00       	bra	@r0		
    b1fe:	00 00       	bra	@r0		
    b200:	44 00       	rrcm.a	#1,	r4	
    b202:	bb 03 bc 00 	suba	#0x300bc,r11	
    b206:	00 00       	bra	@r0		
    b208:	00 00       	bra	@r0		
    b20a:	00 00       	bra	@r0		
    b20c:	44 00       	rrcm.a	#1,	r4	
    b20e:	c0 03       	bra	#0		;r3 As==00
    b210:	c0 00       	bra	r0		
    b212:	00 00       	bra	@r0		
    b214:	00 00       	bra	@r0		
    b216:	00 00       	bra	@r0		
    b218:	44 00       	rrcm.a	#1,	r4	
    b21a:	c4 03       	mova	#0,	r4	;r3 As==00
    b21c:	da 00       	cmpa	r0,	r10	
    b21e:	00 00       	bra	@r0		
    b220:	00 00       	bra	@r0		
    b222:	00 00       	bra	@r0		
    b224:	44 00       	rrcm.a	#1,	r4	
    b226:	c9 03       	mova	#0,	r9	;r3 As==00
    b228:	de 00       	cmpa	r0,	r14	
    b22a:	00 00       	bra	@r0		
    b22c:	00 00       	bra	@r0		
    b22e:	00 00       	bra	@r0		
    b230:	44 00       	rrcm.a	#1,	r4	
    b232:	c6 03       	mova	#0,	r6	;r3 As==00
    b234:	e6 00       	adda	r0,	r6	
    b236:	00 00       	bra	@r0		
    b238:	00 00       	bra	@r0		
    b23a:	00 00       	bra	@r0		
    b23c:	44 00       	rrcm.a	#1,	r4	
    b23e:	ca 03       	mova	#0,	r10	;r3 As==00
    b240:	0c 01       	mova	@r1,	r12	
    b242:	00 00       	bra	@r0		
    b244:	00 00       	bra	@r0		
    b246:	00 00       	bra	@r0		
    b248:	24 00 00 00 	mova	&0x00000,r4	
    b24c:	18 01       	mova	@r1+,	r8	
    b24e:	00 00       	bra	@r0		
    b250:	00 00       	bra	@r0		
    b252:	00 00       	bra	@r0		
    b254:	64 00 00 00 	mova	r0,	&0x40000
    b258:	96 61 00 00 	addc	0(r1),	21974(r6);0x0000(r1), 0x55d6(r6)
    b25c:	d6 55 
    b25e:	00 00       	bra	@r0		
    b260:	64 00 00 00 	mova	r0,	&0x40000
    b264:	96 61 00 00 	addc	0(r1),	22025(r6);0x0000(r1), 0x5609(r6)
    b268:	09 56 
    b26a:	00 00       	bra	@r0		
    b26c:	64 00 00 00 	mova	r0,	&0x40000
    b270:	96 61 00 00 	addc	0(r1),	106(r6)	;0x0000(r1), 0x006a(r6)
    b274:	6a 00 
    b276:	00 00       	bra	@r0		
    b278:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0b27a
    b27c:	00 00       	bra	@r0		
    b27e:	00 00       	bra	@r0		
    b280:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    b284:	80 00 00 00 	bra	#0x00000	
    b288:	00 00       	bra	@r0		
    b28a:	00 00       	bra	@r0		
    b28c:	99 00 00 00 	cmpa	#0x00000,r9	
    b290:	80 00 00 00 	bra	#0x00000	
    b294:	00 00       	bra	@r0		
    b296:	00 00       	bra	@r0		
    b298:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    b29a:	00 00       	bra	@r0		
    b29c:	80 00 00 00 	bra	#0x00000	
    b2a0:	00 00       	bra	@r0		
    b2a2:	00 00       	bra	@r0		
    b2a4:	ec 00       	adda	r0,	r12	
    b2a6:	00 00       	bra	@r0		
    b2a8:	80 00 00 00 	bra	#0x00000	
    b2ac:	00 00       	bra	@r0		
    b2ae:	00 00       	bra	@r0		
    b2b0:	24 01 00 00 	mova	&0x10000,r4	
    b2b4:	80 00 00 00 	bra	#0x00000	
    b2b8:	00 00       	bra	@r0		
    b2ba:	00 00       	bra	@r0		
    b2bc:	66 01 00 00 	mova	r1,	&0x60000
    b2c0:	80 00 00 00 	bra	#0x00000	
    b2c4:	00 00       	bra	@r0		
    b2c6:	00 00       	bra	@r0		
    b2c8:	b7 01 00 00 	suba	#0x10000,r7	
    b2cc:	80 00 00 00 	bra	#0x00000	
    b2d0:	00 00       	bra	@r0		
    b2d2:	00 00       	bra	@r0		
    b2d4:	08 02       	mova	#4,	r8	;r2 As==10
    b2d6:	00 00       	bra	@r0		
    b2d8:	80 00 00 00 	bra	#0x00000	
    b2dc:	00 00       	bra	@r0		
    b2de:	00 00       	bra	@r0		
    b2e0:	2e 02 00 00 	mova	&0x20000,r14	
    b2e4:	80 00 00 00 	bra	#0x00000	
    b2e8:	00 00       	bra	@r0		
    b2ea:	00 00       	bra	@r0		
    b2ec:	6c 02 00 00 	mova	r2,	&0xc0000
    b2f0:	80 00 00 00 	bra	#0x00000	
    b2f4:	00 00       	bra	@r0		
    b2f6:	00 00       	bra	@r0		
    b2f8:	96 02 00 00 	cmpa	#0x20000,r6	
    b2fc:	80 00 00 00 	bra	#0x00000	
    b300:	00 00       	bra	@r0		
    b302:	00 00       	bra	@r0		
    b304:	bf 02 00 00 	suba	#0x20000,r15	
    b308:	80 00 00 00 	bra	#0x00000	
    b30c:	00 00       	bra	@r0		
    b30e:	00 00       	bra	@r0		
    b310:	d9 02       	cmpa	r2,	r9	
    b312:	00 00       	bra	@r0		
    b314:	80 00 00 00 	bra	#0x00000	
    b318:	00 00       	bra	@r0		
    b31a:	00 00       	bra	@r0		
    b31c:	f4 02       	suba	r2,	r4	
    b31e:	00 00       	bra	@r0		
    b320:	80 00 00 00 	bra	#0x00000	
    b324:	00 00       	bra	@r0		
    b326:	00 00       	bra	@r0		
    b328:	14 03       	mova	#-1,	r4	;r3 As==11
    b32a:	00 00       	bra	@r0		
    b32c:	80 00 00 00 	bra	#0x00000	
    b330:	00 00       	bra	@r0		
    b332:	00 00       	bra	@r0		
    b334:	4d 03       	rrum.a	#1,	r13	
    b336:	00 00       	bra	@r0		
    b338:	80 00 00 00 	bra	#0x00000	
    b33c:	00 00       	bra	@r0		
    b33e:	00 00       	bra	@r0		
    b340:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    b344:	80 00 00 00 	bra	#0x00000	
    b348:	00 00       	bra	@r0		
    b34a:	00 00       	bra	@r0		
    b34c:	8a 03 00 00 	mova	#0x30000,r10	
    b350:	80 00 00 00 	bra	#0x00000	
    b354:	00 00       	bra	@r0		
    b356:	00 00       	bra	@r0		
    b358:	ae 03 00 00 	adda	#0x30000,r14	
    b35c:	80 00 00 00 	bra	#0x00000	
    b360:	00 00       	bra	@r0		
    b362:	00 00       	bra	@r0		
    b364:	d7 03       	tsta	r7		
    b366:	00 00       	bra	@r0		
    b368:	80 00 00 00 	bra	#0x00000	
    b36c:	00 00       	bra	@r0		
    b36e:	00 00       	bra	@r0		
    b370:	09 56       	add	r6,	r9	
    b372:	00 00       	bra	@r0		
    b374:	82 00 00 00 	mova	#0x00000,r2	
    b378:	aa 0e 00 00 	adda	#0xe0000,r10	
    b37c:	19 56 00 00 	add	0(r6),	r9	;0x0000(r6)
    b380:	82 00 00 00 	mova	#0x00000,r2	
    b384:	00 00       	bra	@r0		
    b386:	00 00       	bra	@r0		
    b388:	2c 56       	add	@r6,	r12	
    b38a:	00 00       	bra	@r0		
    b38c:	82 00 00 00 	mova	#0x00000,r2	
    b390:	13 10       	rrc	#1		;r3 As==01
    b392:	00 00       	bra	@r0		
    b394:	43 04       	rrcm.a	#2,	#0	;r3 As==00
    b396:	00 00       	bra	@r0		
    b398:	80 00 97 00 	bra	#0x00097	
    b39c:	00 00       	bra	@r0		
    b39e:	00 00       	bra	@r0		
    b3a0:	5a 04       	rrcm	#2,	r10	
    b3a2:	00 00       	bra	@r0		
    b3a4:	80 00 d5 00 	bra	#0x000d5	
    b3a8:	00 00       	bra	@r0		
    b3aa:	00 00       	bra	@r0		
    b3ac:	6e 04 00 00 	mova	r4,	&0xe0000
    b3b0:	80 00 45 01 	bra	#0x00145	
	...
    b3bc:	a2 00 00 00 	adda	#0x00000,r2	
    b3c0:	00 00       	bra	@r0		
    b3c2:	00 00       	bra	@r0		
    b3c4:	82 56 00 00 	add	r6,	&0x0000	
    b3c8:	82 00 00 00 	mova	#0x00000,r2	
    b3cc:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
    b3d0:	99 56 00 00 	add	0(r6),	130(r9)	;0x0000(r6), 0x0082(r9)
    b3d4:	82 00 
	...
    b3de:	00 00       	bra	@r0		
    b3e0:	a2 00 00 00 	adda	#0x00000,r2	
    b3e4:	00 00       	bra	@r0		
    b3e6:	00 00       	bra	@r0		
    b3e8:	b0 56 00 00 	add	@r6+,	0x0000	;PC rel. 0x0b3ec
    b3ec:	82 00 00 00 	mova	#0x00000,r2	
    b3f0:	91 34       	jge	$+292    	;abs 0xb514
    b3f2:	00 00       	bra	@r0		
    b3f4:	f5 04       	suba	r4,	r5	
    b3f6:	00 00       	bra	@r0		
    b3f8:	80 00 26 00 	bra	#0x00026	
    b3fc:	00 00       	bra	@r0		
    b3fe:	00 00       	bra	@r0		
    b400:	0a 05       	mova	@r5,	r10	
    b402:	00 00       	bra	@r0		
    b404:	80 00 27 00 	bra	#0x00027	
    b408:	00 00       	bra	@r0		
    b40a:	00 00       	bra	@r0		
    b40c:	20 05 00 00 	bra	&0x50000	
    b410:	80 00 29 00 	bra	#0x00029	
    b414:	00 00       	bra	@r0		
    b416:	00 00       	bra	@r0		
    b418:	35 05 00 00 	mova	0(r5),	r5	;0x0000(r5)
    b41c:	80 00 2a 00 	bra	#0x0002a	
    b420:	00 00       	bra	@r0		
    b422:	00 00       	bra	@r0		
    b424:	4b 05       	rram.a	#2,	r11	
    b426:	00 00       	bra	@r0		
    b428:	80 00 2c 00 	bra	#0x0002c	
    b42c:	00 00       	bra	@r0		
    b42e:	00 00       	bra	@r0		
    b430:	60 05 00 00 	mova	r5,	&0x00000
    b434:	80 00 2d 00 	bra	#0x0002d	
    b438:	00 00       	bra	@r0		
    b43a:	00 00       	bra	@r0		
    b43c:	76 05 00 00 	mova	r5,	0(r6)	;0x0000(r6)
    b440:	80 00 2f 00 	bra	#0x0002f	
    b444:	00 00       	bra	@r0		
    b446:	00 00       	bra	@r0		
    b448:	8b 05 00 00 	mova	#0x50000,r11	
    b44c:	80 00 30 00 	bra	#0x00030	
    b450:	00 00       	bra	@r0		
    b452:	00 00       	bra	@r0		
    b454:	a1 05 00 00 	adda	#0x50000,r1	
    b458:	80 00 35 00 	bra	#0x00035	
    b45c:	00 00       	bra	@r0		
    b45e:	00 00       	bra	@r0		
    b460:	b7 05 00 00 	suba	#0x50000,r7	
    b464:	80 00 36 00 	bra	#0x00036	
	...
    b470:	a2 00 00 00 	adda	#0x00000,r2	
    b474:	00 00       	bra	@r0		
    b476:	00 00       	bra	@r0		
    b478:	cf 05       	mova	r5,	r15	
    b47a:	00 00       	bra	@r0		
    b47c:	80 00 29 00 	bra	#0x00029	
    b480:	00 00       	bra	@r0		
    b482:	00 00       	bra	@r0		
    b484:	e4 05       	adda	r5,	r4	
    b486:	00 00       	bra	@r0		
    b488:	80 00 2a 00 	bra	#0x0002a	
    b48c:	00 00       	bra	@r0		
    b48e:	00 00       	bra	@r0		
    b490:	f9 05       	suba	r5,	r9	
    b492:	00 00       	bra	@r0		
    b494:	80 00 2b 00 	bra	#0x0002b	
    b498:	00 00       	bra	@r0		
    b49a:	00 00       	bra	@r0		
    b49c:	0c 06       	mova	@r6,	r12	
    b49e:	00 00       	bra	@r0		
    b4a0:	80 00 2c 00 	bra	#0x0002c	
    b4a4:	00 00       	bra	@r0		
    b4a6:	00 00       	bra	@r0		
    b4a8:	20 06 00 00 	bra	&0x60000	
    b4ac:	80 00 2d 00 	bra	#0x0002d	
    b4b0:	00 00       	bra	@r0		
    b4b2:	00 00       	bra	@r0		
    b4b4:	34 06 00 00 	mova	0(r6),	r4	;0x0000(r6)
    b4b8:	80 00 2e 00 	bra	#0x0002e	
    b4bc:	00 00       	bra	@r0		
    b4be:	00 00       	bra	@r0		
    b4c0:	46 06       	rlam.a	#2,	r6	
    b4c2:	00 00       	bra	@r0		
    b4c4:	80 00 30 00 	bra	#0x00030	
    b4c8:	00 00       	bra	@r0		
    b4ca:	00 00       	bra	@r0		
    b4cc:	5c 06       	rlam	#2,	r12	
    b4ce:	00 00       	bra	@r0		
    b4d0:	80 00 31 00 	bra	#0x00031	
    b4d4:	00 00       	bra	@r0		
    b4d6:	00 00       	bra	@r0		
    b4d8:	73 06       	.word	0x0673;	????	Illegal as address instr
    b4da:	00 00       	bra	@r0		
    b4dc:	80 00 32 00 	bra	#0x00032	
    b4e0:	00 00       	bra	@r0		
    b4e2:	00 00       	bra	@r0		
    b4e4:	8a 06 00 00 	mova	#0x60000,r10	
    b4e8:	80 00 33 00 	bra	#0x00033	
    b4ec:	00 00       	bra	@r0		
    b4ee:	00 00       	bra	@r0		
    b4f0:	a2 06 00 00 	adda	#0x60000,r2	
    b4f4:	80 00 35 00 	bra	#0x00035	
    b4f8:	00 00       	bra	@r0		
    b4fa:	00 00       	bra	@r0		
    b4fc:	ba 06 00 00 	suba	#0x60000,r10	
    b500:	80 00 36 00 	bra	#0x00036	
    b504:	00 00       	bra	@r0		
    b506:	00 00       	bra	@r0		
    b508:	cf 06       	mova	r6,	r15	
    b50a:	00 00       	bra	@r0		
    b50c:	80 00 37 00 	bra	#0x00037	
    b510:	00 00       	bra	@r0		
    b512:	00 00       	bra	@r0		
    b514:	ee 06       	adda	r6,	r14	
    b516:	00 00       	bra	@r0		
    b518:	80 00 39 00 	bra	#0x00039	
    b51c:	00 00       	bra	@r0		
    b51e:	00 00       	bra	@r0		
    b520:	0c 07       	mova	@r7,	r12	
    b522:	00 00       	bra	@r0		
    b524:	80 00 3a 00 	bra	#0x0003a	
    b528:	00 00       	bra	@r0		
    b52a:	00 00       	bra	@r0		
    b52c:	34 07 00 00 	mova	0(r7),	r4	;0x0000(r7)
    b530:	80 00 3b 00 	bra	#0x0003b	
    b534:	00 00       	bra	@r0		
    b536:	00 00       	bra	@r0		
    b538:	5c 07       	rrum	#2,	r12	
    b53a:	00 00       	bra	@r0		
    b53c:	80 00 3c 00 	bra	#0x0003c	
    b540:	00 00       	bra	@r0		
    b542:	00 00       	bra	@r0		
    b544:	72 07 00 00 	mova	r7,	&0x0000	
    b548:	80 00 3d 00 	bra	#0x0003d	
    b54c:	00 00       	bra	@r0		
    b54e:	00 00       	bra	@r0		
    b550:	86 07 00 00 	mova	#0x70000,r6	
    b554:	80 00 3e 00 	bra	#0x0003e	
    b558:	00 00       	bra	@r0		
    b55a:	00 00       	bra	@r0		
    b55c:	9e 07 00 00 	cmpa	#0x70000,r14	
    b560:	80 00 3f 00 	bra	#0x0003f	
    b564:	00 00       	bra	@r0		
    b566:	00 00       	bra	@r0		
    b568:	b6 07 00 00 	suba	#0x70000,r6	
    b56c:	80 00 40 00 	bra	#0x00040	
    b570:	00 00       	bra	@r0		
    b572:	00 00       	bra	@r0		
    b574:	ca 07       	mova	r7,	r10	
    b576:	00 00       	bra	@r0		
    b578:	80 00 41 00 	bra	#0x00041	
    b57c:	00 00       	bra	@r0		
    b57e:	00 00       	bra	@r0		
    b580:	de 07       	cmpa	r7,	r14	
    b582:	00 00       	bra	@r0		
    b584:	80 00 42 00 	bra	#0x00042	
    b588:	00 00       	bra	@r0		
    b58a:	00 00       	bra	@r0		
    b58c:	f3 07       	.word	0x07f3;	????	Illegal as address instr
    b58e:	00 00       	bra	@r0		
    b590:	80 00 43 00 	bra	#0x00043	
    b594:	00 00       	bra	@r0		
    b596:	00 00       	bra	@r0		
    b598:	09 08       	mova	@r8,	r9	
    b59a:	00 00       	bra	@r0		
    b59c:	80 00 44 00 	bra	#0x00044	
    b5a0:	00 00       	bra	@r0		
    b5a2:	00 00       	bra	@r0		
    b5a4:	1f 08       	mova	@r8+,	r15	
    b5a6:	00 00       	bra	@r0		
    b5a8:	80 00 45 00 	bra	#0x00045	
    b5ac:	00 00       	bra	@r0		
    b5ae:	00 00       	bra	@r0		
    b5b0:	35 08 00 00 	mova	0(r8),	r5	;0x0000(r8)
    b5b4:	80 00 46 00 	bra	#0x00046	
    b5b8:	00 00       	bra	@r0		
    b5ba:	00 00       	bra	@r0		
    b5bc:	4b 08       	rrcm.a	#3,	r11	
    b5be:	00 00       	bra	@r0		
    b5c0:	80 00 47 00 	bra	#0x00047	
    b5c4:	00 00       	bra	@r0		
    b5c6:	00 00       	bra	@r0		
    b5c8:	65 08 00 00 	mova	r8,	&0x50000
    b5cc:	80 00 48 00 	bra	#0x00048	
    b5d0:	00 00       	bra	@r0		
    b5d2:	00 00       	bra	@r0		
    b5d4:	7e 08 00 00 	mova	r8,	0(r14)	;0x0000(r14)
    b5d8:	80 00 49 00 	bra	#0x00049	
	...
    b5e4:	a2 00 00 00 	adda	#0x00000,r2	
    b5e8:	00 00       	bra	@r0		
    b5ea:	00 00       	bra	@r0		
    b5ec:	ca 56 00 00 	add.b	r6,	0(r10)	;0x0000(r10)
    b5f0:	82 00 00 00 	mova	#0x00000,r2	
    b5f4:	76 0d 00 00 	mova	r13,	0(r6)	;0x0000(r6)
    b5f8:	c6 08       	mova	r8,	r6	
    b5fa:	00 00       	bra	@r0		
    b5fc:	80 00 2b 00 	bra	#0x0002b	
    b600:	00 00       	bra	@r0		
    b602:	00 00       	bra	@r0		
    b604:	e3 08       	.word	0x08e3;	????	Illegal as address instr
    b606:	00 00       	bra	@r0		
    b608:	80 00 6e 00 	bra	#0x0006e	
	...
    b614:	a2 00 00 00 	adda	#0x00000,r2	
	...
    b620:	a2 00 00 00 	adda	#0x00000,r2	
    b624:	00 00       	bra	@r0		
    b626:	00 00       	bra	@r0		
    b628:	20 57       	add	@r7,	r0	
    b62a:	00 00       	bra	@r0		
    b62c:	24 00 23 00 	mova	&0x00023,r4	
    b630:	96 61 00 00 	addc	0(r1),	22318(r6);0x0000(r1), 0x572e(r6)
    b634:	2e 57 
    b636:	00 00       	bra	@r0		
    b638:	a0 00 22 00 	adda	#0x00022,r0	
	...
    b644:	44 00       	rrcm.a	#1,	r4	
    b646:	23 00       	.word	0x0023;	????	Illegal as address instr
	...
    b650:	44 00       	rrcm.a	#1,	r4	
    b652:	27 00 06 00 	mova	&0x00006,r7	
    b656:	00 00       	bra	@r0		
    b658:	00 00       	bra	@r0		
    b65a:	00 00       	bra	@r0		
    b65c:	44 00       	rrcm.a	#1,	r4	
    b65e:	29 00 10 00 	mova	&0x00010,r9	
    b662:	00 00       	bra	@r0		
    b664:	00 00       	bra	@r0		
    b666:	00 00       	bra	@r0		
    b668:	44 00       	rrcm.a	#1,	r4	
    b66a:	2a 00 10 00 	mova	&0x00010,r10	
    b66e:	00 00       	bra	@r0		
    b670:	3d 57       	add	@r7+,	r13	
    b672:	00 00       	bra	@r0		
    b674:	40 00       	rrcm.a	#1,	r0	
    b676:	22 00 0e 00 	mova	&0x0000e,r2	
    b67a:	00 00       	bra	@r0		
    b67c:	4c 57       	add.b	r7,	r12	
    b67e:	00 00       	bra	@r0		
    b680:	40 00       	rrcm.a	#1,	r0	
    b682:	24 00 0f 00 	mova	&0x0000f,r4	
    b686:	00 00       	bra	@r0		
    b688:	00 00       	bra	@r0		
    b68a:	00 00       	bra	@r0		
    b68c:	c0 00       	bra	r0		
    b68e:	00 00       	bra	@r0		
    b690:	06 00       	mova	@r0,	r6	
    b692:	00 00       	bra	@r0		
    b694:	00 00       	bra	@r0		
    b696:	00 00       	bra	@r0		
    b698:	e0 00       	adda	r0,	r0	
    b69a:	00 00       	bra	@r0		
    b69c:	10 00       	bra	#0x00000	
    b69e:	00 00       	bra	@r0		
    b6a0:	00 00       	bra	@r0		
    b6a2:	00 00       	bra	@r0		
    b6a4:	24 00 00 00 	mova	&0x00000,r4	
    b6a8:	12 00       	mova	#0x00000,r2	
    b6aa:	00 00       	bra	@r0		
    b6ac:	00 00       	bra	@r0		
    b6ae:	00 00       	bra	@r0		
    b6b0:	64 00 00 00 	mova	r0,	&0x40000
    b6b4:	a8 61 00 00 	addc	@r1,	0(r8)	;0x0000(r8)
    b6b8:	d6 55 00 00 	add.b	0(r5),	100(r6)	;0x0000(r5), 0x0064(r6)
    b6bc:	64 00 
    b6be:	00 00       	bra	@r0		
    b6c0:	a8 61 00 00 	addc	@r1,	0(r8)	;0x0000(r8)
    b6c4:	57 57 00 00 	add.b	0(r7),	r7	;0x0000(r7)
    b6c8:	64 00 00 00 	mova	r0,	&0x40000
    b6cc:	a8 61 00 00 	addc	@r1,	0(r8)	;0x0000(r8)
    b6d0:	6a 00 00 00 	mova	r0,	&0xa0000
    b6d4:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0b6d6
    b6d8:	00 00       	bra	@r0		
    b6da:	00 00       	bra	@r0		
    b6dc:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    b6e0:	80 00 00 00 	bra	#0x00000	
    b6e4:	00 00       	bra	@r0		
    b6e6:	00 00       	bra	@r0		
    b6e8:	99 00 00 00 	cmpa	#0x00000,r9	
    b6ec:	80 00 00 00 	bra	#0x00000	
    b6f0:	00 00       	bra	@r0		
    b6f2:	00 00       	bra	@r0		
    b6f4:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    b6f6:	00 00       	bra	@r0		
    b6f8:	80 00 00 00 	bra	#0x00000	
    b6fc:	00 00       	bra	@r0		
    b6fe:	00 00       	bra	@r0		
    b700:	ec 00       	adda	r0,	r12	
    b702:	00 00       	bra	@r0		
    b704:	80 00 00 00 	bra	#0x00000	
    b708:	00 00       	bra	@r0		
    b70a:	00 00       	bra	@r0		
    b70c:	24 01 00 00 	mova	&0x10000,r4	
    b710:	80 00 00 00 	bra	#0x00000	
    b714:	00 00       	bra	@r0		
    b716:	00 00       	bra	@r0		
    b718:	66 01 00 00 	mova	r1,	&0x60000
    b71c:	80 00 00 00 	bra	#0x00000	
    b720:	00 00       	bra	@r0		
    b722:	00 00       	bra	@r0		
    b724:	b7 01 00 00 	suba	#0x10000,r7	
    b728:	80 00 00 00 	bra	#0x00000	
    b72c:	00 00       	bra	@r0		
    b72e:	00 00       	bra	@r0		
    b730:	08 02       	mova	#4,	r8	;r2 As==10
    b732:	00 00       	bra	@r0		
    b734:	80 00 00 00 	bra	#0x00000	
    b738:	00 00       	bra	@r0		
    b73a:	00 00       	bra	@r0		
    b73c:	2e 02 00 00 	mova	&0x20000,r14	
    b740:	80 00 00 00 	bra	#0x00000	
    b744:	00 00       	bra	@r0		
    b746:	00 00       	bra	@r0		
    b748:	6c 02 00 00 	mova	r2,	&0xc0000
    b74c:	80 00 00 00 	bra	#0x00000	
    b750:	00 00       	bra	@r0		
    b752:	00 00       	bra	@r0		
    b754:	96 02 00 00 	cmpa	#0x20000,r6	
    b758:	80 00 00 00 	bra	#0x00000	
    b75c:	00 00       	bra	@r0		
    b75e:	00 00       	bra	@r0		
    b760:	bf 02 00 00 	suba	#0x20000,r15	
    b764:	80 00 00 00 	bra	#0x00000	
    b768:	00 00       	bra	@r0		
    b76a:	00 00       	bra	@r0		
    b76c:	d9 02       	cmpa	r2,	r9	
    b76e:	00 00       	bra	@r0		
    b770:	80 00 00 00 	bra	#0x00000	
    b774:	00 00       	bra	@r0		
    b776:	00 00       	bra	@r0		
    b778:	f4 02       	suba	r2,	r4	
    b77a:	00 00       	bra	@r0		
    b77c:	80 00 00 00 	bra	#0x00000	
    b780:	00 00       	bra	@r0		
    b782:	00 00       	bra	@r0		
    b784:	14 03       	mova	#-1,	r4	;r3 As==11
    b786:	00 00       	bra	@r0		
    b788:	80 00 00 00 	bra	#0x00000	
    b78c:	00 00       	bra	@r0		
    b78e:	00 00       	bra	@r0		
    b790:	4d 03       	rrum.a	#1,	r13	
    b792:	00 00       	bra	@r0		
    b794:	80 00 00 00 	bra	#0x00000	
    b798:	00 00       	bra	@r0		
    b79a:	00 00       	bra	@r0		
    b79c:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    b7a0:	80 00 00 00 	bra	#0x00000	
    b7a4:	00 00       	bra	@r0		
    b7a6:	00 00       	bra	@r0		
    b7a8:	8a 03 00 00 	mova	#0x30000,r10	
    b7ac:	80 00 00 00 	bra	#0x00000	
    b7b0:	00 00       	bra	@r0		
    b7b2:	00 00       	bra	@r0		
    b7b4:	ae 03 00 00 	adda	#0x30000,r14	
    b7b8:	80 00 00 00 	bra	#0x00000	
    b7bc:	00 00       	bra	@r0		
    b7be:	00 00       	bra	@r0		
    b7c0:	d7 03       	tsta	r7		
    b7c2:	00 00       	bra	@r0		
    b7c4:	80 00 00 00 	bra	#0x00000	
    b7c8:	00 00       	bra	@r0		
    b7ca:	00 00       	bra	@r0		
    b7cc:	57 57 00 00 	add.b	0(r7),	r7	;0x0000(r7)
    b7d0:	82 00 00 00 	mova	#0x00000,r2	
    b7d4:	ef 7f 00 00 	subc.b	@r15,	0(r15)	;0x0000(r15)
    b7d8:	69 57       	add.b	@r7,	r9	
    b7da:	00 00       	bra	@r0		
    b7dc:	82 00 00 00 	mova	#0x00000,r2	
    b7e0:	00 00       	bra	@r0		
    b7e2:	00 00       	bra	@r0		
    b7e4:	2c 56       	add	@r6,	r12	
    b7e6:	00 00       	bra	@r0		
    b7e8:	c2 00       	mova	r0,	r2	
    b7ea:	00 00       	bra	@r0		
    b7ec:	13 10       	rrc	#1		;r3 As==01
    b7ee:	00 00       	bra	@r0		
    b7f0:	82 56 00 00 	add	r6,	&0x0000	
    b7f4:	c2 00       	mova	r0,	r2	
    b7f6:	00 00       	bra	@r0		
    b7f8:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
    b7fc:	99 56 00 00 	add	0(r6),	194(r9)	;0x0000(r6), 0x00c2(r9)
    b800:	c2 00 
    b802:	00 00       	bra	@r0		
    b804:	00 00       	bra	@r0		
    b806:	00 00       	bra	@r0		
    b808:	b0 56 00 00 	add	@r6+,	0x0000	;PC rel. 0x0b80c
    b80c:	c2 00       	mova	r0,	r2	
    b80e:	00 00       	bra	@r0		
    b810:	91 34       	jge	$+292    	;abs 0xb934
    b812:	00 00       	bra	@r0		
    b814:	00 00       	bra	@r0		
    b816:	00 00       	bra	@r0		
    b818:	a2 00 00 00 	adda	#0x00000,r2	
    b81c:	00 00       	bra	@r0		
    b81e:	00 00       	bra	@r0		
    b820:	ca 56 00 00 	add.b	r6,	0(r10)	;0x0000(r10)
    b824:	c2 00       	mova	r0,	r2	
    b826:	00 00       	bra	@r0		
    b828:	76 0d 00 00 	mova	r13,	0(r6)	;0x0000(r6)
    b82c:	7d 57       	add.b	@r7+,	r13	
    b82e:	00 00       	bra	@r0		
    b830:	24 00 6b 00 	mova	&0x0006b,r4	
    b834:	a8 61 00 00 	addc	@r1,	0(r8)	;0x0000(r8)
    b838:	8a 57 00 00 	add	r7,	0(r10)	;0x0000(r10)
    b83c:	40 00       	rrcm.a	#1,	r0	
    b83e:	6a 00 0a 00 	mova	r0,	&0xa000a
    b842:	00 00       	bra	@r0		
    b844:	96 57 00 00 	add	0(r7),	64(r6)	;0x0000(r7), 0x0040(r6)
    b848:	40 00 
    b84a:	6a 00 0b 00 	mova	r0,	&0xa000b
    b84e:	00 00       	bra	@r0		
    b850:	00 00       	bra	@r0		
    b852:	00 00       	bra	@r0		
    b854:	44 00       	rrcm.a	#1,	r4	
    b856:	6b 00 00 00 	mova	r0,	&0xb0000
    b85a:	00 00       	bra	@r0		
    b85c:	00 00       	bra	@r0		
    b85e:	00 00       	bra	@r0		
    b860:	44 00       	rrcm.a	#1,	r4	
    b862:	6c 00 08 00 	mova	r0,	&0xc0008
    b866:	00 00       	bra	@r0		
    b868:	00 00       	bra	@r0		
    b86a:	00 00       	bra	@r0		
    b86c:	44 00       	rrcm.a	#1,	r4	
    b86e:	74 00 0c 00 	mova	r0,	12(r4)	;0x000c(r4)
    b872:	00 00       	bra	@r0		
    b874:	00 00       	bra	@r0		
    b876:	00 00       	bra	@r0		
    b878:	44 00       	rrcm.a	#1,	r4	
    b87a:	6e 00 10 00 	mova	r0,	&0xe0010
    b87e:	00 00       	bra	@r0		
    b880:	00 00       	bra	@r0		
    b882:	00 00       	bra	@r0		
    b884:	44 00       	rrcm.a	#1,	r4	
    b886:	72 00 1e 00 	mova	r0,	&0x001e	
    b88a:	00 00       	bra	@r0		
    b88c:	00 00       	bra	@r0		
    b88e:	00 00       	bra	@r0		
    b890:	44 00       	rrcm.a	#1,	r4	
    b892:	6c 00 22 00 	mova	r0,	&0xc0022
    b896:	00 00       	bra	@r0		
    b898:	00 00       	bra	@r0		
    b89a:	00 00       	bra	@r0		
    b89c:	44 00       	rrcm.a	#1,	r4	
    b89e:	70 00 28 00 	mova	r0,	0x0028	;PC rel. 0x0b8c8
    b8a2:	00 00       	bra	@r0		
    b8a4:	00 00       	bra	@r0		
    b8a6:	00 00       	bra	@r0		
    b8a8:	44 00       	rrcm.a	#1,	r4	
    b8aa:	75 00 2a 00 	mova	r0,	42(r5)	;0x002a(r5)
    b8ae:	00 00       	bra	@r0		
    b8b0:	00 00       	bra	@r0		
    b8b2:	00 00       	bra	@r0		
    b8b4:	24 00 00 00 	mova	&0x00000,r4	
    b8b8:	30 00 00 00 	bra	0x0000		;PC rel. 0x0b8ba
    b8bc:	a1 57 00 00 	add	@r7,	0(r1)	;0x0000(r1)
    b8c0:	24 00 7b 00 	mova	&0x0007b,r4	
    b8c4:	d8 61 00 00 	addc.b	0(r1),	22452(r8);0x0000(r1), 0x57b4(r8)
    b8c8:	b4 57 
    b8ca:	00 00       	bra	@r0		
    b8cc:	40 00       	rrcm.a	#1,	r0	
    b8ce:	7a 00 09 00 	mova	r0,	9(r10)	;0x0009(r10)
    b8d2:	00 00       	bra	@r0		
    b8d4:	bd 57 00 00 	add	@r7+,	0(r13)	;0x0000(r13)
    b8d8:	40 00       	rrcm.a	#1,	r0	
    b8da:	7a 00 0b 00 	mova	r0,	11(r10)	;0x000b(r10)
    b8de:	00 00       	bra	@r0		
    b8e0:	00 00       	bra	@r0		
    b8e2:	00 00       	bra	@r0		
    b8e4:	44 00       	rrcm.a	#1,	r4	
    b8e6:	7b 00 00 00 	mova	r0,	0(r11)	;0x0000(r11)
    b8ea:	00 00       	bra	@r0		
    b8ec:	00 00       	bra	@r0		
    b8ee:	00 00       	bra	@r0		
    b8f0:	44 00       	rrcm.a	#1,	r4	
    b8f2:	7c 00 0a 00 	mova	r0,	10(r12)	;0x000a(r12)
    b8f6:	00 00       	bra	@r0		
    b8f8:	00 00       	bra	@r0		
    b8fa:	00 00       	bra	@r0		
    b8fc:	44 00       	rrcm.a	#1,	r4	
    b8fe:	7e 00 12 00 	mova	r0,	18(r14)	;0x0012(r14)
    b902:	00 00       	bra	@r0		
    b904:	00 00       	bra	@r0		
    b906:	00 00       	bra	@r0		
    b908:	44 00       	rrcm.a	#1,	r4	
    b90a:	82 00 1c 00 	mova	#0x0001c,r2	
    b90e:	00 00       	bra	@r0		
    b910:	00 00       	bra	@r0		
    b912:	00 00       	bra	@r0		
    b914:	44 00       	rrcm.a	#1,	r4	
    b916:	7c 00 20 00 	mova	r0,	32(r12)	;0x0020(r12)
    b91a:	00 00       	bra	@r0		
    b91c:	00 00       	bra	@r0		
    b91e:	00 00       	bra	@r0		
    b920:	44 00       	rrcm.a	#1,	r4	
    b922:	84 00 26 00 	mova	#0x00026,r4	
    b926:	00 00       	bra	@r0		
    b928:	00 00       	bra	@r0		
    b92a:	00 00       	bra	@r0		
    b92c:	44 00       	rrcm.a	#1,	r4	
    b92e:	80 00 2a 00 	bra	#0x0002a	
    b932:	00 00       	bra	@r0		
    b934:	00 00       	bra	@r0		
    b936:	00 00       	bra	@r0		
    b938:	44 00       	rrcm.a	#1,	r4	
    b93a:	85 00 2c 00 	mova	#0x0002c,r5	
    b93e:	00 00       	bra	@r0		
    b940:	00 00       	bra	@r0		
    b942:	00 00       	bra	@r0		
    b944:	24 00 00 00 	mova	&0x00000,r4	
    b948:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0b94a
    b94c:	cd 57 00 00 	add.b	r7,	0(r13)	;0x0000(r13)
    b950:	24 00 a1 00 	mova	&0x000a1,r4	
    b954:	0c 62       	addc	r2,	r12	
    b956:	00 00       	bra	@r0		
    b958:	dd 57 00 00 	add.b	0(r7),	64(r13)	;0x0000(r7), 0x0040(r13)
    b95c:	40 00 
    b95e:	a0 00 0f 00 	adda	#0x0000f,r0	
    b962:	00 00       	bra	@r0		
    b964:	f7 57 00 00 	add.b	@r7+,	0(r7)	;0x0000(r7)
    b968:	40 00       	rrcm.a	#1,	r0	
    b96a:	a0 00 0e 00 	adda	#0x0000e,r0	
    b96e:	00 00       	bra	@r0		
    b970:	04 58       	add	r8,	r4	
    b972:	00 00       	bra	@r0		
    b974:	40 00       	rrcm.a	#1,	r0	
    b976:	a0 00 05 00 	adda	#0x00005,r0	
    b97a:	00 00       	bra	@r0		
    b97c:	00 00       	bra	@r0		
    b97e:	00 00       	bra	@r0		
    b980:	44 00       	rrcm.a	#1,	r4	
    b982:	a1 00 00 00 	adda	#0x00000,r1	
    b986:	00 00       	bra	@r0		
    b988:	00 00       	bra	@r0		
    b98a:	00 00       	bra	@r0		
    b98c:	44 00       	rrcm.a	#1,	r4	
    b98e:	ab 00 16 00 	adda	#0x00016,r11	
    b992:	00 00       	bra	@r0		
    b994:	00 00       	bra	@r0		
    b996:	00 00       	bra	@r0		
    b998:	44 00       	rrcm.a	#1,	r4	
    b99a:	ba 00 1e 00 	suba	#0x0001e,r10	
    b99e:	00 00       	bra	@r0		
    b9a0:	00 00       	bra	@r0		
    b9a2:	00 00       	bra	@r0		
    b9a4:	44 00       	rrcm.a	#1,	r4	
    b9a6:	bb 00 22 00 	suba	#0x00022,r11	
    b9aa:	00 00       	bra	@r0		
    b9ac:	00 00       	bra	@r0		
    b9ae:	00 00       	bra	@r0		
    b9b0:	44 00       	rrcm.a	#1,	r4	
    b9b2:	bd 00 26 00 	suba	#0x00026,r13	
    b9b6:	00 00       	bra	@r0		
    b9b8:	00 00       	bra	@r0		
    b9ba:	00 00       	bra	@r0		
    b9bc:	44 00       	rrcm.a	#1,	r4	
    b9be:	c4 00       	mova	r0,	r4	
    b9c0:	28 00 00 00 	mova	&0x00000,r8	
    b9c4:	00 00       	bra	@r0		
    b9c6:	00 00       	bra	@r0		
    b9c8:	44 00       	rrcm.a	#1,	r4	
    b9ca:	c6 00       	mova	r0,	r6	
    b9cc:	44 00       	rrcm.a	#1,	r4	
    b9ce:	00 00       	bra	@r0		
    b9d0:	00 00       	bra	@r0		
    b9d2:	00 00       	bra	@r0		
    b9d4:	44 00       	rrcm.a	#1,	r4	
    b9d6:	ca 00       	mova	r0,	r10	
    b9d8:	4e 00       	rrcm.a	#1,	r14	
    b9da:	00 00       	bra	@r0		
    b9dc:	00 00       	bra	@r0		
    b9de:	00 00       	bra	@r0		
    b9e0:	44 00       	rrcm.a	#1,	r4	
    b9e2:	cc 00       	mova	r0,	r12	
    b9e4:	56 00       	rrcm	#1,	r6	
    b9e6:	00 00       	bra	@r0		
    b9e8:	00 00       	bra	@r0		
    b9ea:	00 00       	bra	@r0		
    b9ec:	44 00       	rrcm.a	#1,	r4	
    b9ee:	ce 00       	mova	r0,	r14	
    b9f0:	58 00       	rrcm	#1,	r8	
    b9f2:	00 00       	bra	@r0		
    b9f4:	00 00       	bra	@r0		
    b9f6:	00 00       	bra	@r0		
    b9f8:	44 00       	rrcm.a	#1,	r4	
    b9fa:	cf 00       	mova	r0,	r15	
    b9fc:	5c 00       	rrcm	#1,	r12	
    b9fe:	00 00       	bra	@r0		
    ba00:	00 00       	bra	@r0		
    ba02:	00 00       	bra	@r0		
    ba04:	44 00       	rrcm.a	#1,	r4	
    ba06:	d0 00       	cmpa	r0,	r0	
    ba08:	60 00 00 00 	mova	r0,	&0x00000
    ba0c:	00 00       	bra	@r0		
    ba0e:	00 00       	bra	@r0		
    ba10:	44 00       	rrcm.a	#1,	r4	
    ba12:	d1 00       	cmpa	r0,	r1	
    ba14:	64 00 00 00 	mova	r0,	&0x40000
    ba18:	00 00       	bra	@r0		
    ba1a:	00 00       	bra	@r0		
    ba1c:	44 00       	rrcm.a	#1,	r4	
    ba1e:	d2 00       	cmpa	r0,	r2	
    ba20:	66 00 00 00 	mova	r0,	&0x60000
    ba24:	00 00       	bra	@r0		
    ba26:	00 00       	bra	@r0		
    ba28:	44 00       	rrcm.a	#1,	r4	
    ba2a:	d5 00       	cmpa	r0,	r5	
    ba2c:	6a 00 00 00 	mova	r0,	&0xa0000
    ba30:	00 00       	bra	@r0		
    ba32:	00 00       	bra	@r0		
    ba34:	44 00       	rrcm.a	#1,	r4	
    ba36:	d7 00       	cmpa	r0,	r7	
    ba38:	6e 00 00 00 	mova	r0,	&0xe0000
    ba3c:	00 00       	bra	@r0		
    ba3e:	00 00       	bra	@r0		
    ba40:	44 00       	rrcm.a	#1,	r4	
    ba42:	e5 00       	adda	r0,	r5	
    ba44:	88 00 00 00 	mova	#0x00000,r8	
    ba48:	00 00       	bra	@r0		
    ba4a:	00 00       	bra	@r0		
    ba4c:	44 00       	rrcm.a	#1,	r4	
    ba4e:	f0 00       	suba	r0,	r0	
    ba50:	92 00 00 00 	cmpa	#0x00000,r2	
    ba54:	00 00       	bra	@r0		
    ba56:	00 00       	bra	@r0		
    ba58:	44 00       	rrcm.a	#1,	r4	
    ba5a:	f5 00       	suba	r0,	r5	
    ba5c:	9c 00 00 00 	cmpa	#0x00000,r12	
    ba60:	00 00       	bra	@r0		
    ba62:	00 00       	bra	@r0		
    ba64:	44 00       	rrcm.a	#1,	r4	
    ba66:	07 01       	mova	@r1,	r7	
    ba68:	b0 00 00 00 	suba	#0x00000,r0	
    ba6c:	00 00       	bra	@r0		
    ba6e:	00 00       	bra	@r0		
    ba70:	44 00       	rrcm.a	#1,	r4	
    ba72:	0c 01       	mova	@r1,	r12	
    ba74:	ba 00 00 00 	suba	#0x00000,r10	
    ba78:	00 00       	bra	@r0		
    ba7a:	00 00       	bra	@r0		
    ba7c:	44 00       	rrcm.a	#1,	r4	
    ba7e:	1d 01       	mova	@r1+,	r13	
    ba80:	c4 00       	mova	r0,	r4	
    ba82:	00 00       	bra	@r0		
    ba84:	00 00       	bra	@r0		
    ba86:	00 00       	bra	@r0		
    ba88:	44 00       	rrcm.a	#1,	r4	
    ba8a:	28 01 ce 00 	mova	&0x100ce,r8	
    ba8e:	00 00       	bra	@r0		
    ba90:	00 00       	bra	@r0		
    ba92:	00 00       	bra	@r0		
    ba94:	44 00       	rrcm.a	#1,	r4	
    ba96:	2a 01 da 00 	mova	&0x100da,r10	
    ba9a:	00 00       	bra	@r0		
    ba9c:	00 00       	bra	@r0		
    ba9e:	00 00       	bra	@r0		
    baa0:	44 00       	rrcm.a	#1,	r4	
    baa2:	2d 01 dc 00 	mova	&0x100dc,r13	
    baa6:	00 00       	bra	@r0		
    baa8:	00 00       	bra	@r0		
    baaa:	00 00       	bra	@r0		
    baac:	44 00       	rrcm.a	#1,	r4	
    baae:	2e 01 f8 00 	mova	&0x100f8,r14	
    bab2:	00 00       	bra	@r0		
    bab4:	00 00       	bra	@r0		
    bab6:	00 00       	bra	@r0		
    bab8:	44 00       	rrcm.a	#1,	r4	
    baba:	2f 01 fc 00 	mova	&0x100fc,r15	
    babe:	00 00       	bra	@r0		
    bac0:	00 00       	bra	@r0		
    bac2:	00 00       	bra	@r0		
    bac4:	44 00       	rrcm.a	#1,	r4	
    bac6:	31 01 08 01 	mova	264(r1),r1	;0x0108(r1)
    baca:	00 00       	bra	@r0		
    bacc:	00 00       	bra	@r0		
    bace:	00 00       	bra	@r0		
    bad0:	44 00       	rrcm.a	#1,	r4	
    bad2:	32 01 0c 01 	mova	268(r1),r2	;0x010c(r1)
    bad6:	00 00       	bra	@r0		
    bad8:	00 00       	bra	@r0		
    bada:	00 00       	bra	@r0		
    badc:	44 00       	rrcm.a	#1,	r4	
    bade:	34 01 0e 01 	mova	270(r1),r4	;0x010e(r1)
    bae2:	00 00       	bra	@r0		
    bae4:	00 00       	bra	@r0		
    bae6:	00 00       	bra	@r0		
    bae8:	44 00       	rrcm.a	#1,	r4	
    baea:	39 01 14 01 	mova	276(r1),r9	;0x0114(r1)
    baee:	00 00       	bra	@r0		
    baf0:	00 00       	bra	@r0		
    baf2:	00 00       	bra	@r0		
    baf4:	44 00       	rrcm.a	#1,	r4	
    baf6:	3b 01 1a 01 	mova	282(r1),r11	;0x011a(r1)
    bafa:	00 00       	bra	@r0		
    bafc:	00 00       	bra	@r0		
    bafe:	00 00       	bra	@r0		
    bb00:	44 00       	rrcm.a	#1,	r4	
    bb02:	3c 01 1e 01 	mova	286(r1),r12	;0x011e(r1)
    bb06:	00 00       	bra	@r0		
    bb08:	00 00       	bra	@r0		
    bb0a:	00 00       	bra	@r0		
    bb0c:	44 00       	rrcm.a	#1,	r4	
    bb0e:	3e 01 20 01 	mova	288(r1),r14	;0x0120(r1)
    bb12:	00 00       	bra	@r0		
    bb14:	00 00       	bra	@r0		
    bb16:	00 00       	bra	@r0		
    bb18:	44 00       	rrcm.a	#1,	r4	
    bb1a:	44 01       	rram.a	#1,	r4	
    bb1c:	26 01 00 00 	mova	&0x10000,r6	
    bb20:	00 00       	bra	@r0		
    bb22:	00 00       	bra	@r0		
    bb24:	44 00       	rrcm.a	#1,	r4	
    bb26:	5b 01       	rram	#1,	r11	
    bb28:	38 01 00 00 	mova	0(r1),	r8	;0x0000(r1)
    bb2c:	00 00       	bra	@r0		
    bb2e:	00 00       	bra	@r0		
    bb30:	44 00       	rrcm.a	#1,	r4	
    bb32:	62 01 44 01 	mova	r1,	&0x20144
    bb36:	00 00       	bra	@r0		
    bb38:	00 00       	bra	@r0		
    bb3a:	00 00       	bra	@r0		
    bb3c:	44 00       	rrcm.a	#1,	r4	
    bb3e:	72 01 4a 01 	mova	r1,	&0x014a	
    bb42:	00 00       	bra	@r0		
    bb44:	00 00       	bra	@r0		
    bb46:	00 00       	bra	@r0		
    bb48:	44 00       	rrcm.a	#1,	r4	
    bb4a:	94 01 50 01 	cmpa	#0x10150,r4	
    bb4e:	00 00       	bra	@r0		
    bb50:	00 00       	bra	@r0		
    bb52:	00 00       	bra	@r0		
    bb54:	44 00       	rrcm.a	#1,	r4	
    bb56:	9b 01 5c 01 	cmpa	#0x1015c,r11	
    bb5a:	00 00       	bra	@r0		
    bb5c:	00 00       	bra	@r0		
    bb5e:	00 00       	bra	@r0		
    bb60:	44 00       	rrcm.a	#1,	r4	
    bb62:	d4 01       	cmpa	r1,	r4	
    bb64:	68 01 00 00 	mova	r1,	&0x80000
    bb68:	00 00       	bra	@r0		
    bb6a:	00 00       	bra	@r0		
    bb6c:	44 00       	rrcm.a	#1,	r4	
    bb6e:	d7 01       	cmpa	r1,	r7	
    bb70:	70 01 00 00 	mova	r1,	0x0000	;PC rel. 0x0bb72
    bb74:	00 00       	bra	@r0		
    bb76:	00 00       	bra	@r0		
    bb78:	44 00       	rrcm.a	#1,	r4	
    bb7a:	d8 01       	cmpa	r1,	r8	
    bb7c:	74 01 00 00 	mova	r1,	0(r4)	;0x0000(r4)
    bb80:	00 00       	bra	@r0		
    bb82:	00 00       	bra	@r0		
    bb84:	44 00       	rrcm.a	#1,	r4	
    bb86:	d9 01       	cmpa	r1,	r9	
    bb88:	78 01 00 00 	mova	r1,	0(r8)	;0x0000(r8)
    bb8c:	00 00       	bra	@r0		
    bb8e:	00 00       	bra	@r0		
    bb90:	44 00       	rrcm.a	#1,	r4	
    bb92:	da 01       	cmpa	r1,	r10	
    bb94:	7a 01 00 00 	mova	r1,	0(r10)	;0x0000(r10)
    bb98:	00 00       	bra	@r0		
    bb9a:	00 00       	bra	@r0		
    bb9c:	44 00       	rrcm.a	#1,	r4	
    bb9e:	ee 01       	adda	r1,	r14	
    bba0:	7e 01 00 00 	mova	r1,	0(r14)	;0x0000(r14)
    bba4:	00 00       	bra	@r0		
    bba6:	00 00       	bra	@r0		
    bba8:	44 00       	rrcm.a	#1,	r4	
    bbaa:	f0 01       	suba	r1,	r0	
    bbac:	80 01 00 00 	bra	#0x10000	
    bbb0:	00 00       	bra	@r0		
    bbb2:	00 00       	bra	@r0		
    bbb4:	44 00       	rrcm.a	#1,	r4	
    bbb6:	f1 01       	suba	r1,	r1	
    bbb8:	86 01 00 00 	mova	#0x10000,r6	
    bbbc:	00 00       	bra	@r0		
    bbbe:	00 00       	bra	@r0		
    bbc0:	44 00       	rrcm.a	#1,	r4	
    bbc2:	f6 01       	suba	r1,	r6	
    bbc4:	88 01 00 00 	mova	#0x10000,r8	
    bbc8:	00 00       	bra	@r0		
    bbca:	00 00       	bra	@r0		
    bbcc:	44 00       	rrcm.a	#1,	r4	
    bbce:	f8 01       	suba	r1,	r8	
    bbd0:	90 01 00 00 	cmpa	#0x10000,r0	
    bbd4:	00 00       	bra	@r0		
    bbd6:	00 00       	bra	@r0		
    bbd8:	44 00       	rrcm.a	#1,	r4	
    bbda:	fe 01       	suba	r1,	r14	
    bbdc:	92 01 00 00 	cmpa	#0x10000,r2	
    bbe0:	00 00       	bra	@r0		
    bbe2:	00 00       	bra	@r0		
    bbe4:	44 00       	rrcm.a	#1,	r4	
    bbe6:	01 02       	mova	#4,	r1	;r2 As==10
    bbe8:	94 01 00 00 	cmpa	#0x10000,r4	
    bbec:	00 00       	bra	@r0		
    bbee:	00 00       	bra	@r0		
    bbf0:	44 00       	rrcm.a	#1,	r4	
    bbf2:	03 02       	.word	0x0203;	????	Illegal as address instr
    bbf4:	9e 01 00 00 	cmpa	#0x10000,r14	
    bbf8:	00 00       	bra	@r0		
    bbfa:	00 00       	bra	@r0		
    bbfc:	44 00       	rrcm.a	#1,	r4	
    bbfe:	04 02       	mova	#4,	r4	;r2 As==10
    bc00:	aa 01 00 00 	adda	#0x10000,r10	
    bc04:	00 00       	bra	@r0		
    bc06:	00 00       	bra	@r0		
    bc08:	44 00       	rrcm.a	#1,	r4	
    bc0a:	06 02       	mova	#4,	r6	;r2 As==10
    bc0c:	ae 01 00 00 	adda	#0x10000,r14	
    bc10:	00 00       	bra	@r0		
    bc12:	00 00       	bra	@r0		
    bc14:	44 00       	rrcm.a	#1,	r4	
    bc16:	0b 02       	mova	#4,	r11	;r2 As==10
    bc18:	c4 01       	mova	r1,	r4	
    bc1a:	00 00       	bra	@r0		
    bc1c:	00 00       	bra	@r0		
    bc1e:	00 00       	bra	@r0		
    bc20:	44 00       	rrcm.a	#1,	r4	
    bc22:	0f 02       	mova	#4,	r15	;r2 As==10
    bc24:	c8 01       	mova	r1,	r8	
    bc26:	00 00       	bra	@r0		
    bc28:	00 00       	bra	@r0		
    bc2a:	00 00       	bra	@r0		
    bc2c:	44 00       	rrcm.a	#1,	r4	
    bc2e:	11 02       	mova	#8,	r1	;r2 As==11
    bc30:	d0 01       	cmpa	r1,	r0	
    bc32:	00 00       	bra	@r0		
    bc34:	00 00       	bra	@r0		
    bc36:	00 00       	bra	@r0		
    bc38:	44 00       	rrcm.a	#1,	r4	
    bc3a:	12 02       	mova	#8,	r2	;r2 As==11
    bc3c:	d6 01       	cmpa	r1,	r6	
    bc3e:	00 00       	bra	@r0		
    bc40:	00 00       	bra	@r0		
    bc42:	00 00       	bra	@r0		
    bc44:	44 00       	rrcm.a	#1,	r4	
    bc46:	13 02       	.word	0x0213;	????	Illegal as address instr
    bc48:	da 01       	cmpa	r1,	r10	
    bc4a:	00 00       	bra	@r0		
    bc4c:	00 00       	bra	@r0		
    bc4e:	00 00       	bra	@r0		
    bc50:	44 00       	rrcm.a	#1,	r4	
    bc52:	17 02       	mova	#8,	r7	;r2 As==11
    bc54:	ee 01       	adda	r1,	r14	
    bc56:	00 00       	bra	@r0		
    bc58:	00 00       	bra	@r0		
    bc5a:	00 00       	bra	@r0		
    bc5c:	44 00       	rrcm.a	#1,	r4	
    bc5e:	21 02 f4 01 	mova	&0x201f4,r1	
    bc62:	00 00       	bra	@r0		
    bc64:	00 00       	bra	@r0		
    bc66:	00 00       	bra	@r0		
    bc68:	44 00       	rrcm.a	#1,	r4	
    bc6a:	24 02 02 02 	mova	&0x20202,r4	
    bc6e:	00 00       	bra	@r0		
    bc70:	00 00       	bra	@r0		
    bc72:	00 00       	bra	@r0		
    bc74:	44 00       	rrcm.a	#1,	r4	
    bc76:	27 02 14 02 	mova	&0x20214,r7	
    bc7a:	00 00       	bra	@r0		
    bc7c:	00 00       	bra	@r0		
    bc7e:	00 00       	bra	@r0		
    bc80:	44 00       	rrcm.a	#1,	r4	
    bc82:	29 02 1c 02 	mova	&0x2021c,r9	
    bc86:	00 00       	bra	@r0		
    bc88:	00 00       	bra	@r0		
    bc8a:	00 00       	bra	@r0		
    bc8c:	44 00       	rrcm.a	#1,	r4	
    bc8e:	2a 02 28 02 	mova	&0x20228,r10	
    bc92:	00 00       	bra	@r0		
    bc94:	00 00       	bra	@r0		
    bc96:	00 00       	bra	@r0		
    bc98:	44 00       	rrcm.a	#1,	r4	
    bc9a:	2c 02 2c 02 	mova	&0x2022c,r12	
    bc9e:	00 00       	bra	@r0		
    bca0:	00 00       	bra	@r0		
    bca2:	00 00       	bra	@r0		
    bca4:	44 00       	rrcm.a	#1,	r4	
    bca6:	19 02       	mova	#8,	r9	;r2 As==11
    bca8:	3c 02 00 00 	mova	&0x0000,r12	
    bcac:	00 00       	bra	@r0		
    bcae:	00 00       	bra	@r0		
    bcb0:	44 00       	rrcm.a	#1,	r4	
    bcb2:	1a 02       	mova	#8,	r10	;r2 As==11
    bcb4:	48 02       	rlam.a	#1,	r8	
    bcb6:	00 00       	bra	@r0		
    bcb8:	00 00       	bra	@r0		
    bcba:	00 00       	bra	@r0		
    bcbc:	44 00       	rrcm.a	#1,	r4	
    bcbe:	1c 02       	mova	#8,	r12	;r2 As==11
    bcc0:	4c 02       	rlam.a	#1,	r12	
    bcc2:	00 00       	bra	@r0		
    bcc4:	00 00       	bra	@r0		
    bcc6:	00 00       	bra	@r0		
    bcc8:	44 00       	rrcm.a	#1,	r4	
    bcca:	0d 02       	mova	#4,	r13	;r2 As==10
    bccc:	5c 02       	rlam	#1,	r12	
    bcce:	00 00       	bra	@r0		
    bcd0:	00 00       	bra	@r0		
    bcd2:	00 00       	bra	@r0		
    bcd4:	44 00       	rrcm.a	#1,	r4	
    bcd6:	fa 01       	suba	r1,	r10	
    bcd8:	66 02 00 00 	mova	r2,	&0x60000
    bcdc:	00 00       	bra	@r0		
    bcde:	00 00       	bra	@r0		
    bce0:	44 00       	rrcm.a	#1,	r4	
    bce2:	fc 01       	suba	r1,	r12	
    bce4:	6e 02 00 00 	mova	r2,	&0xe0000
    bce8:	00 00       	bra	@r0		
    bcea:	00 00       	bra	@r0		
    bcec:	44 00       	rrcm.a	#1,	r4	
    bcee:	f3 01       	.word	0x01f3;	????	Illegal as address instr
    bcf0:	72 02 00 00 	mova	r2,	&0x0000	
    bcf4:	00 00       	bra	@r0		
    bcf6:	00 00       	bra	@r0		
    bcf8:	44 00       	rrcm.a	#1,	r4	
    bcfa:	9d 01 76 02 	cmpa	#0x10276,r13	
    bcfe:	00 00       	bra	@r0		
    bd00:	00 00       	bra	@r0		
    bd02:	00 00       	bra	@r0		
    bd04:	44 00       	rrcm.a	#1,	r4	
    bd06:	9f 01 7c 02 	cmpa	#0x1027c,r15	
    bd0a:	00 00       	bra	@r0		
    bd0c:	00 00       	bra	@r0		
    bd0e:	00 00       	bra	@r0		
    bd10:	44 00       	rrcm.a	#1,	r4	
    bd12:	a0 01 8e 02 	adda	#0x1028e,r0	
    bd16:	00 00       	bra	@r0		
    bd18:	00 00       	bra	@r0		
    bd1a:	00 00       	bra	@r0		
    bd1c:	44 00       	rrcm.a	#1,	r4	
    bd1e:	a4 01 94 02 	adda	#0x10294,r4	
    bd22:	00 00       	bra	@r0		
    bd24:	00 00       	bra	@r0		
    bd26:	00 00       	bra	@r0		
    bd28:	44 00       	rrcm.a	#1,	r4	
    bd2a:	ab 01 98 02 	adda	#0x10298,r11	
    bd2e:	00 00       	bra	@r0		
    bd30:	00 00       	bra	@r0		
    bd32:	00 00       	bra	@r0		
    bd34:	44 00       	rrcm.a	#1,	r4	
    bd36:	ac 01 a0 02 	adda	#0x102a0,r12	
    bd3a:	00 00       	bra	@r0		
    bd3c:	00 00       	bra	@r0		
    bd3e:	00 00       	bra	@r0		
    bd40:	44 00       	rrcm.a	#1,	r4	
    bd42:	b3 01       	.word	0x01b3;	????	Illegal as address instr
    bd44:	a6 02 00 00 	adda	#0x20000,r6	
    bd48:	00 00       	bra	@r0		
    bd4a:	00 00       	bra	@r0		
    bd4c:	44 00       	rrcm.a	#1,	r4	
    bd4e:	b4 01 b0 02 	suba	#0x102b0,r4	
    bd52:	00 00       	bra	@r0		
    bd54:	00 00       	bra	@r0		
    bd56:	00 00       	bra	@r0		
    bd58:	44 00       	rrcm.a	#1,	r4	
    bd5a:	b9 01 d0 02 	suba	#0x102d0,r9	
    bd5e:	00 00       	bra	@r0		
    bd60:	00 00       	bra	@r0		
    bd62:	00 00       	bra	@r0		
    bd64:	44 00       	rrcm.a	#1,	r4	
    bd66:	ba 01 ea 02 	suba	#0x102ea,r10	
    bd6a:	00 00       	bra	@r0		
    bd6c:	00 00       	bra	@r0		
    bd6e:	00 00       	bra	@r0		
    bd70:	44 00       	rrcm.a	#1,	r4	
    bd72:	bc 01 00 03 	suba	#0x10300,r12	
    bd76:	00 00       	bra	@r0		
    bd78:	00 00       	bra	@r0		
    bd7a:	00 00       	bra	@r0		
    bd7c:	44 00       	rrcm.a	#1,	r4	
    bd7e:	be 01 06 03 	suba	#0x10306,r14	
    bd82:	00 00       	bra	@r0		
    bd84:	00 00       	bra	@r0		
    bd86:	00 00       	bra	@r0		
    bd88:	44 00       	rrcm.a	#1,	r4	
    bd8a:	c5 01       	mova	r1,	r5	
    bd8c:	0a 03       	mova	#2,	r10	;r3 As==10
    bd8e:	00 00       	bra	@r0		
    bd90:	00 00       	bra	@r0		
    bd92:	00 00       	bra	@r0		
    bd94:	44 00       	rrcm.a	#1,	r4	
    bd96:	c6 01       	mova	r1,	r6	
    bd98:	16 03       	mova	#-1,	r6	;r3 As==11
    bd9a:	00 00       	bra	@r0		
    bd9c:	00 00       	bra	@r0		
    bd9e:	00 00       	bra	@r0		
    bda0:	44 00       	rrcm.a	#1,	r4	
    bda2:	c7 01       	mova	r1,	r7	
    bda4:	32 03 00 00 	mova	#1,	r2	;r3 As==01
    bda8:	00 00       	bra	@r0		
    bdaa:	00 00       	bra	@r0		
    bdac:	44 00       	rrcm.a	#1,	r4	
    bdae:	cb 01       	mova	r1,	r11	
    bdb0:	38 03 00 00 	mova	#1,	r8	;r3 As==01
    bdb4:	00 00       	bra	@r0		
    bdb6:	00 00       	bra	@r0		
    bdb8:	44 00       	rrcm.a	#1,	r4	
    bdba:	cf 01       	mova	r1,	r15	
    bdbc:	3e 03 00 00 	mova	#1,	r14	;r3 As==01
    bdc0:	00 00       	bra	@r0		
    bdc2:	00 00       	bra	@r0		
    bdc4:	44 00       	rrcm.a	#1,	r4	
    bdc6:	cc 01       	mova	r1,	r12	
    bdc8:	56 03       	rrum	#1,	r6	
    bdca:	00 00       	bra	@r0		
    bdcc:	00 00       	bra	@r0		
    bdce:	00 00       	bra	@r0		
    bdd0:	44 00       	rrcm.a	#1,	r4	
    bdd2:	c2 01       	mova	r1,	r2	
    bdd4:	66 03 00 00 	mova	#0,	&0x60000;r3 As==00
    bdd8:	00 00       	bra	@r0		
    bdda:	00 00       	bra	@r0		
    bddc:	44 00       	rrcm.a	#1,	r4	
    bdde:	c3 01       	.word	0x01c3;	????	Illegal as address instr
    bde0:	6a 03 00 00 	mova	#0,	&0xa0000;r3 As==00
    bde4:	00 00       	bra	@r0		
    bde6:	00 00       	bra	@r0		
    bde8:	44 00       	rrcm.a	#1,	r4	
    bdea:	96 01 76 03 	cmpa	#0x10376,r6	
    bdee:	00 00       	bra	@r0		
    bdf0:	00 00       	bra	@r0		
    bdf2:	00 00       	bra	@r0		
    bdf4:	44 00       	rrcm.a	#1,	r4	
    bdf6:	98 01 76 03 	cmpa	#0x10376,r8	
    bdfa:	00 00       	bra	@r0		
    bdfc:	00 00       	bra	@r0		
    bdfe:	00 00       	bra	@r0		
    be00:	44 00       	rrcm.a	#1,	r4	
    be02:	99 01 7c 03 	cmpa	#0x1037c,r9	
    be06:	00 00       	bra	@r0		
    be08:	00 00       	bra	@r0		
    be0a:	00 00       	bra	@r0		
    be0c:	44 00       	rrcm.a	#1,	r4	
    be0e:	97 01 7e 03 	cmpa	#0x1037e,r7	
    be12:	00 00       	bra	@r0		
    be14:	00 00       	bra	@r0		
    be16:	00 00       	bra	@r0		
    be18:	44 00       	rrcm.a	#1,	r4	
    be1a:	74 01 84 03 	mova	r1,	900(r4)	;0x0384(r4)
    be1e:	00 00       	bra	@r0		
    be20:	00 00       	bra	@r0		
    be22:	00 00       	bra	@r0		
    be24:	44 00       	rrcm.a	#1,	r4	
    be26:	7e 01 92 03 	mova	r1,	914(r14);0x0392(r14)
    be2a:	00 00       	bra	@r0		
    be2c:	00 00       	bra	@r0		
    be2e:	00 00       	bra	@r0		
    be30:	44 00       	rrcm.a	#1,	r4	
    be32:	85 01 96 03 	mova	#0x10396,r5	
    be36:	00 00       	bra	@r0		
    be38:	00 00       	bra	@r0		
    be3a:	00 00       	bra	@r0		
    be3c:	44 00       	rrcm.a	#1,	r4	
    be3e:	87 01 a6 03 	mova	#0x103a6,r7	
    be42:	00 00       	bra	@r0		
    be44:	00 00       	bra	@r0		
    be46:	00 00       	bra	@r0		
    be48:	44 00       	rrcm.a	#1,	r4	
    be4a:	89 01 aa 03 	mova	#0x103aa,r9	
    be4e:	00 00       	bra	@r0		
    be50:	00 00       	bra	@r0		
    be52:	00 00       	bra	@r0		
    be54:	44 00       	rrcm.a	#1,	r4	
    be56:	8a 01 b0 03 	mova	#0x103b0,r10	
    be5a:	00 00       	bra	@r0		
    be5c:	00 00       	bra	@r0		
    be5e:	00 00       	bra	@r0		
    be60:	44 00       	rrcm.a	#1,	r4	
    be62:	8e 01 b4 03 	mova	#0x103b4,r14	
    be66:	00 00       	bra	@r0		
    be68:	00 00       	bra	@r0		
    be6a:	00 00       	bra	@r0		
    be6c:	44 00       	rrcm.a	#1,	r4	
    be6e:	91 01 b8 03 	cmpa	#0x103b8,r1	
    be72:	00 00       	bra	@r0		
    be74:	00 00       	bra	@r0		
    be76:	00 00       	bra	@r0		
    be78:	44 00       	rrcm.a	#1,	r4	
    be7a:	92 01 cc 03 	cmpa	#0x103cc,r2	
    be7e:	00 00       	bra	@r0		
    be80:	00 00       	bra	@r0		
    be82:	00 00       	bra	@r0		
    be84:	44 00       	rrcm.a	#1,	r4	
    be86:	76 01 ce 03 	mova	r1,	974(r6)	;0x03ce(r6)
    be8a:	00 00       	bra	@r0		
    be8c:	00 00       	bra	@r0		
    be8e:	00 00       	bra	@r0		
    be90:	44 00       	rrcm.a	#1,	r4	
    be92:	77 01 d2 03 	mova	r1,	978(r7)	;0x03d2(r7)
    be96:	00 00       	bra	@r0		
    be98:	00 00       	bra	@r0		
    be9a:	00 00       	bra	@r0		
    be9c:	44 00       	rrcm.a	#1,	r4	
    be9e:	78 01 d8 03 	mova	r1,	984(r8)	;0x03d8(r8)
    bea2:	00 00       	bra	@r0		
    bea4:	00 00       	bra	@r0		
    bea6:	00 00       	bra	@r0		
    bea8:	44 00       	rrcm.a	#1,	r4	
    beaa:	79 01 de 03 	mova	r1,	990(r9)	;0x03de(r9)
    beae:	00 00       	bra	@r0		
    beb0:	00 00       	bra	@r0		
    beb2:	00 00       	bra	@r0		
    beb4:	44 00       	rrcm.a	#1,	r4	
    beb6:	7a 01 e4 03 	mova	r1,	996(r10);0x03e4(r10)
    beba:	00 00       	bra	@r0		
    bebc:	00 00       	bra	@r0		
    bebe:	00 00       	bra	@r0		
    bec0:	44 00       	rrcm.a	#1,	r4	
    bec2:	7b 01 f0 03 	mova	r1,	1008(r11);0x03f0(r11)
    bec6:	00 00       	bra	@r0		
    bec8:	00 00       	bra	@r0		
    beca:	00 00       	bra	@r0		
    becc:	44 00       	rrcm.a	#1,	r4	
    bece:	7c 01 f6 03 	mova	r1,	1014(r12);0x03f6(r12)
    bed2:	00 00       	bra	@r0		
    bed4:	00 00       	bra	@r0		
    bed6:	00 00       	bra	@r0		
    bed8:	44 00       	rrcm.a	#1,	r4	
    beda:	6c 01 fc 03 	mova	r1,	&0xc03fc
    bede:	00 00       	bra	@r0		
    bee0:	00 00       	bra	@r0		
    bee2:	00 00       	bra	@r0		
    bee4:	44 00       	rrcm.a	#1,	r4	
    bee6:	6d 01 08 04 	mova	r1,	&0xd0408
    beea:	00 00       	bra	@r0		
    beec:	00 00       	bra	@r0		
    beee:	00 00       	bra	@r0		
    bef0:	44 00       	rrcm.a	#1,	r4	
    bef2:	6e 01 0e 04 	mova	r1,	&0xe040e
    bef6:	00 00       	bra	@r0		
    bef8:	00 00       	bra	@r0		
    befa:	00 00       	bra	@r0		
    befc:	44 00       	rrcm.a	#1,	r4	
    befe:	6f 01 14 04 	mova	r1,	&0xf0414
    bf02:	00 00       	bra	@r0		
    bf04:	00 00       	bra	@r0		
    bf06:	00 00       	bra	@r0		
    bf08:	44 00       	rrcm.a	#1,	r4	
    bf0a:	70 01 18 04 	mova	r1,	0x0418	;PC rel. 0x0c324
    bf0e:	00 00       	bra	@r0		
    bf10:	00 00       	bra	@r0		
    bf12:	00 00       	bra	@r0		
    bf14:	44 00       	rrcm.a	#1,	r4	
    bf16:	5d 01       	rram	#1,	r13	
    bf18:	1a 04       	mova	@r4+,	r10	
    bf1a:	00 00       	bra	@r0		
    bf1c:	00 00       	bra	@r0		
    bf1e:	00 00       	bra	@r0		
    bf20:	44 00       	rrcm.a	#1,	r4	
    bf22:	5f 01       	rram	#1,	r15	
    bf24:	1a 04       	mova	@r4+,	r10	
    bf26:	00 00       	bra	@r0		
    bf28:	00 00       	bra	@r0		
    bf2a:	00 00       	bra	@r0		
    bf2c:	44 00       	rrcm.a	#1,	r4	
    bf2e:	60 01 1e 04 	mova	r1,	&0x0041e
    bf32:	00 00       	bra	@r0		
    bf34:	00 00       	bra	@r0		
    bf36:	00 00       	bra	@r0		
    bf38:	44 00       	rrcm.a	#1,	r4	
    bf3a:	5e 01       	rram	#1,	r14	
    bf3c:	20 04 00 00 	bra	&0x40000	
    bf40:	00 00       	bra	@r0		
    bf42:	00 00       	bra	@r0		
    bf44:	44 00       	rrcm.a	#1,	r4	
    bf46:	46 01       	rram.a	#1,	r6	
    bf48:	26 04 00 00 	mova	&0x40000,r6	
    bf4c:	00 00       	bra	@r0		
    bf4e:	00 00       	bra	@r0		
    bf50:	44 00       	rrcm.a	#1,	r4	
    bf52:	48 01       	rram.a	#1,	r8	
    bf54:	26 04 00 00 	mova	&0x40000,r6	
    bf58:	00 00       	bra	@r0		
    bf5a:	00 00       	bra	@r0		
    bf5c:	44 00       	rrcm.a	#1,	r4	
    bf5e:	4a 01       	rram.a	#1,	r10	
    bf60:	2c 04 00 00 	mova	&0x40000,r12	
    bf64:	00 00       	bra	@r0		
    bf66:	00 00       	bra	@r0		
    bf68:	44 00       	rrcm.a	#1,	r4	
    bf6a:	53 01       	rram	#1,	#0	;r3 As==00
    bf6c:	38 04 00 00 	mova	0(r4),	r8	;0x0000(r4)
    bf70:	00 00       	bra	@r0		
    bf72:	00 00       	bra	@r0		
    bf74:	44 00       	rrcm.a	#1,	r4	
    bf76:	58 01       	rram	#1,	r8	
    bf78:	3e 04 00 00 	mova	0(r4),	r14	;0x0000(r4)
    bf7c:	00 00       	bra	@r0		
    bf7e:	00 00       	bra	@r0		
    bf80:	44 00       	rrcm.a	#1,	r4	
    bf82:	59 01       	rram	#1,	r9	
    bf84:	44 04       	rrcm.a	#2,	r4	
    bf86:	00 00       	bra	@r0		
    bf88:	00 00       	bra	@r0		
    bf8a:	00 00       	bra	@r0		
    bf8c:	44 00       	rrcm.a	#1,	r4	
    bf8e:	55 01       	rram	#1,	r5	
    bf90:	46 04       	rrcm.a	#2,	r6	
    bf92:	00 00       	bra	@r0		
    bf94:	00 00       	bra	@r0		
    bf96:	00 00       	bra	@r0		
    bf98:	44 00       	rrcm.a	#1,	r4	
    bf9a:	56 01       	rram	#1,	r6	
    bf9c:	56 04       	rrcm	#2,	r6	
    bf9e:	00 00       	bra	@r0		
    bfa0:	00 00       	bra	@r0		
    bfa2:	00 00       	bra	@r0		
    bfa4:	44 00       	rrcm.a	#1,	r4	
    bfa6:	4f 01       	rram.a	#1,	r15	
    bfa8:	5e 04       	rrcm	#2,	r14	
    bfaa:	00 00       	bra	@r0		
    bfac:	00 00       	bra	@r0		
    bfae:	00 00       	bra	@r0		
    bfb0:	44 00       	rrcm.a	#1,	r4	
    bfb2:	50 01       	rram	#1,	r0	
    bfb4:	62 04 00 00 	mova	r4,	&0x20000
    bfb8:	00 00       	bra	@r0		
    bfba:	00 00       	bra	@r0		
    bfbc:	44 00       	rrcm.a	#1,	r4	
    bfbe:	47 01       	rram.a	#1,	r7	
    bfc0:	7e 04 00 00 	mova	r4,	0(r14)	;0x0000(r14)
    bfc4:	00 00       	bra	@r0		
    bfc6:	00 00       	bra	@r0		
    bfc8:	44 00       	rrcm.a	#1,	r4	
    bfca:	40 01       	rram.a	#1,	r0	
    bfcc:	84 04 00 00 	mova	#0x40000,r4	
    bfd0:	00 00       	bra	@r0		
    bfd2:	00 00       	bra	@r0		
    bfd4:	44 00       	rrcm.a	#1,	r4	
    bfd6:	42 01       	rram.a	#1,	r2	
    bfd8:	90 04 00 00 	cmpa	#0x40000,r0	
    bfdc:	00 00       	bra	@r0		
    bfde:	00 00       	bra	@r0		
    bfe0:	44 00       	rrcm.a	#1,	r4	
    bfe2:	36 01 92 04 	mova	1170(r1),r6	;0x0492(r1)
    bfe6:	00 00       	bra	@r0		
    bfe8:	00 00       	bra	@r0		
    bfea:	00 00       	bra	@r0		
    bfec:	44 00       	rrcm.a	#1,	r4	
    bfee:	37 01 96 04 	mova	1174(r1),r7	;0x0496(r1)
    bff2:	00 00       	bra	@r0		
    bff4:	00 00       	bra	@r0		
    bff6:	00 00       	bra	@r0		
    bff8:	44 00       	rrcm.a	#1,	r4	
    bffa:	24 01 9a 04 	mova	&0x1049a,r4	
    bffe:	00 00       	bra	@r0		
    c000:	00 00       	bra	@r0		
    c002:	00 00       	bra	@r0		
    c004:	44 00       	rrcm.a	#1,	r4	
    c006:	25 01 a6 04 	mova	&0x104a6,r5	
    c00a:	00 00       	bra	@r0		
    c00c:	00 00       	bra	@r0		
    c00e:	00 00       	bra	@r0		
    c010:	44 00       	rrcm.a	#1,	r4	
    c012:	26 01 ac 04 	mova	&0x104ac,r6	
    c016:	00 00       	bra	@r0		
    c018:	00 00       	bra	@r0		
    c01a:	00 00       	bra	@r0		
    c01c:	44 00       	rrcm.a	#1,	r4	
    c01e:	0e 01       	mova	@r1,	r14	
    c020:	b0 04 00 00 	suba	#0x40000,r0	
    c024:	00 00       	bra	@r0		
    c026:	00 00       	bra	@r0		
    c028:	44 00       	rrcm.a	#1,	r4	
    c02a:	14 01       	mova	@r1+,	r4	
    c02c:	ba 04 00 00 	suba	#0x40000,r10	
    c030:	00 00       	bra	@r0		
    c032:	00 00       	bra	@r0		
    c034:	44 00       	rrcm.a	#1,	r4	
    c036:	15 01       	mova	@r1+,	r5	
    c038:	bc 04 00 00 	suba	#0x40000,r12	
    c03c:	00 00       	bra	@r0		
    c03e:	00 00       	bra	@r0		
    c040:	44 00       	rrcm.a	#1,	r4	
    c042:	17 01       	mova	@r1+,	r7	
    c044:	c8 04       	mova	r4,	r8	
    c046:	00 00       	bra	@r0		
    c048:	00 00       	bra	@r0		
    c04a:	00 00       	bra	@r0		
    c04c:	44 00       	rrcm.a	#1,	r4	
    c04e:	18 01       	mova	@r1+,	r8	
    c050:	e4 04       	adda	r4,	r4	
    c052:	00 00       	bra	@r0		
    c054:	00 00       	bra	@r0		
    c056:	00 00       	bra	@r0		
    c058:	44 00       	rrcm.a	#1,	r4	
    c05a:	1a 01       	mova	@r1+,	r10	
    c05c:	f4 04       	suba	r4,	r4	
    c05e:	00 00       	bra	@r0		
    c060:	00 00       	bra	@r0		
    c062:	00 00       	bra	@r0		
    c064:	44 00       	rrcm.a	#1,	r4	
    c066:	1b 01       	mova	@r1+,	r11	
    c068:	fe 04       	suba	r4,	r14	
    c06a:	00 00       	bra	@r0		
    c06c:	00 00       	bra	@r0		
    c06e:	00 00       	bra	@r0		
    c070:	44 00       	rrcm.a	#1,	r4	
    c072:	10 01       	reta			
    c074:	02 05       	mova	@r5,	r2	
    c076:	00 00       	bra	@r0		
    c078:	00 00       	bra	@r0		
    c07a:	00 00       	bra	@r0		
    c07c:	44 00       	rrcm.a	#1,	r4	
    c07e:	11 01       	mova	@r1+,	r1	
    c080:	08 05       	mova	@r5,	r8	
    c082:	00 00       	bra	@r0		
    c084:	00 00       	bra	@r0		
    c086:	00 00       	bra	@r0		
    c088:	44 00       	rrcm.a	#1,	r4	
    c08a:	12 01       	mova	@r1+,	r2	
    c08c:	12 05       	mova	@r5+,	r2	
    c08e:	00 00       	bra	@r0		
    c090:	00 00       	bra	@r0		
    c092:	00 00       	bra	@r0		
    c094:	44 00       	rrcm.a	#1,	r4	
    c096:	09 01       	mova	@r1,	r9	
    c098:	16 05       	mova	@r5+,	r6	
    c09a:	00 00       	bra	@r0		
    c09c:	00 00       	bra	@r0		
    c09e:	00 00       	bra	@r0		
    c0a0:	44 00       	rrcm.a	#1,	r4	
    c0a2:	0a 01       	mova	@r1,	r10	
    c0a4:	1c 05       	mova	@r5+,	r12	
    c0a6:	00 00       	bra	@r0		
    c0a8:	00 00       	bra	@r0		
    c0aa:	00 00       	bra	@r0		
    c0ac:	44 00       	rrcm.a	#1,	r4	
    c0ae:	f7 00       	suba	r0,	r7	
    c0b0:	20 05 00 00 	bra	&0x50000	
    c0b4:	00 00       	bra	@r0		
    c0b6:	00 00       	bra	@r0		
    c0b8:	44 00       	rrcm.a	#1,	r4	
    c0ba:	03 01       	.word	0x0103;	????	Illegal as address instr
    c0bc:	20 05 00 00 	bra	&0x50000	
    c0c0:	00 00       	bra	@r0		
    c0c2:	00 00       	bra	@r0		
    c0c4:	44 00       	rrcm.a	#1,	r4	
    c0c6:	04 01       	mova	@r1,	r4	
    c0c8:	26 05 00 00 	mova	&0x50000,r6	
    c0cc:	00 00       	bra	@r0		
    c0ce:	00 00       	bra	@r0		
    c0d0:	44 00       	rrcm.a	#1,	r4	
    c0d2:	05 01       	mova	@r1,	r5	
    c0d4:	2c 05 00 00 	mova	&0x50000,r12	
    c0d8:	00 00       	bra	@r0		
    c0da:	00 00       	bra	@r0		
    c0dc:	44 00       	rrcm.a	#1,	r4	
    c0de:	ff 00       	suba	r0,	r15	
    c0e0:	30 05 00 00 	bra	0(r5)		;0x0000(r5)
    c0e4:	00 00       	bra	@r0		
    c0e6:	00 00       	bra	@r0		
    c0e8:	44 00       	rrcm.a	#1,	r4	
    c0ea:	01 01       	mova	@r1,	r1	
    c0ec:	42 05       	rram.a	#2,	r2	
    c0ee:	00 00       	bra	@r0		
    c0f0:	00 00       	bra	@r0		
    c0f2:	00 00       	bra	@r0		
    c0f4:	44 00       	rrcm.a	#1,	r4	
    c0f6:	f2 00       	suba	r0,	r2	
    c0f8:	4c 05       	rram.a	#2,	r12	
    c0fa:	00 00       	bra	@r0		
    c0fc:	00 00       	bra	@r0		
    c0fe:	00 00       	bra	@r0		
    c100:	44 00       	rrcm.a	#1,	r4	
    c102:	f3 00       	.word	0x00f3;	????	Illegal as address instr
    c104:	50 05       	rram	#2,	r0	
    c106:	00 00       	bra	@r0		
    c108:	00 00       	bra	@r0		
    c10a:	00 00       	bra	@r0		
    c10c:	44 00       	rrcm.a	#1,	r4	
    c10e:	ec 00       	adda	r0,	r12	
    c110:	54 05       	rram	#2,	r4	
    c112:	00 00       	bra	@r0		
    c114:	00 00       	bra	@r0		
    c116:	00 00       	bra	@r0		
    c118:	44 00       	rrcm.a	#1,	r4	
    c11a:	ed 00       	adda	r0,	r13	
    c11c:	5e 05       	rram	#2,	r14	
    c11e:	00 00       	bra	@r0		
    c120:	00 00       	bra	@r0		
    c122:	00 00       	bra	@r0		
    c124:	44 00       	rrcm.a	#1,	r4	
    c126:	ee 00       	adda	r0,	r14	
    c128:	64 05 00 00 	mova	r5,	&0x40000
    c12c:	00 00       	bra	@r0		
    c12e:	00 00       	bra	@r0		
    c130:	44 00       	rrcm.a	#1,	r4	
    c132:	d9 00       	cmpa	r0,	r9	
    c134:	68 05 00 00 	mova	r5,	&0x80000
    c138:	00 00       	bra	@r0		
    c13a:	00 00       	bra	@r0		
    c13c:	44 00       	rrcm.a	#1,	r4	
    c13e:	db 00       	cmpa	r0,	r11	
    c140:	6e 05 00 00 	mova	r5,	&0xe0000
    c144:	00 00       	bra	@r0		
    c146:	00 00       	bra	@r0		
    c148:	44 00       	rrcm.a	#1,	r4	
    c14a:	e0 00       	adda	r0,	r0	
    c14c:	7e 05 00 00 	mova	r5,	0(r14)	;0x0000(r14)
    c150:	00 00       	bra	@r0		
    c152:	00 00       	bra	@r0		
    c154:	44 00       	rrcm.a	#1,	r4	
    c156:	e1 00       	adda	r0,	r1	
    c158:	82 05 00 00 	mova	#0x50000,r2	
    c15c:	00 00       	bra	@r0		
    c15e:	00 00       	bra	@r0		
    c160:	44 00       	rrcm.a	#1,	r4	
    c162:	c8 00       	mova	r0,	r8	
    c164:	8e 05 00 00 	mova	#0x50000,r14	
    c168:	00 00       	bra	@r0		
    c16a:	00 00       	bra	@r0		
    c16c:	44 00       	rrcm.a	#1,	r4	
    c16e:	c2 00       	mova	r0,	r2	
    c170:	9c 05 00 00 	cmpa	#0x50000,r12	
    c174:	00 00       	bra	@r0		
    c176:	00 00       	bra	@r0		
    c178:	44 00       	rrcm.a	#1,	r4	
    c17a:	32 02 9c 05 	mova	&0x059c,r2	
    c17e:	00 00       	bra	@r0		
    c180:	0e 58       	add	r8,	r14	
    c182:	00 00       	bra	@r0		
    c184:	40 00       	rrcm.a	#1,	r0	
    c186:	a2 00 06 00 	adda	#0x00006,r2	
    c18a:	00 00       	bra	@r0		
    c18c:	1a 58 00 00 	add	0(r8),	r10	;0x0000(r8)
    c190:	40 00       	rrcm.a	#1,	r0	
    c192:	a3 00       	.word	0x00a3;	????	Illegal as address instr
    c194:	07 00       	mova	@r0,	r7	
    c196:	00 00       	bra	@r0		
    c198:	24 58       	add	@r8,	r4	
    c19a:	00 00       	bra	@r0		
    c19c:	40 00       	rrcm.a	#1,	r0	
    c19e:	a4 00 0d 00 	adda	#0x0000d,r4	
    c1a2:	00 00       	bra	@r0		
    c1a4:	2d 58       	add	@r8,	r13	
    c1a6:	00 00       	bra	@r0		
    c1a8:	80 00 a5 00 	bra	#0x000a5	
    c1ac:	2c 00 00 00 	mova	&0x00000,r12	
    c1b0:	37 58       	add	@r8+,	r7	
    c1b2:	00 00       	bra	@r0		
    c1b4:	40 00       	rrcm.a	#1,	r0	
    c1b6:	a6 00 0f 00 	adda	#0x0000f,r6	
    c1ba:	00 00       	bra	@r0		
    c1bc:	45 58       	add.b	r8,	r5	
    c1be:	00 00       	bra	@r0		
    c1c0:	80 00 a7 00 	bra	#0x000a7	
    c1c4:	2e 00 00 00 	mova	&0x00000,r14	
    c1c8:	52 58 00 00 	add.b	0(r8),	r2	;0x0000(r8)
    c1cc:	80 00 a8 00 	bra	#0x000a8	
    c1d0:	2f 00 00 00 	mova	&0x00000,r15	
    c1d4:	5f 58 00 00 	add.b	0(r8),	r15	;0x0000(r8)
    c1d8:	40 00       	rrcm.a	#1,	r0	
    c1da:	a9 00 0b 00 	adda	#0x0000b,r9	
    c1de:	00 00       	bra	@r0		
    c1e0:	6c 58       	add.b	@r8,	r12	
    c1e2:	00 00       	bra	@r0		
    c1e4:	80 00 aa 00 	bra	#0x000aa	
    c1e8:	2a 00 00 00 	mova	&0x00000,r10	
    c1ec:	77 58       	add.b	@r8+,	r7	
    c1ee:	00 00       	bra	@r0		
    c1f0:	80 00 ab 00 	bra	#0x000ab	
    c1f4:	30 00 00 00 	bra	0x0000		;PC rel. 0x0c1f6
    c1f8:	84 58 00 00 	add	r8,	0(r4)	;0x0000(r4)
    c1fc:	80 00 af 00 	bra	#0x000af	
    c200:	34 00 00 00 	mova	0x0000,	r4	;PC rel. 0x0c202
    c204:	90 58 00 00 	add	0(r8),	0x0080	;0x0000(r8), PC rel. 0x0c28a
    c208:	80 00 
    c20a:	b0 00 35 00 	suba	#0x00035,r0	
    c20e:	00 00       	bra	@r0		
    c210:	9d 58 00 00 	add	0(r8),	64(r13)	;0x0000(r8), 0x0040(r13)
    c214:	40 00 
    c216:	b1 00 0a 00 	suba	#0x0000a,r1	
    c21a:	00 00       	bra	@r0		
    c21c:	aa 58 00 00 	add	@r8,	0(r10)	;0x0000(r10)
    c220:	40 00       	rrcm.a	#1,	r0	
    c222:	b2 00 0b 00 	suba	#0x0000b,r2	
    c226:	00 00       	bra	@r0		
    c228:	ba 58 00 00 	add	@r8+,	0(r10)	;0x0000(r10)
    c22c:	40 00       	rrcm.a	#1,	r0	
    c22e:	b6 00 09 00 	suba	#0x00009,r6	
    c232:	00 00       	bra	@r0		
    c234:	c7 58 00 00 	add.b	r8,	0(r7)	;0x0000(r7)
    c238:	80 00 b7 00 	bra	#0x000b7	
    c23c:	00 00       	bra	@r0		
    c23e:	00 00       	bra	@r0		
    c240:	08 59       	add	r9,	r8	
    c242:	00 00       	bra	@r0		
    c244:	80 00 b8 00 	bra	#0x000b8	
    c248:	28 00 00 00 	mova	&0x00000,r8	
    c24c:	00 00       	bra	@r0		
    c24e:	00 00       	bra	@r0		
    c250:	c0 00       	bra	r0		
    c252:	00 00       	bra	@r0		
    c254:	16 00       	mova	#0x00000,r6	
    c256:	00 00       	bra	@r0		
    c258:	23 59       	.word	0x5923;	????	Illegal as 2-op instr
    c25a:	00 00       	bra	@r0		
    c25c:	40 00       	rrcm.a	#1,	r0	
    c25e:	b6 01 04 00 	suba	#0x10004,r6	
    c262:	00 00       	bra	@r0		
    c264:	2e 59       	add	@r9,	r14	
    c266:	00 00       	bra	@r0		
    c268:	80 00 b6 01 	bra	#0x001b6	
    c26c:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x0c26e
    c270:	00 00       	bra	@r0		
    c272:	00 00       	bra	@r0		
    c274:	c0 00       	bra	r0		
    c276:	00 00       	bra	@r0		
    c278:	d0 02       	cmpa	r2,	r0	
    c27a:	00 00       	bra	@r0		
    c27c:	00 00       	bra	@r0		
    c27e:	00 00       	bra	@r0		
    c280:	e0 00       	adda	r0,	r0	
    c282:	00 00       	bra	@r0		
    c284:	3e 03 00 00 	mova	#1,	r14	;r3 As==01
    c288:	23 59       	.word	0x5923;	????	Illegal as 2-op instr
    c28a:	00 00       	bra	@r0		
    c28c:	40 00       	rrcm.a	#1,	r0	
    c28e:	b6 01 04 00 	suba	#0x10004,r6	
    c292:	00 00       	bra	@r0		
    c294:	2e 59       	add	@r9,	r14	
    c296:	00 00       	bra	@r0		
    c298:	80 00 b6 01 	bra	#0x001b6	
    c29c:	36 00 00 00 	mova	0x0000,	r6	;PC rel. 0x0c29e
    c2a0:	00 00       	bra	@r0		
    c2a2:	00 00       	bra	@r0		
    c2a4:	c0 00       	bra	r0		
    c2a6:	00 00       	bra	@r0		
    c2a8:	4a 03       	rrum.a	#1,	r10	
    c2aa:	00 00       	bra	@r0		
    c2ac:	00 00       	bra	@r0		
    c2ae:	00 00       	bra	@r0		
    c2b0:	e0 00       	adda	r0,	r0	
    c2b2:	00 00       	bra	@r0		
    c2b4:	76 03 00 00 	mova	#0,	0(r6)	;r3 As==00, 0x0000(r6)
    c2b8:	42 59       	add.b	r9,	r2	
    c2ba:	00 00       	bra	@r0		
    c2bc:	40 00       	rrcm.a	#1,	r0	
    c2be:	85 01 0f 00 	mova	#0x1000f,r5	
    c2c2:	00 00       	bra	@r0		
    c2c4:	00 00       	bra	@r0		
    c2c6:	00 00       	bra	@r0		
    c2c8:	c0 00       	bra	r0		
    c2ca:	00 00       	bra	@r0		
    c2cc:	96 03 00 00 	cmpa	#0x30000,r6	
    c2d0:	00 00       	bra	@r0		
    c2d2:	00 00       	bra	@r0		
    c2d4:	e0 00       	adda	r0,	r0	
    c2d6:	00 00       	bra	@r0		
    c2d8:	b6 03 00 00 	suba	#0x30000,r6	
    c2dc:	00 00       	bra	@r0		
    c2de:	00 00       	bra	@r0		
    c2e0:	e0 00       	adda	r0,	r0	
    c2e2:	00 00       	bra	@r0		
    c2e4:	9c 05 00 00 	cmpa	#0x50000,r12	
    c2e8:	00 00       	bra	@r0		
    c2ea:	00 00       	bra	@r0		
    c2ec:	24 00 00 00 	mova	&0x00000,r4	
    c2f0:	b6 05 00 00 	suba	#0x50000,r6	
    c2f4:	4c 59       	add.b	r9,	r12	
    c2f6:	00 00       	bra	@r0		
    c2f8:	28 00 65 00 	mova	&0x00065,r8	
    c2fc:	b4 11       	sxt	@r4+		
    c2fe:	00 00       	bra	@r0		
    c300:	60 59       	add.b	@r9,	r0	
    c302:	00 00       	bra	@r0		
    c304:	26 00 66 00 	mova	&0x00066,r6	
    c308:	b2 11       	sxt	#8		;r2 As==11
    c30a:	00 00       	bra	@r0		
    c30c:	00 00       	bra	@r0		
    c30e:	00 00       	bra	@r0		
    c310:	64 00 00 00 	mova	r0,	&0x40000
    c314:	c2 67 00 00 	addc.b	r7,	&0x0000	
    c318:	d6 55 00 00 	add.b	0(r5),	100(r6)	;0x0000(r5), 0x0064(r6)
    c31c:	64 00 
    c31e:	00 00       	bra	@r0		
    c320:	c2 67 00 00 	addc.b	r7,	&0x0000	
    c324:	71 59       	add.b	@r9+,	r1	
    c326:	00 00       	bra	@r0		
    c328:	64 00 00 00 	mova	r0,	&0x40000
    c32c:	c2 67 00 00 	addc.b	r7,	&0x0000	
    c330:	6a 00 00 00 	mova	r0,	&0xa0000
    c334:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0c336
    c338:	00 00       	bra	@r0		
    c33a:	00 00       	bra	@r0		
    c33c:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    c340:	80 00 00 00 	bra	#0x00000	
    c344:	00 00       	bra	@r0		
    c346:	00 00       	bra	@r0		
    c348:	99 00 00 00 	cmpa	#0x00000,r9	
    c34c:	80 00 00 00 	bra	#0x00000	
    c350:	00 00       	bra	@r0		
    c352:	00 00       	bra	@r0		
    c354:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    c356:	00 00       	bra	@r0		
    c358:	80 00 00 00 	bra	#0x00000	
    c35c:	00 00       	bra	@r0		
    c35e:	00 00       	bra	@r0		
    c360:	ec 00       	adda	r0,	r12	
    c362:	00 00       	bra	@r0		
    c364:	80 00 00 00 	bra	#0x00000	
    c368:	00 00       	bra	@r0		
    c36a:	00 00       	bra	@r0		
    c36c:	24 01 00 00 	mova	&0x10000,r4	
    c370:	80 00 00 00 	bra	#0x00000	
    c374:	00 00       	bra	@r0		
    c376:	00 00       	bra	@r0		
    c378:	66 01 00 00 	mova	r1,	&0x60000
    c37c:	80 00 00 00 	bra	#0x00000	
    c380:	00 00       	bra	@r0		
    c382:	00 00       	bra	@r0		
    c384:	b7 01 00 00 	suba	#0x10000,r7	
    c388:	80 00 00 00 	bra	#0x00000	
    c38c:	00 00       	bra	@r0		
    c38e:	00 00       	bra	@r0		
    c390:	08 02       	mova	#4,	r8	;r2 As==10
    c392:	00 00       	bra	@r0		
    c394:	80 00 00 00 	bra	#0x00000	
    c398:	00 00       	bra	@r0		
    c39a:	00 00       	bra	@r0		
    c39c:	2e 02 00 00 	mova	&0x20000,r14	
    c3a0:	80 00 00 00 	bra	#0x00000	
    c3a4:	00 00       	bra	@r0		
    c3a6:	00 00       	bra	@r0		
    c3a8:	6c 02 00 00 	mova	r2,	&0xc0000
    c3ac:	80 00 00 00 	bra	#0x00000	
    c3b0:	00 00       	bra	@r0		
    c3b2:	00 00       	bra	@r0		
    c3b4:	96 02 00 00 	cmpa	#0x20000,r6	
    c3b8:	80 00 00 00 	bra	#0x00000	
    c3bc:	00 00       	bra	@r0		
    c3be:	00 00       	bra	@r0		
    c3c0:	bf 02 00 00 	suba	#0x20000,r15	
    c3c4:	80 00 00 00 	bra	#0x00000	
    c3c8:	00 00       	bra	@r0		
    c3ca:	00 00       	bra	@r0		
    c3cc:	d9 02       	cmpa	r2,	r9	
    c3ce:	00 00       	bra	@r0		
    c3d0:	80 00 00 00 	bra	#0x00000	
    c3d4:	00 00       	bra	@r0		
    c3d6:	00 00       	bra	@r0		
    c3d8:	f4 02       	suba	r2,	r4	
    c3da:	00 00       	bra	@r0		
    c3dc:	80 00 00 00 	bra	#0x00000	
    c3e0:	00 00       	bra	@r0		
    c3e2:	00 00       	bra	@r0		
    c3e4:	14 03       	mova	#-1,	r4	;r3 As==11
    c3e6:	00 00       	bra	@r0		
    c3e8:	80 00 00 00 	bra	#0x00000	
    c3ec:	00 00       	bra	@r0		
    c3ee:	00 00       	bra	@r0		
    c3f0:	4d 03       	rrum.a	#1,	r13	
    c3f2:	00 00       	bra	@r0		
    c3f4:	80 00 00 00 	bra	#0x00000	
    c3f8:	00 00       	bra	@r0		
    c3fa:	00 00       	bra	@r0		
    c3fc:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    c400:	80 00 00 00 	bra	#0x00000	
    c404:	00 00       	bra	@r0		
    c406:	00 00       	bra	@r0		
    c408:	8a 03 00 00 	mova	#0x30000,r10	
    c40c:	80 00 00 00 	bra	#0x00000	
    c410:	00 00       	bra	@r0		
    c412:	00 00       	bra	@r0		
    c414:	ae 03 00 00 	adda	#0x30000,r14	
    c418:	80 00 00 00 	bra	#0x00000	
    c41c:	00 00       	bra	@r0		
    c41e:	00 00       	bra	@r0		
    c420:	d7 03       	tsta	r7		
    c422:	00 00       	bra	@r0		
    c424:	80 00 00 00 	bra	#0x00000	
    c428:	00 00       	bra	@r0		
    c42a:	00 00       	bra	@r0		
    c42c:	71 59       	add.b	@r9+,	r1	
    c42e:	00 00       	bra	@r0		
    c430:	82 00 00 00 	mova	#0x00000,r2	
    c434:	11 07       	mova	@r7+,	r1	
    c436:	00 00       	bra	@r0		
    c438:	19 56 00 00 	add	0(r6),	r9	;0x0000(r6)
    c43c:	c2 00       	mova	r0,	r2	
    c43e:	00 00       	bra	@r0		
    c440:	00 00       	bra	@r0		
    c442:	00 00       	bra	@r0		
    c444:	2c 56       	add	@r6,	r12	
    c446:	00 00       	bra	@r0		
    c448:	c2 00       	mova	r0,	r2	
    c44a:	00 00       	bra	@r0		
    c44c:	13 10       	rrc	#1		;r3 As==01
    c44e:	00 00       	bra	@r0		
    c450:	82 56 00 00 	add	r6,	&0x0000	
    c454:	c2 00       	mova	r0,	r2	
    c456:	00 00       	bra	@r0		
    c458:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
    c45c:	99 56 00 00 	add	0(r6),	194(r9)	;0x0000(r6), 0x00c2(r9)
    c460:	c2 00 
    c462:	00 00       	bra	@r0		
    c464:	00 00       	bra	@r0		
    c466:	00 00       	bra	@r0		
    c468:	b0 56 00 00 	add	@r6+,	0x0000	;PC rel. 0x0c46c
    c46c:	c2 00       	mova	r0,	r2	
    c46e:	00 00       	bra	@r0		
    c470:	91 34       	jge	$+292    	;abs 0xc594
    c472:	00 00       	bra	@r0		
    c474:	ca 56 00 00 	add.b	r6,	0(r10)	;0x0000(r10)
    c478:	c2 00       	mova	r0,	r2	
    c47a:	00 00       	bra	@r0		
    c47c:	76 0d 00 00 	mova	r13,	0(r6)	;0x0000(r6)
    c480:	7f 59       	add.b	@r9+,	r15	
    c482:	00 00       	bra	@r0		
    c484:	24 00 1d 00 	mova	&0x0001d,r4	
    c488:	c2 67 00 00 	addc.b	r7,	&0x0000	
    c48c:	8b 59 00 00 	add	r9,	0(r11)	;0x0000(r11)
    c490:	40 00       	rrcm.a	#1,	r0	
    c492:	1d 00       	mova	#0x00000,r13	
    c494:	0b 00       	mova	@r0,	r11	
    c496:	00 00       	bra	@r0		
    c498:	00 00       	bra	@r0		
    c49a:	00 00       	bra	@r0		
    c49c:	44 00       	rrcm.a	#1,	r4	
    c49e:	1d 00       	mova	#0x00000,r13	
	...
    c4a8:	44 00       	rrcm.a	#1,	r4	
    c4aa:	1e 00       	mova	#0x00000,r14	
    c4ac:	04 00       	mova	@r0,	r4	
    c4ae:	00 00       	bra	@r0		
    c4b0:	00 00       	bra	@r0		
    c4b2:	00 00       	bra	@r0		
    c4b4:	44 00       	rrcm.a	#1,	r4	
    c4b6:	1f 00       	mova	#0x00000,r15	
    c4b8:	06 00       	mova	@r0,	r6	
    c4ba:	00 00       	bra	@r0		
    c4bc:	00 00       	bra	@r0		
    c4be:	00 00       	bra	@r0		
    c4c0:	44 00       	rrcm.a	#1,	r4	
    c4c2:	23 00       	.word	0x0023;	????	Illegal as address instr
    c4c4:	1a 00       	mova	#0x00000,r10	
    c4c6:	00 00       	bra	@r0		
    c4c8:	00 00       	bra	@r0		
    c4ca:	00 00       	bra	@r0		
    c4cc:	44 00       	rrcm.a	#1,	r4	
    c4ce:	20 00 1e 00 	bra	&0x0001e	
    c4d2:	00 00       	bra	@r0		
    c4d4:	00 00       	bra	@r0		
    c4d6:	00 00       	bra	@r0		
    c4d8:	44 00       	rrcm.a	#1,	r4	
    c4da:	21 00 22 00 	mova	&0x00022,r1	
    c4de:	00 00       	bra	@r0		
    c4e0:	00 00       	bra	@r0		
    c4e2:	00 00       	bra	@r0		
    c4e4:	44 00       	rrcm.a	#1,	r4	
    c4e6:	25 00 2a 00 	mova	&0x0002a,r5	
    c4ea:	00 00       	bra	@r0		
    c4ec:	95 59 00 00 	add	0(r9),	64(r5)	;0x0000(r9), 0x0040(r5)
    c4f0:	40 00 
    c4f2:	1e 00       	mova	#0x00000,r14	
    c4f4:	0e 00       	mova	@r0,	r14	
    c4f6:	00 00       	bra	@r0		
    c4f8:	00 00       	bra	@r0		
    c4fa:	00 00       	bra	@r0		
    c4fc:	c0 00       	bra	r0		
    c4fe:	00 00       	bra	@r0		
    c500:	04 00       	mova	@r0,	r4	
    c502:	00 00       	bra	@r0		
    c504:	00 00       	bra	@r0		
    c506:	00 00       	bra	@r0		
    c508:	e0 00       	adda	r0,	r0	
    c50a:	00 00       	bra	@r0		
    c50c:	2a 00 00 00 	mova	&0x00000,r10	
    c510:	00 00       	bra	@r0		
    c512:	00 00       	bra	@r0		
    c514:	24 00 00 00 	mova	&0x00000,r4	
    c518:	2e 00 00 00 	mova	&0x00000,r14	
    c51c:	00 00       	bra	@r0		
    c51e:	00 00       	bra	@r0		
    c520:	64 00 00 00 	mova	r0,	&0x40000
    c524:	f0 67 00 00 	addc.b	@r7+,	0x0000	;PC rel. 0x0c528
    c528:	d6 55 00 00 	add.b	0(r5),	100(r6)	;0x0000(r5), 0x0064(r6)
    c52c:	64 00 
    c52e:	00 00       	bra	@r0		
    c530:	f0 67 00 00 	addc.b	@r7+,	0x0000	;PC rel. 0x0c534
    c534:	9f 59 00 00 	add	0(r9),	100(r15);0x0000(r9), 0x0064(r15)
    c538:	64 00 
    c53a:	00 00       	bra	@r0		
    c53c:	f0 67 00 00 	addc.b	@r7+,	0x0000	;PC rel. 0x0c540
    c540:	6a 00 00 00 	mova	r0,	&0xa0000
    c544:	3c 00 00 00 	mova	0x0000,	r12	;PC rel. 0x0c546
    c548:	00 00       	bra	@r0		
    c54a:	00 00       	bra	@r0		
    c54c:	79 00 00 00 	mova	r0,	0(r9)	;0x0000(r9)
    c550:	80 00 00 00 	bra	#0x00000	
    c554:	00 00       	bra	@r0		
    c556:	00 00       	bra	@r0		
    c558:	99 00 00 00 	cmpa	#0x00000,r9	
    c55c:	80 00 00 00 	bra	#0x00000	
    c560:	00 00       	bra	@r0		
    c562:	00 00       	bra	@r0		
    c564:	b3 00       	.word	0x00b3;	????	Illegal as address instr
    c566:	00 00       	bra	@r0		
    c568:	80 00 00 00 	bra	#0x00000	
    c56c:	00 00       	bra	@r0		
    c56e:	00 00       	bra	@r0		
    c570:	ec 00       	adda	r0,	r12	
    c572:	00 00       	bra	@r0		
    c574:	80 00 00 00 	bra	#0x00000	
    c578:	00 00       	bra	@r0		
    c57a:	00 00       	bra	@r0		
    c57c:	24 01 00 00 	mova	&0x10000,r4	
    c580:	80 00 00 00 	bra	#0x00000	
    c584:	00 00       	bra	@r0		
    c586:	00 00       	bra	@r0		
    c588:	66 01 00 00 	mova	r1,	&0x60000
    c58c:	80 00 00 00 	bra	#0x00000	
    c590:	00 00       	bra	@r0		
    c592:	00 00       	bra	@r0		
    c594:	b7 01 00 00 	suba	#0x10000,r7	
    c598:	80 00 00 00 	bra	#0x00000	
    c59c:	00 00       	bra	@r0		
    c59e:	00 00       	bra	@r0		
    c5a0:	08 02       	mova	#4,	r8	;r2 As==10
    c5a2:	00 00       	bra	@r0		
    c5a4:	80 00 00 00 	bra	#0x00000	
    c5a8:	00 00       	bra	@r0		
    c5aa:	00 00       	bra	@r0		
    c5ac:	2e 02 00 00 	mova	&0x20000,r14	
    c5b0:	80 00 00 00 	bra	#0x00000	
    c5b4:	00 00       	bra	@r0		
    c5b6:	00 00       	bra	@r0		
    c5b8:	6c 02 00 00 	mova	r2,	&0xc0000
    c5bc:	80 00 00 00 	bra	#0x00000	
    c5c0:	00 00       	bra	@r0		
    c5c2:	00 00       	bra	@r0		
    c5c4:	96 02 00 00 	cmpa	#0x20000,r6	
    c5c8:	80 00 00 00 	bra	#0x00000	
    c5cc:	00 00       	bra	@r0		
    c5ce:	00 00       	bra	@r0		
    c5d0:	bf 02 00 00 	suba	#0x20000,r15	
    c5d4:	80 00 00 00 	bra	#0x00000	
    c5d8:	00 00       	bra	@r0		
    c5da:	00 00       	bra	@r0		
    c5dc:	d9 02       	cmpa	r2,	r9	
    c5de:	00 00       	bra	@r0		
    c5e0:	80 00 00 00 	bra	#0x00000	
    c5e4:	00 00       	bra	@r0		
    c5e6:	00 00       	bra	@r0		
    c5e8:	f4 02       	suba	r2,	r4	
    c5ea:	00 00       	bra	@r0		
    c5ec:	80 00 00 00 	bra	#0x00000	
    c5f0:	00 00       	bra	@r0		
    c5f2:	00 00       	bra	@r0		
    c5f4:	14 03       	mova	#-1,	r4	;r3 As==11
    c5f6:	00 00       	bra	@r0		
    c5f8:	80 00 00 00 	bra	#0x00000	
    c5fc:	00 00       	bra	@r0		
    c5fe:	00 00       	bra	@r0		
    c600:	4d 03       	rrum.a	#1,	r13	
    c602:	00 00       	bra	@r0		
    c604:	80 00 00 00 	bra	#0x00000	
    c608:	00 00       	bra	@r0		
    c60a:	00 00       	bra	@r0		
    c60c:	6b 03 00 00 	mova	#0,	&0xb0000;r3 As==00
    c610:	80 00 00 00 	bra	#0x00000	
    c614:	00 00       	bra	@r0		
    c616:	00 00       	bra	@r0		
    c618:	8a 03 00 00 	mova	#0x30000,r10	
    c61c:	80 00 00 00 	bra	#0x00000	
    c620:	00 00       	bra	@r0		
    c622:	00 00       	bra	@r0		
    c624:	ae 03 00 00 	adda	#0x30000,r14	
    c628:	80 00 00 00 	bra	#0x00000	
    c62c:	00 00       	bra	@r0		
    c62e:	00 00       	bra	@r0		
    c630:	d7 03       	tsta	r7		
    c632:	00 00       	bra	@r0		
    c634:	80 00 00 00 	bra	#0x00000	
    c638:	00 00       	bra	@r0		
    c63a:	00 00       	bra	@r0		
    c63c:	9f 59 00 00 	add	0(r9),	130(r15);0x0000(r9), 0x0082(r15)
    c640:	82 00 
    c642:	00 00       	bra	@r0		
    c644:	e7 12       	.word	0x12e7;	????	
    c646:	00 00       	bra	@r0		
    c648:	99 56 00 00 	add	0(r6),	194(r9)	;0x0000(r6), 0x00c2(r9)
    c64c:	c2 00 
    c64e:	00 00       	bra	@r0		
    c650:	00 00       	bra	@r0		
    c652:	00 00       	bra	@r0		
    c654:	69 57       	add.b	@r7,	r9	
    c656:	00 00       	bra	@r0		
    c658:	c2 00       	mova	r0,	r2	
    c65a:	00 00       	bra	@r0		
    c65c:	00 00       	bra	@r0		
    c65e:	00 00       	bra	@r0		
    c660:	2c 56       	add	@r6,	r12	
    c662:	00 00       	bra	@r0		
    c664:	c2 00       	mova	r0,	r2	
    c666:	00 00       	bra	@r0		
    c668:	13 10       	rrc	#1		;r3 As==01
    c66a:	00 00       	bra	@r0		
    c66c:	82 56 00 00 	add	r6,	&0x0000	
    c670:	c2 00       	mova	r0,	r2	
    c672:	00 00       	bra	@r0		
    c674:	ea a9 00 00 	dadd.b	@r9,	0(r10)	;0x0000(r10)
    c678:	b0 56 00 00 	add	@r6+,	0x0000	;PC rel. 0x0c67c
    c67c:	c2 00       	mova	r0,	r2	
    c67e:	00 00       	bra	@r0		
    c680:	91 34       	jge	$+292    	;abs 0xc7a4
    c682:	00 00       	bra	@r0		
    c684:	af 59 00 00 	add	@r9,	0(r15)	;0x0000(r15)
    c688:	24 00 29 00 	mova	&0x00029,r4	
    c68c:	f0 67 00 00 	addc.b	@r7+,	0x0000	;PC rel. 0x0c690
    c690:	c5 59 00 00 	add.b	r9,	0(r5)	;0x0000(r5)
    c694:	40 00       	rrcm.a	#1,	r0	
    c696:	26 00 0b 00 	mova	&0x0000b,r6	
    c69a:	00 00       	bra	@r0		
    c69c:	d3 2c       	jc	$+424    	;abs 0xc844
    c69e:	00 00       	bra	@r0		
    c6a0:	40 00       	rrcm.a	#1,	r0	
    c6a2:	27 00 0c 00 	mova	&0x0000c,r7	
    c6a6:	00 00       	bra	@r0		
    c6a8:	dd 59 00 00 	add.b	0(r9),	64(r13)	;0x0000(r9), 0x0040(r13)
    c6ac:	40 00 
    c6ae:	28 00 0d 00 	mova	&0x0000d,r8	
    c6b2:	00 00       	bra	@r0		
    c6b4:	00 00       	bra	@r0		
    c6b6:	00 00       	bra	@r0		
    c6b8:	44 00       	rrcm.a	#1,	r4	
    c6ba:	29 00 00 00 	mova	&0x00000,r9	
    c6be:	00 00       	bra	@r0		
    c6c0:	00 00       	bra	@r0		
    c6c2:	00 00       	bra	@r0		
    c6c4:	44 00       	rrcm.a	#1,	r4	
    c6c6:	2a 00 06 00 	mova	&0x00006,r10	
    c6ca:	00 00       	bra	@r0		
    c6cc:	00 00       	bra	@r0		
    c6ce:	00 00       	bra	@r0		
    c6d0:	44 00       	rrcm.a	#1,	r4	
    c6d2:	2c 00 0a 00 	mova	&0x0000a,r12	
    c6d6:	00 00       	bra	@r0		
    c6d8:	00 00       	bra	@r0		
    c6da:	00 00       	bra	@r0		
    c6dc:	44 00       	rrcm.a	#1,	r4	
    c6de:	30 00 0c 00 	bra	0x000c		;PC rel. 0x0c6ec
    c6e2:	00 00       	bra	@r0		
    c6e4:	00 00       	bra	@r0		
    c6e6:	00 00       	bra	@r0		
    c6e8:	44 00       	rrcm.a	#1,	r4	
    c6ea:	32 00 14 00 	mova	0x0014,	r2	;PC rel. 0x0c700
    c6ee:	00 00       	bra	@r0		
    c6f0:	00 00       	bra	@r0		
    c6f2:	00 00       	bra	@r0		
    c6f4:	44 00       	rrcm.a	#1,	r4	
    c6f6:	35 00 18 00 	mova	0x0018,	r5	;PC rel. 0x0c710
    c6fa:	00 00       	bra	@r0		
    c6fc:	00 00       	bra	@r0		
    c6fe:	00 00       	bra	@r0		
    c700:	44 00       	rrcm.a	#1,	r4	
    c702:	31 00 1c 00 	mova	0x001c,	r1	;PC rel. 0x0c720
    c706:	00 00       	bra	@r0		
    c708:	00 00       	bra	@r0		
    c70a:	00 00       	bra	@r0		
    c70c:	44 00       	rrcm.a	#1,	r4	
    c70e:	36 00 20 00 	mova	0x0020,	r6	;PC rel. 0x0c730
    c712:	00 00       	bra	@r0		
    c714:	e6 59 00 00 	add.b	@r9,	0(r6)	;0x0000(r6)
    c718:	40 00       	rrcm.a	#1,	r0	
    c71a:	2c 00 0e 00 	mova	&0x0000e,r12	
    c71e:	00 00       	bra	@r0		
    c720:	00 00       	bra	@r0		
    c722:	00 00       	bra	@r0		
    c724:	c0 00       	bra	r0		
    c726:	00 00       	bra	@r0		
    c728:	0a 00       	mova	@r0,	r10	
    c72a:	00 00       	bra	@r0		
    c72c:	00 00       	bra	@r0		
    c72e:	00 00       	bra	@r0		
    c730:	e0 00       	adda	r0,	r0	
    c732:	00 00       	bra	@r0		
    c734:	18 00       	mova	#0x00000,r8	
    c736:	00 00       	bra	@r0		
    c738:	fe 59 00 00 	add.b	@r9+,	0(r14)	;0x0000(r14)
    c73c:	40 00       	rrcm.a	#1,	r0	
    c73e:	2c 00 0e 00 	mova	&0x0000e,r12	
    c742:	00 00       	bra	@r0		
    c744:	00 00       	bra	@r0		
    c746:	00 00       	bra	@r0		
    c748:	c0 00       	bra	r0		
    c74a:	00 00       	bra	@r0		
    c74c:	1c 00       	mova	#0x00000,r12	
    c74e:	00 00       	bra	@r0		
    c750:	00 00       	bra	@r0		
    c752:	00 00       	bra	@r0		
    c754:	e0 00       	adda	r0,	r0	
    c756:	00 00       	bra	@r0		
    c758:	20 00 00 00 	bra	&0x00000	
    c75c:	00 00       	bra	@r0		
    c75e:	00 00       	bra	@r0		
    c760:	24 00 00 00 	mova	&0x00000,r4	
    c764:	24 00 00 00 	mova	&0x00000,r4	
    c768:	00 00       	bra	@r0		
    c76a:	00 00       	bra	@r0		
    c76c:	64 00 00 00 	mova	r0,	&0x40000
    c770:	14 68 00 00 	addc	0(r8),	r4	;0x0000(r8)
Disassembly of section .stabstr:

00000000 <.stabstr>:
       0:	00 43       	clr	r0		
       2:	3a 2f       	jc	$-394    	;abs 0xfe78
       4:	44 4f       	mov.b	r15,	r4	
       6:	4b 55       	add.b	r5,	r11	
       8:	4d 45       	mov.b	r5,	r13	
       a:	7e 31       	jn	$+766    	;abs 0x308
       c:	2f 77       	subc	@r7,	r15	
       e:	6f 72       	subc.b	#4,	r15	;r2 As==10
      10:	6b 2f       	jc	$-296    	;abs 0xfee8
      12:	4c 4f       	mov.b	r15,	r12	
      14:	4b 41       	mov.b	r1,	r11	
      16:	4c 45       	mov.b	r5,	r12	
      18:	7e 31       	jn	$+766    	;abs 0x316
      1a:	2f 54       	add	@r4,	r15	
      1c:	65 6d       	addc.b	@r13,	r5	
      1e:	70 2f       	jc	$-286    	;abs 0xff00
      20:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
      22:	51 50 44 58 	add.b	0x5844,	r1	;PC rel. 0x0586a
      26:	4b 36       	jge	$-872    	;abs 0xfcbe
      28:	2e 73       	subc	#2,	r14	;r3 As==10
      2a:	00 67       	addc	r7,	r0	
      2c:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
      2e:	74 30       	jn	$+234    	;abs 0x118
      30:	2e 53       	incd	r14		
      32:	00 43       	clr	r0		
      34:	3a 5c       	add	@r12+,	r10	
      36:	55 73       	subc.b	#1,	r5	;r3 As==01
      38:	65 72       	subc.b	#4,	r5	;r2 As==10
      3a:	73 5c       	.word	0x5c73;	????	Illegal as 2-op instr
      3c:	66 6c       	addc.b	@r12,	r6	
      3e:	61 76       	subc.b	@r6,	r1	
      40:	69 6f       	addc.b	@r15,	r9	
      42:	68 70       	subc.b	@r0,	r8	
      44:	6f 5c       	add.b	@r12,	r15	
      46:	44 65       	addc.b	r5,	r4	
      48:	73 6b       	.word	0x6b73;	????	Illegal as 2-op instr
      4a:	74 6f       	addc.b	@r15+,	r4	
      4c:	70 5c       	add.b	@r12+,	r0	
      4e:	6d 69       	addc.b	@r9,	r13	
      50:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
      52:	6f 71       	subc.b	@r1,	r15	
      54:	75 61       	addc.b	@r1+,	r5	
      56:	64 5c       	add.b	@r12,	r4	
      58:	6d 69       	addc.b	@r9,	r13	
      5a:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
      5c:	6f 71       	subc.b	@r1,	r15	
      5e:	75 61       	addc.b	@r1+,	r5	
      60:	64 2f       	jc	$-310    	;abs 0xff2a
      62:	00 6d       	addc	r13,	r0	
      64:	61 69       	addc.b	@r9,	r1	
      66:	6e 2e       	jc	$-802    	;abs 0xfd44
      68:	63 00 67 63 	mova	r0,	&0x36367
      6c:	63 32       	jn	$-824    	;abs 0xfd34
      6e:	5f 63       	addc.b	#1,	r15	;r3 As==01
      70:	6f 6d       	addc.b	@r13,	r15	
      72:	70 69       	addc.b	@r9+,	r0	
      74:	6c 65       	addc.b	@r5,	r12	
      76:	64 2e       	jc	$-822    	;abs 0xfd40
      78:	00 69       	addc	r9,	r0	
      7a:	6e 74       	subc.b	@r4,	r14	
      7c:	3a 74       	subc	@r4+,	r10	
      7e:	28 30       	jn	$+82     	;abs 0xd0
      80:	2c 31       	jn	$+602    	;abs 0x2da
      82:	29 3d       	jmp	$+596    	;abs 0x2d6
      84:	72 28       	jnc	$+230    	;abs 0x16a
      86:	30 2c       	jc	$+98     	;abs 0xe8
      88:	31 29       	jnc	$+612    	;abs 0x2ec
      8a:	3b 2d       	jc	$+632    	;abs 0x302
      8c:	33 32       	jn	$-920    	;abs 0xfcf4
      8e:	37 36       	jge	$-912    	;abs 0xfcfe
      90:	38 3b       	jl	$-398    	;abs 0xff02
      92:	33 32       	jn	$-920    	;abs 0xfcfa
      94:	37 36       	jge	$-912    	;abs 0xfd04
      96:	37 3b       	jl	$-400    	;abs 0xff06
      98:	00 63       	adc	r0		
      9a:	68 61       	addc.b	@r1,	r8	
      9c:	72 3a       	jl	$-794    	;abs 0xfd82
      9e:	74 28       	jnc	$+234    	;abs 0x188
      a0:	30 2c       	jc	$+98     	;abs 0x102
      a2:	32 29       	jnc	$+614    	;abs 0x308
      a4:	3d 72       	subc	#8,	r13	;r2 As==11
      a6:	28 30       	jn	$+82     	;abs 0xf8
      a8:	2c 32       	jn	$-934    	;abs 0xfd02
      aa:	29 3b       	jl	$-428    	;abs 0xfefe
      ac:	30 3b       	jl	$-414    	;abs 0xff0e
      ae:	31 32       	jn	$-924    	;abs 0xfd12
      b0:	37 3b       	jl	$-400    	;abs 0xff20
      b2:	00 6c       	addc	r12,	r0	
      b4:	6f 6e       	addc.b	@r14,	r15	
      b6:	67 20       	jnz	$+208    	;abs 0x186
      b8:	69 6e       	addc.b	@r14,	r9	
      ba:	74 3a       	jl	$-790    	;abs 0xfda4
      bc:	74 28       	jnc	$+234    	;abs 0x1a6
      be:	30 2c       	jc	$+98     	;abs 0x120
      c0:	33 29       	jnc	$+616    	;abs 0x328
      c2:	3d 40 73 33 	mov	#13171,	r13	;#0x3373
      c6:	32 3b       	jl	$-410    	;abs 0xff2c
      c8:	72 28       	jnc	$+230    	;abs 0x1ae
      ca:	30 2c       	jc	$+98     	;abs 0x12c
      cc:	33 29       	jnc	$+616    	;abs 0x334
      ce:	3b 30       	jn	$+120    	;abs 0x146
      d0:	30 32       	jn	$-926    	;abs 0xfd32
      d2:	30 30       	jn	$+98     	;abs 0x134
      d4:	30 30       	jn	$+98     	;abs 0x136
      d6:	30 30       	jn	$+98     	;abs 0x138
      d8:	30 30       	jn	$+98     	;abs 0x13a
      da:	30 30       	jn	$+98     	;abs 0x13c
      dc:	3b 30       	jn	$+120    	;abs 0x154
      de:	30 31       	jn	$+610    	;abs 0x340
      e0:	37 37       	jge	$-400    	;abs 0xff50
      e2:	37 37       	jge	$-400    	;abs 0xff52
      e4:	37 37       	jge	$-400    	;abs 0xff54
      e6:	37 37       	jge	$-400    	;abs 0xff56
      e8:	37 37       	jge	$-400    	;abs 0xff58
      ea:	3b 00 75 6e 	mova	0x6e75,	r11	;PC rel. 0x06f61
      ee:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
      f0:	67 6e       	addc.b	@r14,	r7	
      f2:	65 64       	addc.b	@r4,	r5	
      f4:	20 69       	addc	@r9,	r0	
      f6:	6e 74       	subc.b	@r4,	r14	
      f8:	3a 74       	subc	@r4+,	r10	
      fa:	28 30       	jn	$+82     	;abs 0x14c
      fc:	2c 34       	jge	$+90     	;abs 0x156
      fe:	29 3d       	jmp	$+596    	;abs 0x352
     100:	72 28       	jnc	$+230    	;abs 0x1e6
     102:	30 2c       	jc	$+98     	;abs 0x164
     104:	34 29       	jnc	$+618    	;abs 0x36e
     106:	3b 30       	jn	$+120    	;abs 0x17e
     108:	30 30       	jn	$+98     	;abs 0x16a
     10a:	30 30       	jn	$+98     	;abs 0x16c
     10c:	30 30       	jn	$+98     	;abs 0x16e
     10e:	30 30       	jn	$+98     	;abs 0x170
     110:	30 30       	jn	$+98     	;abs 0x172
     112:	30 30       	jn	$+98     	;abs 0x174
     114:	3b 30       	jn	$+120    	;abs 0x18c
     116:	30 30       	jn	$+98     	;abs 0x178
     118:	30 30       	jn	$+98     	;abs 0x17a
     11a:	30 30       	jn	$+98     	;abs 0x17c
     11c:	31 37       	jge	$-412    	;abs 0xff80
     11e:	37 37       	jge	$-400    	;abs 0xff8e
     120:	37 37       	jge	$-400    	;abs 0xff90
     122:	3b 00 6c 6f 	mova	0x6f6c,	r11	;PC rel. 0x07090
     126:	6e 67       	addc.b	@r7,	r14	
     128:	20 75       	subc	@r5,	r0	
     12a:	6e 73       	subc.b	#2,	r14	;r3 As==10
     12c:	69 67       	addc.b	@r7,	r9	
     12e:	6e 65       	addc.b	@r5,	r14	
     130:	64 20       	jnz	$+202    	;abs 0x1fa
     132:	69 6e       	addc.b	@r14,	r9	
     134:	74 3a       	jl	$-790    	;abs 0xfe1e
     136:	74 28       	jnc	$+234    	;abs 0x220
     138:	30 2c       	jc	$+98     	;abs 0x19a
     13a:	35 29       	jnc	$+620    	;abs 0x3a6
     13c:	3d 40 73 33 	mov	#13171,	r13	;#0x3373
     140:	32 3b       	jl	$-410    	;abs 0xffa6
     142:	72 28       	jnc	$+230    	;abs 0x228
     144:	30 2c       	jc	$+98     	;abs 0x1a6
     146:	35 29       	jnc	$+620    	;abs 0x3b2
     148:	3b 30       	jn	$+120    	;abs 0x1c0
     14a:	30 30       	jn	$+98     	;abs 0x1ac
     14c:	30 30       	jn	$+98     	;abs 0x1ae
     14e:	30 30       	jn	$+98     	;abs 0x1b0
     150:	30 30       	jn	$+98     	;abs 0x1b2
     152:	30 30       	jn	$+98     	;abs 0x1b4
     154:	30 30       	jn	$+98     	;abs 0x1b6
     156:	3b 30       	jn	$+120    	;abs 0x1ce
     158:	30 33       	jn	$-414    	;abs 0xffba
     15a:	37 37       	jge	$-400    	;abs 0xffca
     15c:	37 37       	jge	$-400    	;abs 0xffcc
     15e:	37 37       	jge	$-400    	;abs 0xffce
     160:	37 37       	jge	$-400    	;abs 0xffd0
     162:	37 37       	jge	$-400    	;abs 0xffd2
     164:	3b 00 6c 6f 	mova	0x6f6c,	r11	;PC rel. 0x070d2
     168:	6e 67       	addc.b	@r7,	r14	
     16a:	20 6c       	addc	@r12,	r0	
     16c:	6f 6e       	addc.b	@r14,	r15	
     16e:	67 20       	jnz	$+208    	;abs 0x23e
     170:	69 6e       	addc.b	@r14,	r9	
     172:	74 3a       	jl	$-790    	;abs 0xfe5c
     174:	74 28       	jnc	$+234    	;abs 0x25e
     176:	30 2c       	jc	$+98     	;abs 0x1d8
     178:	36 29       	jnc	$+622    	;abs 0x3e6
     17a:	3d 40 73 36 	mov	#13939,	r13	;#0x3673
     17e:	34 3b       	jl	$-406    	;abs 0xffe8
     180:	72 28       	jnc	$+230    	;abs 0x266
     182:	30 2c       	jc	$+98     	;abs 0x1e4
     184:	36 29       	jnc	$+622    	;abs 0x3f2
     186:	3b 30       	jn	$+120    	;abs 0x1fe
     188:	31 30       	jn	$+100    	;abs 0x1ec
     18a:	30 30       	jn	$+98     	;abs 0x1ec
     18c:	30 30       	jn	$+98     	;abs 0x1ee
     18e:	30 30       	jn	$+98     	;abs 0x1f0
     190:	30 30       	jn	$+98     	;abs 0x1f2
     192:	30 30       	jn	$+98     	;abs 0x1f4
     194:	30 30       	jn	$+98     	;abs 0x1f6
     196:	30 30       	jn	$+98     	;abs 0x1f8
     198:	30 30       	jn	$+98     	;abs 0x1fa
     19a:	30 30       	jn	$+98     	;abs 0x1fc
     19c:	30 30       	jn	$+98     	;abs 0x1fe
     19e:	3b 30       	jn	$+120    	;abs 0x216
     1a0:	37 37       	jge	$-400    	;abs 0x10
     1a2:	37 37       	jge	$-400    	;abs 0x12
     1a4:	37 37       	jge	$-400    	;abs 0x14
     1a6:	37 37       	jge	$-400    	;abs 0x16
     1a8:	37 37       	jge	$-400    	;abs 0x18
     1aa:	37 37       	jge	$-400    	;abs 0x1a
     1ac:	37 37       	jge	$-400    	;abs 0x1c
     1ae:	37 37       	jge	$-400    	;abs 0x1e
     1b0:	37 37       	jge	$-400    	;abs 0x20
     1b2:	37 37       	jge	$-400    	;abs 0x22
     1b4:	37 3b       	jl	$-400    	;abs 0x24
     1b6:	00 6c       	addc	r12,	r0	
     1b8:	6f 6e       	addc.b	@r14,	r15	
     1ba:	67 20       	jnz	$+208    	;abs 0x28a
     1bc:	6c 6f       	addc.b	@r15,	r12	
     1be:	6e 67       	addc.b	@r7,	r14	
     1c0:	20 75       	subc	@r5,	r0	
     1c2:	6e 73       	subc.b	#2,	r14	;r3 As==10
     1c4:	69 67       	addc.b	@r7,	r9	
     1c6:	6e 65       	addc.b	@r5,	r14	
     1c8:	64 20       	jnz	$+202    	;abs 0x292
     1ca:	69 6e       	addc.b	@r14,	r9	
     1cc:	74 3a       	jl	$-790    	;abs 0xfeb6
     1ce:	74 28       	jnc	$+234    	;abs 0x2b8
     1d0:	30 2c       	jc	$+98     	;abs 0x232
     1d2:	37 29       	jnc	$+624    	;abs 0x442
     1d4:	3d 40 73 36 	mov	#13939,	r13	;#0x3673
     1d8:	34 3b       	jl	$-406    	;abs 0x42
     1da:	72 28       	jnc	$+230    	;abs 0x2c0
     1dc:	30 2c       	jc	$+98     	;abs 0x23e
     1de:	37 29       	jnc	$+624    	;abs 0x44e
     1e0:	3b 30       	jn	$+120    	;abs 0x258
     1e2:	30 30       	jn	$+98     	;abs 0x244
     1e4:	30 30       	jn	$+98     	;abs 0x246
     1e6:	30 30       	jn	$+98     	;abs 0x248
     1e8:	30 30       	jn	$+98     	;abs 0x24a
     1ea:	30 30       	jn	$+98     	;abs 0x24c
     1ec:	30 30       	jn	$+98     	;abs 0x24e
     1ee:	3b 30       	jn	$+120    	;abs 0x266
     1f0:	31 37       	jge	$-412    	;abs 0x54
     1f2:	37 37       	jge	$-400    	;abs 0x62
     1f4:	37 37       	jge	$-400    	;abs 0x64
     1f6:	37 37       	jge	$-400    	;abs 0x66
     1f8:	37 37       	jge	$-400    	;abs 0x68
     1fa:	37 37       	jge	$-400    	;abs 0x6a
     1fc:	37 37       	jge	$-400    	;abs 0x6c
     1fe:	37 37       	jge	$-400    	;abs 0x6e
     200:	37 37       	jge	$-400    	;abs 0x70
     202:	37 37       	jge	$-400    	;abs 0x72
     204:	37 37       	jge	$-400    	;abs 0x74
     206:	3b 00 73 68 	mova	0x6873,	r11	;PC rel. 0x06a7b
     20a:	6f 72       	subc.b	#4,	r15	;r2 As==10
     20c:	74 20       	jnz	$+234    	;abs 0x2f6
     20e:	69 6e       	addc.b	@r14,	r9	
     210:	74 3a       	jl	$-790    	;abs 0xfefa
     212:	74 28       	jnc	$+234    	;abs 0x2fc
     214:	30 2c       	jc	$+98     	;abs 0x276
     216:	38 29       	jnc	$+626    	;abs 0x488
     218:	3d 72       	subc	#8,	r13	;r2 As==11
     21a:	28 30       	jn	$+82     	;abs 0x26c
     21c:	2c 38       	jl	$+90     	;abs 0x276
     21e:	29 3b       	jl	$-428    	;abs 0x72
     220:	2d 33       	jn	$-420    	;abs 0x7c
     222:	32 37       	jge	$-410    	;abs 0x88
     224:	36 38       	jl	$+110    	;abs 0x292
     226:	3b 33       	jn	$-392    	;abs 0x9e
     228:	32 37       	jge	$-410    	;abs 0x8e
     22a:	36 37       	jge	$-402    	;abs 0x98
     22c:	3b 00 73 68 	mova	0x6873,	r11	;PC rel. 0x06aa1
     230:	6f 72       	subc.b	#4,	r15	;r2 As==10
     232:	74 20       	jnz	$+234    	;abs 0x31c
     234:	75 6e       	addc.b	@r14+,	r5	
     236:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
     238:	67 6e       	addc.b	@r14,	r7	
     23a:	65 64       	addc.b	@r4,	r5	
     23c:	20 69       	addc	@r9,	r0	
     23e:	6e 74       	subc.b	@r4,	r14	
     240:	3a 74       	subc	@r4+,	r10	
     242:	28 30       	jn	$+82     	;abs 0x294
     244:	2c 39       	jl	$+602    	;abs 0x49e
     246:	29 3d       	jmp	$+596    	;abs 0x49a
     248:	72 28       	jnc	$+230    	;abs 0x32e
     24a:	30 2c       	jc	$+98     	;abs 0x2ac
     24c:	39 29       	jnc	$+628    	;abs 0x4c0
     24e:	3b 30       	jn	$+120    	;abs 0x2c6
     250:	30 30       	jn	$+98     	;abs 0x2b2
     252:	30 30       	jn	$+98     	;abs 0x2b4
     254:	30 30       	jn	$+98     	;abs 0x2b6
     256:	30 30       	jn	$+98     	;abs 0x2b8
     258:	30 30       	jn	$+98     	;abs 0x2ba
     25a:	30 30       	jn	$+98     	;abs 0x2bc
     25c:	3b 30       	jn	$+120    	;abs 0x2d4
     25e:	30 30       	jn	$+98     	;abs 0x2c0
     260:	30 30       	jn	$+98     	;abs 0x2c2
     262:	30 30       	jn	$+98     	;abs 0x2c4
     264:	31 37       	jge	$-412    	;abs 0xc8
     266:	37 37       	jge	$-400    	;abs 0xd6
     268:	37 37       	jge	$-400    	;abs 0xd8
     26a:	3b 00 73 69 	mova	0x6973,	r11	;PC rel. 0x06bdf
     26e:	67 6e       	addc.b	@r14,	r7	
     270:	65 64       	addc.b	@r4,	r5	
     272:	20 63       	addc	#2,	r0	;r3 As==10
     274:	68 61       	addc.b	@r1,	r8	
     276:	72 3a       	jl	$-794    	;abs 0xff5c
     278:	74 28       	jnc	$+234    	;abs 0x362
     27a:	30 2c       	jc	$+98     	;abs 0x2dc
     27c:	31 30       	jn	$+100    	;abs 0x2e0
     27e:	29 3d       	jmp	$+596    	;abs 0x4d2
     280:	40 73       	sbc.b	r0		
     282:	38 3b       	jl	$-398    	;abs 0xf4
     284:	72 28       	jnc	$+230    	;abs 0x36a
     286:	30 2c       	jc	$+98     	;abs 0x2e8
     288:	31 30       	jn	$+100    	;abs 0x2ec
     28a:	29 3b       	jl	$-428    	;abs 0xde
     28c:	2d 31       	jn	$+604    	;abs 0x4e8
     28e:	32 38       	jl	$+102    	;abs 0x2f4
     290:	3b 31       	jn	$+632    	;abs 0x508
     292:	32 37       	jge	$-410    	;abs 0xf8
     294:	3b 00 75 6e 	mova	0x6e75,	r11	;PC rel. 0x0710b
     298:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
     29a:	67 6e       	addc.b	@r14,	r7	
     29c:	65 64       	addc.b	@r4,	r5	
     29e:	20 63       	addc	#2,	r0	;r3 As==10
     2a0:	68 61       	addc.b	@r1,	r8	
     2a2:	72 3a       	jl	$-794    	;abs 0xff88
     2a4:	74 28       	jnc	$+234    	;abs 0x38e
     2a6:	30 2c       	jc	$+98     	;abs 0x308
     2a8:	31 31       	jn	$+612    	;abs 0x50c
     2aa:	29 3d       	jmp	$+596    	;abs 0x4fe
     2ac:	40 73       	sbc.b	r0		
     2ae:	38 3b       	jl	$-398    	;abs 0x120
     2b0:	72 28       	jnc	$+230    	;abs 0x396
     2b2:	30 2c       	jc	$+98     	;abs 0x314
     2b4:	31 31       	jn	$+612    	;abs 0x518
     2b6:	29 3b       	jl	$-428    	;abs 0x10a
     2b8:	30 3b       	jl	$-414    	;abs 0x11a
     2ba:	32 35       	jge	$+614    	;abs 0x520
     2bc:	35 3b       	jl	$-404    	;abs 0x128
     2be:	00 66       	addc	r6,	r0	
     2c0:	6c 6f       	addc.b	@r15,	r12	
     2c2:	61 74       	subc.b	@r4,	r1	
     2c4:	3a 74       	subc	@r4+,	r10	
     2c6:	28 30       	jn	$+82     	;abs 0x318
     2c8:	2c 31       	jn	$+602    	;abs 0x522
     2ca:	32 29       	jnc	$+614    	;abs 0x530
     2cc:	3d 72       	subc	#8,	r13	;r2 As==11
     2ce:	28 30       	jn	$+82     	;abs 0x320
     2d0:	2c 31       	jn	$+602    	;abs 0x52a
     2d2:	29 3b       	jl	$-428    	;abs 0x126
     2d4:	34 3b       	jl	$-406    	;abs 0x13e
     2d6:	30 3b       	jl	$-414    	;abs 0x138
     2d8:	00 64       	addc	r4,	r0	
     2da:	6f 75       	subc.b	@r5,	r15	
     2dc:	62 6c       	addc.b	@r12,	r2	
     2de:	65 3a       	jl	$-820    	;abs 0xffaa
     2e0:	74 28       	jnc	$+234    	;abs 0x3ca
     2e2:	30 2c       	jc	$+98     	;abs 0x344
     2e4:	31 33       	jn	$-412    	;abs 0x148
     2e6:	29 3d       	jmp	$+596    	;abs 0x53a
     2e8:	72 28       	jnc	$+230    	;abs 0x3ce
     2ea:	30 2c       	jc	$+98     	;abs 0x34c
     2ec:	31 29       	jnc	$+612    	;abs 0x550
     2ee:	3b 34       	jge	$+120    	;abs 0x366
     2f0:	3b 30       	jn	$+120    	;abs 0x368
     2f2:	3b 00 6c 6f 	mova	0x6f6c,	r11	;PC rel. 0x07260
     2f6:	6e 67       	addc.b	@r7,	r14	
     2f8:	20 64       	addc	@r4,	r0	
     2fa:	6f 75       	subc.b	@r5,	r15	
     2fc:	62 6c       	addc.b	@r12,	r2	
     2fe:	65 3a       	jl	$-820    	;abs 0xffca
     300:	74 28       	jnc	$+234    	;abs 0x3ea
     302:	30 2c       	jc	$+98     	;abs 0x364
     304:	31 34       	jge	$+100    	;abs 0x368
     306:	29 3d       	jmp	$+596    	;abs 0x55a
     308:	72 28       	jnc	$+230    	;abs 0x3ee
     30a:	30 2c       	jc	$+98     	;abs 0x36c
     30c:	31 29       	jnc	$+612    	;abs 0x570
     30e:	3b 34       	jge	$+120    	;abs 0x386
     310:	3b 30       	jn	$+120    	;abs 0x388
     312:	3b 00 63 6f 	mova	0x6f63,	r11	;PC rel. 0x07277
     316:	6d 70       	subc.b	@r0,	r13	
     318:	6c 65       	addc.b	@r5,	r12	
     31a:	78 20       	jnz	$+242    	;abs 0x40c
     31c:	69 6e       	addc.b	@r14,	r9	
     31e:	74 3a       	jl	$-790    	;abs 0x8
     320:	74 28       	jnc	$+234    	;abs 0x40a
     322:	30 2c       	jc	$+98     	;abs 0x384
     324:	31 35       	jge	$+612    	;abs 0x588
     326:	29 3d       	jmp	$+596    	;abs 0x57a
     328:	73 34       	jge	$+232    	;abs 0x410
     32a:	72 65       	addc.b	@r5+,	r2	
     32c:	61 6c       	addc.b	@r12,	r1	
     32e:	3a 28       	jnc	$+118    	;abs 0x3a4
     330:	30 2c       	jc	$+98     	;abs 0x392
     332:	31 29       	jnc	$+612    	;abs 0x596
     334:	2c 30       	jn	$+90     	;abs 0x38e
     336:	2c 31       	jn	$+602    	;abs 0x590
     338:	36 3b       	jl	$-402    	;abs 0x1a6
     33a:	69 6d       	addc.b	@r13,	r9	
     33c:	61 67       	addc.b	@r7,	r1	
     33e:	3a 28       	jnc	$+118    	;abs 0x3b4
     340:	30 2c       	jc	$+98     	;abs 0x3a2
     342:	31 29       	jnc	$+612    	;abs 0x5a6
     344:	2c 31       	jn	$+602    	;abs 0x59e
     346:	36 2c       	jc	$+110    	;abs 0x3b4
     348:	31 36       	jge	$-924    	;abs 0xffac
     34a:	3b 3b       	jl	$-392    	;abs 0x1c2
     34c:	00 63       	adc	r0		
     34e:	6f 6d       	addc.b	@r13,	r15	
     350:	70 6c       	addc.b	@r12+,	r0	
     352:	65 78       	subc.b	@r8,	r5	
     354:	20 66       	addc	@r6,	r0	
     356:	6c 6f       	addc.b	@r15,	r12	
     358:	61 74       	subc.b	@r4,	r1	
     35a:	3a 74       	subc	@r4+,	r10	
     35c:	28 30       	jn	$+82     	;abs 0x3ae
     35e:	2c 31       	jn	$+602    	;abs 0x5b8
     360:	36 29       	jnc	$+622    	;abs 0x5ce
     362:	3d 52       	add	#8,	r13	;r2 As==11
     364:	33 3b       	jl	$-408    	;abs 0x1cc
     366:	38 3b       	jl	$-398    	;abs 0x1d8
     368:	30 3b       	jl	$-414    	;abs 0x1ca
     36a:	00 63       	adc	r0		
     36c:	6f 6d       	addc.b	@r13,	r15	
     36e:	70 6c       	addc.b	@r12+,	r0	
     370:	65 78       	subc.b	@r8,	r5	
     372:	20 64       	addc	@r4,	r0	
     374:	6f 75       	subc.b	@r5,	r15	
     376:	62 6c       	addc.b	@r12,	r2	
     378:	65 3a       	jl	$-820    	;abs 0x44
     37a:	74 28       	jnc	$+234    	;abs 0x464
     37c:	30 2c       	jc	$+98     	;abs 0x3de
     37e:	31 37       	jge	$-412    	;abs 0x1e2
     380:	29 3d       	jmp	$+596    	;abs 0x5d4
     382:	52 33       	jn	$-346    	;abs 0x228
     384:	3b 38       	jl	$+120    	;abs 0x3fc
     386:	3b 30       	jn	$+120    	;abs 0x3fe
     388:	3b 00 63 6f 	mova	0x6f63,	r11	;PC rel. 0x072ed
     38c:	6d 70       	subc.b	@r0,	r13	
     38e:	6c 65       	addc.b	@r5,	r12	
     390:	78 20       	jnz	$+242    	;abs 0x482
     392:	6c 6f       	addc.b	@r15,	r12	
     394:	6e 67       	addc.b	@r7,	r14	
     396:	20 64       	addc	@r4,	r0	
     398:	6f 75       	subc.b	@r5,	r15	
     39a:	62 6c       	addc.b	@r12,	r2	
     39c:	65 3a       	jl	$-820    	;abs 0x68
     39e:	74 28       	jnc	$+234    	;abs 0x488
     3a0:	30 2c       	jc	$+98     	;abs 0x402
     3a2:	31 38       	jl	$+100    	;abs 0x406
     3a4:	29 3d       	jmp	$+596    	;abs 0x5f8
     3a6:	52 33       	jn	$-346    	;abs 0x24c
     3a8:	3b 38       	jl	$+120    	;abs 0x420
     3aa:	3b 30       	jn	$+120    	;abs 0x422
     3ac:	3b 00 5f 5f 	mova	0x5f5f,	r11	;PC rel. 0x0630d
     3b0:	62 75       	subc.b	@r5,	r2	
     3b2:	69 6c       	addc.b	@r12,	r9	
     3b4:	74 69       	addc.b	@r9+,	r4	
     3b6:	6e 5f       	add.b	@r15,	r14	
     3b8:	76 61       	addc.b	@r1+,	r6	
     3ba:	5f 6c 69 73 	addc.b	29545(r12),r15	;0x7369(r12)
     3be:	74 3a       	jl	$-790    	;abs 0xa8
     3c0:	74 28       	jnc	$+234    	;abs 0x4aa
     3c2:	30 2c       	jc	$+98     	;abs 0x424
     3c4:	31 39       	jl	$+612    	;abs 0x628
     3c6:	29 3d       	jmp	$+596    	;abs 0x61a
     3c8:	2a 28       	jnc	$+86     	;abs 0x41e
     3ca:	30 2c       	jc	$+98     	;abs 0x42c
     3cc:	32 30       	jn	$+102    	;abs 0x432
     3ce:	29 3d       	jmp	$+596    	;abs 0x622
     3d0:	28 30       	jn	$+82     	;abs 0x422
     3d2:	2c 32       	jn	$-934    	;abs 0x2c
     3d4:	30 29       	jnc	$+610    	;abs 0x636
     3d6:	00 5f       	add	r15,	r0	
     3d8:	42 6f       	addc.b	r15,	r2	
     3da:	6f 6c       	addc.b	@r12,	r15	
     3dc:	3a 74       	subc	@r4+,	r10	
     3de:	28 30       	jn	$+82     	;abs 0x430
     3e0:	2c 32       	jn	$-934    	;abs 0x3a
     3e2:	31 29       	jnc	$+612    	;abs 0x646
     3e4:	3d 40 73 38 	mov	#14451,	r13	;#0x3873
     3e8:	3b 2d       	jc	$+632    	;abs 0x660
     3ea:	31 36       	jge	$-924    	;abs 0x4e
     3ec:	3b 00 63 3a 	mova	0x3a63,	r11	;PC rel. 0x03e51
     3f0:	2f 6d       	addc	@r13,	r15	
     3f2:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     3f4:	67 63       	addc.b	#2,	r7	;r3 As==10
     3f6:	63 2f       	jc	$-312    	;abs 0x2be
     3f8:	6d 73       	subc.b	#2,	r13	;r3 As==10
     3fa:	70 34       	jge	$+226    	;abs 0x4dc
     3fc:	33 30       	jn	$+104    	;abs 0x464
     3fe:	2f 69       	addc	@r9,	r15	
     400:	6e 63       	addc.b	#2,	r14	;r3 As==10
     402:	6c 75       	subc.b	@r5,	r12	
     404:	64 65       	addc.b	@r5,	r4	
     406:	2f 73       	subc	#2,	r15	;r3 As==10
     408:	74 64       	addc.b	@r4+,	r4	
     40a:	69 6f       	addc.b	@r15,	r9	
     40c:	2e 68       	addc	@r8,	r14	
     40e:	00 63       	adc	r0		
     410:	3a 2f       	jc	$-394    	;abs 0x286
     412:	6d 73       	subc.b	#2,	r13	;r3 As==10
     414:	70 67       	addc.b	@r7+,	r0	
     416:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     418:	2f 6c       	addc	@r12,	r15	
     41a:	69 62       	addc.b	#4,	r9	;r2 As==10
     41c:	2f 67       	addc	@r7,	r15	
     41e:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     420:	2d 6c       	addc	@r12,	r13	
     422:	69 62       	addc.b	#4,	r9	;r2 As==10
     424:	2f 6d       	addc	@r13,	r15	
     426:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     428:	34 33       	jn	$-406    	;abs 0x292
     42a:	30 2f       	jc	$-414    	;abs 0x28c
     42c:	33 2e       	jc	$-920    	;abs 0x94
     42e:	32 2e       	jc	$-922    	;abs 0x94
     430:	33 2f       	jc	$-408    	;abs 0x298
     432:	69 6e       	addc.b	@r14,	r9	
     434:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     436:	75 64       	addc.b	@r4+,	r5	
     438:	65 2f       	jc	$-308    	;abs 0x304
     43a:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
     43c:	64 64       	addc.b	@r4,	r4	
     43e:	65 66       	addc.b	@r6,	r5	
     440:	2e 68       	addc	@r8,	r14	
     442:	00 70       	subc	r0,	r0	
     444:	74 72       	subc.b	#8,	r4	;r2 As==11
     446:	64 69       	addc.b	@r9,	r4	
     448:	66 66       	addc.b	@r6,	r6	
     44a:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     44e:	28 33       	jn	$-430    	;abs 0x2a0
     450:	2c 31       	jn	$+602    	;abs 0x6aa
     452:	29 3d       	jmp	$+596    	;abs 0x6a6
     454:	28 30       	jn	$+82     	;abs 0x4a6
     456:	2c 31       	jn	$+602    	;abs 0x6b0
     458:	29 00 73 69 	mova	&0x06973,r9	
     45c:	7a 65       	addc.b	@r5+,	r10	
     45e:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     462:	28 33       	jn	$-430    	;abs 0x2b4
     464:	2c 32       	jn	$-934    	;abs 0xbe
     466:	29 3d       	jmp	$+596    	;abs 0x6ba
     468:	28 30       	jn	$+82     	;abs 0x4ba
     46a:	2c 34       	jge	$+90     	;abs 0x4c4
     46c:	29 00 77 63 	mova	&0x06377,r9	
     470:	68 61       	addc.b	@r1,	r8	
     472:	72 5f       	add.b	@r15+,	r2	
     474:	74 3a       	jl	$-790    	;abs 0x15e
     476:	74 28       	jnc	$+234    	;abs 0x560
     478:	33 2c       	jc	$+104    	;abs 0x4e0
     47a:	33 29       	jnc	$+616    	;abs 0x6e2
     47c:	3d 28       	jnc	$+124    	;abs 0x4f8
     47e:	30 2c       	jc	$+98     	;abs 0x4e0
     480:	31 29       	jnc	$+612    	;abs 0x6e4
     482:	00 63       	adc	r0		
     484:	3a 2f       	jc	$-394    	;abs 0x2fa
     486:	6d 73       	subc.b	#2,	r13	;r3 As==10
     488:	70 67       	addc.b	@r7+,	r0	
     48a:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     48c:	2f 6d       	addc	@r13,	r15	
     48e:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     490:	34 33       	jn	$-406    	;abs 0x2fa
     492:	30 2f       	jc	$-414    	;abs 0x2f4
     494:	69 6e       	addc.b	@r14,	r9	
     496:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     498:	75 64       	addc.b	@r4+,	r5	
     49a:	65 2f       	jc	$-308    	;abs 0x366
     49c:	73 79       	.word	0x7973;	????	Illegal as 2-op instr
     49e:	73 2f       	jc	$-280    	;abs 0x386
     4a0:	74 79       	subc.b	@r9+,	r4	
     4a2:	70 65       	addc.b	@r5+,	r0	
     4a4:	73 2e       	jc	$-792    	;abs 0x18c
     4a6:	68 00 63 3a 	mova	r0,	&0x83a63
     4aa:	2f 6d       	addc	@r13,	r15	
     4ac:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     4ae:	67 63       	addc.b	#2,	r7	;r3 As==10
     4b0:	63 2f       	jc	$-312    	;abs 0x378
     4b2:	6d 73       	subc.b	#2,	r13	;r3 As==10
     4b4:	70 34       	jge	$+226    	;abs 0x596
     4b6:	33 30       	jn	$+104    	;abs 0x51e
     4b8:	2f 69       	addc	@r9,	r15	
     4ba:	6e 63       	addc.b	#2,	r14	;r3 As==10
     4bc:	6c 75       	subc.b	@r5,	r12	
     4be:	64 65       	addc.b	@r5,	r4	
     4c0:	2f 73       	subc	#2,	r15	;r3 As==10
     4c2:	79 73       	subc.b	#-1,	r9	;r3 As==11
     4c4:	2f 63       	addc	#2,	r15	;r3 As==10
     4c6:	64 65       	addc.b	@r5,	r4	
     4c8:	66 73       	subc.b	#2,	r6	;r3 As==10
     4ca:	2e 68       	addc	@r8,	r14	
     4cc:	00 63       	adc	r0		
     4ce:	3a 2f       	jc	$-394    	;abs 0x344
     4d0:	6d 73       	subc.b	#2,	r13	;r3 As==10
     4d2:	70 67       	addc.b	@r7+,	r0	
     4d4:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     4d6:	2f 6d       	addc	@r13,	r15	
     4d8:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     4da:	34 33       	jn	$-406    	;abs 0x344
     4dc:	30 2f       	jc	$-414    	;abs 0x33e
     4de:	69 6e       	addc.b	@r14,	r9	
     4e0:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     4e2:	75 64       	addc.b	@r4+,	r5	
     4e4:	65 2f       	jc	$-308    	;abs 0x3b0
     4e6:	73 79       	.word	0x7973;	????	Illegal as 2-op instr
     4e8:	73 2f       	jc	$-280    	;abs 0x3d0
     4ea:	69 6e       	addc.b	@r14,	r9	
     4ec:	74 74       	subc.b	@r4+,	r4	
     4ee:	79 70 65 73 	subc.b	#29541,	r9	;#0x7365
     4f2:	2e 68       	addc	@r8,	r14	
     4f4:	00 69       	addc	r9,	r0	
     4f6:	6e 74       	subc.b	@r4,	r14	
     4f8:	38 5f       	add	@r15+,	r8	
     4fa:	74 3a       	jl	$-790    	;abs 0x1e4
     4fc:	74 28       	jnc	$+234    	;abs 0x5e6
     4fe:	36 2c       	jc	$+110    	;abs 0x56c
     500:	31 29       	jnc	$+612    	;abs 0x764
     502:	3d 28       	jnc	$+124    	;abs 0x57e
     504:	30 2c       	jc	$+98     	;abs 0x566
     506:	31 30       	jn	$+100    	;abs 0x56a
     508:	29 00 75 69 	mova	&0x06975,r9	
     50c:	6e 74       	subc.b	@r4,	r14	
     50e:	38 5f       	add	@r15+,	r8	
     510:	74 3a       	jl	$-790    	;abs 0x1fa
     512:	74 28       	jnc	$+234    	;abs 0x5fc
     514:	36 2c       	jc	$+110    	;abs 0x582
     516:	32 29       	jnc	$+614    	;abs 0x77c
     518:	3d 28       	jnc	$+124    	;abs 0x594
     51a:	30 2c       	jc	$+98     	;abs 0x57c
     51c:	31 31       	jn	$+612    	;abs 0x780
     51e:	29 00 69 6e 	mova	&0x06e69,r9	
     522:	74 31       	jn	$+746    	;abs 0x80c
     524:	36 5f       	add	@r15+,	r6	
     526:	74 3a       	jl	$-790    	;abs 0x210
     528:	74 28       	jnc	$+234    	;abs 0x612
     52a:	36 2c       	jc	$+110    	;abs 0x598
     52c:	33 29       	jnc	$+616    	;abs 0x794
     52e:	3d 28       	jnc	$+124    	;abs 0x5aa
     530:	30 2c       	jc	$+98     	;abs 0x592
     532:	31 29       	jnc	$+612    	;abs 0x796
     534:	00 75       	subc	r5,	r0	
     536:	69 6e       	addc.b	@r14,	r9	
     538:	74 31       	jn	$+746    	;abs 0x822
     53a:	36 5f       	add	@r15+,	r6	
     53c:	74 3a       	jl	$-790    	;abs 0x226
     53e:	74 28       	jnc	$+234    	;abs 0x628
     540:	36 2c       	jc	$+110    	;abs 0x5ae
     542:	34 29       	jnc	$+618    	;abs 0x7ac
     544:	3d 28       	jnc	$+124    	;abs 0x5c0
     546:	30 2c       	jc	$+98     	;abs 0x5a8
     548:	34 29       	jnc	$+618    	;abs 0x7b2
     54a:	00 69       	addc	r9,	r0	
     54c:	6e 74       	subc.b	@r4,	r14	
     54e:	33 32       	jn	$-920    	;abs 0x1b6
     550:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     554:	28 36       	jge	$-942    	;abs 0x1a6
     556:	2c 35       	jge	$+602    	;abs 0x7b0
     558:	29 3d       	jmp	$+596    	;abs 0x7ac
     55a:	28 30       	jn	$+82     	;abs 0x5ac
     55c:	2c 33       	jn	$-422    	;abs 0x3b6
     55e:	29 00 75 69 	mova	&0x06975,r9	
     562:	6e 74       	subc.b	@r4,	r14	
     564:	33 32       	jn	$-920    	;abs 0x1cc
     566:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     56a:	28 36       	jge	$-942    	;abs 0x1bc
     56c:	2c 36       	jge	$-934    	;abs 0x1c6
     56e:	29 3d       	jmp	$+596    	;abs 0x7c2
     570:	28 30       	jn	$+82     	;abs 0x5c2
     572:	2c 35       	jge	$+602    	;abs 0x7cc
     574:	29 00 69 6e 	mova	&0x06e69,r9	
     578:	74 36       	jge	$-790    	;abs 0x262
     57a:	34 5f       	add	@r15+,	r4	
     57c:	74 3a       	jl	$-790    	;abs 0x266
     57e:	74 28       	jnc	$+234    	;abs 0x668
     580:	36 2c       	jc	$+110    	;abs 0x5ee
     582:	37 29       	jnc	$+624    	;abs 0x7f2
     584:	3d 28       	jnc	$+124    	;abs 0x600
     586:	30 2c       	jc	$+98     	;abs 0x5e8
     588:	36 29       	jnc	$+622    	;abs 0x7f6
     58a:	00 75       	subc	r5,	r0	
     58c:	69 6e       	addc.b	@r14,	r9	
     58e:	74 36       	jge	$-790    	;abs 0x278
     590:	34 5f       	add	@r15+,	r4	
     592:	74 3a       	jl	$-790    	;abs 0x27c
     594:	74 28       	jnc	$+234    	;abs 0x67e
     596:	36 2c       	jc	$+110    	;abs 0x604
     598:	38 29       	jnc	$+626    	;abs 0x80a
     59a:	3d 28       	jnc	$+124    	;abs 0x616
     59c:	30 2c       	jc	$+98     	;abs 0x5fe
     59e:	37 29       	jnc	$+624    	;abs 0x80e
     5a0:	00 69       	addc	r9,	r0	
     5a2:	6e 74       	subc.b	@r4,	r14	
     5a4:	70 74       	subc.b	@r4+,	r0	
     5a6:	72 5f       	add.b	@r15+,	r2	
     5a8:	74 3a       	jl	$-790    	;abs 0x292
     5aa:	74 28       	jnc	$+234    	;abs 0x694
     5ac:	36 2c       	jc	$+110    	;abs 0x61a
     5ae:	39 29       	jnc	$+628    	;abs 0x822
     5b0:	3d 28       	jnc	$+124    	;abs 0x62c
     5b2:	36 2c       	jc	$+110    	;abs 0x620
     5b4:	33 29       	jnc	$+616    	;abs 0x81c
     5b6:	00 75       	subc	r5,	r0	
     5b8:	69 6e       	addc.b	@r14,	r9	
     5ba:	74 70 74 72 	subc.b	#29300,	r4	;#0x7274
     5be:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     5c2:	28 36       	jge	$-942    	;abs 0x214
     5c4:	2c 31       	jn	$+602    	;abs 0x81e
     5c6:	30 29       	jnc	$+610    	;abs 0x828
     5c8:	3d 28       	jnc	$+124    	;abs 0x644
     5ca:	36 2c       	jc	$+110    	;abs 0x638
     5cc:	34 29       	jnc	$+618    	;abs 0x836
     5ce:	00 75       	subc	r5,	r0	
     5d0:	5f 63       	addc.b	#1,	r15	;r3 As==01
     5d2:	68 61       	addc.b	@r1,	r8	
     5d4:	72 3a       	jl	$-794    	;abs 0x2ba
     5d6:	74 28       	jnc	$+234    	;abs 0x6c0
     5d8:	34 2c       	jc	$+106    	;abs 0x642
     5da:	31 29       	jnc	$+612    	;abs 0x83e
     5dc:	3d 28       	jnc	$+124    	;abs 0x658
     5de:	30 2c       	jc	$+98     	;abs 0x640
     5e0:	31 31       	jn	$+612    	;abs 0x844
     5e2:	29 00 75 5f 	mova	&0x05f75,r9	
     5e6:	73 68       	.word	0x6873;	????	Illegal as 2-op instr
     5e8:	6f 72       	subc.b	#4,	r15	;r2 As==10
     5ea:	74 3a       	jl	$-790    	;abs 0x2d4
     5ec:	74 28       	jnc	$+234    	;abs 0x6d6
     5ee:	34 2c       	jc	$+106    	;abs 0x658
     5f0:	32 29       	jnc	$+614    	;abs 0x856
     5f2:	3d 28       	jnc	$+124    	;abs 0x66e
     5f4:	30 2c       	jc	$+98     	;abs 0x656
     5f6:	39 29       	jnc	$+628    	;abs 0x86a
     5f8:	00 75       	subc	r5,	r0	
     5fa:	5f 69 6e 74 	addc.b	29806(r9),r15	;0x746e(r9)
     5fe:	3a 74       	subc	@r4+,	r10	
     600:	28 34       	jge	$+82     	;abs 0x652
     602:	2c 33       	jn	$-422    	;abs 0x45c
     604:	29 3d       	jmp	$+596    	;abs 0x858
     606:	28 30       	jn	$+82     	;abs 0x658
     608:	2c 34       	jge	$+90     	;abs 0x662
     60a:	29 00 75 5f 	mova	&0x05f75,r9	
     60e:	6c 6f       	addc.b	@r15,	r12	
     610:	6e 67       	addc.b	@r7,	r14	
     612:	3a 74       	subc	@r4+,	r10	
     614:	28 34       	jge	$+82     	;abs 0x666
     616:	2c 34       	jge	$+90     	;abs 0x670
     618:	29 3d       	jmp	$+596    	;abs 0x86c
     61a:	28 30       	jn	$+82     	;abs 0x66c
     61c:	2c 35       	jge	$+602    	;abs 0x876
     61e:	29 00 75 73 	mova	&0x07375,r9	
     622:	68 6f       	addc.b	@r15,	r8	
     624:	72 74       	subc.b	@r4+,	r2	
     626:	3a 74       	subc	@r4+,	r10	
     628:	28 34       	jge	$+82     	;abs 0x67a
     62a:	2c 35       	jge	$+602    	;abs 0x884
     62c:	29 3d       	jmp	$+596    	;abs 0x880
     62e:	28 30       	jn	$+82     	;abs 0x680
     630:	2c 39       	jl	$+602    	;abs 0x88a
     632:	29 00 75 69 	mova	&0x06975,r9	
     636:	6e 74       	subc.b	@r4,	r14	
     638:	3a 74       	subc	@r4+,	r10	
     63a:	28 34       	jge	$+82     	;abs 0x68c
     63c:	2c 36       	jge	$-934    	;abs 0x296
     63e:	29 3d       	jmp	$+596    	;abs 0x892
     640:	28 30       	jn	$+82     	;abs 0x692
     642:	2c 34       	jge	$+90     	;abs 0x69c
     644:	29 00 75 5f 	mova	&0x05f75,r9	
     648:	69 6e       	addc.b	@r14,	r9	
     64a:	74 38       	jl	$+234    	;abs 0x734
     64c:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     650:	28 34       	jge	$+82     	;abs 0x6a2
     652:	2c 37       	jge	$-422    	;abs 0x4ac
     654:	29 3d       	jmp	$+596    	;abs 0x8a8
     656:	28 36       	jge	$-942    	;abs 0x2a8
     658:	2c 32       	jn	$-934    	;abs 0x2b2
     65a:	29 00 75 5f 	mova	&0x05f75,r9	
     65e:	69 6e       	addc.b	@r14,	r9	
     660:	74 31       	jn	$+746    	;abs 0x94a
     662:	36 5f       	add	@r15+,	r6	
     664:	74 3a       	jl	$-790    	;abs 0x34e
     666:	74 28       	jnc	$+234    	;abs 0x750
     668:	34 2c       	jc	$+106    	;abs 0x6d2
     66a:	38 29       	jnc	$+626    	;abs 0x8dc
     66c:	3d 28       	jnc	$+124    	;abs 0x6e8
     66e:	36 2c       	jc	$+110    	;abs 0x6dc
     670:	34 29       	jnc	$+618    	;abs 0x8da
     672:	00 75       	subc	r5,	r0	
     674:	5f 69 6e 74 	addc.b	29806(r9),r15	;0x746e(r9)
     678:	33 32       	jn	$-920    	;abs 0x2e0
     67a:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     67e:	28 34       	jge	$+82     	;abs 0x6d0
     680:	2c 39       	jl	$+602    	;abs 0x8da
     682:	29 3d       	jmp	$+596    	;abs 0x8d6
     684:	28 36       	jge	$-942    	;abs 0x2d6
     686:	2c 36       	jge	$-934    	;abs 0x2e0
     688:	29 00 75 5f 	mova	&0x05f75,r9	
     68c:	69 6e       	addc.b	@r14,	r9	
     68e:	74 36       	jge	$-790    	;abs 0x378
     690:	34 5f       	add	@r15+,	r4	
     692:	74 3a       	jl	$-790    	;abs 0x37c
     694:	74 28       	jnc	$+234    	;abs 0x77e
     696:	34 2c       	jc	$+106    	;abs 0x700
     698:	31 30       	jn	$+100    	;abs 0x6fc
     69a:	29 3d       	jmp	$+596    	;abs 0x8ee
     69c:	28 36       	jge	$-942    	;abs 0x2ee
     69e:	2c 38       	jl	$+90     	;abs 0x6f8
     6a0:	29 00 75 5f 	mova	&0x05f75,r9	
     6a4:	71 75       	subc.b	@r5+,	r1	
     6a6:	61 64       	addc.b	@r4,	r1	
     6a8:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     6ac:	28 34       	jge	$+82     	;abs 0x6fe
     6ae:	2c 31       	jn	$+602    	;abs 0x908
     6b0:	31 29       	jnc	$+612    	;abs 0x914
     6b2:	3d 28       	jnc	$+124    	;abs 0x72e
     6b4:	34 2c       	jc	$+106    	;abs 0x71e
     6b6:	31 30       	jn	$+100    	;abs 0x71a
     6b8:	29 00 71 75 	mova	&0x07571,r9	
     6bc:	61 64       	addc.b	@r4,	r1	
     6be:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     6c2:	28 34       	jge	$+82     	;abs 0x714
     6c4:	2c 31       	jn	$+602    	;abs 0x91e
     6c6:	32 29       	jnc	$+614    	;abs 0x92c
     6c8:	3d 28       	jnc	$+124    	;abs 0x744
     6ca:	36 2c       	jc	$+110    	;abs 0x738
     6cc:	37 29       	jnc	$+624    	;abs 0x93c
     6ce:	00 71       	subc	r1,	r0	
     6d0:	61 64       	addc.b	@r4,	r1	
     6d2:	64 72       	subc.b	#4,	r4	;r2 As==10
     6d4:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     6d8:	28 34       	jge	$+82     	;abs 0x72a
     6da:	2c 31       	jn	$+602    	;abs 0x934
     6dc:	33 29       	jnc	$+616    	;abs 0x944
     6de:	3d 28       	jnc	$+124    	;abs 0x75a
     6e0:	34 2c       	jc	$+106    	;abs 0x74a
     6e2:	31 34       	jge	$+100    	;abs 0x746
     6e4:	29 3d       	jmp	$+596    	;abs 0x938
     6e6:	2a 28       	jnc	$+86     	;abs 0x73c
     6e8:	34 2c       	jc	$+106    	;abs 0x752
     6ea:	31 32       	jn	$-924    	;abs 0x34e
     6ec:	29 00 63 61 	mova	&0x06163,r9	
     6f0:	64 64       	addc.b	@r4,	r4	
     6f2:	72 5f       	add.b	@r15+,	r2	
     6f4:	74 3a       	jl	$-790    	;abs 0x3de
     6f6:	74 28       	jnc	$+234    	;abs 0x7e0
     6f8:	34 2c       	jc	$+106    	;abs 0x762
     6fa:	31 35       	jge	$+612    	;abs 0x95e
     6fc:	29 3d       	jmp	$+596    	;abs 0x950
     6fe:	28 34       	jge	$+82     	;abs 0x750
     700:	2c 31       	jn	$+602    	;abs 0x95a
     702:	36 29       	jnc	$+622    	;abs 0x970
     704:	3d 2a       	jnc	$-900    	;abs 0x380
     706:	28 30       	jn	$+82     	;abs 0x758
     708:	2c 32       	jn	$-934    	;abs 0x362
     70a:	29 00 63 5f 	mova	&0x05f63,r9	
     70e:	63 61       	.word	0x6163;	????	Illegal as 2-op instr
     710:	64 64       	addc.b	@r4,	r4	
     712:	72 5f       	add.b	@r15+,	r2	
     714:	74 3a       	jl	$-790    	;abs 0x3fe
     716:	74 28       	jnc	$+234    	;abs 0x800
     718:	34 2c       	jc	$+106    	;abs 0x782
     71a:	31 37       	jge	$-412    	;abs 0x57e
     71c:	29 3d       	jmp	$+596    	;abs 0x970
     71e:	28 34       	jge	$+82     	;abs 0x770
     720:	2c 31       	jn	$+602    	;abs 0x97a
     722:	38 29       	jnc	$+626    	;abs 0x994
     724:	3d 2a       	jnc	$-900    	;abs 0x3a0
     726:	28 34       	jge	$+82     	;abs 0x778
     728:	2c 31       	jn	$+602    	;abs 0x982
     72a:	39 29       	jnc	$+628    	;abs 0x99e
     72c:	3d 6b       	addc	@r11+,	r13	
     72e:	28 30       	jn	$+82     	;abs 0x780
     730:	2c 32       	jn	$-934    	;abs 0x38a
     732:	29 00 76 5f 	mova	&0x05f76,r9	
     736:	63 61       	.word	0x6163;	????	Illegal as 2-op instr
     738:	64 64       	addc.b	@r4,	r4	
     73a:	72 5f       	add.b	@r15+,	r2	
     73c:	74 3a       	jl	$-790    	;abs 0x426
     73e:	74 28       	jnc	$+234    	;abs 0x828
     740:	34 2c       	jc	$+106    	;abs 0x7aa
     742:	32 30       	jn	$+102    	;abs 0x7a8
     744:	29 3d       	jmp	$+596    	;abs 0x998
     746:	28 34       	jge	$+82     	;abs 0x798
     748:	2c 32       	jn	$-934    	;abs 0x3a2
     74a:	31 29       	jnc	$+612    	;abs 0x9ae
     74c:	3d 2a       	jnc	$-900    	;abs 0x3c8
     74e:	28 34       	jge	$+82     	;abs 0x7a0
     750:	2c 32       	jn	$-934    	;abs 0x3aa
     752:	32 29       	jnc	$+614    	;abs 0x9b8
     754:	3d 42       	mov	#8,	r13	;r2 As==11
     756:	28 30       	jn	$+82     	;abs 0x7a8
     758:	2c 32       	jn	$-934    	;abs 0x3b2
     75a:	29 00 66 69 	mova	&0x06966,r9	
     75e:	78 70 74 5f 	subc.b	#24436,	r8	;#0x5f74
     762:	74 3a       	jl	$-790    	;abs 0x44c
     764:	74 28       	jnc	$+234    	;abs 0x84e
     766:	34 2c       	jc	$+106    	;abs 0x7d0
     768:	32 33       	jn	$-410    	;abs 0x5ce
     76a:	29 3d       	jmp	$+596    	;abs 0x9be
     76c:	28 34       	jge	$+82     	;abs 0x7be
     76e:	2c 39       	jl	$+602    	;abs 0x9c8
     770:	29 00 67 69 	mova	&0x06967,r9	
     774:	64 5f       	add.b	@r15,	r4	
     776:	74 3a       	jl	$-790    	;abs 0x460
     778:	74 28       	jnc	$+234    	;abs 0x862
     77a:	34 2c       	jc	$+106    	;abs 0x7e4
     77c:	32 34       	jge	$+102    	;abs 0x7e2
     77e:	29 3d       	jmp	$+596    	;abs 0x9d2
     780:	28 34       	jge	$+82     	;abs 0x7d2
     782:	2c 39       	jl	$+602    	;abs 0x9dc
     784:	29 00 69 6e 	mova	&0x06e69,r9	
     788:	5f 61 64 64 	addc.b	25700(r1),r15	;0x6464(r1)
     78c:	72 5f       	add.b	@r15+,	r2	
     78e:	74 3a       	jl	$-790    	;abs 0x478
     790:	74 28       	jnc	$+234    	;abs 0x87a
     792:	34 2c       	jc	$+106    	;abs 0x7fc
     794:	32 35       	jge	$+614    	;abs 0x9fa
     796:	29 3d       	jmp	$+596    	;abs 0x9ea
     798:	28 34       	jge	$+82     	;abs 0x7ea
     79a:	2c 39       	jl	$+602    	;abs 0x9f4
     79c:	29 00 69 6e 	mova	&0x06e69,r9	
     7a0:	5f 70 6f 72 	subc.b	0x726f,	r15	;PC rel. 0x07a13
     7a4:	74 5f       	add.b	@r15+,	r4	
     7a6:	74 3a       	jl	$-790    	;abs 0x490
     7a8:	74 28       	jnc	$+234    	;abs 0x892
     7aa:	34 2c       	jc	$+106    	;abs 0x814
     7ac:	32 36       	jge	$-922    	;abs 0x412
     7ae:	29 3d       	jmp	$+596    	;abs 0xa02
     7b0:	28 34       	jge	$+82     	;abs 0x802
     7b2:	2c 38       	jl	$+90     	;abs 0x80c
     7b4:	29 00 69 6e 	mova	&0x06e69,r9	
     7b8:	6f 5f       	add.b	@r15,	r15	
     7ba:	74 3a       	jl	$-790    	;abs 0x4a4
     7bc:	74 28       	jnc	$+234    	;abs 0x8a6
     7be:	34 2c       	jc	$+106    	;abs 0x828
     7c0:	32 37       	jge	$-410    	;abs 0x626
     7c2:	29 3d       	jmp	$+596    	;abs 0xa16
     7c4:	28 34       	jge	$+82     	;abs 0x816
     7c6:	2c 39       	jl	$+602    	;abs 0xa20
     7c8:	29 00 6b 65 	mova	&0x0656b,r9	
     7cc:	79 5f       	add.b	@r15+,	r9	
     7ce:	74 3a       	jl	$-790    	;abs 0x4b8
     7d0:	74 28       	jnc	$+234    	;abs 0x8ba
     7d2:	34 2c       	jc	$+106    	;abs 0x83c
     7d4:	32 38       	jl	$+102    	;abs 0x83a
     7d6:	29 3d       	jmp	$+596    	;abs 0xa2a
     7d8:	28 30       	jn	$+82     	;abs 0x82a
     7da:	2c 33       	jn	$-422    	;abs 0x634
     7dc:	29 00 6d 6f 	mova	&0x06f6d,r9	
     7e0:	64 65       	addc.b	@r5,	r4	
     7e2:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     7e6:	28 34       	jge	$+82     	;abs 0x838
     7e8:	2c 32       	jn	$-934    	;abs 0x442
     7ea:	39 29       	jnc	$+628    	;abs 0xa5e
     7ec:	3d 28       	jnc	$+124    	;abs 0x868
     7ee:	34 2c       	jc	$+106    	;abs 0x858
     7f0:	38 29       	jnc	$+626    	;abs 0xa62
     7f2:	00 6e       	addc	r14,	r0	
     7f4:	6c 69       	addc.b	@r9,	r12	
     7f6:	6e 6b       	addc.b	@r11,	r14	
     7f8:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     7fc:	28 34       	jge	$+82     	;abs 0x84e
     7fe:	2c 33       	jn	$-422    	;abs 0x658
     800:	30 29       	jnc	$+610    	;abs 0xa62
     802:	3d 28       	jnc	$+124    	;abs 0x87e
     804:	34 2c       	jc	$+106    	;abs 0x86e
     806:	38 29       	jnc	$+626    	;abs 0xa78
     808:	00 72       	subc	r2,	r0	
     80a:	6c 69       	addc.b	@r9,	r12	
     80c:	6d 5f       	add.b	@r15,	r13	
     80e:	74 3a       	jl	$-790    	;abs 0x4f8
     810:	74 28       	jnc	$+234    	;abs 0x8fa
     812:	34 2c       	jc	$+106    	;abs 0x87c
     814:	33 31       	jn	$+616    	;abs 0xa7c
     816:	29 3d       	jmp	$+596    	;abs 0xa6a
     818:	28 34       	jge	$+82     	;abs 0x86a
     81a:	2c 31       	jn	$+602    	;abs 0xa74
     81c:	32 29       	jnc	$+614    	;abs 0xa82
     81e:	00 73       	sbc	r0		
     820:	65 67       	addc.b	@r7,	r5	
     822:	73 7a       	.word	0x7a73;	????	Illegal as 2-op instr
     824:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     828:	28 34       	jge	$+82     	;abs 0x87a
     82a:	2c 33       	jn	$-422    	;abs 0x684
     82c:	32 29       	jnc	$+614    	;abs 0xa92
     82e:	3d 28       	jnc	$+124    	;abs 0x8aa
     830:	36 2c       	jc	$+110    	;abs 0x89e
     832:	35 29       	jnc	$+620    	;abs 0xa9e
     834:	00 73       	sbc	r0		
     836:	77 62       	addc.b	#8,	r7	;r2 As==11
     838:	6c 6b       	addc.b	@r11,	r12	
     83a:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     83e:	28 34       	jge	$+82     	;abs 0x890
     840:	2c 33       	jn	$-422    	;abs 0x69a
     842:	33 29       	jnc	$+616    	;abs 0xaaa
     844:	3d 28       	jnc	$+124    	;abs 0x8c0
     846:	36 2c       	jc	$+110    	;abs 0x8b4
     848:	35 29       	jnc	$+620    	;abs 0xab4
     84a:	00 75       	subc	r5,	r0	
     84c:	66 73       	subc.b	#2,	r6	;r3 As==10
     84e:	5f 64 61 64 	addc.b	25697(r4),r15	;0x6461(r4)
     852:	64 72       	subc.b	#4,	r4	;r2 As==10
     854:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     858:	28 34       	jge	$+82     	;abs 0x8aa
     85a:	2c 33       	jn	$-422    	;abs 0x6b4
     85c:	34 29       	jnc	$+618    	;abs 0xac6
     85e:	3d 28       	jnc	$+124    	;abs 0x8da
     860:	36 2c       	jc	$+110    	;abs 0x8ce
     862:	35 29       	jnc	$+620    	;abs 0xace
     864:	00 75       	subc	r5,	r0	
     866:	66 73       	subc.b	#2,	r6	;r3 As==10
     868:	5f 74 69 6d 	subc.b	28009(r4),r15	;0x6d69(r4)
     86c:	65 5f       	add.b	@r15,	r5	
     86e:	74 3a       	jl	$-790    	;abs 0x558
     870:	74 28       	jnc	$+234    	;abs 0x95a
     872:	34 2c       	jc	$+106    	;abs 0x8dc
     874:	33 35       	jge	$+616    	;abs 0xadc
     876:	29 3d       	jmp	$+596    	;abs 0xaca
     878:	28 36       	jge	$-942    	;abs 0x4ca
     87a:	2c 35       	jge	$+602    	;abs 0xad4
     87c:	29 00 75 69 	mova	&0x06975,r9	
     880:	64 5f       	add.b	@r15,	r4	
     882:	74 3a       	jl	$-790    	;abs 0x56c
     884:	74 28       	jnc	$+234    	;abs 0x96e
     886:	34 2c       	jc	$+106    	;abs 0x8f0
     888:	33 36       	jge	$-920    	;abs 0x4f0
     88a:	29 3d       	jmp	$+596    	;abs 0xade
     88c:	28 34       	jge	$+82     	;abs 0x8de
     88e:	2c 39       	jl	$+602    	;abs 0xae8
     890:	29 00 63 3a 	mova	&0x03a63,r9	
     894:	2f 6d       	addc	@r13,	r15	
     896:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     898:	67 63       	addc.b	#2,	r7	;r3 As==10
     89a:	63 2f       	jc	$-312    	;abs 0x762
     89c:	6c 69       	addc.b	@r9,	r12	
     89e:	62 2f       	jc	$-314    	;abs 0x764
     8a0:	67 63       	addc.b	#2,	r7	;r3 As==10
     8a2:	63 2d       	jc	$+712    	;abs 0xb6a
     8a4:	6c 69       	addc.b	@r9,	r12	
     8a6:	62 2f       	jc	$-314    	;abs 0x76c
     8a8:	6d 73       	subc.b	#2,	r13	;r3 As==10
     8aa:	70 34       	jge	$+226    	;abs 0x98c
     8ac:	33 30       	jn	$+104    	;abs 0x914
     8ae:	2f 33       	jn	$-416    	;abs 0x70e
     8b0:	2e 32       	jn	$-930    	;abs 0x50e
     8b2:	2e 33       	jn	$-418    	;abs 0x710
     8b4:	2f 69       	addc	@r9,	r15	
     8b6:	6e 63       	addc.b	#2,	r14	;r3 As==10
     8b8:	6c 75       	subc.b	@r5,	r12	
     8ba:	64 65       	addc.b	@r5,	r4	
     8bc:	2f 73       	subc	#2,	r15	;r3 As==10
     8be:	74 64       	addc.b	@r4+,	r4	
     8c0:	61 72       	subc.b	#4,	r1	;r2 As==10
     8c2:	67 2e       	jc	$-816    	;abs 0x592
     8c4:	68 00 5f 5f 	mova	r0,	&0x85f5f
     8c8:	67 6e       	addc.b	@r14,	r7	
     8ca:	75 63       	addc.b	#-1,	r5	;r3 As==11
     8cc:	5f 76 61 5f 	subc.b	24417(r6),r15	;0x5f61(r6)
     8d0:	6c 69       	addc.b	@r9,	r12	
     8d2:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
     8d4:	3a 74       	subc	@r4+,	r10	
     8d6:	28 37       	jge	$-430    	;abs 0x728
     8d8:	2c 31       	jn	$+602    	;abs 0xb32
     8da:	29 3d       	jmp	$+596    	;abs 0xb2e
     8dc:	28 30       	jn	$+82     	;abs 0x92e
     8de:	2c 31       	jn	$+602    	;abs 0xb38
     8e0:	39 29       	jnc	$+628    	;abs 0xb54
     8e2:	00 76       	subc	r6,	r0	
     8e4:	61 5f       	add.b	@r15,	r1	
     8e6:	6c 69       	addc.b	@r9,	r12	
     8e8:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
     8ea:	3a 74       	subc	@r4+,	r10	
     8ec:	28 37       	jge	$-430    	;abs 0x73e
     8ee:	2c 32       	jn	$-934    	;abs 0x548
     8f0:	29 3d       	jmp	$+596    	;abs 0xb44
     8f2:	28 37       	jge	$-430    	;abs 0x744
     8f4:	2c 31       	jn	$+602    	;abs 0xb4e
     8f6:	29 00 63 3a 	mova	&0x03a63,r9	
     8fa:	2f 6d       	addc	@r13,	r15	
     8fc:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     8fe:	67 63       	addc.b	#2,	r7	;r3 As==10
     900:	63 2f       	jc	$-312    	;abs 0x7c8
     902:	6d 73       	subc.b	#2,	r13	;r3 As==10
     904:	70 34       	jge	$+226    	;abs 0x9e6
     906:	33 30       	jn	$+104    	;abs 0x96e
     908:	2f 69       	addc	@r9,	r15	
     90a:	6e 63       	addc.b	#2,	r14	;r3 As==10
     90c:	6c 75       	subc.b	@r5,	r12	
     90e:	64 65       	addc.b	@r5,	r4	
     910:	2f 73       	subc	#2,	r15	;r3 As==10
     912:	74 64       	addc.b	@r4+,	r4	
     914:	6c 69       	addc.b	@r9,	r12	
     916:	62 2e       	jc	$-826    	;abs 0x5dc
     918:	68 00 64 69 	mova	r0,	&0x86964
     91c:	76 5f       	add.b	@r15+,	r6	
     91e:	74 3a       	jl	$-790    	;abs 0x608
     920:	74 28       	jnc	$+234    	;abs 0xa0a
     922:	38 2c       	jc	$+114    	;abs 0x994
     924:	31 29       	jnc	$+612    	;abs 0xb88
     926:	3d 28       	jnc	$+124    	;abs 0x9a2
     928:	38 2c       	jc	$+114    	;abs 0x99a
     92a:	32 29       	jnc	$+614    	;abs 0xb90
     92c:	3d 73       	subc	#-1,	r13	;r3 As==11
     92e:	34 71       	subc	@r1+,	r4	
     930:	75 6f       	addc.b	@r15+,	r5	
     932:	74 3a       	jl	$-790    	;abs 0x61c
     934:	28 30       	jn	$+82     	;abs 0x986
     936:	2c 31       	jn	$+602    	;abs 0xb90
     938:	29 2c       	jc	$+84     	;abs 0x98c
     93a:	30 2c       	jc	$+98     	;abs 0x99c
     93c:	31 36       	jge	$-924    	;abs 0x5a0
     93e:	3b 72       	subc	#8,	r11	;r2 As==11
     940:	65 6d       	addc.b	@r13,	r5	
     942:	3a 28       	jnc	$+118    	;abs 0x9b8
     944:	30 2c       	jc	$+98     	;abs 0x9a6
     946:	31 29       	jnc	$+612    	;abs 0xbaa
     948:	2c 31       	jn	$+602    	;abs 0xba2
     94a:	36 2c       	jc	$+110    	;abs 0x9b8
     94c:	31 36       	jge	$-924    	;abs 0x5b0
     94e:	3b 3b       	jl	$-392    	;abs 0x7c6
     950:	00 6c       	addc	r12,	r0	
     952:	64 69       	addc.b	@r9,	r4	
     954:	76 5f       	add.b	@r15+,	r6	
     956:	74 3a       	jl	$-790    	;abs 0x640
     958:	74 28       	jnc	$+234    	;abs 0xa42
     95a:	38 2c       	jc	$+114    	;abs 0x9cc
     95c:	33 29       	jnc	$+616    	;abs 0xbc4
     95e:	3d 28       	jnc	$+124    	;abs 0x9da
     960:	38 2c       	jc	$+114    	;abs 0x9d2
     962:	34 29       	jnc	$+618    	;abs 0xbcc
     964:	3d 73       	subc	#-1,	r13	;r3 As==11
     966:	38 71       	subc	@r1+,	r8	
     968:	75 6f       	addc.b	@r15+,	r5	
     96a:	74 3a       	jl	$-790    	;abs 0x654
     96c:	28 30       	jn	$+82     	;abs 0x9be
     96e:	2c 33       	jn	$-422    	;abs 0x7c8
     970:	29 2c       	jc	$+84     	;abs 0x9c4
     972:	30 2c       	jc	$+98     	;abs 0x9d4
     974:	33 32       	jn	$-920    	;abs 0x5dc
     976:	3b 72       	subc	#8,	r11	;r2 As==11
     978:	65 6d       	addc.b	@r13,	r5	
     97a:	3a 28       	jnc	$+118    	;abs 0x9f0
     97c:	30 2c       	jc	$+98     	;abs 0x9de
     97e:	33 29       	jnc	$+616    	;abs 0xbe6
     980:	2c 33       	jn	$-422    	;abs 0x7da
     982:	32 2c       	jc	$+102    	;abs 0x9e8
     984:	33 32       	jn	$-920    	;abs 0x5ec
     986:	3b 3b       	jl	$-392    	;abs 0x7fe
     988:	00 63       	adc	r0		
     98a:	3a 2f       	jc	$-394    	;abs 0x800
     98c:	6d 73       	subc.b	#2,	r13	;r3 As==10
     98e:	70 67       	addc.b	@r7+,	r0	
     990:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     992:	2f 6d       	addc	@r13,	r15	
     994:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     996:	34 33       	jn	$-406    	;abs 0x800
     998:	30 2f       	jc	$-414    	;abs 0x7fa
     99a:	69 6e       	addc.b	@r14,	r9	
     99c:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     99e:	75 64       	addc.b	@r4+,	r5	
     9a0:	65 2f       	jc	$-308    	;abs 0x86c
     9a2:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
     9a4:	67 6e       	addc.b	@r14,	r7	
     9a6:	61 6c       	addc.b	@r12,	r1	
     9a8:	2e 68       	addc	@r8,	r14	
     9aa:	00 63       	adc	r0		
     9ac:	3a 2f       	jc	$-394    	;abs 0x822
     9ae:	6d 73       	subc.b	#2,	r13	;r3 As==10
     9b0:	70 67       	addc.b	@r7+,	r0	
     9b2:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     9b4:	2f 6d       	addc	@r13,	r15	
     9b6:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     9b8:	34 33       	jn	$-406    	;abs 0x822
     9ba:	30 2f       	jc	$-414    	;abs 0x81c
     9bc:	69 6e       	addc.b	@r14,	r9	
     9be:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     9c0:	75 64       	addc.b	@r4+,	r5	
     9c2:	65 2f       	jc	$-308    	;abs 0x88e
     9c4:	69 6f       	addc.b	@r15,	r9	
     9c6:	6d 61       	addc.b	@r1,	r13	
     9c8:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
     9ca:	6f 73       	subc.b	#2,	r15	;r3 As==10
     9cc:	2e 68       	addc	@r8,	r14	
     9ce:	00 63       	adc	r0		
     9d0:	3a 2f       	jc	$-394    	;abs 0x846
     9d2:	6d 73       	subc.b	#2,	r13	;r3 As==10
     9d4:	70 67       	addc.b	@r7+,	r0	
     9d6:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     9d8:	2f 6d       	addc	@r13,	r15	
     9da:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     9dc:	34 33       	jn	$-406    	;abs 0x846
     9de:	30 2f       	jc	$-414    	;abs 0x840
     9e0:	69 6e       	addc.b	@r14,	r9	
     9e2:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     9e4:	75 64       	addc.b	@r4+,	r5	
     9e6:	65 2f       	jc	$-308    	;abs 0x8b2
     9e8:	6d 73       	subc.b	#2,	r13	;r3 As==10
     9ea:	70 34       	jge	$+226    	;abs 0xacc
     9ec:	33 30       	jn	$+104    	;abs 0xa54
     9ee:	78 32       	jn	$-782    	;abs 0x6e0
     9f0:	36 31       	jn	$+622    	;abs 0xc5e
     9f2:	78 2e       	jc	$-782    	;abs 0x6e4
     9f4:	68 00 63 3a 	mova	r0,	&0x83a63
     9f8:	2f 6d       	addc	@r13,	r15	
     9fa:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     9fc:	67 63       	addc.b	#2,	r7	;r3 As==10
     9fe:	63 2f       	jc	$-312    	;abs 0x8c6
     a00:	6d 73       	subc.b	#2,	r13	;r3 As==10
     a02:	70 34       	jge	$+226    	;abs 0xae4
     a04:	33 30       	jn	$+104    	;abs 0xa6c
     a06:	2f 69       	addc	@r9,	r15	
     a08:	6e 63       	addc.b	#2,	r14	;r3 As==10
     a0a:	6c 75       	subc.b	@r5,	r12	
     a0c:	64 65       	addc.b	@r5,	r4	
     a0e:	2f 6d       	addc	@r13,	r15	
     a10:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     a12:	34 33       	jn	$-406    	;abs 0x87c
     a14:	30 2f       	jc	$-414    	;abs 0x876
     a16:	6d 70       	subc.b	@r0,	r13	
     a18:	79 2e       	jc	$-780    	;abs 0x70c
     a1a:	68 00 63 3a 	mova	r0,	&0x83a63
     a1e:	2f 6d       	addc	@r13,	r15	
     a20:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     a22:	67 63       	addc.b	#2,	r7	;r3 As==10
     a24:	63 2f       	jc	$-312    	;abs 0x8ec
     a26:	6d 73       	subc.b	#2,	r13	;r3 As==10
     a28:	70 34       	jge	$+226    	;abs 0xb0a
     a2a:	33 30       	jn	$+104    	;abs 0xa92
     a2c:	2f 69       	addc	@r9,	r15	
     a2e:	6e 63       	addc.b	#2,	r14	;r3 As==10
     a30:	6c 75       	subc.b	@r5,	r12	
     a32:	64 65       	addc.b	@r5,	r4	
     a34:	2f 6d       	addc	@r13,	r15	
     a36:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     a38:	34 33       	jn	$-406    	;abs 0x8a2
     a3a:	30 2f       	jc	$-414    	;abs 0x89c
     a3c:	67 70       	subc.b	@r0,	r7	
     a3e:	69 6f       	addc.b	@r15,	r9	
     a40:	2e 68       	addc	@r8,	r14	
     a42:	00 63       	adc	r0		
     a44:	3a 2f       	jc	$-394    	;abs 0x8ba
     a46:	6d 73       	subc.b	#2,	r13	;r3 As==10
     a48:	70 67       	addc.b	@r7+,	r0	
     a4a:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     a4c:	2f 6d       	addc	@r13,	r15	
     a4e:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     a50:	34 33       	jn	$-406    	;abs 0x8ba
     a52:	30 2f       	jc	$-414    	;abs 0x8b4
     a54:	69 6e       	addc.b	@r14,	r9	
     a56:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     a58:	75 64       	addc.b	@r4+,	r5	
     a5a:	65 2f       	jc	$-308    	;abs 0x926
     a5c:	6d 73       	subc.b	#2,	r13	;r3 As==10
     a5e:	70 34       	jge	$+226    	;abs 0xb40
     a60:	33 30       	jn	$+104    	;abs 0xac8
     a62:	2f 69       	addc	@r9,	r15	
     a64:	6f 73       	subc.b	#2,	r15	;r3 As==10
     a66:	74 72       	subc.b	#8,	r4	;r2 As==11
     a68:	75 63       	addc.b	#-1,	r5	;r3 As==11
     a6a:	74 75       	subc.b	@r5+,	r4	
     a6c:	72 65       	addc.b	@r5+,	r2	
     a6e:	73 2e       	jc	$-792    	;abs 0x756
     a70:	68 00 70 6f 	mova	r0,	&0x86f70
     a74:	72 74       	subc.b	@r4+,	r2	
     a76:	3a 54       	add	@r4+,	r10	
     a78:	28 31       	jn	$+594    	;abs 0xcca
     a7a:	35 2c       	jc	$+108    	;abs 0xae6
     a7c:	31 29       	jnc	$+612    	;abs 0xce0
     a7e:	3d 75       	subc	@r5+,	r13	
     a80:	32 72       	subc	#8,	r2	;r2 As==11
     a82:	65 67       	addc.b	@r7,	r5	
     a84:	5f 70 3a 28 	subc.b	0x283a,	r15	;PC rel. 0x032c2
     a88:	30 2c       	jc	$+98     	;abs 0xaea
     a8a:	31 31       	jn	$+612    	;abs 0xcee
     a8c:	29 2c       	jc	$+84     	;abs 0xae0
     a8e:	30 2c       	jc	$+98     	;abs 0xaf0
     a90:	38 3b       	jl	$-398    	;abs 0x902
     a92:	5f 5f 70 69 	add.b	26992(r15),r15	;0x6970(r15)
     a96:	6e 3a       	jl	$-802    	;abs 0x774
     a98:	28 31       	jn	$+594    	;abs 0xcea
     a9a:	35 2c       	jc	$+108    	;abs 0xb06
     a9c:	32 29       	jnc	$+614    	;abs 0xd02
     a9e:	3d 73       	subc	#-1,	r13	;r3 As==11
     aa0:	32 5f       	add	@r15+,	r2	
     aa2:	5f 70 30 3a 	subc.b	0x3a30,	r15	;PC rel. 0x044d6
     aa6:	28 30       	jn	$+82     	;abs 0xaf8
     aa8:	2c 31       	jn	$+602    	;abs 0xd02
     aaa:	31 29       	jnc	$+612    	;abs 0xd0e
     aac:	2c 30       	jn	$+90     	;abs 0xb06
     aae:	2c 31       	jn	$+602    	;abs 0xd08
     ab0:	3b 5f       	add	@r15+,	r11	
     ab2:	5f 70 31 3a 	subc.b	0x3a31,	r15	;PC rel. 0x044e7
     ab6:	28 30       	jn	$+82     	;abs 0xb08
     ab8:	2c 31       	jn	$+602    	;abs 0xd12
     aba:	31 29       	jnc	$+612    	;abs 0xd1e
     abc:	2c 31       	jn	$+602    	;abs 0xd16
     abe:	2c 31       	jn	$+602    	;abs 0xd18
     ac0:	3b 5f       	add	@r15+,	r11	
     ac2:	5f 70 32 3a 	subc.b	0x3a32,	r15	;PC rel. 0x044f8
     ac6:	28 30       	jn	$+82     	;abs 0xb18
     ac8:	2c 31       	jn	$+602    	;abs 0xd22
     aca:	31 29       	jnc	$+612    	;abs 0xd2e
     acc:	2c 32       	jn	$-934    	;abs 0x726
     ace:	2c 31       	jn	$+602    	;abs 0xd28
     ad0:	3b 5f       	add	@r15+,	r11	
     ad2:	5f 70 33 3a 	subc.b	0x3a33,	r15	;PC rel. 0x04509
     ad6:	28 30       	jn	$+82     	;abs 0xb28
     ad8:	2c 31       	jn	$+602    	;abs 0xd32
     ada:	31 29       	jnc	$+612    	;abs 0xd3e
     adc:	2c 33       	jn	$-422    	;abs 0x936
     ade:	2c 31       	jn	$+602    	;abs 0xd38
     ae0:	3b 5f       	add	@r15+,	r11	
     ae2:	5f 70 34 3a 	subc.b	0x3a34,	r15	;PC rel. 0x0451a
     ae6:	28 30       	jn	$+82     	;abs 0xb38
     ae8:	2c 31       	jn	$+602    	;abs 0xd42
     aea:	31 29       	jnc	$+612    	;abs 0xd4e
     aec:	2c 34       	jge	$+90     	;abs 0xb46
     aee:	2c 31       	jn	$+602    	;abs 0xd48
     af0:	3b 5f       	add	@r15+,	r11	
     af2:	5f 70 35 3a 	subc.b	0x3a35,	r15	;PC rel. 0x0452b
     af6:	28 30       	jn	$+82     	;abs 0xb48
     af8:	2c 31       	jn	$+602    	;abs 0xd52
     afa:	31 29       	jnc	$+612    	;abs 0xd5e
     afc:	2c 35       	jge	$+602    	;abs 0xd56
     afe:	2c 31       	jn	$+602    	;abs 0xd58
     b00:	3b 5f       	add	@r15+,	r11	
     b02:	5f 70 36 3a 	subc.b	0x3a36,	r15	;PC rel. 0x0453c
     b06:	28 30       	jn	$+82     	;abs 0xb58
     b08:	2c 31       	jn	$+602    	;abs 0xd62
     b0a:	31 29       	jnc	$+612    	;abs 0xd6e
     b0c:	2c 36       	jge	$-934    	;abs 0x766
     b0e:	2c 31       	jn	$+602    	;abs 0xd68
     b10:	3b 5f       	add	@r15+,	r11	
     b12:	5f 70 37 3a 	subc.b	0x3a37,	r15	;PC rel. 0x0454d
     b16:	28 30       	jn	$+82     	;abs 0xb68
     b18:	2c 31       	jn	$+602    	;abs 0xd72
     b1a:	31 29       	jnc	$+612    	;abs 0xd7e
     b1c:	2c 37       	jge	$-422    	;abs 0x976
     b1e:	2c 31       	jn	$+602    	;abs 0xd78
     b20:	3b 3b       	jl	$-392    	;abs 0x998
     b22:	2c 30       	jn	$+90     	;abs 0xb7c
     b24:	2c 31       	jn	$+602    	;abs 0xd7e
     b26:	36 3b       	jl	$-402    	;abs 0x994
     b28:	3b 00 69 6f 	mova	0x6f69,	r11	;PC rel. 0x07a93
     b2c:	72 65       	addc.b	@r5+,	r2	
     b2e:	67 69       	addc.b	@r9,	r7	
     b30:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
     b32:	65 72       	subc.b	#4,	r5	;r2 As==10
     b34:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     b38:	28 31       	jn	$+594    	;abs 0xd8a
     b3a:	35 2c       	jc	$+108    	;abs 0xba6
     b3c:	33 29       	jnc	$+616    	;abs 0xda4
     b3e:	3d 28       	jnc	$+124    	;abs 0xbba
     b40:	31 35       	jge	$+612    	;abs 0xda4
     b42:	2c 31       	jn	$+602    	;abs 0xd9c
     b44:	29 00 70 6f 	mova	&0x06f70,r9	
     b48:	72 74       	subc.b	@r4+,	r2	
     b4a:	5f 66 75 6c 	addc.b	27765(r6),r15	;0x6c75(r6)
     b4e:	6c 5f       	add.b	@r15,	r12	
     b50:	74 3a       	jl	$-790    	;abs 0x83a
     b52:	54 28       	jnc	$+170    	;abs 0xbfc
     b54:	31 35       	jge	$+612    	;abs 0xdb8
     b56:	2c 34       	jge	$+90     	;abs 0xbb0
     b58:	29 3d       	jmp	$+596    	;abs 0xdac
     b5a:	73 31       	jn	$+744    	;abs 0xe42
     b5c:	36 69       	addc	@r9+,	r6	
     b5e:	6e 3a       	jl	$-802    	;abs 0x83c
     b60:	28 31       	jn	$+594    	;abs 0xdb2
     b62:	35 2c       	jc	$+108    	;abs 0xbce
     b64:	33 29       	jnc	$+616    	;abs 0xdcc
     b66:	2c 30       	jn	$+90     	;abs 0xbc0
     b68:	2c 31       	jn	$+602    	;abs 0xdc2
     b6a:	36 3b       	jl	$-402    	;abs 0x9d8
     b6c:	6f 75       	subc.b	@r5,	r15	
     b6e:	74 3a       	jl	$-790    	;abs 0x858
     b70:	28 31       	jn	$+594    	;abs 0xdc2
     b72:	35 2c       	jc	$+108    	;abs 0xbde
     b74:	33 29       	jnc	$+616    	;abs 0xddc
     b76:	2c 31       	jn	$+602    	;abs 0xdd0
     b78:	36 2c       	jc	$+110    	;abs 0xbe6
     b7a:	31 36       	jge	$-924    	;abs 0x7de
     b7c:	3b 64       	addc	@r4+,	r11	
     b7e:	69 72       	subc.b	#4,	r9	;r2 As==10
     b80:	3a 28       	jnc	$+118    	;abs 0xbf6
     b82:	31 35       	jge	$+612    	;abs 0xde6
     b84:	2c 33       	jn	$-422    	;abs 0x9de
     b86:	29 2c       	jc	$+84     	;abs 0xbda
     b88:	33 32       	jn	$-920    	;abs 0x7f0
     b8a:	2c 31       	jn	$+602    	;abs 0xde4
     b8c:	36 3b       	jl	$-402    	;abs 0x9fa
     b8e:	69 66       	addc.b	@r6,	r9	
     b90:	67 3a       	jl	$-816    	;abs 0x860
     b92:	28 31       	jn	$+594    	;abs 0xde4
     b94:	35 2c       	jc	$+108    	;abs 0xc00
     b96:	33 29       	jnc	$+616    	;abs 0xdfe
     b98:	2c 34       	jge	$+90     	;abs 0xbf2
     b9a:	38 2c       	jc	$+114    	;abs 0xc0c
     b9c:	31 36       	jge	$-924    	;abs 0x800
     b9e:	3b 69       	addc	@r9+,	r11	
     ba0:	65 73       	subc.b	#2,	r5	;r3 As==10
     ba2:	3a 28       	jnc	$+118    	;abs 0xc18
     ba4:	31 35       	jge	$+612    	;abs 0xe08
     ba6:	2c 33       	jn	$-422    	;abs 0xa00
     ba8:	29 2c       	jc	$+84     	;abs 0xbfc
     baa:	36 34       	jge	$+110    	;abs 0xc18
     bac:	2c 31       	jn	$+602    	;abs 0xe06
     bae:	36 3b       	jl	$-402    	;abs 0xa1c
     bb0:	69 65       	addc.b	@r5,	r9	
     bb2:	3a 28       	jnc	$+118    	;abs 0xc28
     bb4:	31 35       	jge	$+612    	;abs 0xe18
     bb6:	2c 33       	jn	$-422    	;abs 0xa10
     bb8:	29 2c       	jc	$+84     	;abs 0xc0c
     bba:	38 30       	jn	$+114    	;abs 0xc2c
     bbc:	2c 31       	jn	$+602    	;abs 0xe16
     bbe:	36 3b       	jl	$-402    	;abs 0xa2c
     bc0:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
     bc2:	6c 3a       	jl	$-806    	;abs 0x89c
     bc4:	28 31       	jn	$+594    	;abs 0xe16
     bc6:	35 2c       	jc	$+108    	;abs 0xc32
     bc8:	33 29       	jnc	$+616    	;abs 0xe30
     bca:	2c 39       	jl	$+602    	;abs 0xe24
     bcc:	36 2c       	jc	$+110    	;abs 0xc3a
     bce:	31 36       	jge	$-924    	;abs 0x832
     bd0:	3b 72       	subc	#8,	r11	;r2 As==11
     bd2:	65 6e       	addc.b	@r14,	r5	
     bd4:	3a 28       	jnc	$+118    	;abs 0xc4a
     bd6:	31 35       	jge	$+612    	;abs 0xe3a
     bd8:	2c 33       	jn	$-422    	;abs 0xa32
     bda:	29 2c       	jc	$+84     	;abs 0xc2e
     bdc:	31 31       	jn	$+612    	;abs 0xe40
     bde:	32 2c       	jc	$+102    	;abs 0xc44
     be0:	31 36       	jge	$-924    	;abs 0x844
     be2:	3b 3b       	jl	$-392    	;abs 0xa5a
     be4:	00 70       	subc	r0,	r0	
     be6:	6f 72       	subc.b	#4,	r15	;r2 As==10
     be8:	74 5f       	add.b	@r15+,	r4	
     bea:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
     bec:	6d 70       	subc.b	@r0,	r13	
     bee:	6c 65       	addc.b	@r5,	r12	
     bf0:	5f 74 3a 54 	subc.b	21562(r4),r15	;0x543a(r4)
     bf4:	28 31       	jn	$+594    	;abs 0xe46
     bf6:	35 2c       	jc	$+108    	;abs 0xc62
     bf8:	35 29       	jnc	$+620    	;abs 0xe64
     bfa:	3d 73       	subc	#-1,	r13	;r3 As==11
     bfc:	38 69       	addc	@r9+,	r8	
     bfe:	6e 3a       	jl	$-802    	;abs 0x8dc
     c00:	28 31       	jn	$+594    	;abs 0xe52
     c02:	35 2c       	jc	$+108    	;abs 0xc6e
     c04:	33 29       	jnc	$+616    	;abs 0xe6c
     c06:	2c 30       	jn	$+90     	;abs 0xc60
     c08:	2c 31       	jn	$+602    	;abs 0xe62
     c0a:	36 3b       	jl	$-402    	;abs 0xa78
     c0c:	6f 75       	subc.b	@r5,	r15	
     c0e:	74 3a       	jl	$-790    	;abs 0x8f8
     c10:	28 31       	jn	$+594    	;abs 0xe62
     c12:	35 2c       	jc	$+108    	;abs 0xc7e
     c14:	33 29       	jnc	$+616    	;abs 0xe7c
     c16:	2c 31       	jn	$+602    	;abs 0xe70
     c18:	36 2c       	jc	$+110    	;abs 0xc86
     c1a:	31 36       	jge	$-924    	;abs 0x87e
     c1c:	3b 64       	addc	@r4+,	r11	
     c1e:	69 72       	subc.b	#4,	r9	;r2 As==10
     c20:	3a 28       	jnc	$+118    	;abs 0xc96
     c22:	31 35       	jge	$+612    	;abs 0xe86
     c24:	2c 33       	jn	$-422    	;abs 0xa7e
     c26:	29 2c       	jc	$+84     	;abs 0xc7a
     c28:	33 32       	jn	$-920    	;abs 0x890
     c2a:	2c 31       	jn	$+602    	;abs 0xe84
     c2c:	36 3b       	jl	$-402    	;abs 0xa9a
     c2e:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
     c30:	6c 3a       	jl	$-806    	;abs 0x90a
     c32:	28 31       	jn	$+594    	;abs 0xe84
     c34:	35 2c       	jc	$+108    	;abs 0xca0
     c36:	33 29       	jnc	$+616    	;abs 0xe9e
     c38:	2c 34       	jge	$+90     	;abs 0xc92
     c3a:	38 2c       	jc	$+114    	;abs 0xcac
     c3c:	31 36       	jge	$-924    	;abs 0x8a0
     c3e:	3b 3b       	jl	$-392    	;abs 0xab6
     c40:	00 63       	adc	r0		
     c42:	3a 2f       	jc	$-394    	;abs 0xab8
     c44:	6d 73       	subc.b	#2,	r13	;r3 As==10
     c46:	70 67       	addc.b	@r7+,	r0	
     c48:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     c4a:	2f 6d       	addc	@r13,	r15	
     c4c:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     c4e:	34 33       	jn	$-406    	;abs 0xab8
     c50:	30 2f       	jc	$-414    	;abs 0xab2
     c52:	69 6e       	addc.b	@r14,	r9	
     c54:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     c56:	75 64       	addc.b	@r4+,	r5	
     c58:	65 2f       	jc	$-308    	;abs 0xb24
     c5a:	6d 73       	subc.b	#2,	r13	;r3 As==10
     c5c:	70 34       	jge	$+226    	;abs 0xd3e
     c5e:	33 30       	jn	$+104    	;abs 0xcc6
     c60:	2f 75       	subc	@r5,	r15	
     c62:	73 63       	.word	0x6373;	????	Illegal as 2-op instr
     c64:	69 2e       	jc	$-812    	;abs 0x938
     c66:	68 00 63 3a 	mova	r0,	&0x83a63
     c6a:	2f 6d       	addc	@r13,	r15	
     c6c:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     c6e:	67 63       	addc.b	#2,	r7	;r3 As==10
     c70:	63 2f       	jc	$-312    	;abs 0xb38
     c72:	6d 73       	subc.b	#2,	r13	;r3 As==10
     c74:	70 34       	jge	$+226    	;abs 0xd56
     c76:	33 30       	jn	$+104    	;abs 0xcde
     c78:	2f 69       	addc	@r9,	r15	
     c7a:	6e 63       	addc.b	#2,	r14	;r3 As==10
     c7c:	6c 75       	subc.b	@r5,	r12	
     c7e:	64 65       	addc.b	@r5,	r4	
     c80:	2f 6d       	addc	@r13,	r15	
     c82:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     c84:	34 33       	jn	$-406    	;abs 0xaee
     c86:	30 2f       	jc	$-414    	;abs 0xae8
     c88:	74 69       	addc.b	@r9+,	r4	
     c8a:	6d 65       	addc.b	@r5,	r13	
     c8c:	72 61       	addc.b	@r1+,	r2	
     c8e:	2e 68       	addc	@r8,	r14	
     c90:	00 74       	subc	r4,	r0	
     c92:	61 63       	addc.b	#2,	r1	;r3 As==10
     c94:	74 6c       	addc.b	@r12+,	r4	
     c96:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     c9a:	28 31       	jn	$+594    	;abs 0xeec
     c9c:	37 2c       	jc	$+112    	;abs 0xd0c
     c9e:	31 29       	jnc	$+612    	;abs 0xf02
     ca0:	3d 28       	jnc	$+124    	;abs 0xd1c
     ca2:	31 37       	jge	$-412    	;abs 0xb06
     ca4:	2c 32       	jn	$-934    	;abs 0x8fe
     ca6:	29 3d       	jmp	$+596    	;abs 0xefa
     ca8:	73 32       	jn	$-792    	;abs 0x990
     caa:	74 61       	addc.b	@r1+,	r4	
     cac:	69 66       	addc.b	@r6,	r9	
     cae:	67 3a       	jl	$-816    	;abs 0x97e
     cb0:	28 30       	jn	$+82     	;abs 0xd02
     cb2:	2c 34       	jge	$+90     	;abs 0xd0c
     cb4:	29 2c       	jc	$+84     	;abs 0xd08
     cb6:	30 2c       	jc	$+98     	;abs 0xd18
     cb8:	31 3b       	jl	$-412    	;abs 0xb1c
     cba:	74 61       	addc.b	@r1+,	r4	
     cbc:	69 65       	addc.b	@r5,	r9	
     cbe:	3a 28       	jnc	$+118    	;abs 0xd34
     cc0:	30 2c       	jc	$+98     	;abs 0xd22
     cc2:	34 29       	jnc	$+618    	;abs 0xf2c
     cc4:	2c 31       	jn	$+602    	;abs 0xf1e
     cc6:	2c 31       	jn	$+602    	;abs 0xf20
     cc8:	3b 74       	subc	@r4+,	r11	
     cca:	61 63       	addc.b	#2,	r1	;r3 As==10
     ccc:	6c 72       	subc.b	#4,	r12	;r2 As==10
     cce:	3a 28       	jnc	$+118    	;abs 0xd44
     cd0:	30 2c       	jc	$+98     	;abs 0xd32
     cd2:	34 29       	jnc	$+618    	;abs 0xf3c
     cd4:	2c 32       	jn	$-934    	;abs 0x92e
     cd6:	2c 31       	jn	$+602    	;abs 0xf30
     cd8:	3b 64       	addc	@r4+,	r11	
     cda:	75 6d       	addc.b	@r13+,	r5	
     cdc:	6d 79       	subc.b	@r9,	r13	
     cde:	3a 28       	jnc	$+118    	;abs 0xd54
     ce0:	30 2c       	jc	$+98     	;abs 0xd42
     ce2:	34 29       	jnc	$+618    	;abs 0xf4c
     ce4:	2c 33       	jn	$-422    	;abs 0xb3e
     ce6:	2c 31       	jn	$+602    	;abs 0xf40
     ce8:	3b 74       	subc	@r4+,	r11	
     cea:	61 6d       	addc.b	@r13,	r1	
     cec:	63 3a       	jl	$-824    	;abs 0x9b4
     cee:	28 30       	jn	$+82     	;abs 0xd40
     cf0:	2c 34       	jge	$+90     	;abs 0xd4a
     cf2:	29 2c       	jc	$+84     	;abs 0xd46
     cf4:	34 2c       	jc	$+106    	;abs 0xd5e
     cf6:	32 3b       	jl	$-410    	;abs 0xb5c
     cf8:	74 61       	addc.b	@r1+,	r4	
     cfa:	69 64       	addc.b	@r4,	r9	
     cfc:	3a 28       	jnc	$+118    	;abs 0xd72
     cfe:	30 2c       	jc	$+98     	;abs 0xd60
     d00:	34 29       	jnc	$+618    	;abs 0xf6a
     d02:	2c 36       	jge	$-934    	;abs 0x95c
     d04:	2c 32       	jn	$-934    	;abs 0x95e
     d06:	3b 74       	subc	@r4+,	r11	
     d08:	61 73       	subc.b	#2,	r1	;r3 As==10
     d0a:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
     d0c:	6c 3a       	jl	$-806    	;abs 0x9e6
     d0e:	28 30       	jn	$+82     	;abs 0xd60
     d10:	2c 34       	jge	$+90     	;abs 0xd6a
     d12:	29 2c       	jc	$+84     	;abs 0xd66
     d14:	38 2c       	jc	$+114    	;abs 0xd86
     d16:	32 3b       	jl	$-410    	;abs 0xb7c
     d18:	3b 00 74 61 	mova	0x6174,	r11	;PC rel. 0x06e8e
     d1c:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     d1e:	74 6c       	addc.b	@r12+,	r4	
     d20:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
     d24:	28 31       	jn	$+594    	;abs 0xf76
     d26:	37 2c       	jc	$+112    	;abs 0xd96
     d28:	33 29       	jnc	$+616    	;abs 0xf90
     d2a:	3d 28       	jnc	$+124    	;abs 0xda6
     d2c:	31 37       	jge	$-412    	;abs 0xb90
     d2e:	2c 34       	jge	$+90     	;abs 0xd88
     d30:	29 3d       	jmp	$+596    	;abs 0xf84
     d32:	73 32       	jn	$-792    	;abs 0xa1a
     d34:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     d36:	69 66       	addc.b	@r6,	r9	
     d38:	67 3a       	jl	$-816    	;abs 0xa08
     d3a:	28 30       	jn	$+82     	;abs 0xd8c
     d3c:	2c 34       	jge	$+90     	;abs 0xd96
     d3e:	29 2c       	jc	$+84     	;abs 0xd92
     d40:	30 2c       	jc	$+98     	;abs 0xda2
     d42:	31 3b       	jl	$-412    	;abs 0xba6
     d44:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
     d46:	76 3a       	jl	$-786    	;abs 0xa34
     d48:	28 30       	jn	$+82     	;abs 0xd9a
     d4a:	2c 34       	jge	$+90     	;abs 0xda4
     d4c:	29 2c       	jc	$+84     	;abs 0xda0
     d4e:	31 2c       	jc	$+100    	;abs 0xdb2
     d50:	31 3b       	jl	$-412    	;abs 0xbb4
     d52:	6f 75       	subc.b	@r5,	r15	
     d54:	74 3a       	jl	$-790    	;abs 0xa3e
     d56:	28 30       	jn	$+82     	;abs 0xda8
     d58:	2c 34       	jge	$+90     	;abs 0xdb2
     d5a:	29 2c       	jc	$+84     	;abs 0xdae
     d5c:	32 2c       	jc	$+102    	;abs 0xdc2
     d5e:	31 3b       	jl	$-412    	;abs 0xbc2
     d60:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     d62:	69 3a       	jl	$-812    	;abs 0xa36
     d64:	28 30       	jn	$+82     	;abs 0xdb6
     d66:	2c 34       	jge	$+90     	;abs 0xdc0
     d68:	29 2c       	jc	$+84     	;abs 0xdbc
     d6a:	33 2c       	jc	$+104    	;abs 0xdd2
     d6c:	31 3b       	jl	$-412    	;abs 0xbd0
     d6e:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     d70:	69 65       	addc.b	@r5,	r9	
     d72:	3a 28       	jnc	$+118    	;abs 0xde8
     d74:	30 2c       	jc	$+98     	;abs 0xdd6
     d76:	34 29       	jnc	$+618    	;abs 0xfe0
     d78:	2c 34       	jge	$+90     	;abs 0xdd2
     d7a:	2c 31       	jn	$+602    	;abs 0xfd4
     d7c:	3b 6f       	addc	@r15+,	r11	
     d7e:	75 74       	subc.b	@r4+,	r5	
     d80:	6d 6f       	addc.b	@r15,	r13	
     d82:	64 3a       	jl	$-822    	;abs 0xa4c
     d84:	28 30       	jn	$+82     	;abs 0xdd6
     d86:	2c 34       	jge	$+90     	;abs 0xde0
     d88:	29 2c       	jc	$+84     	;abs 0xddc
     d8a:	35 2c       	jc	$+108    	;abs 0xdf6
     d8c:	33 3b       	jl	$-408    	;abs 0xbf4
     d8e:	63 61       	.word	0x6163;	????	Illegal as 2-op instr
     d90:	70 3a       	jl	$-798    	;abs 0xa72
     d92:	28 30       	jn	$+82     	;abs 0xde4
     d94:	2c 34       	jge	$+90     	;abs 0xdee
     d96:	29 2c       	jc	$+84     	;abs 0xdea
     d98:	38 2c       	jc	$+114    	;abs 0xe0a
     d9a:	31 3b       	jl	$-412    	;abs 0xbfe
     d9c:	64 75       	subc.b	@r5,	r4	
     d9e:	6d 6d       	addc.b	@r13,	r13	
     da0:	79 3a       	jl	$-780    	;abs 0xa94
     da2:	28 30       	jn	$+82     	;abs 0xdf4
     da4:	2c 34       	jge	$+90     	;abs 0xdfe
     da6:	29 2c       	jc	$+84     	;abs 0xdfa
     da8:	39 2c       	jc	$+116    	;abs 0xe1c
     daa:	31 3b       	jl	$-412    	;abs 0xc0e
     dac:	73 63       	.word	0x6373;	????	Illegal as 2-op instr
     dae:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
     db0:	3a 28       	jnc	$+118    	;abs 0xe26
     db2:	30 2c       	jc	$+98     	;abs 0xe14
     db4:	34 29       	jnc	$+618    	;abs 0x101e
     db6:	2c 31       	jn	$+602    	;abs 0x1010
     db8:	30 2c       	jc	$+98     	;abs 0xe1a
     dba:	31 3b       	jl	$-412    	;abs 0xc1e
     dbc:	73 63       	.word	0x6373;	????	Illegal as 2-op instr
     dbe:	73 3a       	jl	$-792    	;abs 0xaa6
     dc0:	28 30       	jn	$+82     	;abs 0xe12
     dc2:	2c 34       	jge	$+90     	;abs 0xe1c
     dc4:	29 2c       	jc	$+84     	;abs 0xe18
     dc6:	31 31       	jn	$+612    	;abs 0x102a
     dc8:	2c 31       	jn	$+602    	;abs 0x1022
     dca:	3b 63       	addc	#-1,	r11	;r3 As==11
     dcc:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
     dce:	73 3a       	jl	$-792    	;abs 0xab6
     dd0:	28 30       	jn	$+82     	;abs 0xe22
     dd2:	2c 34       	jge	$+90     	;abs 0xe2c
     dd4:	29 2c       	jc	$+84     	;abs 0xe28
     dd6:	31 32       	jn	$-924    	;abs 0xa3a
     dd8:	2c 32       	jn	$-934    	;abs 0xa32
     dda:	3b 63       	addc	#-1,	r11	;r3 As==11
     ddc:	6d 3a       	jl	$-804    	;abs 0xab8
     dde:	28 30       	jn	$+82     	;abs 0xe30
     de0:	2c 34       	jge	$+90     	;abs 0xe3a
     de2:	29 2c       	jc	$+84     	;abs 0xe36
     de4:	31 34       	jge	$+100    	;abs 0xe48
     de6:	2c 32       	jn	$-934    	;abs 0xa40
     de8:	3b 3b       	jl	$-392    	;abs 0xc60
     dea:	00 74       	subc	r4,	r0	
     dec:	69 6d       	addc.b	@r13,	r9	
     dee:	65 72       	subc.b	#4,	r5	;r2 As==10
     df0:	61 5f       	add.b	@r15,	r1	
     df2:	74 3a       	jl	$-790    	;abs 0xadc
     df4:	54 28       	jnc	$+170    	;abs 0xe9e
     df6:	31 37       	jge	$-412    	;abs 0xc5a
     df8:	2c 35       	jge	$+602    	;abs 0x1052
     dfa:	29 3d       	jmp	$+596    	;abs 0x104e
     dfc:	73 32       	jn	$-792    	;abs 0xae4
     dfe:	34 63       	addc	#-1,	r4	;r3 As==11
     e00:	74 6c       	addc.b	@r12+,	r4	
     e02:	3a 28       	jnc	$+118    	;abs 0xe78
     e04:	31 37       	jge	$-412    	;abs 0xc68
     e06:	2c 31       	jn	$+602    	;abs 0x1060
     e08:	29 2c       	jc	$+84     	;abs 0xe5c
     e0a:	30 2c       	jc	$+98     	;abs 0xe6c
     e0c:	31 36       	jge	$-924    	;abs 0xa70
     e0e:	3b 63       	addc	#-1,	r11	;r3 As==11
     e10:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
     e12:	6c 30       	jn	$+218    	;abs 0xeec
     e14:	3a 28       	jnc	$+118    	;abs 0xe8a
     e16:	31 37       	jge	$-412    	;abs 0xc7a
     e18:	2c 33       	jn	$-422    	;abs 0xc72
     e1a:	29 2c       	jc	$+84     	;abs 0xe6e
     e1c:	31 36       	jge	$-924    	;abs 0xa80
     e1e:	2c 31       	jn	$+602    	;abs 0x1078
     e20:	36 3b       	jl	$-402    	;abs 0xc8e
     e22:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     e24:	74 6c       	addc.b	@r12+,	r4	
     e26:	31 3a       	jl	$-924    	;abs 0xa8a
     e28:	28 31       	jn	$+594    	;abs 0x107a
     e2a:	37 2c       	jc	$+112    	;abs 0xe9a
     e2c:	33 29       	jnc	$+616    	;abs 0x1094
     e2e:	2c 33       	jn	$-422    	;abs 0xc88
     e30:	32 2c       	jc	$+102    	;abs 0xe96
     e32:	31 36       	jge	$-924    	;abs 0xa96
     e34:	3b 63       	addc	#-1,	r11	;r3 As==11
     e36:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
     e38:	6c 32       	jn	$-806    	;abs 0xb12
     e3a:	3a 28       	jnc	$+118    	;abs 0xeb0
     e3c:	31 37       	jge	$-412    	;abs 0xca0
     e3e:	2c 33       	jn	$-422    	;abs 0xc98
     e40:	29 2c       	jc	$+84     	;abs 0xe94
     e42:	34 38       	jl	$+106    	;abs 0xeac
     e44:	2c 31       	jn	$+602    	;abs 0x109e
     e46:	36 3b       	jl	$-402    	;abs 0xcb4
     e48:	64 75       	subc.b	@r5,	r4	
     e4a:	6d 6d       	addc.b	@r13,	r13	
     e4c:	79 32       	jn	$-780    	;abs 0xb40
     e4e:	3a 28       	jnc	$+118    	;abs 0xec4
     e50:	31 37       	jge	$-412    	;abs 0xcb4
     e52:	2c 36       	jge	$-934    	;abs 0xaac
     e54:	29 3d       	jmp	$+596    	;abs 0x10a8
     e56:	61 72       	subc.b	#4,	r1	;r2 As==10
     e58:	28 31       	jn	$+594    	;abs 0x10aa
     e5a:	37 2c       	jc	$+112    	;abs 0xeca
     e5c:	37 29       	jnc	$+624    	;abs 0x10cc
     e5e:	3d 72       	subc	#8,	r13	;r2 As==11
     e60:	28 31       	jn	$+594    	;abs 0x10b2
     e62:	37 2c       	jc	$+112    	;abs 0xed2
     e64:	37 29       	jnc	$+624    	;abs 0x10d4
     e66:	3b 30       	jn	$+120    	;abs 0xede
     e68:	30 30       	jn	$+98     	;abs 0xeca
     e6a:	30 30       	jn	$+98     	;abs 0xecc
     e6c:	30 30       	jn	$+98     	;abs 0xece
     e6e:	30 30       	jn	$+98     	;abs 0xed0
     e70:	30 30       	jn	$+98     	;abs 0xed2
     e72:	30 30       	jn	$+98     	;abs 0xed4
     e74:	3b 30       	jn	$+120    	;abs 0xeec
     e76:	30 30       	jn	$+98     	;abs 0xed8
     e78:	30 30       	jn	$+98     	;abs 0xeda
     e7a:	30 30       	jn	$+98     	;abs 0xedc
     e7c:	31 37       	jge	$-412    	;abs 0xce0
     e7e:	37 37       	jge	$-400    	;abs 0xcee
     e80:	37 37       	jge	$-400    	;abs 0xcf0
     e82:	3b 3b       	jl	$-392    	;abs 0xcfa
     e84:	30 3b       	jl	$-414    	;abs 0xce6
     e86:	33 3b       	jl	$-408    	;abs 0xcee
     e88:	28 31       	jn	$+594    	;abs 0x10da
     e8a:	37 2c       	jc	$+112    	;abs 0xefa
     e8c:	38 29       	jnc	$+626    	;abs 0x10fe
     e8e:	3d 42       	mov	#8,	r13	;r2 As==11
     e90:	28 30       	jn	$+82     	;abs 0xee2
     e92:	2c 34       	jge	$+90     	;abs 0xeec
     e94:	29 2c       	jc	$+84     	;abs 0xee8
     e96:	36 34       	jge	$+110    	;abs 0xf04
     e98:	2c 36       	jge	$-934    	;abs 0xaf2
     e9a:	34 3b       	jl	$-406    	;abs 0xd04
     e9c:	74 61       	addc.b	@r1+,	r4	
     e9e:	72 3a       	jl	$-794    	;abs 0xb84
     ea0:	28 30       	jn	$+82     	;abs 0xef2
     ea2:	2c 34       	jge	$+90     	;abs 0xefc
     ea4:	29 2c       	jc	$+84     	;abs 0xef8
     ea6:	31 32       	jn	$-924    	;abs 0xb0a
     ea8:	38 2c       	jc	$+114    	;abs 0xf1a
     eaa:	31 36       	jge	$-924    	;abs 0xb0e
     eac:	3b 74       	subc	@r4+,	r11	
     eae:	61 63       	addc.b	#2,	r1	;r3 As==10
     eb0:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
     eb2:	30 3a       	jl	$-926    	;abs 0xb14
     eb4:	28 30       	jn	$+82     	;abs 0xf06
     eb6:	2c 34       	jge	$+90     	;abs 0xf10
     eb8:	29 2c       	jc	$+84     	;abs 0xf0c
     eba:	31 34       	jge	$+100    	;abs 0xf1e
     ebc:	34 2c       	jc	$+106    	;abs 0xf26
     ebe:	31 36       	jge	$-924    	;abs 0xb22
     ec0:	3b 74       	subc	@r4+,	r11	
     ec2:	61 63       	addc.b	#2,	r1	;r3 As==10
     ec4:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
     ec6:	31 3a       	jl	$-924    	;abs 0xb2a
     ec8:	28 30       	jn	$+82     	;abs 0xf1a
     eca:	2c 34       	jge	$+90     	;abs 0xf24
     ecc:	29 2c       	jc	$+84     	;abs 0xf20
     ece:	31 36       	jge	$-924    	;abs 0xb32
     ed0:	30 2c       	jc	$+98     	;abs 0xf32
     ed2:	31 36       	jge	$-924    	;abs 0xb36
     ed4:	3b 74       	subc	@r4+,	r11	
     ed6:	61 63       	addc.b	#2,	r1	;r3 As==10
     ed8:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
     eda:	32 3a       	jl	$-922    	;abs 0xb40
     edc:	28 30       	jn	$+82     	;abs 0xf2e
     ede:	2c 34       	jge	$+90     	;abs 0xf38
     ee0:	29 2c       	jc	$+84     	;abs 0xf34
     ee2:	31 37       	jge	$-412    	;abs 0xd46
     ee4:	36 2c       	jc	$+110    	;abs 0xf52
     ee6:	31 36       	jge	$-924    	;abs 0xb4a
     ee8:	3b 3b       	jl	$-392    	;abs 0xd60
     eea:	00 63       	adc	r0		
     eec:	3a 2f       	jc	$-394    	;abs 0xd62
     eee:	6d 73       	subc.b	#2,	r13	;r3 As==10
     ef0:	70 67       	addc.b	@r7+,	r0	
     ef2:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
     ef4:	2f 6d       	addc	@r13,	r15	
     ef6:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
     ef8:	34 33       	jn	$-406    	;abs 0xd62
     efa:	30 2f       	jc	$-414    	;abs 0xd5c
     efc:	69 6e       	addc.b	@r14,	r9	
     efe:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     f00:	75 64       	addc.b	@r4+,	r5	
     f02:	65 2f       	jc	$-308    	;abs 0xdce
     f04:	6d 73       	subc.b	#2,	r13	;r3 As==10
     f06:	70 34       	jge	$+226    	;abs 0xfe8
     f08:	33 30       	jn	$+104    	;abs 0xf70
     f0a:	2f 74       	subc	@r4,	r15	
     f0c:	69 6d       	addc.b	@r13,	r9	
     f0e:	65 72       	subc.b	#4,	r5	;r2 As==10
     f10:	62 2e       	jc	$-826    	;abs 0xbd6
     f12:	68 00 74 62 	mova	r0,	&0x86274
     f16:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
     f18:	6c 5f       	add.b	@r15,	r12	
     f1a:	74 3a       	jl	$-790    	;abs 0xc04
     f1c:	74 28       	jnc	$+234    	;abs 0x1006
     f1e:	31 38       	jl	$+100    	;abs 0xf82
     f20:	2c 31       	jn	$+602    	;abs 0x117a
     f22:	29 3d       	jmp	$+596    	;abs 0x1176
     f24:	28 31       	jn	$+594    	;abs 0x1176
     f26:	38 2c       	jc	$+114    	;abs 0xf98
     f28:	32 29       	jnc	$+614    	;abs 0x118e
     f2a:	3d 73       	subc	#-1,	r13	;r3 As==11
     f2c:	32 74       	subc	@r4+,	r2	
     f2e:	62 69       	addc.b	@r9,	r2	
     f30:	66 67       	addc.b	@r7,	r6	
     f32:	3a 28       	jnc	$+118    	;abs 0xfa8
     f34:	30 2c       	jc	$+98     	;abs 0xf96
     f36:	34 29       	jnc	$+618    	;abs 0x11a0
     f38:	2c 30       	jn	$+90     	;abs 0xf92
     f3a:	2c 31       	jn	$+602    	;abs 0x1194
     f3c:	3b 74       	subc	@r4+,	r11	
     f3e:	62 69       	addc.b	@r9,	r2	
     f40:	65 3a       	jl	$-820    	;abs 0xc0c
     f42:	28 30       	jn	$+82     	;abs 0xf94
     f44:	2c 34       	jge	$+90     	;abs 0xf9e
     f46:	29 2c       	jc	$+84     	;abs 0xf9a
     f48:	31 2c       	jc	$+100    	;abs 0xfac
     f4a:	31 3b       	jl	$-412    	;abs 0xdae
     f4c:	74 62       	addc.b	#8,	r4	;r2 As==11
     f4e:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     f50:	72 3a       	jl	$-794    	;abs 0xc36
     f52:	28 30       	jn	$+82     	;abs 0xfa4
     f54:	2c 34       	jge	$+90     	;abs 0xfae
     f56:	29 2c       	jc	$+84     	;abs 0xfaa
     f58:	32 2c       	jc	$+102    	;abs 0xfbe
     f5a:	31 3b       	jl	$-412    	;abs 0xdbe
     f5c:	64 75       	subc.b	@r5,	r4	
     f5e:	6d 6d       	addc.b	@r13,	r13	
     f60:	79 31       	jn	$+756    	;abs 0x1254
     f62:	3a 28       	jnc	$+118    	;abs 0xfd8
     f64:	30 2c       	jc	$+98     	;abs 0xfc6
     f66:	34 29       	jnc	$+618    	;abs 0x11d0
     f68:	2c 33       	jn	$-422    	;abs 0xdc2
     f6a:	2c 31       	jn	$+602    	;abs 0x11c4
     f6c:	3b 74       	subc	@r4+,	r11	
     f6e:	62 6d       	addc.b	@r13,	r2	
     f70:	63 3a       	jl	$-824    	;abs 0xc38
     f72:	28 30       	jn	$+82     	;abs 0xfc4
     f74:	2c 34       	jge	$+90     	;abs 0xfce
     f76:	29 2c       	jc	$+84     	;abs 0xfca
     f78:	34 2c       	jc	$+106    	;abs 0xfe2
     f7a:	32 3b       	jl	$-410    	;abs 0xde0
     f7c:	74 62       	addc.b	#8,	r4	;r2 As==11
     f7e:	69 64       	addc.b	@r4,	r9	
     f80:	3a 28       	jnc	$+118    	;abs 0xff6
     f82:	30 2c       	jc	$+98     	;abs 0xfe4
     f84:	34 29       	jnc	$+618    	;abs 0x11ee
     f86:	2c 36       	jge	$-934    	;abs 0xbe0
     f88:	2c 32       	jn	$-934    	;abs 0xbe2
     f8a:	3b 74       	subc	@r4+,	r11	
     f8c:	62 73       	subc.b	#2,	r2	;r3 As==10
     f8e:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
     f90:	6c 3a       	jl	$-806    	;abs 0xc6a
     f92:	28 30       	jn	$+82     	;abs 0xfe4
     f94:	2c 34       	jge	$+90     	;abs 0xfee
     f96:	29 2c       	jc	$+84     	;abs 0xfea
     f98:	38 2c       	jc	$+114    	;abs 0x100a
     f9a:	32 3b       	jl	$-410    	;abs 0xe00
     f9c:	64 75       	subc.b	@r5,	r4	
     f9e:	6d 6d       	addc.b	@r13,	r13	
     fa0:	79 32       	jn	$-780    	;abs 0xc94
     fa2:	3a 28       	jnc	$+118    	;abs 0x1018
     fa4:	30 2c       	jc	$+98     	;abs 0x1006
     fa6:	34 29       	jnc	$+618    	;abs 0x1210
     fa8:	2c 31       	jn	$+602    	;abs 0x1202
     faa:	30 2c       	jc	$+98     	;abs 0x100c
     fac:	31 3b       	jl	$-412    	;abs 0xe10
     fae:	74 62       	addc.b	#8,	r4	;r2 As==11
     fb0:	63 6e       	.word	0x6e63;	????	Illegal as 2-op instr
     fb2:	74 6c       	addc.b	@r12+,	r4	
     fb4:	3a 28       	jnc	$+118    	;abs 0x102a
     fb6:	30 2c       	jc	$+98     	;abs 0x1018
     fb8:	34 29       	jnc	$+618    	;abs 0x1222
     fba:	2c 31       	jn	$+602    	;abs 0x1214
     fbc:	31 2c       	jc	$+100    	;abs 0x1020
     fbe:	32 3b       	jl	$-410    	;abs 0xe24
     fc0:	74 62       	addc.b	#8,	r4	;r2 As==11
     fc2:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
     fc4:	67 72       	subc.b	#4,	r7	;r2 As==10
     fc6:	70 3a       	jl	$-798    	;abs 0xca8
     fc8:	28 30       	jn	$+82     	;abs 0x101a
     fca:	2c 34       	jge	$+90     	;abs 0x1024
     fcc:	29 2c       	jc	$+84     	;abs 0x1020
     fce:	31 33       	jn	$-412    	;abs 0xe32
     fd0:	2c 32       	jn	$-934    	;abs 0xc2a
     fd2:	3b 3b       	jl	$-392    	;abs 0xe4a
     fd4:	00 74       	subc	r4,	r0	
     fd6:	62 63       	addc.b	#2,	r2	;r3 As==10
     fd8:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
     fda:	6c 5f       	add.b	@r15,	r12	
     fdc:	74 3a       	jl	$-790    	;abs 0xcc6
     fde:	74 28       	jnc	$+234    	;abs 0x10c8
     fe0:	31 38       	jl	$+100    	;abs 0x1044
     fe2:	2c 33       	jn	$-422    	;abs 0xe3c
     fe4:	29 3d       	jmp	$+596    	;abs 0x1238
     fe6:	28 31       	jn	$+594    	;abs 0x1238
     fe8:	38 2c       	jc	$+114    	;abs 0x105a
     fea:	34 29       	jnc	$+618    	;abs 0x1254
     fec:	3d 73       	subc	#-1,	r13	;r3 As==11
     fee:	32 63       	addc	#-1,	r2	;r3 As==11
     ff0:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
     ff2:	66 67       	addc.b	@r7,	r6	
     ff4:	3a 28       	jnc	$+118    	;abs 0x106a
     ff6:	30 2c       	jc	$+98     	;abs 0x1058
     ff8:	34 29       	jnc	$+618    	;abs 0x1262
     ffa:	2c 30       	jn	$+90     	;abs 0x1054
     ffc:	2c 31       	jn	$+602    	;abs 0x1256
     ffe:	3b 63       	addc	#-1,	r11	;r3 As==11
    1000:	6f 76       	subc.b	@r6,	r15	
    1002:	3a 28       	jnc	$+118    	;abs 0x1078
    1004:	30 2c       	jc	$+98     	;abs 0x1066
    1006:	34 29       	jnc	$+618    	;abs 0x1270
    1008:	2c 31       	jn	$+602    	;abs 0x1262
    100a:	2c 31       	jn	$+602    	;abs 0x1264
    100c:	3b 6f       	addc	@r15+,	r11	
    100e:	75 74       	subc.b	@r4+,	r5	
    1010:	3a 28       	jnc	$+118    	;abs 0x1086
    1012:	30 2c       	jc	$+98     	;abs 0x1074
    1014:	34 29       	jnc	$+618    	;abs 0x127e
    1016:	2c 32       	jn	$-934    	;abs 0xc70
    1018:	2c 31       	jn	$+602    	;abs 0x1272
    101a:	3b 63       	addc	#-1,	r11	;r3 As==11
    101c:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
    101e:	3a 28       	jnc	$+118    	;abs 0x1094
    1020:	30 2c       	jc	$+98     	;abs 0x1082
    1022:	34 29       	jnc	$+618    	;abs 0x128c
    1024:	2c 33       	jn	$-422    	;abs 0xe7e
    1026:	2c 31       	jn	$+602    	;abs 0x1280
    1028:	3b 63       	addc	#-1,	r11	;r3 As==11
    102a:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
    102c:	65 3a       	jl	$-820    	;abs 0xcf8
    102e:	28 30       	jn	$+82     	;abs 0x1080
    1030:	2c 34       	jge	$+90     	;abs 0x108a
    1032:	29 2c       	jc	$+84     	;abs 0x1086
    1034:	34 2c       	jc	$+106    	;abs 0x109e
    1036:	31 3b       	jl	$-412    	;abs 0xe9a
    1038:	6f 75       	subc.b	@r5,	r15	
    103a:	74 6d       	addc.b	@r13+,	r4	
    103c:	6f 64       	addc.b	@r4,	r15	
    103e:	3a 28       	jnc	$+118    	;abs 0x10b4
    1040:	30 2c       	jc	$+98     	;abs 0x10a2
    1042:	34 29       	jnc	$+618    	;abs 0x12ac
    1044:	2c 35       	jge	$+602    	;abs 0x129e
    1046:	2c 33       	jn	$-422    	;abs 0xea0
    1048:	3b 63       	addc	#-1,	r11	;r3 As==11
    104a:	61 70       	subc.b	@r0,	r1	
    104c:	3a 28       	jnc	$+118    	;abs 0x10c2
    104e:	30 2c       	jc	$+98     	;abs 0x10b0
    1050:	34 29       	jnc	$+618    	;abs 0x12ba
    1052:	2c 38       	jl	$+90     	;abs 0x10ac
    1054:	2c 31       	jn	$+602    	;abs 0x12ae
    1056:	3b 63       	addc	#-1,	r11	;r3 As==11
    1058:	6c 6c       	addc.b	@r12,	r12	
    105a:	64 3a       	jl	$-822    	;abs 0xd24
    105c:	28 30       	jn	$+82     	;abs 0x10ae
    105e:	2c 34       	jge	$+90     	;abs 0x10b8
    1060:	29 2c       	jc	$+84     	;abs 0x10b4
    1062:	39 2c       	jc	$+116    	;abs 0x10d6
    1064:	32 3b       	jl	$-410    	;abs 0xeca
    1066:	73 63       	.word	0x6373;	????	Illegal as 2-op instr
    1068:	73 3a       	jl	$-792    	;abs 0xd50
    106a:	28 30       	jn	$+82     	;abs 0x10bc
    106c:	2c 34       	jge	$+90     	;abs 0x10c6
    106e:	29 2c       	jc	$+84     	;abs 0x10c2
    1070:	31 31       	jn	$+612    	;abs 0x12d4
    1072:	2c 31       	jn	$+602    	;abs 0x12cc
    1074:	3b 63       	addc	#-1,	r11	;r3 As==11
    1076:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
    1078:	73 3a       	jl	$-792    	;abs 0xd60
    107a:	28 30       	jn	$+82     	;abs 0x10cc
    107c:	2c 34       	jge	$+90     	;abs 0x10d6
    107e:	29 2c       	jc	$+84     	;abs 0x10d2
    1080:	31 32       	jn	$-924    	;abs 0xce4
    1082:	2c 32       	jn	$-934    	;abs 0xcdc
    1084:	3b 63       	addc	#-1,	r11	;r3 As==11
    1086:	6d 3a       	jl	$-804    	;abs 0xd62
    1088:	28 30       	jn	$+82     	;abs 0x10da
    108a:	2c 34       	jge	$+90     	;abs 0x10e4
    108c:	29 2c       	jc	$+84     	;abs 0x10e0
    108e:	31 34       	jge	$+100    	;abs 0x10f2
    1090:	2c 32       	jn	$-934    	;abs 0xcea
    1092:	3b 3b       	jl	$-392    	;abs 0xf0a
    1094:	00 74       	subc	r4,	r0	
    1096:	69 6d       	addc.b	@r13,	r9	
    1098:	65 72       	subc.b	#4,	r5	;r2 As==10
    109a:	62 5f       	add.b	@r15,	r2	
    109c:	74 3a       	jl	$-790    	;abs 0xd86
    109e:	54 28       	jnc	$+170    	;abs 0x1148
    10a0:	31 38       	jl	$+100    	;abs 0x1104
    10a2:	2c 35       	jge	$+602    	;abs 0x12fc
    10a4:	29 3d       	jmp	$+596    	;abs 0x12f8
    10a6:	73 33       	jn	$-280    	;abs 0xf8e
    10a8:	32 63       	addc	#-1,	r2	;r3 As==11
    10aa:	74 6c       	addc.b	@r12+,	r4	
    10ac:	3a 28       	jnc	$+118    	;abs 0x1122
    10ae:	31 38       	jl	$+100    	;abs 0x1112
    10b0:	2c 31       	jn	$+602    	;abs 0x130a
    10b2:	29 2c       	jc	$+84     	;abs 0x1106
    10b4:	30 2c       	jc	$+98     	;abs 0x1116
    10b6:	31 36       	jge	$-924    	;abs 0xd1a
    10b8:	3b 63       	addc	#-1,	r11	;r3 As==11
    10ba:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    10bc:	6c 30       	jn	$+218    	;abs 0x1196
    10be:	3a 28       	jnc	$+118    	;abs 0x1134
    10c0:	31 38       	jl	$+100    	;abs 0x1124
    10c2:	2c 33       	jn	$-422    	;abs 0xf1c
    10c4:	29 2c       	jc	$+84     	;abs 0x1118
    10c6:	31 36       	jge	$-924    	;abs 0xd2a
    10c8:	2c 31       	jn	$+602    	;abs 0x1322
    10ca:	36 3b       	jl	$-402    	;abs 0xf38
    10cc:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    10ce:	74 6c       	addc.b	@r12+,	r4	
    10d0:	31 3a       	jl	$-924    	;abs 0xd34
    10d2:	28 31       	jn	$+594    	;abs 0x1324
    10d4:	38 2c       	jc	$+114    	;abs 0x1146
    10d6:	33 29       	jnc	$+616    	;abs 0x133e
    10d8:	2c 33       	jn	$-422    	;abs 0xf32
    10da:	32 2c       	jc	$+102    	;abs 0x1140
    10dc:	31 36       	jge	$-924    	;abs 0xd40
    10de:	3b 63       	addc	#-1,	r11	;r3 As==11
    10e0:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    10e2:	6c 32       	jn	$-806    	;abs 0xdbc
    10e4:	3a 28       	jnc	$+118    	;abs 0x115a
    10e6:	31 38       	jl	$+100    	;abs 0x114a
    10e8:	2c 33       	jn	$-422    	;abs 0xf42
    10ea:	29 2c       	jc	$+84     	;abs 0x113e
    10ec:	34 38       	jl	$+106    	;abs 0x1156
    10ee:	2c 31       	jn	$+602    	;abs 0x1348
    10f0:	36 3b       	jl	$-402    	;abs 0xf5e
    10f2:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    10f4:	74 6c       	addc.b	@r12+,	r4	
    10f6:	33 3a       	jl	$-920    	;abs 0xd5e
    10f8:	28 31       	jn	$+594    	;abs 0x134a
    10fa:	38 2c       	jc	$+114    	;abs 0x116c
    10fc:	33 29       	jnc	$+616    	;abs 0x1364
    10fe:	2c 36       	jge	$-934    	;abs 0xd58
    1100:	34 2c       	jc	$+106    	;abs 0x116a
    1102:	31 36       	jge	$-924    	;abs 0xd66
    1104:	3b 63       	addc	#-1,	r11	;r3 As==11
    1106:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    1108:	6c 34       	jge	$+218    	;abs 0x11e2
    110a:	3a 28       	jnc	$+118    	;abs 0x1180
    110c:	31 38       	jl	$+100    	;abs 0x1170
    110e:	2c 33       	jn	$-422    	;abs 0xf68
    1110:	29 2c       	jc	$+84     	;abs 0x1164
    1112:	38 30       	jn	$+114    	;abs 0x1184
    1114:	2c 31       	jn	$+602    	;abs 0x136e
    1116:	36 3b       	jl	$-402    	;abs 0xf84
    1118:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    111a:	74 6c       	addc.b	@r12+,	r4	
    111c:	35 3a       	jl	$-916    	;abs 0xd88
    111e:	28 31       	jn	$+594    	;abs 0x1370
    1120:	38 2c       	jc	$+114    	;abs 0x1192
    1122:	33 29       	jnc	$+616    	;abs 0x138a
    1124:	2c 39       	jl	$+602    	;abs 0x137e
    1126:	36 2c       	jc	$+110    	;abs 0x1194
    1128:	31 36       	jge	$-924    	;abs 0xd8c
    112a:	3b 63       	addc	#-1,	r11	;r3 As==11
    112c:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    112e:	6c 36       	jge	$-806    	;abs 0xe08
    1130:	3a 28       	jnc	$+118    	;abs 0x11a6
    1132:	31 38       	jl	$+100    	;abs 0x1196
    1134:	2c 33       	jn	$-422    	;abs 0xf8e
    1136:	29 2c       	jc	$+84     	;abs 0x118a
    1138:	31 31       	jn	$+612    	;abs 0x139c
    113a:	32 2c       	jc	$+102    	;abs 0x11a0
    113c:	31 36       	jge	$-924    	;abs 0xda0
    113e:	3b 74       	subc	@r4+,	r11	
    1140:	62 72       	subc.b	#4,	r2	;r2 As==10
    1142:	3a 28       	jnc	$+118    	;abs 0x11b8
    1144:	30 2c       	jc	$+98     	;abs 0x11a6
    1146:	34 29       	jnc	$+618    	;abs 0x13b0
    1148:	2c 31       	jn	$+602    	;abs 0x13a2
    114a:	32 38       	jl	$+102    	;abs 0x11b0
    114c:	2c 31       	jn	$+602    	;abs 0x13a6
    114e:	36 3b       	jl	$-402    	;abs 0xfbc
    1150:	74 62       	addc.b	#8,	r4	;r2 As==11
    1152:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    1154:	72 30       	jn	$+230    	;abs 0x123a
    1156:	3a 28       	jnc	$+118    	;abs 0x11cc
    1158:	30 2c       	jc	$+98     	;abs 0x11ba
    115a:	34 29       	jnc	$+618    	;abs 0x13c4
    115c:	2c 31       	jn	$+602    	;abs 0x13b6
    115e:	34 34       	jge	$+106    	;abs 0x11c8
    1160:	2c 31       	jn	$+602    	;abs 0x13ba
    1162:	36 3b       	jl	$-402    	;abs 0xfd0
    1164:	74 62       	addc.b	#8,	r4	;r2 As==11
    1166:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    1168:	72 31       	jn	$+742    	;abs 0x144e
    116a:	3a 28       	jnc	$+118    	;abs 0x11e0
    116c:	30 2c       	jc	$+98     	;abs 0x11ce
    116e:	34 29       	jnc	$+618    	;abs 0x13d8
    1170:	2c 31       	jn	$+602    	;abs 0x13ca
    1172:	36 30       	jn	$+110    	;abs 0x11e0
    1174:	2c 31       	jn	$+602    	;abs 0x13ce
    1176:	36 3b       	jl	$-402    	;abs 0xfe4
    1178:	74 62       	addc.b	#8,	r4	;r2 As==11
    117a:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    117c:	72 32       	jn	$-794    	;abs 0xe62
    117e:	3a 28       	jnc	$+118    	;abs 0x11f4
    1180:	30 2c       	jc	$+98     	;abs 0x11e2
    1182:	34 29       	jnc	$+618    	;abs 0x13ec
    1184:	2c 31       	jn	$+602    	;abs 0x13de
    1186:	37 36       	jge	$-912    	;abs 0xdf6
    1188:	2c 31       	jn	$+602    	;abs 0x13e2
    118a:	36 3b       	jl	$-402    	;abs 0xff8
    118c:	74 62       	addc.b	#8,	r4	;r2 As==11
    118e:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    1190:	72 33       	jn	$-282    	;abs 0x1076
    1192:	3a 28       	jnc	$+118    	;abs 0x1208
    1194:	30 2c       	jc	$+98     	;abs 0x11f6
    1196:	34 29       	jnc	$+618    	;abs 0x1400
    1198:	2c 31       	jn	$+602    	;abs 0x13f2
    119a:	39 32       	jn	$-908    	;abs 0xe0e
    119c:	2c 31       	jn	$+602    	;abs 0x13f6
    119e:	36 3b       	jl	$-402    	;abs 0x100c
    11a0:	74 62       	addc.b	#8,	r4	;r2 As==11
    11a2:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    11a4:	72 34       	jge	$+230    	;abs 0x128a
    11a6:	3a 28       	jnc	$+118    	;abs 0x121c
    11a8:	30 2c       	jc	$+98     	;abs 0x120a
    11aa:	34 29       	jnc	$+618    	;abs 0x1414
    11ac:	2c 32       	jn	$-934    	;abs 0xe06
    11ae:	30 38       	jl	$+98     	;abs 0x1210
    11b0:	2c 31       	jn	$+602    	;abs 0x140a
    11b2:	36 3b       	jl	$-402    	;abs 0x1020
    11b4:	74 62       	addc.b	#8,	r4	;r2 As==11
    11b6:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    11b8:	72 35       	jge	$+742    	;abs 0x149e
    11ba:	3a 28       	jnc	$+118    	;abs 0x1230
    11bc:	30 2c       	jc	$+98     	;abs 0x121e
    11be:	34 29       	jnc	$+618    	;abs 0x1428
    11c0:	2c 32       	jn	$-934    	;abs 0xe1a
    11c2:	32 34       	jge	$+102    	;abs 0x1228
    11c4:	2c 31       	jn	$+602    	;abs 0x141e
    11c6:	36 3b       	jl	$-402    	;abs 0x1034
    11c8:	74 62       	addc.b	#8,	r4	;r2 As==11
    11ca:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    11cc:	72 36       	jge	$-794    	;abs 0xeb2
    11ce:	3a 28       	jnc	$+118    	;abs 0x1244
    11d0:	30 2c       	jc	$+98     	;abs 0x1232
    11d2:	34 29       	jnc	$+618    	;abs 0x143c
    11d4:	2c 32       	jn	$-934    	;abs 0xe2e
    11d6:	34 30       	jn	$+106    	;abs 0x1240
    11d8:	2c 31       	jn	$+602    	;abs 0x1432
    11da:	36 3b       	jl	$-402    	;abs 0x1048
    11dc:	3b 00 63 3a 	mova	0x3a63,	r11	;PC rel. 0x04c41
    11e0:	2f 6d       	addc	@r13,	r15	
    11e2:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    11e4:	67 63       	addc.b	#2,	r7	;r3 As==10
    11e6:	63 2f       	jc	$-312    	;abs 0x10ae
    11e8:	6d 73       	subc.b	#2,	r13	;r3 As==10
    11ea:	70 34       	jge	$+226    	;abs 0x12cc
    11ec:	33 30       	jn	$+104    	;abs 0x1254
    11ee:	2f 69       	addc	@r9,	r15	
    11f0:	6e 63       	addc.b	#2,	r14	;r3 As==10
    11f2:	6c 75       	subc.b	@r5,	r12	
    11f4:	64 65       	addc.b	@r5,	r4	
    11f6:	2f 6d       	addc	@r13,	r15	
    11f8:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    11fa:	34 33       	jn	$-406    	;abs 0x1064
    11fc:	30 2f       	jc	$-414    	;abs 0x105e
    11fe:	62 61       	addc.b	@r1,	r2	
    1200:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
    1202:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    1204:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    1206:	6f 63       	addc.b	#2,	r15	;r3 As==10
    1208:	6b 2e       	jc	$-808    	;abs 0xee0
    120a:	68 00 63 3a 	mova	r0,	&0x83a63
    120e:	2f 6d       	addc	@r13,	r15	
    1210:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1212:	67 63       	addc.b	#2,	r7	;r3 As==10
    1214:	63 2f       	jc	$-312    	;abs 0x10dc
    1216:	6d 73       	subc.b	#2,	r13	;r3 As==10
    1218:	70 34       	jge	$+226    	;abs 0x12fa
    121a:	33 30       	jn	$+104    	;abs 0x1282
    121c:	2f 69       	addc	@r9,	r15	
    121e:	6e 63       	addc.b	#2,	r14	;r3 As==10
    1220:	6c 75       	subc.b	@r5,	r12	
    1222:	64 65       	addc.b	@r5,	r4	
    1224:	2f 6d       	addc	@r13,	r15	
    1226:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1228:	34 33       	jn	$-406    	;abs 0x1092
    122a:	30 2f       	jc	$-414    	;abs 0x108c
    122c:	66 6c       	addc.b	@r12,	r6	
    122e:	61 73       	subc.b	#2,	r1	;r3 As==10
    1230:	68 2e       	jc	$-814    	;abs 0xf02
    1232:	68 00 63 3a 	mova	r0,	&0x83a63
    1236:	2f 6d       	addc	@r13,	r15	
    1238:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    123a:	67 63       	addc.b	#2,	r7	;r3 As==10
    123c:	63 2f       	jc	$-312    	;abs 0x1104
    123e:	6d 73       	subc.b	#2,	r13	;r3 As==10
    1240:	70 34       	jge	$+226    	;abs 0x1322
    1242:	33 30       	jn	$+104    	;abs 0x12aa
    1244:	2f 69       	addc	@r9,	r15	
    1246:	6e 63       	addc.b	#2,	r14	;r3 As==10
    1248:	6c 75       	subc.b	@r5,	r12	
    124a:	64 65       	addc.b	@r5,	r4	
    124c:	2f 6d       	addc	@r13,	r15	
    124e:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1250:	34 33       	jn	$-406    	;abs 0x10ba
    1252:	30 2f       	jc	$-414    	;abs 0x10b4
    1254:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    1256:	6d 70       	subc.b	@r0,	r13	
    1258:	61 2e       	jc	$-828    	;abs 0xf1c
    125a:	68 00 63 3a 	mova	r0,	&0x83a63
    125e:	2f 6d       	addc	@r13,	r15	
    1260:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1262:	67 63       	addc.b	#2,	r7	;r3 As==10
    1264:	63 2f       	jc	$-312    	;abs 0x112c
    1266:	6d 73       	subc.b	#2,	r13	;r3 As==10
    1268:	70 34       	jge	$+226    	;abs 0x134a
    126a:	33 30       	jn	$+104    	;abs 0x12d2
    126c:	2f 69       	addc	@r9,	r15	
    126e:	6e 63       	addc.b	#2,	r14	;r3 As==10
    1270:	6c 75       	subc.b	@r5,	r12	
    1272:	64 65       	addc.b	@r5,	r4	
    1274:	2f 6d       	addc	@r13,	r15	
    1276:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1278:	34 33       	jn	$-406    	;abs 0x10e2
    127a:	30 2f       	jc	$-414    	;abs 0x10dc
    127c:	61 64       	addc.b	@r4,	r1	
    127e:	63 31       	jn	$+712    	;abs 0x1546
    1280:	32 2e       	jc	$-922    	;abs 0xee6
    1282:	68 00 61 64 	mova	r0,	&0x86461
    1286:	63 31       	jn	$+712    	;abs 0x154e
    1288:	32 63       	addc	#-1,	r2	;r3 As==11
    128a:	74 6c       	addc.b	@r12+,	r4	
    128c:	30 5f       	add	@r15+,	r0	
    128e:	74 3a       	jl	$-790    	;abs 0xf78
    1290:	74 28       	jnc	$+234    	;abs 0x137a
    1292:	32 32       	jn	$-922    	;abs 0xef8
    1294:	2c 31       	jn	$+602    	;abs 0x14ee
    1296:	29 3d       	jmp	$+596    	;abs 0x14ea
    1298:	28 32       	jn	$-942    	;abs 0xeea
    129a:	32 2c       	jc	$+102    	;abs 0x1300
    129c:	32 29       	jnc	$+614    	;abs 0x1502
    129e:	3d 73       	subc	#-1,	r13	;r3 As==11
    12a0:	32 61       	addc	@r1+,	r2	
    12a2:	64 63       	addc.b	#2,	r4	;r3 As==10
    12a4:	31 32       	jn	$-924    	;abs 0xf08
    12a6:	73 63       	.word	0x6373;	????	Illegal as 2-op instr
    12a8:	3a 28       	jnc	$+118    	;abs 0x131e
    12aa:	30 2c       	jc	$+98     	;abs 0x130c
    12ac:	34 29       	jnc	$+618    	;abs 0x1516
    12ae:	2c 30       	jn	$+90     	;abs 0x1308
    12b0:	2c 31       	jn	$+602    	;abs 0x150a
    12b2:	3b 65       	addc	@r5+,	r11	
    12b4:	6e 63       	addc.b	#2,	r14	;r3 As==10
    12b6:	3a 28       	jnc	$+118    	;abs 0x132c
    12b8:	30 2c       	jc	$+98     	;abs 0x131a
    12ba:	34 29       	jnc	$+618    	;abs 0x1524
    12bc:	2c 31       	jn	$+602    	;abs 0x1516
    12be:	2c 31       	jn	$+602    	;abs 0x1518
    12c0:	3b 61       	addc	@r1+,	r11	
    12c2:	64 63       	addc.b	#2,	r4	;r3 As==10
    12c4:	31 32       	jn	$-924    	;abs 0xf28
    12c6:	74 6f       	addc.b	@r15+,	r4	
    12c8:	76 69       	addc.b	@r9+,	r6	
    12ca:	65 3a       	jl	$-820    	;abs 0xf96
    12cc:	28 30       	jn	$+82     	;abs 0x131e
    12ce:	2c 34       	jge	$+90     	;abs 0x1328
    12d0:	29 2c       	jc	$+84     	;abs 0x1324
    12d2:	32 2c       	jc	$+102    	;abs 0x1338
    12d4:	31 3b       	jl	$-412    	;abs 0x1138
    12d6:	61 64       	addc.b	@r4,	r1	
    12d8:	63 31       	jn	$+712    	;abs 0x15a0
    12da:	32 6f       	addc	@r15+,	r2	
    12dc:	76 69       	addc.b	@r9+,	r6	
    12de:	65 3a       	jl	$-820    	;abs 0xfaa
    12e0:	28 30       	jn	$+82     	;abs 0x1332
    12e2:	2c 34       	jge	$+90     	;abs 0x133c
    12e4:	29 2c       	jc	$+84     	;abs 0x1338
    12e6:	33 2c       	jc	$+104    	;abs 0x134e
    12e8:	31 3b       	jl	$-412    	;abs 0x114c
    12ea:	61 64       	addc.b	@r4,	r1	
    12ec:	63 31       	jn	$+712    	;abs 0x15b4
    12ee:	32 6f       	addc	@r15+,	r2	
    12f0:	6e 3a       	jl	$-802    	;abs 0xfce
    12f2:	28 30       	jn	$+82     	;abs 0x1344
    12f4:	2c 34       	jge	$+90     	;abs 0x134e
    12f6:	29 2c       	jc	$+84     	;abs 0x134a
    12f8:	34 2c       	jc	$+106    	;abs 0x1362
    12fa:	31 3b       	jl	$-412    	;abs 0x115e
    12fc:	72 65       	addc.b	@r5+,	r2	
    12fe:	66 6f       	addc.b	@r15,	r6	
    1300:	6e 3a       	jl	$-802    	;abs 0xfde
    1302:	28 30       	jn	$+82     	;abs 0x1354
    1304:	2c 34       	jge	$+90     	;abs 0x135e
    1306:	29 2c       	jc	$+84     	;abs 0x135a
    1308:	35 2c       	jc	$+108    	;abs 0x1374
    130a:	31 3b       	jl	$-412    	;abs 0x116e
    130c:	72 32       	jn	$-794    	;abs 0xff2
    130e:	5f 35       	jge	$+704    	;abs 0x15ce
    1310:	76 3a       	jl	$-786    	;abs 0xffe
    1312:	28 30       	jn	$+82     	;abs 0x1364
    1314:	2c 34       	jge	$+90     	;abs 0x136e
    1316:	29 2c       	jc	$+84     	;abs 0x136a
    1318:	36 2c       	jc	$+110    	;abs 0x1386
    131a:	31 3b       	jl	$-412    	;abs 0x117e
    131c:	6d 73       	subc.b	#2,	r13	;r3 As==10
    131e:	63 3a       	jl	$-824    	;abs 0xfe6
    1320:	28 30       	jn	$+82     	;abs 0x1372
    1322:	2c 34       	jge	$+90     	;abs 0x137c
    1324:	29 2c       	jc	$+84     	;abs 0x1378
    1326:	37 2c       	jc	$+112    	;abs 0x1396
    1328:	31 3b       	jl	$-412    	;abs 0x118c
    132a:	73 68       	.word	0x6873;	????	Illegal as 2-op instr
    132c:	74 30       	jn	$+234    	;abs 0x1416
    132e:	3a 28       	jnc	$+118    	;abs 0x13a4
    1330:	30 2c       	jc	$+98     	;abs 0x1392
    1332:	34 29       	jnc	$+618    	;abs 0x159c
    1334:	2c 38       	jl	$+90     	;abs 0x138e
    1336:	2c 34       	jge	$+90     	;abs 0x1390
    1338:	3b 73       	subc	#-1,	r11	;r3 As==11
    133a:	68 74       	subc.b	@r4,	r8	
    133c:	31 3a       	jl	$-924    	;abs 0xfa0
    133e:	28 30       	jn	$+82     	;abs 0x1390
    1340:	2c 34       	jge	$+90     	;abs 0x139a
    1342:	29 2c       	jc	$+84     	;abs 0x1396
    1344:	31 32       	jn	$-924    	;abs 0xfa8
    1346:	2c 34       	jge	$+90     	;abs 0x13a0
    1348:	3b 3b       	jl	$-392    	;abs 0x11c0
    134a:	00 61       	addc	r1,	r0	
    134c:	64 63       	addc.b	#2,	r4	;r3 As==10
    134e:	31 32       	jn	$-924    	;abs 0xfb2
    1350:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    1352:	6c 31       	jn	$+730    	;abs 0x162c
    1354:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
    1358:	28 32       	jn	$-942    	;abs 0xfaa
    135a:	32 2c       	jc	$+102    	;abs 0x13c0
    135c:	33 29       	jnc	$+616    	;abs 0x15c4
    135e:	3d 28       	jnc	$+124    	;abs 0x13da
    1360:	32 32       	jn	$-922    	;abs 0xfc6
    1362:	2c 34       	jge	$+90     	;abs 0x13bc
    1364:	29 3d       	jmp	$+596    	;abs 0x15b8
    1366:	73 32       	jn	$-792    	;abs 0x104e
    1368:	61 64       	addc.b	@r4,	r1	
    136a:	63 31       	jn	$+712    	;abs 0x1632
    136c:	32 62       	addc	#8,	r2	;r2 As==11
    136e:	75 73       	subc.b	#-1,	r5	;r3 As==11
    1370:	79 3a       	jl	$-780    	;abs 0x1064
    1372:	28 30       	jn	$+82     	;abs 0x13c4
    1374:	2c 34       	jge	$+90     	;abs 0x13ce
    1376:	29 2c       	jc	$+84     	;abs 0x13ca
    1378:	30 2c       	jc	$+98     	;abs 0x13da
    137a:	31 3b       	jl	$-412    	;abs 0x11de
    137c:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    137e:	6e 73       	subc.b	#2,	r14	;r3 As==10
    1380:	65 71       	subc.b	@r1,	r5	
    1382:	3a 28       	jnc	$+118    	;abs 0x13f8
    1384:	30 2c       	jc	$+98     	;abs 0x13e6
    1386:	34 29       	jnc	$+618    	;abs 0x15f0
    1388:	2c 31       	jn	$+602    	;abs 0x15e2
    138a:	2c 32       	jn	$-934    	;abs 0xfe4
    138c:	3b 61       	addc	@r1+,	r11	
    138e:	64 63       	addc.b	#2,	r4	;r3 As==10
    1390:	31 32       	jn	$-924    	;abs 0xff4
    1392:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    1394:	65 6c       	addc.b	@r12,	r5	
    1396:	3a 28       	jnc	$+118    	;abs 0x140c
    1398:	30 2c       	jc	$+98     	;abs 0x13fa
    139a:	34 29       	jnc	$+618    	;abs 0x1604
    139c:	2c 33       	jn	$-422    	;abs 0x11f6
    139e:	2c 32       	jn	$-934    	;abs 0xff8
    13a0:	3b 61       	addc	@r1+,	r11	
    13a2:	64 63       	addc.b	#2,	r4	;r3 As==10
    13a4:	31 32       	jn	$-924    	;abs 0x1008
    13a6:	64 69       	addc.b	@r9,	r4	
    13a8:	76 3a       	jl	$-786    	;abs 0x1096
    13aa:	28 30       	jn	$+82     	;abs 0x13fc
    13ac:	2c 34       	jge	$+90     	;abs 0x1406
    13ae:	29 2c       	jc	$+84     	;abs 0x1402
    13b0:	35 2c       	jc	$+108    	;abs 0x141c
    13b2:	33 3b       	jl	$-408    	;abs 0x121a
    13b4:	69 73       	subc.b	#2,	r9	;r3 As==10
    13b6:	73 68       	.word	0x6873;	????	Illegal as 2-op instr
    13b8:	3a 28       	jnc	$+118    	;abs 0x142e
    13ba:	30 2c       	jc	$+98     	;abs 0x141c
    13bc:	34 29       	jnc	$+618    	;abs 0x1626
    13be:	2c 38       	jl	$+90     	;abs 0x1418
    13c0:	2c 31       	jn	$+602    	;abs 0x161a
    13c2:	3b 73       	subc	#-1,	r11	;r3 As==11
    13c4:	68 70       	subc.b	@r0,	r8	
    13c6:	3a 28       	jnc	$+118    	;abs 0x143c
    13c8:	30 2c       	jc	$+98     	;abs 0x142a
    13ca:	34 29       	jnc	$+618    	;abs 0x1634
    13cc:	2c 39       	jl	$+602    	;abs 0x1626
    13ce:	2c 31       	jn	$+602    	;abs 0x1628
    13d0:	3b 73       	subc	#-1,	r11	;r3 As==11
    13d2:	68 73       	subc.b	#2,	r8	;r3 As==10
    13d4:	3a 28       	jnc	$+118    	;abs 0x144a
    13d6:	30 2c       	jc	$+98     	;abs 0x1438
    13d8:	34 29       	jnc	$+618    	;abs 0x1642
    13da:	2c 31       	jn	$+602    	;abs 0x1634
    13dc:	30 2c       	jc	$+98     	;abs 0x143e
    13de:	32 3b       	jl	$-410    	;abs 0x1244
    13e0:	63 73       	.word	0x7363;	????	Illegal as 2-op instr
    13e2:	74 61       	addc.b	@r1+,	r4	
    13e4:	72 74       	subc.b	@r4+,	r2	
    13e6:	61 64       	addc.b	@r4,	r1	
    13e8:	64 3a       	jl	$-822    	;abs 0x10b2
    13ea:	28 30       	jn	$+82     	;abs 0x143c
    13ec:	2c 34       	jge	$+90     	;abs 0x1446
    13ee:	29 2c       	jc	$+84     	;abs 0x1442
    13f0:	31 32       	jn	$-924    	;abs 0x1054
    13f2:	2c 34       	jge	$+90     	;abs 0x144c
    13f4:	3b 3b       	jl	$-392    	;abs 0x126c
    13f6:	00 61       	addc	r1,	r0	
    13f8:	64 63       	addc.b	#2,	r4	;r3 As==10
    13fa:	31 32       	jn	$-924    	;abs 0x105e
    13fc:	78 66       	addc.b	@r6+,	r8	
    13fe:	6c 67       	addc.b	@r7,	r12	
    1400:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
    1404:	28 32       	jn	$-942    	;abs 0x1056
    1406:	32 2c       	jc	$+102    	;abs 0x146c
    1408:	35 29       	jnc	$+620    	;abs 0x1674
    140a:	3d 28       	jnc	$+124    	;abs 0x1486
    140c:	32 32       	jn	$-922    	;abs 0x1072
    140e:	2c 36       	jge	$-934    	;abs 0x1068
    1410:	29 3d       	jmp	$+596    	;abs 0x1664
    1412:	73 32       	jn	$-792    	;abs 0x10fa
    1414:	62 69       	addc.b	@r9,	r2	
    1416:	74 30       	jn	$+234    	;abs 0x1500
    1418:	3a 28       	jnc	$+118    	;abs 0x148e
    141a:	30 2c       	jc	$+98     	;abs 0x147c
    141c:	34 29       	jnc	$+618    	;abs 0x1686
    141e:	2c 30       	jn	$+90     	;abs 0x1478
    1420:	2c 31       	jn	$+602    	;abs 0x167a
    1422:	3b 62       	addc	#8,	r11	;r2 As==11
    1424:	69 74       	subc.b	@r4,	r9	
    1426:	31 3a       	jl	$-924    	;abs 0x108a
    1428:	28 30       	jn	$+82     	;abs 0x147a
    142a:	2c 34       	jge	$+90     	;abs 0x1484
    142c:	29 2c       	jc	$+84     	;abs 0x1480
    142e:	31 2c       	jc	$+100    	;abs 0x1492
    1430:	31 3b       	jl	$-412    	;abs 0x1294
    1432:	62 69       	addc.b	@r9,	r2	
    1434:	74 32       	jn	$-790    	;abs 0x111e
    1436:	3a 28       	jnc	$+118    	;abs 0x14ac
    1438:	30 2c       	jc	$+98     	;abs 0x149a
    143a:	34 29       	jnc	$+618    	;abs 0x16a4
    143c:	2c 32       	jn	$-934    	;abs 0x1096
    143e:	2c 31       	jn	$+602    	;abs 0x1698
    1440:	3b 62       	addc	#8,	r11	;r2 As==11
    1442:	69 74       	subc.b	@r4,	r9	
    1444:	33 3a       	jl	$-920    	;abs 0x10ac
    1446:	28 30       	jn	$+82     	;abs 0x1498
    1448:	2c 34       	jge	$+90     	;abs 0x14a2
    144a:	29 2c       	jc	$+84     	;abs 0x149e
    144c:	33 2c       	jc	$+104    	;abs 0x14b4
    144e:	31 3b       	jl	$-412    	;abs 0x12b2
    1450:	62 69       	addc.b	@r9,	r2	
    1452:	74 34       	jge	$+234    	;abs 0x153c
    1454:	3a 28       	jnc	$+118    	;abs 0x14ca
    1456:	30 2c       	jc	$+98     	;abs 0x14b8
    1458:	34 29       	jnc	$+618    	;abs 0x16c2
    145a:	2c 34       	jge	$+90     	;abs 0x14b4
    145c:	2c 31       	jn	$+602    	;abs 0x16b6
    145e:	3b 62       	addc	#8,	r11	;r2 As==11
    1460:	69 74       	subc.b	@r4,	r9	
    1462:	35 3a       	jl	$-916    	;abs 0x10ce
    1464:	28 30       	jn	$+82     	;abs 0x14b6
    1466:	2c 34       	jge	$+90     	;abs 0x14c0
    1468:	29 2c       	jc	$+84     	;abs 0x14bc
    146a:	35 2c       	jc	$+108    	;abs 0x14d6
    146c:	31 3b       	jl	$-412    	;abs 0x12d0
    146e:	62 69       	addc.b	@r9,	r2	
    1470:	74 36       	jge	$-790    	;abs 0x115a
    1472:	3a 28       	jnc	$+118    	;abs 0x14e8
    1474:	30 2c       	jc	$+98     	;abs 0x14d6
    1476:	34 29       	jnc	$+618    	;abs 0x16e0
    1478:	2c 36       	jge	$-934    	;abs 0x10d2
    147a:	2c 31       	jn	$+602    	;abs 0x16d4
    147c:	3b 62       	addc	#8,	r11	;r2 As==11
    147e:	69 74       	subc.b	@r4,	r9	
    1480:	37 3a       	jl	$-912    	;abs 0x10f0
    1482:	28 30       	jn	$+82     	;abs 0x14d4
    1484:	2c 34       	jge	$+90     	;abs 0x14de
    1486:	29 2c       	jc	$+84     	;abs 0x14da
    1488:	37 2c       	jc	$+112    	;abs 0x14f8
    148a:	31 3b       	jl	$-412    	;abs 0x12ee
    148c:	62 69       	addc.b	@r9,	r2	
    148e:	74 38       	jl	$+234    	;abs 0x1578
    1490:	3a 28       	jnc	$+118    	;abs 0x1506
    1492:	30 2c       	jc	$+98     	;abs 0x14f4
    1494:	34 29       	jnc	$+618    	;abs 0x16fe
    1496:	2c 38       	jl	$+90     	;abs 0x14f0
    1498:	2c 31       	jn	$+602    	;abs 0x16f2
    149a:	3b 62       	addc	#8,	r11	;r2 As==11
    149c:	69 74       	subc.b	@r4,	r9	
    149e:	39 3a       	jl	$-908    	;abs 0x1112
    14a0:	28 30       	jn	$+82     	;abs 0x14f2
    14a2:	2c 34       	jge	$+90     	;abs 0x14fc
    14a4:	29 2c       	jc	$+84     	;abs 0x14f8
    14a6:	39 2c       	jc	$+116    	;abs 0x151a
    14a8:	31 3b       	jl	$-412    	;abs 0x130c
    14aa:	62 69       	addc.b	@r9,	r2	
    14ac:	74 31       	jn	$+746    	;abs 0x1796
    14ae:	30 3a       	jl	$-926    	;abs 0x1110
    14b0:	28 30       	jn	$+82     	;abs 0x1502
    14b2:	2c 34       	jge	$+90     	;abs 0x150c
    14b4:	29 2c       	jc	$+84     	;abs 0x1508
    14b6:	31 30       	jn	$+100    	;abs 0x151a
    14b8:	2c 31       	jn	$+602    	;abs 0x1712
    14ba:	3b 62       	addc	#8,	r11	;r2 As==11
    14bc:	69 74       	subc.b	@r4,	r9	
    14be:	31 31       	jn	$+612    	;abs 0x1722
    14c0:	3a 28       	jnc	$+118    	;abs 0x1536
    14c2:	30 2c       	jc	$+98     	;abs 0x1524
    14c4:	34 29       	jnc	$+618    	;abs 0x172e
    14c6:	2c 31       	jn	$+602    	;abs 0x1720
    14c8:	31 2c       	jc	$+100    	;abs 0x152c
    14ca:	31 3b       	jl	$-412    	;abs 0x132e
    14cc:	62 69       	addc.b	@r9,	r2	
    14ce:	74 31       	jn	$+746    	;abs 0x17b8
    14d0:	32 3a       	jl	$-922    	;abs 0x1136
    14d2:	28 30       	jn	$+82     	;abs 0x1524
    14d4:	2c 34       	jge	$+90     	;abs 0x152e
    14d6:	29 2c       	jc	$+84     	;abs 0x152a
    14d8:	31 32       	jn	$-924    	;abs 0x113c
    14da:	2c 31       	jn	$+602    	;abs 0x1734
    14dc:	3b 62       	addc	#8,	r11	;r2 As==11
    14de:	69 74       	subc.b	@r4,	r9	
    14e0:	31 33       	jn	$-412    	;abs 0x1344
    14e2:	3a 28       	jnc	$+118    	;abs 0x1558
    14e4:	30 2c       	jc	$+98     	;abs 0x1546
    14e6:	34 29       	jnc	$+618    	;abs 0x1750
    14e8:	2c 31       	jn	$+602    	;abs 0x1742
    14ea:	33 2c       	jc	$+104    	;abs 0x1552
    14ec:	31 3b       	jl	$-412    	;abs 0x1350
    14ee:	62 69       	addc.b	@r9,	r2	
    14f0:	74 31       	jn	$+746    	;abs 0x17da
    14f2:	34 3a       	jl	$-918    	;abs 0x115c
    14f4:	28 30       	jn	$+82     	;abs 0x1546
    14f6:	2c 34       	jge	$+90     	;abs 0x1550
    14f8:	29 2c       	jc	$+84     	;abs 0x154c
    14fa:	31 34       	jge	$+100    	;abs 0x155e
    14fc:	2c 31       	jn	$+602    	;abs 0x1756
    14fe:	3b 62       	addc	#8,	r11	;r2 As==11
    1500:	69 74       	subc.b	@r4,	r9	
    1502:	31 35       	jge	$+612    	;abs 0x1766
    1504:	3a 28       	jnc	$+118    	;abs 0x157a
    1506:	30 2c       	jc	$+98     	;abs 0x1568
    1508:	34 29       	jnc	$+618    	;abs 0x1772
    150a:	2c 31       	jn	$+602    	;abs 0x1764
    150c:	35 2c       	jc	$+108    	;abs 0x1578
    150e:	31 3b       	jl	$-412    	;abs 0x1372
    1510:	3b 00 61 64 	mova	0x6461,	r11	;PC rel. 0x07973
    1514:	63 31       	jn	$+712    	;abs 0x17dc
    1516:	32 5f       	add	@r15+,	r2	
    1518:	74 3a       	jl	$-790    	;abs 0x1202
    151a:	54 28       	jnc	$+170    	;abs 0x15c4
    151c:	32 32       	jn	$-922    	;abs 0x1182
    151e:	2c 37       	jge	$-422    	;abs 0x1378
    1520:	29 3d       	jmp	$+596    	;abs 0x1774
    1522:	73 31       	jn	$+744    	;abs 0x180a
    1524:	30 63       	addc	#-1,	r0	;r3 As==11
    1526:	74 6c       	addc.b	@r12+,	r4	
    1528:	30 3a       	jl	$-926    	;abs 0x118a
    152a:	28 32       	jn	$-942    	;abs 0x117c
    152c:	32 2c       	jc	$+102    	;abs 0x1592
    152e:	31 29       	jnc	$+612    	;abs 0x1792
    1530:	2c 30       	jn	$+90     	;abs 0x158a
    1532:	2c 31       	jn	$+602    	;abs 0x178c
    1534:	36 3b       	jl	$-402    	;abs 0x13a2
    1536:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    1538:	6c 31       	jn	$+730    	;abs 0x1812
    153a:	3a 28       	jnc	$+118    	;abs 0x15b0
    153c:	32 32       	jn	$-922    	;abs 0x11a2
    153e:	2c 33       	jn	$-422    	;abs 0x1398
    1540:	29 2c       	jc	$+84     	;abs 0x1594
    1542:	31 36       	jge	$-924    	;abs 0x11a6
    1544:	2c 31       	jn	$+602    	;abs 0x179e
    1546:	36 3b       	jl	$-402    	;abs 0x13b4
    1548:	69 66       	addc.b	@r6,	r9	
    154a:	67 3a       	jl	$-816    	;abs 0x121a
    154c:	28 32       	jn	$-942    	;abs 0x119e
    154e:	32 2c       	jc	$+102    	;abs 0x15b4
    1550:	35 29       	jnc	$+620    	;abs 0x17bc
    1552:	2c 33       	jn	$-422    	;abs 0x13ac
    1554:	32 2c       	jc	$+102    	;abs 0x15ba
    1556:	31 36       	jge	$-924    	;abs 0x11ba
    1558:	3b 69       	addc	@r9+,	r11	
    155a:	65 3a       	jl	$-820    	;abs 0x1226
    155c:	28 32       	jn	$-942    	;abs 0x11ae
    155e:	32 2c       	jc	$+102    	;abs 0x15c4
    1560:	35 29       	jnc	$+620    	;abs 0x17cc
    1562:	2c 34       	jge	$+90     	;abs 0x15bc
    1564:	38 2c       	jc	$+114    	;abs 0x15d6
    1566:	31 36       	jge	$-924    	;abs 0x11ca
    1568:	3b 69       	addc	@r9+,	r11	
    156a:	76 3a       	jl	$-786    	;abs 0x1258
    156c:	28 32       	jn	$-942    	;abs 0x11be
    156e:	32 2c       	jc	$+102    	;abs 0x15d4
    1570:	35 29       	jnc	$+620    	;abs 0x17dc
    1572:	2c 36       	jge	$-934    	;abs 0x11cc
    1574:	34 2c       	jc	$+106    	;abs 0x15de
    1576:	31 36       	jge	$-924    	;abs 0x11da
    1578:	3b 3b       	jl	$-392    	;abs 0x13f0
    157a:	00 63       	adc	r0		
    157c:	3a 2f       	jc	$-394    	;abs 0x13f2
    157e:	6d 73       	subc.b	#2,	r13	;r3 As==10
    1580:	70 67       	addc.b	@r7+,	r0	
    1582:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    1584:	2f 6d       	addc	@r13,	r15	
    1586:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    1588:	34 33       	jn	$-406    	;abs 0x13f2
    158a:	30 2f       	jc	$-414    	;abs 0x13ec
    158c:	69 6e       	addc.b	@r14,	r9	
    158e:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    1590:	75 64       	addc.b	@r4+,	r5	
    1592:	65 2f       	jc	$-308    	;abs 0x145e
    1594:	6d 73       	subc.b	#2,	r13	;r3 As==10
    1596:	70 34       	jge	$+226    	;abs 0x1678
    1598:	33 30       	jn	$+104    	;abs 0x1600
    159a:	2f 64       	addc	@r4,	r15	
    159c:	61 63       	addc.b	#2,	r1	;r3 As==10
    159e:	31 32       	jn	$-924    	;abs 0x1202
    15a0:	2e 68       	addc	@r8,	r14	
    15a2:	00 63       	adc	r0		
    15a4:	3a 2f       	jc	$-394    	;abs 0x141a
    15a6:	6d 73       	subc.b	#2,	r13	;r3 As==10
    15a8:	70 67       	addc.b	@r7+,	r0	
    15aa:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    15ac:	2f 6d       	addc	@r13,	r15	
    15ae:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    15b0:	34 33       	jn	$-406    	;abs 0x141a
    15b2:	30 2f       	jc	$-414    	;abs 0x1414
    15b4:	69 6e       	addc.b	@r14,	r9	
    15b6:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    15b8:	75 64       	addc.b	@r4+,	r5	
    15ba:	65 2f       	jc	$-308    	;abs 0x1486
    15bc:	6d 73       	subc.b	#2,	r13	;r3 As==10
    15be:	70 34       	jge	$+226    	;abs 0x16a0
    15c0:	33 30       	jn	$+104    	;abs 0x1628
    15c2:	2f 64       	addc	@r4,	r15	
    15c4:	6d 61       	addc.b	@r1,	r13	
    15c6:	2e 68       	addc	@r8,	r14	
    15c8:	00 63       	adc	r0		
    15ca:	3a 2f       	jc	$-394    	;abs 0x1440
    15cc:	6d 73       	subc.b	#2,	r13	;r3 As==10
    15ce:	70 67       	addc.b	@r7+,	r0	
    15d0:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    15d2:	2f 6d       	addc	@r13,	r15	
    15d4:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    15d6:	34 33       	jn	$-406    	;abs 0x1440
    15d8:	30 2f       	jc	$-414    	;abs 0x143a
    15da:	69 6e       	addc.b	@r14,	r9	
    15dc:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    15de:	75 64       	addc.b	@r4+,	r5	
    15e0:	65 2f       	jc	$-308    	;abs 0x14ac
    15e2:	6d 73       	subc.b	#2,	r13	;r3 As==10
    15e4:	70 34       	jge	$+226    	;abs 0x16c6
    15e6:	33 30       	jn	$+104    	;abs 0x164e
    15e8:	2f 63       	addc	#2,	r15	;r3 As==10
    15ea:	6f 6d       	addc.b	@r13,	r15	
    15ec:	6d 6f       	addc.b	@r15,	r13	
    15ee:	6e 2e       	jc	$-802    	;abs 0x12cc
    15f0:	68 00 64 65 	mova	r0,	&0x86564
    15f4:	6c 61       	addc.b	@r1,	r12	
    15f6:	79 2e       	jc	$-780    	;abs 0x12ea
    15f8:	68 00 61 6e 	mova	r0,	&0x86e61
    15fc:	61 6c       	addc.b	@r12,	r1	
    15fe:	6f 67       	addc.b	@r7,	r15	
    1600:	2e 68       	addc	@r8,	r14	
    1602:	00 6c       	addc	r12,	r0	
    1604:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    1606:	36 31       	jn	$+622    	;abs 0x1874
    1608:	30 30       	jn	$+98     	;abs 0x166a
    160a:	2e 68       	addc	@r8,	r14	
    160c:	00 65       	addc	r5,	r0	
    160e:	65 70       	subc.b	@r0,	r5	
    1610:	72 6f       	addc.b	@r15+,	r2	
    1612:	6d 2e       	jc	$-804    	;abs 0x12ee
    1614:	68 00 66 6f 	mova	r0,	&0x86f66
    1618:	75 72       	subc.b	#8,	r5	;r2 As==11
    161a:	62 79       	subc.b	@r9,	r2	
    161c:	74 65       	addc.b	@r5+,	r4	
    161e:	73 3a       	jl	$-792    	;abs 0x1306
    1620:	74 28       	jnc	$+234    	;abs 0x170a
    1622:	32 39       	jl	$+614    	;abs 0x1888
    1624:	2c 31       	jn	$+602    	;abs 0x187e
    1626:	29 3d       	jmp	$+596    	;abs 0x187a
    1628:	28 32       	jn	$-942    	;abs 0x127a
    162a:	39 2c       	jc	$+116    	;abs 0x169e
    162c:	32 29       	jnc	$+614    	;abs 0x1892
    162e:	3d 75       	subc	@r5+,	r13	
    1630:	34 66       	addc	@r6+,	r4	
    1632:	3a 28       	jnc	$+118    	;abs 0x16a8
    1634:	30 2c       	jc	$+98     	;abs 0x1696
    1636:	31 32       	jn	$-924    	;abs 0x129a
    1638:	29 2c       	jc	$+84     	;abs 0x168c
    163a:	30 2c       	jc	$+98     	;abs 0x169c
    163c:	33 32       	jn	$-920    	;abs 0x12a4
    163e:	3b 63       	addc	#-1,	r11	;r3 As==11
    1640:	3a 28       	jnc	$+118    	;abs 0x16b6
    1642:	32 39       	jl	$+614    	;abs 0x18a8
    1644:	2c 33       	jn	$-422    	;abs 0x149e
    1646:	29 3d       	jmp	$+596    	;abs 0x189a
    1648:	61 72       	subc.b	#4,	r1	;r2 As==10
    164a:	28 31       	jn	$+594    	;abs 0x189c
    164c:	37 2c       	jc	$+112    	;abs 0x16bc
    164e:	37 29       	jnc	$+624    	;abs 0x18be
    1650:	3b 30       	jn	$+120    	;abs 0x16c8
    1652:	3b 33       	jn	$-392    	;abs 0x14ca
    1654:	3b 28       	jnc	$+120    	;abs 0x16cc
    1656:	30 2c       	jc	$+98     	;abs 0x16b8
    1658:	32 29       	jnc	$+614    	;abs 0x18be
    165a:	2c 30       	jn	$+90     	;abs 0x16b4
    165c:	2c 33       	jn	$-422    	;abs 0x14b6
    165e:	32 3b       	jl	$-410    	;abs 0x14c4
    1660:	3b 00 69 32 	mova	0x3269,	r11	;PC rel. 0x048cb
    1664:	63 2e       	jc	$-824    	;abs 0x132c
    1666:	68 00 6d 69 	mova	r0,	&0x8696d
    166a:	63 72       	.word	0x7263;	????	Illegal as 2-op instr
    166c:	6f 71       	subc.b	@r1,	r15	
    166e:	75 61       	addc.b	@r1+,	r5	
    1670:	64 2e       	jc	$-822    	;abs 0x133a
    1672:	68 00 20 3a 	mova	r0,	&0x83a20
    1676:	54 28       	jnc	$+170    	;abs 0x1720
    1678:	33 31       	jn	$+616    	;abs 0x18e0
    167a:	2c 31       	jn	$+602    	;abs 0x18d4
    167c:	29 3d       	jmp	$+596    	;abs 0x18d0
    167e:	65 44       	mov.b	@r4,	r5	
    1680:	49 53       	add.b	#0,	r9	;r3 As==00
    1682:	50 4c 41 59 	br	22849(r12)	;0x5941(r12)
    1686:	3a 30       	jn	$+118    	;abs 0x16fc
    1688:	2c 53       	incd	r12		
    168a:	45 4c       	mov.b	r12,	r5	
    168c:	45 43       	clr.b	r5		
    168e:	54 3a       	jl	$-854    	;abs 0x1338
    1690:	31 2c       	jc	$+100    	;abs 0x16f4
    1692:	57 41 49 54 	mov.b	21577(r1),r7	;0x5449(r1)
    1696:	5f 50 49 54 	add.b	0x5449,	r15	;PC rel. 0x06ae3
    169a:	43 48       	.word	0x4843;	????	Illegal as 2-op instr
    169c:	5f 44 4f 57 	mov.b	22351(r4),r15	;0x574f(r4)
    16a0:	4e 3a       	jl	$-866    	;abs 0x133e
    16a2:	32 2c       	jc	$+102    	;abs 0x1708
    16a4:	57 41 49 54 	mov.b	21577(r1),r7	;0x5449(r1)
    16a8:	5f 50 49 54 	add.b	0x5449,	r15	;PC rel. 0x06af5
    16ac:	43 48       	.word	0x4843;	????	Illegal as 2-op instr
    16ae:	5f 55 50 3a 	add.b	14928(r5),r15	;0x3a50(r5)
    16b2:	33 2c       	jc	$+104    	;abs 0x171a
    16b4:	57 41 49 54 	mov.b	21577(r1),r7	;0x5449(r1)
    16b8:	5f 43       	mov.b	#1,	r15	;r3 As==01
    16ba:	48 37       	jge	$-366    	;abs 0x154c
    16bc:	5f 42 41 43 	mov.b	&0x4341,r15	
    16c0:	4b 3a       	jl	$-872    	;abs 0x1358
    16c2:	34 2c       	jc	$+106    	;abs 0x172c
    16c4:	57 41 49 54 	mov.b	21577(r1),r7	;0x5449(r1)
    16c8:	5f 52 4f 4c 	add.b	&0x4c4f,r15	
    16cc:	4c 5f       	add.b	r15,	r12	
    16ce:	52 49 47 48 	mov.b	18503(r9),r2	;0x4847(r9)
    16d2:	54 3a       	jl	$-854    	;abs 0x137c
    16d4:	35 2c       	jc	$+108    	;abs 0x1740
    16d6:	57 41 49 54 	mov.b	21577(r1),r7	;0x5449(r1)
    16da:	5f 52 4f 4c 	add.b	&0x4c4f,r15	
    16de:	4c 5f       	add.b	r15,	r12	
    16e0:	4c 45       	mov.b	r5,	r12	
    16e2:	46 54       	add.b	r4,	r6	
    16e4:	3a 36       	jge	$-906    	;abs 0x135a
    16e6:	2c 50       	add	@r0,	r12	
    16e8:	52 4f 43 45 	mov.b	17731(r15),r2	;0x4543(r15)
    16ec:	53 53       	inc.b	#0		;r3 As==00
    16ee:	5f 4f 50 54 	mov.b	21584(r15),r15	;0x5450(r15)
    16f2:	49 4f       	mov.b	r15,	r9	
    16f4:	4e 3a       	jl	$-866    	;abs 0x1392
    16f6:	37 2c       	jc	$+112    	;abs 0x1766
    16f8:	3b 00 4d 45 	mova	0x454d,	r11	;PC rel. 0x05c47
    16fc:	4e 55       	add.b	r5,	r14	
    16fe:	5f 53       	inc.b	r15		
    1700:	54 45 50 53 	mov.b	21328(r5),r4	;0x5350(r5)
    1704:	45 54       	add.b	r4,	r5	
    1706:	3a 74       	subc	@r4+,	r10	
    1708:	28 33       	jn	$-430    	;abs 0x155a
    170a:	31 2c       	jc	$+100    	;abs 0x176e
    170c:	32 29       	jnc	$+614    	;abs 0x1972
    170e:	3d 28       	jnc	$+124    	;abs 0x178a
    1710:	33 31       	jn	$+616    	;abs 0x1978
    1712:	2c 31       	jn	$+602    	;abs 0x196c
    1714:	29 00 20 3a 	mova	&0x03a20,r9	
    1718:	54 28       	jnc	$+170    	;abs 0x17c2
    171a:	33 31       	jn	$+616    	;abs 0x1982
    171c:	2c 33       	jn	$-422    	;abs 0x1576
    171e:	29 3d       	jmp	$+596    	;abs 0x1972
    1720:	65 52       	add.b	#4,	r5	;r2 As==10
    1722:	41 44       	mov.b	r4,	r1	
    1724:	49 4f       	mov.b	r15,	r9	
    1726:	5f 52 41 57 	add.b	&0x5741,r15	
    172a:	3a 30       	jn	$+118    	;abs 0x17a0
    172c:	2c 52       	add	#4,	r12	;r2 As==10
    172e:	41 44       	mov.b	r4,	r1	
    1730:	49 4f       	mov.b	r15,	r9	
    1732:	5f 43       	mov.b	#1,	r15	;r3 As==01
    1734:	4f 52       	add.b	r2,	r15	
    1736:	52 45 43 54 	mov.b	21571(r5),r2	;0x5443(r5)
    173a:	3a 31       	jn	$+630    	;abs 0x19b0
    173c:	2c 41       	mov	@r1,	r12	
    173e:	4e 41       	mov.b	r1,	r14	
    1740:	4c 4f       	mov.b	r15,	r12	
    1742:	47 5f       	add.b	r15,	r7	
    1744:	4d 4f       	mov.b	r15,	r13	
    1746:	4e 49       	mov.b	r9,	r14	
    1748:	54 4f 52 3a 	mov.b	14930(r15),r4	;0x3a52(r15)
    174c:	32 2c       	jc	$+102    	;abs 0x17b2
    174e:	52 45 41 44 	mov.b	17473(r5),r2	;0x4441(r5)
    1752:	59 3a       	jl	$-844    	;abs 0x1406
    1754:	33 2c       	jc	$+104    	;abs 0x17bc
    1756:	49 4e       	mov.b	r14,	r9	
    1758:	49 54       	add.b	r4,	r9	
    175a:	49 41       	mov.b	r1,	r9	
    175c:	4c 5f       	add.b	r15,	r12	
    175e:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
    1760:	54 54 49 4e 	add.b	20041(r4),r4	;0x4e49(r4)
    1764:	47 53       	add.b	#0,	r7	;r3 As==00
    1766:	3a 34       	jge	$+118    	;abs 0x17dc
    1768:	2c 3b       	jl	$-422    	;abs 0x15c2
    176a:	00 4d       	br	r13		
    176c:	45 4e       	mov.b	r14,	r5	
    176e:	55 5f 4f 50 	add.b	20559(r15),r5	;0x504f(r15)
    1772:	54 49 4f 4e 	mov.b	20047(r9),r4	;0x4e4f(r9)
    1776:	3a 74       	subc	@r4+,	r10	
    1778:	28 33       	jn	$-430    	;abs 0x15ca
    177a:	31 2c       	jc	$+100    	;abs 0x17de
    177c:	34 29       	jnc	$+618    	;abs 0x19e6
    177e:	3d 28       	jnc	$+124    	;abs 0x17fa
    1780:	33 31       	jn	$+616    	;abs 0x19e8
    1782:	2c 33       	jn	$-422    	;abs 0x15dc
    1784:	29 00 6d 61 	mova	&0x0616d,r9	
    1788:	69 6e       	addc.b	@r14,	r9	
    178a:	3a 46       	mov	@r6+,	r10	
    178c:	28 30       	jn	$+82     	;abs 0x17de
    178e:	2c 31       	jn	$+602    	;abs 0x19e8
    1790:	29 00 70 72 	mova	&0x07270,r9	
    1794:	6f 63       	addc.b	#2,	r15	;r3 As==10
    1796:	65 73       	subc.b	#2,	r5	;r3 As==10
    1798:	73 5f       	.word	0x5f73;	????	Illegal as 2-op instr
    179a:	6d 65       	addc.b	@r5,	r13	
    179c:	6e 75       	subc.b	@r5,	r14	
    179e:	3a 46       	mov	@r6+,	r10	
    17a0:	28 30       	jn	$+82     	;abs 0x17f2
    17a2:	2c 32       	jn	$-934    	;abs 0x13fc
    17a4:	30 29       	jnc	$+610    	;abs 0x1a06
    17a6:	00 70       	subc	r0,	r0	
    17a8:	72 6f       	addc.b	@r15+,	r2	
    17aa:	63 65       	.word	0x6563;	????	Illegal as 2-op instr
    17ac:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    17ae:	5f 6f 70 74 	addc.b	29808(r15),r15	;0x7470(r15)
    17b2:	69 6f       	addc.b	@r15,	r9	
    17b4:	6e 3a       	jl	$-802    	;abs 0x1492
    17b6:	46 28       	jnc	$+142    	;abs 0x1844
    17b8:	30 2c       	jc	$+98     	;abs 0x181a
    17ba:	32 30       	jn	$+102    	;abs 0x1820
    17bc:	29 00 69 3a 	mova	&0x03a69,r9	
    17c0:	72 28       	jnc	$+230    	;abs 0x18a6
    17c2:	30 2c       	jc	$+98     	;abs 0x1824
    17c4:	31 29       	jnc	$+612    	;abs 0x1a28
    17c6:	00 64       	addc	r4,	r0	
    17c8:	72 61       	addc.b	@r1+,	r2	
    17ca:	77 5f       	add.b	@r15+,	r7	
    17cc:	61 6e       	addc.b	@r14,	r1	
    17ce:	61 6c       	addc.b	@r12,	r1	
    17d0:	6f 67       	addc.b	@r7,	r15	
    17d2:	5f 67 72 61 	addc.b	24946(r7),r15	;0x6172(r7)
    17d6:	70 68       	addc.b	@r8+,	r0	
    17d8:	3a 46       	mov	@r6+,	r10	
    17da:	28 30       	jn	$+82     	;abs 0x182c
    17dc:	2c 32       	jn	$-934    	;abs 0x1436
    17de:	30 29       	jnc	$+610    	;abs 0x1a40
    17e0:	00 6b       	addc	r11,	r0	
    17e2:	3a 72       	subc	#8,	r10	;r2 As==11
    17e4:	28 30       	jn	$+82     	;abs 0x1836
    17e6:	2c 31       	jn	$+602    	;abs 0x1a40
    17e8:	29 00 61 6e 	mova	&0x06e61,r9	
    17ec:	61 6c       	addc.b	@r12,	r1	
    17ee:	6f 67       	addc.b	@r7,	r15	
    17f0:	5f 67 72 61 	addc.b	24946(r7),r15	;0x6172(r7)
    17f4:	70 68       	addc.b	@r8+,	r0	
    17f6:	5f 63       	addc.b	#1,	r15	;r3 As==01
    17f8:	6c 65       	addc.b	@r5,	r12	
    17fa:	61 72       	subc.b	#4,	r1	;r2 As==10
    17fc:	3a 46       	mov	@r6+,	r10	
    17fe:	28 30       	jn	$+82     	;abs 0x1850
    1800:	2c 32       	jn	$-934    	;abs 0x145a
    1802:	30 29       	jnc	$+610    	;abs 0x1a64
    1804:	00 6e       	addc	r14,	r0	
    1806:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    180a:	2c 31       	jn	$+602    	;abs 0x1a64
    180c:	29 00 70 72 	mova	&0x07270,r9	
    1810:	6f 63       	addc.b	#2,	r15	;r3 As==10
    1812:	65 73       	subc.b	#2,	r5	;r3 As==10
    1814:	73 5f       	.word	0x5f73;	????	Illegal as 2-op instr
    1816:	61 6e       	addc.b	@r14,	r1	
    1818:	61 6c       	addc.b	@r12,	r1	
    181a:	6f 67       	addc.b	@r7,	r15	
    181c:	5f 6d 65 6e 	addc.b	28261(r13),r15	;0x6e65(r13)
    1820:	75 3a       	jl	$-788    	;abs 0x150c
    1822:	46 28       	jnc	$+142    	;abs 0x18b0
    1824:	30 2c       	jc	$+98     	;abs 0x1886
    1826:	32 30       	jn	$+102    	;abs 0x188c
    1828:	29 00 72 65 	mova	&0x06572,r9	
    182c:	66 72       	subc.b	#4,	r6	;r2 As==10
    182e:	65 73       	subc.b	#2,	r5	;r3 As==10
    1830:	68 5f       	add.b	@r15,	r8	
    1832:	61 6e       	addc.b	@r14,	r1	
    1834:	61 6c       	addc.b	@r12,	r1	
    1836:	6f 67       	addc.b	@r7,	r15	
    1838:	5f 6d 65 6e 	addc.b	28261(r13),r15	;0x6e65(r13)
    183c:	75 3a       	jl	$-788    	;abs 0x1528
    183e:	46 28       	jnc	$+142    	;abs 0x18cc
    1840:	30 2c       	jc	$+98     	;abs 0x18a2
    1842:	32 30       	jn	$+102    	;abs 0x18a8
    1844:	29 00 54 49 	mova	&0x04954,r9	
    1848:	4d 45       	mov.b	r5,	r13	
    184a:	52 41 30 5f 	mov.b	24368(r1),r2	;0x5f30(r1)
    184e:	49 53       	add.b	#0,	r9	;r3 As==00
    1850:	52 5f 48 4f 	add.b	20296(r15),r2	;0x4f48(r15)
    1854:	4f 4b       	mov.b	r11,	r15	
    1856:	3a 46       	mov	@r6+,	r10	
    1858:	28 30       	jn	$+82     	;abs 0x18aa
    185a:	2c 32       	jn	$-934    	;abs 0x14b4
    185c:	30 29       	jnc	$+610    	;abs 0x1abe
    185e:	00 63       	adc	r0		
    1860:	6c 6f       	addc.b	@r15,	r12	
    1862:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr
    1864:	5f 69 6e 69 	addc.b	26990(r9),r15	;0x696e(r9)
    1868:	74 3a       	jl	$-790    	;abs 0x1552
    186a:	46 28       	jnc	$+142    	;abs 0x18f8
    186c:	30 2c       	jc	$+98     	;abs 0x18ce
    186e:	32 30       	jn	$+102    	;abs 0x18d4
    1870:	29 00 70 31 	mova	&0x03170,r9	
    1874:	5f 69 6e 69 	addc.b	26990(r9),r15	;0x696e(r9)
    1878:	74 3a       	jl	$-790    	;abs 0x1562
    187a:	46 28       	jnc	$+142    	;abs 0x1908
    187c:	30 2c       	jc	$+98     	;abs 0x18de
    187e:	32 30       	jn	$+102    	;abs 0x18e4
    1880:	29 00 74 69 	mova	&0x06974,r9	
    1884:	6d 65       	addc.b	@r5,	r13	
    1886:	72 5f       	add.b	@r15+,	r2	
    1888:	61 33       	jn	$-316    	;abs 0x174c
    188a:	5f 69 6e 69 	addc.b	26990(r9),r15	;0x696e(r9)
    188e:	74 3a       	jl	$-790    	;abs 0x1578
    1890:	46 28       	jnc	$+142    	;abs 0x191e
    1892:	30 2c       	jc	$+98     	;abs 0x18f4
    1894:	32 30       	jn	$+102    	;abs 0x18fa
    1896:	29 00 50 4f 	mova	&0x04f50,r9	
    189a:	52 54 31 5f 	add.b	24369(r4),r2	;0x5f31(r4)
    189e:	49 53       	add.b	#0,	r9	;r3 As==00
    18a0:	52 5f 48 4f 	add.b	20296(r15),r2	;0x4f48(r15)
    18a4:	4f 4b       	mov.b	r11,	r15	
    18a6:	3a 46       	mov	@r6+,	r10	
    18a8:	28 30       	jn	$+82     	;abs 0x18fa
    18aa:	2c 32       	jn	$-934    	;abs 0x1504
    18ac:	30 29       	jnc	$+610    	;abs 0x1b0e
    18ae:	00 50       	rla	r0		
    18b0:	50 4d 5f 61 	br	24927(r13)	;0x615f(r13)
    18b4:	75 78       	subc.b	@r8+,	r5	
    18b6:	3a 72       	subc	#8,	r10	;r2 As==11
    18b8:	28 30       	jn	$+82     	;abs 0x190a
    18ba:	2c 34       	jge	$+90     	;abs 0x1914
    18bc:	29 00 63 68 	mova	&0x06863,r9	
    18c0:	61 6e       	addc.b	@r14,	r1	
    18c2:	6e 65       	addc.b	@r5,	r14	
    18c4:	6c 5f       	add.b	@r15,	r12	
    18c6:	6e 75       	subc.b	@r5,	r14	
    18c8:	6d 3a       	jl	$-804    	;abs 0x15a4
    18ca:	72 28       	jnc	$+230    	;abs 0x19b0
    18cc:	30 2c       	jc	$+98     	;abs 0x192e
    18ce:	31 29       	jnc	$+612    	;abs 0x1b32
    18d0:	00 50       	rla	r0		
    18d2:	50 4d 5f 63 	br	25439(r13)	;0x635f(r13)
    18d6:	68 5f       	add.b	@r15,	r8	
    18d8:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    18da:	75 6e       	addc.b	@r14+,	r5	
    18dc:	74 65       	addc.b	@r5+,	r4	
    18de:	72 3a       	jl	$-794    	;abs 0x15c4
    18e0:	72 28       	jnc	$+230    	;abs 0x19c6
    18e2:	30 2c       	jc	$+98     	;abs 0x1944
    18e4:	31 29       	jnc	$+612    	;abs 0x1b48
    18e6:	00 63       	adc	r0		
    18e8:	61 6c       	addc.b	@r12,	r1	
    18ea:	69 62       	addc.b	#4,	r9	;r2 As==10
    18ec:	72 61       	addc.b	@r1+,	r2	
    18ee:	74 65       	addc.b	@r5+,	r4	
    18f0:	5f 72 61 64 	subc.b	&0x6461,r15	
    18f4:	69 6f       	addc.b	@r15,	r9	
    18f6:	3a 46       	mov	@r6+,	r10	
    18f8:	28 30       	jn	$+82     	;abs 0x194a
    18fa:	2c 32       	jn	$-934    	;abs 0x1554
    18fc:	30 29       	jnc	$+610    	;abs 0x1b5e
    18fe:	00 50       	rla	r0		
    1900:	50 4d 4d 69 	br	26957(r13)	;0x694d(r13)
    1904:	6e 3a       	jl	$-802    	;abs 0x15e2
    1906:	28 31       	jn	$+594    	;abs 0x1b58
    1908:	2c 31       	jn	$+602    	;abs 0x1b62
    190a:	29 3d       	jmp	$+596    	;abs 0x1b5e
    190c:	61 72       	subc.b	#4,	r1	;r2 As==10
    190e:	28 31       	jn	$+594    	;abs 0x1b60
    1910:	37 2c       	jc	$+112    	;abs 0x1980
    1912:	37 29       	jnc	$+624    	;abs 0x1b82
    1914:	3b 30       	jn	$+120    	;abs 0x198c
    1916:	3b 37       	jge	$-392    	;abs 0x178e
    1918:	3b 28       	jnc	$+120    	;abs 0x1990
    191a:	30 2c       	jc	$+98     	;abs 0x197c
    191c:	31 32       	jn	$-924    	;abs 0x1580
    191e:	29 00 50 50 	mova	&0x05050,r9	
    1922:	4d 4d       	mov.b	r13,	r13	
    1924:	61 78       	subc.b	@r8,	r1	
    1926:	3a 28       	jnc	$+118    	;abs 0x199c
    1928:	31 2c       	jc	$+100    	;abs 0x198c
    192a:	31 29       	jnc	$+612    	;abs 0x1b8e
    192c:	00 56       	add	r6,	r0	
    192e:	61 6c       	addc.b	@r12,	r1	
    1930:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1932:	41 75       	subc.b	r5,	r1	
    1934:	78 3a       	jl	$-782    	;abs 0x1626
    1936:	28 32       	jn	$-942    	;abs 0x1588
    1938:	39 2c       	jc	$+116    	;abs 0x19ac
    193a:	31 29       	jnc	$+612    	;abs 0x1b9e
    193c:	00 70       	subc	r0,	r0	
    193e:	72 6f       	addc.b	@r15+,	r2	
    1940:	63 65       	.word	0x6563;	????	Illegal as 2-op instr
    1942:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    1944:	5f 72 63 3a 	subc.b	&0x3a63,r15	
    1948:	46 28       	jnc	$+142    	;abs 0x19d6
    194a:	30 2c       	jc	$+98     	;abs 0x19ac
    194c:	32 30       	jn	$+102    	;abs 0x19b2
    194e:	29 00 6c 6f 	mova	&0x06f6c,r9	
    1952:	61 64       	addc.b	@r4,	r1	
    1954:	5f 74 72 61 	subc.b	24946(r4),r15	;0x6172(r4)
    1958:	6e 73       	subc.b	#2,	r14	;r3 As==10
    195a:	6d 69       	addc.b	@r9,	r13	
    195c:	74 74       	subc.b	@r4+,	r4	
    195e:	65 72       	subc.b	#4,	r5	;r2 As==10
    1960:	5f 76 61 6c 	subc.b	27745(r6),r15	;0x6c61(r6)
    1964:	75 65       	addc.b	@r5+,	r5	
    1966:	73 3a       	jl	$-792    	;abs 0x164e
    1968:	46 28       	jnc	$+142    	;abs 0x19f6
    196a:	30 2c       	jc	$+98     	;abs 0x19cc
    196c:	32 30       	jn	$+102    	;abs 0x19d2
    196e:	29 00 64 72 	mova	&0x07264,r9	
    1972:	61 77       	subc.b	@r7,	r1	
    1974:	5f 72 63 5f 	subc.b	&0x5f63,r15	
    1978:	69 6e       	addc.b	@r14,	r9	
    197a:	70 75       	subc.b	@r5+,	r0	
    197c:	74 73       	subc.b	#-1,	r4	;r3 As==11
    197e:	3a 46       	mov	@r6+,	r10	
    1980:	28 30       	jn	$+82     	;abs 0x19d2
    1982:	2c 32       	jn	$-934    	;abs 0x15dc
    1984:	30 29       	jnc	$+610    	;abs 0x1be6
    1986:	00 72       	subc	r2,	r0	
    1988:	61 77       	subc.b	@r7,	r1	
    198a:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    198e:	2c 32       	jn	$-934    	;abs 0x15e8
    1990:	29 00 69 3a 	mova	&0x03a69,r9	
    1994:	72 28       	jnc	$+230    	;abs 0x1a7a
    1996:	30 2c       	jc	$+98     	;abs 0x19f8
    1998:	34 29       	jnc	$+618    	;abs 0x1c02
    199a:	00 6b       	addc	r11,	r0	
    199c:	3a 72       	subc	#8,	r10	;r2 As==11
    199e:	28 30       	jn	$+82     	;abs 0x19f0
    19a0:	2c 34       	jge	$+90     	;abs 0x19fa
    19a2:	29 00 68 3a 	mova	&0x03a68,r9	
    19a6:	72 28       	jnc	$+230    	;abs 0x1a8c
    19a8:	30 2c       	jc	$+98     	;abs 0x1a0a
    19aa:	34 29       	jnc	$+618    	;abs 0x1c14
    19ac:	00 66       	addc	r6,	r0	
    19ae:	69 6e       	addc.b	@r14,	r9	
    19b0:	64 5f       	add.b	@r15,	r4	
    19b2:	66 69       	addc.b	@r9,	r6	
    19b4:	72 73       	subc.b	#-1,	r2	;r3 As==11
    19b6:	74 3a       	jl	$-790    	;abs 0x16a0
    19b8:	46 28       	jnc	$+142    	;abs 0x1a46
    19ba:	30 2c       	jc	$+98     	;abs 0x1a1c
    19bc:	31 29       	jnc	$+612    	;abs 0x1c20
    19be:	00 73       	sbc	r0		
    19c0:	74 61       	addc.b	@r1+,	r4	
    19c2:	72 74       	subc.b	@r4+,	r2	
    19c4:	61 64       	addc.b	@r4,	r1	
    19c6:	64 72       	subc.b	#4,	r4	;r2 As==10
    19c8:	65 73       	subc.b	#2,	r5	;r3 As==10
    19ca:	73 3a       	jl	$-792    	;abs 0x16b2
    19cc:	50 28       	jnc	$+162    	;abs 0x1a6e
    19ce:	30 2c       	jc	$+98     	;abs 0x1a30
    19d0:	31 29       	jnc	$+612    	;abs 0x1c34
    19d2:	00 6d       	addc	r13,	r0	
    19d4:	61 69       	addc.b	@r9,	r1	
    19d6:	6e 5f       	add.b	@r15,	r14	
    19d8:	6c 6f       	addc.b	@r15,	r12	
    19da:	6f 70       	subc.b	@r0,	r15	
    19dc:	3a 46       	mov	@r6+,	r10	
    19de:	28 30       	jn	$+82     	;abs 0x1a30
    19e0:	2c 32       	jn	$-934    	;abs 0x163a
    19e2:	30 29       	jnc	$+610    	;abs 0x1c44
    19e4:	00 73       	sbc	r0		
    19e6:	65 74       	subc.b	@r4,	r5	
    19e8:	75 70 3a 46 	subc.b	#17978,	r5	;#0x463a
    19ec:	28 30       	jn	$+82     	;abs 0x1a3e
    19ee:	2c 32       	jn	$-934    	;abs 0x1648
    19f0:	30 29       	jnc	$+610    	;abs 0x1c52
    19f2:	00 61       	addc	r1,	r0	
    19f4:	6e 61       	addc.b	@r1,	r14	
    19f6:	6c 6f       	addc.b	@r15,	r12	
    19f8:	67 5f       	add.b	@r15,	r7	
    19fa:	67 72       	subc.b	#4,	r7	;r2 As==10
    19fc:	61 70       	subc.b	@r0,	r1	
    19fe:	68 5f       	add.b	@r15,	r8	
    1a00:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    1a02:	65 61       	addc.b	@r1,	r5	
    1a04:	72 5f       	add.b	@r15+,	r2	
    1a06:	61 6c       	addc.b	@r12,	r1	
    1a08:	6c 3a       	jl	$-806    	;abs 0x16e2
    1a0a:	46 28       	jnc	$+142    	;abs 0x1a98
    1a0c:	30 2c       	jc	$+98     	;abs 0x1a6e
    1a0e:	32 30       	jn	$+102    	;abs 0x1a74
    1a10:	29 00 4d 50 	mova	&0x0504d,r9	
    1a14:	59 3a       	jl	$-844    	;abs 0x16c8
    1a16:	47 28       	jnc	$+144    	;abs 0x1aa6
    1a18:	31 37       	jge	$-412    	;abs 0x187c
    1a1a:	2c 38       	jl	$+90     	;abs 0x1a74
    1a1c:	29 00 4d 50 	mova	&0x0504d,r9	
    1a20:	59 53       	inc.b	r9		
    1a22:	3a 47       	mov	@r7+,	r10	
    1a24:	28 31       	jn	$+594    	;abs 0x1c76
    1a26:	37 2c       	jc	$+112    	;abs 0x1a96
    1a28:	38 29       	jnc	$+626    	;abs 0x1c9a
    1a2a:	00 4d       	br	r13		
    1a2c:	41 43       	clr.b	r1		
    1a2e:	3a 47       	mov	@r7+,	r10	
    1a30:	28 31       	jn	$+594    	;abs 0x1c82
    1a32:	37 2c       	jc	$+112    	;abs 0x1aa2
    1a34:	38 29       	jnc	$+626    	;abs 0x1ca6
    1a36:	00 4d       	br	r13		
    1a38:	41 43       	clr.b	r1		
    1a3a:	53 3a       	jl	$-856    	;abs 0x16e2
    1a3c:	47 28       	jnc	$+144    	;abs 0x1acc
    1a3e:	31 37       	jge	$-412    	;abs 0x18a2
    1a40:	2c 38       	jl	$+90     	;abs 0x1a9a
    1a42:	29 00 4f 50 	mova	&0x0504f,r9	
    1a46:	32 3a       	jl	$-922    	;abs 0x16ac
    1a48:	47 28       	jnc	$+144    	;abs 0x1ad8
    1a4a:	31 37       	jge	$-412    	;abs 0x18ae
    1a4c:	2c 38       	jl	$+90     	;abs 0x1aa6
    1a4e:	29 00 52 45 	mova	&0x04552,r9	
    1a52:	53 4c       	.word	0x4c53;	????	Illegal as 2-op instr
    1a54:	4f 3a       	jl	$-864    	;abs 0x16f4
    1a56:	47 28       	jnc	$+144    	;abs 0x1ae6
    1a58:	31 37       	jge	$-412    	;abs 0x18bc
    1a5a:	2c 38       	jl	$+90     	;abs 0x1ab4
    1a5c:	29 00 52 45 	mova	&0x04552,r9	
    1a60:	53 48       	.word	0x4853;	????	Illegal as 2-op instr
    1a62:	49 3a       	jl	$-876    	;abs 0x16f6
    1a64:	47 28       	jnc	$+144    	;abs 0x1af4
    1a66:	31 37       	jge	$-412    	;abs 0x18ca
    1a68:	2c 38       	jl	$+90     	;abs 0x1ac2
    1a6a:	29 00 53 55 	mova	&0x05553,r9	
    1a6e:	4d 45       	mov.b	r5,	r13	
    1a70:	58 54 3a 47 	add.b	18234(r4),r8	;0x473a(r4)
    1a74:	28 31       	jn	$+594    	;abs 0x1cc6
    1a76:	37 2c       	jc	$+112    	;abs 0x1ae6
    1a78:	38 29       	jnc	$+626    	;abs 0x1cea
    1a7a:	00 70       	subc	r0,	r0	
    1a7c:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1a7e:	74 31       	jn	$+746    	;abs 0x1d68
    1a80:	3a 47       	mov	@r7+,	r10	
    1a82:	28 31       	jn	$+594    	;abs 0x1cd4
    1a84:	35 2c       	jc	$+108    	;abs 0x1af0
    1a86:	34 29       	jnc	$+618    	;abs 0x1cf0
    1a88:	00 70       	subc	r0,	r0	
    1a8a:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1a8c:	74 32       	jn	$-790    	;abs 0x1776
    1a8e:	3a 47       	mov	@r7+,	r10	
    1a90:	28 31       	jn	$+594    	;abs 0x1ce2
    1a92:	35 2c       	jc	$+108    	;abs 0x1afe
    1a94:	34 29       	jnc	$+618    	;abs 0x1cfe
    1a96:	00 70       	subc	r0,	r0	
    1a98:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1a9a:	74 33       	jn	$-278    	;abs 0x1984
    1a9c:	3a 47       	mov	@r7+,	r10	
    1a9e:	28 31       	jn	$+594    	;abs 0x1cf0
    1aa0:	35 2c       	jc	$+108    	;abs 0x1b0c
    1aa2:	35 29       	jnc	$+620    	;abs 0x1d0e
    1aa4:	00 70       	subc	r0,	r0	
    1aa6:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1aa8:	74 34       	jge	$+234    	;abs 0x1b92
    1aaa:	3a 47       	mov	@r7+,	r10	
    1aac:	28 31       	jn	$+594    	;abs 0x1cfe
    1aae:	35 2c       	jc	$+108    	;abs 0x1b1a
    1ab0:	35 29       	jnc	$+620    	;abs 0x1d1c
    1ab2:	00 70       	subc	r0,	r0	
    1ab4:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1ab6:	74 35       	jge	$+746    	;abs 0x1da0
    1ab8:	3a 47       	mov	@r7+,	r10	
    1aba:	28 31       	jn	$+594    	;abs 0x1d0c
    1abc:	35 2c       	jc	$+108    	;abs 0x1b28
    1abe:	35 29       	jnc	$+620    	;abs 0x1d2a
    1ac0:	00 70       	subc	r0,	r0	
    1ac2:	6f 72       	subc.b	#4,	r15	;r2 As==10
    1ac4:	74 36       	jge	$-790    	;abs 0x17ae
    1ac6:	3a 47       	mov	@r7+,	r10	
    1ac8:	28 31       	jn	$+594    	;abs 0x1d1a
    1aca:	35 2c       	jc	$+108    	;abs 0x1b36
    1acc:	35 29       	jnc	$+620    	;abs 0x1d38
    1ace:	00 50       	rla	r0		
    1ad0:	31 49       	mov	@r9+,	r1	
    1ad2:	4e 3a       	jl	$-866    	;abs 0x1770
    1ad4:	47 28       	jnc	$+144    	;abs 0x1b64
    1ad6:	31 2c       	jc	$+100    	;abs 0x1b3a
    1ad8:	32 29       	jnc	$+614    	;abs 0x1d3e
    1ada:	3d 42       	mov	#8,	r13	;r2 As==11
    1adc:	28 30       	jn	$+82     	;abs 0x1b2e
    1ade:	2c 31       	jn	$+602    	;abs 0x1d38
    1ae0:	31 29       	jnc	$+612    	;abs 0x1d44
    1ae2:	00 50       	rla	r0		
    1ae4:	31 4f       	mov	@r15+,	r1	
    1ae6:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1aea:	28 31       	jn	$+594    	;abs 0x1d3c
    1aec:	2c 32       	jn	$-934    	;abs 0x1746
    1aee:	29 00 50 31 	mova	&0x03150,r9	
    1af2:	44 49       	mov.b	r9,	r4	
    1af4:	52 3a       	jl	$-858    	;abs 0x179a
    1af6:	47 28       	jnc	$+144    	;abs 0x1b86
    1af8:	31 2c       	jc	$+100    	;abs 0x1b5c
    1afa:	32 29       	jnc	$+614    	;abs 0x1d60
    1afc:	00 50       	rla	r0		
    1afe:	31 49       	mov	@r9+,	r1	
    1b00:	46 47       	mov.b	r7,	r6	
    1b02:	3a 47       	mov	@r7+,	r10	
    1b04:	28 31       	jn	$+594    	;abs 0x1d56
    1b06:	2c 32       	jn	$-934    	;abs 0x1760
    1b08:	29 00 50 31 	mova	&0x03150,r9	
    1b0c:	49 45       	mov.b	r5,	r9	
    1b0e:	53 3a       	jl	$-856    	;abs 0x17b6
    1b10:	47 28       	jnc	$+144    	;abs 0x1ba0
    1b12:	31 2c       	jc	$+100    	;abs 0x1b76
    1b14:	32 29       	jnc	$+614    	;abs 0x1d7a
    1b16:	00 50       	rla	r0		
    1b18:	31 49       	mov	@r9+,	r1	
    1b1a:	45 3a       	jl	$-884    	;abs 0x17a6
    1b1c:	47 28       	jnc	$+144    	;abs 0x1bac
    1b1e:	31 2c       	jc	$+100    	;abs 0x1b82
    1b20:	32 29       	jnc	$+614    	;abs 0x1d86
    1b22:	00 50       	rla	r0		
    1b24:	31 53       	add	#-1,	r1	;r3 As==11
    1b26:	45 4c       	mov.b	r12,	r5	
    1b28:	3a 47       	mov	@r7+,	r10	
    1b2a:	28 31       	jn	$+594    	;abs 0x1d7c
    1b2c:	2c 32       	jn	$-934    	;abs 0x1786
    1b2e:	29 00 50 31 	mova	&0x03150,r9	
    1b32:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1b36:	47 28       	jnc	$+144    	;abs 0x1bc6
    1b38:	31 2c       	jc	$+100    	;abs 0x1b9c
    1b3a:	32 29       	jnc	$+614    	;abs 0x1da0
    1b3c:	00 50       	rla	r0		
    1b3e:	32 49       	mov	@r9+,	r2	
    1b40:	4e 3a       	jl	$-866    	;abs 0x17de
    1b42:	47 28       	jnc	$+144    	;abs 0x1bd2
    1b44:	31 2c       	jc	$+100    	;abs 0x1ba8
    1b46:	32 29       	jnc	$+614    	;abs 0x1dac
    1b48:	00 50       	rla	r0		
    1b4a:	32 4f       	mov	@r15+,	r2	
    1b4c:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1b50:	28 31       	jn	$+594    	;abs 0x1da2
    1b52:	2c 32       	jn	$-934    	;abs 0x17ac
    1b54:	29 00 50 32 	mova	&0x03250,r9	
    1b58:	44 49       	mov.b	r9,	r4	
    1b5a:	52 3a       	jl	$-858    	;abs 0x1800
    1b5c:	47 28       	jnc	$+144    	;abs 0x1bec
    1b5e:	31 2c       	jc	$+100    	;abs 0x1bc2
    1b60:	32 29       	jnc	$+614    	;abs 0x1dc6
    1b62:	00 50       	rla	r0		
    1b64:	32 49       	mov	@r9+,	r2	
    1b66:	46 47       	mov.b	r7,	r6	
    1b68:	3a 47       	mov	@r7+,	r10	
    1b6a:	28 31       	jn	$+594    	;abs 0x1dbc
    1b6c:	2c 32       	jn	$-934    	;abs 0x17c6
    1b6e:	29 00 50 32 	mova	&0x03250,r9	
    1b72:	49 45       	mov.b	r5,	r9	
    1b74:	53 3a       	jl	$-856    	;abs 0x181c
    1b76:	47 28       	jnc	$+144    	;abs 0x1c06
    1b78:	31 2c       	jc	$+100    	;abs 0x1bdc
    1b7a:	32 29       	jnc	$+614    	;abs 0x1de0
    1b7c:	00 50       	rla	r0		
    1b7e:	32 49       	mov	@r9+,	r2	
    1b80:	45 3a       	jl	$-884    	;abs 0x180c
    1b82:	47 28       	jnc	$+144    	;abs 0x1c12
    1b84:	31 2c       	jc	$+100    	;abs 0x1be8
    1b86:	32 29       	jnc	$+614    	;abs 0x1dec
    1b88:	00 50       	rla	r0		
    1b8a:	32 53       	add	#-1,	r2	;r3 As==11
    1b8c:	45 4c       	mov.b	r12,	r5	
    1b8e:	3a 47       	mov	@r7+,	r10	
    1b90:	28 31       	jn	$+594    	;abs 0x1de2
    1b92:	2c 32       	jn	$-934    	;abs 0x17ec
    1b94:	29 00 50 32 	mova	&0x03250,r9	
    1b98:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1b9c:	47 28       	jnc	$+144    	;abs 0x1c2c
    1b9e:	31 2c       	jc	$+100    	;abs 0x1c02
    1ba0:	32 29       	jnc	$+614    	;abs 0x1e06
    1ba2:	00 50       	rla	r0		
    1ba4:	33 49       	.word	0x4933;	????	Illegal as 2-op instr
    1ba6:	4e 3a       	jl	$-866    	;abs 0x1844
    1ba8:	47 28       	jnc	$+144    	;abs 0x1c38
    1baa:	31 2c       	jc	$+100    	;abs 0x1c0e
    1bac:	32 29       	jnc	$+614    	;abs 0x1e12
    1bae:	00 50       	rla	r0		
    1bb0:	33 4f       	.word	0x4f33;	????	Illegal as 2-op instr
    1bb2:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1bb6:	28 31       	jn	$+594    	;abs 0x1e08
    1bb8:	2c 32       	jn	$-934    	;abs 0x1812
    1bba:	29 00 50 33 	mova	&0x03350,r9	
    1bbe:	44 49       	mov.b	r9,	r4	
    1bc0:	52 3a       	jl	$-858    	;abs 0x1866
    1bc2:	47 28       	jnc	$+144    	;abs 0x1c52
    1bc4:	31 2c       	jc	$+100    	;abs 0x1c28
    1bc6:	32 29       	jnc	$+614    	;abs 0x1e2c
    1bc8:	00 50       	rla	r0		
    1bca:	33 53       	.word	0x5333;	????	Illegal as 2-op instr
    1bcc:	45 4c       	mov.b	r12,	r5	
    1bce:	3a 47       	mov	@r7+,	r10	
    1bd0:	28 31       	jn	$+594    	;abs 0x1e22
    1bd2:	2c 32       	jn	$-934    	;abs 0x182c
    1bd4:	29 00 50 33 	mova	&0x03350,r9	
    1bd8:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1bdc:	47 28       	jnc	$+144    	;abs 0x1c6c
    1bde:	31 2c       	jc	$+100    	;abs 0x1c42
    1be0:	32 29       	jnc	$+614    	;abs 0x1e46
    1be2:	00 50       	rla	r0		
    1be4:	34 49       	mov	@r9+,	r4	
    1be6:	4e 3a       	jl	$-866    	;abs 0x1884
    1be8:	47 28       	jnc	$+144    	;abs 0x1c78
    1bea:	31 2c       	jc	$+100    	;abs 0x1c4e
    1bec:	32 29       	jnc	$+614    	;abs 0x1e52
    1bee:	00 50       	rla	r0		
    1bf0:	34 4f       	mov	@r15+,	r4	
    1bf2:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1bf6:	28 31       	jn	$+594    	;abs 0x1e48
    1bf8:	2c 32       	jn	$-934    	;abs 0x1852
    1bfa:	29 00 50 34 	mova	&0x03450,r9	
    1bfe:	44 49       	mov.b	r9,	r4	
    1c00:	52 3a       	jl	$-858    	;abs 0x18a6
    1c02:	47 28       	jnc	$+144    	;abs 0x1c92
    1c04:	31 2c       	jc	$+100    	;abs 0x1c68
    1c06:	32 29       	jnc	$+614    	;abs 0x1e6c
    1c08:	00 50       	rla	r0		
    1c0a:	34 53       	add	#-1,	r4	;r3 As==11
    1c0c:	45 4c       	mov.b	r12,	r5	
    1c0e:	3a 47       	mov	@r7+,	r10	
    1c10:	28 31       	jn	$+594    	;abs 0x1e62
    1c12:	2c 32       	jn	$-934    	;abs 0x186c
    1c14:	29 00 50 34 	mova	&0x03450,r9	
    1c18:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1c1c:	47 28       	jnc	$+144    	;abs 0x1cac
    1c1e:	31 2c       	jc	$+100    	;abs 0x1c82
    1c20:	32 29       	jnc	$+614    	;abs 0x1e86
    1c22:	00 50       	rla	r0		
    1c24:	35 49       	mov	@r9+,	r5	
    1c26:	4e 3a       	jl	$-866    	;abs 0x18c4
    1c28:	47 28       	jnc	$+144    	;abs 0x1cb8
    1c2a:	31 2c       	jc	$+100    	;abs 0x1c8e
    1c2c:	32 29       	jnc	$+614    	;abs 0x1e92
    1c2e:	00 50       	rla	r0		
    1c30:	35 4f       	mov	@r15+,	r5	
    1c32:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1c36:	28 31       	jn	$+594    	;abs 0x1e88
    1c38:	2c 32       	jn	$-934    	;abs 0x1892
    1c3a:	29 00 50 35 	mova	&0x03550,r9	
    1c3e:	44 49       	mov.b	r9,	r4	
    1c40:	52 3a       	jl	$-858    	;abs 0x18e6
    1c42:	47 28       	jnc	$+144    	;abs 0x1cd2
    1c44:	31 2c       	jc	$+100    	;abs 0x1ca8
    1c46:	32 29       	jnc	$+614    	;abs 0x1eac
    1c48:	00 50       	rla	r0		
    1c4a:	35 53       	add	#-1,	r5	;r3 As==11
    1c4c:	45 4c       	mov.b	r12,	r5	
    1c4e:	3a 47       	mov	@r7+,	r10	
    1c50:	28 31       	jn	$+594    	;abs 0x1ea2
    1c52:	2c 32       	jn	$-934    	;abs 0x18ac
    1c54:	29 00 50 35 	mova	&0x03550,r9	
    1c58:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1c5c:	47 28       	jnc	$+144    	;abs 0x1cec
    1c5e:	31 2c       	jc	$+100    	;abs 0x1cc2
    1c60:	32 29       	jnc	$+614    	;abs 0x1ec6
    1c62:	00 50       	rla	r0		
    1c64:	36 49       	mov	@r9+,	r6	
    1c66:	4e 3a       	jl	$-866    	;abs 0x1904
    1c68:	47 28       	jnc	$+144    	;abs 0x1cf8
    1c6a:	31 2c       	jc	$+100    	;abs 0x1cce
    1c6c:	32 29       	jnc	$+614    	;abs 0x1ed2
    1c6e:	00 50       	rla	r0		
    1c70:	36 4f       	mov	@r15+,	r6	
    1c72:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1c76:	28 31       	jn	$+594    	;abs 0x1ec8
    1c78:	2c 32       	jn	$-934    	;abs 0x18d2
    1c7a:	29 00 50 36 	mova	&0x03650,r9	
    1c7e:	44 49       	mov.b	r9,	r4	
    1c80:	52 3a       	jl	$-858    	;abs 0x1926
    1c82:	47 28       	jnc	$+144    	;abs 0x1d12
    1c84:	31 2c       	jc	$+100    	;abs 0x1ce8
    1c86:	32 29       	jnc	$+614    	;abs 0x1eec
    1c88:	00 50       	rla	r0		
    1c8a:	36 53       	add	#-1,	r6	;r3 As==11
    1c8c:	45 4c       	mov.b	r12,	r5	
    1c8e:	3a 47       	mov	@r7+,	r10	
    1c90:	28 31       	jn	$+594    	;abs 0x1ee2
    1c92:	2c 32       	jn	$-934    	;abs 0x18ec
    1c94:	29 00 50 36 	mova	&0x03650,r9	
    1c98:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1c9c:	47 28       	jnc	$+144    	;abs 0x1d2c
    1c9e:	31 2c       	jc	$+100    	;abs 0x1d02
    1ca0:	32 29       	jnc	$+614    	;abs 0x1f06
    1ca2:	00 50       	rla	r0		
    1ca4:	37 49       	mov	@r9+,	r7	
    1ca6:	4e 3a       	jl	$-866    	;abs 0x1944
    1ca8:	47 28       	jnc	$+144    	;abs 0x1d38
    1caa:	31 2c       	jc	$+100    	;abs 0x1d0e
    1cac:	32 29       	jnc	$+614    	;abs 0x1f12
    1cae:	00 50       	rla	r0		
    1cb0:	37 4f       	mov	@r15+,	r7	
    1cb2:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1cb6:	28 31       	jn	$+594    	;abs 0x1f08
    1cb8:	2c 32       	jn	$-934    	;abs 0x1912
    1cba:	29 00 50 37 	mova	&0x03750,r9	
    1cbe:	44 49       	mov.b	r9,	r4	
    1cc0:	52 3a       	jl	$-858    	;abs 0x1966
    1cc2:	47 28       	jnc	$+144    	;abs 0x1d52
    1cc4:	31 2c       	jc	$+100    	;abs 0x1d28
    1cc6:	32 29       	jnc	$+614    	;abs 0x1f2c
    1cc8:	00 50       	rla	r0		
    1cca:	37 53       	add	#-1,	r7	;r3 As==11
    1ccc:	45 4c       	mov.b	r12,	r5	
    1cce:	3a 47       	mov	@r7+,	r10	
    1cd0:	28 31       	jn	$+594    	;abs 0x1f22
    1cd2:	2c 32       	jn	$-934    	;abs 0x192c
    1cd4:	29 00 50 37 	mova	&0x03750,r9	
    1cd8:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1cdc:	47 28       	jnc	$+144    	;abs 0x1d6c
    1cde:	31 2c       	jc	$+100    	;abs 0x1d42
    1ce0:	32 29       	jnc	$+614    	;abs 0x1f46
    1ce2:	00 50       	rla	r0		
    1ce4:	38 49       	mov	@r9+,	r8	
    1ce6:	4e 3a       	jl	$-866    	;abs 0x1984
    1ce8:	47 28       	jnc	$+144    	;abs 0x1d78
    1cea:	31 2c       	jc	$+100    	;abs 0x1d4e
    1cec:	32 29       	jnc	$+614    	;abs 0x1f52
    1cee:	00 50       	rla	r0		
    1cf0:	38 4f       	mov	@r15+,	r8	
    1cf2:	55 54 3a 47 	add.b	18234(r4),r5	;0x473a(r4)
    1cf6:	28 31       	jn	$+594    	;abs 0x1f48
    1cf8:	2c 32       	jn	$-934    	;abs 0x1952
    1cfa:	29 00 50 38 	mova	&0x03850,r9	
    1cfe:	44 49       	mov.b	r9,	r4	
    1d00:	52 3a       	jl	$-858    	;abs 0x19a6
    1d02:	47 28       	jnc	$+144    	;abs 0x1d92
    1d04:	31 2c       	jc	$+100    	;abs 0x1d68
    1d06:	32 29       	jnc	$+614    	;abs 0x1f6c
    1d08:	00 50       	rla	r0		
    1d0a:	38 53       	add	#-1,	r8	;r3 As==11
    1d0c:	45 4c       	mov.b	r12,	r5	
    1d0e:	3a 47       	mov	@r7+,	r10	
    1d10:	28 31       	jn	$+594    	;abs 0x1f62
    1d12:	2c 32       	jn	$-934    	;abs 0x196c
    1d14:	29 00 50 38 	mova	&0x03850,r9	
    1d18:	52 45 4e 3a 	mov.b	14926(r5),r2	;0x3a4e(r5)
    1d1c:	47 28       	jnc	$+144    	;abs 0x1dac
    1d1e:	31 2c       	jc	$+100    	;abs 0x1d82
    1d20:	32 29       	jnc	$+614    	;abs 0x1f86
    1d22:	00 55       	add	r5,	r0	
    1d24:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d26:	30 43       	br	#-1		;r3 As==11
    1d28:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    1d2c:	47 28       	jnc	$+144    	;abs 0x1dbc
    1d2e:	31 2c       	jc	$+100    	;abs 0x1d92
    1d30:	32 29       	jnc	$+614    	;abs 0x1f96
    1d32:	00 55       	add	r5,	r0	
    1d34:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d36:	30 43       	br	#-1		;r3 As==11
    1d38:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    1d3c:	47 28       	jnc	$+144    	;abs 0x1dcc
    1d3e:	31 2c       	jc	$+100    	;abs 0x1da2
    1d40:	32 29       	jnc	$+614    	;abs 0x1fa6
    1d42:	00 55       	add	r5,	r0	
    1d44:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d46:	30 42       	br	#8		;r2 As==11
    1d48:	52 30       	jn	$+166    	;abs 0x1dee
    1d4a:	3a 47       	mov	@r7+,	r10	
    1d4c:	28 31       	jn	$+594    	;abs 0x1f9e
    1d4e:	2c 32       	jn	$-934    	;abs 0x19a8
    1d50:	29 00 55 43 	mova	&0x04355,r9	
    1d54:	41 30       	jn	$+132    	;abs 0x1dd8
    1d56:	42 52       	rla.b	r2		
    1d58:	31 3a       	jl	$-924    	;abs 0x19bc
    1d5a:	47 28       	jnc	$+144    	;abs 0x1dea
    1d5c:	31 2c       	jc	$+100    	;abs 0x1dc0
    1d5e:	32 29       	jnc	$+614    	;abs 0x1fc4
    1d60:	00 55       	add	r5,	r0	
    1d62:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d64:	30 4d       	br	@r13+		
    1d66:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1d68:	4c 3a       	jl	$-870    	;abs 0x1a02
    1d6a:	47 28       	jnc	$+144    	;abs 0x1dfa
    1d6c:	31 2c       	jc	$+100    	;abs 0x1dd0
    1d6e:	32 29       	jnc	$+614    	;abs 0x1fd4
    1d70:	00 55       	add	r5,	r0	
    1d72:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d74:	30 53       	add	#-1,	r0	;r3 As==11
    1d76:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
    1d7a:	47 28       	jnc	$+144    	;abs 0x1e0a
    1d7c:	31 2c       	jc	$+100    	;abs 0x1de0
    1d7e:	32 29       	jnc	$+614    	;abs 0x1fe4
    1d80:	00 55       	add	r5,	r0	
    1d82:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1d84:	30 52       	add	#8,	r0	;r2 As==11
    1d86:	58 42 55 46 	mov.b	&0x4655,r8	
    1d8a:	3a 47       	mov	@r7+,	r10	
    1d8c:	28 31       	jn	$+594    	;abs 0x1fde
    1d8e:	2c 32       	jn	$-934    	;abs 0x19e8
    1d90:	29 00 55 43 	mova	&0x04355,r9	
    1d94:	41 30       	jn	$+132    	;abs 0x1e18
    1d96:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    1d9a:	46 3a       	jl	$-882    	;abs 0x1a28
    1d9c:	47 28       	jnc	$+144    	;abs 0x1e2c
    1d9e:	31 2c       	jc	$+100    	;abs 0x1e02
    1da0:	32 29       	jnc	$+614    	;abs 0x2006
    1da2:	00 55       	add	r5,	r0	
    1da4:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1da6:	30 41       	ret			
    1da8:	42 43       	clr.b	r2		
    1daa:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1dae:	28 31       	jn	$+594    	;abs 0x2000
    1db0:	2c 32       	jn	$-934    	;abs 0x1a0a
    1db2:	29 00 55 43 	mova	&0x04355,r9	
    1db6:	41 30       	jn	$+132    	;abs 0x1e3a
    1db8:	49 52       	add.b	r2,	r9	
    1dba:	54 43       	mov.b	#1,	r4	;r3 As==01
    1dbc:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1dc0:	28 31       	jn	$+594    	;abs 0x2012
    1dc2:	2c 32       	jn	$-934    	;abs 0x1a1c
    1dc4:	29 00 55 43 	mova	&0x04355,r9	
    1dc8:	41 30       	jn	$+132    	;abs 0x1e4c
    1dca:	49 52       	add.b	r2,	r9	
    1dcc:	52 43       	mov.b	#1,	r2	;r3 As==01
    1dce:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1dd2:	28 31       	jn	$+594    	;abs 0x2024
    1dd4:	2c 32       	jn	$-934    	;abs 0x1a2e
    1dd6:	29 00 55 43 	mova	&0x04355,r9	
    1dda:	42 30       	jn	$+134    	;abs 0x1e60
    1ddc:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1dde:	4c 30       	jn	$+154    	;abs 0x1e78
    1de0:	3a 47       	mov	@r7+,	r10	
    1de2:	28 31       	jn	$+594    	;abs 0x2034
    1de4:	2c 32       	jn	$-934    	;abs 0x1a3e
    1de6:	29 00 55 43 	mova	&0x04355,r9	
    1dea:	42 30       	jn	$+134    	;abs 0x1e70
    1dec:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1dee:	4c 31       	jn	$+666    	;abs 0x2088
    1df0:	3a 47       	mov	@r7+,	r10	
    1df2:	28 31       	jn	$+594    	;abs 0x2044
    1df4:	2c 32       	jn	$-934    	;abs 0x1a4e
    1df6:	29 00 55 43 	mova	&0x04355,r9	
    1dfa:	42 30       	jn	$+134    	;abs 0x1e80
    1dfc:	42 52       	rla.b	r2		
    1dfe:	30 3a       	jl	$-926    	;abs 0x1a60
    1e00:	47 28       	jnc	$+144    	;abs 0x1e90
    1e02:	31 2c       	jc	$+100    	;abs 0x1e66
    1e04:	32 29       	jnc	$+614    	;abs 0x206a
    1e06:	00 55       	add	r5,	r0	
    1e08:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1e0a:	30 42       	br	#8		;r2 As==11
    1e0c:	52 31       	jn	$+678    	;abs 0x20b2
    1e0e:	3a 47       	mov	@r7+,	r10	
    1e10:	28 31       	jn	$+594    	;abs 0x2062
    1e12:	2c 32       	jn	$-934    	;abs 0x1a6c
    1e14:	29 00 55 43 	mova	&0x04355,r9	
    1e18:	42 30       	jn	$+134    	;abs 0x1e9e
    1e1a:	49 32       	jn	$-876    	;abs 0x1aae
    1e1c:	43 49       	.word	0x4943;	????	Illegal as 2-op instr
    1e1e:	45 3a       	jl	$-884    	;abs 0x1aaa
    1e20:	47 28       	jnc	$+144    	;abs 0x1eb0
    1e22:	31 2c       	jc	$+100    	;abs 0x1e86
    1e24:	32 29       	jnc	$+614    	;abs 0x208a
    1e26:	00 55       	add	r5,	r0	
    1e28:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1e2a:	30 53       	add	#-1,	r0	;r3 As==11
    1e2c:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
    1e30:	47 28       	jnc	$+144    	;abs 0x1ec0
    1e32:	31 2c       	jc	$+100    	;abs 0x1e96
    1e34:	32 29       	jnc	$+614    	;abs 0x209a
    1e36:	00 55       	add	r5,	r0	
    1e38:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1e3a:	30 52       	add	#8,	r0	;r2 As==11
    1e3c:	58 42 55 46 	mov.b	&0x4655,r8	
    1e40:	3a 47       	mov	@r7+,	r10	
    1e42:	28 31       	jn	$+594    	;abs 0x2094
    1e44:	2c 32       	jn	$-934    	;abs 0x1a9e
    1e46:	29 00 55 43 	mova	&0x04355,r9	
    1e4a:	42 30       	jn	$+134    	;abs 0x1ed0
    1e4c:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    1e50:	46 3a       	jl	$-882    	;abs 0x1ade
    1e52:	47 28       	jnc	$+144    	;abs 0x1ee2
    1e54:	31 2c       	jc	$+100    	;abs 0x1eb8
    1e56:	32 29       	jnc	$+614    	;abs 0x20bc
    1e58:	00 55       	add	r5,	r0	
    1e5a:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1e5c:	30 49       	br	@r9+		
    1e5e:	32 43       	mov	#-1,	r2	;r3 As==11
    1e60:	4f 41       	mov.b	r1,	r15	
    1e62:	3a 47       	mov	@r7+,	r10	
    1e64:	28 31       	jn	$+594    	;abs 0x20b6
    1e66:	37 2c       	jc	$+112    	;abs 0x1ed6
    1e68:	38 29       	jnc	$+626    	;abs 0x20da
    1e6a:	00 55       	add	r5,	r0	
    1e6c:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1e6e:	30 49       	br	@r9+		
    1e70:	32 43       	mov	#-1,	r2	;r3 As==11
    1e72:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    1e74:	3a 47       	mov	@r7+,	r10	
    1e76:	28 31       	jn	$+594    	;abs 0x20c8
    1e78:	37 2c       	jc	$+112    	;abs 0x1ee8
    1e7a:	38 29       	jnc	$+626    	;abs 0x20ec
    1e7c:	00 55       	add	r5,	r0	
    1e7e:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1e80:	31 43       	mov	#-1,	r1	;r3 As==11
    1e82:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    1e86:	47 28       	jnc	$+144    	;abs 0x1f16
    1e88:	31 2c       	jc	$+100    	;abs 0x1eec
    1e8a:	32 29       	jnc	$+614    	;abs 0x20f0
    1e8c:	00 55       	add	r5,	r0	
    1e8e:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1e90:	31 43       	mov	#-1,	r1	;r3 As==11
    1e92:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    1e96:	47 28       	jnc	$+144    	;abs 0x1f26
    1e98:	31 2c       	jc	$+100    	;abs 0x1efc
    1e9a:	32 29       	jnc	$+614    	;abs 0x2100
    1e9c:	00 55       	add	r5,	r0	
    1e9e:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1ea0:	31 42       	mov	#8,	r1	;r2 As==11
    1ea2:	52 30       	jn	$+166    	;abs 0x1f48
    1ea4:	3a 47       	mov	@r7+,	r10	
    1ea6:	28 31       	jn	$+594    	;abs 0x20f8
    1ea8:	2c 32       	jn	$-934    	;abs 0x1b02
    1eaa:	29 00 55 43 	mova	&0x04355,r9	
    1eae:	41 31       	jn	$+644    	;abs 0x2132
    1eb0:	42 52       	rla.b	r2		
    1eb2:	31 3a       	jl	$-924    	;abs 0x1b16
    1eb4:	47 28       	jnc	$+144    	;abs 0x1f44
    1eb6:	31 2c       	jc	$+100    	;abs 0x1f1a
    1eb8:	32 29       	jnc	$+614    	;abs 0x211e
    1eba:	00 55       	add	r5,	r0	
    1ebc:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1ebe:	31 4d       	mov	@r13+,	r1	
    1ec0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1ec2:	4c 3a       	jl	$-870    	;abs 0x1b5c
    1ec4:	47 28       	jnc	$+144    	;abs 0x1f54
    1ec6:	31 2c       	jc	$+100    	;abs 0x1f2a
    1ec8:	32 29       	jnc	$+614    	;abs 0x212e
    1eca:	00 55       	add	r5,	r0	
    1ecc:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1ece:	31 53       	add	#-1,	r1	;r3 As==11
    1ed0:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
    1ed4:	47 28       	jnc	$+144    	;abs 0x1f64
    1ed6:	31 2c       	jc	$+100    	;abs 0x1f3a
    1ed8:	32 29       	jnc	$+614    	;abs 0x213e
    1eda:	00 55       	add	r5,	r0	
    1edc:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1ede:	31 52       	add	#8,	r1	;r2 As==11
    1ee0:	58 42 55 46 	mov.b	&0x4655,r8	
    1ee4:	3a 47       	mov	@r7+,	r10	
    1ee6:	28 31       	jn	$+594    	;abs 0x2138
    1ee8:	2c 32       	jn	$-934    	;abs 0x1b42
    1eea:	29 00 55 43 	mova	&0x04355,r9	
    1eee:	41 31       	jn	$+644    	;abs 0x2172
    1ef0:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    1ef4:	46 3a       	jl	$-882    	;abs 0x1b82
    1ef6:	47 28       	jnc	$+144    	;abs 0x1f86
    1ef8:	31 2c       	jc	$+100    	;abs 0x1f5c
    1efa:	32 29       	jnc	$+614    	;abs 0x2160
    1efc:	00 55       	add	r5,	r0	
    1efe:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    1f00:	31 41       	pop	r1		
    1f02:	42 43       	clr.b	r2		
    1f04:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1f08:	28 31       	jn	$+594    	;abs 0x215a
    1f0a:	2c 32       	jn	$-934    	;abs 0x1b64
    1f0c:	29 00 55 43 	mova	&0x04355,r9	
    1f10:	41 31       	jn	$+644    	;abs 0x2194
    1f12:	49 52       	add.b	r2,	r9	
    1f14:	54 43       	mov.b	#1,	r4	;r3 As==01
    1f16:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1f1a:	28 31       	jn	$+594    	;abs 0x216c
    1f1c:	2c 32       	jn	$-934    	;abs 0x1b76
    1f1e:	29 00 55 43 	mova	&0x04355,r9	
    1f22:	41 31       	jn	$+644    	;abs 0x21a6
    1f24:	49 52       	add.b	r2,	r9	
    1f26:	52 43       	mov.b	#1,	r2	;r3 As==01
    1f28:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    1f2c:	28 31       	jn	$+594    	;abs 0x217e
    1f2e:	2c 32       	jn	$-934    	;abs 0x1b88
    1f30:	29 00 55 43 	mova	&0x04355,r9	
    1f34:	42 31       	jn	$+646    	;abs 0x21ba
    1f36:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1f38:	4c 30       	jn	$+154    	;abs 0x1fd2
    1f3a:	3a 47       	mov	@r7+,	r10	
    1f3c:	28 31       	jn	$+594    	;abs 0x218e
    1f3e:	2c 32       	jn	$-934    	;abs 0x1b98
    1f40:	29 00 55 43 	mova	&0x04355,r9	
    1f44:	42 31       	jn	$+646    	;abs 0x21ca
    1f46:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    1f48:	4c 31       	jn	$+666    	;abs 0x21e2
    1f4a:	3a 47       	mov	@r7+,	r10	
    1f4c:	28 31       	jn	$+594    	;abs 0x219e
    1f4e:	2c 32       	jn	$-934    	;abs 0x1ba8
    1f50:	29 00 55 43 	mova	&0x04355,r9	
    1f54:	42 31       	jn	$+646    	;abs 0x21da
    1f56:	42 52       	rla.b	r2		
    1f58:	30 3a       	jl	$-926    	;abs 0x1bba
    1f5a:	47 28       	jnc	$+144    	;abs 0x1fea
    1f5c:	31 2c       	jc	$+100    	;abs 0x1fc0
    1f5e:	32 29       	jnc	$+614    	;abs 0x21c4
    1f60:	00 55       	add	r5,	r0	
    1f62:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1f64:	31 42       	mov	#8,	r1	;r2 As==11
    1f66:	52 31       	jn	$+678    	;abs 0x220c
    1f68:	3a 47       	mov	@r7+,	r10	
    1f6a:	28 31       	jn	$+594    	;abs 0x21bc
    1f6c:	2c 32       	jn	$-934    	;abs 0x1bc6
    1f6e:	29 00 55 43 	mova	&0x04355,r9	
    1f72:	42 31       	jn	$+646    	;abs 0x21f8
    1f74:	49 32       	jn	$-876    	;abs 0x1c08
    1f76:	43 49       	.word	0x4943;	????	Illegal as 2-op instr
    1f78:	45 3a       	jl	$-884    	;abs 0x1c04
    1f7a:	47 28       	jnc	$+144    	;abs 0x200a
    1f7c:	31 2c       	jc	$+100    	;abs 0x1fe0
    1f7e:	32 29       	jnc	$+614    	;abs 0x21e4
    1f80:	00 55       	add	r5,	r0	
    1f82:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1f84:	31 53       	add	#-1,	r1	;r3 As==11
    1f86:	54 41 54 3a 	mov.b	14932(r1),r4	;0x3a54(r1)
    1f8a:	47 28       	jnc	$+144    	;abs 0x201a
    1f8c:	31 2c       	jc	$+100    	;abs 0x1ff0
    1f8e:	32 29       	jnc	$+614    	;abs 0x21f4
    1f90:	00 55       	add	r5,	r0	
    1f92:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1f94:	31 52       	add	#8,	r1	;r2 As==11
    1f96:	58 42 55 46 	mov.b	&0x4655,r8	
    1f9a:	3a 47       	mov	@r7+,	r10	
    1f9c:	28 31       	jn	$+594    	;abs 0x21ee
    1f9e:	2c 32       	jn	$-934    	;abs 0x1bf8
    1fa0:	29 00 55 43 	mova	&0x04355,r9	
    1fa4:	42 31       	jn	$+646    	;abs 0x222a
    1fa6:	54 58 42 55 	add.b	21826(r8),r4	;0x5542(r8)
    1faa:	46 3a       	jl	$-882    	;abs 0x1c38
    1fac:	47 28       	jnc	$+144    	;abs 0x203c
    1fae:	31 2c       	jc	$+100    	;abs 0x2012
    1fb0:	32 29       	jnc	$+614    	;abs 0x2216
    1fb2:	00 55       	add	r5,	r0	
    1fb4:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1fb6:	31 49       	mov	@r9+,	r1	
    1fb8:	32 43       	mov	#-1,	r2	;r3 As==11
    1fba:	4f 41       	mov.b	r1,	r15	
    1fbc:	3a 47       	mov	@r7+,	r10	
    1fbe:	28 31       	jn	$+594    	;abs 0x2210
    1fc0:	37 2c       	jc	$+112    	;abs 0x2030
    1fc2:	38 29       	jnc	$+626    	;abs 0x2234
    1fc4:	00 55       	add	r5,	r0	
    1fc6:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    1fc8:	31 49       	mov	@r9+,	r1	
    1fca:	32 43       	mov	#-1,	r2	;r3 As==11
    1fcc:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    1fce:	3a 47       	mov	@r7+,	r10	
    1fd0:	28 31       	jn	$+594    	;abs 0x2222
    1fd2:	37 2c       	jc	$+112    	;abs 0x2042
    1fd4:	38 29       	jnc	$+626    	;abs 0x2246
    1fd6:	00 55       	add	r5,	r0	
    1fd8:	43 31       	jn	$+648    	;abs 0x2260
    1fda:	49 45       	mov.b	r5,	r9	
    1fdc:	3a 47       	mov	@r7+,	r10	
    1fde:	28 31       	jn	$+594    	;abs 0x2230
    1fe0:	2c 32       	jn	$-934    	;abs 0x1c3a
    1fe2:	29 00 55 43 	mova	&0x04355,r9	
    1fe6:	31 49       	mov	@r9+,	r1	
    1fe8:	46 47       	mov.b	r7,	r6	
    1fea:	3a 47       	mov	@r7+,	r10	
    1fec:	28 31       	jn	$+594    	;abs 0x223e
    1fee:	2c 32       	jn	$-934    	;abs 0x1c48
    1ff0:	29 00 54 41 	mova	&0x04154,r9	
    1ff4:	30 49       	br	@r9+		
    1ff6:	56 3a       	jl	$-850    	;abs 0x1ca4
    1ff8:	47 28       	jnc	$+144    	;abs 0x2088
    1ffa:	31 37       	jge	$-412    	;abs 0x1e5e
    1ffc:	2c 38       	jl	$+90     	;abs 0x2056
    1ffe:	29 00 54 41 	mova	&0x04154,r9	
    2002:	30 43       	br	#-1		;r3 As==11
    2004:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    2008:	28 31       	jn	$+594    	;abs 0x225a
    200a:	37 2c       	jc	$+112    	;abs 0x207a
    200c:	38 29       	jnc	$+626    	;abs 0x227e
    200e:	00 54       	add	r4,	r0	
    2010:	41 30       	jn	$+132    	;abs 0x2094
    2012:	52 3a       	jl	$-858    	;abs 0x1cb8
    2014:	47 28       	jnc	$+144    	;abs 0x20a4
    2016:	31 37       	jge	$-412    	;abs 0x1e7a
    2018:	2c 38       	jl	$+90     	;abs 0x2072
    201a:	29 00 54 41 	mova	&0x04154,r9	
    201e:	30 43       	br	#-1		;r3 As==11
    2020:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2022:	4c 30       	jn	$+154    	;abs 0x20bc
    2024:	3a 47       	mov	@r7+,	r10	
    2026:	28 31       	jn	$+594    	;abs 0x2278
    2028:	37 2c       	jc	$+112    	;abs 0x2098
    202a:	38 29       	jnc	$+626    	;abs 0x229c
    202c:	00 54       	add	r4,	r0	
    202e:	41 30       	jn	$+132    	;abs 0x20b2
    2030:	43 43       	clr.b	#0		;r3 As==00
    2032:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    2036:	47 28       	jnc	$+144    	;abs 0x20c6
    2038:	31 37       	jge	$-412    	;abs 0x1e9c
    203a:	2c 38       	jl	$+90     	;abs 0x2094
    203c:	29 00 54 41 	mova	&0x04154,r9	
    2040:	30 43       	br	#-1		;r3 As==11
    2042:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2044:	30 3a       	jl	$-926    	;abs 0x1ca6
    2046:	47 28       	jnc	$+144    	;abs 0x20d6
    2048:	31 37       	jge	$-412    	;abs 0x1eac
    204a:	2c 38       	jl	$+90     	;abs 0x20a4
    204c:	29 00 54 41 	mova	&0x04154,r9	
    2050:	30 43       	br	#-1		;r3 As==11
    2052:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2054:	31 3a       	jl	$-924    	;abs 0x1cb8
    2056:	47 28       	jnc	$+144    	;abs 0x20e6
    2058:	31 37       	jge	$-412    	;abs 0x1ebc
    205a:	2c 38       	jl	$+90     	;abs 0x20b4
    205c:	29 00 54 41 	mova	&0x04154,r9	
    2060:	30 43       	br	#-1		;r3 As==11
    2062:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2064:	4c 32       	jn	$-870    	;abs 0x1cfe
    2066:	3a 47       	mov	@r7+,	r10	
    2068:	28 31       	jn	$+594    	;abs 0x22ba
    206a:	37 2c       	jc	$+112    	;abs 0x20da
    206c:	38 29       	jnc	$+626    	;abs 0x22de
    206e:	00 54       	add	r4,	r0	
    2070:	41 30       	jn	$+132    	;abs 0x20f4
    2072:	43 43       	clr.b	#0		;r3 As==00
    2074:	52 32       	jn	$-858    	;abs 0x1d1a
    2076:	3a 47       	mov	@r7+,	r10	
    2078:	28 31       	jn	$+594    	;abs 0x22ca
    207a:	37 2c       	jc	$+112    	;abs 0x20ea
    207c:	38 29       	jnc	$+626    	;abs 0x22ee
    207e:	00 74       	subc	r4,	r0	
    2080:	69 6d       	addc.b	@r13,	r9	
    2082:	65 72       	subc.b	#4,	r5	;r2 As==10
    2084:	61 3a       	jl	$-828    	;abs 0x1d48
    2086:	47 28       	jnc	$+144    	;abs 0x2116
    2088:	31 37       	jge	$-412    	;abs 0x1eec
    208a:	2c 35       	jge	$+602    	;abs 0x22e4
    208c:	29 00 54 42 	mova	&0x04254,r9	
    2090:	49 56       	add.b	r6,	r9	
    2092:	3a 47       	mov	@r7+,	r10	
    2094:	28 31       	jn	$+594    	;abs 0x22e6
    2096:	37 2c       	jc	$+112    	;abs 0x2106
    2098:	38 29       	jnc	$+626    	;abs 0x230a
    209a:	00 54       	add	r4,	r0	
    209c:	42 43       	clr.b	r2		
    209e:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    20a2:	28 31       	jn	$+594    	;abs 0x22f4
    20a4:	37 2c       	jc	$+112    	;abs 0x2114
    20a6:	38 29       	jnc	$+626    	;abs 0x2318
    20a8:	00 54       	add	r4,	r0	
    20aa:	42 52       	rla.b	r2		
    20ac:	3a 47       	mov	@r7+,	r10	
    20ae:	28 31       	jn	$+594    	;abs 0x2300
    20b0:	37 2c       	jc	$+112    	;abs 0x2120
    20b2:	38 29       	jnc	$+626    	;abs 0x2324
    20b4:	00 54       	add	r4,	r0	
    20b6:	42 43       	clr.b	r2		
    20b8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    20ba:	4c 30       	jn	$+154    	;abs 0x2154
    20bc:	3a 47       	mov	@r7+,	r10	
    20be:	28 31       	jn	$+594    	;abs 0x2310
    20c0:	37 2c       	jc	$+112    	;abs 0x2130
    20c2:	38 29       	jnc	$+626    	;abs 0x2334
    20c4:	00 54       	add	r4,	r0	
    20c6:	42 43       	clr.b	r2		
    20c8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    20ca:	4c 31       	jn	$+666    	;abs 0x2364
    20cc:	3a 47       	mov	@r7+,	r10	
    20ce:	28 31       	jn	$+594    	;abs 0x2320
    20d0:	37 2c       	jc	$+112    	;abs 0x2140
    20d2:	38 29       	jnc	$+626    	;abs 0x2344
    20d4:	00 54       	add	r4,	r0	
    20d6:	42 43       	clr.b	r2		
    20d8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    20da:	4c 32       	jn	$-870    	;abs 0x1d74
    20dc:	3a 47       	mov	@r7+,	r10	
    20de:	28 31       	jn	$+594    	;abs 0x2330
    20e0:	37 2c       	jc	$+112    	;abs 0x2150
    20e2:	38 29       	jnc	$+626    	;abs 0x2354
    20e4:	00 54       	add	r4,	r0	
    20e6:	42 43       	clr.b	r2		
    20e8:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    20ea:	30 3a       	jl	$-926    	;abs 0x1d4c
    20ec:	47 28       	jnc	$+144    	;abs 0x217c
    20ee:	31 37       	jge	$-412    	;abs 0x1f52
    20f0:	2c 38       	jl	$+90     	;abs 0x214a
    20f2:	29 00 54 42 	mova	&0x04254,r9	
    20f6:	43 43       	clr.b	#0		;r3 As==00
    20f8:	52 31       	jn	$+678    	;abs 0x239e
    20fa:	3a 47       	mov	@r7+,	r10	
    20fc:	28 31       	jn	$+594    	;abs 0x234e
    20fe:	37 2c       	jc	$+112    	;abs 0x216e
    2100:	38 29       	jnc	$+626    	;abs 0x2372
    2102:	00 54       	add	r4,	r0	
    2104:	42 43       	clr.b	r2		
    2106:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2108:	32 3a       	jl	$-922    	;abs 0x1d6e
    210a:	47 28       	jnc	$+144    	;abs 0x219a
    210c:	31 37       	jge	$-412    	;abs 0x1f70
    210e:	2c 38       	jl	$+90     	;abs 0x2168
    2110:	29 00 54 42 	mova	&0x04254,r9	
    2114:	43 43       	clr.b	#0		;r3 As==00
    2116:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    211a:	47 28       	jnc	$+144    	;abs 0x21aa
    211c:	31 37       	jge	$-412    	;abs 0x1f80
    211e:	2c 38       	jl	$+90     	;abs 0x2178
    2120:	29 00 54 42 	mova	&0x04254,r9	
    2124:	43 43       	clr.b	#0		;r3 As==00
    2126:	54 4c 34 3a 	mov.b	14900(r12),r4	;0x3a34(r12)
    212a:	47 28       	jnc	$+144    	;abs 0x21ba
    212c:	31 37       	jge	$-412    	;abs 0x1f90
    212e:	2c 38       	jl	$+90     	;abs 0x2188
    2130:	29 00 54 42 	mova	&0x04254,r9	
    2134:	43 43       	clr.b	#0		;r3 As==00
    2136:	54 4c 35 3a 	mov.b	14901(r12),r4	;0x3a35(r12)
    213a:	47 28       	jnc	$+144    	;abs 0x21ca
    213c:	31 37       	jge	$-412    	;abs 0x1fa0
    213e:	2c 38       	jl	$+90     	;abs 0x2198
    2140:	29 00 54 42 	mova	&0x04254,r9	
    2144:	43 43       	clr.b	#0		;r3 As==00
    2146:	54 4c 36 3a 	mov.b	14902(r12),r4	;0x3a36(r12)
    214a:	47 28       	jnc	$+144    	;abs 0x21da
    214c:	31 37       	jge	$-412    	;abs 0x1fb0
    214e:	2c 38       	jl	$+90     	;abs 0x21a8
    2150:	29 00 54 42 	mova	&0x04254,r9	
    2154:	43 43       	clr.b	#0		;r3 As==00
    2156:	52 33       	jn	$-346    	;abs 0x1ffc
    2158:	3a 47       	mov	@r7+,	r10	
    215a:	28 31       	jn	$+594    	;abs 0x23ac
    215c:	37 2c       	jc	$+112    	;abs 0x21cc
    215e:	38 29       	jnc	$+626    	;abs 0x23d0
    2160:	00 54       	add	r4,	r0	
    2162:	42 43       	clr.b	r2		
    2164:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2166:	34 3a       	jl	$-918    	;abs 0x1dd0
    2168:	47 28       	jnc	$+144    	;abs 0x21f8
    216a:	31 37       	jge	$-412    	;abs 0x1fce
    216c:	2c 38       	jl	$+90     	;abs 0x21c6
    216e:	29 00 54 42 	mova	&0x04254,r9	
    2172:	43 43       	clr.b	#0		;r3 As==00
    2174:	52 35       	jge	$+678    	;abs 0x241a
    2176:	3a 47       	mov	@r7+,	r10	
    2178:	28 31       	jn	$+594    	;abs 0x23ca
    217a:	37 2c       	jc	$+112    	;abs 0x21ea
    217c:	38 29       	jnc	$+626    	;abs 0x23ee
    217e:	00 54       	add	r4,	r0	
    2180:	42 43       	clr.b	r2		
    2182:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2184:	36 3a       	jl	$-914    	;abs 0x1df2
    2186:	47 28       	jnc	$+144    	;abs 0x2216
    2188:	31 37       	jge	$-412    	;abs 0x1fec
    218a:	2c 38       	jl	$+90     	;abs 0x21e4
    218c:	29 00 74 69 	mova	&0x06974,r9	
    2190:	6d 65       	addc.b	@r5,	r13	
    2192:	72 62       	addc.b	#8,	r2	;r2 As==11
    2194:	3a 47       	mov	@r7+,	r10	
    2196:	28 31       	jn	$+594    	;abs 0x23e8
    2198:	38 2c       	jc	$+114    	;abs 0x220a
    219a:	35 29       	jnc	$+620    	;abs 0x2406
    219c:	00 44       	br	r4		
    219e:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    21a0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    21a2:	4c 3a       	jl	$-870    	;abs 0x1e3c
    21a4:	47 28       	jnc	$+144    	;abs 0x2234
    21a6:	31 2c       	jc	$+100    	;abs 0x220a
    21a8:	32 29       	jnc	$+614    	;abs 0x240e
    21aa:	00 42       	br	r2		
    21ac:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    21ae:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    21b0:	4c 31       	jn	$+666    	;abs 0x244a
    21b2:	3a 47       	mov	@r7+,	r10	
    21b4:	28 31       	jn	$+594    	;abs 0x2406
    21b6:	2c 32       	jn	$-934    	;abs 0x1e10
    21b8:	29 00 42 43 	mova	&0x04342,r9	
    21bc:	53 43       	.word	0x4353;	????	Illegal as 2-op instr
    21be:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    21c2:	47 28       	jnc	$+144    	;abs 0x2252
    21c4:	31 2c       	jc	$+100    	;abs 0x2228
    21c6:	32 29       	jnc	$+614    	;abs 0x242c
    21c8:	00 42       	br	r2		
    21ca:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    21cc:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    21ce:	4c 33       	jn	$-358    	;abs 0x2068
    21d0:	3a 47       	mov	@r7+,	r10	
    21d2:	28 31       	jn	$+594    	;abs 0x2424
    21d4:	2c 32       	jn	$-934    	;abs 0x1e2e
    21d6:	29 00 46 43 	mova	&0x04346,r9	
    21da:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    21de:	47 28       	jnc	$+144    	;abs 0x226e
    21e0:	31 37       	jge	$-412    	;abs 0x2044
    21e2:	2c 38       	jl	$+90     	;abs 0x223c
    21e4:	29 00 46 43 	mova	&0x04346,r9	
    21e8:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    21ec:	47 28       	jnc	$+144    	;abs 0x227c
    21ee:	31 37       	jge	$-412    	;abs 0x2052
    21f0:	2c 38       	jl	$+90     	;abs 0x224a
    21f2:	29 00 46 43 	mova	&0x04346,r9	
    21f6:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    21fa:	47 28       	jnc	$+144    	;abs 0x228a
    21fc:	31 37       	jge	$-412    	;abs 0x2060
    21fe:	2c 38       	jl	$+90     	;abs 0x2258
    2200:	29 00 43 41 	mova	&0x04143,r9	
    2204:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2206:	4c 31       	jn	$+666    	;abs 0x24a0
    2208:	3a 47       	mov	@r7+,	r10	
    220a:	28 31       	jn	$+594    	;abs 0x245c
    220c:	2c 32       	jn	$-934    	;abs 0x1e66
    220e:	29 00 43 41 	mova	&0x04143,r9	
    2212:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2214:	4c 32       	jn	$-870    	;abs 0x1eae
    2216:	3a 47       	mov	@r7+,	r10	
    2218:	28 31       	jn	$+594    	;abs 0x246a
    221a:	2c 32       	jn	$-934    	;abs 0x1e74
    221c:	29 00 43 41 	mova	&0x04143,r9	
    2220:	50 44 3a 47 	br	18234(r4)	;0x473a(r4)
    2224:	28 31       	jn	$+594    	;abs 0x2476
    2226:	2c 32       	jn	$-934    	;abs 0x1e80
    2228:	29 00 41 44 	mova	&0x04441,r9	
    222c:	43 31       	jn	$+648    	;abs 0x24b4
    222e:	32 43       	mov	#-1,	r2	;r3 As==11
    2230:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    2234:	47 28       	jnc	$+144    	;abs 0x22c4
    2236:	31 37       	jge	$-412    	;abs 0x209a
    2238:	2c 38       	jl	$+90     	;abs 0x2292
    223a:	29 00 41 44 	mova	&0x04441,r9	
    223e:	43 31       	jn	$+648    	;abs 0x24c6
    2240:	32 43       	mov	#-1,	r2	;r3 As==11
    2242:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    2246:	47 28       	jnc	$+144    	;abs 0x22d6
    2248:	31 37       	jge	$-412    	;abs 0x20ac
    224a:	2c 38       	jl	$+90     	;abs 0x22a4
    224c:	29 00 41 44 	mova	&0x04441,r9	
    2250:	43 31       	jn	$+648    	;abs 0x24d8
    2252:	32 49       	mov	@r9+,	r2	
    2254:	46 47       	mov.b	r7,	r6	
    2256:	3a 47       	mov	@r7+,	r10	
    2258:	28 31       	jn	$+594    	;abs 0x24aa
    225a:	37 2c       	jc	$+112    	;abs 0x22ca
    225c:	38 29       	jnc	$+626    	;abs 0x24ce
    225e:	00 41       	br	r1		
    2260:	44 43       	clr.b	r4		
    2262:	31 32       	jn	$-924    	;abs 0x1ec6
    2264:	49 45       	mov.b	r5,	r9	
    2266:	3a 47       	mov	@r7+,	r10	
    2268:	28 31       	jn	$+594    	;abs 0x24ba
    226a:	37 2c       	jc	$+112    	;abs 0x22da
    226c:	38 29       	jnc	$+626    	;abs 0x24de
    226e:	00 41       	br	r1		
    2270:	44 43       	clr.b	r4		
    2272:	31 32       	jn	$-924    	;abs 0x1ed6
    2274:	49 56       	add.b	r6,	r9	
    2276:	3a 47       	mov	@r7+,	r10	
    2278:	28 31       	jn	$+594    	;abs 0x24ca
    227a:	37 2c       	jc	$+112    	;abs 0x22ea
    227c:	38 29       	jnc	$+626    	;abs 0x24ee
    227e:	00 61       	addc	r1,	r0	
    2280:	64 63       	addc.b	#2,	r4	;r3 As==10
    2282:	31 32       	jn	$-924    	;abs 0x1ee6
    2284:	3a 47       	mov	@r7+,	r10	
    2286:	28 32       	jn	$-942    	;abs 0x1ed8
    2288:	32 2c       	jc	$+102    	;abs 0x22ee
    228a:	37 29       	jnc	$+624    	;abs 0x24fa
    228c:	00 41       	br	r1		
    228e:	44 43       	clr.b	r4		
    2290:	31 32       	jn	$-924    	;abs 0x1ef4
    2292:	4d 45       	mov.b	r5,	r13	
    2294:	4d 30       	jn	$+156    	;abs 0x2330
    2296:	3a 47       	mov	@r7+,	r10	
    2298:	28 31       	jn	$+594    	;abs 0x24ea
    229a:	37 2c       	jc	$+112    	;abs 0x230a
    229c:	38 29       	jnc	$+626    	;abs 0x250e
    229e:	00 41       	br	r1		
    22a0:	44 43       	clr.b	r4		
    22a2:	31 32       	jn	$-924    	;abs 0x1f06
    22a4:	4d 45       	mov.b	r5,	r13	
    22a6:	4d 31       	jn	$+668    	;abs 0x2542
    22a8:	3a 47       	mov	@r7+,	r10	
    22aa:	28 31       	jn	$+594    	;abs 0x24fc
    22ac:	37 2c       	jc	$+112    	;abs 0x231c
    22ae:	38 29       	jnc	$+626    	;abs 0x2520
    22b0:	00 41       	br	r1		
    22b2:	44 43       	clr.b	r4		
    22b4:	31 32       	jn	$-924    	;abs 0x1f18
    22b6:	4d 45       	mov.b	r5,	r13	
    22b8:	4d 32       	jn	$-868    	;abs 0x1f54
    22ba:	3a 47       	mov	@r7+,	r10	
    22bc:	28 31       	jn	$+594    	;abs 0x250e
    22be:	37 2c       	jc	$+112    	;abs 0x232e
    22c0:	38 29       	jnc	$+626    	;abs 0x2532
    22c2:	00 41       	br	r1		
    22c4:	44 43       	clr.b	r4		
    22c6:	31 32       	jn	$-924    	;abs 0x1f2a
    22c8:	4d 45       	mov.b	r5,	r13	
    22ca:	4d 33       	jn	$-356    	;abs 0x2166
    22cc:	3a 47       	mov	@r7+,	r10	
    22ce:	28 31       	jn	$+594    	;abs 0x2520
    22d0:	37 2c       	jc	$+112    	;abs 0x2340
    22d2:	38 29       	jnc	$+626    	;abs 0x2544
    22d4:	00 41       	br	r1		
    22d6:	44 43       	clr.b	r4		
    22d8:	31 32       	jn	$-924    	;abs 0x1f3c
    22da:	4d 45       	mov.b	r5,	r13	
    22dc:	4d 34       	jge	$+156    	;abs 0x2378
    22de:	3a 47       	mov	@r7+,	r10	
    22e0:	28 31       	jn	$+594    	;abs 0x2532
    22e2:	37 2c       	jc	$+112    	;abs 0x2352
    22e4:	38 29       	jnc	$+626    	;abs 0x2556
    22e6:	00 41       	br	r1		
    22e8:	44 43       	clr.b	r4		
    22ea:	31 32       	jn	$-924    	;abs 0x1f4e
    22ec:	4d 45       	mov.b	r5,	r13	
    22ee:	4d 35       	jge	$+668    	;abs 0x258a
    22f0:	3a 47       	mov	@r7+,	r10	
    22f2:	28 31       	jn	$+594    	;abs 0x2544
    22f4:	37 2c       	jc	$+112    	;abs 0x2364
    22f6:	38 29       	jnc	$+626    	;abs 0x2568
    22f8:	00 41       	br	r1		
    22fa:	44 43       	clr.b	r4		
    22fc:	31 32       	jn	$-924    	;abs 0x1f60
    22fe:	4d 45       	mov.b	r5,	r13	
    2300:	4d 36       	jge	$-868    	;abs 0x1f9c
    2302:	3a 47       	mov	@r7+,	r10	
    2304:	28 31       	jn	$+594    	;abs 0x2556
    2306:	37 2c       	jc	$+112    	;abs 0x2376
    2308:	38 29       	jnc	$+626    	;abs 0x257a
    230a:	00 41       	br	r1		
    230c:	44 43       	clr.b	r4		
    230e:	31 32       	jn	$-924    	;abs 0x1f72
    2310:	4d 45       	mov.b	r5,	r13	
    2312:	4d 37       	jge	$-356    	;abs 0x21ae
    2314:	3a 47       	mov	@r7+,	r10	
    2316:	28 31       	jn	$+594    	;abs 0x2568
    2318:	37 2c       	jc	$+112    	;abs 0x2388
    231a:	38 29       	jnc	$+626    	;abs 0x258c
    231c:	00 41       	br	r1		
    231e:	44 43       	clr.b	r4		
    2320:	31 32       	jn	$-924    	;abs 0x1f84
    2322:	4d 45       	mov.b	r5,	r13	
    2324:	4d 38       	jl	$+156    	;abs 0x23c0
    2326:	3a 47       	mov	@r7+,	r10	
    2328:	28 31       	jn	$+594    	;abs 0x257a
    232a:	37 2c       	jc	$+112    	;abs 0x239a
    232c:	38 29       	jnc	$+626    	;abs 0x259e
    232e:	00 41       	br	r1		
    2330:	44 43       	clr.b	r4		
    2332:	31 32       	jn	$-924    	;abs 0x1f96
    2334:	4d 45       	mov.b	r5,	r13	
    2336:	4d 39       	jl	$+668    	;abs 0x25d2
    2338:	3a 47       	mov	@r7+,	r10	
    233a:	28 31       	jn	$+594    	;abs 0x258c
    233c:	37 2c       	jc	$+112    	;abs 0x23ac
    233e:	38 29       	jnc	$+626    	;abs 0x25b0
    2340:	00 41       	br	r1		
    2342:	44 43       	clr.b	r4		
    2344:	31 32       	jn	$-924    	;abs 0x1fa8
    2346:	4d 45       	mov.b	r5,	r13	
    2348:	4d 31       	jn	$+668    	;abs 0x25e4
    234a:	30 3a       	jl	$-926    	;abs 0x1fac
    234c:	47 28       	jnc	$+144    	;abs 0x23dc
    234e:	31 37       	jge	$-412    	;abs 0x21b2
    2350:	2c 38       	jl	$+90     	;abs 0x23aa
    2352:	29 00 41 44 	mova	&0x04441,r9	
    2356:	43 31       	jn	$+648    	;abs 0x25de
    2358:	32 4d       	mov	@r13+,	r2	
    235a:	45 4d       	mov.b	r13,	r5	
    235c:	31 31       	jn	$+612    	;abs 0x25c0
    235e:	3a 47       	mov	@r7+,	r10	
    2360:	28 31       	jn	$+594    	;abs 0x25b2
    2362:	37 2c       	jc	$+112    	;abs 0x23d2
    2364:	38 29       	jnc	$+626    	;abs 0x25d6
    2366:	00 41       	br	r1		
    2368:	44 43       	clr.b	r4		
    236a:	31 32       	jn	$-924    	;abs 0x1fce
    236c:	4d 45       	mov.b	r5,	r13	
    236e:	4d 31       	jn	$+668    	;abs 0x260a
    2370:	32 3a       	jl	$-922    	;abs 0x1fd6
    2372:	47 28       	jnc	$+144    	;abs 0x2402
    2374:	31 37       	jge	$-412    	;abs 0x21d8
    2376:	2c 38       	jl	$+90     	;abs 0x23d0
    2378:	29 00 41 44 	mova	&0x04441,r9	
    237c:	43 31       	jn	$+648    	;abs 0x2604
    237e:	32 4d       	mov	@r13+,	r2	
    2380:	45 4d       	mov.b	r13,	r5	
    2382:	31 33       	jn	$-412    	;abs 0x21e6
    2384:	3a 47       	mov	@r7+,	r10	
    2386:	28 31       	jn	$+594    	;abs 0x25d8
    2388:	37 2c       	jc	$+112    	;abs 0x23f8
    238a:	38 29       	jnc	$+626    	;abs 0x25fc
    238c:	00 41       	br	r1		
    238e:	44 43       	clr.b	r4		
    2390:	31 32       	jn	$-924    	;abs 0x1ff4
    2392:	4d 45       	mov.b	r5,	r13	
    2394:	4d 31       	jn	$+668    	;abs 0x2630
    2396:	34 3a       	jl	$-918    	;abs 0x2000
    2398:	47 28       	jnc	$+144    	;abs 0x2428
    239a:	31 37       	jge	$-412    	;abs 0x21fe
    239c:	2c 38       	jl	$+90     	;abs 0x23f6
    239e:	29 00 41 44 	mova	&0x04441,r9	
    23a2:	43 31       	jn	$+648    	;abs 0x262a
    23a4:	32 4d       	mov	@r13+,	r2	
    23a6:	45 4d       	mov.b	r13,	r5	
    23a8:	31 35       	jge	$+612    	;abs 0x260c
    23aa:	3a 47       	mov	@r7+,	r10	
    23ac:	28 31       	jn	$+594    	;abs 0x25fe
    23ae:	37 2c       	jc	$+112    	;abs 0x241e
    23b0:	38 29       	jnc	$+626    	;abs 0x2622
    23b2:	00 41       	br	r1		
    23b4:	44 43       	clr.b	r4		
    23b6:	31 32       	jn	$-924    	;abs 0x201a
    23b8:	4d 43       	clr.b	r13		
    23ba:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    23be:	47 28       	jnc	$+144    	;abs 0x244e
    23c0:	31 2c       	jc	$+100    	;abs 0x2424
    23c2:	32 29       	jnc	$+614    	;abs 0x2628
    23c4:	00 41       	br	r1		
    23c6:	44 43       	clr.b	r4		
    23c8:	31 32       	jn	$-924    	;abs 0x202c
    23ca:	4d 43       	clr.b	r13		
    23cc:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    23d0:	47 28       	jnc	$+144    	;abs 0x2460
    23d2:	31 2c       	jc	$+100    	;abs 0x2436
    23d4:	32 29       	jnc	$+614    	;abs 0x263a
    23d6:	00 41       	br	r1		
    23d8:	44 43       	clr.b	r4		
    23da:	31 32       	jn	$-924    	;abs 0x203e
    23dc:	4d 43       	clr.b	r13		
    23de:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    23e2:	47 28       	jnc	$+144    	;abs 0x2472
    23e4:	31 2c       	jc	$+100    	;abs 0x2448
    23e6:	32 29       	jnc	$+614    	;abs 0x264c
    23e8:	00 41       	br	r1		
    23ea:	44 43       	clr.b	r4		
    23ec:	31 32       	jn	$-924    	;abs 0x2050
    23ee:	4d 43       	clr.b	r13		
    23f0:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    23f4:	47 28       	jnc	$+144    	;abs 0x2484
    23f6:	31 2c       	jc	$+100    	;abs 0x245a
    23f8:	32 29       	jnc	$+614    	;abs 0x265e
    23fa:	00 41       	br	r1		
    23fc:	44 43       	clr.b	r4		
    23fe:	31 32       	jn	$-924    	;abs 0x2062
    2400:	4d 43       	clr.b	r13		
    2402:	54 4c 34 3a 	mov.b	14900(r12),r4	;0x3a34(r12)
    2406:	47 28       	jnc	$+144    	;abs 0x2496
    2408:	31 2c       	jc	$+100    	;abs 0x246c
    240a:	32 29       	jnc	$+614    	;abs 0x2670
    240c:	00 41       	br	r1		
    240e:	44 43       	clr.b	r4		
    2410:	31 32       	jn	$-924    	;abs 0x2074
    2412:	4d 43       	clr.b	r13		
    2414:	54 4c 35 3a 	mov.b	14901(r12),r4	;0x3a35(r12)
    2418:	47 28       	jnc	$+144    	;abs 0x24a8
    241a:	31 2c       	jc	$+100    	;abs 0x247e
    241c:	32 29       	jnc	$+614    	;abs 0x2682
    241e:	00 41       	br	r1		
    2420:	44 43       	clr.b	r4		
    2422:	31 32       	jn	$-924    	;abs 0x2086
    2424:	4d 43       	clr.b	r13		
    2426:	54 4c 36 3a 	mov.b	14902(r12),r4	;0x3a36(r12)
    242a:	47 28       	jnc	$+144    	;abs 0x24ba
    242c:	31 2c       	jc	$+100    	;abs 0x2490
    242e:	32 29       	jnc	$+614    	;abs 0x2694
    2430:	00 41       	br	r1		
    2432:	44 43       	clr.b	r4		
    2434:	31 32       	jn	$-924    	;abs 0x2098
    2436:	4d 43       	clr.b	r13		
    2438:	54 4c 37 3a 	mov.b	14903(r12),r4	;0x3a37(r12)
    243c:	47 28       	jnc	$+144    	;abs 0x24cc
    243e:	31 2c       	jc	$+100    	;abs 0x24a2
    2440:	32 29       	jnc	$+614    	;abs 0x26a6
    2442:	00 41       	br	r1		
    2444:	44 43       	clr.b	r4		
    2446:	31 32       	jn	$-924    	;abs 0x20aa
    2448:	4d 43       	clr.b	r13		
    244a:	54 4c 38 3a 	mov.b	14904(r12),r4	;0x3a38(r12)
    244e:	47 28       	jnc	$+144    	;abs 0x24de
    2450:	31 2c       	jc	$+100    	;abs 0x24b4
    2452:	32 29       	jnc	$+614    	;abs 0x26b8
    2454:	00 41       	br	r1		
    2456:	44 43       	clr.b	r4		
    2458:	31 32       	jn	$-924    	;abs 0x20bc
    245a:	4d 43       	clr.b	r13		
    245c:	54 4c 39 3a 	mov.b	14905(r12),r4	;0x3a39(r12)
    2460:	47 28       	jnc	$+144    	;abs 0x24f0
    2462:	31 2c       	jc	$+100    	;abs 0x24c6
    2464:	32 29       	jnc	$+614    	;abs 0x26ca
    2466:	00 41       	br	r1		
    2468:	44 43       	clr.b	r4		
    246a:	31 32       	jn	$-924    	;abs 0x20ce
    246c:	4d 43       	clr.b	r13		
    246e:	54 4c 31 30 	mov.b	12337(r12),r4	;0x3031(r12)
    2472:	3a 47       	mov	@r7+,	r10	
    2474:	28 31       	jn	$+594    	;abs 0x26c6
    2476:	2c 32       	jn	$-934    	;abs 0x20d0
    2478:	29 00 41 44 	mova	&0x04441,r9	
    247c:	43 31       	jn	$+648    	;abs 0x2704
    247e:	32 4d       	mov	@r13+,	r2	
    2480:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2482:	4c 31       	jn	$+666    	;abs 0x271c
    2484:	31 3a       	jl	$-924    	;abs 0x20e8
    2486:	47 28       	jnc	$+144    	;abs 0x2516
    2488:	31 2c       	jc	$+100    	;abs 0x24ec
    248a:	32 29       	jnc	$+614    	;abs 0x26f0
    248c:	00 41       	br	r1		
    248e:	44 43       	clr.b	r4		
    2490:	31 32       	jn	$-924    	;abs 0x20f4
    2492:	4d 43       	clr.b	r13		
    2494:	54 4c 31 32 	mov.b	12849(r12),r4	;0x3231(r12)
    2498:	3a 47       	mov	@r7+,	r10	
    249a:	28 31       	jn	$+594    	;abs 0x26ec
    249c:	2c 32       	jn	$-934    	;abs 0x20f6
    249e:	29 00 41 44 	mova	&0x04441,r9	
    24a2:	43 31       	jn	$+648    	;abs 0x272a
    24a4:	32 4d       	mov	@r13+,	r2	
    24a6:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    24a8:	4c 31       	jn	$+666    	;abs 0x2742
    24aa:	33 3a       	jl	$-920    	;abs 0x2112
    24ac:	47 28       	jnc	$+144    	;abs 0x253c
    24ae:	31 2c       	jc	$+100    	;abs 0x2512
    24b0:	32 29       	jnc	$+614    	;abs 0x2716
    24b2:	00 41       	br	r1		
    24b4:	44 43       	clr.b	r4		
    24b6:	31 32       	jn	$-924    	;abs 0x211a
    24b8:	4d 43       	clr.b	r13		
    24ba:	54 4c 31 34 	mov.b	13361(r12),r4	;0x3431(r12)
    24be:	3a 47       	mov	@r7+,	r10	
    24c0:	28 31       	jn	$+594    	;abs 0x2712
    24c2:	2c 32       	jn	$-934    	;abs 0x211c
    24c4:	29 00 41 44 	mova	&0x04441,r9	
    24c8:	43 31       	jn	$+648    	;abs 0x2750
    24ca:	32 4d       	mov	@r13+,	r2	
    24cc:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    24ce:	4c 31       	jn	$+666    	;abs 0x2768
    24d0:	35 3a       	jl	$-916    	;abs 0x213c
    24d2:	47 28       	jnc	$+144    	;abs 0x2562
    24d4:	31 2c       	jc	$+100    	;abs 0x2538
    24d6:	32 29       	jnc	$+614    	;abs 0x273c
    24d8:	00 44       	br	r4		
    24da:	41 43       	clr.b	r1		
    24dc:	31 32       	jn	$-924    	;abs 0x2140
    24de:	5f 30       	jn	$+192    	;abs 0x259e
    24e0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    24e2:	4c 3a       	jl	$-870    	;abs 0x217c
    24e4:	47 28       	jnc	$+144    	;abs 0x2574
    24e6:	31 37       	jge	$-412    	;abs 0x234a
    24e8:	2c 38       	jl	$+90     	;abs 0x2542
    24ea:	29 00 44 41 	mova	&0x04144,r9	
    24ee:	43 31       	jn	$+648    	;abs 0x2776
    24f0:	32 5f       	add	@r15+,	r2	
    24f2:	31 43       	mov	#-1,	r1	;r3 As==11
    24f4:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    24f8:	28 31       	jn	$+594    	;abs 0x274a
    24fa:	37 2c       	jc	$+112    	;abs 0x256a
    24fc:	38 29       	jnc	$+626    	;abs 0x276e
    24fe:	00 44       	br	r4		
    2500:	41 43       	clr.b	r1		
    2502:	31 32       	jn	$-924    	;abs 0x2166
    2504:	5f 30       	jn	$+192    	;abs 0x25c4
    2506:	44 41       	mov.b	r1,	r4	
    2508:	54 3a       	jl	$-854    	;abs 0x21b2
    250a:	47 28       	jnc	$+144    	;abs 0x259a
    250c:	31 37       	jge	$-412    	;abs 0x2370
    250e:	2c 38       	jl	$+90     	;abs 0x2568
    2510:	29 00 44 41 	mova	&0x04144,r9	
    2514:	43 31       	jn	$+648    	;abs 0x279c
    2516:	32 5f       	add	@r15+,	r2	
    2518:	31 44       	mov	@r4+,	r1	
    251a:	41 54       	add.b	r4,	r1	
    251c:	3a 47       	mov	@r7+,	r10	
    251e:	28 31       	jn	$+594    	;abs 0x2770
    2520:	37 2c       	jc	$+112    	;abs 0x2590
    2522:	38 29       	jnc	$+626    	;abs 0x2794
    2524:	00 44       	br	r4		
    2526:	4d 41       	mov.b	r1,	r13	
    2528:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    252a:	4c 30       	jn	$+154    	;abs 0x25c4
    252c:	3a 47       	mov	@r7+,	r10	
    252e:	28 31       	jn	$+594    	;abs 0x2780
    2530:	37 2c       	jc	$+112    	;abs 0x25a0
    2532:	38 29       	jnc	$+626    	;abs 0x27a4
    2534:	00 44       	br	r4		
    2536:	4d 41       	mov.b	r1,	r13	
    2538:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    253a:	4c 31       	jn	$+666    	;abs 0x27d4
    253c:	3a 47       	mov	@r7+,	r10	
    253e:	28 31       	jn	$+594    	;abs 0x2790
    2540:	37 2c       	jc	$+112    	;abs 0x25b0
    2542:	38 29       	jnc	$+626    	;abs 0x27b4
    2544:	00 44       	br	r4		
    2546:	4d 41       	mov.b	r1,	r13	
    2548:	49 56       	add.b	r6,	r9	
    254a:	3a 47       	mov	@r7+,	r10	
    254c:	28 31       	jn	$+594    	;abs 0x279e
    254e:	37 2c       	jc	$+112    	;abs 0x25be
    2550:	38 29       	jnc	$+626    	;abs 0x27c2
    2552:	00 44       	br	r4		
    2554:	4d 41       	mov.b	r1,	r13	
    2556:	30 43       	br	#-1		;r3 As==11
    2558:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    255c:	28 31       	jn	$+594    	;abs 0x27ae
    255e:	37 2c       	jc	$+112    	;abs 0x25ce
    2560:	38 29       	jnc	$+626    	;abs 0x27d2
    2562:	00 44       	br	r4		
    2564:	4d 41       	mov.b	r1,	r13	
    2566:	30 53       	add	#-1,	r0	;r3 As==11
    2568:	41 3a       	jl	$-892    	;abs 0x21ec
    256a:	47 28       	jnc	$+144    	;abs 0x25fa
    256c:	31 2c       	jc	$+100    	;abs 0x25d0
    256e:	33 29       	jnc	$+616    	;abs 0x27d6
    2570:	3d 42       	mov	#8,	r13	;r2 As==11
    2572:	28 30       	jn	$+82     	;abs 0x25c4
    2574:	2c 35       	jge	$+602    	;abs 0x27ce
    2576:	29 00 44 4d 	mova	&0x04d44,r9	
    257a:	41 30       	jn	$+132    	;abs 0x25fe
    257c:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    257e:	4c 3a       	jl	$-870    	;abs 0x2218
    2580:	47 28       	jnc	$+144    	;abs 0x2610
    2582:	31 37       	jge	$-412    	;abs 0x23e6
    2584:	2c 38       	jl	$+90     	;abs 0x25de
    2586:	29 00 44 4d 	mova	&0x04d44,r9	
    258a:	41 30       	jn	$+132    	;abs 0x260e
    258c:	44 41       	mov.b	r1,	r4	
    258e:	3a 47       	mov	@r7+,	r10	
    2590:	28 31       	jn	$+594    	;abs 0x27e2
    2592:	2c 33       	jn	$-422    	;abs 0x23ec
    2594:	29 00 44 4d 	mova	&0x04d44,r9	
    2598:	41 30       	jn	$+132    	;abs 0x261c
    259a:	44 41       	mov.b	r1,	r4	
    259c:	4c 3a       	jl	$-870    	;abs 0x2236
    259e:	47 28       	jnc	$+144    	;abs 0x262e
    25a0:	31 37       	jge	$-412    	;abs 0x2404
    25a2:	2c 38       	jl	$+90     	;abs 0x25fc
    25a4:	29 00 44 4d 	mova	&0x04d44,r9	
    25a8:	41 30       	jn	$+132    	;abs 0x262c
    25aa:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    25ac:	3a 47       	mov	@r7+,	r10	
    25ae:	28 31       	jn	$+594    	;abs 0x2800
    25b0:	37 2c       	jc	$+112    	;abs 0x2620
    25b2:	38 29       	jnc	$+626    	;abs 0x2824
    25b4:	00 44       	br	r4		
    25b6:	4d 41       	mov.b	r1,	r13	
    25b8:	31 43       	mov	#-1,	r1	;r3 As==11
    25ba:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    25be:	28 31       	jn	$+594    	;abs 0x2810
    25c0:	37 2c       	jc	$+112    	;abs 0x2630
    25c2:	38 29       	jnc	$+626    	;abs 0x2834
    25c4:	00 44       	br	r4		
    25c6:	4d 41       	mov.b	r1,	r13	
    25c8:	31 53       	add	#-1,	r1	;r3 As==11
    25ca:	41 3a       	jl	$-892    	;abs 0x224e
    25cc:	47 28       	jnc	$+144    	;abs 0x265c
    25ce:	31 2c       	jc	$+100    	;abs 0x2632
    25d0:	33 29       	jnc	$+616    	;abs 0x2838
    25d2:	00 44       	br	r4		
    25d4:	4d 41       	mov.b	r1,	r13	
    25d6:	31 53       	add	#-1,	r1	;r3 As==11
    25d8:	41 4c       	mov.b	r12,	r1	
    25da:	3a 47       	mov	@r7+,	r10	
    25dc:	28 31       	jn	$+594    	;abs 0x282e
    25de:	37 2c       	jc	$+112    	;abs 0x264e
    25e0:	38 29       	jnc	$+626    	;abs 0x2852
    25e2:	00 44       	br	r4		
    25e4:	4d 41       	mov.b	r1,	r13	
    25e6:	31 44       	mov	@r4+,	r1	
    25e8:	41 3a       	jl	$-892    	;abs 0x226c
    25ea:	47 28       	jnc	$+144    	;abs 0x267a
    25ec:	31 37       	jge	$-412    	;abs 0x2450
    25ee:	2c 38       	jl	$+90     	;abs 0x2648
    25f0:	29 00 44 4d 	mova	&0x04d44,r9	
    25f4:	41 31       	jn	$+644    	;abs 0x2878
    25f6:	44 41       	mov.b	r1,	r4	
    25f8:	4c 3a       	jl	$-870    	;abs 0x2292
    25fa:	47 28       	jnc	$+144    	;abs 0x268a
    25fc:	31 37       	jge	$-412    	;abs 0x2460
    25fe:	2c 38       	jl	$+90     	;abs 0x2658
    2600:	29 00 44 4d 	mova	&0x04d44,r9	
    2604:	41 31       	jn	$+644    	;abs 0x2888
    2606:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    2608:	3a 47       	mov	@r7+,	r10	
    260a:	28 31       	jn	$+594    	;abs 0x285c
    260c:	37 2c       	jc	$+112    	;abs 0x267c
    260e:	38 29       	jnc	$+626    	;abs 0x2880
    2610:	00 44       	br	r4		
    2612:	4d 41       	mov.b	r1,	r13	
    2614:	32 43       	mov	#-1,	r2	;r3 As==11
    2616:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    261a:	28 31       	jn	$+594    	;abs 0x286c
    261c:	37 2c       	jc	$+112    	;abs 0x268c
    261e:	38 29       	jnc	$+626    	;abs 0x2890
    2620:	00 44       	br	r4		
    2622:	4d 41       	mov.b	r1,	r13	
    2624:	32 53       	add	#-1,	r2	;r3 As==11
    2626:	41 3a       	jl	$-892    	;abs 0x22aa
    2628:	47 28       	jnc	$+144    	;abs 0x26b8
    262a:	31 2c       	jc	$+100    	;abs 0x268e
    262c:	33 29       	jnc	$+616    	;abs 0x2894
    262e:	00 44       	br	r4		
    2630:	4d 41       	mov.b	r1,	r13	
    2632:	32 53       	add	#-1,	r2	;r3 As==11
    2634:	41 4c       	mov.b	r12,	r1	
    2636:	3a 47       	mov	@r7+,	r10	
    2638:	28 31       	jn	$+594    	;abs 0x288a
    263a:	37 2c       	jc	$+112    	;abs 0x26aa
    263c:	38 29       	jnc	$+626    	;abs 0x28ae
    263e:	00 44       	br	r4		
    2640:	4d 41       	mov.b	r1,	r13	
    2642:	32 44       	mov	@r4+,	r2	
    2644:	41 3a       	jl	$-892    	;abs 0x22c8
    2646:	47 28       	jnc	$+144    	;abs 0x26d6
    2648:	31 2c       	jc	$+100    	;abs 0x26ac
    264a:	33 29       	jnc	$+616    	;abs 0x28b2
    264c:	00 44       	br	r4		
    264e:	4d 41       	mov.b	r1,	r13	
    2650:	32 44       	mov	@r4+,	r2	
    2652:	41 4c       	mov.b	r12,	r1	
    2654:	3a 47       	mov	@r7+,	r10	
    2656:	28 31       	jn	$+594    	;abs 0x28a8
    2658:	37 2c       	jc	$+112    	;abs 0x26c8
    265a:	38 29       	jnc	$+626    	;abs 0x28cc
    265c:	00 44       	br	r4		
    265e:	4d 41       	mov.b	r1,	r13	
    2660:	32 53       	add	#-1,	r2	;r3 As==11
    2662:	5a 3a       	jl	$-842    	;abs 0x2318
    2664:	47 28       	jnc	$+144    	;abs 0x26f4
    2666:	31 37       	jge	$-412    	;abs 0x24ca
    2668:	2c 38       	jl	$+90     	;abs 0x26c2
    266a:	29 00 57 44 	mova	&0x04457,r9	
    266e:	54 43       	mov.b	#1,	r4	;r3 As==01
    2670:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    2674:	28 31       	jn	$+594    	;abs 0x28c6
    2676:	37 2c       	jc	$+112    	;abs 0x26e6
    2678:	38 29       	jnc	$+626    	;abs 0x28ea
    267a:	00 49       	br	r9		
    267c:	45 31       	jn	$+652    	;abs 0x2908
    267e:	3a 47       	mov	@r7+,	r10	
    2680:	28 31       	jn	$+594    	;abs 0x28d2
    2682:	2c 32       	jn	$-934    	;abs 0x22dc
    2684:	29 00 49 46 	mova	&0x04649,r9	
    2688:	47 31       	jn	$+656    	;abs 0x2918
    268a:	3a 47       	mov	@r7+,	r10	
    268c:	28 31       	jn	$+594    	;abs 0x28de
    268e:	2c 32       	jn	$-934    	;abs 0x22e8
    2690:	29 00 49 45 	mova	&0x04549,r9	
    2694:	32 3a       	jl	$-922    	;abs 0x22fa
    2696:	47 28       	jnc	$+144    	;abs 0x2726
    2698:	31 2c       	jc	$+100    	;abs 0x26fc
    269a:	32 29       	jnc	$+614    	;abs 0x2900
    269c:	00 49       	br	r9		
    269e:	46 47       	mov.b	r7,	r6	
    26a0:	32 3a       	jl	$-922    	;abs 0x2306
    26a2:	47 28       	jnc	$+144    	;abs 0x2732
    26a4:	31 2c       	jc	$+100    	;abs 0x2708
    26a6:	32 29       	jnc	$+614    	;abs 0x290c
    26a8:	00 54       	add	r4,	r0	
    26aa:	4c 56       	add.b	r6,	r12	
    26ac:	5f 43       	mov.b	#1,	r15	;r3 As==01
    26ae:	48 45       	mov.b	r5,	r8	
    26b0:	43 4b       	.word	0x4b43;	????	Illegal as 2-op instr
    26b2:	53 55       	.word	0x5553;	????	Illegal as 2-op instr
    26b4:	4d 3a       	jl	$-868    	;abs 0x2350
    26b6:	47 28       	jnc	$+144    	;abs 0x2746
    26b8:	31 37       	jge	$-412    	;abs 0x251c
    26ba:	2c 38       	jl	$+90     	;abs 0x2714
    26bc:	29 00 54 4c 	mova	&0x04c54,r9	
    26c0:	56 5f 44 43 	add.b	17220(r15),r6	;0x4344(r15)
    26c4:	4f 5f       	rla.b	r15		
    26c6:	33 30       	jn	$+104    	;abs 0x272e
    26c8:	5f 54 41 47 	add.b	18241(r4),r15	;0x4741(r4)
    26cc:	3a 47       	mov	@r7+,	r10	
    26ce:	28 31       	jn	$+594    	;abs 0x2920
    26d0:	2c 32       	jn	$-934    	;abs 0x232a
    26d2:	29 00 54 4c 	mova	&0x04c54,r9	
    26d6:	56 5f 44 43 	add.b	17220(r15),r6	;0x4344(r15)
    26da:	4f 5f       	rla.b	r15		
    26dc:	33 30       	jn	$+104    	;abs 0x2744
    26de:	5f 4c 45 4e 	mov.b	20037(r12),r15	;0x4e45(r12)
    26e2:	3a 47       	mov	@r7+,	r10	
    26e4:	28 31       	jn	$+594    	;abs 0x2936
    26e6:	2c 32       	jn	$-934    	;abs 0x2340
    26e8:	29 00 54 4c 	mova	&0x04c54,r9	
    26ec:	56 5f 41 44 	add.b	17473(r15),r6	;0x4441(r15)
    26f0:	43 31       	jn	$+648    	;abs 0x2978
    26f2:	32 5f       	add	@r15+,	r2	
    26f4:	31 5f       	add	@r15+,	r1	
    26f6:	54 41 47 3a 	mov.b	14919(r1),r4	;0x3a47(r1)
    26fa:	47 28       	jnc	$+144    	;abs 0x278a
    26fc:	31 2c       	jc	$+100    	;abs 0x2760
    26fe:	32 29       	jnc	$+614    	;abs 0x2964
    2700:	00 54       	add	r4,	r0	
    2702:	4c 56       	add.b	r6,	r12	
    2704:	5f 41 44 43 	mov.b	17220(r1),r15	;0x4344(r1)
    2708:	31 32       	jn	$-924    	;abs 0x236c
    270a:	5f 31       	jn	$+704    	;abs 0x29ca
    270c:	5f 4c 45 4e 	mov.b	20037(r12),r15	;0x4e45(r12)
    2710:	3a 47       	mov	@r7+,	r10	
    2712:	28 31       	jn	$+594    	;abs 0x2964
    2714:	2c 32       	jn	$-934    	;abs 0x236e
    2716:	29 00 43 41 	mova	&0x04143,r9	
    271a:	4c 44       	mov.b	r4,	r12	
    271c:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    271e:	5f 31       	jn	$+704    	;abs 0x29de
    2720:	36 4d       	mov	@r13+,	r6	
    2722:	48 5a       	add.b	r10,	r8	
    2724:	3a 47       	mov	@r7+,	r10	
    2726:	28 31       	jn	$+594    	;abs 0x2978
    2728:	2c 32       	jn	$-934    	;abs 0x2382
    272a:	29 00 43 41 	mova	&0x04143,r9	
    272e:	4c 42       	mov.b	r2,	r12	
    2730:	43 31       	jn	$+648    	;abs 0x29b8
    2732:	5f 31       	jn	$+704    	;abs 0x29f2
    2734:	36 4d       	mov	@r13+,	r6	
    2736:	48 5a       	add.b	r10,	r8	
    2738:	3a 47       	mov	@r7+,	r10	
    273a:	28 31       	jn	$+594    	;abs 0x298c
    273c:	2c 32       	jn	$-934    	;abs 0x2396
    273e:	29 00 43 41 	mova	&0x04143,r9	
    2742:	4c 44       	mov.b	r4,	r12	
    2744:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    2746:	5f 31       	jn	$+704    	;abs 0x2a06
    2748:	32 4d       	mov	@r13+,	r2	
    274a:	48 5a       	add.b	r10,	r8	
    274c:	3a 47       	mov	@r7+,	r10	
    274e:	28 31       	jn	$+594    	;abs 0x29a0
    2750:	2c 32       	jn	$-934    	;abs 0x23aa
    2752:	29 00 43 41 	mova	&0x04143,r9	
    2756:	4c 42       	mov.b	r2,	r12	
    2758:	43 31       	jn	$+648    	;abs 0x29e0
    275a:	5f 31       	jn	$+704    	;abs 0x2a1a
    275c:	32 4d       	mov	@r13+,	r2	
    275e:	48 5a       	add.b	r10,	r8	
    2760:	3a 47       	mov	@r7+,	r10	
    2762:	28 31       	jn	$+594    	;abs 0x29b4
    2764:	2c 32       	jn	$-934    	;abs 0x23be
    2766:	29 00 43 41 	mova	&0x04143,r9	
    276a:	4c 44       	mov.b	r4,	r12	
    276c:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    276e:	5f 38       	jl	$+192    	;abs 0x282e
    2770:	4d 48       	mov.b	r8,	r13	
    2772:	5a 3a       	jl	$-842    	;abs 0x2428
    2774:	47 28       	jnc	$+144    	;abs 0x2804
    2776:	31 2c       	jc	$+100    	;abs 0x27da
    2778:	32 29       	jnc	$+614    	;abs 0x29de
    277a:	00 43       	clr	r0		
    277c:	41 4c       	mov.b	r12,	r1	
    277e:	42 43       	clr.b	r2		
    2780:	31 5f       	add	@r15+,	r1	
    2782:	38 4d       	mov	@r13+,	r8	
    2784:	48 5a       	add.b	r10,	r8	
    2786:	3a 47       	mov	@r7+,	r10	
    2788:	28 31       	jn	$+594    	;abs 0x29da
    278a:	2c 32       	jn	$-934    	;abs 0x23e4
    278c:	29 00 43 41 	mova	&0x04143,r9	
    2790:	4c 44       	mov.b	r4,	r12	
    2792:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    2794:	5f 31       	jn	$+704    	;abs 0x2a54
    2796:	4d 48       	mov.b	r8,	r13	
    2798:	5a 3a       	jl	$-842    	;abs 0x244e
    279a:	47 28       	jnc	$+144    	;abs 0x282a
    279c:	31 2c       	jc	$+100    	;abs 0x2800
    279e:	32 29       	jnc	$+614    	;abs 0x2a04
    27a0:	00 43       	clr	r0		
    27a2:	41 4c       	mov.b	r12,	r1	
    27a4:	42 43       	clr.b	r2		
    27a6:	31 5f       	add	@r15+,	r1	
    27a8:	31 4d       	mov	@r13+,	r1	
    27aa:	48 5a       	add.b	r10,	r8	
    27ac:	3a 47       	mov	@r7+,	r10	
    27ae:	28 31       	jn	$+594    	;abs 0x2a00
    27b0:	2c 32       	jn	$-934    	;abs 0x240a
    27b2:	29 00 43 6f 	mova	&0x06f43,r9	
    27b6:	6e 74       	subc.b	@r4,	r14	
    27b8:	72 6f       	addc.b	@r15+,	r2	
    27ba:	6c 43       	mov.b	#2,	r12	;r3 As==10
    27bc:	6f 75       	subc.b	@r5,	r15	
    27be:	6e 74       	subc.b	@r4,	r14	
    27c0:	65 72       	subc.b	#4,	r5	;r2 As==10
    27c2:	3a 47       	mov	@r7+,	r10	
    27c4:	28 31       	jn	$+594    	;abs 0x2a16
    27c6:	37 2c       	jc	$+112    	;abs 0x2836
    27c8:	38 29       	jnc	$+626    	;abs 0x2a3a
    27ca:	00 52       	add	r2,	r0	
    27cc:	43 43       	clr.b	#0		;r3 As==00
    27ce:	6f 75       	subc.b	@r5,	r15	
    27d0:	6e 74       	subc.b	@r4,	r14	
    27d2:	65 72       	subc.b	#4,	r5	;r2 As==10
    27d4:	3a 47       	mov	@r7+,	r10	
    27d6:	28 31       	jn	$+594    	;abs 0x2a28
    27d8:	37 2c       	jc	$+112    	;abs 0x2848
    27da:	38 29       	jnc	$+626    	;abs 0x2a4c
    27dc:	00 4d       	br	r13		
    27de:	65 6e       	addc.b	@r14,	r5	
    27e0:	75 43       	mov.b	#-1,	r5	;r3 As==11
    27e2:	6f 75       	subc.b	@r5,	r15	
    27e4:	6e 74       	subc.b	@r4,	r14	
    27e6:	65 72       	subc.b	#4,	r5	;r2 As==10
    27e8:	3a 47       	mov	@r7+,	r10	
    27ea:	28 31       	jn	$+594    	;abs 0x2a3c
    27ec:	37 2c       	jc	$+112    	;abs 0x285c
    27ee:	38 29       	jnc	$+626    	;abs 0x2a60
    27f0:	00 53       	add	#0,	r0	;r3 As==00
    27f2:	74 61       	addc.b	@r1+,	r4	
    27f4:	74 75       	subc.b	@r5+,	r4	
    27f6:	73 46       	.word	0x4673;	????	Illegal as 2-op instr
    27f8:	6c 61       	addc.b	@r1,	r12	
    27fa:	67 73       	subc.b	#2,	r7	;r3 As==10
    27fc:	3a 47       	mov	@r7+,	r10	
    27fe:	28 31       	jn	$+594    	;abs 0x2a50
    2800:	2c 34       	jge	$+90     	;abs 0x285a
    2802:	29 3d       	jmp	$+596    	;abs 0x2a56
    2804:	61 72       	subc.b	#4,	r1	;r2 As==10
    2806:	28 31       	jn	$+594    	;abs 0x2a58
    2808:	37 2c       	jc	$+112    	;abs 0x2878
    280a:	37 29       	jnc	$+624    	;abs 0x2a7a
    280c:	3b 30       	jn	$+120    	;abs 0x2884
    280e:	3b 32       	jn	$-904    	;abs 0x2486
    2810:	3b 28       	jnc	$+120    	;abs 0x2888
    2812:	30 2c       	jc	$+98     	;abs 0x2874
    2814:	32 29       	jnc	$+614    	;abs 0x2a7a
    2816:	00 4d       	br	r13		
    2818:	65 6e       	addc.b	@r14,	r5	
    281a:	75 56       	add.b	@r6+,	r5	
    281c:	69 73       	subc.b	#2,	r9	;r3 As==10
    281e:	69 62       	addc.b	#4,	r9	;r2 As==10
    2820:	6c 65       	addc.b	@r5,	r12	
    2822:	3a 47       	mov	@r7+,	r10	
    2824:	28 30       	jn	$+82     	;abs 0x2876
    2826:	2c 32       	jn	$-934    	;abs 0x2480
    2828:	29 00 53 65 	mova	&0x06553,r9	
    282c:	74 75       	subc.b	@r5+,	r4	
    282e:	70 44       	br	@r4+		
    2830:	6f 6e       	addc.b	@r14,	r15	
    2832:	65 3a       	jl	$-820    	;abs 0x24fe
    2834:	47 28       	jnc	$+144    	;abs 0x28c4
    2836:	30 2c       	jc	$+98     	;abs 0x2898
    2838:	32 29       	jnc	$+614    	;abs 0x2a9e
    283a:	00 4d       	br	r13		
    283c:	6f 74       	subc.b	@r4,	r15	
    283e:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2840:	41 72       	subc.b	r2,	r1	
    2842:	6d 65       	addc.b	@r5,	r13	
    2844:	64 3a       	jl	$-822    	;abs 0x250e
    2846:	47 28       	jnc	$+144    	;abs 0x28d6
    2848:	30 2c       	jc	$+98     	;abs 0x28aa
    284a:	32 29       	jnc	$+614    	;abs 0x2ab0
    284c:	00 4d       	br	r13		
    284e:	65 6e       	addc.b	@r14,	r5	
    2850:	75 53       	add.b	#-1,	r5	;r3 As==11
    2852:	74 65       	addc.b	@r5+,	r4	
    2854:	70 3a       	jl	$-798    	;abs 0x2536
    2856:	47 28       	jnc	$+144    	;abs 0x28e6
    2858:	33 31       	jn	$+616    	;abs 0x2ac0
    285a:	2c 32       	jn	$-934    	;abs 0x24b4
    285c:	29 00 4d 65 	mova	&0x0654d,r9	
    2860:	6e 75       	subc.b	@r5,	r14	
    2862:	41 6e       	addc.b	r14,	r1	
    2864:	61 6c       	addc.b	@r12,	r1	
    2866:	6f 67       	addc.b	@r7,	r15	
    2868:	3a 47       	mov	@r7+,	r10	
    286a:	28 33       	jn	$-430    	;abs 0x26bc
    286c:	31 2c       	jc	$+100    	;abs 0x28d0
    286e:	32 29       	jnc	$+614    	;abs 0x2ad4
    2870:	00 4d       	br	r13		
    2872:	65 6e       	addc.b	@r14,	r5	
    2874:	75 4f       	mov.b	@r15+,	r5	
    2876:	70 74       	subc.b	@r4+,	r0	
    2878:	69 6f       	addc.b	@r15,	r9	
    287a:	6e 3a       	jl	$-802    	;abs 0x2558
    287c:	47 28       	jnc	$+144    	;abs 0x290c
    287e:	33 31       	jn	$+616    	;abs 0x2ae6
    2880:	2c 34       	jge	$+90     	;abs 0x28da
    2882:	29 00 41 6e 	mova	&0x06e41,r9	
    2886:	61 6c       	addc.b	@r12,	r1	
    2888:	6f 67       	addc.b	@r7,	r15	
    288a:	53 65       	.word	0x6553;	????	Illegal as 2-op instr
    288c:	6c 65       	addc.b	@r5,	r12	
    288e:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    2890:	3a 47       	mov	@r7+,	r10	
    2892:	28 30       	jn	$+82     	;abs 0x28e4
    2894:	2c 32       	jn	$-934    	;abs 0x24ee
    2896:	29 00 41 6e 	mova	&0x06e41,r9	
    289a:	61 6c       	addc.b	@r12,	r1	
    289c:	6f 67       	addc.b	@r7,	r15	
    289e:	43 68       	.word	0x6843;	????	Illegal as 2-op instr
    28a0:	65 63       	addc.b	#2,	r5	;r3 As==10
    28a2:	6b 65       	addc.b	@r5,	r11	
    28a4:	64 3a       	jl	$-822    	;abs 0x256e
    28a6:	47 28       	jnc	$+144    	;abs 0x2936
    28a8:	30 2c       	jc	$+98     	;abs 0x290a
    28aa:	32 29       	jnc	$+614    	;abs 0x2b10
    28ac:	00 41       	br	r1		
    28ae:	6e 61       	addc.b	@r1,	r14	
    28b0:	6c 6f       	addc.b	@r15,	r12	
    28b2:	67 47       	mov.b	@r7,	r7	
    28b4:	72 61       	addc.b	@r1+,	r2	
    28b6:	70 68       	addc.b	@r8+,	r0	
    28b8:	3a 47       	mov	@r7+,	r10	
    28ba:	28 31       	jn	$+594    	;abs 0x2b0c
    28bc:	2c 35       	jge	$+602    	;abs 0x2b16
    28be:	29 3d       	jmp	$+596    	;abs 0x2b12
    28c0:	61 72       	subc.b	#4,	r1	;r2 As==10
    28c2:	28 31       	jn	$+594    	;abs 0x2b14
    28c4:	37 2c       	jc	$+112    	;abs 0x2934
    28c6:	37 29       	jnc	$+624    	;abs 0x2b36
    28c8:	3b 30       	jn	$+120    	;abs 0x2940
    28ca:	3b 37       	jge	$-392    	;abs 0x2742
    28cc:	3b 28       	jnc	$+120    	;abs 0x2944
    28ce:	31 2c       	jc	$+100    	;abs 0x2932
    28d0:	36 29       	jnc	$+622    	;abs 0x2b3e
    28d2:	3d 61       	addc	@r1+,	r13	
    28d4:	72 28       	jnc	$+230    	;abs 0x29ba
    28d6:	31 37       	jge	$-412    	;abs 0x273a
    28d8:	2c 37       	jge	$-422    	;abs 0x2732
    28da:	29 3b       	jl	$-428    	;abs 0x272e
    28dc:	30 3b       	jl	$-414    	;abs 0x273e
    28de:	39 39       	jl	$+628    	;abs 0x2b52
    28e0:	3b 28       	jnc	$+120    	;abs 0x2958
    28e2:	30 2c       	jc	$+98     	;abs 0x2944
    28e4:	32 29       	jnc	$+614    	;abs 0x2b4a
    28e6:	00 41       	br	r1		
    28e8:	6e 61       	addc.b	@r1,	r14	
    28ea:	6c 6f       	addc.b	@r15,	r12	
    28ec:	67 43       	mov.b	#2,	r7	;r3 As==10
    28ee:	6f 6c       	addc.b	@r12,	r15	
    28f0:	6f 75       	subc.b	@r5,	r15	
    28f2:	72 73       	subc.b	#-1,	r2	;r3 As==11
    28f4:	3a 47       	mov	@r7+,	r10	
    28f6:	28 31       	jn	$+594    	;abs 0x2b48
    28f8:	2c 37       	jge	$-422    	;abs 0x2752
    28fa:	29 3d       	jmp	$+596    	;abs 0x2b4e
    28fc:	61 72       	subc.b	#4,	r1	;r2 As==10
    28fe:	28 31       	jn	$+594    	;abs 0x2b50
    2900:	37 2c       	jc	$+112    	;abs 0x2970
    2902:	37 29       	jnc	$+624    	;abs 0x2b72
    2904:	3b 30       	jn	$+120    	;abs 0x297c
    2906:	3b 37       	jge	$-392    	;abs 0x277e
    2908:	3b 28       	jnc	$+120    	;abs 0x2980
    290a:	30 2c       	jc	$+98     	;abs 0x296c
    290c:	32 29       	jnc	$+614    	;abs 0x2b72
    290e:	00 50       	rla	r0		
    2910:	50 4d 53 6c 	br	27731(r13)	;0x6c53(r13)
    2914:	6f 70       	subc.b	@r0,	r15	
    2916:	65 3a       	jl	$-820    	;abs 0x25e2
    2918:	47 28       	jnc	$+144    	;abs 0x29a8
    291a:	31 2c       	jc	$+100    	;abs 0x297e
    291c:	31 29       	jnc	$+612    	;abs 0x2b80
    291e:	00 50       	rla	r0		
    2920:	50 4d 4f 66 	br	26191(r13)	;0x664f(r13)
    2924:	66 73       	subc.b	#2,	r6	;r3 As==10
    2926:	65 74       	subc.b	@r4,	r5	
    2928:	3a 47       	mov	@r7+,	r10	
    292a:	28 31       	jn	$+594    	;abs 0x2b7c
    292c:	2c 31       	jn	$+602    	;abs 0x2b86
    292e:	29 00 54 69 	mova	&0x06954,r9	
    2932:	6d 65       	addc.b	@r5,	r13	
    2934:	55 70 45 64 	subc.b	0x6445,	r5	;PC rel. 0x08d7d
    2938:	67 65       	addc.b	@r5,	r7	
    293a:	3a 47       	mov	@r7+,	r10	
    293c:	28 31       	jn	$+594    	;abs 0x2b8e
    293e:	2c 38       	jl	$+90     	;abs 0x2998
    2940:	29 3d       	jmp	$+596    	;abs 0x2b94
    2942:	61 72       	subc.b	#4,	r1	;r2 As==10
    2944:	28 31       	jn	$+594    	;abs 0x2b96
    2946:	37 2c       	jc	$+112    	;abs 0x29b6
    2948:	37 29       	jnc	$+624    	;abs 0x2bb8
    294a:	3b 30       	jn	$+120    	;abs 0x29c2
    294c:	3b 37       	jge	$-392    	;abs 0x27c4
    294e:	3b 28       	jnc	$+120    	;abs 0x29c6
    2950:	31 37       	jge	$-412    	;abs 0x27b4
    2952:	2c 38       	jl	$+90     	;abs 0x29ac
    2954:	29 00 50 50 	mova	&0x05050,r9	
    2958:	4d 56       	add.b	r6,	r13	
    295a:	61 6c       	addc.b	@r12,	r1	
    295c:	75 65       	addc.b	@r5+,	r5	
    295e:	3a 47       	mov	@r7+,	r10	
    2960:	28 31       	jn	$+594    	;abs 0x2bb2
    2962:	2c 38       	jl	$+90     	;abs 0x29bc
    2964:	29 00 43 68 	mova	&0x06843,r9	
    2968:	61 6e       	addc.b	@r14,	r1	
    296a:	6e 65       	addc.b	@r5,	r14	
    296c:	6c 49       	mov.b	@r9,	r12	
    296e:	6e 70       	subc.b	@r0,	r14	
    2970:	75 74       	subc.b	@r4+,	r5	
    2972:	3a 47       	mov	@r7+,	r10	
    2974:	28 31       	jn	$+594    	;abs 0x2bc6
    2976:	2c 38       	jl	$+90     	;abs 0x29d0
    2978:	29 00 6c 63 	mova	&0x0636c,r9	
    297c:	64 36       	jge	$-822    	;abs 0x2646
    297e:	31 30       	jn	$+100    	;abs 0x29e2
    2980:	30 2e       	jc	$-926    	;abs 0x25e2
    2982:	63 00 70 75 	mova	r0,	&0x37570
    2986:	74 63       	addc.b	#-1,	r4	;r3 As==11
    2988:	68 61       	addc.b	@r1,	r8	
    298a:	72 3a       	jl	$-794    	;abs 0x2670
    298c:	46 28       	jnc	$+142    	;abs 0x2a1a
    298e:	30 2c       	jc	$+98     	;abs 0x29f0
    2990:	31 29       	jnc	$+612    	;abs 0x2bf4
    2992:	00 63       	adc	r0		
    2994:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2998:	2c 31       	jn	$+602    	;abs 0x2bf2
    299a:	29 00 6c 63 	mova	&0x0636c,r9	
    299e:	64 5f       	add.b	@r15,	r4	
    29a0:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
    29a2:	74 63       	addc.b	#-1,	r4	;r3 As==11
    29a4:	6f 6c       	addc.b	@r12,	r15	
    29a6:	6f 72       	subc.b	#4,	r15	;r2 As==10
    29a8:	3a 46       	mov	@r6+,	r10	
    29aa:	28 30       	jn	$+82     	;abs 0x29fc
    29ac:	2c 32       	jn	$-934    	;abs 0x2606
    29ae:	30 29       	jnc	$+610    	;abs 0x2c10
    29b0:	00 66       	addc	r6,	r0	
    29b2:	6f 72       	subc.b	#4,	r15	;r2 As==10
    29b4:	65 67       	addc.b	@r7,	r5	
    29b6:	72 6f       	addc.b	@r15+,	r2	
    29b8:	75 6e       	addc.b	@r14+,	r5	
    29ba:	64 5f       	add.b	@r15,	r4	
    29bc:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    29be:	6c 6f       	addc.b	@r15,	r12	
    29c0:	72 3a       	jl	$-794    	;abs 0x26a6
    29c2:	50 28       	jnc	$+162    	;abs 0x2a64
    29c4:	30 2c       	jc	$+98     	;abs 0x2a26
    29c6:	31 31       	jn	$+612    	;abs 0x2c2a
    29c8:	29 00 62 61 	mova	&0x06162,r9	
    29cc:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr
    29ce:	67 72       	subc.b	#4,	r7	;r2 As==10
    29d0:	6f 75       	subc.b	@r5,	r15	
    29d2:	6e 64       	addc.b	@r4,	r14	
    29d4:	5f 63       	addc.b	#1,	r15	;r3 As==01
    29d6:	6f 6c       	addc.b	@r12,	r15	
    29d8:	6f 72       	subc.b	#4,	r15	;r2 As==10
    29da:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    29de:	2c 31       	jn	$+602    	;abs 0x2c38
    29e0:	31 29       	jnc	$+612    	;abs 0x2c44
    29e2:	00 6e       	addc	r14,	r0	
    29e4:	36 31       	jn	$+622    	;abs 0x2c52
    29e6:	30 30       	jn	$+98     	;abs 0x2a48
    29e8:	5f 73       	subc.b	#1,	r15	;r3 As==01
    29ea:	65 6e       	addc.b	@r14,	r5	
    29ec:	64 3a       	jl	$-822    	;abs 0x26b6
    29ee:	46 28       	jnc	$+142    	;abs 0x2a7c
    29f0:	30 2c       	jc	$+98     	;abs 0x2a52
    29f2:	32 30       	jn	$+102    	;abs 0x2a58
    29f4:	29 00 64 61 	mova	&0x06164,r9	
    29f8:	74 61       	addc.b	@r1+,	r4	
    29fa:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    29fe:	2c 31       	jn	$+602    	;abs 0x2c58
    2a00:	31 29       	jnc	$+612    	;abs 0x2c64
    2a02:	00 63       	adc	r0		
    2a04:	6d 64       	addc.b	@r4,	r13	
    2a06:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2a0a:	2c 31       	jn	$+602    	;abs 0x2c64
    2a0c:	31 29       	jnc	$+612    	;abs 0x2c70
    2a0e:	00 6d       	addc	r13,	r0	
    2a10:	61 73       	subc.b	#2,	r1	;r3 As==10
    2a12:	6b 3a       	jl	$-808    	;abs 0x26ea
    2a14:	72 28       	jnc	$+230    	;abs 0x2afa
    2a16:	30 2c       	jc	$+98     	;abs 0x2a78
    2a18:	31 31       	jn	$+612    	;abs 0x2c7c
    2a1a:	29 00 69 3a 	mova	&0x03a69,r9	
    2a1e:	72 28       	jnc	$+230    	;abs 0x2b04
    2a20:	30 2c       	jc	$+98     	;abs 0x2a82
    2a22:	31 31       	jn	$+612    	;abs 0x2c86
    2a24:	29 00 6c 63 	mova	&0x0636c,r9	
    2a28:	64 5f       	add.b	@r15,	r4	
    2a2a:	69 6e       	addc.b	@r14,	r9	
    2a2c:	69 74       	subc.b	@r4,	r9	
    2a2e:	3a 46       	mov	@r6+,	r10	
    2a30:	28 30       	jn	$+82     	;abs 0x2a82
    2a32:	2c 32       	jn	$-934    	;abs 0x268c
    2a34:	30 29       	jnc	$+610    	;abs 0x2c96
    2a36:	00 63       	adc	r0		
    2a38:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2a3a:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2a3e:	2c 31       	jn	$+602    	;abs 0x2c98
    2a40:	31 29       	jnc	$+612    	;abs 0x2ca4
    2a42:	00 6c       	addc	r12,	r0	
    2a44:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    2a46:	5f 63       	addc.b	#1,	r15	;r3 As==01
    2a48:	6c 65       	addc.b	@r5,	r12	
    2a4a:	61 72       	subc.b	#4,	r1	;r2 As==10
    2a4c:	3a 46       	mov	@r6+,	r10	
    2a4e:	28 30       	jn	$+82     	;abs 0x2aa0
    2a50:	2c 32       	jn	$-934    	;abs 0x26aa
    2a52:	30 29       	jnc	$+610    	;abs 0x2cb4
    2a54:	00 6e       	addc	r14,	r0	
    2a56:	36 31       	jn	$+622    	;abs 0x2cc4
    2a58:	30 30       	jn	$+98     	;abs 0x2aba
    2a5a:	5f 73       	subc.b	#1,	r15	;r3 As==01
    2a5c:	65 6e       	addc.b	@r14,	r5	
    2a5e:	64 63       	addc.b	#2,	r4	;r3 As==10
    2a60:	6f 6d       	addc.b	@r13,	r15	
    2a62:	31 3a       	jl	$-924    	;abs 0x26c6
    2a64:	46 28       	jnc	$+142    	;abs 0x2af2
    2a66:	30 2c       	jc	$+98     	;abs 0x2ac8
    2a68:	32 30       	jn	$+102    	;abs 0x2ace
    2a6a:	29 00 63 6f 	mova	&0x06f63,r9	
    2a6e:	6d 6d       	addc.b	@r13,	r13	
    2a70:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2a74:	2c 31       	jn	$+602    	;abs 0x2cce
    2a76:	31 29       	jnc	$+612    	;abs 0x2cda
    2a78:	00 64       	addc	r4,	r0	
    2a7a:	61 74       	subc.b	@r4,	r1	
    2a7c:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2a80:	2c 31       	jn	$+602    	;abs 0x2cda
    2a82:	31 29       	jnc	$+612    	;abs 0x2ce6
    2a84:	00 6e       	addc	r14,	r0	
    2a86:	36 31       	jn	$+622    	;abs 0x2cf4
    2a88:	30 30       	jn	$+98     	;abs 0x2aea
    2a8a:	5f 73       	subc.b	#1,	r15	;r3 As==01
    2a8c:	65 6e       	addc.b	@r14,	r5	
    2a8e:	64 63       	addc.b	#2,	r4	;r3 As==10
    2a90:	6f 6d       	addc.b	@r13,	r15	
    2a92:	32 3a       	jl	$-922    	;abs 0x26f8
    2a94:	46 28       	jnc	$+142    	;abs 0x2b22
    2a96:	30 2c       	jc	$+98     	;abs 0x2af8
    2a98:	32 30       	jn	$+102    	;abs 0x2afe
    2a9a:	29 00 64 61 	mova	&0x06164,r9	
    2a9e:	74 31       	jn	$+746    	;abs 0x2d88
    2aa0:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2aa4:	2c 31       	jn	$+602    	;abs 0x2cfe
    2aa6:	31 29       	jnc	$+612    	;abs 0x2d0a
    2aa8:	00 64       	addc	r4,	r0	
    2aaa:	61 74       	subc.b	@r4,	r1	
    2aac:	32 3a       	jl	$-922    	;abs 0x2712
    2aae:	50 28       	jnc	$+162    	;abs 0x2b50
    2ab0:	30 2c       	jc	$+98     	;abs 0x2b12
    2ab2:	31 31       	jn	$+612    	;abs 0x2d16
    2ab4:	29 00 6c 63 	mova	&0x0636c,r9	
    2ab8:	64 5f       	add.b	@r15,	r4	
    2aba:	66 69       	addc.b	@r9,	r6	
    2abc:	6c 6c       	addc.b	@r12,	r12	
    2abe:	72 65       	addc.b	@r5+,	r2	
    2ac0:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    2ac2:	3a 46       	mov	@r6+,	r10	
    2ac4:	28 30       	jn	$+82     	;abs 0x2b16
    2ac6:	2c 32       	jn	$-934    	;abs 0x2720
    2ac8:	30 29       	jnc	$+610    	;abs 0x2d2a
    2aca:	00 78       	subc	r8,	r0	
    2acc:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2ad0:	2c 31       	jn	$+602    	;abs 0x2d2a
    2ad2:	31 29       	jnc	$+612    	;abs 0x2d36
    2ad4:	00 79       	subc	r9,	r0	
    2ad6:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2ada:	2c 31       	jn	$+602    	;abs 0x2d34
    2adc:	31 29       	jnc	$+612    	;abs 0x2d40
    2ade:	00 6c       	addc	r12,	r0	
    2ae0:	78 3a       	jl	$-782    	;abs 0x27d2
    2ae2:	50 28       	jnc	$+162    	;abs 0x2b84
    2ae4:	30 2c       	jc	$+98     	;abs 0x2b46
    2ae6:	31 31       	jn	$+612    	;abs 0x2d4a
    2ae8:	29 00 6c 79 	mova	&0x0796c,r9	
    2aec:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2af0:	2c 31       	jn	$+602    	;abs 0x2d4a
    2af2:	31 29       	jnc	$+612    	;abs 0x2d56
    2af4:	00 63       	adc	r0		
    2af6:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2af8:	3a 70 28 30 	subc	#12328,	r10	;#0x3028
    2afc:	2c 31       	jn	$+602    	;abs 0x2d56
    2afe:	31 29       	jnc	$+612    	;abs 0x2d62
    2b00:	00 63       	adc	r0		
    2b02:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2b04:	3a 72       	subc	#8,	r10	;r2 As==11
    2b06:	28 30       	jn	$+82     	;abs 0x2b58
    2b08:	2c 31       	jn	$+602    	;abs 0x2d62
    2b0a:	31 29       	jnc	$+612    	;abs 0x2d6e
    2b0c:	00 61       	addc	r1,	r0	
    2b0e:	64 64       	addc.b	@r4,	r4	
    2b10:	72 3a       	jl	$-794    	;abs 0x27f6
    2b12:	72 28       	jnc	$+230    	;abs 0x2bf8
    2b14:	30 2c       	jc	$+98     	;abs 0x2b76
    2b16:	34 29       	jnc	$+618    	;abs 0x2d80
    2b18:	00 6d       	addc	r13,	r0	
    2b1a:	61 78       	subc.b	@r8,	r1	
    2b1c:	3a 72       	subc	#8,	r10	;r2 As==11
    2b1e:	28 30       	jn	$+82     	;abs 0x2b70
    2b20:	2c 34       	jge	$+90     	;abs 0x2b7a
    2b22:	29 00 6c 63 	mova	&0x0636c,r9	
    2b26:	64 5f       	add.b	@r15,	r4	
    2b28:	64 72       	subc.b	#4,	r4	;r2 As==10
    2b2a:	61 77       	subc.b	@r7,	r1	
    2b2c:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
    2b2e:	72 63       	addc.b	#-1,	r2	;r3 As==11
    2b30:	6c 65       	addc.b	@r5,	r12	
    2b32:	3a 46       	mov	@r6+,	r10	
    2b34:	28 30       	jn	$+82     	;abs 0x2b86
    2b36:	2c 32       	jn	$-934    	;abs 0x2790
    2b38:	30 29       	jnc	$+610    	;abs 0x2d9a
    2b3a:	00 78       	subc	r8,	r0	
    2b3c:	30 3a       	jl	$-926    	;abs 0x279e
    2b3e:	50 28       	jnc	$+162    	;abs 0x2be0
    2b40:	30 2c       	jc	$+98     	;abs 0x2ba2
    2b42:	34 29       	jnc	$+618    	;abs 0x2dac
    2b44:	00 79       	subc	r9,	r0	
    2b46:	30 3a       	jl	$-926    	;abs 0x27a8
    2b48:	50 28       	jnc	$+162    	;abs 0x2bea
    2b4a:	30 2c       	jc	$+98     	;abs 0x2bac
    2b4c:	34 29       	jnc	$+618    	;abs 0x2db6
    2b4e:	00 72       	subc	r2,	r0	
    2b50:	61 64       	addc.b	@r4,	r1	
    2b52:	69 75       	subc.b	@r5,	r9	
    2b54:	73 3a       	jl	$-792    	;abs 0x283c
    2b56:	50 28       	jnc	$+162    	;abs 0x2bf8
    2b58:	30 2c       	jc	$+98     	;abs 0x2bba
    2b5a:	34 29       	jnc	$+618    	;abs 0x2dc4
    2b5c:	00 63       	adc	r0		
    2b5e:	6f 6c       	addc.b	@r12,	r15	
    2b60:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2b62:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2b66:	2c 31       	jn	$+602    	;abs 0x2dc0
    2b68:	31 29       	jnc	$+612    	;abs 0x2dcc
    2b6a:	00 77       	subc	r7,	r0	
    2b6c:	69 64       	addc.b	@r4,	r9	
    2b6e:	74 68       	addc.b	@r8+,	r4	
    2b70:	3a 70 28 30 	subc	#12328,	r10	;#0x3028
    2b74:	2c 31       	jn	$+602    	;abs 0x2dce
    2b76:	29 00 77 69 	mova	&0x06977,r9	
    2b7a:	64 74       	subc.b	@r4,	r4	
    2b7c:	68 3a       	jl	$-814    	;abs 0x284e
    2b7e:	72 28       	jnc	$+230    	;abs 0x2c64
    2b80:	30 2c       	jc	$+98     	;abs 0x2be2
    2b82:	31 29       	jnc	$+612    	;abs 0x2de6
    2b84:	00 66       	addc	r6,	r0	
    2b86:	3a 28       	jnc	$+118    	;abs 0x2bfc
    2b88:	30 2c       	jc	$+98     	;abs 0x2bea
    2b8a:	31 29       	jnc	$+612    	;abs 0x2dee
    2b8c:	00 64       	addc	r4,	r0	
    2b8e:	64 46       	mov.b	@r6,	r4	
    2b90:	5f 78 3a 28 	subc.b	10298(r8),r15	;0x283a(r8)
    2b94:	30 2c       	jc	$+98     	;abs 0x2bf6
    2b96:	31 29       	jnc	$+612    	;abs 0x2dfa
    2b98:	00 64       	addc	r4,	r0	
    2b9a:	64 46       	mov.b	@r6,	r4	
    2b9c:	5f 79 3a 28 	subc.b	10298(r9),r15	;0x283a(r9)
    2ba0:	30 2c       	jc	$+98     	;abs 0x2c02
    2ba2:	31 29       	jnc	$+612    	;abs 0x2e06
    2ba4:	00 78       	subc	r8,	r0	
    2ba6:	3a 72       	subc	#8,	r10	;r2 As==11
    2ba8:	28 30       	jn	$+82     	;abs 0x2bfa
    2baa:	2c 31       	jn	$+602    	;abs 0x2e04
    2bac:	29 00 79 3a 	mova	&0x03a79,r9	
    2bb0:	72 28       	jnc	$+230    	;abs 0x2c96
    2bb2:	30 2c       	jc	$+98     	;abs 0x2c14
    2bb4:	31 29       	jnc	$+612    	;abs 0x2e18
    2bb6:	00 6c       	addc	r12,	r0	
    2bb8:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    2bba:	5f 64 72 61 	addc.b	24946(r4),r15	;0x6172(r4)
    2bbe:	77 6c       	addc.b	@r12+,	r7	
    2bc0:	69 6e       	addc.b	@r14,	r9	
    2bc2:	65 3a       	jl	$-820    	;abs 0x288e
    2bc4:	46 28       	jnc	$+142    	;abs 0x2c52
    2bc6:	30 2c       	jc	$+98     	;abs 0x2c28
    2bc8:	32 30       	jn	$+102    	;abs 0x2c2e
    2bca:	29 00 78 30 	mova	&0x03078,r9	
    2bce:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2bd2:	2c 31       	jn	$+602    	;abs 0x2e2c
    2bd4:	29 00 79 30 	mova	&0x03079,r9	
    2bd8:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2bdc:	2c 31       	jn	$+602    	;abs 0x2e36
    2bde:	29 00 78 31 	mova	&0x03178,r9	
    2be2:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2be6:	2c 31       	jn	$+602    	;abs 0x2e40
    2be8:	29 00 79 31 	mova	&0x03179,r9	
    2bec:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2bf0:	2c 31       	jn	$+602    	;abs 0x2e4a
    2bf2:	29 00 63 6f 	mova	&0x06f63,r9	
    2bf6:	6c 6f       	addc.b	@r15,	r12	
    2bf8:	72 3a       	jl	$-794    	;abs 0x28de
    2bfa:	70 28       	jnc	$+226    	;abs 0x2cdc
    2bfc:	30 2c       	jc	$+98     	;abs 0x2c5e
    2bfe:	31 29       	jnc	$+612    	;abs 0x2e62
    2c00:	00 63       	adc	r0		
    2c02:	6f 6c       	addc.b	@r12,	r15	
    2c04:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2c06:	3a 72       	subc	#8,	r10	;r2 As==11
    2c08:	28 30       	jn	$+82     	;abs 0x2c5a
    2c0a:	2c 31       	jn	$+602    	;abs 0x2e64
    2c0c:	29 00 64 79 	mova	&0x07964,r9	
    2c10:	3a 72       	subc	#8,	r10	;r2 As==11
    2c12:	28 30       	jn	$+82     	;abs 0x2c64
    2c14:	2c 31       	jn	$+602    	;abs 0x2e6e
    2c16:	29 00 64 78 	mova	&0x07864,r9	
    2c1a:	3a 72       	subc	#8,	r10	;r2 As==11
    2c1c:	28 30       	jn	$+82     	;abs 0x2c6e
    2c1e:	2c 31       	jn	$+602    	;abs 0x2e78
    2c20:	29 00 73 74 	mova	&0x07473,r9	
    2c24:	65 70       	subc.b	@r0,	r5	
    2c26:	78 3a       	jl	$-782    	;abs 0x2918
    2c28:	28 30       	jn	$+82     	;abs 0x2c7a
    2c2a:	2c 31       	jn	$+602    	;abs 0x2e84
    2c2c:	29 00 73 74 	mova	&0x07473,r9	
    2c30:	65 70       	subc.b	@r0,	r5	
    2c32:	79 3a       	jl	$-780    	;abs 0x2926
    2c34:	28 30       	jn	$+82     	;abs 0x2c86
    2c36:	2c 31       	jn	$+602    	;abs 0x2e90
    2c38:	29 00 66 72 	mova	&0x07266,r9	
    2c3c:	61 63       	addc.b	#2,	r1	;r3 As==10
    2c3e:	74 69       	addc.b	@r9+,	r4	
    2c40:	6f 6e       	addc.b	@r14,	r15	
    2c42:	3a 72       	subc	#8,	r10	;r2 As==11
    2c44:	28 30       	jn	$+82     	;abs 0x2c96
    2c46:	2c 31       	jn	$+602    	;abs 0x2ea0
    2c48:	29 00 6c 63 	mova	&0x0636c,r9	
    2c4c:	64 5f       	add.b	@r15,	r4	
    2c4e:	64 72       	subc.b	#4,	r4	;r2 As==10
    2c50:	61 77       	subc.b	@r7,	r1	
    2c52:	70 6f       	addc.b	@r15+,	r0	
    2c54:	69 6e       	addc.b	@r14,	r9	
    2c56:	74 3a       	jl	$-790    	;abs 0x2940
    2c58:	46 28       	jnc	$+142    	;abs 0x2ce6
    2c5a:	30 2c       	jc	$+98     	;abs 0x2cbc
    2c5c:	32 30       	jn	$+102    	;abs 0x2cc2
    2c5e:	29 00 63 6f 	mova	&0x06f63,r9	
    2c62:	6c 6f       	addc.b	@r15,	r12	
    2c64:	72 3a       	jl	$-794    	;abs 0x294a
    2c66:	50 28       	jnc	$+162    	;abs 0x2d08
    2c68:	30 2c       	jc	$+98     	;abs 0x2cca
    2c6a:	31 29       	jnc	$+612    	;abs 0x2ece
    2c6c:	00 6c       	addc	r12,	r0	
    2c6e:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    2c70:	5f 70 75 74 	subc.b	0x7475,	r15	;PC rel. 0x0a0e9
    2c74:	6c 6f       	addc.b	@r15,	r12	
    2c76:	67 6f       	addc.b	@r15,	r7	
    2c78:	3a 46       	mov	@r6+,	r10	
    2c7a:	28 30       	jn	$+82     	;abs 0x2ccc
    2c7c:	2c 32       	jn	$-934    	;abs 0x28d6
    2c7e:	30 29       	jnc	$+610    	;abs 0x2ee0
    2c80:	00 70       	subc	r0,	r0	
    2c82:	3a 70 28 31 	subc	#12584,	r10	;#0x3128
    2c86:	2c 31       	jn	$+602    	;abs 0x2ee0
    2c88:	29 3d       	jmp	$+596    	;abs 0x2edc
    2c8a:	2a 28       	jnc	$+86     	;abs 0x2ce0
    2c8c:	30 2c       	jc	$+98     	;abs 0x2cee
    2c8e:	31 31       	jn	$+612    	;abs 0x2ef2
    2c90:	29 00 70 3a 	mova	&0x03a70,r9	
    2c94:	72 28       	jnc	$+230    	;abs 0x2d7a
    2c96:	31 2c       	jc	$+100    	;abs 0x2cfa
    2c98:	31 29       	jnc	$+612    	;abs 0x2efc
    2c9a:	00 6c       	addc	r12,	r0	
    2c9c:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    2c9e:	5f 6e 65 77 	addc.b	30565(r14),r15	;0x7765(r14)
    2ca2:	6c 69       	addc.b	@r9,	r12	
    2ca4:	6e 65       	addc.b	@r5,	r14	
    2ca6:	3a 46       	mov	@r6+,	r10	
    2ca8:	28 30       	jn	$+82     	;abs 0x2cfa
    2caa:	2c 32       	jn	$-934    	;abs 0x2904
    2cac:	30 29       	jnc	$+610    	;abs 0x2f0e
    2cae:	00 6c       	addc	r12,	r0	
    2cb0:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    2cb2:	5f 67 6f 74 	addc.b	29807(r7),r15	;0x746f(r7)
    2cb6:	6f 3a       	jl	$-800    	;abs 0x2996
    2cb8:	46 28       	jnc	$+142    	;abs 0x2d46
    2cba:	30 2c       	jc	$+98     	;abs 0x2d1c
    2cbc:	32 30       	jn	$+102    	;abs 0x2d22
    2cbe:	29 00 6c 63 	mova	&0x0636c,r9	
    2cc2:	64 5f       	add.b	@r15,	r4	
    2cc4:	77 72       	subc.b	#8,	r7	;r2 As==11
    2cc6:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
    2cc8:	61 72       	subc.b	#4,	r1	;r2 As==10
    2cca:	3a 46       	mov	@r6+,	r10	
    2ccc:	28 30       	jn	$+82     	;abs 0x2d1e
    2cce:	2c 32       	jn	$-934    	;abs 0x2928
    2cd0:	30 29       	jnc	$+610    	;abs 0x2f32
    2cd2:	00 63       	adc	r0		
    2cd4:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2cd8:	2c 31       	jn	$+602    	;abs 0x2f32
    2cda:	31 29       	jnc	$+612    	;abs 0x2f3e
    2cdc:	00 6b       	addc	r11,	r0	
    2cde:	3a 72       	subc	#8,	r10	;r2 As==11
    2ce0:	28 30       	jn	$+82     	;abs 0x2d32
    2ce2:	2c 31       	jn	$+602    	;abs 0x2f3c
    2ce4:	31 29       	jnc	$+612    	;abs 0x2f48
    2ce6:	00 6c       	addc	r12,	r0	
    2ce8:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    2cea:	5f 70 75 74 	subc.b	0x7475,	r15	;PC rel. 0x0a163
    2cee:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
    2cf0:	61 72       	subc.b	#4,	r1	;r2 As==10
    2cf2:	3a 46       	mov	@r6+,	r10	
    2cf4:	28 30       	jn	$+82     	;abs 0x2d46
    2cf6:	2c 32       	jn	$-934    	;abs 0x2950
    2cf8:	30 29       	jnc	$+610    	;abs 0x2f5a
    2cfa:	00 6c       	addc	r12,	r0	
    2cfc:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    2cfe:	5f 64 72 61 	addc.b	24946(r4),r15	;0x6172(r4)
    2d02:	77 70 72 6f 	subc.b	#28530,	r7	;#0x6f72
    2d06:	67 72       	subc.b	#4,	r7	;r2 As==10
    2d08:	65 73       	subc.b	#2,	r5	;r3 As==10
    2d0a:	73 62       	.word	0x6273;	????	Illegal as 2-op instr
    2d0c:	61 72       	subc.b	#4,	r1	;r2 As==10
    2d0e:	3a 46       	mov	@r6+,	r10	
    2d10:	28 30       	jn	$+82     	;abs 0x2d62
    2d12:	2c 32       	jn	$-934    	;abs 0x296c
    2d14:	30 29       	jnc	$+610    	;abs 0x2f76
    2d16:	00 78       	subc	r8,	r0	
    2d18:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    2d1c:	2c 31       	jn	$+602    	;abs 0x2f76
    2d1e:	29 00 79 3a 	mova	&0x03a79,r9	
    2d22:	50 28       	jnc	$+162    	;abs 0x2dc4
    2d24:	30 2c       	jc	$+98     	;abs 0x2d86
    2d26:	31 29       	jnc	$+612    	;abs 0x2f8a
    2d28:	00 6c       	addc	r12,	r0	
    2d2a:	78 3a       	jl	$-782    	;abs 0x2a1c
    2d2c:	50 28       	jnc	$+162    	;abs 0x2dce
    2d2e:	30 2c       	jc	$+98     	;abs 0x2d90
    2d30:	31 29       	jnc	$+612    	;abs 0x2f94
    2d32:	00 6c       	addc	r12,	r0	
    2d34:	79 3a       	jl	$-780    	;abs 0x2a28
    2d36:	50 28       	jnc	$+162    	;abs 0x2dd8
    2d38:	30 2c       	jc	$+98     	;abs 0x2d9a
    2d3a:	31 29       	jnc	$+612    	;abs 0x2f9e
    2d3c:	00 63       	adc	r0		
    2d3e:	6f 6c       	addc.b	@r12,	r15	
    2d40:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2d42:	70 72       	subc.b	#8,	r0	;r2 As==11
    2d44:	6f 67       	addc.b	@r7,	r15	
    2d46:	72 65       	addc.b	@r5+,	r2	
    2d48:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    2d4a:	3a 70 28 30 	subc	#12328,	r10	;#0x3028
    2d4e:	2c 31       	jn	$+602    	;abs 0x2fa8
    2d50:	29 00 70 65 	mova	&0x06570,r9	
    2d54:	72 63       	addc.b	#-1,	r2	;r3 As==11
    2d56:	65 6e       	addc.b	@r14,	r5	
    2d58:	74 3a       	jl	$-790    	;abs 0x2a42
    2d5a:	70 28       	jnc	$+226    	;abs 0x2e3c
    2d5c:	30 2c       	jc	$+98     	;abs 0x2dbe
    2d5e:	31 29       	jnc	$+612    	;abs 0x2fc2
    2d60:	00 63       	adc	r0		
    2d62:	6f 6c       	addc.b	@r12,	r15	
    2d64:	6f 72       	subc.b	#4,	r15	;r2 As==10
    2d66:	70 72       	subc.b	#8,	r0	;r2 As==11
    2d68:	6f 67       	addc.b	@r7,	r15	
    2d6a:	72 65       	addc.b	@r5+,	r2	
    2d6c:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    2d6e:	3a 72       	subc	#8,	r10	;r2 As==11
    2d70:	28 30       	jn	$+82     	;abs 0x2dc2
    2d72:	2c 31       	jn	$+602    	;abs 0x2fcc
    2d74:	29 00 70 65 	mova	&0x06570,r9	
    2d78:	72 63       	addc.b	#-1,	r2	;r3 As==11
    2d7a:	65 6e       	addc.b	@r14,	r5	
    2d7c:	74 3a       	jl	$-790    	;abs 0x2a66
    2d7e:	72 28       	jnc	$+230    	;abs 0x2e64
    2d80:	30 2c       	jc	$+98     	;abs 0x2de2
    2d82:	31 29       	jnc	$+612    	;abs 0x2fe6
    2d84:	00 4d       	br	r13		
    2d86:	50 59 3a 47 	add.b	18234(r9),r0	;0x473a(r9)
    2d8a:	28 31       	jn	$+594    	;abs 0x2fdc
    2d8c:	36 2c       	jc	$+110    	;abs 0x2dfa
    2d8e:	38 29       	jnc	$+626    	;abs 0x3000
    2d90:	00 4d       	br	r13		
    2d92:	50 59 53 3a 	add.b	14931(r9),r0	;0x3a53(r9)
    2d96:	47 28       	jnc	$+144    	;abs 0x2e26
    2d98:	31 36       	jge	$-924    	;abs 0x29fc
    2d9a:	2c 38       	jl	$+90     	;abs 0x2df4
    2d9c:	29 00 4d 41 	mova	&0x0414d,r9	
    2da0:	43 3a       	jl	$-888    	;abs 0x2a28
    2da2:	47 28       	jnc	$+144    	;abs 0x2e32
    2da4:	31 36       	jge	$-924    	;abs 0x2a08
    2da6:	2c 38       	jl	$+90     	;abs 0x2e00
    2da8:	29 00 4d 41 	mova	&0x0414d,r9	
    2dac:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    2dae:	3a 47       	mov	@r7+,	r10	
    2db0:	28 31       	jn	$+594    	;abs 0x3002
    2db2:	36 2c       	jc	$+110    	;abs 0x2e20
    2db4:	38 29       	jnc	$+626    	;abs 0x3026
    2db6:	00 4f       	br	r15		
    2db8:	50 32       	jn	$-862    	;abs 0x2a5a
    2dba:	3a 47       	mov	@r7+,	r10	
    2dbc:	28 31       	jn	$+594    	;abs 0x300e
    2dbe:	36 2c       	jc	$+110    	;abs 0x2e2c
    2dc0:	38 29       	jnc	$+626    	;abs 0x3032
    2dc2:	00 52       	add	r2,	r0	
    2dc4:	45 53       	add.b	#0,	r5	;r3 As==00
    2dc6:	4c 4f       	mov.b	r15,	r12	
    2dc8:	3a 47       	mov	@r7+,	r10	
    2dca:	28 31       	jn	$+594    	;abs 0x301c
    2dcc:	36 2c       	jc	$+110    	;abs 0x2e3a
    2dce:	38 29       	jnc	$+626    	;abs 0x3040
    2dd0:	00 52       	add	r2,	r0	
    2dd2:	45 53       	add.b	#0,	r5	;r3 As==00
    2dd4:	48 49       	mov.b	r9,	r8	
    2dd6:	3a 47       	mov	@r7+,	r10	
    2dd8:	28 31       	jn	$+594    	;abs 0x302a
    2dda:	36 2c       	jc	$+110    	;abs 0x2e48
    2ddc:	38 29       	jnc	$+626    	;abs 0x304e
    2dde:	00 53       	add	#0,	r0	;r3 As==00
    2de0:	55 4d 45 58 	mov.b	22597(r13),r5	;0x5845(r13)
    2de4:	54 3a       	jl	$-854    	;abs 0x2a8e
    2de6:	47 28       	jnc	$+144    	;abs 0x2e76
    2de8:	31 36       	jge	$-924    	;abs 0x2a4c
    2dea:	2c 38       	jl	$+90     	;abs 0x2e44
    2dec:	29 00 70 6f 	mova	&0x06f70,r9	
    2df0:	72 74       	subc.b	@r4+,	r2	
    2df2:	31 3a       	jl	$-924    	;abs 0x2a56
    2df4:	47 28       	jnc	$+144    	;abs 0x2e84
    2df6:	31 34       	jge	$+100    	;abs 0x2e5a
    2df8:	2c 34       	jge	$+90     	;abs 0x2e52
    2dfa:	29 00 70 6f 	mova	&0x06f70,r9	
    2dfe:	72 74       	subc.b	@r4+,	r2	
    2e00:	32 3a       	jl	$-922    	;abs 0x2a66
    2e02:	47 28       	jnc	$+144    	;abs 0x2e92
    2e04:	31 34       	jge	$+100    	;abs 0x2e68
    2e06:	2c 34       	jge	$+90     	;abs 0x2e60
    2e08:	29 00 70 6f 	mova	&0x06f70,r9	
    2e0c:	72 74       	subc.b	@r4+,	r2	
    2e0e:	33 3a       	jl	$-920    	;abs 0x2a76
    2e10:	47 28       	jnc	$+144    	;abs 0x2ea0
    2e12:	31 34       	jge	$+100    	;abs 0x2e76
    2e14:	2c 35       	jge	$+602    	;abs 0x306e
    2e16:	29 00 70 6f 	mova	&0x06f70,r9	
    2e1a:	72 74       	subc.b	@r4+,	r2	
    2e1c:	34 3a       	jl	$-918    	;abs 0x2a86
    2e1e:	47 28       	jnc	$+144    	;abs 0x2eae
    2e20:	31 34       	jge	$+100    	;abs 0x2e84
    2e22:	2c 35       	jge	$+602    	;abs 0x307c
    2e24:	29 00 70 6f 	mova	&0x06f70,r9	
    2e28:	72 74       	subc.b	@r4+,	r2	
    2e2a:	35 3a       	jl	$-916    	;abs 0x2a96
    2e2c:	47 28       	jnc	$+144    	;abs 0x2ebc
    2e2e:	31 34       	jge	$+100    	;abs 0x2e92
    2e30:	2c 35       	jge	$+602    	;abs 0x308a
    2e32:	29 00 70 6f 	mova	&0x06f70,r9	
    2e36:	72 74       	subc.b	@r4+,	r2	
    2e38:	36 3a       	jl	$-914    	;abs 0x2aa6
    2e3a:	47 28       	jnc	$+144    	;abs 0x2eca
    2e3c:	31 34       	jge	$+100    	;abs 0x2ea0
    2e3e:	2c 35       	jge	$+602    	;abs 0x3098
    2e40:	29 00 55 43 	mova	&0x04355,r9	
    2e44:	42 30       	jn	$+134    	;abs 0x2eca
    2e46:	49 32       	jn	$-876    	;abs 0x2ada
    2e48:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    2e4a:	41 3a       	jl	$-892    	;abs 0x2ace
    2e4c:	47 28       	jnc	$+144    	;abs 0x2edc
    2e4e:	31 36       	jge	$-924    	;abs 0x2ab2
    2e50:	2c 38       	jl	$+90     	;abs 0x2eaa
    2e52:	29 00 55 43 	mova	&0x04355,r9	
    2e56:	42 30       	jn	$+134    	;abs 0x2edc
    2e58:	49 32       	jn	$-876    	;abs 0x2aec
    2e5a:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    2e5c:	41 3a       	jl	$-892    	;abs 0x2ae0
    2e5e:	47 28       	jnc	$+144    	;abs 0x2eee
    2e60:	31 36       	jge	$-924    	;abs 0x2ac4
    2e62:	2c 38       	jl	$+90     	;abs 0x2ebc
    2e64:	29 00 55 43 	mova	&0x04355,r9	
    2e68:	42 31       	jn	$+646    	;abs 0x30ee
    2e6a:	49 32       	jn	$-876    	;abs 0x2afe
    2e6c:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    2e6e:	41 3a       	jl	$-892    	;abs 0x2af2
    2e70:	47 28       	jnc	$+144    	;abs 0x2f00
    2e72:	31 36       	jge	$-924    	;abs 0x2ad6
    2e74:	2c 38       	jl	$+90     	;abs 0x2ece
    2e76:	29 00 55 43 	mova	&0x04355,r9	
    2e7a:	42 31       	jn	$+646    	;abs 0x3100
    2e7c:	49 32       	jn	$-876    	;abs 0x2b10
    2e7e:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    2e80:	41 3a       	jl	$-892    	;abs 0x2b04
    2e82:	47 28       	jnc	$+144    	;abs 0x2f12
    2e84:	31 36       	jge	$-924    	;abs 0x2ae8
    2e86:	2c 38       	jl	$+90     	;abs 0x2ee0
    2e88:	29 00 54 41 	mova	&0x04154,r9	
    2e8c:	30 49       	br	@r9+		
    2e8e:	56 3a       	jl	$-850    	;abs 0x2b3c
    2e90:	47 28       	jnc	$+144    	;abs 0x2f20
    2e92:	31 36       	jge	$-924    	;abs 0x2af6
    2e94:	2c 38       	jl	$+90     	;abs 0x2eee
    2e96:	29 00 54 41 	mova	&0x04154,r9	
    2e9a:	30 43       	br	#-1		;r3 As==11
    2e9c:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    2ea0:	28 31       	jn	$+594    	;abs 0x30f2
    2ea2:	36 2c       	jc	$+110    	;abs 0x2f10
    2ea4:	38 29       	jnc	$+626    	;abs 0x3116
    2ea6:	00 54       	add	r4,	r0	
    2ea8:	41 30       	jn	$+132    	;abs 0x2f2c
    2eaa:	52 3a       	jl	$-858    	;abs 0x2b50
    2eac:	47 28       	jnc	$+144    	;abs 0x2f3c
    2eae:	31 36       	jge	$-924    	;abs 0x2b12
    2eb0:	2c 38       	jl	$+90     	;abs 0x2f0a
    2eb2:	29 00 54 41 	mova	&0x04154,r9	
    2eb6:	30 43       	br	#-1		;r3 As==11
    2eb8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2eba:	4c 30       	jn	$+154    	;abs 0x2f54
    2ebc:	3a 47       	mov	@r7+,	r10	
    2ebe:	28 31       	jn	$+594    	;abs 0x3110
    2ec0:	36 2c       	jc	$+110    	;abs 0x2f2e
    2ec2:	38 29       	jnc	$+626    	;abs 0x3134
    2ec4:	00 54       	add	r4,	r0	
    2ec6:	41 30       	jn	$+132    	;abs 0x2f4a
    2ec8:	43 43       	clr.b	#0		;r3 As==00
    2eca:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    2ece:	47 28       	jnc	$+144    	;abs 0x2f5e
    2ed0:	31 36       	jge	$-924    	;abs 0x2b34
    2ed2:	2c 38       	jl	$+90     	;abs 0x2f2c
    2ed4:	29 00 54 41 	mova	&0x04154,r9	
    2ed8:	30 43       	br	#-1		;r3 As==11
    2eda:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2edc:	30 3a       	jl	$-926    	;abs 0x2b3e
    2ede:	47 28       	jnc	$+144    	;abs 0x2f6e
    2ee0:	31 36       	jge	$-924    	;abs 0x2b44
    2ee2:	2c 38       	jl	$+90     	;abs 0x2f3c
    2ee4:	29 00 54 41 	mova	&0x04154,r9	
    2ee8:	30 43       	br	#-1		;r3 As==11
    2eea:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2eec:	31 3a       	jl	$-924    	;abs 0x2b50
    2eee:	47 28       	jnc	$+144    	;abs 0x2f7e
    2ef0:	31 36       	jge	$-924    	;abs 0x2b54
    2ef2:	2c 38       	jl	$+90     	;abs 0x2f4c
    2ef4:	29 00 54 41 	mova	&0x04154,r9	
    2ef8:	30 43       	br	#-1		;r3 As==11
    2efa:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2efc:	4c 32       	jn	$-870    	;abs 0x2b96
    2efe:	3a 47       	mov	@r7+,	r10	
    2f00:	28 31       	jn	$+594    	;abs 0x3152
    2f02:	36 2c       	jc	$+110    	;abs 0x2f70
    2f04:	38 29       	jnc	$+626    	;abs 0x3176
    2f06:	00 54       	add	r4,	r0	
    2f08:	41 30       	jn	$+132    	;abs 0x2f8c
    2f0a:	43 43       	clr.b	#0		;r3 As==00
    2f0c:	52 32       	jn	$-858    	;abs 0x2bb2
    2f0e:	3a 47       	mov	@r7+,	r10	
    2f10:	28 31       	jn	$+594    	;abs 0x3162
    2f12:	36 2c       	jc	$+110    	;abs 0x2f80
    2f14:	38 29       	jnc	$+626    	;abs 0x3186
    2f16:	00 74       	subc	r4,	r0	
    2f18:	69 6d       	addc.b	@r13,	r9	
    2f1a:	65 72       	subc.b	#4,	r5	;r2 As==10
    2f1c:	61 3a       	jl	$-828    	;abs 0x2be0
    2f1e:	47 28       	jnc	$+144    	;abs 0x2fae
    2f20:	31 36       	jge	$-924    	;abs 0x2b84
    2f22:	2c 35       	jge	$+602    	;abs 0x317c
    2f24:	29 00 54 42 	mova	&0x04254,r9	
    2f28:	49 56       	add.b	r6,	r9	
    2f2a:	3a 47       	mov	@r7+,	r10	
    2f2c:	28 31       	jn	$+594    	;abs 0x317e
    2f2e:	36 2c       	jc	$+110    	;abs 0x2f9c
    2f30:	38 29       	jnc	$+626    	;abs 0x31a2
    2f32:	00 54       	add	r4,	r0	
    2f34:	42 43       	clr.b	r2		
    2f36:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    2f3a:	28 31       	jn	$+594    	;abs 0x318c
    2f3c:	36 2c       	jc	$+110    	;abs 0x2faa
    2f3e:	38 29       	jnc	$+626    	;abs 0x31b0
    2f40:	00 54       	add	r4,	r0	
    2f42:	42 52       	rla.b	r2		
    2f44:	3a 47       	mov	@r7+,	r10	
    2f46:	28 31       	jn	$+594    	;abs 0x3198
    2f48:	36 2c       	jc	$+110    	;abs 0x2fb6
    2f4a:	38 29       	jnc	$+626    	;abs 0x31bc
    2f4c:	00 54       	add	r4,	r0	
    2f4e:	42 43       	clr.b	r2		
    2f50:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2f52:	4c 30       	jn	$+154    	;abs 0x2fec
    2f54:	3a 47       	mov	@r7+,	r10	
    2f56:	28 31       	jn	$+594    	;abs 0x31a8
    2f58:	36 2c       	jc	$+110    	;abs 0x2fc6
    2f5a:	38 29       	jnc	$+626    	;abs 0x31cc
    2f5c:	00 54       	add	r4,	r0	
    2f5e:	42 43       	clr.b	r2		
    2f60:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2f62:	4c 31       	jn	$+666    	;abs 0x31fc
    2f64:	3a 47       	mov	@r7+,	r10	
    2f66:	28 31       	jn	$+594    	;abs 0x31b8
    2f68:	36 2c       	jc	$+110    	;abs 0x2fd6
    2f6a:	38 29       	jnc	$+626    	;abs 0x31dc
    2f6c:	00 54       	add	r4,	r0	
    2f6e:	42 43       	clr.b	r2		
    2f70:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    2f72:	4c 32       	jn	$-870    	;abs 0x2c0c
    2f74:	3a 47       	mov	@r7+,	r10	
    2f76:	28 31       	jn	$+594    	;abs 0x31c8
    2f78:	36 2c       	jc	$+110    	;abs 0x2fe6
    2f7a:	38 29       	jnc	$+626    	;abs 0x31ec
    2f7c:	00 54       	add	r4,	r0	
    2f7e:	42 43       	clr.b	r2		
    2f80:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2f82:	30 3a       	jl	$-926    	;abs 0x2be4
    2f84:	47 28       	jnc	$+144    	;abs 0x3014
    2f86:	31 36       	jge	$-924    	;abs 0x2bea
    2f88:	2c 38       	jl	$+90     	;abs 0x2fe2
    2f8a:	29 00 54 42 	mova	&0x04254,r9	
    2f8e:	43 43       	clr.b	#0		;r3 As==00
    2f90:	52 31       	jn	$+678    	;abs 0x3236
    2f92:	3a 47       	mov	@r7+,	r10	
    2f94:	28 31       	jn	$+594    	;abs 0x31e6
    2f96:	36 2c       	jc	$+110    	;abs 0x3004
    2f98:	38 29       	jnc	$+626    	;abs 0x320a
    2f9a:	00 54       	add	r4,	r0	
    2f9c:	42 43       	clr.b	r2		
    2f9e:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2fa0:	32 3a       	jl	$-922    	;abs 0x2c06
    2fa2:	47 28       	jnc	$+144    	;abs 0x3032
    2fa4:	31 36       	jge	$-924    	;abs 0x2c08
    2fa6:	2c 38       	jl	$+90     	;abs 0x3000
    2fa8:	29 00 54 42 	mova	&0x04254,r9	
    2fac:	43 43       	clr.b	#0		;r3 As==00
    2fae:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    2fb2:	47 28       	jnc	$+144    	;abs 0x3042
    2fb4:	31 36       	jge	$-924    	;abs 0x2c18
    2fb6:	2c 38       	jl	$+90     	;abs 0x3010
    2fb8:	29 00 54 42 	mova	&0x04254,r9	
    2fbc:	43 43       	clr.b	#0		;r3 As==00
    2fbe:	54 4c 34 3a 	mov.b	14900(r12),r4	;0x3a34(r12)
    2fc2:	47 28       	jnc	$+144    	;abs 0x3052
    2fc4:	31 36       	jge	$-924    	;abs 0x2c28
    2fc6:	2c 38       	jl	$+90     	;abs 0x3020
    2fc8:	29 00 54 42 	mova	&0x04254,r9	
    2fcc:	43 43       	clr.b	#0		;r3 As==00
    2fce:	54 4c 35 3a 	mov.b	14901(r12),r4	;0x3a35(r12)
    2fd2:	47 28       	jnc	$+144    	;abs 0x3062
    2fd4:	31 36       	jge	$-924    	;abs 0x2c38
    2fd6:	2c 38       	jl	$+90     	;abs 0x3030
    2fd8:	29 00 54 42 	mova	&0x04254,r9	
    2fdc:	43 43       	clr.b	#0		;r3 As==00
    2fde:	54 4c 36 3a 	mov.b	14902(r12),r4	;0x3a36(r12)
    2fe2:	47 28       	jnc	$+144    	;abs 0x3072
    2fe4:	31 36       	jge	$-924    	;abs 0x2c48
    2fe6:	2c 38       	jl	$+90     	;abs 0x3040
    2fe8:	29 00 54 42 	mova	&0x04254,r9	
    2fec:	43 43       	clr.b	#0		;r3 As==00
    2fee:	52 33       	jn	$-346    	;abs 0x2e94
    2ff0:	3a 47       	mov	@r7+,	r10	
    2ff2:	28 31       	jn	$+594    	;abs 0x3244
    2ff4:	36 2c       	jc	$+110    	;abs 0x3062
    2ff6:	38 29       	jnc	$+626    	;abs 0x3268
    2ff8:	00 54       	add	r4,	r0	
    2ffa:	42 43       	clr.b	r2		
    2ffc:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    2ffe:	34 3a       	jl	$-918    	;abs 0x2c68
    3000:	47 28       	jnc	$+144    	;abs 0x3090
    3002:	31 36       	jge	$-924    	;abs 0x2c66
    3004:	2c 38       	jl	$+90     	;abs 0x305e
    3006:	29 00 54 42 	mova	&0x04254,r9	
    300a:	43 43       	clr.b	#0		;r3 As==00
    300c:	52 35       	jge	$+678    	;abs 0x32b2
    300e:	3a 47       	mov	@r7+,	r10	
    3010:	28 31       	jn	$+594    	;abs 0x3262
    3012:	36 2c       	jc	$+110    	;abs 0x3080
    3014:	38 29       	jnc	$+626    	;abs 0x3286
    3016:	00 54       	add	r4,	r0	
    3018:	42 43       	clr.b	r2		
    301a:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    301c:	36 3a       	jl	$-914    	;abs 0x2c8a
    301e:	47 28       	jnc	$+144    	;abs 0x30ae
    3020:	31 36       	jge	$-924    	;abs 0x2c84
    3022:	2c 38       	jl	$+90     	;abs 0x307c
    3024:	29 00 74 69 	mova	&0x06974,r9	
    3028:	6d 65       	addc.b	@r5,	r13	
    302a:	72 62       	addc.b	#8,	r2	;r2 As==11
    302c:	3a 47       	mov	@r7+,	r10	
    302e:	28 31       	jn	$+594    	;abs 0x3280
    3030:	37 2c       	jc	$+112    	;abs 0x30a0
    3032:	35 29       	jnc	$+620    	;abs 0x329e
    3034:	00 46       	br	r6		
    3036:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3038:	4c 31       	jn	$+666    	;abs 0x32d2
    303a:	3a 47       	mov	@r7+,	r10	
    303c:	28 31       	jn	$+594    	;abs 0x328e
    303e:	36 2c       	jc	$+110    	;abs 0x30ac
    3040:	38 29       	jnc	$+626    	;abs 0x32b2
    3042:	00 46       	br	r6		
    3044:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3046:	4c 32       	jn	$-870    	;abs 0x2ce0
    3048:	3a 47       	mov	@r7+,	r10	
    304a:	28 31       	jn	$+594    	;abs 0x329c
    304c:	36 2c       	jc	$+110    	;abs 0x30ba
    304e:	38 29       	jnc	$+626    	;abs 0x32c0
    3050:	00 46       	br	r6		
    3052:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3054:	4c 33       	jn	$-358    	;abs 0x2eee
    3056:	3a 47       	mov	@r7+,	r10	
    3058:	28 31       	jn	$+594    	;abs 0x32aa
    305a:	36 2c       	jc	$+110    	;abs 0x30c8
    305c:	38 29       	jnc	$+626    	;abs 0x32ce
    305e:	00 41       	br	r1		
    3060:	44 43       	clr.b	r4		
    3062:	31 32       	jn	$-924    	;abs 0x2cc6
    3064:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3066:	4c 30       	jn	$+154    	;abs 0x3100
    3068:	3a 47       	mov	@r7+,	r10	
    306a:	28 31       	jn	$+594    	;abs 0x32bc
    306c:	36 2c       	jc	$+110    	;abs 0x30da
    306e:	38 29       	jnc	$+626    	;abs 0x32e0
    3070:	00 41       	br	r1		
    3072:	44 43       	clr.b	r4		
    3074:	31 32       	jn	$-924    	;abs 0x2cd8
    3076:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3078:	4c 31       	jn	$+666    	;abs 0x3312
    307a:	3a 47       	mov	@r7+,	r10	
    307c:	28 31       	jn	$+594    	;abs 0x32ce
    307e:	36 2c       	jc	$+110    	;abs 0x30ec
    3080:	38 29       	jnc	$+626    	;abs 0x32f2
    3082:	00 41       	br	r1		
    3084:	44 43       	clr.b	r4		
    3086:	31 32       	jn	$-924    	;abs 0x2cea
    3088:	49 46       	mov.b	r6,	r9	
    308a:	47 3a       	jl	$-880    	;abs 0x2d1a
    308c:	47 28       	jnc	$+144    	;abs 0x311c
    308e:	31 36       	jge	$-924    	;abs 0x2cf2
    3090:	2c 38       	jl	$+90     	;abs 0x30ea
    3092:	29 00 41 44 	mova	&0x04441,r9	
    3096:	43 31       	jn	$+648    	;abs 0x331e
    3098:	32 49       	mov	@r9+,	r2	
    309a:	45 3a       	jl	$-884    	;abs 0x2d26
    309c:	47 28       	jnc	$+144    	;abs 0x312c
    309e:	31 36       	jge	$-924    	;abs 0x2d02
    30a0:	2c 38       	jl	$+90     	;abs 0x30fa
    30a2:	29 00 41 44 	mova	&0x04441,r9	
    30a6:	43 31       	jn	$+648    	;abs 0x332e
    30a8:	32 49       	mov	@r9+,	r2	
    30aa:	56 3a       	jl	$-850    	;abs 0x2d58
    30ac:	47 28       	jnc	$+144    	;abs 0x313c
    30ae:	31 36       	jge	$-924    	;abs 0x2d12
    30b0:	2c 38       	jl	$+90     	;abs 0x310a
    30b2:	29 00 61 64 	mova	&0x06461,r9	
    30b6:	63 31       	jn	$+712    	;abs 0x337e
    30b8:	32 3a       	jl	$-922    	;abs 0x2d1e
    30ba:	47 28       	jnc	$+144    	;abs 0x314a
    30bc:	32 31       	jn	$+614    	;abs 0x3322
    30be:	2c 37       	jge	$-422    	;abs 0x2f18
    30c0:	29 00 41 44 	mova	&0x04441,r9	
    30c4:	43 31       	jn	$+648    	;abs 0x334c
    30c6:	32 4d       	mov	@r13+,	r2	
    30c8:	45 4d       	mov.b	r13,	r5	
    30ca:	30 3a       	jl	$-926    	;abs 0x2d2c
    30cc:	47 28       	jnc	$+144    	;abs 0x315c
    30ce:	31 36       	jge	$-924    	;abs 0x2d32
    30d0:	2c 38       	jl	$+90     	;abs 0x312a
    30d2:	29 00 41 44 	mova	&0x04441,r9	
    30d6:	43 31       	jn	$+648    	;abs 0x335e
    30d8:	32 4d       	mov	@r13+,	r2	
    30da:	45 4d       	mov.b	r13,	r5	
    30dc:	31 3a       	jl	$-924    	;abs 0x2d40
    30de:	47 28       	jnc	$+144    	;abs 0x316e
    30e0:	31 36       	jge	$-924    	;abs 0x2d44
    30e2:	2c 38       	jl	$+90     	;abs 0x313c
    30e4:	29 00 41 44 	mova	&0x04441,r9	
    30e8:	43 31       	jn	$+648    	;abs 0x3370
    30ea:	32 4d       	mov	@r13+,	r2	
    30ec:	45 4d       	mov.b	r13,	r5	
    30ee:	32 3a       	jl	$-922    	;abs 0x2d54
    30f0:	47 28       	jnc	$+144    	;abs 0x3180
    30f2:	31 36       	jge	$-924    	;abs 0x2d56
    30f4:	2c 38       	jl	$+90     	;abs 0x314e
    30f6:	29 00 41 44 	mova	&0x04441,r9	
    30fa:	43 31       	jn	$+648    	;abs 0x3382
    30fc:	32 4d       	mov	@r13+,	r2	
    30fe:	45 4d       	mov.b	r13,	r5	
    3100:	33 3a       	jl	$-920    	;abs 0x2d68
    3102:	47 28       	jnc	$+144    	;abs 0x3192
    3104:	31 36       	jge	$-924    	;abs 0x2d68
    3106:	2c 38       	jl	$+90     	;abs 0x3160
    3108:	29 00 41 44 	mova	&0x04441,r9	
    310c:	43 31       	jn	$+648    	;abs 0x3394
    310e:	32 4d       	mov	@r13+,	r2	
    3110:	45 4d       	mov.b	r13,	r5	
    3112:	34 3a       	jl	$-918    	;abs 0x2d7c
    3114:	47 28       	jnc	$+144    	;abs 0x31a4
    3116:	31 36       	jge	$-924    	;abs 0x2d7a
    3118:	2c 38       	jl	$+90     	;abs 0x3172
    311a:	29 00 41 44 	mova	&0x04441,r9	
    311e:	43 31       	jn	$+648    	;abs 0x33a6
    3120:	32 4d       	mov	@r13+,	r2	
    3122:	45 4d       	mov.b	r13,	r5	
    3124:	35 3a       	jl	$-916    	;abs 0x2d90
    3126:	47 28       	jnc	$+144    	;abs 0x31b6
    3128:	31 36       	jge	$-924    	;abs 0x2d8c
    312a:	2c 38       	jl	$+90     	;abs 0x3184
    312c:	29 00 41 44 	mova	&0x04441,r9	
    3130:	43 31       	jn	$+648    	;abs 0x33b8
    3132:	32 4d       	mov	@r13+,	r2	
    3134:	45 4d       	mov.b	r13,	r5	
// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    3136:	36 3a       	jl	$-914    	;abs 0x2da4
    3138:	47 28       	jnc	$+144    	;abs 0x31c8
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    313a:	31 36       	jge	$-924    	;abs 0x2d9e
    313c:	2c 38       	jl	$+90     	;abs 0x3196
    313e:	29 00 41 44 	mova	&0x04441,r9	

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    3142:	43 31       	jn	$+648    	;abs 0x33ca

    lcd_clear(BLACK);
    3144:	32 4d       	mov	@r13+,	r2	
    3146:	45 4d       	mov.b	r13,	r5	
    3148:	37 3a       	jl	$-912    	;abs 0x2db8
    
    MenuOption = RADIO_RAW;
    314a:	47 28       	jnc	$+144    	;abs 0x31da
    314c:	31 36       	jge	$-924    	;abs 0x2db0
    MenuStep = DISPLAY;
    314e:	2c 38       	jl	$+90     	;abs 0x31a8
    3150:	29 00 41 44 	mova	&0x04441,r9	
    MenuVisible = TRUE;     // inicializa mostrando o menu
    3154:	43 31       	jn	$+648    	;abs 0x33dc
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(ControlCounter >= CONTROL_PERIOD){
    3156:	32 4d       	mov	@r13+,	r2	
    3158:	45 4d       	mov.b	r13,	r5	
    315a:	38 3a       	jl	$-910    	;abs 0x2dcc
    315c:	47 28       	jnc	$+144    	;abs 0x31ec
            analog_refresh_all();
    315e:	31 36       	jge	$-924    	;abs 0x2dc2
    3160:	2c 38       	jl	$+90     	;abs 0x31ba
            if(MotorArmed == TRUE){
    3162:	29 00 41 44 	mova	&0x04441,r9	
    3166:	43 31       	jn	$+648    	;abs 0x33ee
                main_loop();
            }
            ControlCounter = 0;
    3168:	32 4d       	mov	@r13+,	r2	
    316a:	45 4d       	mov.b	r13,	r5	
        }
        
        if(SetupDone == TRUE){
    316c:	39 3a       	jl	$-908    	;abs 0x2de0
    316e:	47 28       	jnc	$+144    	;abs 0x31fe
    3170:	31 36       	jge	$-924    	;abs 0x2dd4
                process_rc();
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
    3172:	2c 38       	jl	$+90     	;abs 0x31cc
    3174:	29 00 41 44 	mova	&0x04441,r9	
                process_menu();
                MenuCounter = 0;   
            }
        }
        else{
            if(ChannelInput[CH6_CH] > 3500){
    3178:	43 31       	jn	$+648    	;abs 0x3400
    317a:	32 4d       	mov	@r13+,	r2	
    317c:	45 4d       	mov.b	r13,	r5	
    317e:	31 30       	jn	$+100    	;abs 0x31e2
                MenuVisible = TRUE;
    3180:	3a 47       	mov	@r7+,	r10	
    3182:	28 31       	jn	$+594    	;abs 0x33d4
                MotorArmed = FALSE;
    3184:	36 2c       	jc	$+110    	;abs 0x31f2
    3186:	38 29       	jnc	$+626    	;abs 0x33f8
    3188:	00 41       	br	r1		
                RCCounter = 0;
            }
        }
    
        if(MenuVisible == TRUE){
            if(MenuCounter >= MENU_PERIOD){
    318a:	44 43       	clr.b	r4		
    318c:	31 32       	jn	$-924    	;abs 0x2df0
    318e:	4d 45       	mov.b	r5,	r13	
    3190:	4d 31       	jn	$+668    	;abs 0x342c
                process_menu();
    3192:	31 3a       	jl	$-924    	;abs 0x2df6
    3194:	47 28       	jnc	$+144    	;abs 0x3224
                MenuCounter = 0;   
    3196:	31 36       	jge	$-924    	;abs 0x2dfa
    3198:	2c 38       	jl	$+90     	;abs 0x31f2
    319a:	29 00 41 44 	mova	&0x04441,r9	
            }
            ControlCounter = 0;
        }
        
        if(SetupDone == TRUE){
            if(RCCounter >= RC_PERIOD){
    319e:	43 31       	jn	$+648    	;abs 0x3426
    31a0:	32 4d       	mov	@r13+,	r2	
    31a2:	45 4d       	mov.b	r13,	r5	
                process_rc();
    31a4:	31 32       	jn	$-924    	;abs 0x2e08
    31a6:	3a 47       	mov	@r7+,	r10	
                RCCounter = 0;
    31a8:	28 31       	jn	$+594    	;abs 0x33fa
    31aa:	36 2c       	jc	$+110    	;abs 0x3218
    31ac:	38 29       	jnc	$+626    	;abs 0x341e
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
        if(ControlCounter >= CONTROL_PERIOD){
            analog_refresh_all();
            if(MotorArmed == TRUE){
                main_loop();
    31ae:	00 41       	br	r1		
    31b0:	44 43       	clr.b	r4		
    31b2:	31 32       	jn	$-924    	;abs 0x2e16
                MenuVisible = TRUE;
                MotorArmed = FALSE;
            }
        }
    }
}
    31b4:	4d 45       	mov.b	r5,	r13	
    31b6:	4d 31       	jn	$+668    	;abs 0x3452
    31b8:	33 3a       	jl	$-920    	;abs 0x2e20
    31ba:	47 28       	jnc	$+144    	;abs 0x324a
    31bc:	31 36       	jge	$-924    	;abs 0x2e20
    31be:	2c 38       	jl	$+90     	;abs 0x3218
    31c0:	29 00 41 44 	mova	&0x04441,r9	
    31c4:	43 31       	jn	$+648    	;abs 0x344c
    31c6:	32 4d       	mov	@r13+,	r2	
    31c8:	45 4d       	mov.b	r13,	r5	
    31ca:	31 34       	jge	$+100    	;abs 0x322e
    31cc:	3a 47       	mov	@r7+,	r10	
    31ce:	28 31       	jn	$+594    	;abs 0x3420
    31d0:	36 2c       	jc	$+110    	;abs 0x323e
    31d2:	38 29       	jnc	$+626    	;abs 0x3444
    31d4:	00 41       	br	r1		
    31d6:	44 43       	clr.b	r4		
    31d8:	31 32       	jn	$-924    	;abs 0x2e3c
    31da:	4d 45       	mov.b	r5,	r13	
    31dc:	4d 31       	jn	$+668    	;abs 0x3478
    31de:	35 3a       	jl	$-916    	;abs 0x2e4a
    31e0:	47 28       	jnc	$+144    	;abs 0x3270
    31e2:	31 36       	jge	$-924    	;abs 0x2e46
    31e4:	2c 38       	jl	$+90     	;abs 0x323e
    31e6:	29 00 44 41 	mova	&0x04144,r9	
    31ea:	43 31       	jn	$+648    	;abs 0x3472
    31ec:	32 5f       	add	@r15+,	r2	
    31ee:	30 43       	br	#-1		;r3 As==11
    31f0:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    31f4:	28 31       	jn	$+594    	;abs 0x3446
    31f6:	36 2c       	jc	$+110    	;abs 0x3264
    31f8:	38 29       	jnc	$+626    	;abs 0x346a
    31fa:	00 44       	br	r4		
    31fc:	41 43       	clr.b	r1		
    31fe:	31 32       	jn	$-924    	;abs 0x2e62
    3200:	5f 31       	jn	$+704    	;abs 0x34c0
    3202:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3204:	4c 3a       	jl	$-870    	;abs 0x2e9e
    3206:	47 28       	jnc	$+144    	;abs 0x3296
    3208:	31 36       	jge	$-924    	;abs 0x2e6c
    320a:	2c 38       	jl	$+90     	;abs 0x3264
    320c:	29 00 44 41 	mova	&0x04144,r9	
    3210:	43 31       	jn	$+648    	;abs 0x3498
    3212:	32 5f       	add	@r15+,	r2	
    3214:	30 44       	br	@r4+		
    3216:	41 54       	add.b	r4,	r1	
    3218:	3a 47       	mov	@r7+,	r10	
    321a:	28 31       	jn	$+594    	;abs 0x346c
    321c:	36 2c       	jc	$+110    	;abs 0x328a
    321e:	38 29       	jnc	$+626    	;abs 0x3490
    3220:	00 44       	br	r4		
    3222:	41 43       	clr.b	r1		
    3224:	31 32       	jn	$-924    	;abs 0x2e88
    3226:	5f 31       	jn	$+704    	;abs 0x34e6
    3228:	44 41       	mov.b	r1,	r4	
    322a:	54 3a       	jl	$-854    	;abs 0x2ed4
    322c:	47 28       	jnc	$+144    	;abs 0x32bc
    322e:	31 36       	jge	$-924    	;abs 0x2e92
    3230:	2c 38       	jl	$+90     	;abs 0x328a
    3232:	29 00 44 4d 	mova	&0x04d44,r9	
    3236:	41 43       	clr.b	r1		
    3238:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    323c:	47 28       	jnc	$+144    	;abs 0x32cc
    323e:	31 36       	jge	$-924    	;abs 0x2ea2
    3240:	2c 38       	jl	$+90     	;abs 0x329a
    3242:	29 00 44 4d 	mova	&0x04d44,r9	
    3246:	41 43       	clr.b	r1		
    3248:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    324c:	47 28       	jnc	$+144    	;abs 0x32dc
    324e:	31 36       	jge	$-924    	;abs 0x2eb2
    3250:	2c 38       	jl	$+90     	;abs 0x32aa
    3252:	29 00 44 4d 	mova	&0x04d44,r9	
    3256:	41 49       	mov.b	r9,	r1	
    3258:	56 3a       	jl	$-850    	;abs 0x2f06
    325a:	47 28       	jnc	$+144    	;abs 0x32ea
    325c:	31 36       	jge	$-924    	;abs 0x2ec0
    325e:	2c 38       	jl	$+90     	;abs 0x32b8
    3260:	29 00 44 4d 	mova	&0x04d44,r9	
    3264:	41 30       	jn	$+132    	;abs 0x32e8
    3266:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3268:	4c 3a       	jl	$-870    	;abs 0x2f02
    326a:	47 28       	jnc	$+144    	;abs 0x32fa
    326c:	31 36       	jge	$-924    	;abs 0x2ed0
    326e:	2c 38       	jl	$+90     	;abs 0x32c8
    3270:	29 00 44 4d 	mova	&0x04d44,r9	
    3274:	41 30       	jn	$+132    	;abs 0x32f8
    3276:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    3278:	4c 3a       	jl	$-870    	;abs 0x2f12
    327a:	47 28       	jnc	$+144    	;abs 0x330a
    327c:	31 36       	jge	$-924    	;abs 0x2ee0
    327e:	2c 38       	jl	$+90     	;abs 0x32d8
    3280:	29 00 44 4d 	mova	&0x04d44,r9	

void process_menu(void){
    switch(MenuStep){
    3284:	41 30       	jn	$+132    	;abs 0x3308
    3286:	44 41       	mov.b	r1,	r4	
    3288:	4c 3a       	jl	$-870    	;abs 0x2f22
    328a:	47 28       	jnc	$+144    	;abs 0x331a
    328c:	31 36       	jge	$-924    	;abs 0x2ef0
    328e:	2c 38       	jl	$+90     	;abs 0x32e8
    3290:	29 00 44 4d 	mova	&0x04d44,r9	
    3294:	41 30       	jn	$+132    	;abs 0x3318
    3296:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    3298:	3a 47       	mov	@r7+,	r10	
    329a:	28 31       	jn	$+594    	;abs 0x34ec
    329c:	36 2c       	jc	$+110    	;abs 0x330a
    329e:	38 29       	jnc	$+626    	;abs 0x3510
        case DISPLAY:
            lcd_goto(0,14);
    32a0:	00 44       	br	r4		
    32a2:	4d 41       	mov.b	r1,	r13	
    32a4:	31 43       	mov	#-1,	r1	;r3 As==11
    32a6:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
            printf("DISPLAY             ");
    32aa:	28 31       	jn	$+594    	;abs 0x34fc
    32ac:	36 2c       	jc	$+110    	;abs 0x331a
    32ae:	38 29       	jnc	$+626    	;abs 0x3520
    32b0:	00 44       	br	r4		
            
            lcd_clear(BLACK);
    32b2:	4d 41       	mov.b	r1,	r13	
    32b4:	31 53       	add	#-1,	r1	;r3 As==11
    32b6:	41 4c       	mov.b	r12,	r1	
            lcd_goto(0,0);
    32b8:	3a 47       	mov	@r7+,	r10	
    32ba:	28 31       	jn	$+594    	;abs 0x350c
    32bc:	36 2c       	jc	$+110    	;abs 0x332a
    32be:	38 29       	jnc	$+626    	;abs 0x3530
            printf("   MAIN MENU\n\n");
    32c0:	00 44       	br	r4		
    32c2:	4d 41       	mov.b	r1,	r13	
    32c4:	31 44       	mov	@r4+,	r1	
    32c6:	41 3a       	jl	$-892    	;abs 0x2f4a
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
    32c8:	47 28       	jnc	$+144    	;abs 0x3358
    32ca:	31 36       	jge	$-924    	;abs 0x2f2e
    32cc:	2c 38       	jl	$+90     	;abs 0x3326
    32ce:	29 00 44 4d 	mova	&0x04d44,r9	
            MenuStep = SELECT;
    32d2:	41 31       	jn	$+644    	;abs 0x3556
            break;
    32d4:	44 41       	mov.b	r1,	r4	
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    32d6:	4c 3a       	jl	$-870    	;abs 0x2f70
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
            MenuStep = SELECT;
            break;
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
    32d8:	47 28       	jnc	$+144    	;abs 0x3368
    32da:	31 36       	jge	$-924    	;abs 0x2f3e
    32dc:	2c 38       	jl	$+90     	;abs 0x3336
    32de:	29 00 44 4d 	mova	&0x04d44,r9	
            printf("SELECT            ");
    32e2:	41 31       	jn	$+644    	;abs 0x3566
    32e4:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    32e6:	3a 47       	mov	@r7+,	r10	
    32e8:	28 31       	jn	$+594    	;abs 0x353a
            
            lcd_goto(0,(int)MenuOption + 2);
    32ea:	36 2c       	jc	$+110    	;abs 0x3358
    32ec:	38 29       	jnc	$+626    	;abs 0x355e
    32ee:	00 44       	br	r4		
    32f0:	4d 41       	mov.b	r1,	r13	
    32f2:	32 43       	mov	#-1,	r2	;r3 As==11
    32f4:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
            printf(">");
    32f8:	28 31       	jn	$+594    	;abs 0x354a
    32fa:	36 2c       	jc	$+110    	;abs 0x3368
    32fc:	38 29       	jnc	$+626    	;abs 0x356e
    32fe:	00 44       	br	r4		
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    3300:	4d 41       	mov.b	r1,	r13	
    3302:	32 53       	add	#-1,	r2	;r3 As==11
    3304:	41 4c       	mov.b	r12,	r1	
    3306:	3a 47       	mov	@r7+,	r10	
    3308:	28 31       	jn	$+594    	;abs 0x355a
                MenuStep = WAIT_PITCH_DOWN;
    330a:	36 2c       	jc	$+110    	;abs 0x3378
    330c:	38 29       	jnc	$+626    	;abs 0x357e
                    MenuStep = WAIT_PITCH_UP;
                }
            }
            
            // select
            if(ChannelInput[ROLL_CH] > 3500){
    330e:	00 44       	br	r4		
    3310:	4d 41       	mov.b	r1,	r13	
    3312:	32 44       	mov	@r4+,	r2	
    3314:	41 4c       	mov.b	r12,	r1	
                MenuStep = WAIT_ROLL_LEFT;
    3316:	3a 47       	mov	@r7+,	r10	
    3318:	28 31       	jn	$+594    	;abs 0x356a
    331a:	36 2c       	jc	$+110    	;abs 0x3388
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    331c:	38 29       	jnc	$+626    	;abs 0x358e
    331e:	00 44       	br	r4		
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    3320:	4d 41       	mov.b	r1,	r13	
    3322:	32 53       	add	#-1,	r2	;r3 As==11
    3324:	5a 3a       	jl	$-842    	;abs 0x2fda
    3326:	47 28       	jnc	$+144    	;abs 0x33b6
                    MenuStep = WAIT_PITCH_UP;
    3328:	31 36       	jge	$-924    	;abs 0x2f8c
    332a:	2c 38       	jl	$+90     	;abs 0x3384
    332c:	29 00 57 44 	mova	&0x04457,r9	
            }
            
            break;
        
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    3330:	54 43       	mov.b	#1,	r4	;r3 As==01
    3332:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    3336:	28 31       	jn	$+594    	;abs 0x3588
    3338:	36 2c       	jc	$+110    	;abs 0x33a6
            printf("WAIT PITCH DOWN    ");
    333a:	38 29       	jnc	$+626    	;abs 0x35ac
    333c:	00 54       	add	r4,	r0	
    333e:	4c 56       	add.b	r6,	r12	
    3340:	5f 43       	mov.b	#1,	r15	;r3 As==01
            
            if(ChannelInput[PITCH_CH] > 2500){
    3342:	48 45       	mov.b	r5,	r8	
    3344:	43 4b       	.word	0x4b43;	????	Illegal as 2-op instr
    3346:	53 55       	.word	0x5553;	????	Illegal as 2-op instr
    3348:	4d 3a       	jl	$-868    	;abs 0x2fe4
    334a:	47 28       	jnc	$+144    	;abs 0x33da
                lcd_goto(0,(int)MenuOption + 2);
    334c:	31 36       	jge	$-924    	;abs 0x2fb0
    334e:	2c 38       	jl	$+90     	;abs 0x33a8
    3350:	29 00 4c 43 	mova	&0x0434c,r9	
    3354:	44 5f       	add.b	r15,	r4	
    3356:	6c 69       	addc.b	@r9,	r12	
    3358:	6e 65       	addc.b	@r5,	r14	
                printf(" ");
    335a:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    335c:	75 6e       	addc.b	@r14+,	r5	
    335e:	74 3a       	jl	$-790    	;abs 0x3048
    3360:	47 28       	jnc	$+144    	;abs 0x33f0
                if((int)MenuOption > 0){
    3362:	30 2c       	jc	$+98     	;abs 0x33c4
    3364:	31 31       	jn	$+612    	;abs 0x35c8
    3366:	29 00 4c 43 	mova	&0x0434c,r9	
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
    336a:	44 5f       	add.b	r15,	r4	
    336c:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
    336e:	61 72       	subc.b	#4,	r1	;r2 As==10
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
                }
                MenuStep = SELECT;
    3370:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    3372:	75 6e       	addc.b	@r14+,	r5	
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3374:	74 3a       	jl	$-790    	;abs 0x305e
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    3376:	47 28       	jnc	$+144    	;abs 0x3406
    3378:	30 2c       	jc	$+98     	;abs 0x33da
    337a:	31 31       	jn	$+612    	;abs 0x35de
    337c:	29 00 63 6f 	mova	&0x06f63,r9	
            printf("WAIT PITCH UP    ");
    3380:	6c 6f       	addc.b	@r15,	r12	
    3382:	72 5f       	add.b	@r15+,	r2	
    3384:	62 61       	addc.b	@r1,	r2	
    3386:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr

            if(ChannelInput[PITCH_CH] < 3500){
    3388:	3a 47       	mov	@r7+,	r10	
    338a:	28 30       	jn	$+82     	;abs 0x33dc
    338c:	2c 31       	jn	$+602    	;abs 0x35e6
    338e:	31 29       	jnc	$+612    	;abs 0x35f2
    3390:	00 63       	adc	r0		
                lcd_goto(0,(int)MenuOption + 2);
    3392:	6f 6c       	addc.b	@r12,	r15	
    3394:	6f 72       	subc.b	#4,	r15	;r2 As==10
    3396:	5f 66 6f 72 	addc.b	29295(r6),r15	;0x726f(r6)
    339a:	65 3a       	jl	$-820    	;abs 0x3066
    339c:	47 28       	jnc	$+144    	;abs 0x342c
    339e:	30 2c       	jc	$+98     	;abs 0x3400
                printf(" ");
    33a0:	31 31       	jn	$+612    	;abs 0x3604
    33a2:	29 00 61 73 	mova	&0x07361,r9	
    33a6:	63 69       	.word	0x6963;	????	Illegal as 2-op instr
                if((int)MenuOption < MENU_LENGHT){
    33a8:	69 74       	subc.b	@r4,	r9	
    33aa:	61 62       	addc.b	#4,	r1	;r2 As==10
    33ac:	6c 65       	addc.b	@r5,	r12	
    33ae:	3a 47       	mov	@r7+,	r10	
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    33b0:	28 31       	jn	$+594    	;abs 0x3602
    33b2:	2c 34       	jge	$+90     	;abs 0x340c
                MenuStep = PROCESS_OPTION;
            }
            break;
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
    33b4:	29 3d       	jmp	$+596    	;abs 0x3608
    33b6:	61 72       	subc.b	#4,	r1	;r2 As==10
    33b8:	28 31       	jn	$+594    	;abs 0x360a
    33ba:	36 2c       	jc	$+110    	;abs 0x3428
    33bc:	37 29       	jnc	$+624    	;abs 0x362c
            printf("WAIT CH7 BACK    ");
    33be:	3b 30       	jn	$+120    	;abs 0x3436
    33c0:	3b 36       	jge	$-904    	;abs 0x3038
    33c2:	33 39       	jl	$+616    	;abs 0x362a
    33c4:	3b 28       	jnc	$+120    	;abs 0x343c
            
            if(ChannelInput[CH7_CH] < 2500){
    33c6:	34 2c       	jc	$+106    	;abs 0x3430
    33c8:	31 39       	jl	$+612    	;abs 0x362c
    33ca:	29 00 43 3a 	mova	&0x03a43,r9	
    33ce:	5c 55 73 65 	add.b	25971(r5),r12	;0x6573(r5)
                MenuStep = DISPLAY;
    33d2:	72 73       	subc.b	#-1,	r2	;r3 As==11
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    33d4:	5c 66 6c 61 	addc.b	24940(r6),r12	;0x616c(r6)
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    33d8:	76 69       	addc.b	@r9+,	r6	
    33da:	6f 68       	addc.b	@r8,	r15	
    33dc:	70 6f       	addc.b	@r15+,	r0	
    33de:	5c 44 65 73 	mov.b	29541(r4),r12	;0x7365(r4)
            printf("WAIT ROLL LEFT    ");
    33e2:	6b 74       	subc.b	@r4,	r11	
    33e4:	6f 70       	subc.b	@r0,	r15	
    33e6:	5c 6d 69 63 	addc.b	25449(r13),r12	;0x6369(r13)
            
            if(ChannelInput[ROLL_CH] < 3500){
    33ea:	72 6f       	addc.b	@r15+,	r2	
    33ec:	71 75       	subc.b	@r5+,	r1	
    33ee:	61 64       	addc.b	@r4,	r1	
    33f0:	2f 00 64 65 	mova	&0x06564,r15	
                lcd_clear(BLACK);
    33f4:	6c 61       	addc.b	@r1,	r12	
    33f6:	79 2e       	jc	$-780    	;abs 0x30ea
                lcd_goto(0,0);  
    33f8:	63 00 64 65 	mova	r0,	&0x36564
    33fc:	6c 61       	addc.b	@r1,	r12	
    33fe:	79 32       	jn	$-780    	;abs 0x30f2
                MenuStep = PROCESS_OPTION;
    3400:	75 73       	subc.b	#-1,	r5	;r3 As==11
    3402:	3a 46       	mov	@r6+,	r10	
    3404:	28 30       	jn	$+82     	;abs 0x3456
            break;
            
        case WAIT_ROLL_RIGHT:
            break;    
    }
}
    3406:	2c 32       	jn	$-934    	;abs 0x3060
                MenuStep = DISPLAY;
            }
            break;
                    
        case PROCESS_OPTION:
            process_option();
    3408:	30 29       	jnc	$+610    	;abs 0x366a
    340a:	00 64       	addc	r4,	r0	
    340c:	65 6c       	addc.b	@r12,	r5	
    340e:	61 79       	subc.b	@r9,	r1	
    3410:	35 75       	subc	@r5+,	r5	
        case WAIT_ROLL_RIGHT:
            break;    
    }
}

void process_option(){
    3412:	73 3a       	jl	$-792    	;abs 0x30fa
    int i;
    switch (MenuOption){
    3414:	46 28       	jnc	$+142    	;abs 0x34a2
    3416:	30 2c       	jc	$+98     	;abs 0x3478
    3418:	32 30       	jn	$+102    	;abs 0x347e
    341a:	29 00 64 65 	mova	&0x06564,r9	
    341e:	6c 61       	addc.b	@r1,	r12	
    3420:	79 75       	subc.b	@r5+,	r9	
    3422:	73 3a       	jl	$-792    	;abs 0x310a
    3424:	46 28       	jnc	$+142    	;abs 0x34b2
    3426:	30 2c       	jc	$+98     	;abs 0x3488
    3428:	32 30       	jn	$+102    	;abs 0x348e
            
            // seta o flag initial setup
            break;          
    }
    
    if(ChannelInput[CH7_CH] > 3500){
    342a:	29 00 74 65 	mova	&0x06574,r9	
    342e:	6d 70       	subc.b	@r0,	r13	
    3430:	6f 3a       	jl	$-800    	;abs 0x3110
        MenuStep = WAIT_CH7_BACK;
    3432:	50 28       	jnc	$+162    	;abs 0x34d4
    3434:	30 2c       	jc	$+98     	;abs 0x3496
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    3436:	34 29       	jnc	$+618    	;abs 0x36a0
    3438:	00 64       	addc	r4,	r0	
        analog_graph_clear_all();
    343a:	65 6c       	addc.b	@r12,	r5	
    343c:	61 79       	subc.b	@r9,	r1	
        lcd_clear(BLACK);
    343e:	6d 73       	subc.b	#2,	r13	;r3 As==10
    3440:	3a 46       	mov	@r6+,	r10	
    3442:	28 30       	jn	$+82     	;abs 0x3494
    3444:	2c 32       	jn	$-934    	;abs 0x309e
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
    3446:	30 29       	jnc	$+610    	;abs 0x36a8
    3448:	00 4d       	br	r13		
    344a:	50 59 3a 47 	add.b	18234(r9),r0	;0x473a(r9)

void process_option(){
    int i;
    switch (MenuOption){
        case RADIO_RAW:
            draw_rc_inputs(1);
    344e:	28 39       	jl	$+594    	;abs 0x36a0
            break;
    3450:	2c 38       	jl	$+90     	;abs 0x34aa
    3452:	29 00 4d 50 	mova	&0x0504d,r9	
    3456:	59 53       	inc.b	r9		
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
    3458:	3a 47       	mov	@r7+,	r10	
    345a:	28 39       	jl	$+594    	;abs 0x36ac
    345c:	2c 38       	jl	$+90     	;abs 0x34b6
            for(i = 5; i >= 0; i--){ // contagem regressiva
    345e:	29 00 4d 41 	mova	&0x0414d,r9	
                lcd_goto(8,8);
    3462:	43 3a       	jl	$-888    	;abs 0x30ea
    3464:	47 28       	jnc	$+144    	;abs 0x34f4
    3466:	39 2c       	jc	$+116    	;abs 0x34da
    3468:	38 29       	jnc	$+626    	;abs 0x36da
                printf("%d", i);
    346a:	00 4d       	br	r13		
    346c:	41 43       	clr.b	r1		
    346e:	53 3a       	jl	$-856    	;abs 0x3116
    3470:	47 28       	jnc	$+144    	;abs 0x3500
    3472:	39 2c       	jc	$+116    	;abs 0x34e6
                delayms(1000);
    3474:	38 29       	jnc	$+626    	;abs 0x36e6
    3476:	00 4f       	br	r15		
    3478:	50 32       	jn	$-862    	;abs 0x311a
    347a:	3a 47       	mov	@r7+,	r10	
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
    347c:	28 39       	jl	$+594    	;abs 0x36ce
    347e:	2c 38       	jl	$+90     	;abs 0x34d8
    3480:	29 00 52 45 	mova	&0x04552,r9	
    3484:	53 4c       	.word	0x4c53;	????	Illegal as 2-op instr
                lcd_goto(8,8);
                printf("%d", i);
                delayms(1000);
            }
            MotorArmed = TRUE;
    3486:	4f 3a       	jl	$-864    	;abs 0x3126
    3488:	47 28       	jnc	$+144    	;abs 0x3518
            MenuVisible = FALSE;
    348a:	39 2c       	jc	$+116    	;abs 0x34fe
    348c:	38 29       	jnc	$+626    	;abs 0x36fe
            lcd_clear(BLACK);
    348e:	00 52       	add	r2,	r0	
    3490:	45 53       	add.b	#0,	r5	;r3 As==00
    3492:	48 49       	mov.b	r9,	r8	
            MenuStep = DISPLAY;
    3494:	3a 47       	mov	@r7+,	r10	
    3496:	28 39       	jl	$+594    	;abs 0x36e8
    3498:	2c 38       	jl	$+90     	;abs 0x34f2
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
    349a:	29 00 53 55 	mova	&0x05553,r9	
            break;
    349e:	4d 45       	mov.b	r5,	r13	
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        analog_graph_clear_all();
        lcd_clear(BLACK);
    }
}
    34a0:	58 54 3a 47 	add.b	18234(r4),r8	;0x473a(r4)

void draw_analog_graph(void){
    34a4:	28 39       	jl	$+594    	;abs 0x36f6
    34a6:	2c 38       	jl	$+90     	;abs 0x3500
    34a8:	29 00 70 6f 	mova	&0x06f70,r9	
    int i, k;
    for(i = 0; i < 8; i++){
    34ac:	72 74       	subc.b	@r4+,	r2	
        if((1 << i) & AnalogChecked){
    34ae:	31 3a       	jl	$-924    	;abs 0x3112
    34b0:	47 28       	jnc	$+144    	;abs 0x3540
    34b2:	37 2c       	jc	$+112    	;abs 0x3522
    34b4:	34 29       	jnc	$+618    	;abs 0x371e
    34b6:	00 70       	subc	r0,	r0	
    34b8:	6f 72       	subc.b	#4,	r15	;r2 As==10
    34ba:	74 32       	jn	$-790    	;abs 0x31a4
    34bc:	3a 47       	mov	@r7+,	r10	
    34be:	28 37       	jge	$-430    	;abs 0x3310
    34c0:	2c 34       	jge	$+90     	;abs 0x351a
    34c2:	29 00 70 6f 	mova	&0x06f70,r9	
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
    34c6:	72 74       	subc.b	@r4+,	r2	
    34c8:	33 3a       	jl	$-920    	;abs 0x3130
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
    34ca:	47 28       	jnc	$+144    	;abs 0x355a
    34cc:	37 2c       	jc	$+112    	;abs 0x353c
    34ce:	35 29       	jnc	$+620    	;abs 0x373a
    34d0:	00 70       	subc	r0,	r0	
    34d2:	6f 72       	subc.b	#4,	r15	;r2 As==10
    34d4:	74 34       	jge	$+234    	;abs 0x35be
    34d6:	3a 47       	mov	@r7+,	r10	
    34d8:	28 37       	jge	$-430    	;abs 0x332a
    34da:	2c 35       	jge	$+602    	;abs 0x3734
    34dc:	29 00 70 6f 	mova	&0x06f70,r9	
    34e0:	72 74       	subc.b	@r4+,	r2	
    34e2:	35 3a       	jl	$-916    	;abs 0x314e
    34e4:	47 28       	jnc	$+144    	;abs 0x3574
    34e6:	37 2c       	jc	$+112    	;abs 0x3556
    34e8:	35 29       	jnc	$+620    	;abs 0x3754
    34ea:	00 70       	subc	r0,	r0	
    34ec:	6f 72       	subc.b	#4,	r15	;r2 As==10
    34ee:	74 36       	jge	$-790    	;abs 0x31d8
    34f0:	3a 47       	mov	@r7+,	r10	
    34f2:	28 37       	jge	$-430    	;abs 0x3344
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
    34f4:	2c 35       	jge	$+602    	;abs 0x374e
    34f6:	29 00 50 31 	mova	&0x03150,r9	
    34fa:	49 4e       	mov.b	r14,	r9	
    34fc:	3a 47       	mov	@r7+,	r10	
    34fe:	28 31       	jn	$+594    	;abs 0x3750
    3500:	2c 31       	jn	$+602    	;abs 0x375a
    3502:	29 3d       	jmp	$+596    	;abs 0x3756
    3504:	42 28       	jnc	$+134    	;abs 0x358a
    3506:	30 2c       	jc	$+98     	;abs 0x3568
    3508:	31 31       	jn	$+612    	;abs 0x376c
    350a:	29 00 50 31 	mova	&0x03150,r9	
    350e:	4f 55       	add.b	r5,	r15	
    3510:	54 3a       	jl	$-854    	;abs 0x31ba
    3512:	47 28       	jnc	$+144    	;abs 0x35a2
    3514:	31 2c       	jc	$+100    	;abs 0x3578
    3516:	31 29       	jnc	$+612    	;abs 0x377a
    3518:	00 50       	rla	r0		
    351a:	31 44       	mov	@r4+,	r1	
    351c:	49 52       	add.b	r2,	r9	
    351e:	3a 47       	mov	@r7+,	r10	
    3520:	28 31       	jn	$+594    	;abs 0x3772
    3522:	2c 31       	jn	$+602    	;abs 0x377c
    3524:	29 00 50 31 	mova	&0x03150,r9	
    3528:	49 46       	mov.b	r6,	r9	
    352a:	47 3a       	jl	$-880    	;abs 0x31ba
    352c:	47 28       	jnc	$+144    	;abs 0x35bc
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
    352e:	31 2c       	jc	$+100    	;abs 0x3592
    3530:	31 29       	jnc	$+612    	;abs 0x3794
    3532:	00 50       	rla	r0		
    3534:	31 49       	mov	@r9+,	r1	
    3536:	45 53       	add.b	#0,	r5	;r3 As==00
    3538:	3a 47       	mov	@r7+,	r10	
    353a:	28 31       	jn	$+594    	;abs 0x378c
    353c:	2c 31       	jn	$+602    	;abs 0x3796
    353e:	29 00 50 31 	mova	&0x03150,r9	
    3542:	49 45       	mov.b	r5,	r9	
    3544:	3a 47       	mov	@r7+,	r10	
    3546:	28 31       	jn	$+594    	;abs 0x3798
    3548:	2c 31       	jn	$+602    	;abs 0x37a2
    354a:	29 00 50 31 	mova	&0x03150,r9	
    354e:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
    3550:	4c 3a       	jl	$-870    	;abs 0x31ea
    3552:	47 28       	jnc	$+144    	;abs 0x35e2
    3554:	31 2c       	jc	$+100    	;abs 0x35b8
    3556:	31 29       	jnc	$+612    	;abs 0x37ba

void draw_analog_graph(void){
    int i, k;
    for(i = 0; i < 8; i++){
        if((1 << i) & AnalogChecked){
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
    3558:	00 50       	rla	r0		
    355a:	31 52       	add	#8,	r1	;r2 As==11
    355c:	45 4e       	mov.b	r14,	r5	
    355e:	3a 47       	mov	@r7+,	r10	
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
            }
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
    3560:	28 31       	jn	$+594    	;abs 0x37b2
    3562:	2c 31       	jn	$+602    	;abs 0x37bc
    3564:	29 00 50 32 	mova	&0x03250,r9	
    3568:	49 4e       	mov.b	r14,	r9	
    356a:	3a 47       	mov	@r7+,	r10	
    356c:	28 31       	jn	$+594    	;abs 0x37be
    356e:	2c 31       	jn	$+602    	;abs 0x37c8
    3570:	29 00 50 32 	mova	&0x03250,r9	
    3574:	4f 55       	add.b	r5,	r15	
    3576:	54 3a       	jl	$-854    	;abs 0x3220
    3578:	47 28       	jnc	$+144    	;abs 0x3608
    357a:	31 2c       	jc	$+100    	;abs 0x35de
    357c:	31 29       	jnc	$+612    	;abs 0x37e0
    357e:	00 50       	rla	r0		
    3580:	32 44       	mov	@r4+,	r2	
    3582:	49 52       	add.b	r2,	r9	
    3584:	3a 47       	mov	@r7+,	r10	
    3586:	28 31       	jn	$+594    	;abs 0x37d8
    3588:	2c 31       	jn	$+602    	;abs 0x37e2
    358a:	29 00 50 32 	mova	&0x03250,r9	
    358e:	49 46       	mov.b	r6,	r9	
    3590:	47 3a       	jl	$-880    	;abs 0x3220
    3592:	47 28       	jnc	$+144    	;abs 0x3622
    3594:	31 2c       	jc	$+100    	;abs 0x35f8
    3596:	31 29       	jnc	$+612    	;abs 0x37fa
    }
}

void draw_analog_graph(void){
    int i, k;
    for(i = 0; i < 8; i++){
    3598:	00 50       	rla	r0		
    359a:	32 49       	mov	@r9+,	r2	
    359c:	45 53       	add.b	#0,	r5	;r3 As==00
            }
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
        }
    }
    
}
    359e:	3a 47       	mov	@r7+,	r10	
    35a0:	28 31       	jn	$+594    	;abs 0x37f2
    35a2:	2c 31       	jn	$+602    	;abs 0x37fc
    35a4:	29 00 50 32 	mova	&0x03250,r9	

void analog_graph_clear(int n){
    35a8:	49 45       	mov.b	r5,	r9	
    35aa:	3a 47       	mov	@r7+,	r10	
    35ac:	28 31       	jn	$+594    	;abs 0x37fe
    35ae:	2c 31       	jn	$+602    	;abs 0x3808
    int i;
    for(i = 0; i < GRAPH_LENGHT; i++){
    35b0:	29 00 50 32 	mova	&0x03250,r9	
    35b4:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
    35b6:	4c 3a       	jl	$-870    	;abs 0x3250
    35b8:	47 28       	jnc	$+144    	;abs 0x3648
    35ba:	31 2c       	jc	$+100    	;abs 0x361e
    35bc:	31 29       	jnc	$+612    	;abs 0x3820
    35be:	00 50       	rla	r0		
    35c0:	32 52       	add	#8,	r2	;r2 As==11
    35c2:	45 4e       	mov.b	r14,	r5	
    35c4:	3a 47       	mov	@r7+,	r10	
    35c6:	28 31       	jn	$+594    	;abs 0x3818
    35c8:	2c 31       	jn	$+602    	;abs 0x3822
    35ca:	29 00 50 33 	mova	&0x03350,r9	
    35ce:	49 4e       	mov.b	r14,	r9	
    35d0:	3a 47       	mov	@r7+,	r10	
    35d2:	28 31       	jn	$+594    	;abs 0x3824
    35d4:	2c 31       	jn	$+602    	;abs 0x382e
    35d6:	29 00 50 33 	mova	&0x03350,r9	
    35da:	4f 55       	add.b	r5,	r15	
    35dc:	54 3a       	jl	$-854    	;abs 0x3286
    35de:	47 28       	jnc	$+144    	;abs 0x366e
        AnalogGraph[n][i] = 0;
    35e0:	31 2c       	jc	$+100    	;abs 0x3644
    35e2:	31 29       	jnc	$+612    	;abs 0x3846
    35e4:	00 50       	rla	r0		
    35e6:	33 44       	.word	0x4433;	????	Illegal as 2-op instr
    35e8:	49 52       	add.b	r2,	r9	
    35ea:	3a 47       	mov	@r7+,	r10	
    35ec:	28 31       	jn	$+594    	;abs 0x383e
    35ee:	2c 31       	jn	$+602    	;abs 0x3848
    35f0:	29 00 50 33 	mova	&0x03350,r9	
    35f4:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
    35f6:	4c 3a       	jl	$-870    	;abs 0x3290
    35f8:	47 28       	jnc	$+144    	;abs 0x3688
    35fa:	31 2c       	jc	$+100    	;abs 0x365e
    35fc:	31 29       	jnc	$+612    	;abs 0x3860
    
}

void analog_graph_clear(int n){
    int i;
    for(i = 0; i < GRAPH_LENGHT; i++){
    35fe:	00 50       	rla	r0		
    3600:	33 52       	.word	0x5233;	????	Illegal as 2-op instr
    3602:	45 4e       	mov.b	r14,	r5	
    3604:	3a 47       	mov	@r7+,	r10	
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
        AnalogGraph[n][i] = 0;
    }
}
    3606:	28 31       	jn	$+594    	;abs 0x3858
    3608:	2c 31       	jn	$+602    	;abs 0x3862
    360a:	29 00 50 34 	mova	&0x03450,r9	
    360e:	49 4e       	mov.b	r14,	r9	
    3610:	3a 47       	mov	@r7+,	r10	
    3612:	28 31       	jn	$+594    	;abs 0x3864
    3614:	2c 31       	jn	$+602    	;abs 0x386e
    3616:	29 00 50 34 	mova	&0x03450,r9	
    361a:	4f 55       	add.b	r5,	r15	
    361c:	54 3a       	jl	$-854    	;abs 0x32c6
    361e:	47 28       	jnc	$+144    	;abs 0x36ae
    3620:	31 2c       	jc	$+100    	;abs 0x3684
    3622:	31 29       	jnc	$+612    	;abs 0x3886
    3624:	00 50       	rla	r0		
    3626:	34 44       	mov	@r4+,	r4	
    3628:	49 52       	add.b	r2,	r9	
    362a:	3a 47       	mov	@r7+,	r10	
    362c:	28 31       	jn	$+594    	;abs 0x387e
    362e:	2c 31       	jn	$+602    	;abs 0x3888
    3630:	29 00 50 34 	mova	&0x03450,r9	
    3634:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
    3636:	4c 3a       	jl	$-870    	;abs 0x32d0
    3638:	47 28       	jnc	$+144    	;abs 0x36c8
    363a:	31 2c       	jc	$+100    	;abs 0x369e
    363c:	31 29       	jnc	$+612    	;abs 0x38a0
    363e:	00 50       	rla	r0		
    3640:	34 52       	add	#8,	r4	;r2 As==11

void process_analog_menu(void){
    draw_analog_graph();
    3642:	45 4e       	mov.b	r14,	r5	
    3644:	3a 47       	mov	@r7+,	r10	
    switch(MenuAnalog){
    3646:	28 31       	jn	$+594    	;abs 0x3898
    3648:	2c 31       	jn	$+602    	;abs 0x38a2
    364a:	29 00 50 35 	mova	&0x03550,r9	
    364e:	49 4e       	mov.b	r14,	r9	
    3650:	3a 47       	mov	@r7+,	r10	
    3652:	28 31       	jn	$+594    	;abs 0x38a4
    3654:	2c 31       	jn	$+602    	;abs 0x38ae
    3656:	29 00 50 35 	mova	&0x03550,r9	
    365a:	4f 55       	add.b	r5,	r15	
    365c:	54 3a       	jl	$-854    	;abs 0x3306
    365e:	47 28       	jnc	$+144    	;abs 0x36ee
    3660:	31 2c       	jc	$+100    	;abs 0x36c4
    3662:	31 29       	jnc	$+612    	;abs 0x38c6
        case DISPLAY:
            lcd_goto(4,0);
    3664:	00 50       	rla	r0		
    3666:	35 44       	mov	@r4+,	r5	
    3668:	49 52       	add.b	r2,	r9	
    366a:	3a 47       	mov	@r7+,	r10	
            printf("ANALOG GRAPH   ");
    366c:	28 31       	jn	$+594    	;abs 0x38be
    366e:	2c 31       	jn	$+602    	;abs 0x38c8
    3670:	29 00 50 35 	mova	&0x03550,r9	
            
            lcd_goto(0,14);
    3674:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
    3676:	4c 3a       	jl	$-870    	;abs 0x3310
    3678:	47 28       	jnc	$+144    	;abs 0x3708
    367a:	31 2c       	jc	$+100    	;abs 0x36de
    367c:	31 29       	jnc	$+612    	;abs 0x38e0
            printf("DISPLAY             ");
    367e:	00 50       	rla	r0		
    3680:	35 52       	add	#8,	r5	;r2 As==11
    3682:	45 4e       	mov.b	r14,	r5	
    3684:	3a 47       	mov	@r7+,	r10	

            refresh_analog_menu();
    3686:	28 31       	jn	$+594    	;abs 0x38d8
    3688:	2c 31       	jn	$+602    	;abs 0x38e2
            MenuAnalog = SELECT;
    368a:	29 00 50 36 	mova	&0x03650,r9	
            break;
    368e:	49 4e       	mov.b	r14,	r9	
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3690:	3a 47       	mov	@r7+,	r10	

            refresh_analog_menu();
            MenuAnalog = SELECT;
            break;
        case SELECT:
            lcd_goto(0,14);
    3692:	28 31       	jn	$+594    	;abs 0x38e4
    3694:	2c 31       	jn	$+602    	;abs 0x38ee
    3696:	29 00 50 36 	mova	&0x03650,r9	
    369a:	4f 55       	add.b	r5,	r15	
            printf("SELECT            ");
    369c:	54 3a       	jl	$-854    	;abs 0x3346
    369e:	47 28       	jnc	$+144    	;abs 0x372e
    36a0:	31 2c       	jc	$+100    	;abs 0x3704
    36a2:	31 29       	jnc	$+612    	;abs 0x3906

            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    36a4:	00 50       	rla	r0		
    36a6:	36 44       	mov	@r4+,	r6	
    36a8:	49 52       	add.b	r2,	r9	
    36aa:	3a 47       	mov	@r7+,	r10	
    36ac:	28 31       	jn	$+594    	;abs 0x38fe
                MenuAnalog = WAIT_ROLL_LEFT;
    36ae:	2c 31       	jn	$+602    	;abs 0x3908
    36b0:	29 00 50 36 	mova	&0x03650,r9	
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
            
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    36b4:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
    36b6:	4c 3a       	jl	$-870    	;abs 0x3350
    36b8:	47 28       	jnc	$+144    	;abs 0x3748
    36ba:	31 2c       	jc	$+100    	;abs 0x371e
                MenuAnalog = WAIT_PITCH_DOWN;
    36bc:	31 29       	jnc	$+612    	;abs 0x3920
    36be:	00 50       	rla	r0		
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    36c0:	36 52       	add	#8,	r6	;r2 As==11
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    36c2:	45 4e       	mov.b	r14,	r5	
    36c4:	3a 47       	mov	@r7+,	r10	
    36c6:	28 31       	jn	$+594    	;abs 0x3918
    36c8:	2c 31       	jn	$+602    	;abs 0x3922
                    MenuAnalog = WAIT_PITCH_UP;
    36ca:	29 00 50 37 	mova	&0x03750,r9	
    36ce:	49 4e       	mov.b	r14,	r9	
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    36d0:	3a 47       	mov	@r7+,	r10	
    36d2:	28 31       	jn	$+594    	;abs 0x3924
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
            }
            else{
                if(ChannelInput[ROLL_CH] < 2500){
    36d4:	2c 31       	jn	$+602    	;abs 0x392e
    36d6:	29 00 50 37 	mova	&0x03750,r9	
    36da:	4f 55       	add.b	r5,	r15	
                    MenuAnalog = WAIT_ROLL_RIGHT;
    36dc:	54 3a       	jl	$-854    	;abs 0x3386
    36de:	47 28       	jnc	$+144    	;abs 0x376e
    36e0:	31 2c       	jc	$+100    	;abs 0x3744
    36e2:	31 29       	jnc	$+612    	;abs 0x3946
                }
            }
            
            break;
        case WAIT_PITCH_DOWN:
            lcd_goto(0,14);
    36e4:	00 50       	rla	r0		
    36e6:	37 44       	mov	@r4+,	r7	
    36e8:	49 52       	add.b	r2,	r9	
    36ea:	3a 47       	mov	@r7+,	r10	
    36ec:	28 31       	jn	$+594    	;abs 0x393e
            printf("WAIT PITCH DOWN    ");
    36ee:	2c 31       	jn	$+602    	;abs 0x3948
    36f0:	29 00 50 37 	mova	&0x03750,r9	
    36f4:	53 45       	.word	0x4553;	????	Illegal as 2-op instr

            if(ChannelInput[PITCH_CH] > 2500){
    36f6:	4c 3a       	jl	$-870    	;abs 0x3390
    36f8:	47 28       	jnc	$+144    	;abs 0x3788
    36fa:	31 2c       	jc	$+100    	;abs 0x375e
    36fc:	31 29       	jnc	$+612    	;abs 0x3960
    36fe:	00 50       	rla	r0		
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    3700:	37 52       	add	#8,	r7	;r2 As==11
    3702:	45 4e       	mov.b	r14,	r5	
    3704:	3a 47       	mov	@r7+,	r10	
    3706:	28 31       	jn	$+594    	;abs 0x3958
    3708:	2c 31       	jn	$+602    	;abs 0x3962
    370a:	29 00 50 38 	mova	&0x03850,r9	
    370e:	49 4e       	mov.b	r14,	r9	
    3710:	3a 47       	mov	@r7+,	r10	
    3712:	28 31       	jn	$+594    	;abs 0x3964
    3714:	2c 31       	jn	$+602    	;abs 0x396e

                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
                        AnalogSelect--;
                    }
                    MenuAnalog = DISPLAY;
    3716:	29 00 50 38 	mova	&0x03850,r9	
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    371a:	4f 55       	add.b	r5,	r15	
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    371c:	54 3a       	jl	$-854    	;abs 0x33c6
    371e:	47 28       	jnc	$+144    	;abs 0x37ae
    3720:	31 2c       	jc	$+100    	;abs 0x3784
    3722:	31 29       	jnc	$+612    	;abs 0x3986
    3724:	00 50       	rla	r0		
            printf("WAIT PITCH UP    ");
    3726:	38 44       	mov	@r4+,	r8	
    3728:	49 52       	add.b	r2,	r9	
    372a:	3a 47       	mov	@r7+,	r10	
    372c:	28 31       	jn	$+594    	;abs 0x397e

            if(ChannelInput[PITCH_CH] < 3500){
    372e:	2c 31       	jn	$+602    	;abs 0x3988
    3730:	29 00 50 38 	mova	&0x03850,r9	
    3734:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
    3736:	4c 3a       	jl	$-870    	;abs 0x33d0
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    3738:	47 28       	jnc	$+144    	;abs 0x37c8
    373a:	31 2c       	jc	$+100    	;abs 0x379e
    373c:	31 29       	jnc	$+612    	;abs 0x39a0
    373e:	00 50       	rla	r0		
    3740:	38 52       	add	#8,	r8	;r2 As==11
    3742:	45 4e       	mov.b	r14,	r5	
    3744:	3a 47       	mov	@r7+,	r10	
    3746:	28 31       	jn	$+594    	;abs 0x3998
    3748:	2c 31       	jn	$+602    	;abs 0x39a2
    374a:	29 00 55 43 	mova	&0x04355,r9	
    374e:	41 30       	jn	$+132    	;abs 0x37d2
                analog_graph_clear(AnalogSelect);
    3750:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3752:	4c 30       	jn	$+154    	;abs 0x37ec
    3754:	3a 47       	mov	@r7+,	r10	
        case PROCESS_OPTION:
            break;
        case WAIT_CH7_BACK:
            break;
    }
}
    3756:	28 31       	jn	$+594    	;abs 0x39a8
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
    3758:	2c 31       	jn	$+602    	;abs 0x39b2
    375a:	29 00 55 43 	mova	&0x04355,r9	
    375e:	41 30       	jn	$+132    	;abs 0x37e2
    3760:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
                printf("WAIT ROLL RIGHT ");
    3762:	4c 31       	jn	$+666    	;abs 0x39fc
    3764:	3a 47       	mov	@r7+,	r10	
    3766:	28 31       	jn	$+594    	;abs 0x39b8
    3768:	2c 31       	jn	$+602    	;abs 0x39c2

                if(ChannelInput[PITCH_CH] < 3500){
    376a:	29 00 55 43 	mova	&0x04355,r9	
    376e:	41 30       	jn	$+132    	;abs 0x37f2
    3770:	42 52       	rla.b	r2		
    3772:	30 3a       	jl	$-926    	;abs 0x33d4
                    if(AnalogSelect > 0){
    3774:	47 28       	jnc	$+144    	;abs 0x3804
    3776:	31 2c       	jc	$+100    	;abs 0x37da
    3778:	31 29       	jnc	$+612    	;abs 0x39dc
    377a:	00 55       	add	r5,	r0	
                        AnalogSelect--;
    377c:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    377e:	30 42       	br	#8		;r2 As==11
    3780:	52 31       	jn	$+678    	;abs 0x3a26
    3782:	3a 47       	mov	@r7+,	r10	
                    MenuAnalog = DISPLAY;
                }
            break;
            
        case WAIT_ROLL_LEFT:
                lcd_goto(0,14);
    3784:	28 31       	jn	$+594    	;abs 0x39d6
    3786:	2c 31       	jn	$+602    	;abs 0x39e0
    3788:	29 00 55 43 	mova	&0x04355,r9	
    378c:	41 30       	jn	$+132    	;abs 0x3810
                printf("WAIT ROLL LEFT   ");
    378e:	4d 43       	clr.b	r13		
    3790:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    3794:	28 31       	jn	$+594    	;abs 0x39e6
        
                if(ChannelInput[PITCH_CH] > 2500){
    3796:	2c 31       	jn	$+602    	;abs 0x39f0
    3798:	29 00 55 43 	mova	&0x04355,r9	
    379c:	41 30       	jn	$+132    	;abs 0x3820
    379e:	53 54       	.word	0x5453;	????	Illegal as 2-op instr
                   if(AnalogSelect < 7){
    37a0:	41 54       	add.b	r4,	r1	
    37a2:	3a 47       	mov	@r7+,	r10	
    37a4:	28 31       	jn	$+594    	;abs 0x39f6
    37a6:	2c 31       	jn	$+602    	;abs 0x3a00
    37a8:	29 00 55 43 	mova	&0x04355,r9	
                        AnalogSelect++;
    37ac:	41 30       	jn	$+132    	;abs 0x3830
    37ae:	52 58 42 55 	add.b	21826(r8),r2	;0x5542(r8)
                    }
                    MenuAnalog = DISPLAY;
    37b2:	46 3a       	jl	$-882    	;abs 0x3440
    37b4:	47 28       	jnc	$+144    	;abs 0x3844
    37b6:	31 2c       	jc	$+100    	;abs 0x381a
    37b8:	31 29       	jnc	$+612    	;abs 0x3a1c
    37ba:	00 55       	add	r5,	r0	
    37bc:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    37be:	30 54       	add	@r4+,	r0	
    37c0:	58 42 55 46 	mov.b	&0x4655,r8	
    37c4:	3a 47       	mov	@r7+,	r10	
    37c6:	28 31       	jn	$+594    	;abs 0x3a18
    37c8:	2c 31       	jn	$+602    	;abs 0x3a22
    37ca:	29 00 55 43 	mova	&0x04355,r9	
    }
}

void refresh_analog_menu(void){
    int i;
    lcd_goto(1,12);
    37ce:	41 30       	jn	$+132    	;abs 0x3852
    37d0:	41 42       	mov.b	r2,	r1	
    37d2:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    37d4:	4c 3a       	jl	$-870    	;abs 0x346e
    37d6:	47 28       	jnc	$+144    	;abs 0x3866
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    37d8:	31 2c       	jc	$+100    	;abs 0x383c
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
    37da:	31 29       	jnc	$+612    	;abs 0x3a3e
    37dc:	00 55       	add	r5,	r0	
    37de:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    37e0:	30 49       	br	@r9+		
    37e2:	52 54 43 54 	add.b	21571(r4),r2	;0x5443(r4)
    37e6:	4c 3a       	jl	$-870    	;abs 0x3480
    37e8:	47 28       	jnc	$+144    	;abs 0x3878
    37ea:	31 2c       	jc	$+100    	;abs 0x384e
    37ec:	31 29       	jnc	$+612    	;abs 0x3a50
    37ee:	00 55       	add	r5,	r0	
            color_back = LIME;          // a cor do fundo muda para azul
    37f0:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    37f2:	30 49       	br	@r9+		
    37f4:	52 52 43 54 	add.b	&0x5443,r2	
            color_fore = BLACK;
    37f8:	4c 3a       	jl	$-870    	;abs 0x3492
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    37fa:	47 28       	jnc	$+144    	;abs 0x388a
    37fc:	31 2c       	jc	$+100    	;abs 0x3860
    37fe:	31 29       	jnc	$+612    	;abs 0x3a62
    3800:	00 55       	add	r5,	r0	
    3802:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
    3804:	30 43       	br	#-1		;r3 As==11
    3806:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    380a:	47 28       	jnc	$+144    	;abs 0x389a
                color_fore = BLACK;
            }
        }                               
        
        printf("%d",i);
    380c:	31 2c       	jc	$+100    	;abs 0x3870
    380e:	31 29       	jnc	$+612    	;abs 0x3a72
    3810:	00 55       	add	r5,	r0	
    3812:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    3814:	30 43       	br	#-1		;r3 As==11
        // ajusta as cores para o normal
        color_fore = LIME;
    3816:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    381a:	47 28       	jnc	$+144    	;abs 0x38aa
        color_back = BLACK;
    381c:	31 2c       	jc	$+100    	;abs 0x3880
    381e:	31 29       	jnc	$+612    	;abs 0x3a82
        printf(" ");
    3820:	00 55       	add	r5,	r0	
    3822:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    3824:	30 42       	br	#8		;r2 As==11
    3826:	52 30       	jn	$+166    	;abs 0x38cc
}

void refresh_analog_menu(void){
    int i;
    lcd_goto(1,12);
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    3828:	3a 47       	mov	@r7+,	r10	
    382a:	28 31       	jn	$+594    	;abs 0x3a7c
    382c:	2c 31       	jn	$+602    	;abs 0x3a86
    382e:	29 00 55 43 	mova	&0x04355,r9	
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
                color_fore = BLACK;
    3832:	42 30       	jn	$+134    	;abs 0x38b8
    3834:	42 52       	rla.b	r2		
    3836:	31 3a       	jl	$-924    	;abs 0x349a
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
        }
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
    3838:	47 28       	jnc	$+144    	;abs 0x38c8
    383a:	31 2c       	jc	$+100    	;abs 0x389e
    383c:	31 29       	jnc	$+612    	;abs 0x3aa0
    383e:	00 55       	add	r5,	r0	
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
            color_back = LIME;          // a cor do fundo muda para azul
            color_fore = BLACK;
        }
        else{                           // senao
            color_back = BLACK;         // a cor do fundo muda para preto
    3840:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    3842:	30 49       	br	@r9+		
            color_fore = LIME;
    3844:	32 43       	mov	#-1,	r2	;r3 As==11
    3846:	49 45       	mov.b	r5,	r9	
    3848:	3a 47       	mov	@r7+,	r10	
    384a:	28 31       	jn	$+594    	;abs 0x3a9c
        // ajusta as cores para o normal
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
    384c:	2c 31       	jn	$+602    	;abs 0x3aa6
    384e:	29 00 55 43 	mova	&0x04355,r9	
    3852:	42 30       	jn	$+134    	;abs 0x38d8
    3854:	53 54       	.word	0x5453;	????	Illegal as 2-op instr
}
    3856:	41 54       	add.b	r4,	r1	
    3858:	3a 47       	mov	@r7+,	r10	

interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    ControlCounter++;
    385a:	28 31       	jn	$+594    	;abs 0x3aac
    385c:	2c 31       	jn	$+602    	;abs 0x3ab6
    RCCounter++;
    385e:	29 00 55 43 	mova	&0x04355,r9	
    MenuCounter++;
    3862:	42 30       	jn	$+134    	;abs 0x38e8
    3864:	52 58 42 55 	add.b	21826(r8),r2	;0x5542(r8)
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    3868:	46 3a       	jl	$-882    	;abs 0x34f6
    386a:	47 28       	jnc	$+144    	;abs 0x38fa
    
    DCOCTL = 0x77;      
    386c:	31 2c       	jc	$+100    	;abs 0x38d0
    386e:	31 29       	jnc	$+612    	;abs 0x3ad2
    3870:	00 55       	add	r5,	r0	
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    BCSCTL1 = 0xcf;     
    3872:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    3874:	30 54       	add	@r4+,	r0	
    3876:	58 42 55 46 	mov.b	&0x4655,r8	
     * 
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
     * XCAP_0 -- ~1 pF
     */
    BCSCTL3 = 0xa0;
    387a:	3a 47       	mov	@r7+,	r10	
    387c:	28 31       	jn	$+594    	;abs 0x3ace
}
    387e:	2c 31       	jn	$+602    	;abs 0x3ad8

void p1_init(){
        /* Port 1 Output Register */
    P1OUT = PPM_P1MASK;
    3880:	29 00 55 43 	mova	&0x04355,r9	

    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;
    3884:	42 30       	jn	$+134    	;abs 0x390a
    3886:	49 32       	jn	$-876    	;abs 0x351a

    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida
    3888:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    388a:	41 3a       	jl	$-892    	;abs 0x350e

    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;
    388c:	47 28       	jnc	$+144    	;abs 0x391c
    388e:	39 2c       	jc	$+116    	;abs 0x3902

    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;
    3890:	38 29       	jnc	$+626    	;abs 0x3b02
    3892:	00 55       	add	r5,	r0	

}
    3894:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    3896:	30 49       	br	@r9+		
    3898:	32 43       	mov	#-1,	r2	;r3 As==11
    389a:	53 41       	.word	0x4153;	????	Illegal as 2-op instr

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;
    389c:	3a 47       	mov	@r7+,	r10	
    389e:	28 39       	jl	$+594    	;abs 0x3af0
    38a0:	2c 38       	jl	$+90     	;abs 0x38fa
     * 
     * TASSEL_2 -- SMCLK
     * ID_3 -- Divider - /8
     * MC_1 -- Up Mode
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
    38a2:	29 00 55 43 	mova	&0x04355,r9	
    38a6:	41 31       	jn	$+644    	;abs 0x3b2a
}
    38a8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    38aa:	4c 30       	jn	$+154    	;abs 0x3944
    38ac:	3a 47       	mov	@r7+,	r10	
    38ae:	28 31       	jn	$+594    	;abs 0x3b00
    38b0:	2c 31       	jn	$+602    	;abs 0x3b0a
    38b2:	29 00 55 43 	mova	&0x04355,r9	
    38b6:	41 31       	jn	$+644    	;abs 0x3b3a
    38b8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    38ba:	4c 31       	jn	$+666    	;abs 0x3b54
    38bc:	3a 47       	mov	@r7+,	r10	
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    38be:	28 31       	jn	$+594    	;abs 0x3b10
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    38c0:	2c 31       	jn	$+602    	;abs 0x3b1a
    38c2:	29 00 55 43 	mova	&0x04355,r9	
    38c6:	41 31       	jn	$+644    	;abs 0x3b4a
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    38c8:	42 52       	rla.b	r2		
    38ca:	30 3a       	jl	$-926    	;abs 0x352c
    38cc:	47 28       	jnc	$+144    	;abs 0x395c
    38ce:	31 2c       	jc	$+100    	;abs 0x3932
            if(!(P1IES & PPM_ch_counter)){ // low to high
    38d0:	31 29       	jnc	$+612    	;abs 0x3b34
    38d2:	00 55       	add	r5,	r0	
    38d4:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    38d6:	31 42       	mov	#8,	r1	;r2 As==11
    38d8:	52 31       	jn	$+678    	;abs 0x3b7e
                TimeUpEdge[channel_num] = PPM_aux;
    38da:	3a 47       	mov	@r7+,	r10	
    38dc:	28 31       	jn	$+594    	;abs 0x3b2e
    38de:	2c 31       	jn	$+602    	;abs 0x3b38
    38e0:	29 00 55 43 	mova	&0x04355,r9	
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    38e4:	41 31       	jn	$+644    	;abs 0x3b68
    38e6:	4d 43       	clr.b	r13		
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
    38e8:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    38ec:	28 31       	jn	$+594    	;abs 0x3b3e
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
    38ee:	2c 31       	jn	$+602    	;abs 0x3b48
    38f0:	29 00 55 43 	mova	&0x04355,r9	
    38f4:	41 31       	jn	$+644    	;abs 0x3b78
    38f6:	53 54       	.word	0x5453;	????	Illegal as 2-op instr
    38f8:	41 54       	add.b	r4,	r1	
    38fa:	3a 47       	mov	@r7+,	r10	
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    38fc:	28 31       	jn	$+594    	;abs 0x3b4e
    38fe:	2c 31       	jn	$+602    	;abs 0x3b58
    3900:	29 00 55 43 	mova	&0x04355,r9	
    3904:	41 31       	jn	$+644    	;abs 0x3b88
    3906:	52 58 42 55 	add.b	21826(r8),r2	;0x5542(r8)
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
    390a:	46 3a       	jl	$-882    	;abs 0x3598
    390c:	47 28       	jnc	$+144    	;abs 0x399c
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    390e:	31 2c       	jc	$+100    	;abs 0x3972
    3910:	31 29       	jnc	$+612    	;abs 0x3b74
    3912:	00 55       	add	r5,	r0	
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    3914:	43 41       	.word	0x4143;	????	Illegal as 2-op instr

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    3916:	31 54       	add	@r4+,	r1	
    3918:	58 42 55 46 	mov.b	&0x4655,r8	
    391c:	3a 47       	mov	@r7+,	r10	
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}
    391e:	28 31       	jn	$+594    	;abs 0x3b70
    3920:	2c 31       	jn	$+602    	;abs 0x3b7a
    3922:	29 00 55 43 	mova	&0x04355,r9	
    3926:	41 31       	jn	$+644    	;abs 0x3baa
    3928:	41 42       	mov.b	r2,	r1	
    392a:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    392c:	4c 3a       	jl	$-870    	;abs 0x35c6
    392e:	47 28       	jnc	$+144    	;abs 0x39be
    3930:	31 2c       	jc	$+100    	;abs 0x3994
    3932:	31 29       	jnc	$+612    	;abs 0x3b96
    3934:	00 55       	add	r5,	r0	
    3936:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    3938:	31 49       	mov	@r9+,	r1	
    393a:	52 54 43 54 	add.b	21571(r4),r2	;0x5443(r4)
    393e:	4c 3a       	jl	$-870    	;abs 0x35d8
    3940:	47 28       	jnc	$+144    	;abs 0x39d0
    3942:	31 2c       	jc	$+100    	;abs 0x39a6
    3944:	31 29       	jnc	$+612    	;abs 0x3ba8
    3946:	00 55       	add	r5,	r0	
    3948:	43 41       	.word	0x4143;	????	Illegal as 2-op instr
    394a:	31 49       	mov	@r9+,	r1	
    394c:	52 52 43 54 	add.b	&0x5443,r2	
    3950:	4c 3a       	jl	$-870    	;abs 0x35ea
    3952:	47 28       	jnc	$+144    	;abs 0x39e2
    3954:	31 2c       	jc	$+100    	;abs 0x39b8
    3956:	31 29       	jnc	$+612    	;abs 0x3bba
    3958:	00 55       	add	r5,	r0	
    395a:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    395c:	31 43       	mov	#-1,	r1	;r3 As==11

void calibrate_radio(void){
    395e:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    3962:	47 28       	jnc	$+144    	;abs 0x39f2
    3964:	31 2c       	jc	$+100    	;abs 0x39c8
    3966:	31 29       	jnc	$+612    	;abs 0x3bca
    3968:	00 55       	add	r5,	r0	
    396a:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    396c:	31 43       	mov	#-1,	r1	;r3 As==11
    396e:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    3972:	47 28       	jnc	$+144    	;abs 0x3a02
    3974:	31 2c       	jc	$+100    	;abs 0x39d8
    3976:	31 29       	jnc	$+612    	;abs 0x3bda
    3978:	00 55       	add	r5,	r0	
        return;
    }

    int i = 0, k;    
    397a:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    397c:	31 42       	mov	#8,	r1	;r2 As==11
    397e:	52 30       	jn	$+166    	;abs 0x3a24
    3980:	3a 47       	mov	@r7+,	r10	
    3982:	28 31       	jn	$+594    	;abs 0x3bd4
    3984:	2c 31       	jn	$+602    	;abs 0x3bde
    3986:	29 00 55 43 	mova	&0x04355,r9	
    398a:	42 31       	jn	$+646    	;abs 0x3c10
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    398c:	42 52       	rla.b	r2		
    398e:	31 3a       	jl	$-924    	;abs 0x35f2
    3990:	47 28       	jnc	$+144    	;abs 0x3a20
    3992:	31 2c       	jc	$+100    	;abs 0x39f6
    3994:	31 29       	jnc	$+612    	;abs 0x3bf8
    3996:	00 55       	add	r5,	r0	
    3998:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    399a:	31 49       	mov	@r9+,	r1	
    399c:	32 43       	mov	#-1,	r2	;r3 As==11
    399e:	49 45       	mov.b	r5,	r9	
    fourbytes ValorAux;        
    
    lcd_goto(2,5);
    39a0:	3a 47       	mov	@r7+,	r10	
    39a2:	28 31       	jn	$+594    	;abs 0x3bf4
    39a4:	2c 31       	jn	$+602    	;abs 0x3bfe
    39a6:	29 00 55 43 	mova	&0x04355,r9	
    color_fore = RED;
    39aa:	42 31       	jn	$+646    	;abs 0x3c30
    39ac:	53 54       	.word	0x5453;	????	Illegal as 2-op instr
    39ae:	41 54       	add.b	r4,	r1	
    printf("MOVE STICKS\nALL DIRECTIONS");
    39b0:	3a 47       	mov	@r7+,	r10	
    39b2:	28 31       	jn	$+594    	;abs 0x3c04
    39b4:	2c 31       	jn	$+602    	;abs 0x3c0e
    39b6:	29 00 55 43 	mova	&0x04355,r9	
    color_fore = LIME;
    39ba:	42 31       	jn	$+646    	;abs 0x3c40
    39bc:	52 58 42 55 	add.b	21826(r8),r2	;0x5542(r8)
    delayms(3000);
    39c0:	46 3a       	jl	$-882    	;abs 0x364e
    39c2:	47 28       	jnc	$+144    	;abs 0x3a52
    39c4:	31 2c       	jc	$+100    	;abs 0x3a28
    lcd_clear(BLACK);
    39c6:	31 29       	jnc	$+612    	;abs 0x3c2a
    39c8:	00 55       	add	r5,	r0	
    39ca:	43 42       	.word	0x4243;	????	Illegal as 2-op instr

    for(i = 0; i < 8; i++){ // zera offset e slope
    39cc:	31 54       	add	@r4+,	r1	
    39ce:	58 42 55 46 	mov.b	&0x4655,r8	
    39d2:	3a 47       	mov	@r7+,	r10	
    39d4:	28 31       	jn	$+594    	;abs 0x3c26
        PPMOffset[i] = 0;
    39d6:	2c 31       	jn	$+602    	;abs 0x3c30
    39d8:	29 00 55 43 	mova	&0x04355,r9	
    39dc:	42 31       	jn	$+646    	;abs 0x3c62
    39de:	49 32       	jn	$-876    	;abs 0x3672
    39e0:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    39e2:	41 3a       	jl	$-892    	;abs 0x3666
    39e4:	47 28       	jnc	$+144    	;abs 0x3a74
    39e6:	39 2c       	jc	$+116    	;abs 0x3a5a
        PPMSlope[i] = 1;
    39e8:	38 29       	jnc	$+626    	;abs 0x3c5a
    39ea:	00 55       	add	r5,	r0	
    39ec:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    39ee:	31 49       	mov	@r9+,	r1	
    39f0:	32 43       	mov	#-1,	r2	;r3 As==11
    39f2:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    for(i = 0; i < 8; i++){ // zera offset e slope
    39f4:	3a 47       	mov	@r7+,	r10	
    39f6:	28 39       	jl	$+594    	;abs 0x3c48
    39f8:	2c 38       	jl	$+90     	;abs 0x3a52
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    39fa:	29 00 55 43 	mova	&0x04355,r9	
        PPMMin[i] = PPMValue[i];
    39fe:	31 49       	mov	@r9+,	r1	
    3a00:	45 3a       	jl	$-884    	;abs 0x368c
    3a02:	47 28       	jnc	$+144    	;abs 0x3a92
    3a04:	31 2c       	jc	$+100    	;abs 0x3a68
    3a06:	31 29       	jnc	$+612    	;abs 0x3c6a
    3a08:	00 55       	add	r5,	r0	
    3a0a:	43 31       	jn	$+648    	;abs 0x3c92
    3a0c:	49 46       	mov.b	r6,	r9	
    3a0e:	47 3a       	jl	$-880    	;abs 0x369e
    3a10:	47 28       	jnc	$+144    	;abs 0x3aa0
    3a12:	31 2c       	jc	$+100    	;abs 0x3a76
    3a14:	31 29       	jnc	$+612    	;abs 0x3c78
    3a16:	00 54       	add	r4,	r0	
    3a18:	41 30       	jn	$+132    	;abs 0x3a9c
    3a1a:	49 56       	add.b	r6,	r9	
    3a1c:	3a 47       	mov	@r7+,	r10	
    3a1e:	28 39       	jl	$+594    	;abs 0x3c70
    3a20:	2c 38       	jl	$+90     	;abs 0x3a7a
    3a22:	29 00 54 41 	mova	&0x04154,r9	
        PPMMax[i] = PPMMin[i];
    3a26:	30 43       	br	#-1		;r3 As==11
    3a28:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    3a2c:	28 39       	jl	$+594    	;abs 0x3c7e
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    3a2e:	2c 38       	jl	$+90     	;abs 0x3a88
    3a30:	29 00 54 41 	mova	&0x04154,r9	
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    3a34:	30 52       	add	#8,	r0	;r2 As==11
    3a36:	3a 47       	mov	@r7+,	r10	
        draw_rc_inputs(1);
    3a38:	28 39       	jl	$+594    	;abs 0x3c8a
    3a3a:	2c 38       	jl	$+90     	;abs 0x3a94
    3a3c:	29 00 54 41 	mova	&0x04154,r9	
        lcd_goto(0, 14);
    3a40:	30 43       	br	#-1		;r3 As==11
    3a42:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3a44:	4c 30       	jn	$+154    	;abs 0x3ade
    3a46:	3a 47       	mov	@r7+,	r10	
        printf("%d ", k);
    3a48:	28 39       	jl	$+594    	;abs 0x3c9a
    3a4a:	2c 38       	jl	$+90     	;abs 0x3aa4
    3a4c:	29 00 54 41 	mova	&0x04154,r9	
    3a50:	30 43       	br	#-1		;r3 As==11
        delayms(1);
    3a52:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3a54:	4c 31       	jn	$+666    	;abs 0x3cee
    3a56:	3a 47       	mov	@r7+,	r10	
        for(i = 0; i < 8; i++){ // pega max min
    3a58:	28 39       	jl	$+594    	;abs 0x3caa
    3a5a:	2c 38       	jl	$+90     	;abs 0x3ab4
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    3a5c:	29 00 54 41 	mova	&0x04154,r9	
    3a60:	30 43       	br	#-1		;r3 As==11
    3a62:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    3a64:	30 3a       	jl	$-926    	;abs 0x36c6
    3a66:	47 28       	jnc	$+144    	;abs 0x3af6
    3a68:	39 2c       	jc	$+116    	;abs 0x3adc
    3a6a:	38 29       	jnc	$+626    	;abs 0x3cdc
    3a6c:	00 54       	add	r4,	r0	
    3a6e:	41 30       	jn	$+132    	;abs 0x3af2
    3a70:	43 43       	clr.b	#0		;r3 As==00
    3a72:	52 31       	jn	$+678    	;abs 0x3d18
    3a74:	3a 47       	mov	@r7+,	r10	
    3a76:	28 39       	jl	$+594    	;abs 0x3cc8
    3a78:	2c 38       	jl	$+90     	;abs 0x3ad2
    3a7a:	29 00 54 41 	mova	&0x04154,r9	
    3a7e:	30 43       	br	#-1		;r3 As==11
    3a80:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3a82:	4c 32       	jn	$-870    	;abs 0x371c
    3a84:	3a 47       	mov	@r7+,	r10	
    3a86:	28 39       	jl	$+594    	;abs 0x3cd8
    3a88:	2c 38       	jl	$+90     	;abs 0x3ae2
    3a8a:	29 00 54 41 	mova	&0x04154,r9	
    3a8e:	30 43       	br	#-1		;r3 As==11
    3a90:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    3a92:	32 3a       	jl	$-922    	;abs 0x36f8
    3a94:	47 28       	jnc	$+144    	;abs 0x3b24
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
    3a96:	39 2c       	jc	$+116    	;abs 0x3b0a
    3a98:	38 29       	jnc	$+626    	;abs 0x3d0a
    3a9a:	00 74       	subc	r4,	r0	
    3a9c:	69 6d       	addc.b	@r13,	r9	
    3a9e:	65 72       	subc.b	#4,	r5	;r2 As==10
    3aa0:	61 3a       	jl	$-828    	;abs 0x3764
    3aa2:	47 28       	jnc	$+144    	;abs 0x3b32
    3aa4:	39 2c       	jc	$+116    	;abs 0x3b18
    3aa6:	35 29       	jnc	$+620    	;abs 0x3d12
    3aa8:	00 54       	add	r4,	r0	
    3aaa:	42 49       	mov.b	r9,	r2	
    3aac:	56 3a       	jl	$-850    	;abs 0x375a
    3aae:	47 28       	jnc	$+144    	;abs 0x3b3e
    3ab0:	39 2c       	jc	$+116    	;abs 0x3b24
    3ab2:	38 29       	jnc	$+626    	;abs 0x3d24
    3ab4:	00 54       	add	r4,	r0	
    3ab6:	42 43       	clr.b	r2		
    3ab8:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    3abc:	28 39       	jl	$+594    	;abs 0x3d0e
    3abe:	2c 38       	jl	$+90     	;abs 0x3b18
    3ac0:	29 00 54 42 	mova	&0x04254,r9	
    3ac4:	52 3a       	jl	$-858    	;abs 0x376a
    3ac6:	47 28       	jnc	$+144    	;abs 0x3b56
    3ac8:	39 2c       	jc	$+116    	;abs 0x3b3c
    3aca:	38 29       	jnc	$+626    	;abs 0x3d3c
                PPMMin[i] = PPMValue[i];
    3acc:	00 54       	add	r4,	r0	
    3ace:	42 43       	clr.b	r2		
    3ad0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3ad2:	4c 30       	jn	$+154    	;abs 0x3b6c
    3ad4:	3a 47       	mov	@r7+,	r10	
    3ad6:	28 39       	jl	$+594    	;abs 0x3d28
    3ad8:	2c 38       	jl	$+90     	;abs 0x3b32
    3ada:	29 00 54 42 	mova	&0x04254,r9	
    3ade:	43 43       	clr.b	#0		;r3 As==00
    3ae0:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    3ae4:	47 28       	jnc	$+144    	;abs 0x3b74
    3ae6:	39 2c       	jc	$+116    	;abs 0x3b5a
    3ae8:	38 29       	jnc	$+626    	;abs 0x3d5a
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
    3aea:	00 54       	add	r4,	r0	
    3aec:	42 43       	clr.b	r2		
    3aee:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    }
    
    for(k = 120; k > 0; k--){
    3af0:	4c 32       	jn	$-870    	;abs 0x378a
    3af2:	3a 47       	mov	@r7+,	r10	
    3af4:	28 39       	jl	$+594    	;abs 0x3d46
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    lcd_clear(BLACK);
    3af6:	2c 38       	jl	$+90     	;abs 0x3b50
    3af8:	29 00 54 42 	mova	&0x04254,r9	
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
    3afc:	43 43       	clr.b	#0		;r3 As==00
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
    3afe:	52 30       	jn	$+166    	;abs 0x3ba4
    3b00:	3a 47       	mov	@r7+,	r10	
    3b02:	28 39       	jl	$+594    	;abs 0x3d54
    3b04:	2c 38       	jl	$+90     	;abs 0x3b5e
    3b06:	29 00 54 42 	mova	&0x04254,r9	
    3b0a:	43 43       	clr.b	#0		;r3 As==00
    3b0c:	52 31       	jn	$+678    	;abs 0x3db2
    3b0e:	3a 47       	mov	@r7+,	r10	
    3b10:	28 39       	jl	$+594    	;abs 0x3d62
    3b12:	2c 38       	jl	$+90     	;abs 0x3b6c
    3b14:	29 00 54 42 	mova	&0x04254,r9	
    3b18:	43 43       	clr.b	#0		;r3 As==00
    3b1a:	52 32       	jn	$-858    	;abs 0x37c0
    3b1c:	3a 47       	mov	@r7+,	r10	
    3b1e:	28 39       	jl	$+594    	;abs 0x3d70
    3b20:	2c 38       	jl	$+90     	;abs 0x3b7a
    3b22:	29 00 54 42 	mova	&0x04254,r9	
    3b26:	43 43       	clr.b	#0		;r3 As==00
    3b28:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    3b2c:	47 28       	jnc	$+144    	;abs 0x3bbc
    3b2e:	39 2c       	jc	$+116    	;abs 0x3ba2
    3b30:	38 29       	jnc	$+626    	;abs 0x3da2
    3b32:	00 54       	add	r4,	r0	
    3b34:	42 43       	clr.b	r2		
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    3b36:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3b38:	4c 34       	jge	$+154    	;abs 0x3bd2
    3b3a:	3a 47       	mov	@r7+,	r10	
    3b3c:	28 39       	jl	$+594    	;abs 0x3d8e
    3b3e:	2c 38       	jl	$+90     	;abs 0x3b98
    3b40:	29 00 54 42 	mova	&0x04254,r9	
    3b44:	43 43       	clr.b	#0		;r3 As==00
    3b46:	54 4c 35 3a 	mov.b	14901(r12),r4	;0x3a35(r12)
    3b4a:	47 28       	jnc	$+144    	;abs 0x3bda
    3b4c:	39 2c       	jc	$+116    	;abs 0x3bc0
    3b4e:	38 29       	jnc	$+626    	;abs 0x3dc0
    3b50:	00 54       	add	r4,	r0	
    3b52:	42 43       	clr.b	r2		
        }
    }
    
    lcd_clear(BLACK);
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
    3b54:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3b56:	4c 36       	jge	$-870    	;abs 0x37f0
    3b58:	3a 47       	mov	@r7+,	r10	
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
    3b5a:	28 39       	jl	$+594    	;abs 0x3dac
    3b5c:	2c 38       	jl	$+90     	;abs 0x3bb6
    3b5e:	29 00 54 42 	mova	&0x04254,r9	
        i2c_change_address(EEPROM_I2C_ADDR);
    3b62:	43 43       	clr.b	#0		;r3 As==00
    3b64:	52 33       	jn	$-346    	;abs 0x3a0a
    3b66:	3a 47       	mov	@r7+,	r10	
        
        // grava yaw slope 
        ValorAux.f = PPMSlope[YAW_CH];
    3b68:	28 39       	jl	$+594    	;abs 0x3dba
    3b6a:	2c 38       	jl	$+90     	;abs 0x3bc4
    3b6c:	29 00 54 42 	mova	&0x04254,r9	
    3b70:	43 43       	clr.b	#0		;r3 As==00
    3b72:	52 34       	jge	$+166    	;abs 0x3c18
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    3b74:	3a 47       	mov	@r7+,	r10	
    3b76:	28 39       	jl	$+594    	;abs 0x3dc8
    3b78:	2c 38       	jl	$+90     	;abs 0x3bd2
    3b7a:	29 00 54 42 	mova	&0x04254,r9	
    3b7e:	43 43       	clr.b	#0		;r3 As==00
    3b80:	52 35       	jge	$+678    	;abs 0x3e26
    3b82:	3a 47       	mov	@r7+,	r10	
        
        delayms(100);
    3b84:	28 39       	jl	$+594    	;abs 0x3dd6
    3b86:	2c 38       	jl	$+90     	;abs 0x3be0
    3b88:	29 00 54 42 	mova	&0x04254,r9	
        
        // grava throttle slope 
        ValorAux.f = PPMSlope[THROTTLE_CH];
    3b8c:	43 43       	clr.b	#0		;r3 As==00
    3b8e:	52 36       	jge	$-858    	;abs 0x3834
    3b90:	3a 47       	mov	@r7+,	r10	
    3b92:	28 39       	jl	$+594    	;abs 0x3de4
    3b94:	2c 38       	jl	$+90     	;abs 0x3bee
    3b96:	29 00 74 69 	mova	&0x06974,r9	
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    3b9a:	6d 65       	addc.b	@r5,	r13	
    3b9c:	72 62       	addc.b	#8,	r2	;r2 As==11
    3b9e:	3a 47       	mov	@r7+,	r10	
    3ba0:	28 31       	jn	$+594    	;abs 0x3df2
    3ba2:	30 2c       	jc	$+98     	;abs 0x3c04
    3ba4:	35 29       	jnc	$+620    	;abs 0x3e10
    3ba6:	00 44       	br	r4		
        
        delayms(100);
    3ba8:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    3baa:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3bac:	4c 3a       	jl	$-870    	;abs 0x3846
    3bae:	47 28       	jnc	$+144    	;abs 0x3c3e
        
        // grava pitch slope 
        ValorAux.f = PPMSlope[PITCH_CH];
    3bb0:	31 2c       	jc	$+100    	;abs 0x3c14
    3bb2:	31 29       	jnc	$+612    	;abs 0x3e16
    3bb4:	00 42       	br	r2		
    3bb6:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    3bb8:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3bba:	4c 31       	jn	$+666    	;abs 0x3e54
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    3bbc:	3a 47       	mov	@r7+,	r10	
    3bbe:	28 31       	jn	$+594    	;abs 0x3e10
    3bc0:	2c 31       	jn	$+602    	;abs 0x3e1a
    3bc2:	29 00 42 43 	mova	&0x04342,r9	
    3bc6:	53 43       	.word	0x4353;	????	Illegal as 2-op instr
    3bc8:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
        
        delayms(100);
    3bcc:	47 28       	jnc	$+144    	;abs 0x3c5c
    3bce:	31 2c       	jc	$+100    	;abs 0x3c32
    3bd0:	31 29       	jnc	$+612    	;abs 0x3e34
    3bd2:	00 42       	br	r2		
        
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
    3bd4:	43 53       	.word	0x5343;	????	Illegal as emulation instr
    3bd6:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3bd8:	4c 33       	jn	$-358    	;abs 0x3a72
    3bda:	3a 47       	mov	@r7+,	r10	
    3bdc:	28 31       	jn	$+594    	;abs 0x3e2e
    3bde:	2c 31       	jn	$+602    	;abs 0x3e38
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    3be0:	29 00 46 43 	mova	&0x04346,r9	
    3be4:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    3be8:	47 28       	jnc	$+144    	;abs 0x3c78
    3bea:	39 2c       	jc	$+116    	;abs 0x3c5e
    3bec:	38 29       	jnc	$+626    	;abs 0x3e5e
    3bee:	00 46       	br	r6		
        
        delayms(100);
    3bf0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3bf2:	4c 32       	jn	$-870    	;abs 0x388c
    3bf4:	3a 47       	mov	@r7+,	r10	
    3bf6:	28 39       	jl	$+594    	;abs 0x3e48
        
        // grava ch5 slope 
        ValorAux.f = PPMSlope[CH5_CH];
    3bf8:	2c 38       	jl	$+90     	;abs 0x3c52
    3bfa:	29 00 46 43 	mova	&0x04346,r9	
    3bfe:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    3c02:	47 28       	jnc	$+144    	;abs 0x3c92
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    3c04:	39 2c       	jc	$+116    	;abs 0x3c78
    3c06:	38 29       	jnc	$+626    	;abs 0x3e78
    3c08:	00 43       	clr	r0		
    3c0a:	41 43       	clr.b	r1		
    3c0c:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    3c10:	47 28       	jnc	$+144    	;abs 0x3ca0
    3c12:	31 2c       	jc	$+100    	;abs 0x3c76
        
        delayms(100);
    3c14:	31 29       	jnc	$+612    	;abs 0x3e78
    3c16:	00 43       	clr	r0		
    3c18:	41 43       	clr.b	r1		
    3c1a:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    3c1e:	47 28       	jnc	$+144    	;abs 0x3cae
    3c20:	31 2c       	jc	$+100    	;abs 0x3c84
    3c22:	31 29       	jnc	$+612    	;abs 0x3e86
    3c24:	00 43       	clr	r0		
    3c26:	41 50       	add.b	r0,	r1	
        i2c_write16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    3c28:	44 3a       	jl	$-886    	;abs 0x38b2
    3c2a:	47 28       	jnc	$+144    	;abs 0x3cba
    3c2c:	31 2c       	jc	$+100    	;abs 0x3c90
    3c2e:	31 29       	jnc	$+612    	;abs 0x3e92
    3c30:	00 41       	br	r1		
    3c32:	44 43       	clr.b	r4		
    3c34:	31 32       	jn	$-924    	;abs 0x3898
    3c36:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
        
        delayms(100);
    3c38:	4c 30       	jn	$+154    	;abs 0x3cd2
    3c3a:	3a 47       	mov	@r7+,	r10	
    3c3c:	28 39       	jl	$+594    	;abs 0x3e8e
    3c3e:	2c 38       	jl	$+90     	;abs 0x3c98
        
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
    3c40:	29 00 41 44 	mova	&0x04441,r9	
    3c44:	43 31       	jn	$+648    	;abs 0x3ecc
    3c46:	32 43       	mov	#-1,	r2	;r3 As==11
    3c48:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    3c4c:	47 28       	jnc	$+144    	;abs 0x3cdc
    3c4e:	39 2c       	jc	$+116    	;abs 0x3cc2
    3c50:	38 29       	jnc	$+626    	;abs 0x3ec2
    3c52:	00 41       	br	r1		
    3c54:	44 43       	clr.b	r4		
    3c56:	31 32       	jn	$-924    	;abs 0x38ba
    3c58:	49 46       	mov.b	r6,	r9	
    3c5a:	47 3a       	jl	$-880    	;abs 0x38ea
        
        delayms(100);
    3c5c:	47 28       	jnc	$+144    	;abs 0x3cec
    3c5e:	39 2c       	jc	$+116    	;abs 0x3cd2
    3c60:	38 29       	jnc	$+626    	;abs 0x3ed2
    3c62:	00 41       	br	r1		
        
        // grava yaw offset 
        ValorAux.f = PPMOffset[YAW_CH];
    3c64:	44 43       	clr.b	r4		
    3c66:	31 32       	jn	$-924    	;abs 0x38ca
    3c68:	49 45       	mov.b	r5,	r9	
    3c6a:	3a 47       	mov	@r7+,	r10	
    3c6c:	28 39       	jl	$+594    	;abs 0x3ebe
    3c6e:	2c 38       	jl	$+90     	;abs 0x3cc8
        i2c_write16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3c70:	29 00 41 44 	mova	&0x04441,r9	
    3c74:	43 31       	jn	$+648    	;abs 0x3efc
    3c76:	32 49       	mov	@r9+,	r2	
    3c78:	56 3a       	jl	$-850    	;abs 0x3926
    3c7a:	47 28       	jnc	$+144    	;abs 0x3d0a
    3c7c:	39 2c       	jc	$+116    	;abs 0x3cf0
    3c7e:	38 29       	jnc	$+626    	;abs 0x3ef0
        
        delayms(100);
    3c80:	00 61       	addc	r1,	r0	
    3c82:	64 63       	addc.b	#2,	r4	;r3 As==10
    3c84:	31 32       	jn	$-924    	;abs 0x38e8
    3c86:	3a 47       	mov	@r7+,	r10	
        
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
    3c88:	28 31       	jn	$+594    	;abs 0x3eda
    3c8a:	34 2c       	jc	$+106    	;abs 0x3cf4
    3c8c:	37 29       	jnc	$+624    	;abs 0x3efc
    3c8e:	00 41       	br	r1		
    3c90:	44 43       	clr.b	r4		
    3c92:	31 32       	jn	$-924    	;abs 0x38f6
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    3c94:	4d 45       	mov.b	r5,	r13	
    3c96:	4d 30       	jn	$+156    	;abs 0x3d32
    3c98:	3a 47       	mov	@r7+,	r10	
    3c9a:	28 39       	jl	$+594    	;abs 0x3eec
    3c9c:	2c 38       	jl	$+90     	;abs 0x3cf6
    3c9e:	29 00 41 44 	mova	&0x04441,r9	
    3ca2:	43 31       	jn	$+648    	;abs 0x3f2a
        
        delayms(100);
    3ca4:	32 4d       	mov	@r13+,	r2	
    3ca6:	45 4d       	mov.b	r13,	r5	
    3ca8:	31 3a       	jl	$-924    	;abs 0x390c
    3caa:	47 28       	jnc	$+144    	;abs 0x3d3a
        
        // grava pitch offset 
        ValorAux.f = PPMOffset[PITCH_CH];
    3cac:	39 2c       	jc	$+116    	;abs 0x3d20
    3cae:	38 29       	jnc	$+626    	;abs 0x3f20
    3cb0:	00 41       	br	r1		
    3cb2:	44 43       	clr.b	r4		
    3cb4:	31 32       	jn	$-924    	;abs 0x3918
    3cb6:	4d 45       	mov.b	r5,	r13	
        i2c_write16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    3cb8:	4d 32       	jn	$-868    	;abs 0x3954
    3cba:	3a 47       	mov	@r7+,	r10	
    3cbc:	28 39       	jl	$+594    	;abs 0x3f0e
    3cbe:	2c 38       	jl	$+90     	;abs 0x3d18
    3cc0:	29 00 41 44 	mova	&0x04441,r9	
    3cc4:	43 31       	jn	$+648    	;abs 0x3f4c
    3cc6:	32 4d       	mov	@r13+,	r2	
        
        delayms(100);
    3cc8:	45 4d       	mov.b	r13,	r5	
    3cca:	33 3a       	jl	$-920    	;abs 0x3932
    3ccc:	47 28       	jnc	$+144    	;abs 0x3d5c
    3cce:	39 2c       	jc	$+116    	;abs 0x3d42
        
        // grava roll offset 
        ValorAux.f = PPMOffset[ROLL_CH];
    3cd0:	38 29       	jnc	$+626    	;abs 0x3f42
    3cd2:	00 41       	br	r1		
    3cd4:	44 43       	clr.b	r4		
    3cd6:	31 32       	jn	$-924    	;abs 0x393a
    3cd8:	4d 45       	mov.b	r5,	r13	
    3cda:	4d 34       	jge	$+156    	;abs 0x3d76
        i2c_write16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    3cdc:	3a 47       	mov	@r7+,	r10	
    3cde:	28 39       	jl	$+594    	;abs 0x3f30
    3ce0:	2c 38       	jl	$+90     	;abs 0x3d3a
    3ce2:	29 00 41 44 	mova	&0x04441,r9	
    3ce6:	43 31       	jn	$+648    	;abs 0x3f6e
    3ce8:	32 4d       	mov	@r13+,	r2	
    3cea:	45 4d       	mov.b	r13,	r5	
        
        delayms(100);
    3cec:	35 3a       	jl	$-916    	;abs 0x3958
    3cee:	47 28       	jnc	$+144    	;abs 0x3d7e
    3cf0:	39 2c       	jc	$+116    	;abs 0x3d64
    3cf2:	38 29       	jnc	$+626    	;abs 0x3f64
        
        // grava ch5 offset 
        ValorAux.f = PPMOffset[CH5_CH];
    3cf4:	00 41       	br	r1		
    3cf6:	44 43       	clr.b	r4		
    3cf8:	31 32       	jn	$-924    	;abs 0x395c
    3cfa:	4d 45       	mov.b	r5,	r13	
    3cfc:	4d 36       	jge	$-868    	;abs 0x3998
    3cfe:	3a 47       	mov	@r7+,	r10	
        i2c_write16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    3d00:	28 39       	jl	$+594    	;abs 0x3f52
    3d02:	2c 38       	jl	$+90     	;abs 0x3d5c
    3d04:	29 00 41 44 	mova	&0x04441,r9	
    3d08:	43 31       	jn	$+648    	;abs 0x3f90
    3d0a:	32 4d       	mov	@r13+,	r2	
    3d0c:	45 4d       	mov.b	r13,	r5	
    3d0e:	37 3a       	jl	$-912    	;abs 0x397e
        
        delayms(100);
    3d10:	47 28       	jnc	$+144    	;abs 0x3da0
    3d12:	39 2c       	jc	$+116    	;abs 0x3d86
    3d14:	38 29       	jnc	$+626    	;abs 0x3f86
    3d16:	00 41       	br	r1		
        
        // grava ch6 offset 
        ValorAux.f = PPMOffset[CH6_CH];
    3d18:	44 43       	clr.b	r4		
    3d1a:	31 32       	jn	$-924    	;abs 0x397e
    3d1c:	4d 45       	mov.b	r5,	r13	
    3d1e:	4d 38       	jl	$+156    	;abs 0x3dba
    3d20:	3a 47       	mov	@r7+,	r10	
    3d22:	28 39       	jl	$+594    	;abs 0x3f74
        i2c_write16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    3d24:	2c 38       	jl	$+90     	;abs 0x3d7e
    3d26:	29 00 41 44 	mova	&0x04441,r9	
    3d2a:	43 31       	jn	$+648    	;abs 0x3fb2
    3d2c:	32 4d       	mov	@r13+,	r2	
    3d2e:	45 4d       	mov.b	r13,	r5	
    3d30:	39 3a       	jl	$-908    	;abs 0x39a4
    3d32:	47 28       	jnc	$+144    	;abs 0x3dc2
        
        delayms(100);
    3d34:	39 2c       	jc	$+116    	;abs 0x3da8
    3d36:	38 29       	jnc	$+626    	;abs 0x3fa8
    3d38:	00 41       	br	r1		
    3d3a:	44 43       	clr.b	r4		
        
        // grava ch7 offset 
        ValorAux.f = PPMOffset[CH7_CH];
    3d3c:	31 32       	jn	$-924    	;abs 0x39a0
    3d3e:	4d 45       	mov.b	r5,	r13	
    3d40:	4d 31       	jn	$+668    	;abs 0x3fdc
    3d42:	30 3a       	jl	$-926    	;abs 0x39a4
    3d44:	47 28       	jnc	$+144    	;abs 0x3dd4
    3d46:	39 2c       	jc	$+116    	;abs 0x3dba
        i2c_write16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    3d48:	38 29       	jnc	$+626    	;abs 0x3fba
    3d4a:	00 41       	br	r1		
    3d4c:	44 43       	clr.b	r4		
    3d4e:	31 32       	jn	$-924    	;abs 0x39b2
    3d50:	4d 45       	mov.b	r5,	r13	
    3d52:	4d 31       	jn	$+668    	;abs 0x3fee
    3d54:	31 3a       	jl	$-924    	;abs 0x39b8
    3d56:	47 28       	jnc	$+144    	;abs 0x3de6
        
        delayms(100);
    3d58:	39 2c       	jc	$+116    	;abs 0x3dcc
    3d5a:	38 29       	jnc	$+626    	;abs 0x3fcc
    3d5c:	00 41       	br	r1		
    3d5e:	44 43       	clr.b	r4		
        
        lcd_goto(2,2);
    3d60:	31 32       	jn	$-924    	;abs 0x39c4
    3d62:	4d 45       	mov.b	r5,	r13	
    3d64:	4d 31       	jn	$+668    	;abs 0x4000
    3d66:	32 3a       	jl	$-922    	;abs 0x39cc
        printf("Params saved.");
    3d68:	47 28       	jnc	$+144    	;abs 0x3df8
    3d6a:	39 2c       	jc	$+116    	;abs 0x3dde
    3d6c:	38 29       	jnc	$+626    	;abs 0x3fde
    3d6e:	00 41       	br	r1		
        delayms(2000);
    3d70:	44 43       	clr.b	r4		
    3d72:	31 32       	jn	$-924    	;abs 0x39d6
    3d74:	4d 45       	mov.b	r5,	r13	
    3d76:	4d 31       	jn	$+668    	;abs 0x4012
    3d78:	33 3a       	jl	$-920    	;abs 0x39e0
    3d7a:	47 28       	jnc	$+144    	;abs 0x3e0a
    3d7c:	39 2c       	jc	$+116    	;abs 0x3df0
    3d7e:	38 29       	jnc	$+626    	;abs 0x3ff0
    3d80:	00 41       	br	r1		
    3d82:	44 43       	clr.b	r4		
    3d84:	31 32       	jn	$-924    	;abs 0x39e8
    3d86:	4d 45       	mov.b	r5,	r13	
    3d88:	4d 31       	jn	$+668    	;abs 0x4024
    3d8a:	34 3a       	jl	$-918    	;abs 0x39f4
    3d8c:	47 28       	jnc	$+144    	;abs 0x3e1c
    3d8e:	39 2c       	jc	$+116    	;abs 0x3e02
    3d90:	38 29       	jnc	$+626    	;abs 0x4002
    3d92:	00 41       	br	r1		
    3d94:	44 43       	clr.b	r4		
    3d96:	31 32       	jn	$-924    	;abs 0x39fa
        lcd_goto(0, 14);
        printf("%d ", k);
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
    3d98:	4d 45       	mov.b	r5,	r13	
    3d9a:	4d 31       	jn	$+668    	;abs 0x4036
    3d9c:	35 3a       	jl	$-916    	;abs 0x3a08
    3d9e:	47 28       	jnc	$+144    	;abs 0x3e2e
    3da0:	39 2c       	jc	$+116    	;abs 0x3e14
    3da2:	38 29       	jnc	$+626    	;abs 0x4014
    3da4:	00 41       	br	r1		
    3da6:	44 43       	clr.b	r4		
    3da8:	31 32       	jn	$-924    	;abs 0x3a0c
    3daa:	4d 43       	clr.b	r13		
    3dac:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    3db0:	47 28       	jnc	$+144    	;abs 0x3e40
    3db2:	31 2c       	jc	$+100    	;abs 0x3e16
    3db4:	31 29       	jnc	$+612    	;abs 0x4018
    3db6:	00 41       	br	r1		
    3db8:	44 43       	clr.b	r4		
    3dba:	31 32       	jn	$-924    	;abs 0x3a1e
    3dbc:	4d 43       	clr.b	r13		
    3dbe:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    3dc2:	47 28       	jnc	$+144    	;abs 0x3e52
    3dc4:	31 2c       	jc	$+100    	;abs 0x3e28
    3dc6:	31 29       	jnc	$+612    	;abs 0x402a
    3dc8:	00 41       	br	r1		
    3dca:	44 43       	clr.b	r4		
    3dcc:	31 32       	jn	$-924    	;abs 0x3a30
    3dce:	4d 43       	clr.b	r13		
    3dd0:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    3dd4:	47 28       	jnc	$+144    	;abs 0x3e64
    3dd6:	31 2c       	jc	$+100    	;abs 0x3e3a
    3dd8:	31 29       	jnc	$+612    	;abs 0x403c
    3dda:	00 41       	br	r1		
    3ddc:	44 43       	clr.b	r4		
    3dde:	31 32       	jn	$-924    	;abs 0x3a42
        
        lcd_goto(2,2);
        printf("Params saved.");
        delayms(2000);
    }
}
    3de0:	4d 43       	clr.b	r13		
    3de2:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    3de6:	47 28       	jnc	$+144    	;abs 0x3e76
    3de8:	31 2c       	jc	$+100    	;abs 0x3e4c
    3dea:	31 29       	jnc	$+612    	;abs 0x404e
    3dec:	00 41       	br	r1		
    3dee:	44 43       	clr.b	r4		
    3df0:	31 32       	jn	$-924    	;abs 0x3a54
    3df2:	4d 43       	clr.b	r13		

void process_rc(void){
    3df4:	54 4c 34 3a 	mov.b	14900(r12),r4	;0x3a34(r12)
    ChannelInput[THROTTLE_CH] = PPMValue[THROTTLE_CH] * PPMSlope[THROTTLE_CH] + PPMOffset[THROTTLE_CH];
    3df8:	47 28       	jnc	$+144    	;abs 0x3e88
    3dfa:	31 2c       	jc	$+100    	;abs 0x3e5e
    3dfc:	31 29       	jnc	$+612    	;abs 0x4060
    3dfe:	00 41       	br	r1		
    3e00:	44 43       	clr.b	r4		
    3e02:	31 32       	jn	$-924    	;abs 0x3a66
    3e04:	4d 43       	clr.b	r13		
    3e06:	54 4c 35 3a 	mov.b	14901(r12),r4	;0x3a35(r12)
    3e0a:	47 28       	jnc	$+144    	;abs 0x3e9a
    3e0c:	31 2c       	jc	$+100    	;abs 0x3e70
    3e0e:	31 29       	jnc	$+612    	;abs 0x4072
    3e10:	00 41       	br	r1		
    3e12:	44 43       	clr.b	r4		
    3e14:	31 32       	jn	$-924    	;abs 0x3a78
    3e16:	4d 43       	clr.b	r13		
    3e18:	54 4c 36 3a 	mov.b	14902(r12),r4	;0x3a36(r12)
    3e1c:	47 28       	jnc	$+144    	;abs 0x3eac
    3e1e:	31 2c       	jc	$+100    	;abs 0x3e82
    3e20:	31 29       	jnc	$+612    	;abs 0x4084
    3e22:	00 41       	br	r1		
    3e24:	44 43       	clr.b	r4		
    3e26:	31 32       	jn	$-924    	;abs 0x3a8a
    3e28:	4d 43       	clr.b	r13		
    3e2a:	54 4c 37 3a 	mov.b	14903(r12),r4	;0x3a37(r12)
    ChannelInput[YAW_CH] = PPMValue[YAW_CH] * PPMSlope[YAW_CH] + PPMOffset[YAW_CH];
    3e2e:	47 28       	jnc	$+144    	;abs 0x3ebe
    3e30:	31 2c       	jc	$+100    	;abs 0x3e94
    3e32:	31 29       	jnc	$+612    	;abs 0x4096
    3e34:	00 41       	br	r1		
    3e36:	44 43       	clr.b	r4		
    3e38:	31 32       	jn	$-924    	;abs 0x3a9c
    3e3a:	4d 43       	clr.b	r13		
    3e3c:	54 4c 38 3a 	mov.b	14904(r12),r4	;0x3a38(r12)
    3e40:	47 28       	jnc	$+144    	;abs 0x3ed0
    3e42:	31 2c       	jc	$+100    	;abs 0x3ea6
    3e44:	31 29       	jnc	$+612    	;abs 0x40a8
    3e46:	00 41       	br	r1		
    3e48:	44 43       	clr.b	r4		
    3e4a:	31 32       	jn	$-924    	;abs 0x3aae
    3e4c:	4d 43       	clr.b	r13		
    3e4e:	54 4c 39 3a 	mov.b	14905(r12),r4	;0x3a39(r12)
    3e52:	47 28       	jnc	$+144    	;abs 0x3ee2
    3e54:	31 2c       	jc	$+100    	;abs 0x3eb8
    3e56:	31 29       	jnc	$+612    	;abs 0x40ba
    3e58:	00 41       	br	r1		
    3e5a:	44 43       	clr.b	r4		
    3e5c:	31 32       	jn	$-924    	;abs 0x3ac0
    3e5e:	4d 43       	clr.b	r13		
    3e60:	54 4c 31 30 	mov.b	12337(r12),r4	;0x3031(r12)
    ChannelInput[PITCH_CH] = PPMValue[PITCH_CH] * PPMSlope[PITCH_CH] + PPMOffset[PITCH_CH]; // pitch invertido
    3e64:	3a 47       	mov	@r7+,	r10	
    3e66:	28 31       	jn	$+594    	;abs 0x40b8
    3e68:	2c 31       	jn	$+602    	;abs 0x40c2
    3e6a:	29 00 41 44 	mova	&0x04441,r9	
    3e6e:	43 31       	jn	$+648    	;abs 0x40f6
    3e70:	32 4d       	mov	@r13+,	r2	
    3e72:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3e74:	4c 31       	jn	$+666    	;abs 0x410e
    3e76:	31 3a       	jl	$-924    	;abs 0x3ada
    3e78:	47 28       	jnc	$+144    	;abs 0x3f08
    3e7a:	31 2c       	jc	$+100    	;abs 0x3ede
    3e7c:	31 29       	jnc	$+612    	;abs 0x40e0
    3e7e:	00 41       	br	r1		
    3e80:	44 43       	clr.b	r4		
    3e82:	31 32       	jn	$-924    	;abs 0x3ae6
    3e84:	4d 43       	clr.b	r13		
    3e86:	54 4c 31 32 	mov.b	12849(r12),r4	;0x3231(r12)
    3e8a:	3a 47       	mov	@r7+,	r10	
    3e8c:	28 31       	jn	$+594    	;abs 0x40de
    3e8e:	2c 31       	jn	$+602    	;abs 0x40e8
    3e90:	29 00 41 44 	mova	&0x04441,r9	
    3e94:	43 31       	jn	$+648    	;abs 0x411c
    3e96:	32 4d       	mov	@r13+,	r2	
    ChannelInput[ROLL_CH] = PPMValue[ROLL_CH] * PPMSlope[ROLL_CH] + PPMOffset[ROLL_CH];
    3e98:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3e9a:	4c 31       	jn	$+666    	;abs 0x4134
    3e9c:	33 3a       	jl	$-920    	;abs 0x3b04
    3e9e:	47 28       	jnc	$+144    	;abs 0x3f2e
    3ea0:	31 2c       	jc	$+100    	;abs 0x3f04
    3ea2:	31 29       	jnc	$+612    	;abs 0x4106
    3ea4:	00 41       	br	r1		
    3ea6:	44 43       	clr.b	r4		
    3ea8:	31 32       	jn	$-924    	;abs 0x3b0c
    3eaa:	4d 43       	clr.b	r13		
    3eac:	54 4c 31 34 	mov.b	13361(r12),r4	;0x3431(r12)
    3eb0:	3a 47       	mov	@r7+,	r10	
    3eb2:	28 31       	jn	$+594    	;abs 0x4104
    3eb4:	2c 31       	jn	$+602    	;abs 0x410e
    3eb6:	29 00 41 44 	mova	&0x04441,r9	
    3eba:	43 31       	jn	$+648    	;abs 0x4142
    3ebc:	32 4d       	mov	@r13+,	r2	
    3ebe:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3ec0:	4c 31       	jn	$+666    	;abs 0x415a
    3ec2:	35 3a       	jl	$-916    	;abs 0x3b2e
    3ec4:	47 28       	jnc	$+144    	;abs 0x3f54
    3ec6:	31 2c       	jc	$+100    	;abs 0x3f2a
    3ec8:	31 29       	jnc	$+612    	;abs 0x412c
    3eca:	00 44       	br	r4		
    3ecc:	41 43       	clr.b	r1		
    ChannelInput[CH5_CH] = PPMValue[CH5_CH] * PPMSlope[CH5_CH] + PPMOffset[CH5_CH];
    3ece:	31 32       	jn	$-924    	;abs 0x3b32
    3ed0:	5f 30       	jn	$+192    	;abs 0x3f90
    3ed2:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3ed4:	4c 3a       	jl	$-870    	;abs 0x3b6e
    3ed6:	47 28       	jnc	$+144    	;abs 0x3f66
    3ed8:	39 2c       	jc	$+116    	;abs 0x3f4c
    3eda:	38 29       	jnc	$+626    	;abs 0x414c
    3edc:	00 44       	br	r4		
    3ede:	41 43       	clr.b	r1		
    3ee0:	31 32       	jn	$-924    	;abs 0x3b44
    3ee2:	5f 31       	jn	$+704    	;abs 0x41a2
    3ee4:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3ee6:	4c 3a       	jl	$-870    	;abs 0x3b80
    3ee8:	47 28       	jnc	$+144    	;abs 0x3f78
    3eea:	39 2c       	jc	$+116    	;abs 0x3f5e
    3eec:	38 29       	jnc	$+626    	;abs 0x415e
    3eee:	00 44       	br	r4		
    3ef0:	41 43       	clr.b	r1		
    3ef2:	31 32       	jn	$-924    	;abs 0x3b56
    3ef4:	5f 30       	jn	$+192    	;abs 0x3fb4
    3ef6:	44 41       	mov.b	r1,	r4	
    3ef8:	54 3a       	jl	$-854    	;abs 0x3ba2
    3efa:	47 28       	jnc	$+144    	;abs 0x3f8a
    3efc:	39 2c       	jc	$+116    	;abs 0x3f70
    3efe:	38 29       	jnc	$+626    	;abs 0x4170
    3f00:	00 44       	br	r4		
    3f02:	41 43       	clr.b	r1		
    ChannelInput[CH6_CH] = PPMValue[CH6_CH] * PPMSlope[CH6_CH] + PPMOffset[CH6_CH];
    3f04:	31 32       	jn	$-924    	;abs 0x3b68
    3f06:	5f 31       	jn	$+704    	;abs 0x41c6
    3f08:	44 41       	mov.b	r1,	r4	
    3f0a:	54 3a       	jl	$-854    	;abs 0x3bb4
    3f0c:	47 28       	jnc	$+144    	;abs 0x3f9c
    3f0e:	39 2c       	jc	$+116    	;abs 0x3f82
    3f10:	38 29       	jnc	$+626    	;abs 0x4182
    3f12:	00 44       	br	r4		
    3f14:	4d 41       	mov.b	r1,	r13	
    3f16:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3f18:	4c 30       	jn	$+154    	;abs 0x3fb2
    3f1a:	3a 47       	mov	@r7+,	r10	
    3f1c:	28 39       	jl	$+594    	;abs 0x416e
    3f1e:	2c 38       	jl	$+90     	;abs 0x3f78
    3f20:	29 00 44 4d 	mova	&0x04d44,r9	
    3f24:	41 43       	clr.b	r1		
    3f26:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    3f2a:	47 28       	jnc	$+144    	;abs 0x3fba
    3f2c:	39 2c       	jc	$+116    	;abs 0x3fa0
    3f2e:	38 29       	jnc	$+626    	;abs 0x41a0
    3f30:	00 44       	br	r4		
    3f32:	4d 41       	mov.b	r1,	r13	
    3f34:	49 56       	add.b	r6,	r9	
    3f36:	3a 47       	mov	@r7+,	r10	
    3f38:	28 39       	jl	$+594    	;abs 0x418a
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
    3f3a:	2c 38       	jl	$+90     	;abs 0x3f94
    3f3c:	29 00 44 4d 	mova	&0x04d44,r9	
    3f40:	41 30       	jn	$+132    	;abs 0x3fc4
    3f42:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3f44:	4c 3a       	jl	$-870    	;abs 0x3bde
    3f46:	47 28       	jnc	$+144    	;abs 0x3fd6
    3f48:	39 2c       	jc	$+116    	;abs 0x3fbc
    3f4a:	38 29       	jnc	$+626    	;abs 0x41bc
    3f4c:	00 44       	br	r4		
    3f4e:	4d 41       	mov.b	r1,	r13	
    3f50:	30 53       	add	#-1,	r0	;r3 As==11
    3f52:	41 3a       	jl	$-892    	;abs 0x3bd6
    3f54:	47 28       	jnc	$+144    	;abs 0x3fe4
    3f56:	31 2c       	jc	$+100    	;abs 0x3fba
    3f58:	32 29       	jnc	$+614    	;abs 0x41be
    3f5a:	3d 42       	mov	#8,	r13	;r2 As==11
    3f5c:	28 30       	jn	$+82     	;abs 0x3fae
    3f5e:	2c 35       	jge	$+602    	;abs 0x41b8
    3f60:	29 00 44 4d 	mova	&0x04d44,r9	
    3f64:	41 30       	jn	$+132    	;abs 0x3fe8
    3f66:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    3f68:	4c 3a       	jl	$-870    	;abs 0x3c02
    3f6a:	47 28       	jnc	$+144    	;abs 0x3ffa
    3f6c:	39 2c       	jc	$+116    	;abs 0x3fe0
    3f6e:	38 29       	jnc	$+626    	;abs 0x41e0
    3f70:	00 44       	br	r4		
    3f72:	4d 41       	mov.b	r1,	r13	
    3f74:	30 44       	br	@r4+		
    3f76:	41 3a       	jl	$-892    	;abs 0x3bfa
    3f78:	47 28       	jnc	$+144    	;abs 0x4008
    3f7a:	31 2c       	jc	$+100    	;abs 0x3fde
    3f7c:	32 29       	jnc	$+614    	;abs 0x41e2
    3f7e:	00 44       	br	r4		
    3f80:	4d 41       	mov.b	r1,	r13	
    3f82:	30 44       	br	@r4+		
    3f84:	41 4c       	mov.b	r12,	r1	
    3f86:	3a 47       	mov	@r7+,	r10	
    3f88:	28 39       	jl	$+594    	;abs 0x41da
    3f8a:	2c 38       	jl	$+90     	;abs 0x3fe4
    3f8c:	29 00 44 4d 	mova	&0x04d44,r9	
    3f90:	41 30       	jn	$+132    	;abs 0x4014
    3f92:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    3f94:	3a 47       	mov	@r7+,	r10	
    3f96:	28 39       	jl	$+594    	;abs 0x41e8
    3f98:	2c 38       	jl	$+90     	;abs 0x3ff2
    3f9a:	29 00 44 4d 	mova	&0x04d44,r9	
    3f9e:	41 31       	jn	$+644    	;abs 0x4222
    3fa0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    3fa2:	4c 3a       	jl	$-870    	;abs 0x3c3c
    3fa4:	47 28       	jnc	$+144    	;abs 0x4034
    3fa6:	39 2c       	jc	$+116    	;abs 0x401a
    3fa8:	38 29       	jnc	$+626    	;abs 0x421a
    3faa:	00 44       	br	r4		
    3fac:	4d 41       	mov.b	r1,	r13	
    3fae:	31 53       	add	#-1,	r1	;r3 As==11
    3fb0:	41 3a       	jl	$-892    	;abs 0x3c34
    3fb2:	47 28       	jnc	$+144    	;abs 0x4042
    3fb4:	31 2c       	jc	$+100    	;abs 0x4018
    3fb6:	32 29       	jnc	$+614    	;abs 0x421c
    3fb8:	00 44       	br	r4		
    3fba:	4d 41       	mov.b	r1,	r13	
    3fbc:	31 53       	add	#-1,	r1	;r3 As==11
    3fbe:	41 4c       	mov.b	r12,	r1	
    3fc0:	3a 47       	mov	@r7+,	r10	
    3fc2:	28 39       	jl	$+594    	;abs 0x4214
}
    3fc4:	2c 38       	jl	$+90     	;abs 0x401e
    3fc6:	29 00 44 4d 	mova	&0x04d44,r9	

void load_transmitter_values(void){
    fourbytes ValorAux;

    if(EEPROMFound == 1){
    3fca:	41 31       	jn	$+644    	;abs 0x424e
    3fcc:	44 41       	mov.b	r1,	r4	
    3fce:	3a 47       	mov	@r7+,	r10	
        i2c_change_address(EEPROM_I2C_ADDR);    
    3fd0:	28 39       	jl	$+594    	;abs 0x4222
    3fd2:	2c 38       	jl	$+90     	;abs 0x402c
    3fd4:	29 00 44 4d 	mova	&0x04d44,r9	

        // load yaw slope e offset
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
    3fd8:	41 31       	jn	$+644    	;abs 0x425c
    3fda:	44 41       	mov.b	r1,	r4	
    3fdc:	4c 3a       	jl	$-870    	;abs 0x3c76
    3fde:	47 28       	jnc	$+144    	;abs 0x406e
    3fe0:	39 2c       	jc	$+116    	;abs 0x4054
    3fe2:	38 29       	jnc	$+626    	;abs 0x4254
        PPMSlope[YAW_CH] = ValorAux.f;
    3fe4:	00 44       	br	r4		
    3fe6:	4d 41       	mov.b	r1,	r13	
    3fe8:	31 53       	add	#-1,	r1	;r3 As==11
    3fea:	5a 3a       	jl	$-842    	;abs 0x3ca0
    3fec:	47 28       	jnc	$+144    	;abs 0x407c
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    3fee:	39 2c       	jc	$+116    	;abs 0x4062
    3ff0:	38 29       	jnc	$+626    	;abs 0x4262
    3ff2:	00 44       	br	r4		
    3ff4:	4d 41       	mov.b	r1,	r13	
    3ff6:	32 43       	mov	#-1,	r2	;r3 As==11
    3ff8:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
        PPMOffset[YAW_CH] = ValorAux.f;
    3ffc:	28 39       	jl	$+594    	;abs 0x424e
    3ffe:	2c 38       	jl	$+90     	;abs 0x4058
    4000:	29 00 44 4d 	mova	&0x04d44,r9	
        
        // load throttle slope  e offset
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
    4004:	41 32       	jn	$-892    	;abs 0x3c88
    4006:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    4008:	3a 47       	mov	@r7+,	r10	
    400a:	28 31       	jn	$+594    	;abs 0x425c
    400c:	2c 32       	jn	$-934    	;abs 0x3c66
    400e:	29 00 44 4d 	mova	&0x04d44,r9	
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    4012:	41 32       	jn	$-892    	;abs 0x3c96
    4014:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    4016:	4c 3a       	jl	$-870    	;abs 0x3cb0
    4018:	47 28       	jnc	$+144    	;abs 0x40a8
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    401a:	39 2c       	jc	$+116    	;abs 0x408e
    401c:	38 29       	jnc	$+626    	;abs 0x428e
    401e:	00 44       	br	r4		
    4020:	4d 41       	mov.b	r1,	r13	
    4022:	32 44       	mov	@r4+,	r2	
    4024:	41 3a       	jl	$-892    	;abs 0x3ca8
        PPMOffset[THROTTLE_CH] = ValorAux.f;
    4026:	47 28       	jnc	$+144    	;abs 0x40b6
    4028:	31 2c       	jc	$+100    	;abs 0x408c
    402a:	32 29       	jnc	$+614    	;abs 0x4290
    402c:	00 44       	br	r4		
    402e:	4d 41       	mov.b	r1,	r13	
        
        // load pitch slope  e offset
        i2c_read16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    4030:	32 44       	mov	@r4+,	r2	
    4032:	41 4c       	mov.b	r12,	r1	
    4034:	3a 47       	mov	@r7+,	r10	
    4036:	28 39       	jl	$+594    	;abs 0x4288
    4038:	2c 38       	jl	$+90     	;abs 0x4092
    403a:	29 00 44 4d 	mova	&0x04d44,r9	
        PPMSlope[PITCH_CH] = ValorAux.f;
    403e:	41 32       	jn	$-892    	;abs 0x3cc2
    4040:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    4042:	3a 47       	mov	@r7+,	r10	
    4044:	28 39       	jl	$+594    	;abs 0x4296
        i2c_read16_multiples(_RADIO_PITCH_OFFSET, ValorAux.c, 4);
    4046:	2c 38       	jl	$+90     	;abs 0x40a0
    4048:	29 00 57 44 	mova	&0x04457,r9	
    404c:	54 43       	mov.b	#1,	r4	;r3 As==01
    404e:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
        PPMOffset[PITCH_CH] = ValorAux.f;
    4052:	28 39       	jl	$+594    	;abs 0x42a4
    4054:	2c 38       	jl	$+90     	;abs 0x40ae
    4056:	29 00 49 45 	mova	&0x04549,r9	
    405a:	31 3a       	jl	$-924    	;abs 0x3cbe
        
        // load roll slope  e offset
        i2c_read16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    405c:	47 28       	jnc	$+144    	;abs 0x40ec
    405e:	31 2c       	jc	$+100    	;abs 0x40c2
    4060:	31 29       	jnc	$+612    	;abs 0x42c4
    4062:	00 49       	br	r9		
    4064:	46 47       	mov.b	r7,	r6	
    4066:	31 3a       	jl	$-924    	;abs 0x3cca
        PPMSlope[ROLL_CH] = ValorAux.f;
    4068:	47 28       	jnc	$+144    	;abs 0x40f8
    406a:	31 2c       	jc	$+100    	;abs 0x40ce
    406c:	31 29       	jnc	$+612    	;abs 0x42d0
    406e:	00 49       	br	r9		
    4070:	45 32       	jn	$-884    	;abs 0x3cfc
        i2c_read16_multiples(_RADIO_ROLL_OFFSET, ValorAux.c, 4);
    4072:	3a 47       	mov	@r7+,	r10	
    4074:	28 31       	jn	$+594    	;abs 0x42c6
    4076:	2c 31       	jn	$+602    	;abs 0x42d0
    4078:	29 00 49 46 	mova	&0x04649,r9	
    407c:	47 32       	jn	$-880    	;abs 0x3d0c
        PPMOffset[ROLL_CH] = ValorAux.f;
    407e:	3a 47       	mov	@r7+,	r10	
    4080:	28 31       	jn	$+594    	;abs 0x42d2
    4082:	2c 31       	jn	$+602    	;abs 0x42dc
    4084:	29 00 54 4c 	mova	&0x04c54,r9	
    
        // load ch5 slope  e offset
        i2c_read16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
    4088:	56 5f 43 48 	add.b	18499(r15),r6	;0x4843(r15)
    408c:	45 43       	clr.b	r5		
    408e:	4b 53       	add.b	#0,	r11	;r3 As==00
    4090:	55 4d 3a 47 	mov.b	18234(r13),r5	;0x473a(r13)
        PPMSlope[CH5_CH] = ValorAux.f;
    4094:	28 39       	jl	$+594    	;abs 0x42e6
    4096:	2c 38       	jl	$+90     	;abs 0x40f0
    4098:	29 00 54 4c 	mova	&0x04c54,r9	
    409c:	56 5f 44 43 	add.b	17220(r15),r6	;0x4344(r15)
        i2c_read16_multiples(_RADIO_CH5_OFFSET, ValorAux.c, 4);
    40a0:	4f 5f       	rla.b	r15		
    40a2:	33 30       	jn	$+104    	;abs 0x410a
    40a4:	5f 54 41 47 	add.b	18241(r4),r15	;0x4741(r4)
    40a8:	3a 47       	mov	@r7+,	r10	
        PPMOffset[CH5_CH] = ValorAux.f;
    40aa:	28 31       	jn	$+594    	;abs 0x42fc
    40ac:	2c 31       	jn	$+602    	;abs 0x4306
    40ae:	29 00 54 4c 	mova	&0x04c54,r9	
    40b2:	56 5f 44 43 	add.b	17220(r15),r6	;0x4344(r15)
    
        // load ch6 slope  e offset
        i2c_read16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    40b6:	4f 5f       	rla.b	r15		
    40b8:	33 30       	jn	$+104    	;abs 0x4120
    40ba:	5f 4c 45 4e 	mov.b	20037(r12),r15	;0x4e45(r12)
    40be:	3a 47       	mov	@r7+,	r10	
        PPMSlope[CH6_CH] = ValorAux.f;
    40c0:	28 31       	jn	$+594    	;abs 0x4312
    40c2:	2c 31       	jn	$+602    	;abs 0x431c
    40c4:	29 00 54 4c 	mova	&0x04c54,r9	
    40c8:	56 5f 41 44 	add.b	17473(r15),r6	;0x4441(r15)
        i2c_read16_multiples(_RADIO_CH6_OFFSET, ValorAux.c, 4);
    40cc:	43 31       	jn	$+648    	;abs 0x4354
    40ce:	32 5f       	add	@r15+,	r2	
    40d0:	31 5f       	add	@r15+,	r1	
    40d2:	54 41 47 3a 	mov.b	14919(r1),r4	;0x3a47(r1)
        PPMOffset[CH6_CH] = ValorAux.f;
    40d6:	47 28       	jnc	$+144    	;abs 0x4166
    40d8:	31 2c       	jc	$+100    	;abs 0x413c
    40da:	31 29       	jnc	$+612    	;abs 0x433e
    40dc:	00 54       	add	r4,	r0	
    40de:	4c 56       	add.b	r6,	r12	
        
        // load ch7 slope  e offset
        i2c_read16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
    40e0:	5f 41 44 43 	mov.b	17220(r1),r15	;0x4344(r1)
    40e4:	31 32       	jn	$-924    	;abs 0x3d48
    40e6:	5f 31       	jn	$+704    	;abs 0x43a6
    40e8:	5f 4c 45 4e 	mov.b	20037(r12),r15	;0x4e45(r12)
        PPMSlope[CH7_CH] = ValorAux.f;
    40ec:	3a 47       	mov	@r7+,	r10	
    40ee:	28 31       	jn	$+594    	;abs 0x4340
    40f0:	2c 31       	jn	$+602    	;abs 0x434a
    40f2:	29 00 43 41 	mova	&0x04143,r9	
        i2c_read16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
    40f6:	4c 44       	mov.b	r4,	r12	
    40f8:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    40fa:	5f 31       	jn	$+704    	;abs 0x43ba
    40fc:	36 4d       	mov	@r13+,	r6	
    40fe:	48 5a       	add.b	r10,	r8	
    4100:	3a 47       	mov	@r7+,	r10	
        PPMOffset[CH7_CH] = ValorAux.f;
    4102:	28 31       	jn	$+594    	;abs 0x4354
    4104:	2c 31       	jn	$+602    	;abs 0x435e
    4106:	29 00 43 41 	mova	&0x04143,r9	
    410a:	4c 42       	mov.b	r2,	r12	
    }
}
    410c:	43 31       	jn	$+648    	;abs 0x4394
    410e:	5f 31       	jn	$+704    	;abs 0x43ce
    4110:	36 4d       	mov	@r13+,	r6	
    4112:	48 5a       	add.b	r10,	r8	
    4114:	3a 47       	mov	@r7+,	r10	
    4116:	28 31       	jn	$+594    	;abs 0x4368
    4118:	2c 31       	jn	$+602    	;abs 0x4372
    411a:	29 00 43 41 	mova	&0x04143,r9	
    411e:	4c 44       	mov.b	r4,	r12	
    4120:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    4122:	5f 31       	jn	$+704    	;abs 0x43e2
    4124:	32 4d       	mov	@r13+,	r2	
    4126:	48 5a       	add.b	r10,	r8	
    4128:	3a 47       	mov	@r7+,	r10	
    412a:	28 31       	jn	$+594    	;abs 0x437c
    412c:	2c 31       	jn	$+602    	;abs 0x4386

void draw_rc_inputs(char raw){
    412e:	29 00 43 41 	mova	&0x04143,r9	
    4132:	4c 42       	mov.b	r2,	r12	
    4134:	43 31       	jn	$+648    	;abs 0x43bc
    4136:	5f 31       	jn	$+704    	;abs 0x43f6
    4138:	32 4d       	mov	@r13+,	r2	
    unsigned int i = 0, k = 0, h = 0;
    413a:	48 5a       	add.b	r10,	r8	
    lcd_goto(0,0);
    413c:	3a 47       	mov	@r7+,	r10	
    413e:	28 31       	jn	$+594    	;abs 0x4390
    4140:	2c 31       	jn	$+602    	;abs 0x439a
    4142:	29 00 43 41 	mova	&0x04143,r9	
    printf("     RC inputs");
    4146:	4c 44       	mov.b	r4,	r12	
    4148:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
    414a:	5f 38       	jl	$+192    	;abs 0x420a
    lcd_goto(0,2);
    414c:	4d 48       	mov.b	r8,	r13	
    414e:	5a 3a       	jl	$-842    	;abs 0x3e04
    4150:	47 28       	jnc	$+144    	;abs 0x41e0
    4152:	31 2c       	jc	$+100    	;abs 0x41b6
    
    for(i = 0; i < 8; i++){
    4154:	31 29       	jnc	$+612    	;abs 0x43b8
        if(!raw){
    4156:	00 43       	clr	r0		
    4158:	41 4c       	mov.b	r12,	r1	
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
    415a:	42 43       	clr.b	r2		
    415c:	31 5f       	add	@r15+,	r1	
    415e:	38 4d       	mov	@r13+,	r8	
    4160:	48 5a       	add.b	r10,	r8	
    4162:	3a 47       	mov	@r7+,	r10	
    4164:	28 31       	jn	$+594    	;abs 0x43b6
    4166:	2c 31       	jn	$+602    	;abs 0x43c0
    4168:	29 00 43 41 	mova	&0x04143,r9	
    416c:	4c 44       	mov.b	r4,	r12	
    416e:	43 4f       	.word	0x4f43;	????	Illegal as 2-op instr
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
        }
        k = 21 + (8 * i); //posicao inicial em y
    4170:	5f 31       	jn	$+704    	;abs 0x4430
    4172:	4d 48       	mov.b	r8,	r13	
    4174:	5a 3a       	jl	$-842    	;abs 0x3e2a
    4176:	47 28       	jnc	$+144    	;abs 0x4206
    4178:	31 2c       	jc	$+100    	;abs 0x41dc
        if(!raw){
    417a:	31 29       	jnc	$+612    	;abs 0x43de
    417c:	00 43       	clr	r0		
            if(ChannelInput[i] > 4000){
    417e:	41 4c       	mov.b	r12,	r1	
    4180:	42 43       	clr.b	r2		
    4182:	31 5f       	add	@r15+,	r1	
    4184:	31 4d       	mov	@r13+,	r1	
                h=100;
            }
            else{
                if(ChannelInput[i] < 2001){
    4186:	48 5a       	add.b	r10,	r8	
    4188:	3a 47       	mov	@r7+,	r10	
    418a:	28 31       	jn	$+594    	;abs 0x43dc
    418c:	2c 31       	jn	$+602    	;abs 0x43e6
                    h = 0;
                }
                else{
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
    418e:	29 00 65 65 	mova	&0x06565,r9	
    4192:	70 72       	subc.b	#8,	r0	;r2 As==11
    4194:	6f 6d       	addc.b	@r13,	r15	
    4196:	2e 63       	addc	#2,	r14	;r3 As==10
    4198:	00 66       	addc	r6,	r0	
    419a:	6f 75       	subc.b	@r5,	r15	
    419c:	72 62       	addc.b	#8,	r2	;r2 As==11
    419e:	79 74       	subc.b	@r4+,	r9	
    41a0:	65 73       	subc.b	#2,	r5	;r3 As==10
    41a2:	3a 74       	subc	@r4+,	r10	
    41a4:	28 32       	jn	$-942    	;abs 0x3df6
    41a6:	2c 31       	jn	$+602    	;abs 0x4400
    41a8:	29 3d       	jmp	$+596    	;abs 0x43fc
    41aa:	28 32       	jn	$-942    	;abs 0x3dfc
    41ac:	2c 32       	jn	$-934    	;abs 0x3e06
    41ae:	29 3d       	jmp	$+596    	;abs 0x4402
            if(PPMValue[i] > 4000){
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
                    h = 0;
    41b0:	75 34       	jge	$+236    	;abs 0x429c
    41b2:	66 3a       	jl	$-818    	;abs 0x3e80
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
                h=100;
    41b4:	28 30       	jn	$+82     	;abs 0x4206
    41b6:	2c 31       	jn	$+602    	;abs 0x4410
    41b8:	32 29       	jnc	$+614    	;abs 0x441e
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
                }
            }
        }
        else{
            if(PPMValue[i] > 4000){
    41ba:	2c 30       	jn	$+90     	;abs 0x4214
    41bc:	2c 33       	jn	$-422    	;abs 0x4016
    41be:	32 3b       	jl	$-410    	;abs 0x4024
    41c0:	63 3a       	jl	$-824    	;abs 0x3e88
                h=100;
            }
            else{
                if(PPMValue[i] < 2001){
    41c2:	28 32       	jn	$-942    	;abs 0x3e14
    41c4:	2c 33       	jn	$-422    	;abs 0x401e
    41c6:	29 3d       	jmp	$+596    	;abs 0x441a
    41c8:	61 72       	subc.b	#4,	r1	;r2 As==10
                    h = 0;
                }
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
    41ca:	28 32       	jn	$-942    	;abs 0x3e1c
    41cc:	2c 34       	jge	$+90     	;abs 0x4226
    41ce:	29 3d       	jmp	$+596    	;abs 0x4422
    for(i = 0; i < 8; i++){
        if(!raw){
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
        }
        else{
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
    41d0:	72 28       	jnc	$+230    	;abs 0x42b6
    41d2:	32 2c       	jc	$+102    	;abs 0x4238
    41d4:	34 29       	jnc	$+618    	;abs 0x443e
    41d6:	3b 30       	jn	$+120    	;abs 0x424e
    41d8:	30 30       	jn	$+98     	;abs 0x423a
                else{
                    h = ((PPMValue[i] - 2000) * 10) / 200;
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    41da:	30 30       	jn	$+98     	;abs 0x423c
    41dc:	30 30       	jn	$+98     	;abs 0x423e
    41de:	30 30       	jn	$+98     	;abs 0x4240
    41e0:	30 30       	jn	$+98     	;abs 0x4242
    41e2:	30 30       	jn	$+98     	;abs 0x4244
    41e4:	3b 30       	jn	$+120    	;abs 0x425c
    41e6:	30 30       	jn	$+98     	;abs 0x4248
    41e8:	30 30       	jn	$+98     	;abs 0x424a
    41ea:	30 30       	jn	$+98     	;abs 0x424c
    41ec:	31 37       	jge	$-412    	;abs 0x4050
    41ee:	37 37       	jge	$-400    	;abs 0x405e
    41f0:	37 37       	jge	$-400    	;abs 0x4060
    41f2:	3b 3b       	jl	$-392    	;abs 0x406a
    unsigned int i = 0, k = 0, h = 0;
    lcd_goto(0,0);
    printf("     RC inputs");
    lcd_goto(0,2);
    
    for(i = 0; i < 8; i++){
    41f4:	30 3b       	jl	$-414    	;abs 0x4056
    41f6:	33 3b       	jl	$-408    	;abs 0x405e
    41f8:	28 30       	jn	$+82     	;abs 0x424a
    41fa:	2c 32       	jn	$-934    	;abs 0x3e54
    41fc:	29 2c       	jc	$+84     	;abs 0x4250
                }
            }
        }
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}
    41fe:	30 2c       	jc	$+98     	;abs 0x4260
    4200:	33 32       	jn	$-920    	;abs 0x3e68
    4202:	3b 3b       	jl	$-392    	;abs 0x407a
    4204:	00 45       	br	r5		
    4206:	45 50       	add.b	r0,	r5	
    4208:	52 4f 4d 46 	mov.b	17997(r15),r2	;0x464d(r15)

int find_first(int startaddress){
    420c:	6f 75       	subc.b	@r5,	r15	
    for(; startaddress < 255; startaddress++){
    420e:	6e 64       	addc.b	@r4,	r14	
    4210:	3a 47       	mov	@r7+,	r10	
    4212:	28 30       	jn	$+82     	;abs 0x4264
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
        }
    }   
    return 0;
    4214:	2c 31       	jn	$+602    	;abs 0x446e
    4216:	31 29       	jnc	$+612    	;abs 0x447a
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
    4218:	00 69       	addc	r9,	r0	
    421a:	32 63       	addc	#-1,	r2	;r3 As==11
    421c:	2e 63       	addc	#2,	r14	;r3 As==10
        if(!i2c_find_device()){
    421e:	00 69       	addc	r9,	r0	
    4220:	32 63       	addc	#-1,	r2	;r3 As==11
    4222:	5f 63       	addc.b	#1,	r15	;r3 As==01
    4224:	6f 6e       	addc.b	@r14,	r15	
        lcd_drawprogressbar(80,k,45,4,WHITE, BLUE, h);
    }
}

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
    4226:	66 69       	addc.b	@r9,	r6	
    4228:	67 3a       	jl	$-816    	;abs 0x3ef8
    422a:	46 28       	jnc	$+142    	;abs 0x42b8
    422c:	30 2c       	jc	$+98     	;abs 0x428e
    422e:	32 30       	jn	$+102    	;abs 0x4294
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
    4230:	29 00 73 6c 	mova	&0x06c73,r9	
        }
    }   
    return 0;
}
    4234:	61 76       	subc.b	@r6,	r1	

// loop de controle
void main_loop(){
    
    
}
    4236:	65 5f       	add.b	@r15,	r5	
    4238:	61 64       	addc.b	@r4,	r1	
    423a:	64 72       	subc.b	#4,	r4	;r2 As==10
    423c:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    4240:	2c 31       	jn	$+602    	;abs 0x449a
    4242:	31 29       	jnc	$+612    	;abs 0x44a6
    4244:	00 69       	addc	r9,	r0	
    4246:	32 63       	addc	#-1,	r2	;r3 As==11
    4248:	5f 63       	addc.b	#1,	r15	;r3 As==01
    424a:	68 61       	addc.b	@r1,	r8	
    424c:	6e 67       	addc.b	@r7,	r14	
    424e:	65 5f       	add.b	@r15,	r5	
    4250:	61 64       	addc.b	@r4,	r1	
    4252:	64 72       	subc.b	#4,	r4	;r2 As==10
    4254:	65 73       	subc.b	#2,	r5	;r3 As==10
    4256:	73 3a       	jl	$-792    	;abs 0x3f3e
    4258:	46 28       	jnc	$+142    	;abs 0x42e6
    425a:	30 2c       	jc	$+98     	;abs 0x42bc
    425c:	32 30       	jn	$+102    	;abs 0x42c2
    425e:	29 00 69 32 	mova	&0x03269,r9	
    4262:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    4264:	69 6e       	addc.b	@r14,	r9	
    4266:	69 74       	subc.b	@r4,	r9	
    4268:	3a 46       	mov	@r6+,	r10	
    426a:	28 30       	jn	$+82     	;abs 0x42bc
    426c:	2c 32       	jn	$-934    	;abs 0x3ec6
    426e:	30 29       	jnc	$+610    	;abs 0x44d0
    4270:	00 69       	addc	r9,	r0	
    4272:	32 63       	addc	#-1,	r2	;r3 As==11
    4274:	5f 73       	subc.b	#1,	r15	;r3 As==01
    4276:	74 61       	addc.b	@r1+,	r4	
    4278:	72 74       	subc.b	@r4+,	r2	
    427a:	3a 46       	mov	@r6+,	r10	
    427c:	28 30       	jn	$+82     	;abs 0x42ce
    427e:	2c 32       	jn	$-934    	;abs 0x3ed8
    4280:	30 29       	jnc	$+610    	;abs 0x44e2
    4282:	00 69       	addc	r9,	r0	
    4284:	32 63       	addc	#-1,	r2	;r3 As==11
    4286:	5f 73       	subc.b	#1,	r15	;r3 As==01
    4288:	74 6f       	addc.b	@r15+,	r4	

void setup(){
    428a:	70 3a       	jl	$-798    	;abs 0x3f6c
    
    clock_init();
    428c:	46 28       	jnc	$+142    	;abs 0x431a
    428e:	30 2c       	jc	$+98     	;abs 0x42f0
    
    timer_a3_init();
    4290:	32 30       	jn	$+102    	;abs 0x42f6
    4292:	29 00 69 32 	mova	&0x03269,r9	
    
    p1_init();
    4296:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    
    analog_init();
    4298:	72 65       	addc.b	@r5+,	r2	
    429a:	63 76       	.word	0x7663;	????	Illegal as 2-op instr
    
    i2c_init();
    429c:	5f 61 63 6b 	addc.b	27491(r1),r15	;0x6b63(r1)
    
    eint();
    42a0:	3a 46       	mov	@r6+,	r10	
    
    lcd_init(BLACK);
    42a2:	28 30       	jn	$+82     	;abs 0x42f4
    42a4:	2c 31       	jn	$+602    	;abs 0x44fe
    42a6:	31 29       	jnc	$+612    	;abs 0x450a
    
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));

    i2c_config(EEPROM_I2C_ADDR);
    42a8:	00 69       	addc	r9,	r0	
    42aa:	32 63       	addc	#-1,	r2	;r3 As==11
    42ac:	5f 73       	subc.b	#1,	r15	;r3 As==01
    42ae:	65 6e       	addc.b	@r14,	r5	
    EEPROMFound = !(i2c_find_device());
    42b0:	64 5f       	add.b	@r15,	r4	
    42b2:	61 63       	addc.b	#2,	r1	;r3 As==10
    42b4:	6b 3a       	jl	$-808    	;abs 0x3f8c
    42b6:	46 28       	jnc	$+142    	;abs 0x4344
    42b8:	30 2c       	jc	$+98     	;abs 0x431a
    42ba:	32 30       	jn	$+102    	;abs 0x4320
    42bc:	29 00 63 6f 	mova	&0x06f63,r9	
    
    if(EEPROMFound){
    42c0:	6e 66       	addc.b	@r6,	r14	
    42c2:	69 72       	subc.b	#4,	r9	;r2 As==10
        printf("EEPROM found\n");
    42c4:	6d 61       	addc.b	@r1,	r13	
    42c6:	74 69       	addc.b	@r9+,	r4	
    42c8:	6f 6e       	addc.b	@r14,	r15	
    42ca:	3a 50 28 30 	add	#12328,	r10	;#0x3028
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    42ce:	2c 31       	jn	$+602    	;abs 0x4528
    42d0:	31 29       	jnc	$+612    	;abs 0x4534
    42d2:	00 69       	addc	r9,	r0	
    42d4:	32 63       	addc	#-1,	r2	;r3 As==11
    42d6:	5f 62 77 72 	addc.b	&0x7277,r15	
        printf("SF: %d %d %d\n", StatusFlags[0], StatusFlags[1], StatusFlags[2]);
    42da:	69 74       	subc.b	@r4,	r9	
    42dc:	65 3a       	jl	$-820    	;abs 0x3fa8
    42de:	46 28       	jnc	$+142    	;abs 0x436c
    42e0:	30 2c       	jc	$+98     	;abs 0x4342
    42e2:	32 30       	jn	$+102    	;abs 0x4348
    42e4:	29 00 62 3a 	mova	&0x03a62,r9	
    42e8:	50 28       	jnc	$+162    	;abs 0x438a
    42ea:	30 2c       	jc	$+98     	;abs 0x434c
    42ec:	31 31       	jn	$+612    	;abs 0x4550
    42ee:	29 00 69 32 	mova	&0x03269,r9	
    42f2:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    42f4:	62 72       	subc.b	#4,	r2	;r2 As==10
    42f6:	65 61       	addc.b	@r1,	r5	
    42f8:	64 3a       	jl	$-822    	;abs 0x3fc2

        //if(1){
        if(StatusFlags[0] != 0){
    42fa:	46 28       	jnc	$+142    	;abs 0x4388
    42fc:	30 2c       	jc	$+98     	;abs 0x435e
    42fe:	31 31       	jn	$+612    	;abs 0x4562
    4300:	29 00 62 69 	mova	&0x06962,r9	
            printf("Calibrando radio...\n");
    4304:	6e 3a       	jl	$-802    	;abs 0x3fe2
    4306:	72 28       	jnc	$+230    	;abs 0x43ec
    4308:	30 2c       	jc	$+98     	;abs 0x436a
            delayms(4000);
    430a:	31 31       	jn	$+612    	;abs 0x456e
    430c:	29 00 69 32 	mova	&0x03269,r9	
    4310:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
            calibrate_radio();
    4312:	66 69       	addc.b	@r9,	r6	
    4314:	6e 64       	addc.b	@r4,	r14	
            StatusFlags[0] = 0;
    4316:	5f 64 65 76 	addc.b	30309(r4),r15	;0x7665(r4)
            StatusFlags[1] = 0;
    431a:	69 63       	addc.b	#2,	r9	;r3 As==10
    431c:	65 3a       	jl	$-820    	;abs 0x3fe8
            StatusFlags[2] = 0;
    431e:	46 28       	jnc	$+142    	;abs 0x43ac
    4320:	30 2c       	jc	$+98     	;abs 0x4382
            i2c_write16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    4322:	31 31       	jn	$+612    	;abs 0x4586
    4324:	29 00 73 74 	mova	&0x07473,r9	
    4328:	61 74       	subc.b	@r4,	r1	
    432a:	75 73       	subc.b	#-1,	r5	;r3 As==11
    432c:	3a 72       	subc	#8,	r10	;r2 As==11
    432e:	28 30       	jn	$+82     	;abs 0x4380
    4330:	2c 31       	jn	$+602    	;abs 0x458a
        }
        else{
            load_transmitter_values();
    4332:	31 29       	jnc	$+612    	;abs 0x4596
    4334:	00 69       	addc	r9,	r0	
            printf("RC params loaded\n");
    4336:	32 63       	addc	#-1,	r2	;r3 As==11
    4338:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
    433c:	74 65       	addc.b	@r5+,	r4	
    433e:	5f 64 75 6d 	addc.b	28021(r4),r15	;0x6d75(r4)
            //carregar os outros parametros
        }
    }
    else{
        color_fore = RED;
    4342:	6d 79       	subc.b	@r9,	r13	
    4344:	3a 46       	mov	@r6+,	r10	
        printf("EEPROM not found\n");
    4346:	28 30       	jn	$+82     	;abs 0x4398
    4348:	2c 31       	jn	$+602    	;abs 0x45a2
    434a:	31 29       	jnc	$+612    	;abs 0x45ae
    434c:	00 69       	addc	r9,	r0	
        color_fore = LIME;
    434e:	32 63       	addc	#-1,	r2	;r3 As==11
    4350:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
    }
    analog_graph_clear_all();    
    4354:	74 65       	addc.b	@r5+,	r4	
    4356:	5f 62 79 74 	addc.b	&0x7479,r15	
    
    lcd_drawline(10,80,90,90,RED);
    435a:	65 3a       	jl	$-820    	;abs 0x4026
    435c:	46 28       	jnc	$+142    	;abs 0x43ea
    435e:	30 2c       	jc	$+98     	;abs 0x43c0
    4360:	31 31       	jn	$+612    	;abs 0x45c4
    4362:	29 00 72 65 	mova	&0x06572,r9	
    4366:	67 3a       	jl	$-816    	;abs 0x4036
    4368:	50 28       	jnc	$+162    	;abs 0x440a
    436a:	30 2c       	jc	$+98     	;abs 0x43cc
    436c:	31 31       	jn	$+612    	;abs 0x45d0
    436e:	29 00 69 32 	mova	&0x03269,r9	
    lcd_drawline(10,90,90,80,BLUE);
    4372:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    4374:	77 72       	subc.b	#8,	r7	;r2 As==11
    4376:	69 74       	subc.b	@r4,	r9	
    4378:	65 5f       	add.b	@r15,	r5	
    437a:	6d 75       	subc.b	@r5,	r13	
    437c:	6c 74       	subc.b	@r4,	r12	
    437e:	69 70       	subc.b	@r0,	r9	
    4380:	6c 65       	addc.b	@r5,	r12	
    4382:	73 3a       	jl	$-792    	;abs 0x406a
    4384:	46 28       	jnc	$+142    	;abs 0x4412
    4386:	30 2c       	jc	$+98     	;abs 0x43e8
    
    delayms(1500);
    4388:	31 31       	jn	$+612    	;abs 0x45ec
    438a:	29 00 64 61 	mova	&0x06164,r9	
    438e:	74 3a       	jl	$-790    	;abs 0x4078

    SetupDone = 1;
    4390:	50 28       	jnc	$+162    	;abs 0x4432
    4392:	31 2c       	jc	$+100    	;abs 0x43f6
    4394:	31 29       	jnc	$+612    	;abs 0x45f8
}
    4396:	3d 2a       	jnc	$-900    	;abs 0x4012
    4398:	28 30       	jn	$+82     	;abs 0x43ea

void analog_graph_clear_all(void){
    439a:	2c 31       	jn	$+602    	;abs 0x45f4
    int i;
    for(i = 0; i < 8; i++){
    439c:	31 29       	jnc	$+612    	;abs 0x4600
        analog_graph_clear(i);
    439e:	00 6c       	addc	r12,	r0	
    43a0:	65 6e       	addc.b	@r14,	r5	
    43a2:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    SetupDone = 1;
}

void analog_graph_clear_all(void){
    int i;
    for(i = 0; i < 8; i++){
    43a6:	2c 31       	jn	$+602    	;abs 0x4600
    43a8:	31 29       	jnc	$+612    	;abs 0x460c
        analog_graph_clear(i);
    }
}
    43aa:	00 69       	addc	r9,	r0	
    43ac:	32 63       	addc	#-1,	r2	;r3 As==11
    43ae:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
    43b2:	74 65       	addc.b	@r5+,	r4	
    43b4:	31 36       	jge	$-924    	;abs 0x4018
    43b6:	5f 62 79 74 	addc.b	&0x7479,r15	
    43ba:	65 3a       	jl	$-820    	;abs 0x4086
    43bc:	46 28       	jnc	$+142    	;abs 0x444a
    43be:	30 2c       	jc	$+98     	;abs 0x4420
    43c0:	31 31       	jn	$+612    	;abs 0x4624
    43c2:	29 00 72 65 	mova	&0x06572,r9	
    43c6:	67 3a       	jl	$-816    	;abs 0x4096
    43c8:	50 28       	jnc	$+162    	;abs 0x446a
    43ca:	30 2c       	jc	$+98     	;abs 0x442c
    43cc:	34 29       	jnc	$+618    	;abs 0x4636
    43ce:	00 69       	addc	r9,	r0	
    43d0:	32 63       	addc	#-1,	r2	;r3 As==11
    43d2:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
    43d6:	74 65       	addc.b	@r5+,	r4	
    43d8:	31 36       	jge	$-924    	;abs 0x403c
    43da:	5f 6d 75 6c 	addc.b	27765(r13),r15	;0x6c75(r13)
    43de:	74 69       	addc.b	@r9+,	r4	
    43e0:	70 6c       	addc.b	@r12+,	r0	
    43e2:	65 73       	subc.b	#2,	r5	;r3 As==10
    43e4:	3a 46       	mov	@r6+,	r10	
    43e6:	28 30       	jn	$+82     	;abs 0x4438
    43e8:	2c 31       	jn	$+602    	;abs 0x4642
    43ea:	31 29       	jnc	$+612    	;abs 0x464e
    43ec:	00 64       	addc	r4,	r0	
    43ee:	61 74       	subc.b	@r4,	r1	
    43f0:	3a 50 28 31 	add	#12584,	r10	;#0x3128
    43f4:	2c 31       	jn	$+602    	;abs 0x464e
    43f6:	29 00 69 32 	mova	&0x03269,r9	
    43fa:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    43fc:	72 65       	addc.b	@r5+,	r2	
    43fe:	61 64       	addc.b	@r4,	r1	
    4400:	5f 62 79 74 	addc.b	&0x7479,r15	
    4404:	65 3a       	jl	$-820    	;abs 0x40d0
    4406:	46 28       	jnc	$+142    	;abs 0x4494
    4408:	30 2c       	jc	$+98     	;abs 0x446a
    440a:	31 31       	jn	$+612    	;abs 0x466e
    440c:	29 00 69 32 	mova	&0x03269,r9	
    4410:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    4412:	72 65       	addc.b	@r5+,	r2	
    4414:	61 64       	addc.b	@r4,	r1	
    4416:	5f 6d 75 6c 	addc.b	27765(r13),r15	;0x6c75(r13)
    441a:	74 69       	addc.b	@r9+,	r4	
    441c:	70 6c       	addc.b	@r12+,	r0	
    441e:	65 73       	subc.b	#2,	r5	;r3 As==10
    4420:	3a 46       	mov	@r6+,	r10	
    4422:	28 30       	jn	$+82     	;abs 0x4474
    4424:	2c 31       	jn	$+602    	;abs 0x467e
    4426:	31 29       	jnc	$+612    	;abs 0x468a
    4428:	00 69       	addc	r9,	r0	
    442a:	32 63       	addc	#-1,	r2	;r3 As==11
    442c:	5f 72 65 61 	subc.b	&0x6165,r15	
    4430:	64 31       	jn	$+714    	;abs 0x46fa
    4432:	36 5f       	add	@r15+,	r6	
    4434:	62 79       	subc.b	@r9,	r2	
    4436:	74 65       	addc.b	@r5+,	r4	
    4438:	3a 46       	mov	@r6+,	r10	
    443a:	28 30       	jn	$+82     	;abs 0x448c
    443c:	2c 31       	jn	$+602    	;abs 0x4696
    443e:	31 29       	jnc	$+612    	;abs 0x46a2
    4440:	00 69       	addc	r9,	r0	
    4442:	32 63       	addc	#-1,	r2	;r3 As==11
    4444:	5f 72 65 61 	subc.b	&0x6165,r15	
    4448:	64 31       	jn	$+714    	;abs 0x4712
    444a:	36 5f       	add	@r15+,	r6	
    444c:	6d 75       	subc.b	@r5,	r13	
    444e:	6c 74       	subc.b	@r4,	r12	
    4450:	69 70       	subc.b	@r0,	r9	
    4452:	6c 65       	addc.b	@r5,	r12	
    4454:	73 3a       	jl	$-792    	;abs 0x413c
    4456:	46 28       	jnc	$+142    	;abs 0x44e4
    4458:	30 2c       	jc	$+98     	;abs 0x44ba
    445a:	31 31       	jn	$+612    	;abs 0x46be
    445c:	29 00 4d 50 	mova	&0x0504d,r9	
    4460:	59 3a       	jl	$-844    	;abs 0x4114
    4462:	47 28       	jnc	$+144    	;abs 0x44f2
    4464:	31 30       	jn	$+100    	;abs 0x44c8
    4466:	2c 38       	jl	$+90     	;abs 0x44c0
    4468:	29 00 4d 50 	mova	&0x0504d,r9	
    446c:	59 53       	inc.b	r9		
    446e:	3a 47       	mov	@r7+,	r10	
    4470:	28 31       	jn	$+594    	;abs 0x46c2
    4472:	30 2c       	jc	$+98     	;abs 0x44d4
    4474:	38 29       	jnc	$+626    	;abs 0x46e6
    4476:	00 4d       	br	r13		
    4478:	41 43       	clr.b	r1		
    447a:	3a 47       	mov	@r7+,	r10	
    447c:	28 31       	jn	$+594    	;abs 0x46ce
    447e:	30 2c       	jc	$+98     	;abs 0x44e0
    4480:	38 29       	jnc	$+626    	;abs 0x46f2
    4482:	00 4d       	br	r13		
    4484:	41 43       	clr.b	r1		
    4486:	53 3a       	jl	$-856    	;abs 0x412e
    4488:	47 28       	jnc	$+144    	;abs 0x4518
    448a:	31 30       	jn	$+100    	;abs 0x44ee
    448c:	2c 38       	jl	$+90     	;abs 0x44e6
    448e:	29 00 4f 50 	mova	&0x0504f,r9	
    4492:	32 3a       	jl	$-922    	;abs 0x40f8
    4494:	47 28       	jnc	$+144    	;abs 0x4524
    4496:	31 30       	jn	$+100    	;abs 0x44fa
    4498:	2c 38       	jl	$+90     	;abs 0x44f2
    449a:	29 00 52 45 	mova	&0x04552,r9	
    449e:	53 4c       	.word	0x4c53;	????	Illegal as 2-op instr
    44a0:	4f 3a       	jl	$-864    	;abs 0x4140
    44a2:	47 28       	jnc	$+144    	;abs 0x4532
    44a4:	31 30       	jn	$+100    	;abs 0x4508
    44a6:	2c 38       	jl	$+90     	;abs 0x4500
    44a8:	29 00 52 45 	mova	&0x04552,r9	
    44ac:	53 48       	.word	0x4853;	????	Illegal as 2-op instr
    44ae:	49 3a       	jl	$-876    	;abs 0x4142
    44b0:	47 28       	jnc	$+144    	;abs 0x4540
    44b2:	31 30       	jn	$+100    	;abs 0x4516
    44b4:	2c 38       	jl	$+90     	;abs 0x450e
    44b6:	29 00 53 55 	mova	&0x05553,r9	
    44ba:	4d 45       	mov.b	r5,	r13	
    44bc:	58 54 3a 47 	add.b	18234(r4),r8	;0x473a(r4)
    44c0:	28 31       	jn	$+594    	;abs 0x4712
    44c2:	30 2c       	jc	$+98     	;abs 0x4524
    44c4:	38 29       	jnc	$+626    	;abs 0x4736
    44c6:	00 70       	subc	r0,	r0	
    44c8:	6f 72       	subc.b	#4,	r15	;r2 As==10
    44ca:	74 31       	jn	$+746    	;abs 0x47b4
    44cc:	3a 47       	mov	@r7+,	r10	
    44ce:	28 38       	jl	$+82     	;abs 0x4520
    44d0:	2c 34       	jge	$+90     	;abs 0x452a
    44d2:	29 00 70 6f 	mova	&0x06f70,r9	
    44d6:	72 74       	subc.b	@r4+,	r2	
    44d8:	32 3a       	jl	$-922    	;abs 0x413e
    44da:	47 28       	jnc	$+144    	;abs 0x456a
    44dc:	38 2c       	jc	$+114    	;abs 0x454e
    44de:	34 29       	jnc	$+618    	;abs 0x4748
    44e0:	00 70       	subc	r0,	r0	
    44e2:	6f 72       	subc.b	#4,	r15	;r2 As==10
    44e4:	74 33       	jn	$-278    	;abs 0x43ce
    44e6:	3a 47       	mov	@r7+,	r10	
    44e8:	28 38       	jl	$+82     	;abs 0x453a
    44ea:	2c 35       	jge	$+602    	;abs 0x4744
    44ec:	29 00 70 6f 	mova	&0x06f70,r9	
    44f0:	72 74       	subc.b	@r4+,	r2	
    44f2:	34 3a       	jl	$-918    	;abs 0x415c
    44f4:	47 28       	jnc	$+144    	;abs 0x4584
    44f6:	38 2c       	jc	$+114    	;abs 0x4568
    44f8:	35 29       	jnc	$+620    	;abs 0x4764
    44fa:	00 70       	subc	r0,	r0	
    44fc:	6f 72       	subc.b	#4,	r15	;r2 As==10
    44fe:	74 35       	jge	$+746    	;abs 0x47e8
    4500:	3a 47       	mov	@r7+,	r10	
    4502:	28 38       	jl	$+82     	;abs 0x4554
    4504:	2c 35       	jge	$+602    	;abs 0x475e
    4506:	29 00 70 6f 	mova	&0x06f70,r9	
    450a:	72 74       	subc.b	@r4+,	r2	
    450c:	36 3a       	jl	$-914    	;abs 0x417a
    450e:	47 28       	jnc	$+144    	;abs 0x459e
    4510:	38 2c       	jc	$+114    	;abs 0x4582
    4512:	35 29       	jnc	$+620    	;abs 0x477e
    4514:	00 55       	add	r5,	r0	
    4516:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    4518:	30 49       	br	@r9+		
    451a:	32 43       	mov	#-1,	r2	;r3 As==11
    451c:	4f 41       	mov.b	r1,	r15	
    451e:	3a 47       	mov	@r7+,	r10	
    4520:	28 31       	jn	$+594    	;abs 0x4772
    4522:	30 2c       	jc	$+98     	;abs 0x4584
    4524:	38 29       	jnc	$+626    	;abs 0x4796
    4526:	00 55       	add	r5,	r0	
    4528:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    452a:	30 49       	br	@r9+		
    452c:	32 43       	mov	#-1,	r2	;r3 As==11
    452e:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    4530:	3a 47       	mov	@r7+,	r10	
    4532:	28 31       	jn	$+594    	;abs 0x4784
    4534:	30 2c       	jc	$+98     	;abs 0x4596
    4536:	38 29       	jnc	$+626    	;abs 0x47a8
    4538:	00 55       	add	r5,	r0	
    453a:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    453c:	31 49       	mov	@r9+,	r1	
    453e:	32 43       	mov	#-1,	r2	;r3 As==11
    4540:	4f 41       	mov.b	r1,	r15	
    4542:	3a 47       	mov	@r7+,	r10	
    4544:	28 31       	jn	$+594    	;abs 0x4796
    4546:	30 2c       	jc	$+98     	;abs 0x45a8
    4548:	38 29       	jnc	$+626    	;abs 0x47ba
    454a:	00 55       	add	r5,	r0	
    454c:	43 42       	.word	0x4243;	????	Illegal as 2-op instr
    454e:	31 49       	mov	@r9+,	r1	
    4550:	32 43       	mov	#-1,	r2	;r3 As==11
    4552:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    4554:	3a 47       	mov	@r7+,	r10	
    4556:	28 31       	jn	$+594    	;abs 0x47a8
    4558:	30 2c       	jc	$+98     	;abs 0x45ba
    455a:	38 29       	jnc	$+626    	;abs 0x47cc
    455c:	00 54       	add	r4,	r0	
    455e:	41 30       	jn	$+132    	;abs 0x45e2
    4560:	49 56       	add.b	r6,	r9	
    4562:	3a 47       	mov	@r7+,	r10	
    4564:	28 31       	jn	$+594    	;abs 0x47b6
    4566:	30 2c       	jc	$+98     	;abs 0x45c8
    4568:	38 29       	jnc	$+626    	;abs 0x47da
    456a:	00 54       	add	r4,	r0	
    456c:	41 30       	jn	$+132    	;abs 0x45f0
    456e:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    4570:	4c 3a       	jl	$-870    	;abs 0x420a
    4572:	47 28       	jnc	$+144    	;abs 0x4602
    4574:	31 30       	jn	$+100    	;abs 0x45d8
    4576:	2c 38       	jl	$+90     	;abs 0x45d0
    4578:	29 00 54 41 	mova	&0x04154,r9	
    457c:	30 52       	add	#8,	r0	;r2 As==11
    457e:	3a 47       	mov	@r7+,	r10	
    4580:	28 31       	jn	$+594    	;abs 0x47d2
    4582:	30 2c       	jc	$+98     	;abs 0x45e4
    4584:	38 29       	jnc	$+626    	;abs 0x47f6
    4586:	00 54       	add	r4,	r0	
    4588:	41 30       	jn	$+132    	;abs 0x460c
    458a:	43 43       	clr.b	#0		;r3 As==00
    458c:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    4590:	47 28       	jnc	$+144    	;abs 0x4620
    4592:	31 30       	jn	$+100    	;abs 0x45f6
    4594:	2c 38       	jl	$+90     	;abs 0x45ee
    4596:	29 00 54 41 	mova	&0x04154,r9	
    459a:	30 43       	br	#-1		;r3 As==11
    459c:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    459e:	4c 31       	jn	$+666    	;abs 0x4838
    45a0:	3a 47       	mov	@r7+,	r10	
    45a2:	28 31       	jn	$+594    	;abs 0x47f4
    45a4:	30 2c       	jc	$+98     	;abs 0x4606
    45a6:	38 29       	jnc	$+626    	;abs 0x4818
    45a8:	00 54       	add	r4,	r0	
    45aa:	41 30       	jn	$+132    	;abs 0x462e
    45ac:	43 43       	clr.b	#0		;r3 As==00
    45ae:	52 30       	jn	$+166    	;abs 0x4654
    45b0:	3a 47       	mov	@r7+,	r10	
    45b2:	28 31       	jn	$+594    	;abs 0x4804
    45b4:	30 2c       	jc	$+98     	;abs 0x4616
    45b6:	38 29       	jnc	$+626    	;abs 0x4828
    45b8:	00 54       	add	r4,	r0	
    45ba:	41 30       	jn	$+132    	;abs 0x463e
    45bc:	43 43       	clr.b	#0		;r3 As==00
    45be:	52 31       	jn	$+678    	;abs 0x4864
    45c0:	3a 47       	mov	@r7+,	r10	
    45c2:	28 31       	jn	$+594    	;abs 0x4814
    45c4:	30 2c       	jc	$+98     	;abs 0x4626
    45c6:	38 29       	jnc	$+626    	;abs 0x4838
    45c8:	00 54       	add	r4,	r0	
    45ca:	41 30       	jn	$+132    	;abs 0x464e
    45cc:	43 43       	clr.b	#0		;r3 As==00
    45ce:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    45d2:	47 28       	jnc	$+144    	;abs 0x4662
    45d4:	31 30       	jn	$+100    	;abs 0x4638
    45d6:	2c 38       	jl	$+90     	;abs 0x4630
    45d8:	29 00 54 41 	mova	&0x04154,r9	
    45dc:	30 43       	br	#-1		;r3 As==11
    45de:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    45e0:	32 3a       	jl	$-922    	;abs 0x4246
    45e2:	47 28       	jnc	$+144    	;abs 0x4672
    45e4:	31 30       	jn	$+100    	;abs 0x4648
    45e6:	2c 38       	jl	$+90     	;abs 0x4640
    45e8:	29 00 74 69 	mova	&0x06974,r9	
    45ec:	6d 65       	addc.b	@r5,	r13	
    45ee:	72 61       	addc.b	@r1+,	r2	
    45f0:	3a 47       	mov	@r7+,	r10	
    45f2:	28 31       	jn	$+594    	;abs 0x4844
    45f4:	30 2c       	jc	$+98     	;abs 0x4656
    45f6:	35 29       	jnc	$+620    	;abs 0x4862
    45f8:	00 54       	add	r4,	r0	
    45fa:	42 49       	mov.b	r9,	r2	
    45fc:	56 3a       	jl	$-850    	;abs 0x42aa
    45fe:	47 28       	jnc	$+144    	;abs 0x468e
    4600:	31 30       	jn	$+100    	;abs 0x4664
    4602:	2c 38       	jl	$+90     	;abs 0x465c
    4604:	29 00 54 42 	mova	&0x04254,r9	
    4608:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    460a:	4c 3a       	jl	$-870    	;abs 0x42a4
    460c:	47 28       	jnc	$+144    	;abs 0x469c
    460e:	31 30       	jn	$+100    	;abs 0x4672
    4610:	2c 38       	jl	$+90     	;abs 0x466a
    4612:	29 00 54 42 	mova	&0x04254,r9	
    4616:	52 3a       	jl	$-858    	;abs 0x42bc
    4618:	47 28       	jnc	$+144    	;abs 0x46a8
    461a:	31 30       	jn	$+100    	;abs 0x467e
    461c:	2c 38       	jl	$+90     	;abs 0x4676
    461e:	29 00 54 42 	mova	&0x04254,r9	
    4622:	43 43       	clr.b	#0		;r3 As==00
    4624:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    4628:	47 28       	jnc	$+144    	;abs 0x46b8
    462a:	31 30       	jn	$+100    	;abs 0x468e
    462c:	2c 38       	jl	$+90     	;abs 0x4686
            
        case WAIT_CH7_BACK:
            lcd_goto(0,14);
            printf("WAIT CH7 BACK    ");
            
            if(ChannelInput[CH7_CH] < 2500){
    462e:	29 00 54 42 	mova	&0x04254,r9	
                MenuStep = DISPLAY;
            }
    4632:	43 43       	clr.b	#0		;r3 As==00
    4634:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
            break;
                    
        case PROCESS_OPTION:
            process_option();
    4638:	47 28       	jnc	$+144    	;abs 0x46c8
    463a:	31 30       	jn	$+100    	;abs 0x469e
            break;
    463c:	2c 38       	jl	$+90     	;abs 0x4696
    463e:	29 00 54 42 	mova	&0x04254,r9	
}

void process_option(){
    int i;
    switch (MenuOption){
        case RADIO_RAW:
    4642:	43 43       	clr.b	#0		;r3 As==00
    4644:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
            draw_rc_inputs(1);
    4648:	47 28       	jnc	$+144    	;abs 0x46d8
            break;
        case RADIO_CORRECT:
            draw_rc_inputs(0);
    464a:	31 30       	jn	$+100    	;abs 0x46ae
    464c:	2c 38       	jl	$+90     	;abs 0x46a6
            break;
    464e:	29 00 54 42 	mova	&0x04254,r9	
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
        
        case READY:
            lcd_clear(BLACK);
    4652:	43 43       	clr.b	#0		;r3 As==00
    4654:	52 30       	jn	$+166    	;abs 0x46fa
            for(i = 5; i >= 0; i--){ // contagem regressiva
    4656:	3a 47       	mov	@r7+,	r10	
    4658:	28 31       	jn	$+594    	;abs 0x48aa
                lcd_goto(8,8);
    465a:	30 2c       	jc	$+98     	;abs 0x46bc
    465c:	38 29       	jnc	$+626    	;abs 0x48ce
                printf("%d", i);
                delayms(1000);
    465e:	00 54       	add	r4,	r0	
            }
    4660:	42 43       	clr.b	r2		
    4662:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    4664:	31 3a       	jl	$-924    	;abs 0x42c8
            MotorArmed = TRUE;
    4666:	47 28       	jnc	$+144    	;abs 0x46f6
    4668:	31 30       	jn	$+100    	;abs 0x46cc
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
            break;
            
    466a:	2c 38       	jl	$+90     	;abs 0x46c4
    466c:	29 00 54 42 	mova	&0x04254,r9	
        case INITIAL_SETTINGS:
    4670:	43 43       	clr.b	#0		;r3 As==00
            
    4672:	52 32       	jn	$-858    	;abs 0x4318
    4674:	3a 47       	mov	@r7+,	r10	
        case READY:
            lcd_clear(BLACK);
            for(i = 5; i >= 0; i--){ // contagem regressiva
                lcd_goto(8,8);
                printf("%d", i);
                delayms(1000);
    4676:	28 31       	jn	$+594    	;abs 0x48c8
    4678:	30 2c       	jc	$+98     	;abs 0x46da
    467a:	38 29       	jnc	$+626    	;abs 0x48ec
            
        case INITIAL_SETTINGS:
            
            // seta o flag initial setup
            break;          
    }
    467c:	00 54       	add	r4,	r0	
    467e:	42 43       	clr.b	r2		
    4680:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    4682:	4c 33       	jn	$-358    	;abs 0x451c
    4684:	3a 47       	mov	@r7+,	r10	
    
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
    4686:	28 31       	jn	$+594    	;abs 0x48d8
    4688:	30 2c       	jc	$+98     	;abs 0x46ea
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    468a:	38 29       	jnc	$+626    	;abs 0x48fc
    468c:	00 54       	add	r4,	r0	
    468e:	42 43       	clr.b	r2		
                delayms(1000);
            }
            MotorArmed = TRUE;
            MenuVisible = FALSE;
            lcd_clear(BLACK);
            MenuStep = DISPLAY;
    4690:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    4692:	4c 34       	jge	$+154    	;abs 0x472c
    4694:	3a 47       	mov	@r7+,	r10	
        case RADIO_CORRECT:
            draw_rc_inputs(0);
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
            break;
    4696:	28 31       	jn	$+594    	;abs 0x48e8
    4698:	30 2c       	jc	$+98     	;abs 0x46fa
    469a:	38 29       	jnc	$+626    	;abs 0x490c
    }
    
    if(ChannelInput[CH7_CH] > 3500){
        MenuStep = WAIT_CH7_BACK;
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
        analog_graph_clear_all();
    469c:	00 54       	add	r4,	r0	
    469e:	42 43       	clr.b	r2		
        lcd_clear(BLACK);
    }
}
    46a0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    46a2:	4c 35       	jge	$+666    	;abs 0x493c

    46a4:	3a 47       	mov	@r7+,	r10	
    46a6:	28 31       	jn	$+594    	;abs 0x48f8
    46a8:	30 2c       	jc	$+98     	;abs 0x470a
void draw_analog_graph(void){
    int i, k;
    46aa:	38 29       	jnc	$+626    	;abs 0x491c
    46ac:	00 54       	add	r4,	r0	
    for(i = 0; i < 8; i++){
    46ae:	42 43       	clr.b	r2		
    46b0:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
        if((1 << i) & AnalogChecked){
    46b2:	4c 36       	jge	$-870    	;abs 0x434c
    46b4:	3a 47       	mov	@r7+,	r10	
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
    46b6:	28 31       	jn	$+594    	;abs 0x4908
    46b8:	30 2c       	jc	$+98     	;abs 0x471a
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
    46ba:	38 29       	jnc	$+626    	;abs 0x492c
    46bc:	00 54       	add	r4,	r0	
    46be:	42 43       	clr.b	r2		
    46c0:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
    46c2:	33 3a       	jl	$-920    	;abs 0x432a
    46c4:	47 28       	jnc	$+144    	;abs 0x4754
            }
    46c6:	31 30       	jn	$+100    	;abs 0x472a
    46c8:	2c 38       	jl	$+90     	;abs 0x4722
    46ca:	29 00 54 42 	mova	&0x04254,r9	
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
        }
    }
    46ce:	43 43       	clr.b	#0		;r3 As==00
    46d0:	52 34       	jge	$+166    	;abs 0x4776
    46d2:	3a 47       	mov	@r7+,	r10	
    46d4:	28 31       	jn	$+594    	;abs 0x4926
    46d6:	30 2c       	jc	$+98     	;abs 0x4738
    
}
    46d8:	38 29       	jnc	$+626    	;abs 0x494a
    46da:	00 54       	add	r4,	r0	
    46dc:	42 43       	clr.b	r2		
    46de:	43 52       	.word	0x5243;	????	Illegal as 2-op instr
    46e0:	35 3a       	jl	$-916    	;abs 0x434c
    46e2:	47 28       	jnc	$+144    	;abs 0x4772

void analog_graph_clear(int n){
    46e4:	31 30       	jn	$+100    	;abs 0x4748
    46e6:	2c 38       	jl	$+90     	;abs 0x4740
    46e8:	29 00 54 42 	mova	&0x04254,r9	
    46ec:	43 43       	clr.b	#0		;r3 As==00
    int i;
    46ee:	52 36       	jge	$-858    	;abs 0x4394
    46f0:	3a 47       	mov	@r7+,	r10	
    46f2:	28 31       	jn	$+594    	;abs 0x4944
    46f4:	30 2c       	jc	$+98     	;abs 0x4756
    46f6:	38 29       	jnc	$+626    	;abs 0x4968
    for(i = 0; i < GRAPH_LENGHT; i++){
    46f8:	00 74       	subc	r4,	r0	
    46fa:	69 6d       	addc.b	@r13,	r9	
    46fc:	65 72       	subc.b	#4,	r5	;r2 As==10
    46fe:	62 3a       	jl	$-826    	;abs 0x43c4
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
        AnalogGraph[n][i] = 0;
    }
    4700:	47 28       	jnc	$+144    	;abs 0x4790
    4702:	31 31       	jn	$+612    	;abs 0x4966
    4704:	2c 35       	jge	$+602    	;abs 0x495e
    4706:	29 00 46 43 	mova	&0x04346,r9	
}

    470a:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
    470e:	47 28       	jnc	$+144    	;abs 0x479e
    4710:	31 30       	jn	$+100    	;abs 0x4774
    4712:	2c 38       	jl	$+90     	;abs 0x476c
void process_analog_menu(void){
    draw_analog_graph();
    4714:	29 00 46 43 	mova	&0x04346,r9	
    4718:	54 4c 32 3a 	mov.b	14898(r12),r4	;0x3a32(r12)
    switch(MenuAnalog){
    471c:	47 28       	jnc	$+144    	;abs 0x47ac
    471e:	31 30       	jn	$+100    	;abs 0x4782
    4720:	2c 38       	jl	$+90     	;abs 0x477a
    4722:	29 00 46 43 	mova	&0x04346,r9	
        case DISPLAY:
    4726:	54 4c 33 3a 	mov.b	14899(r12),r4	;0x3a33(r12)
    472a:	47 28       	jnc	$+144    	;abs 0x47ba
    472c:	31 30       	jn	$+100    	;abs 0x4790
            lcd_goto(4,0);
    472e:	2c 38       	jl	$+90     	;abs 0x4788
    4730:	29 00 41 44 	mova	&0x04441,r9	
    4734:	43 31       	jn	$+648    	;abs 0x49bc
    4736:	32 43       	mov	#-1,	r2	;r3 As==11
            printf("ANALOG GRAPH   ");
    4738:	54 4c 30 3a 	mov.b	14896(r12),r4	;0x3a30(r12)
    473c:	47 28       	jnc	$+144    	;abs 0x47cc
    473e:	31 30       	jn	$+100    	;abs 0x47a2
    4740:	2c 38       	jl	$+90     	;abs 0x479a
            
    4742:	29 00 41 44 	mova	&0x04441,r9	
    4746:	43 31       	jn	$+648    	;abs 0x49ce
    4748:	32 43       	mov	#-1,	r2	;r3 As==11
    474a:	54 4c 31 3a 	mov.b	14897(r12),r4	;0x3a31(r12)
            lcd_goto(0,14);
    474e:	47 28       	jnc	$+144    	;abs 0x47de
    4750:	31 30       	jn	$+100    	;abs 0x47b4
    4752:	2c 38       	jl	$+90     	;abs 0x47ac
    4754:	29 00 41 44 	mova	&0x04441,r9	
            printf("DISPLAY             ");
    4758:	43 31       	jn	$+648    	;abs 0x49e0
    475a:	32 49       	mov	@r9+,	r2	
    475c:	46 47       	mov.b	r7,	r6	
    475e:	3a 47       	mov	@r7+,	r10	

            refresh_analog_menu();
    4760:	28 31       	jn	$+594    	;abs 0x49b2
    4762:	30 2c       	jc	$+98     	;abs 0x47c4
    4764:	38 29       	jnc	$+626    	;abs 0x49d6
    4766:	00 41       	br	r1		
            MenuAnalog = SELECT;
    4768:	44 43       	clr.b	r4		
    476a:	31 32       	jn	$-924    	;abs 0x43ce
    476c:	49 45       	mov.b	r5,	r9	
    476e:	3a 47       	mov	@r7+,	r10	
            break;
    4770:	28 31       	jn	$+594    	;abs 0x49c2
    4772:	30 2c       	jc	$+98     	;abs 0x47d4
    4774:	38 29       	jnc	$+626    	;abs 0x49e6
    4776:	00 41       	br	r1		
    4778:	44 43       	clr.b	r4		
        case SELECT:
    477a:	31 32       	jn	$-924    	;abs 0x43de
    477c:	49 56       	add.b	r6,	r9	
    477e:	3a 47       	mov	@r7+,	r10	
    4780:	28 31       	jn	$+594    	;abs 0x49d2
    4782:	30 2c       	jc	$+98     	;abs 0x47e4
            lcd_goto(0,14);
    4784:	38 29       	jnc	$+626    	;abs 0x49f6
    4786:	00 61       	addc	r1,	r0	
    4788:	64 63       	addc.b	#2,	r4	;r3 As==10
    478a:	31 32       	jn	$-924    	;abs 0x43ee
    478c:	3a 47       	mov	@r7+,	r10	
            printf("SELECT            ");
    478e:	28 31       	jn	$+594    	;abs 0x49e0
    4790:	35 2c       	jc	$+108    	;abs 0x47fc
    4792:	37 29       	jnc	$+624    	;abs 0x4a02
    4794:	00 41       	br	r1		
    4796:	44 43       	clr.b	r4		

    4798:	31 32       	jn	$-924    	;abs 0x43fc
    479a:	4d 45       	mov.b	r5,	r13	
    479c:	4d 30       	jn	$+156    	;abs 0x4838
    479e:	3a 47       	mov	@r7+,	r10	
    47a0:	28 31       	jn	$+594    	;abs 0x49f2
            // move para os lados
    47a2:	30 2c       	jc	$+98     	;abs 0x4804
    47a4:	38 29       	jnc	$+626    	;abs 0x4a16
    47a6:	00 41       	br	r1		
    47a8:	44 43       	clr.b	r4		
    47aa:	31 32       	jn	$-924    	;abs 0x440e
            if(ChannelInput[ROLL_CH] > 3500){
                MenuAnalog = WAIT_ROLL_LEFT;
    47ac:	4d 45       	mov.b	r5,	r13	
    47ae:	4d 31       	jn	$+668    	;abs 0x4a4a
    47b0:	3a 47       	mov	@r7+,	r10	
    47b2:	28 31       	jn	$+594    	;abs 0x4a04
            }
    47b4:	30 2c       	jc	$+98     	;abs 0x4816
    47b6:	38 29       	jnc	$+626    	;abs 0x4a28
    47b8:	00 41       	br	r1		
    47ba:	44 43       	clr.b	r4		
    47bc:	31 32       	jn	$-924    	;abs 0x4420
            else{
    47be:	4d 45       	mov.b	r5,	r13	
    47c0:	4d 32       	jn	$-868    	;abs 0x445c
    47c2:	3a 47       	mov	@r7+,	r10	
    47c4:	28 31       	jn	$+594    	;abs 0x4a16
    47c6:	30 2c       	jc	$+98     	;abs 0x4828
                if(ChannelInput[ROLL_CH] < 2500){
    47c8:	38 29       	jnc	$+626    	;abs 0x4a3a
    47ca:	00 41       	br	r1		
    47cc:	44 43       	clr.b	r4		
    47ce:	31 32       	jn	$-924    	;abs 0x4432
    47d0:	4d 45       	mov.b	r5,	r13	
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
            }
    47d2:	4d 33       	jn	$-356    	;abs 0x466e
    47d4:	3a 47       	mov	@r7+,	r10	
    47d6:	28 31       	jn	$+594    	;abs 0x4a28
    47d8:	30 2c       	jc	$+98     	;abs 0x483a
    47da:	38 29       	jnc	$+626    	;abs 0x4a4c
            
            // check uncheck
    47dc:	00 41       	br	r1		
    47de:	44 43       	clr.b	r4		
    47e0:	31 32       	jn	$-924    	;abs 0x4444
    47e2:	4d 45       	mov.b	r5,	r13	
    47e4:	4d 34       	jge	$+156    	;abs 0x4880
    47e6:	3a 47       	mov	@r7+,	r10	
    47e8:	28 31       	jn	$+594    	;abs 0x4a3a
    47ea:	30 2c       	jc	$+98     	;abs 0x484c
    47ec:	38 29       	jnc	$+626    	;abs 0x4a5e
    47ee:	00 41       	br	r1		
            if(ChannelInput[PITCH_CH] < 2500){
                MenuAnalog = WAIT_PITCH_DOWN;
            }
    47f0:	44 43       	clr.b	r4		
    47f2:	31 32       	jn	$-924    	;abs 0x4456
            else{
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuAnalog = WAIT_PITCH_UP;
                }
    47f4:	4d 45       	mov.b	r5,	r13	
    47f6:	4d 35       	jge	$+668    	;abs 0x4a92
    47f8:	3a 47       	mov	@r7+,	r10	
    47fa:	28 31       	jn	$+594    	;abs 0x4a4c
    47fc:	30 2c       	jc	$+98     	;abs 0x485e
    47fe:	38 29       	jnc	$+626    	;abs 0x4a70
    4800:	00 41       	br	r1		
    4802:	44 43       	clr.b	r4		
    4804:	31 32       	jn	$-924    	;abs 0x4468
    4806:	4d 45       	mov.b	r5,	r13	
            }
    4808:	4d 36       	jge	$-868    	;abs 0x44a4
            
            break;
        case WAIT_PITCH_DOWN:
    480a:	3a 47       	mov	@r7+,	r10	
    480c:	28 31       	jn	$+594    	;abs 0x4a5e
            lcd_goto(0,14);
    480e:	30 2c       	jc	$+98     	;abs 0x4870
    4810:	38 29       	jnc	$+626    	;abs 0x4a82
    4812:	00 41       	br	r1		
    4814:	44 43       	clr.b	r4		
            printf("WAIT PITCH DOWN    ");
    4816:	31 32       	jn	$-924    	;abs 0x447a
    4818:	4d 45       	mov.b	r5,	r13	
    481a:	4d 37       	jge	$-356    	;abs 0x46b6
    481c:	3a 47       	mov	@r7+,	r10	

    481e:	28 31       	jn	$+594    	;abs 0x4a70
    4820:	30 2c       	jc	$+98     	;abs 0x4882
            if(ChannelInput[PITCH_CH] > 2500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                MenuAnalog = DISPLAY;
    4822:	38 29       	jnc	$+626    	;abs 0x4a94
    4824:	00 41       	br	r1		
    4826:	44 43       	clr.b	r4		
    4828:	31 32       	jn	$-924    	;abs 0x448c
            }
    482a:	4d 45       	mov.b	r5,	r13	
    482c:	4d 38       	jl	$+156    	;abs 0x48c8
    482e:	3a 47       	mov	@r7+,	r10	
    4830:	28 31       	jn	$+594    	;abs 0x4a82
            break;
    4832:	30 2c       	jc	$+98     	;abs 0x4894
    4834:	38 29       	jnc	$+626    	;abs 0x4aa6
    4836:	00 41       	br	r1		
    4838:	44 43       	clr.b	r4		
            
    483a:	31 32       	jn	$-924    	;abs 0x449e
    483c:	4d 45       	mov.b	r5,	r13	
    483e:	4d 39       	jl	$+668    	;abs 0x4ada
    4840:	3a 47       	mov	@r7+,	r10	
        case WAIT_PITCH_UP:
    4842:	28 31       	jn	$+594    	;abs 0x4a94
    4844:	30 2c       	jc	$+98     	;abs 0x48a6
    4846:	38 29       	jnc	$+626    	;abs 0x4ab8
            lcd_goto(0,14);
            printf("WAIT PITCH UP    ");

    4848:	00 41       	br	r1		
    484a:	44 43       	clr.b	r4		
    484c:	31 32       	jn	$-924    	;abs 0x44b0
    484e:	4d 45       	mov.b	r5,	r13	
    4850:	4d 31       	jn	$+668    	;abs 0x4aec
    4852:	30 3a       	jl	$-926    	;abs 0x44b4
    4854:	47 28       	jnc	$+144    	;abs 0x48e4
    4856:	31 30       	jn	$+100    	;abs 0x48ba
    4858:	2c 38       	jl	$+90     	;abs 0x48b2
    485a:	29 00 41 44 	mova	&0x04441,r9	
    485e:	43 31       	jn	$+648    	;abs 0x4ae6
    4860:	32 4d       	mov	@r13+,	r2	
            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
                analog_graph_clear(AnalogSelect);
    4862:	45 4d       	mov.b	r13,	r5	
    4864:	31 31       	jn	$+612    	;abs 0x4ac8
    4866:	3a 47       	mov	@r7+,	r10	
    4868:	28 31       	jn	$+594    	;abs 0x4aba
    486a:	30 2c       	jc	$+98     	;abs 0x48cc
    486c:	38 29       	jnc	$+626    	;abs 0x4ade
    486e:	00 41       	br	r1		
    4870:	44 43       	clr.b	r4		
                MenuAnalog = DISPLAY;
    4872:	31 32       	jn	$-924    	;abs 0x44d6
    4874:	4d 45       	mov.b	r5,	r13	
    4876:	4d 31       	jn	$+668    	;abs 0x4b12
    4878:	32 3a       	jl	$-922    	;abs 0x44de
    487a:	47 28       	jnc	$+144    	;abs 0x490a
    487c:	31 30       	jn	$+100    	;abs 0x48e0
    487e:	2c 38       	jl	$+90     	;abs 0x48d8
    4880:	29 00 41 44 	mova	&0x04441,r9	
            }
            break;
    4884:	43 31       	jn	$+648    	;abs 0x4b0c
    4886:	32 4d       	mov	@r13+,	r2	
    4888:	45 4d       	mov.b	r13,	r5	
    488a:	31 33       	jn	$-412    	;abs 0x46ee
    488c:	3a 47       	mov	@r7+,	r10	
    488e:	28 31       	jn	$+594    	;abs 0x4ae0
            
        case WAIT_ROLL_RIGHT:
    4890:	30 2c       	jc	$+98     	;abs 0x48f2
    4892:	38 29       	jnc	$+626    	;abs 0x4b04
    4894:	00 41       	br	r1		
    4896:	44 43       	clr.b	r4		
    4898:	31 32       	jn	$-924    	;abs 0x44fc
    489a:	4d 45       	mov.b	r5,	r13	
    489c:	4d 31       	jn	$+668    	;abs 0x4b38
    489e:	34 3a       	jl	$-918    	;abs 0x4508
    48a0:	47 28       	jnc	$+144    	;abs 0x4930
    48a2:	31 30       	jn	$+100    	;abs 0x4906
                lcd_goto(0,14);
    48a4:	2c 38       	jl	$+90     	;abs 0x48fe
    48a6:	29 00 41 44 	mova	&0x04441,r9	
                printf("WAIT ROLL RIGHT ");

    48aa:	43 31       	jn	$+648    	;abs 0x4b32
    48ac:	32 4d       	mov	@r13+,	r2	
    48ae:	45 4d       	mov.b	r13,	r5	
    48b0:	31 35       	jge	$+612    	;abs 0x4b14
                MenuAnalog = DISPLAY;
            }
            break;
            
        case WAIT_ROLL_RIGHT:
                lcd_goto(0,14);
    48b2:	3a 47       	mov	@r7+,	r10	
    48b4:	28 31       	jn	$+594    	;abs 0x4b06
    48b6:	30 2c       	jc	$+98     	;abs 0x4918
                printf("WAIT ROLL RIGHT ");

                if(ChannelInput[PITCH_CH] < 3500){
                    if(AnalogSelect > 0){
                        AnalogSelect--;
    48b8:	38 29       	jnc	$+626    	;abs 0x4b2a
    48ba:	00 44       	br	r4		
                    }
    48bc:	41 43       	clr.b	r1		
    48be:	31 32       	jn	$-924    	;abs 0x4522
                    MenuAnalog = DISPLAY;
                }
    48c0:	5f 30       	jn	$+192    	;abs 0x4980
    48c2:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    48c4:	4c 3a       	jl	$-870    	;abs 0x455e
    48c6:	47 28       	jnc	$+144    	;abs 0x4956
    48c8:	31 30       	jn	$+100    	;abs 0x492c
    48ca:	2c 38       	jl	$+90     	;abs 0x4924
    48cc:	29 00 44 41 	mova	&0x04144,r9	
            break;
    48d0:	43 31       	jn	$+648    	;abs 0x4b58
    48d2:	32 5f       	add	@r15+,	r2	
    48d4:	31 43       	mov	#-1,	r1	;r3 As==11
    48d6:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    48da:	28 31       	jn	$+594    	;abs 0x4b2c
            
    48dc:	30 2c       	jc	$+98     	;abs 0x493e
    48de:	38 29       	jnc	$+626    	;abs 0x4b50
    48e0:	00 44       	br	r4		
    48e2:	41 43       	clr.b	r1		
    48e4:	31 32       	jn	$-924    	;abs 0x4548
    48e6:	5f 30       	jn	$+192    	;abs 0x49a6
        case WAIT_ROLL_LEFT:
                lcd_goto(0,14);
                printf("WAIT ROLL LEFT   ");
    48e8:	44 41       	mov.b	r1,	r4	
    48ea:	54 3a       	jl	$-854    	;abs 0x4594
    48ec:	47 28       	jnc	$+144    	;abs 0x497c
    48ee:	31 30       	jn	$+100    	;abs 0x4952
    48f0:	2c 38       	jl	$+90     	;abs 0x494a
    48f2:	29 00 44 41 	mova	&0x04144,r9	
    48f6:	43 31       	jn	$+648    	;abs 0x4b7e
    48f8:	32 5f       	add	@r15+,	r2	
    48fa:	31 44       	mov	@r4+,	r1	
    48fc:	41 54       	add.b	r4,	r1	
    48fe:	3a 47       	mov	@r7+,	r10	
    4900:	28 31       	jn	$+594    	;abs 0x4b52
    4902:	30 2c       	jc	$+98     	;abs 0x4964
    4904:	38 29       	jnc	$+626    	;abs 0x4b76
    4906:	00 44       	br	r4		
    4908:	4d 41       	mov.b	r1,	r13	
        
    490a:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    490c:	4c 30       	jn	$+154    	;abs 0x49a6
    490e:	3a 47       	mov	@r7+,	r10	
    4910:	28 31       	jn	$+594    	;abs 0x4b62
                if(ChannelInput[PITCH_CH] > 2500){
    4912:	30 2c       	jc	$+98     	;abs 0x4974
    4914:	38 29       	jnc	$+626    	;abs 0x4b86
                   if(AnalogSelect < 7){
    4916:	00 44       	br	r4		
    4918:	4d 41       	mov.b	r1,	r13	
    491a:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    491c:	4c 31       	jn	$+666    	;abs 0x4bb6
    491e:	3a 47       	mov	@r7+,	r10	
    4920:	28 31       	jn	$+594    	;abs 0x4b72
    4922:	30 2c       	jc	$+98     	;abs 0x4984
    4924:	38 29       	jnc	$+626    	;abs 0x4b96
                        AnalogSelect++;
    4926:	00 44       	br	r4		
                    }
    4928:	4d 41       	mov.b	r1,	r13	
                    MenuAnalog = DISPLAY;
    492a:	49 56       	add.b	r6,	r9	
    492c:	3a 47       	mov	@r7+,	r10	
    492e:	28 31       	jn	$+594    	;abs 0x4b80
    4930:	30 2c       	jc	$+98     	;abs 0x4992
    4932:	38 29       	jnc	$+626    	;abs 0x4ba4
    4934:	00 44       	br	r4		
    4936:	4d 41       	mov.b	r1,	r13	
    4938:	30 43       	br	#-1		;r3 As==11
    493a:	54 4c 3a 47 	mov.b	18234(r12),r4	;0x473a(r12)
    493e:	28 31       	jn	$+594    	;abs 0x4b90
    4940:	30 2c       	jc	$+98     	;abs 0x49a2

    4942:	38 29       	jnc	$+626    	;abs 0x4bb4
    4944:	00 44       	br	r4		
    4946:	4d 41       	mov.b	r1,	r13	
    4948:	30 53       	add	#-1,	r0	;r3 As==11
    494a:	41 4c       	mov.b	r12,	r1	
    494c:	3a 47       	mov	@r7+,	r10	
    494e:	28 31       	jn	$+594    	;abs 0x4ba0
    4950:	30 2c       	jc	$+98     	;abs 0x49b2
    4952:	38 29       	jnc	$+626    	;abs 0x4bc4
    4954:	00 44       	br	r4		
    4956:	4d 41       	mov.b	r1,	r13	
    4958:	30 44       	br	@r4+		
                }
    495a:	41 4c       	mov.b	r12,	r1	
    495c:	3a 47       	mov	@r7+,	r10	
    495e:	28 31       	jn	$+594    	;abs 0x4bb0
    4960:	30 2c       	jc	$+98     	;abs 0x49c2
    4962:	38 29       	jnc	$+626    	;abs 0x4bd4
    4964:	00 44       	br	r4		
    4966:	4d 41       	mov.b	r1,	r13	
    4968:	30 53       	add	#-1,	r0	;r3 As==11
    496a:	5a 3a       	jl	$-842    	;abs 0x4620
    496c:	47 28       	jnc	$+144    	;abs 0x49fc
    496e:	31 30       	jn	$+100    	;abs 0x49d2
    4970:	2c 38       	jl	$+90     	;abs 0x49ca
            break;
    4972:	29 00 44 4d 	mova	&0x04d44,r9	
    4976:	41 31       	jn	$+644    	;abs 0x4bfa
    4978:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    497a:	4c 3a       	jl	$-870    	;abs 0x4614
    497c:	47 28       	jnc	$+144    	;abs 0x4a0c
    497e:	31 30       	jn	$+100    	;abs 0x49e2
    4980:	2c 38       	jl	$+90     	;abs 0x49da
    4982:	29 00 44 4d 	mova	&0x04d44,r9	
    4986:	41 31       	jn	$+644    	;abs 0x4c0a
    4988:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
            
    498a:	4c 3a       	jl	$-870    	;abs 0x4624
    498c:	47 28       	jnc	$+144    	;abs 0x4a1c
    498e:	31 30       	jn	$+100    	;abs 0x49f2
        case PROCESS_OPTION:
    4990:	2c 38       	jl	$+90     	;abs 0x49ea
    4992:	29 00 44 4d 	mova	&0x04d44,r9	
            break;
    4996:	41 31       	jn	$+644    	;abs 0x4c1a
        case WAIT_CH7_BACK:
    4998:	44 41       	mov.b	r1,	r4	
    499a:	3a 47       	mov	@r7+,	r10	
            break;
    499c:	28 31       	jn	$+594    	;abs 0x4bee
    499e:	30 2c       	jc	$+98     	;abs 0x4a00
    49a0:	38 29       	jnc	$+626    	;abs 0x4c12
    49a2:	00 44       	br	r4		
    49a4:	4d 41       	mov.b	r1,	r13	
    49a6:	31 44       	mov	@r4+,	r1	
    49a8:	41 4c       	mov.b	r12,	r1	
    49aa:	3a 47       	mov	@r7+,	r10	
    49ac:	28 31       	jn	$+594    	;abs 0x4bfe
    49ae:	30 2c       	jc	$+98     	;abs 0x4a10
    49b0:	38 29       	jnc	$+626    	;abs 0x4c22
    49b2:	00 44       	br	r4		
    49b4:	4d 41       	mov.b	r1,	r13	
    49b6:	31 53       	add	#-1,	r1	;r3 As==11
    49b8:	5a 3a       	jl	$-842    	;abs 0x466e
    49ba:	47 28       	jnc	$+144    	;abs 0x4a4a
    49bc:	31 30       	jn	$+100    	;abs 0x4a20
    49be:	2c 38       	jl	$+90     	;abs 0x4a18
    49c0:	29 00 44 4d 	mova	&0x04d44,r9	
    }
}

    49c4:	41 32       	jn	$-892    	;abs 0x4648
    49c6:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
void refresh_analog_menu(void){
    49c8:	4c 3a       	jl	$-870    	;abs 0x4662
    49ca:	47 28       	jnc	$+144    	;abs 0x4a5a
    49cc:	31 30       	jn	$+100    	;abs 0x4a30
    49ce:	2c 38       	jl	$+90     	;abs 0x4a28
    49d0:	29 00 44 4d 	mova	&0x04d44,r9	
    int i;
    49d4:	41 32       	jn	$-892    	;abs 0x4658
    49d6:	53 41       	.word	0x4153;	????	Illegal as 2-op instr
    49d8:	4c 3a       	jl	$-870    	;abs 0x4672
    49da:	47 28       	jnc	$+144    	;abs 0x4a6a
    49dc:	31 30       	jn	$+100    	;abs 0x4a40
    49de:	2c 38       	jl	$+90     	;abs 0x4a38
    49e0:	29 00 44 4d 	mova	&0x04d44,r9	
    49e4:	41 32       	jn	$-892    	;abs 0x4668
    lcd_goto(1,12);
    49e6:	44 41       	mov.b	r1,	r4	
    49e8:	4c 3a       	jl	$-870    	;abs 0x4682
    49ea:	47 28       	jnc	$+144    	;abs 0x4a7a
    49ec:	31 30       	jn	$+100    	;abs 0x4a50
    49ee:	2c 38       	jl	$+90     	;abs 0x4a48
    49f0:	29 00 44 4d 	mova	&0x04d44,r9	
    49f4:	41 32       	jn	$-892    	;abs 0x4678
    49f6:	53 5a       	.word	0x5a53;	????	Illegal as 2-op instr
    49f8:	3a 47       	mov	@r7+,	r10	
    for(i = 0; i < 8; i++){             // para as 8 entradas analogicas
    49fa:	28 31       	jn	$+594    	;abs 0x4c4c
    49fc:	30 2c       	jc	$+98     	;abs 0x4a5e
    49fe:	38 29       	jnc	$+626    	;abs 0x4c70
    4a00:	00 57       	add	r7,	r0	
    4a02:	44 54       	rla.b	r4		
    4a04:	43 54       	.word	0x5443;	????	Illegal as 2-op instr
    4a06:	4c 3a       	jl	$-870    	;abs 0x46a0
    4a08:	47 28       	jnc	$+144    	;abs 0x4a98
        if((1 << i) & AnalogChecked){   // se a entrada analogica estiver visible
    4a0a:	31 30       	jn	$+100    	;abs 0x4a6e
    4a0c:	2c 38       	jl	$+90     	;abs 0x4a66
    4a0e:	29 00 54 4c 	mova	&0x04c54,r9	
    4a12:	56 5f 43 48 	add.b	18499(r15),r6	;0x4843(r15)
    4a16:	45 43       	clr.b	r5		
    4a18:	4b 53       	add.b	#0,	r11	;r3 As==00
            color_back = LIME;          // a cor do fundo muda para azul
    4a1a:	55 4d 3a 47 	mov.b	18234(r13),r5	;0x473a(r13)
    4a1e:	28 31       	jn	$+594    	;abs 0x4c70
    4a20:	30 2c       	jc	$+98     	;abs 0x4a82
    4a22:	38 29       	jnc	$+626    	;abs 0x4c94
    4a24:	00 69       	addc	r9,	r0	
    4a26:	32 63       	addc	#-1,	r2	;r3 As==11
    4a28:	5f 73       	subc.b	#1,	r15	;r3 As==01
    4a2a:	6c 61       	addc.b	@r1,	r12	
    4a2c:	76 65       	addc.b	@r5+,	r6	
            color_fore = BLACK;
    4a2e:	5f 61 64 64 	addc.b	25700(r1),r15	;0x6464(r1)
    4a32:	72 65       	addc.b	@r5+,	r2	
    4a34:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    4a36:	3a 47       	mov	@r7+,	r10	
    4a38:	28 30       	jn	$+82     	;abs 0x4a8a
    4a3a:	2c 31       	jn	$+602    	;abs 0x4c94
    4a3c:	31 29       	jnc	$+612    	;abs 0x4ca0
        }
    4a3e:	00 61       	addc	r1,	r0	
    4a40:	6e 61       	addc.b	@r1,	r14	
    4a42:	6c 6f       	addc.b	@r15,	r12	
    4a44:	67 2e       	jc	$-816    	;abs 0x4714
    4a46:	63 00 61 6e 	mova	r0,	&0x36e61
    4a4a:	61 6c       	addc.b	@r12,	r1	
    4a4c:	6f 67       	addc.b	@r7,	r15	
    4a4e:	5f 69 6e 69 	addc.b	26990(r9),r15	;0x696e(r9)
        else{                           // senao
    4a52:	74 3a       	jl	$-790    	;abs 0x473c
    4a54:	46 28       	jnc	$+142    	;abs 0x4ae2
    4a56:	30 2c       	jc	$+98     	;abs 0x4ab8
    4a58:	32 30       	jn	$+102    	;abs 0x4abe
    4a5a:	29 00 61 6e 	mova	&0x06e61,r9	
    4a5e:	61 6c       	addc.b	@r12,	r1	
    4a60:	6f 67       	addc.b	@r7,	r15	
    4a62:	5f 63       	addc.b	#1,	r15	;r3 As==01
    4a64:	61 6c       	addc.b	@r12,	r1	
    4a66:	69 62       	addc.b	#4,	r9	;r2 As==10
    4a68:	72 61       	addc.b	@r1+,	r2	
            color_back = BLACK;         // a cor do fundo muda para preto
            color_fore = LIME;
    4a6a:	74 65       	addc.b	@r5+,	r4	
    4a6c:	5f 63       	addc.b	#1,	r15	;r3 As==01
    4a6e:	68 61       	addc.b	@r1,	r8	
    4a70:	6e 6e       	addc.b	@r14,	r14	
    4a72:	65 6c       	addc.b	@r12,	r5	
    4a74:	3a 46       	mov	@r6+,	r10	
    4a76:	28 30       	jn	$+82     	;abs 0x4ac8
    4a78:	2c 32       	jn	$-934    	;abs 0x46d2
    4a7a:	30 29       	jnc	$+610    	;abs 0x4cdc
    4a7c:	00 69       	addc	r9,	r0	
    4a7e:	3a 50 28 30 	add	#12328,	r10	;#0x3028
        }
        
    4a82:	2c 31       	jn	$+602    	;abs 0x4cdc
    4a84:	29 00 6a 3a 	mova	&0x03a6a,r9	
    4a88:	72 28       	jnc	$+230    	;abs 0x4b6e
    4a8a:	30 2c       	jc	$+98     	;abs 0x4aec
    4a8c:	31 29       	jnc	$+612    	;abs 0x4cf0
    4a8e:	00 6d       	addc	r13,	r0	
    4a90:	65 64       	addc.b	@r4,	r5	
    4a92:	69 61       	addc.b	@r1,	r9	
    4a94:	3a 72       	subc	#8,	r10	;r2 As==11
    4a96:	28 30       	jn	$+82     	;abs 0x4ae8
    4a98:	2c 31       	jn	$+602    	;abs 0x4cf2
    4a9a:	32 29       	jnc	$+614    	;abs 0x4d00
    4a9c:	00 61       	addc	r1,	r0	
    4a9e:	6e 61       	addc.b	@r1,	r14	
    4aa0:	6c 6f       	addc.b	@r15,	r12	
        if(AnalogSelect == i){          // se o cursor estiver em cima   
    4aa2:	67 5f       	add.b	@r15,	r7	
    4aa4:	72 65       	addc.b	@r5+,	r2	
            color_fore = RED;           // a cor da letra muda para vermelho 
    4aa6:	66 72       	subc.b	#4,	r6	;r2 As==10
    4aa8:	65 73       	subc.b	#2,	r5	;r3 As==10
        }                                                                
        else{                           // se nao                        
    4aaa:	68 5f       	add.b	@r15,	r8	
    4aac:	61 6c       	addc.b	@r12,	r1	
            if(color_back == LIME){
                color_fore = BLACK;
            }
        }                               
        
    4aae:	6c 3a       	jl	$-806    	;abs 0x4788
    4ab0:	46 28       	jnc	$+142    	;abs 0x4b3e
        printf("%d",i);
        // ajusta as cores para o normal
    4ab2:	30 2c       	jc	$+98     	;abs 0x4b14
    4ab4:	32 30       	jn	$+102    	;abs 0x4b1a
        color_fore = LIME;
        color_back = BLACK;
        printf(" ");
    }
    printf("                    ");
    4ab6:	29 00 61 6e 	mova	&0x06e61,r9	
}

    4aba:	61 6c       	addc.b	@r12,	r1	
interrupt (TIMERA0_VECTOR) TIMERA0_ISR_HOOK(void){
    4abc:	6f 67       	addc.b	@r7,	r15	
    ControlCounter++;
    RCCounter++;
    4abe:	5f 72 65 66 	subc.b	&0x6665,r15	
    4ac2:	72 65       	addc.b	@r5+,	r2	
    4ac4:	73 68       	.word	0x6873;	????	Illegal as 2-op instr
    4ac6:	5f 63       	addc.b	#1,	r15	;r3 As==01
    MenuCounter++;
}
    4ac8:	68 61       	addc.b	@r1,	r8	
    4aca:	6e 6e       	addc.b	@r14,	r14	

    4acc:	65 6c       	addc.b	@r12,	r5	
    4ace:	3a 46       	mov	@r6+,	r10	
    4ad0:	28 30       	jn	$+82     	;abs 0x4b22
    4ad2:	2c 32       	jn	$-934    	;abs 0x472c
void clock_init(void)
    4ad4:	30 29       	jnc	$+610    	;abs 0x4d36
    4ad6:	00 41       	br	r1		
{
    4ad8:	6e 61       	addc.b	@r1,	r14	
    4ada:	6c 6f       	addc.b	@r15,	r12	
    /* 
    4adc:	67 4f       	mov.b	@r15,	r7	
    4ade:	66 66       	addc.b	@r6,	r6	
     * Basic Clock System Control 2
    4ae0:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
     * 
     * SELM_0 -- DCOCLK
    4ae2:	74 3a       	jl	$-790    	;abs 0x47cc
     * DIVM_0 -- Divide by 1
    4ae4:	47 28       	jnc	$+144    	;abs 0x4b74
     * ~SELS -- DCOCLK
    4ae6:	31 2c       	jc	$+100    	;abs 0x4b4a
    4ae8:	33 29       	jnc	$+616    	;abs 0x4d50
    4aea:	3d 61       	addc	@r1+,	r13	
    4aec:	72 28       	jnc	$+230    	;abs 0x4bd2
    4aee:	39 2c       	jc	$+116    	;abs 0x4b62
    4af0:	37 29       	jnc	$+624    	;abs 0x4d60
    4af2:	3b 30       	jn	$+120    	;abs 0x4b6a
    4af4:	3b 37       	jge	$-392    	;abs 0x496c
     * DIVS_0 -- Divide by 1
     * ~DCOR -- DCO uses internal resistor
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
    4af6:	3b 28       	jnc	$+120    	;abs 0x4b6e
    4af8:	30 2c       	jc	$+98     	;abs 0x4b5a
    4afa:	31 29       	jnc	$+612    	;abs 0x4d5e
    4afc:	00 41       	br	r1		
     */
    4afe:	6e 61       	addc.b	@r1,	r14	
    4b00:	6c 6f       	addc.b	@r15,	r12	
    BCSCTL2 = SELM_0 + DIVM_0 + DIVS_0;
    4b02:	67 56       	add.b	@r6,	r7	
    4b04:	61 6c       	addc.b	@r12,	r1	
    
    4b06:	75 65       	addc.b	@r5+,	r5	
    DCOCTL = 0x77;      
    4b08:	3a 47       	mov	@r7+,	r10	
        /* 
     * Basic Clock System Control 1
    4b0a:	28 31       	jn	$+594    	;abs 0x4d5c
    4b0c:	2c 33       	jn	$-422    	;abs 0x4966
     * 
    4b0e:	29 00 63 3a 	mova	&0x03a63,r9	
     * XT2OFF -- Disable XT2CLK
    4b12:	5c 77 6f 72 	subc.b	29295(r7),r12	;0x726f(r7)
    4b16:	6b 5c       	add.b	@r12,	r11	
    4b18:	6d 73       	subc.b	#2,	r13	;r3 As==10
    4b1a:	70 67       	addc.b	@r7+,	r0	
    4b1c:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    4b1e:	5c 73       	subc.b	#1,	r12	;r3 As==01
            }
        }                               
        
        printf("%d",i);
        // ajusta as cores para o normal
        color_fore = LIME;
    4b20:	66 5c       	add.b	@r12,	r6	
    4b22:	70 61       	addc.b	@r1+,	r0	
        color_back = BLACK;
    4b24:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr
    4b26:	61 67       	addc.b	@r7,	r1	
    4b28:	69 6e       	addc.b	@r14,	r9	
        
        if(AnalogSelect == i){          // se o cursor estiver em cima   
            color_fore = RED;           // a cor da letra muda para vermelho 
        }                                                                
        else{                           // se nao                        
            if(color_back == LIME){
    4b2a:	67 5c       	add.b	@r12,	r7	
    4b2c:	62 75       	subc.b	@r5,	r2	
                color_fore = BLACK;
    4b2e:	69 6c       	addc.b	@r12,	r9	
    4b30:	64 5c       	add.b	@r12,	r4	
    4b32:	67 63       	addc.b	#2,	r7	;r3 As==10
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
     * XTS -- High Frequency
     * DIVA_0 -- Divide by 1
     */
    4b34:	63 2d       	jc	$+712    	;abs 0x4dfc
    4b36:	33 2e       	jc	$-920    	;abs 0x479e
    4b38:	32 2e       	jc	$-922    	;abs 0x479e
    4b3a:	33 5c       	.word	0x5c33;	????	Illegal as 2-op instr
    4b3c:	67 63       	addc.b	#2,	r7	;r3 As==10
    4b3e:	63 2f       	jc	$-312    	;abs 0x4a06
    4b40:	00 6c       	addc	r12,	r0	
    4b42:	69 62       	addc.b	#4,	r9	;r2 As==10
    4b44:	67 63       	addc.b	#2,	r7	;r3 As==10
    4b46:	63 32       	jn	$-824    	;abs 0x480e
    BCSCTL1 = 0xcf;     

    /* 
    4b48:	2e 63       	addc	#2,	r14	;r3 As==10
    4b4a:	00 74       	subc	r4,	r0	
    4b4c:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    4b4e:	6e 66       	addc.b	@r6,	r14	
     * Basic Clock System Control 3
    4b50:	69 67       	addc.b	@r7,	r9	
    4b52:	2e 68       	addc	@r8,	r14	
    4b54:	00 72       	subc	r2,	r0	
    4b56:	74 78       	subc.b	@r8+,	r4	
    4b58:	3a 74       	subc	@r4+,	r10	
    4b5a:	28 32       	jn	$-942    	;abs 0x47ac
     * 
    4b5c:	2c 31       	jn	$+602    	;abs 0x4db6
    4b5e:	29 3d       	jmp	$+596    	;abs 0x4db2
    4b60:	28 32       	jn	$-942    	;abs 0x47b2
    4b62:	2c 32       	jn	$-934    	;abs 0x47bc
    4b64:	29 3d       	jmp	$+596    	;abs 0x4db8
    4b66:	2a 28       	jnc	$+86     	;abs 0x4bbc
     * XT2S_3 -- Digital input signal
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
    4b68:	32 2c       	jc	$+102    	;abs 0x4bce
    4b6a:	33 29       	jnc	$+616    	;abs 0x4dd2
    4b6c:	3d 78       	subc	@r8+,	r13	
    4b6e:	73 72       	.word	0x7273;	????	Illegal as 2-op instr
    4b70:	74 78       	subc.b	@r8+,	r4	
    4b72:	5f 64 65 66 	addc.b	26213(r4),r15	;0x6665(r4)
     * XCAP_0 -- ~1 pF
    4b76:	3a 00 72 74 	mova	0x7472,	r10	;PC rel. 0x0bfea
    4b7a:	76 65       	addc.b	@r5+,	r6	
     */
    BCSCTL3 = 0xa0;
}
    4b7c:	63 3a       	jl	$-824    	;abs 0x4844
    4b7e:	74 28       	jnc	$+234    	;abs 0x4c68

    4b80:	32 2c       	jc	$+102    	;abs 0x4be6
    4b82:	34 29       	jnc	$+618    	;abs 0x4dec
void p1_init(){
        /* Port 1 Output Register */
    4b84:	3d 28       	jnc	$+124    	;abs 0x4c00
    4b86:	32 2c       	jc	$+102    	;abs 0x4bec
    4b88:	35 29       	jnc	$+620    	;abs 0x4df4
    4b8a:	3d 2a       	jnc	$-900    	;abs 0x4806
    4b8c:	28 32       	jn	$-942    	;abs 0x47de
    4b8e:	2c 36       	jge	$-934    	;abs 0x47e8
    4b90:	29 3d       	jmp	$+596    	;abs 0x4de4
    P1OUT = PPM_P1MASK;
    4b92:	78 73       	subc.b	#-1,	r8	;r3 As==11
    4b94:	72 74       	subc.b	@r4+,	r2	
    4b96:	76 65       	addc.b	@r5+,	r6	
    4b98:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    4b9a:	64 65       	addc.b	@r5,	r4	
    4b9c:	66 3a       	jl	$-818    	;abs 0x486a
    4b9e:	00 74       	subc	r4,	r0	

    4ba0:	72 65       	addc.b	@r5+,	r2	
    4ba2:	65 3a       	jl	$-820    	;abs 0x486e
    4ba4:	74 28       	jnc	$+234    	;abs 0x4c8e
    /* Port 1 Resistor Enable Register */
    P1REN = PPM_P1MASK;

    4ba6:	32 2c       	jc	$+102    	;abs 0x4c0c
    4ba8:	37 29       	jnc	$+624    	;abs 0x4e18
    4baa:	3d 28       	jnc	$+124    	;abs 0x4c26
    4bac:	32 2c       	jc	$+102    	;abs 0x4c12
    4bae:	38 29       	jnc	$+626    	;abs 0x4e20
    4bb0:	3d 2a       	jnc	$-900    	;abs 0x482c
    4bb2:	28 32       	jn	$-942    	;abs 0x4804
    4bb4:	2c 39       	jl	$+602    	;abs 0x4e0e
    4bb6:	29 3d       	jmp	$+596    	;abs 0x4e0a
    4bb8:	78 75       	subc.b	@r5+,	r8	
    4bba:	74 72       	subc.b	#8,	r4	;r2 As==11
    4bbc:	65 65       	addc.b	@r5,	r5	
    4bbe:	5f 6e 6f 64 	addc.b	25711(r14),r15	;0x646f(r14)
    /* Port 1 Interrupt Edge Select Register */
    P1IES = 0; // subida

    4bc2:	65 3a       	jl	$-820    	;abs 0x488e
    4bc4:	00 2e       	jc	$-1022   	;abs 0x47c6
    4bc6:	2e 2f       	jc	$-418    	;abs 0x4a24
    4bc8:	69 6e       	addc.b	@r14,	r9	
    4bca:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    4bcc:	75 64       	addc.b	@r4+,	r5	
    4bce:	65 2f       	jc	$-308    	;abs 0x4a9a
    /* Port 1 Interrupt Flag Register */
    4bd0:	61 6e       	addc.b	@r14,	r1	
    4bd2:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
    4bd4:	64 65       	addc.b	@r5,	r4	
    4bd6:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    4bd8:	2e 68       	addc	@r8,	r14	
    4bda:	00 63       	adc	r0		
    4bdc:	6f 6e       	addc.b	@r14,	r15	
    4bde:	66 69       	addc.b	@r9,	r6	
    4be0:	67 2f       	jc	$-304    	;abs 0x4ab0
    P1IFG = 0;

    4be2:	69 33       	jn	$-300    	;abs 0x4ab6
    4be4:	38 36       	jge	$-910    	;abs 0x4856
    4be6:	2f 78       	subc	@r8,	r15	
    4be8:	6d 2d       	jc	$+732    	;abs 0x4ec4
    4bea:	6d 69       	addc.b	@r9,	r13	
    4bec:	6e 67       	addc.b	@r7,	r14	
    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;
    4bee:	77 33       	jn	$-272    	;abs 0x4ade
    4bf0:	32 2e       	jc	$-922    	;abs 0x4856
    4bf2:	68 00 63 6f 	mova	r0,	&0x86f63
    4bf6:	6e 66       	addc.b	@r6,	r14	
    4bf8:	69 67       	addc.b	@r7,	r9	
    4bfa:	2f 6d       	addc	@r13,	r15	
    4bfc:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    4bfe:	34 33       	jn	$-406    	;abs 0x4a68
    4c00:	30 2f       	jc	$-414    	;abs 0x4a62

    4c02:	6d 73       	subc.b	#2,	r13	;r3 As==10
    4c04:	70 34       	jge	$+226    	;abs 0x4ce6
    4c06:	33 30       	jn	$+104    	;abs 0x4c6e
}

    4c08:	2e 68       	addc	@r8,	r14	
    4c0a:	00 72       	subc	r2,	r0	
    4c0c:	65 67       	addc.b	@r7,	r5	
    4c0e:	5f 63       	addc.b	#1,	r15	;r3 As==01
    4c10:	6c 61       	addc.b	@r1,	r12	
    4c12:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    /* Port 1 Interrupt Flag Register */
    P1IFG = 0;

    /* Port 1 Interrupt Enable Register */
    P1IE = PPM_P1MASK;

    4c14:	3a 54       	add	@r4+,	r10	
    4c16:	28 35       	jge	$+594    	;abs 0x4e68
    4c18:	2c 31       	jn	$+602    	;abs 0x4e72
}

void timer_a3_init(void)
{
    /* 
    4c1a:	29 3d       	jmp	$+596    	;abs 0x4e6e
    4c1c:	65 4e       	mov.b	@r14,	r5	
     * TACCTL0, Capture/Compare Control Register 0
    4c1e:	4f 5f       	rla.b	r15		
    4c20:	52 45 47 53 	mov.b	21319(r5),r2	;0x5347(r5)
     * 
     * CM_0 -- No Capture
    4c24:	3a 30       	jn	$+118    	;abs 0x4c9a
    4c26:	2c 50       	add	@r0,	r12	
    4c28:	43 5f       	.word	0x5f43;	????	Illegal as 2-op instr
    4c2a:	52 45 47 3a 	mov.b	14919(r5),r2	;0x3a47(r5)
    4c2e:	31 2c       	jc	$+100    	;abs 0x4c92
     * CCIS_0 -- CCIxA
    4c30:	53 50       	.word	0x5053;	????	Illegal as 2-op instr
    4c32:	5f 52 45 47 	add.b	&0x4745,r15	
    4c36:	3a 32       	jn	$-906    	;abs 0x48ac
    4c38:	2c 53       	incd	r12		
    4c3a:	54 41 43 4b 	mov.b	19267(r1),r4	;0x4b43(r1)
     * ~SCS -- Asynchronous Capture
    4c3e:	5f 52 45 47 	add.b	&0x4745,r15	
    4c42:	53 3a       	jl	$-856    	;abs 0x48ea
    4c44:	33 2c       	jc	$+104    	;abs 0x4cac
    4c46:	43 47       	.word	0x4743;	????	Illegal as 2-op instr
    4c48:	31 5f       	add	@r15+,	r1	
     * ~SCCI -- Latched capture signal (read)
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
    4c4a:	52 45 47 3a 	mov.b	14919(r5),r2	;0x3a47(r5)
    4c4e:	34 2c       	jc	$+106    	;abs 0x4cb8
    4c50:	43 47       	.word	0x4743;	????	Illegal as 2-op instr
    4c52:	32 5f       	add	@r15+,	r2	
    4c54:	52 45 47 3a 	mov.b	14919(r5),r2	;0x3a47(r5)
     * Note: ~<BIT> indicates that <BIT> has value zero
    4c58:	35 2c       	jc	$+108    	;abs 0x4cc4
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    4c5a:	43 47       	.word	0x4743;	????	Illegal as 2-op instr
    4c5c:	5f 52 45 47 	add.b	&0x4745,r15	

    /* TACCR0, Timer_A Capture/Compare Register 0 */
    TACCR0 = 4001;

    /* 
    4c60:	53 3a       	jl	$-856    	;abs 0x4908
    4c62:	36 2c       	jc	$+110    	;abs 0x4cd0
    4c64:	47 45       	mov.b	r5,	r7	
    4c66:	4e 45       	mov.b	r5,	r14	
     * TACTL, Timer_A3 Control Register
    4c68:	52 41 4c 5f 	mov.b	24396(r1),r2	;0x5f4c(r1)
    4c6c:	52 45 47 53 	mov.b	21319(r5),r2	;0x5347(r5)
     * 
     * TASSEL_2 -- SMCLK
    4c70:	3a 37       	jge	$-394    	;abs 0x4ae6
    4c72:	2c 50       	add	@r0,	r12	
     * ID_3 -- Divider - /8
    4c74:	4f 49       	mov.b	r9,	r15	
    4c76:	4e 54       	add.b	r4,	r14	
     * MC_1 -- Up Mode
    4c78:	45 52       	add.b	r2,	r5	
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
}
    4c7a:	5f 52 45 47 	add.b	&0x4745,r15	
    4c7e:	53 3a       	jl	$-856    	;abs 0x4926
    4c80:	38 2c       	jc	$+114    	;abs 0x4cf2
    4c82:	46 46       	mov.b	r6,	r6	
    4c84:	4f 55       	add.b	r5,	r15	
    4c86:	52 5f 52 45 	add.b	17746(r15),r2	;0x4552(r15)

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    int channel_num = 0, PPM_ch_counter;
    4c8a:	47 3a       	jl	$-880    	;abs 0x491a
    4c8c:	39 2c       	jc	$+116    	;abs 0x4d00
    4c8e:	41 4c       	mov.b	r12,	r1	
    4c90:	4c 5f       	add.b	r15,	r12	
    4c92:	52 45 47 53 	mov.b	21319(r5),r2	;0x5347(r5)
    4c96:	3a 31       	jn	$+630    	;abs 0x4f0c
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
    4c98:	30 2c       	jc	$+98     	;abs 0x4cfa
    4c9a:	4c 49       	mov.b	r9,	r12	
    4c9c:	4d 5f       	add.b	r15,	r13	
    4c9e:	52 45 47 5f 	mov.b	24391(r5),r2	;0x5f47(r5)
    4ca2:	43 4c       	.word	0x4c43;	????	Illegal as 2-op instr
    4ca4:	41 53       	add.b	#0,	r1	;r3 As==00
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    4ca6:	53 45       	.word	0x4553;	????	Illegal as 2-op instr
    4ca8:	53 3a       	jl	$-856    	;abs 0x4950
    4caa:	31 31       	jn	$+612    	;abs 0x4f0e
    4cac:	2c 3b       	jl	$-422    	;abs 0x4b06
    4cae:	00 6d       	addc	r13,	r0	
    4cb0:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    4cb2:	34 33       	jn	$-406    	;abs 0x4b1c
            if(!(P1IES & PPM_ch_counter)){ // low to high
    4cb4:	30 5f       	add	@r15+,	r0	
    4cb6:	61 72       	subc.b	#4,	r1	;r2 As==10
    4cb8:	67 73       	subc.b	#2,	r7	;r3 As==10
    4cba:	3a 54       	add	@r4+,	r10	
    4cbc:	28 35       	jge	$+594    	;abs 0x4f0e
    4cbe:	2c 32       	jn	$-934    	;abs 0x4918
    4cc0:	29 3d       	jmp	$+596    	;abs 0x4f14
    4cc2:	73 34       	jge	$+232    	;abs 0x4daa
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
    4cc4:	6e 72       	subc.b	#4,	r14	;r2 As==10
            else{ // high to low
    4cc6:	65 67       	addc.b	@r7,	r5	
    4cc8:	73 3a       	jl	$-792    	;abs 0x49b0
    4cca:	28 30       	jn	$+82     	;abs 0x4d1c
    4ccc:	2c 31       	jn	$+602    	;abs 0x4f26
    4cce:	29 2c       	jc	$+84     	;abs 0x4d22
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    4cd0:	30 2c       	jc	$+98     	;abs 0x4d32
    4cd2:	31 36       	jge	$-924    	;abs 0x4936
    4cd4:	3b 72       	subc	#8,	r11	;r2 As==11
                }
                else{ // se nao deu overflow na contagem do timer
    4cd6:	65 67       	addc.b	@r7,	r5	
    4cd8:	6e 6f       	addc.b	@r15,	r14	
    4cda:	3a 28       	jnc	$+118    	;abs 0x4d50
    4cdc:	30 2c       	jc	$+98     	;abs 0x4d3e
    4cde:	31 29       	jnc	$+612    	;abs 0x4f42
    4ce0:	2c 31       	jn	$+602    	;abs 0x4f3a
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    4ce2:	36 2c       	jc	$+110    	;abs 0x4d50
    4ce4:	31 36       	jge	$-924    	;abs 0x4948
    4ce6:	3b 3b       	jl	$-392    	;abs 0x4b5e
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
    4ce8:	00 43       	clr	r0		
    4cea:	55 4d 55 4c 	mov.b	19541(r13),r5	;0x4c55(r13)
            }
    4cee:	41 54       	add.b	r4,	r1	
    4cf0:	49 56       	add.b	r6,	r9	
    4cf2:	45 5f       	add.b	r15,	r5	
    4cf4:	41 52       	add.b	r2,	r1	
    4cf6:	47 53       	add.b	#0,	r7	;r3 As==00
    4cf8:	3a 74       	subc	@r4+,	r10	
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
    4cfa:	28 35       	jge	$+594    	;abs 0x4f4c
    4cfc:	2c 33       	jn	$-422    	;abs 0x4b56
    4cfe:	29 3d       	jmp	$+596    	;abs 0x4f52
    4d00:	28 35       	jge	$+594    	;abs 0x4f52
    4d02:	2c 32       	jn	$-934    	;abs 0x495c
    4d04:	29 00 63 6f 	mova	&0x06f63,r9	
    4d08:	6e 66       	addc.b	@r6,	r14	
    4d0a:	69 67       	addc.b	@r7,	r9	
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    4d0c:	2f 64       	addc	@r4,	r15	
    4d0e:	62 78       	subc.b	@r8,	r2	
    4d10:	65 6c       	addc.b	@r12,	r5	
    4d12:	66 2e       	jc	$-818    	;abs 0x49e0
    4d14:	68 00 64 65 	mova	r0,	&0x86564
                TimeUpEdge[channel_num] = PPM_aux;
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
            }
            else{ // high to low
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
    4d18:	66 61       	addc.b	@r1,	r6	
    4d1a:	75 6c       	addc.b	@r12+,	r5	
    4d1c:	74 73       	subc.b	#-1,	r4	;r3 As==11
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
        }
        channel_num++;
    }
}

    4d1e:	2e 68       	addc	@r8,	r14	
    4d20:	00 74       	subc	r4,	r0	
    4d22:	73 79       	.word	0x7973;	????	Illegal as 2-op instr
    4d24:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    4d26:	65 6d       	addc.b	@r13,	r5	
    4d28:	2e 68       	addc	@r8,	r14	
    4d2a:	00 63       	adc	r0		
void calibrate_radio(void){
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    4d2c:	3a 2f       	jc	$-394    	;abs 0x4ba2
    4d2e:	77 6f       	addc.b	@r15+,	r7	
        return;
    4d30:	72 6b       	addc.b	@r11+,	r2	
    4d32:	2f 6d       	addc	@r13,	r15	
    4d34:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
    4d36:	67 63       	addc.b	#2,	r7	;r3 As==10
    4d38:	63 2f       	jc	$-312    	;abs 0x4c00
    4d3a:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    4d3c:	2f 70       	subc	@r0,	r15	
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    4d3e:	61 63       	addc.b	#2,	r1	;r3 As==10
    4d40:	6b 61       	addc.b	@r1,	r11	
    4d42:	67 69       	addc.b	@r9,	r7	
    4d44:	6e 67       	addc.b	@r7,	r14	
    4d46:	2f 62       	addc	#4,	r15	;r2 As==10
    4d48:	75 69       	addc.b	@r9+,	r5	
    4d4a:	6c 64       	addc.b	@r4,	r12	
    4d4c:	2f 67       	addc	@r7,	r15	
    4d4e:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    4d50:	2d 33       	jn	$-420    	;abs 0x4bac
    4d52:	2e 32       	jn	$-930    	;abs 0x49b0
    
    lcd_goto(2,5);
    color_fore = RED;
    4d54:	2e 33       	jn	$-418    	;abs 0x4bb2
    4d56:	2f 67       	addc	@r7,	r15	
    printf("MOVE STICKS\nALL DIRECTIONS");
    4d58:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    4d5a:	2f 69       	addc	@r9,	r15	
    4d5c:	6e 63       	addc.b	#2,	r14	;r3 As==10
    color_fore = LIME;
    4d5e:	6c 75       	subc.b	@r5,	r12	
    4d60:	64 65       	addc.b	@r5,	r4	
    4d62:	2f 73       	subc	#2,	r15	;r3 As==10
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4d64:	74 64       	addc.b	@r4+,	r4	
    4d66:	64 65       	addc.b	@r5,	r4	
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    4d68:	66 2e       	jc	$-818    	;abs 0x4a36
void calibrate_radio(void){
    
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    4d6a:	68 00 70 74 	mova	r0,	&0x87470
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    4d6e:	72 64       	addc.b	@r4+,	r2	
    4d70:	69 66       	addc.b	@r6,	r9	
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
    4d72:	66 5f       	add.b	@r15,	r6	
    4d74:	74 3a       	jl	$-790    	;abs 0x4a5e
    4d76:	74 28       	jnc	$+234    	;abs 0x4e60
    4d78:	39 2c       	jc	$+116    	;abs 0x4dec
    4d7a:	31 29       	jnc	$+612    	;abs 0x4fde
    4d7c:	3d 28       	jnc	$+124    	;abs 0x4df8
    4d7e:	30 2c       	jc	$+98     	;abs 0x4de0
    4d80:	31 29       	jnc	$+612    	;abs 0x4fe4
    4d82:	00 73       	sbc	r0		
    4d84:	69 7a       	subc.b	@r10,	r9	
    4d86:	65 5f       	add.b	@r15,	r5	
    4d88:	74 3a       	jl	$-790    	;abs 0x4a72
    4d8a:	74 28       	jnc	$+234    	;abs 0x4e74
    4d8c:	39 2c       	jc	$+116    	;abs 0x4e00
    4d8e:	32 29       	jnc	$+614    	;abs 0x4ff4
    4d90:	3d 28       	jnc	$+124    	;abs 0x4e0c
    4d92:	30 2c       	jc	$+98     	;abs 0x4df4
    4d94:	34 29       	jnc	$+618    	;abs 0x4ffe
    4d96:	00 77       	subc	r7,	r0	
    4d98:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
        PPMSlope[i] = 1;
    4d9a:	61 72       	subc.b	#4,	r1	;r2 As==10
    4d9c:	5f 74 3a 74 	subc.b	29754(r4),r15	;0x743a(r4)
    4da0:	28 39       	jl	$+594    	;abs 0x4ff2
    4da2:	2c 33       	jn	$-422    	;abs 0x4bfc
    4da4:	29 3d       	jmp	$+596    	;abs 0x4ff8
    4da6:	28 30       	jn	$+82     	;abs 0x4df8
    4da8:	2c 31       	jn	$+602    	;abs 0x5002
    4daa:	29 00 6c 69 	mova	&0x0696c,r9	
    4dae:	62 67       	addc.b	@r7,	r2	
    4db0:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    4db2:	32 2e       	jc	$-922    	;abs 0x4a18
    4db4:	68 00 51 49 	mova	r0,	&0x84951
    4db8:	74 79       	subc.b	@r9+,	r4	
    }
    4dba:	70 65       	addc.b	@r5+,	r0	
    4dbc:	3a 74       	subc	@r4+,	r10	
    4dbe:	28 31       	jn	$+594    	;abs 0x5010
    4dc0:	30 2c       	jc	$+98     	;abs 0x4e22
    4dc2:	31 29       	jnc	$+612    	;abs 0x5026
    4dc4:	3d 28       	jnc	$+124    	;abs 0x4e40
    4dc6:	30 2c       	jc	$+98     	;abs 0x4e28

    4dc8:	31 30       	jn	$+100    	;abs 0x4e2c
    4dca:	29 00 55 51 	mova	&0x05155,r9	
    4dce:	49 74       	subc.b	r4,	r9	
    4dd0:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    4dd4:	74 28       	jnc	$+234    	;abs 0x4ebe
    4dd6:	31 30       	jn	$+100    	;abs 0x4e3a
    4dd8:	2c 32       	jn	$-934    	;abs 0x4a32
    4dda:	29 3d       	jmp	$+596    	;abs 0x502e
    4ddc:	28 30       	jn	$+82     	;abs 0x4e2e
    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
    4dde:	2c 31       	jn	$+602    	;abs 0x5038
    4de0:	31 29       	jnc	$+612    	;abs 0x5044
    4de2:	00 48       	br	r8		
    4de4:	49 74       	subc.b	r4,	r9	
    4de6:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    4dea:	74 28       	jnc	$+234    	;abs 0x4ed4
    4dec:	31 30       	jn	$+100    	;abs 0x4e50
    4dee:	2c 33       	jn	$-422    	;abs 0x4c48

/*
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
    4df0:	29 3d       	jmp	$+596    	;abs 0x5044
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE

MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal
    4df2:	28 30       	jn	$+82     	;abs 0x4e44
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
    4df4:	2c 31       	jn	$+602    	;abs 0x504e
    4df6:	29 00 55 48 	mova	&0x04855,r9	
    4dfa:	49 74       	subc.b	r4,	r9	
    4dfc:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    4e00:	74 28       	jnc	$+234    	;abs 0x4eea
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    4e02:	31 30       	jn	$+100    	;abs 0x4e66
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()

// variaveis leitura radio raw
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    4e04:	2c 34       	jge	$+90     	;abs 0x4e5e
    4e06:	29 3d       	jmp	$+596    	;abs 0x505a
    4e08:	28 30       	jn	$+82     	;abs 0x4e5a
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    4e0a:	2c 34       	jge	$+90     	;abs 0x4e64
    4e0c:	29 00 53 49 	mova	&0x04953,r9	
    4e10:	74 79       	subc.b	@r9+,	r4	
    4e12:	70 65       	addc.b	@r5+,	r0	
    4e14:	3a 74       	subc	@r4+,	r10	
    4e16:	28 31       	jn	$+594    	;abs 0x5068
    4e18:	30 2c       	jc	$+98     	;abs 0x4e7a
    4e1a:	35 29       	jnc	$+620    	;abs 0x5086
    4e1c:	3d 28       	jnc	$+124    	;abs 0x4e98
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    4e1e:	30 2c       	jc	$+98     	;abs 0x4e80
    4e20:	33 29       	jnc	$+616    	;abs 0x5088
    4e22:	00 55       	add	r5,	r0	
    4e24:	53 49       	.word	0x4953;	????	Illegal as 2-op instr
    4e26:	74 79       	subc.b	@r9+,	r4	
    4e28:	70 65       	addc.b	@r5+,	r0	
    4e2a:	3a 74       	subc	@r4+,	r10	
    4e2c:	28 31       	jn	$+594    	;abs 0x507e
    4e2e:	30 2c       	jc	$+98     	;abs 0x4e90
    4e30:	36 29       	jnc	$+622    	;abs 0x509e
    4e32:	3d 28       	jnc	$+124    	;abs 0x4eae
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
    4e34:	30 2c       	jc	$+98     	;abs 0x4e96
    4e36:	35 29       	jnc	$+620    	;abs 0x50a2
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 
    4e38:	00 44       	br	r4		

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    4e3a:	49 74       	subc.b	r4,	r9	
    4e3c:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65

    4e40:	74 28       	jnc	$+234    	;abs 0x4f2a
    4e42:	31 30       	jn	$+100    	;abs 0x4ea6
// variaveis leitura radio raw
    4e44:	2c 37       	jge	$-422    	;abs 0x4c9e
    4e46:	29 3d       	jmp	$+596    	;abs 0x509a
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    4e48:	28 30       	jn	$+82     	;abs 0x4e9a
    4e4a:	2c 36       	jge	$-934    	;abs 0x4aa4
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    4e4c:	29 00 55 44 	mova	&0x04455,r9	
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};

int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog
    4e50:	49 74       	subc.b	r4,	r9	

    4e52:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    INICIO: //loop main, vir para ca no caso de um reset
    4e56:	74 28       	jnc	$+234    	;abs 0x4f40
    4e58:	31 30       	jn	$+100    	;abs 0x4ebc
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio
    4e5a:	2c 38       	jl	$+90     	;abs 0x4eb4
    4e5c:	29 3d       	jmp	$+596    	;abs 0x50b0

    lcd_clear(BLACK);
    4e5e:	28 30       	jn	$+82     	;abs 0x4eb0
    4e60:	2c 37       	jge	$-422    	;abs 0x4cba
    
    4e62:	29 00 53 46 	mova	&0x04653,r9	
    MenuOption = RADIO_RAW;
    4e66:	74 79       	subc.b	@r9+,	r4	
    4e68:	70 65       	addc.b	@r5+,	r0	
    MenuStep = DISPLAY;
    4e6a:	3a 74       	subc	@r4+,	r10	
    4e6c:	28 31       	jn	$+594    	;abs 0x50be
    MenuVisible = TRUE;     // inicializa mostrando o menu
    4e6e:	30 2c       	jc	$+98     	;abs 0x4ed0
        
    while(1){
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
    4e70:	39 29       	jnc	$+628    	;abs 0x50e4
    4e72:	3d 28       	jnc	$+124    	;abs 0x4eee
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
    4e74:	30 2c       	jc	$+98     	;abs 0x4ed6
    4e76:	31 32       	jn	$-924    	;abs 0x4ada
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
    4e78:	29 00 44 46 	mova	&0x04644,r9	
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
    4e7c:	74 79       	subc.b	@r9+,	r4	
    4e7e:	70 65       	addc.b	@r5+,	r0	
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
    4e80:	3a 74       	subc	@r4+,	r10	
    4e82:	28 31       	jn	$+594    	;abs 0x50d4
        P1 completa. */
    4e84:	30 2c       	jc	$+98     	;abs 0x4ee6
    4e86:	31 30       	jn	$+100    	;abs 0x4eea
        if(ControlCounter >= CONTROL_PERIOD){
    4e88:	29 3d       	jmp	$+596    	;abs 0x50dc
            analog_refresh_all();
            if(MotorArmed == TRUE){
                main_loop();
    4e8a:	28 30       	jn	$+82     	;abs 0x4edc
            }
            ControlCounter = 0;
        }
    4e8c:	2c 31       	jn	$+602    	;abs 0x50e6
    4e8e:	32 29       	jnc	$+614    	;abs 0x50f4
        
    4e90:	00 77       	subc	r7,	r0	
    4e92:	6f 72       	subc.b	#4,	r15	;r2 As==10
        if(SetupDone == TRUE){
    4e94:	64 5f       	add.b	@r15,	r4	
    4e96:	74 79       	subc.b	@r9+,	r4	
            if(RCCounter >= RC_PERIOD){
    4e98:	70 65       	addc.b	@r5+,	r0	
    4e9a:	3a 74       	subc	@r4+,	r10	
                process_rc();
    4e9c:	28 31       	jn	$+594    	;abs 0x50ee
    4e9e:	30 2c       	jc	$+98     	;abs 0x4f00
    4ea0:	31 31       	jn	$+612    	;abs 0x5104
    4ea2:	29 3d       	jmp	$+596    	;abs 0x50f6
    4ea4:	28 30       	jn	$+82     	;abs 0x4ef6
    4ea6:	2c 31       	jn	$+602    	;abs 0x5100
                RCCounter = 0;
    4ea8:	29 00 44 57 	mova	&0x05744,r9	
            }
    4eac:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    4eae:	72 75       	subc.b	@r5+,	r2	
        }
    4eb0:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    4eb2:	3a 54       	add	@r4+,	r10	
    
    4eb4:	28 31       	jn	$+594    	;abs 0x5106
    4eb6:	30 2c       	jc	$+98     	;abs 0x4f18
    4eb8:	31 32       	jn	$-924    	;abs 0x4b1c
        if(MenuVisible == TRUE){
            if(MenuCounter >= MENU_PERIOD){
    4eba:	29 3d       	jmp	$+596    	;abs 0x510e
                process_menu();
    4ebc:	73 38       	jl	$+232    	;abs 0x4fa4
    4ebe:	6c 6f       	addc.b	@r15,	r12	
                MenuCounter = 0;   
            }
        }
        else{
    4ec0:	77 3a       	jl	$-784    	;abs 0x4bb0
    4ec2:	28 31       	jn	$+594    	;abs 0x5114
    4ec4:	30 2c       	jc	$+98     	;abs 0x4f26
            if(ChannelInput[CH6_CH] > 3500){
    4ec6:	35 29       	jnc	$+620    	;abs 0x5132
    4ec8:	2c 30       	jn	$+90     	;abs 0x4f22
    4eca:	2c 33       	jn	$-422    	;abs 0x4d24
    4ecc:	32 3b       	jl	$-410    	;abs 0x4d32
    4ece:	68 69       	addc.b	@r9,	r8	
    4ed0:	67 68       	addc.b	@r8,	r7	
    4ed2:	3a 28       	jnc	$+118    	;abs 0x4f48
                MenuVisible = TRUE;
    4ed4:	31 30       	jn	$+100    	;abs 0x4f38
    4ed6:	2c 35       	jge	$+602    	;abs 0x5130
                MotorArmed = FALSE;
    4ed8:	29 2c       	jc	$+84     	;abs 0x4f2c
    4eda:	33 32       	jn	$-920    	;abs 0x4b42
            }
    4edc:	2c 33       	jn	$-422    	;abs 0x4d36
    4ede:	32 3b       	jl	$-410    	;abs 0x4d44
        }
    4ee0:	3b 00 44 57 	mova	0x5744,	r11	;PC rel. 0x0a626
    }
    4ee4:	75 6e       	addc.b	@r14+,	r5	
    4ee6:	69 6f       	addc.b	@r15,	r9	
}
    4ee8:	6e 3a       	jl	$-802    	;abs 0x4bc6

void process_menu(void){
    switch(MenuStep){
    4eea:	74 28       	jnc	$+234    	;abs 0x4fd4
    4eec:	31 30       	jn	$+100    	;abs 0x4f50
    4eee:	2c 31       	jn	$+602    	;abs 0x5148
    4ef0:	33 29       	jnc	$+616    	;abs 0x5158
        case DISPLAY:
    4ef2:	3d 28       	jnc	$+124    	;abs 0x4f6e
    4ef4:	31 30       	jn	$+100    	;abs 0x4f58
            lcd_goto(0,14);
            printf("DISPLAY             ");
            
    4ef6:	2c 31       	jn	$+602    	;abs 0x5150
    4ef8:	34 29       	jnc	$+618    	;abs 0x5162
    4efa:	3d 75       	subc	@r5+,	r13	
            lcd_clear(BLACK);
    4efc:	38 73       	subc	#-1,	r8	;r3 As==11
            lcd_goto(0,0);
            printf("   MAIN MENU\n\n");
    4efe:	3a 28       	jnc	$+118    	;abs 0x4f74
    4f00:	31 30       	jn	$+100    	;abs 0x4f64
    4f02:	2c 31       	jn	$+602    	;abs 0x515c
    4f04:	32 29       	jnc	$+614    	;abs 0x516a
    4f06:	2c 30       	jn	$+90     	;abs 0x4f60
    4f08:	2c 36       	jge	$-934    	;abs 0x4b62
    4f0a:	34 3b       	jl	$-406    	;abs 0x4d74
    4f0c:	6c 6c       	addc.b	@r12,	r12	
            printf("  Radio raw\n  Radio correct\n  Analog Monitor\n  Ready\n  Set init settings");
    4f0e:	3a 28       	jnc	$+118    	;abs 0x4f84
    4f10:	31 30       	jn	$+100    	;abs 0x4f74
            MenuStep = SELECT;
    4f12:	2c 37       	jge	$-422    	;abs 0x4d6c
    4f14:	29 2c       	jc	$+84     	;abs 0x4f68
            break;
    4f16:	30 2c       	jc	$+98     	;abs 0x4f78
    4f18:	36 34       	jge	$+110    	;abs 0x4f86
        
    4f1a:	3b 3b       	jl	$-392    	;abs 0x4d92
    4f1c:	00 6c       	addc	r12,	r0	
        case SELECT: // fica neste step a maior parte do tempo
    4f1e:	6f 6e       	addc.b	@r14,	r15	
    4f20:	67 6c       	addc.b	@r12,	r7	
            lcd_goto(0,14);
    4f22:	6f 6e       	addc.b	@r14,	r15	
    4f24:	67 2e       	jc	$-816    	;abs 0x4bf4
    switch(MenuStep){
        case DISPLAY:
            lcd_goto(0,14);
            printf("DISPLAY             ");
            
            lcd_clear(BLACK);
    4f26:	68 00 63 3a 	mova	r0,	&0x83a63
    4f2a:	2f 77       	subc	@r7,	r15	
            break;
        
        case SELECT: // fica neste step a maior parte do tempo
            lcd_goto(0,14);
            printf("SELECT            ");
            
    4f2c:	6f 72       	subc.b	#4,	r15	;r2 As==10
    4f2e:	6b 2f       	jc	$-296    	;abs 0x4e06
    4f30:	6d 73       	subc.b	#2,	r13	;r3 As==10
    4f32:	70 67       	addc.b	@r7+,	r0	
            lcd_goto(0,(int)MenuOption + 2);
            printf(">");
            
    4f34:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    4f36:	2f 73       	subc	#2,	r15	;r3 As==10
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
    4f38:	66 2f       	jc	$-306    	;abs 0x4e06
                MenuStep = WAIT_PITCH_DOWN;
            }
    4f3a:	70 61       	addc.b	@r1+,	r0	
    4f3c:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr
            else{
    4f3e:	61 67       	addc.b	@r7,	r1	
                if(ChannelInput[PITCH_CH] > 3500){
                    MenuStep = WAIT_PITCH_UP;
    4f40:	69 6e       	addc.b	@r14,	r9	
                }
    4f42:	67 2f       	jc	$-304    	;abs 0x4e12
    4f44:	62 75       	subc.b	@r5,	r2	
            }
    4f46:	69 6c       	addc.b	@r12,	r9	
    4f48:	64 2f       	jc	$-310    	;abs 0x4e12
            
    4f4a:	67 63       	addc.b	#2,	r7	;r3 As==10
    4f4c:	63 2d       	jc	$+712    	;abs 0x5214
    4f4e:	33 2e       	jc	$-920    	;abs 0x4bb6
    4f50:	32 2e       	jc	$-922    	;abs 0x4bb6
            // select
    4f52:	33 2f       	jc	$-408    	;abs 0x4dba
    4f54:	67 63       	addc.b	#2,	r7	;r3 As==10
            if(ChannelInput[ROLL_CH] > 3500){
    4f56:	63 2f       	jc	$-312    	;abs 0x4e1e
    4f58:	69 6e       	addc.b	@r14,	r9	
                MenuStep = WAIT_ROLL_LEFT;
    4f5a:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    4f5c:	75 64       	addc.b	@r4+,	r5	
            
            // movimento pra baixo e pra cima
            if(ChannelInput[PITCH_CH] < 2500){
                MenuStep = WAIT_PITCH_DOWN;
            }
            else{
    4f5e:	65 2f       	jc	$-308    	;abs 0x4e2a
    4f60:	6c 69       	addc.b	@r9,	r12	
    4f62:	6d 69       	addc.b	@r9,	r13	
            // select
            if(ChannelInput[ROLL_CH] > 3500){
                MenuStep = WAIT_ROLL_LEFT;
            }
            
            break;
    4f64:	74 73       	subc.b	#-1,	r4	;r3 As==11
        
    4f66:	2e 68       	addc	@r8,	r14	
    4f68:	00 5f       	add	r15,	r0	
    4f6a:	5f 66 69 78 	addc.b	30825(r6),r15	;0x7869(r6)
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
    4f6e:	75 6e       	addc.b	@r14+,	r5	
    4f70:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
            }
    4f72:	66 73       	subc.b	#2,	r6	;r3 As==10
    4f74:	69 3a       	jl	$-812    	;abs 0x4c48
    4f76:	46 28       	jnc	$+142    	;abs 0x5004
    4f78:	31 30       	jn	$+100    	;abs 0x4fdc
            break;
    4f7a:	2c 36       	jge	$-934    	;abs 0x4bd4
    4f7c:	29 00 61 3a 	mova	&0x03a61,r9	
        
    4f80:	50 28       	jnc	$+162    	;abs 0x5022
    4f82:	31 30       	jn	$+100    	;abs 0x4fe6
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    4f84:	2c 39       	jl	$+602    	;abs 0x51de
            printf("WAIT PITCH UP    ");
    4f86:	29 00 66 70 	mova	&0x07066,r9	

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
    4f8a:	2d 62       	addc	#4,	r13	;r2 As==10
    4f8c:	69 74       	subc.b	@r4,	r9	
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    4f8e:	2e 63       	addc	#2,	r14	;r3 As==10
    4f90:	00 63       	adc	r0		
                }
    4f92:	6f 6e       	addc.b	@r14,	r15	
    4f94:	66 69       	addc.b	@r9,	r6	
    4f96:	67 2f       	jc	$-304    	;abs 0x4e66
                MenuStep = SELECT;
    4f98:	66 70       	subc.b	@r0,	r6	
    4f9a:	2d 62       	addc	#4,	r13	;r2 As==10
    4f9c:	69 74       	subc.b	@r4,	r9	
            }
    4f9e:	2e 68       	addc	@r8,	r14	
    4fa0:	00 53       	add	#0,	r0	;r3 As==00
            break;
        
    4fa2:	46 74       	subc.b	r4,	r6	
        case WAIT_ROLL_LEFT:
    4fa4:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
            lcd_goto(0,14);
            printf("WAIT ROLL LEFT    ");
            
    4fa8:	74 28       	jnc	$+234    	;abs 0x5092
    4faa:	38 2c       	jc	$+114    	;abs 0x501c
    4fac:	31 29       	jnc	$+612    	;abs 0x5210
    4fae:	3d 28       	jnc	$+124    	;abs 0x502a
    4fb0:	30 2c       	jc	$+98     	;abs 0x5012
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
    4fb2:	31 32       	jn	$-924    	;abs 0x4c16
    4fb4:	29 00 44 46 	mova	&0x04644,r9	
                MenuStep = PROCESS_OPTION;
    4fb8:	74 79       	subc.b	@r9+,	r4	
    4fba:	70 65       	addc.b	@r5+,	r0	
    4fbc:	3a 74       	subc	@r4+,	r10	
            }
    4fbe:	28 38       	jl	$+82     	;abs 0x5010
    4fc0:	2c 32       	jn	$-934    	;abs 0x4c1a
    4fc2:	29 3d       	jmp	$+596    	;abs 0x5216
            break;
    4fc4:	28 30       	jn	$+82     	;abs 0x5016
    4fc6:	2c 31       	jn	$+602    	;abs 0x5220
    4fc8:	32 29       	jnc	$+614    	;abs 0x522e
            
    4fca:	00 48       	br	r8		
    4fcc:	49 74       	subc.b	r4,	r9	
    4fce:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
        case WAIT_CH7_BACK:
    4fd2:	74 28       	jnc	$+234    	;abs 0x50bc
    4fd4:	38 2c       	jc	$+114    	;abs 0x5046
            lcd_goto(0,14);
    4fd6:	33 29       	jnc	$+616    	;abs 0x523e
    4fd8:	3d 28       	jnc	$+124    	;abs 0x5054
    4fda:	30 2c       	jc	$+98     	;abs 0x503c
            printf("WAIT CH7 BACK    ");
    4fdc:	31 29       	jnc	$+612    	;abs 0x5240
    4fde:	00 53       	add	#0,	r0	;r3 As==00
            
            if(ChannelInput[CH7_CH] < 2500){
    4fe0:	49 74       	subc.b	r4,	r9	
                MenuStep = DISPLAY;
    4fe2:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    4fe6:	74 28       	jnc	$+234    	;abs 0x50d0
    4fe8:	38 2c       	jc	$+114    	;abs 0x505a
            }
            break;
                    
    4fea:	34 29       	jnc	$+618    	;abs 0x5254
    4fec:	3d 28       	jnc	$+124    	;abs 0x5068
    4fee:	30 2c       	jc	$+98     	;abs 0x5050
    4ff0:	33 29       	jnc	$+616    	;abs 0x5258
    4ff2:	00 44       	br	r4		
    4ff4:	49 74       	subc.b	r4,	r9	
    4ff6:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
        case PROCESS_OPTION:
    4ffa:	74 28       	jnc	$+234    	;abs 0x50e4
            process_option();
            break;
    4ffc:	38 2c       	jc	$+114    	;abs 0x506e
    4ffe:	35 29       	jnc	$+620    	;abs 0x526a
            
    5000:	3d 28       	jnc	$+124    	;abs 0x507c
    5002:	30 2c       	jc	$+98     	;abs 0x5064
    5004:	33 29       	jnc	$+616    	;abs 0x526c
    5006:	00 55       	add	r5,	r0	
        case WAIT_ROLL_RIGHT:
    5008:	48 49       	mov.b	r9,	r8	
    500a:	74 79       	subc.b	@r9+,	r4	
    500c:	70 65       	addc.b	@r5+,	r0	
            break;    
    500e:	3a 74       	subc	@r4+,	r10	
    5010:	28 38       	jl	$+82     	;abs 0x5062
    5012:	2c 36       	jge	$-934    	;abs 0x4c6c
    }
    5014:	29 3d       	jmp	$+596    	;abs 0x5268
    5016:	28 30       	jn	$+82     	;abs 0x5068
    5018:	2c 34       	jge	$+90     	;abs 0x5072
}
    501a:	29 00 55 53 	mova	&0x05355,r9	
    501e:	49 74       	subc.b	r4,	r9	

void process_option(){
    5020:	79 70 65 3a 	subc.b	#14949,	r9	;#0x3a65
    5024:	74 28       	jnc	$+234    	;abs 0x510e
    5026:	38 2c       	jc	$+114    	;abs 0x5098
    5028:	37 29       	jnc	$+624    	;abs 0x5298
    502a:	3d 28       	jnc	$+124    	;abs 0x50a6
    int i;
    502c:	30 2c       	jc	$+98     	;abs 0x508e
    502e:	35 29       	jnc	$+620    	;abs 0x529a
    5030:	00 55       	add	r5,	r0	
    5032:	44 49       	mov.b	r9,	r4	
    5034:	74 79       	subc.b	@r9+,	r4	
    5036:	70 65       	addc.b	@r5+,	r0	
    switch (MenuOption){
        case RADIO_RAW:
    5038:	3a 74       	subc	@r4+,	r10	
    503a:	28 38       	jl	$+82     	;abs 0x508c
            draw_rc_inputs(1);
            break;
        case RADIO_CORRECT:
    503c:	2c 38       	jl	$+90     	;abs 0x5096
            draw_rc_inputs(0);
    503e:	29 3d       	jmp	$+596    	;abs 0x5292
    5040:	28 30       	jn	$+82     	;abs 0x5092
    5042:	2c 35       	jge	$+602    	;abs 0x529c
    5044:	29 00 66 72 	mova	&0x07266,r9	
    5048:	61 63       	addc.b	#2,	r1	;r3 As==10
            break;
        case ANALOG_MONITOR:
            process_analog_menu();
    504a:	74 79       	subc.b	@r9+,	r4	
    504c:	70 65       	addc.b	@r5+,	r0	
    504e:	3a 74       	subc	@r4+,	r10	
    5050:	28 38       	jl	$+82     	;abs 0x50a2
    5052:	2c 39       	jl	$+602    	;abs 0x52ac
            break;
        
        case READY:
    5054:	29 3d       	jmp	$+596    	;abs 0x52a8
    5056:	28 38       	jl	$+82     	;abs 0x50a8
            lcd_clear(BLACK);
    5058:	2c 37       	jge	$-422    	;abs 0x4eb2
    505a:	29 00 68 61 	mova	&0x06168,r9	
    505e:	6c 66       	addc.b	@r6,	r12	
            for(i = 5; i >= 0; i--){ // contagem regressiva
    5060:	66 72       	subc.b	#4,	r6	;r2 As==10
    5062:	61 63       	addc.b	#2,	r1	;r3 As==10
    5064:	74 79       	subc.b	@r9+,	r4	
                lcd_goto(8,8);
    5066:	70 65       	addc.b	@r5+,	r0	
    5068:	3a 74       	subc	@r4+,	r10	
    506a:	28 38       	jl	$+82     	;abs 0x50bc
    506c:	2c 31       	jn	$+602    	;abs 0x52c6
    506e:	30 29       	jnc	$+610    	;abs 0x52d0
                printf("%d", i);
    5070:	3d 28       	jnc	$+124    	;abs 0x50ec
    5072:	38 2c       	jc	$+114    	;abs 0x50e4
    5074:	36 29       	jnc	$+622    	;abs 0x52e2
                delayms(1000);
    5076:	00 46       	br	r6		
    5078:	4c 4f       	mov.b	r15,	r12	
    507a:	5f 74 79 70 	subc.b	28793(r4),r15	;0x7079(r4)
            }
    507e:	65 3a       	jl	$-820    	;abs 0x4d4a
    5080:	74 28       	jnc	$+234    	;abs 0x516a
    5082:	38 2c       	jc	$+114    	;abs 0x50f4
            MotorArmed = TRUE;
    5084:	31 31       	jn	$+612    	;abs 0x52e8
    5086:	29 3d       	jmp	$+596    	;abs 0x52da
    5088:	28 38       	jl	$+82     	;abs 0x50da
            MenuVisible = FALSE;
    508a:	2c 31       	jn	$+602    	;abs 0x52e4
    508c:	29 00 69 6e 	mova	&0x06e69,r9	
            lcd_clear(BLACK);
    5090:	74 66       	addc.b	@r6+,	r4	
    5092:	72 61       	addc.b	@r1+,	r2	
            MenuStep = DISPLAY;
            break;
    5094:	63 3a       	jl	$-824    	;abs 0x4d5c
            
    5096:	74 28       	jnc	$+234    	;abs 0x5180
    5098:	38 2c       	jc	$+114    	;abs 0x510a
    509a:	31 32       	jn	$-924    	;abs 0x4cfe
    509c:	29 3d       	jmp	$+596    	;abs 0x52f0
        case INITIAL_SETTINGS:
            
            // seta o flag initial setup
    509e:	28 38       	jl	$+82     	;abs 0x50f0
    50a0:	2c 34       	jge	$+90     	;abs 0x50fa
    50a2:	29 00 20 3a 	mova	&0x03a20,r9	
    50a6:	54 28       	jnc	$+170    	;abs 0x5150
    50a8:	38 2c       	jc	$+114    	;abs 0x511a
    50aa:	31 33       	jn	$-412    	;abs 0x4f0e
    50ac:	29 3d       	jmp	$+596    	;abs 0x5300
            break;          
    50ae:	65 43       	mov.b	#2,	r5	;r3 As==10
    }
    
    50b0:	4c 41       	mov.b	r1,	r12	
    50b2:	53 53       	inc.b	#0		;r3 As==00
    if(ChannelInput[CH7_CH] > 3500){
    50b4:	5f 53       	inc.b	r15		
    50b6:	4e 41       	mov.b	r1,	r14	
    50b8:	4e 3a       	jl	$-866    	;abs 0x4d56
    50ba:	30 2c       	jc	$+98     	;abs 0x511c
        MenuStep = WAIT_CH7_BACK;
    50bc:	43 4c       	.word	0x4c43;	????	Illegal as 2-op instr
    50be:	41 53       	add.b	#0,	r1	;r3 As==00
    50c0:	53 5f       	.word	0x5f53;	????	Illegal as 2-op instr
        MenuAnalog = DISPLAY;   // serve para colocar o menu analog na posicao inicial para quando for acessado denovo
    50c2:	51 4e 41 4e 	mov.b	20033(r14),r1	;0x4e41(r14)
    50c6:	3a 31       	jn	$+630    	;abs 0x533c
    50c8:	2c 43       	mov	#2,	r12	;r3 As==10
    50ca:	4c 41       	mov.b	r1,	r12	
        analog_graph_clear_all();
    50cc:	53 53       	inc.b	#0		;r3 As==00
    50ce:	5f 5a 45 52 	add.b	21061(r10),r15	;0x5245(r10)
        lcd_clear(BLACK);
    50d2:	4f 3a       	jl	$-864    	;abs 0x4d72
    50d4:	32 2c       	jc	$+102    	;abs 0x513a
    50d6:	43 4c       	.word	0x4c43;	????	Illegal as 2-op instr
    50d8:	41 53       	add.b	#0,	r1	;r3 As==00
    }
    50da:	53 5f       	.word	0x5f53;	????	Illegal as 2-op instr
    50dc:	4e 55       	add.b	r5,	r14	
    50de:	4d 42       	mov.b	r2,	r13	
}
    50e0:	45 52       	add.b	r2,	r5	
    50e2:	3a 33       	jn	$-394    	;abs 0x4f58
    50e4:	2c 43       	mov	#2,	r12	;r3 As==10

void draw_analog_graph(void){
    50e6:	4c 41       	mov.b	r1,	r12	
    50e8:	53 53       	inc.b	#0		;r3 As==00
    50ea:	5f 49 4e 46 	mov.b	17998(r9),r15	;0x464e(r9)
    50ee:	49 4e       	mov.b	r14,	r9	
    50f0:	49 54       	add.b	r4,	r9	
    int i, k;
    50f2:	59 3a       	jl	$-844    	;abs 0x4da6
    50f4:	34 2c       	jc	$+106    	;abs 0x515e
    50f6:	3b 00 66 70 	mova	0x7066,	r11	;PC rel. 0x0c15e
    50fa:	5f 63       	addc.b	#1,	r15	;r3 As==01
    50fc:	6c 61       	addc.b	@r1,	r12	
    for(i = 0; i < 8; i++){
        if((1 << i) & AnalogChecked){
    50fe:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    5100:	5f 74 79 70 	subc.b	28793(r4),r15	;0x7079(r4)
            for(k = 0; k < (GRAPH_LENGHT - 1); k++){
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], BLACK); // apaga a posicao antiga
                AnalogGraph[i][k] = AnalogGraph[i][k+1];
                lcd_drawpoint(k+GRAPH_OFFSETX, AnalogGraph[i][k], AnalogColours[i]); // desenha a posicao nova
    5104:	65 3a       	jl	$-820    	;abs 0x4dd0
    5106:	74 28       	jnc	$+234    	;abs 0x51f0
    5108:	38 2c       	jc	$+114    	;abs 0x517a
    510a:	31 34       	jge	$+100    	;abs 0x516e
    510c:	29 3d       	jmp	$+596    	;abs 0x5360
    510e:	28 38       	jl	$+82     	;abs 0x5160
            }
            AnalogGraph[i][GRAPH_LENGHT - 1] = GRAPH_OFFSET - ((AnalogValue[i] >> 6) & 0xFF); //inverte e ajusta ao tamanho do LCD
        }
    5110:	2c 31       	jn	$+602    	;abs 0x536a
    5112:	33 29       	jnc	$+616    	;abs 0x537a
    5114:	00 66       	addc	r6,	r0	
    5116:	70 5f       	add.b	@r15+,	r0	
    5118:	6e 75       	subc.b	@r5,	r14	
    }
    
}
    511a:	6d 62       	addc.b	#4,	r13	;r2 As==10
    511c:	65 72       	subc.b	#4,	r5	;r2 As==10

    511e:	5f 74 79 70 	subc.b	28793(r4),r15	;0x7079(r4)
    5122:	65 3a       	jl	$-820    	;abs 0x4dee
    5124:	74 28       	jnc	$+234    	;abs 0x520e
void analog_graph_clear(int n){
    5126:	38 2c       	jc	$+114    	;abs 0x5198
    5128:	31 35       	jge	$+612    	;abs 0x538c
    512a:	29 3d       	jmp	$+596    	;abs 0x537e
    int i;
    512c:	28 38       	jl	$+82     	;abs 0x517e
    512e:	2c 31       	jn	$+602    	;abs 0x5388
    5130:	36 29       	jnc	$+622    	;abs 0x539e
    for(i = 0; i < GRAPH_LENGHT; i++){
    5132:	3d 73       	subc	#-1,	r13	;r3 As==11
    5134:	38 63       	addc	#-1,	r8	;r3 As==11
    5136:	6c 61       	addc.b	@r1,	r12	
        lcd_drawpoint(i+GRAPH_OFFSETX, AnalogGraph[n][i], BLACK); // apaga a posicao antiga
    5138:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    513a:	3a 28       	jnc	$+118    	;abs 0x51b0
        AnalogGraph[n][i] = 0;
    513c:	30 2c       	jc	$+98     	;abs 0x519e
    513e:	32 29       	jnc	$+614    	;abs 0x53a4
    5140:	2c 30       	jn	$+90     	;abs 0x519a
    5142:	2c 38       	jl	$+90     	;abs 0x519c
    5144:	3b 73       	subc	#-1,	r11	;r3 As==11
    }
    5146:	69 67       	addc.b	@r7,	r9	
    5148:	6e 3a       	jl	$-802    	;abs 0x4e26
    514a:	28 30       	jn	$+82     	;abs 0x519c
}
    514c:	2c 31       	jn	$+602    	;abs 0x53a6
    514e:	31 29       	jnc	$+612    	;abs 0x53b2
    5150:	2c 38       	jl	$+90     	;abs 0x51aa
    5152:	2c 38       	jl	$+90     	;abs 0x51ac

    5154:	3b 6e       	addc	@r14+,	r11	
    5156:	6f 72       	subc.b	#4,	r15	;r2 As==10
    5158:	6d 61       	addc.b	@r1,	r13	
void process_analog_menu(void){
    515a:	6c 5f       	add.b	@r15,	r12	
    515c:	65 78       	subc.b	@r8,	r5	
    draw_analog_graph();
    switch(MenuAnalog){
    515e:	70 3a       	jl	$-798    	;abs 0x4e40
        case DISPLAY:
    5160:	28 30       	jn	$+82     	;abs 0x51b2
    5162:	2c 38       	jl	$+90     	;abs 0x51bc
    5164:	29 2c       	jc	$+84     	;abs 0x51b8
    5166:	31 36       	jge	$-924    	;abs 0x4dca
            lcd_goto(4,0);
            printf("ANALOG GRAPH   ");
            
    5168:	2c 31       	jn	$+602    	;abs 0x53c2
    516a:	36 3b       	jl	$-402    	;abs 0x4fd8
    516c:	66 72       	subc.b	#4,	r6	;r2 As==10
    516e:	61 63       	addc.b	#2,	r1	;r3 As==10
    5170:	74 69       	addc.b	@r9+,	r4	
    5172:	6f 6e       	addc.b	@r14,	r15	
    5174:	3a 28       	jnc	$+118    	;abs 0x51ea
    5176:	38 2c       	jc	$+114    	;abs 0x51e8
            lcd_goto(0,14);
    5178:	31 37       	jge	$-412    	;abs 0x4fdc
            printf("DISPLAY             ");

    517a:	29 3d       	jmp	$+596    	;abs 0x53ce
    517c:	75 34       	jge	$+236    	;abs 0x5268
            refresh_analog_menu();
    517e:	6c 6c       	addc.b	@r12,	r12	
    5180:	3a 28       	jnc	$+118    	;abs 0x51f6
    5182:	38 2c       	jc	$+114    	;abs 0x51f4
    5184:	39 29       	jnc	$+628    	;abs 0x53f8
            MenuAnalog = SELECT;
    5186:	2c 30       	jn	$+90     	;abs 0x51e0
    5188:	2c 33       	jn	$-422    	;abs 0x4fe2
    518a:	32 3b       	jl	$-410    	;abs 0x4ff0
            break;
    518c:	6c 3a       	jl	$-806    	;abs 0x4e66
    518e:	28 38       	jl	$+82     	;abs 0x51e0
    5190:	2c 31       	jn	$+602    	;abs 0x53ea
        case SELECT:
    5192:	38 29       	jnc	$+626    	;abs 0x5404
    5194:	3d 61       	addc	@r1+,	r13	
    5196:	72 28       	jnc	$+230    	;abs 0x527c
            lcd_goto(0,14);
    5198:	38 2c       	jc	$+114    	;abs 0x520a
    519a:	31 39       	jl	$+612    	;abs 0x53fe
            printf("SELECT            ");
    519c:	29 3d       	jmp	$+596    	;abs 0x53f0
    519e:	72 28       	jnc	$+230    	;abs 0x5284
    51a0:	38 2c       	jc	$+114    	;abs 0x5212
    51a2:	31 39       	jl	$+612    	;abs 0x5406
    51a4:	29 3b       	jl	$-428    	;abs 0x4ff8

    51a6:	30 30       	jn	$+98     	;abs 0x5208
    51a8:	30 30       	jn	$+98     	;abs 0x520a
    51aa:	30 30       	jn	$+98     	;abs 0x520c
            // move para os lados
            if(ChannelInput[ROLL_CH] > 3500){
    51ac:	30 30       	jn	$+98     	;abs 0x520e
    51ae:	30 30       	jn	$+98     	;abs 0x5210
    51b0:	30 30       	jn	$+98     	;abs 0x5212
    51b2:	30 3b       	jl	$-414    	;abs 0x5014
    51b4:	30 30       	jn	$+98     	;abs 0x5216
    51b6:	30 30       	jn	$+98     	;abs 0x5218
    51b8:	30 30       	jn	$+98     	;abs 0x521a
                MenuAnalog = WAIT_ROLL_LEFT;
            }
    51ba:	30 31       	jn	$+610    	;abs 0x541c
    51bc:	37 37       	jge	$-400    	;abs 0x502c
    51be:	37 37       	jge	$-400    	;abs 0x502e
    51c0:	37 3b       	jl	$-400    	;abs 0x5030
    51c2:	3b 30       	jn	$+120    	;abs 0x523a
    51c4:	3b 31       	jn	$+632    	;abs 0x543c
    51c6:	3b 28       	jnc	$+120    	;abs 0x523e
            else{
    51c8:	38 2c       	jc	$+114    	;abs 0x523a
    51ca:	31 30       	jn	$+100    	;abs 0x522e
    51cc:	29 2c       	jc	$+84     	;abs 0x5220
                if(ChannelInput[ROLL_CH] < 2500){
    51ce:	30 2c       	jc	$+98     	;abs 0x5230
    51d0:	33 32       	jn	$-920    	;abs 0x4e38
    51d2:	3b 3b       	jl	$-392    	;abs 0x504a
    51d4:	2c 33       	jn	$-422    	;abs 0x502e
    51d6:	32 2c       	jc	$+102    	;abs 0x523c
    51d8:	33 32       	jn	$-920    	;abs 0x4e40
    51da:	3b 3b       	jl	$-392    	;abs 0x5052
    51dc:	00 46       	br	r6		
    51de:	4c 4f       	mov.b	r15,	r12	
    51e0:	5f 75 6e 69 	subc.b	26990(r5),r15	;0x696e(r5)
                    MenuAnalog = WAIT_ROLL_RIGHT;
                }
    51e4:	6f 6e       	addc.b	@r14,	r15	
    51e6:	5f 74 79 70 	subc.b	28793(r4),r15	;0x7079(r4)
    51ea:	65 3a       	jl	$-820    	;abs 0x4eb6
            }
    51ec:	74 28       	jnc	$+234    	;abs 0x52d6
    51ee:	38 2c       	jc	$+114    	;abs 0x5260
    51f0:	32 30       	jn	$+102    	;abs 0x5256
            
    51f2:	29 3d       	jmp	$+596    	;abs 0x5446
    51f4:	28 38       	jl	$+82     	;abs 0x5246
            // check uncheck
            if(ChannelInput[PITCH_CH] < 2500){
    51f6:	2c 32       	jn	$-934    	;abs 0x4e50
                MenuAnalog = WAIT_PITCH_DOWN;
    51f8:	31 29       	jnc	$+612    	;abs 0x545c
    51fa:	3d 75       	subc	@r5+,	r13	
    51fc:	34 76       	subc	@r6+,	r4	
    51fe:	61 6c       	addc.b	@r12,	r1	
    5200:	75 65       	addc.b	@r5+,	r5	
    5202:	3a 28       	jnc	$+118    	;abs 0x5278
            }
            else{
                if(ChannelInput[PITCH_CH] > 3500){
    5204:	38 2c       	jc	$+114    	;abs 0x5276
    5206:	31 31       	jn	$+612    	;abs 0x546a
    5208:	29 2c       	jc	$+84     	;abs 0x525c
    520a:	30 2c       	jc	$+98     	;abs 0x526c
    520c:	33 32       	jn	$-920    	;abs 0x4e74
                    MenuAnalog = WAIT_PITCH_UP;
                }
            }
    520e:	3b 76       	subc	@r6+,	r11	
    5210:	61 6c       	addc.b	@r12,	r1	
            
    5212:	75 65       	addc.b	@r5+,	r5	
    5214:	5f 72 61 77 	subc.b	&0x7761,r15	
    5218:	3a 28       	jnc	$+118    	;abs 0x528e
            break;
    521a:	38 2c       	jc	$+114    	;abs 0x528c
    521c:	39 29       	jnc	$+628    	;abs 0x5490
    521e:	2c 30       	jn	$+90     	;abs 0x5278
        case WAIT_PITCH_DOWN:
    5220:	2c 33       	jn	$-422    	;abs 0x507a
    5222:	32 3b       	jl	$-410    	;abs 0x5088
    5224:	62 69       	addc.b	@r9,	r2	
    5226:	74 73       	subc.b	#-1,	r4	;r3 As==11
    5228:	3a 28       	jnc	$+118    	;abs 0x529e
            lcd_goto(0,14);
    522a:	38 2c       	jc	$+114    	;abs 0x529c
    522c:	32 32       	jn	$-922    	;abs 0x4e92
    522e:	29 3d       	jmp	$+596    	;abs 0x5482
            printf("WAIT PITCH DOWN    ");
    5230:	73 34       	jge	$+232    	;abs 0x5318
    5232:	66 72       	subc.b	#4,	r6	;r2 As==10
    5234:	61 63       	addc.b	#2,	r1	;r3 As==10
    5236:	74 69       	addc.b	@r9+,	r4	

    5238:	6f 6e       	addc.b	@r14,	r15	
    523a:	3a 28       	jnc	$+118    	;abs 0x52b0
    523c:	38 2c       	jc	$+114    	;abs 0x52ae
            if(ChannelInput[PITCH_CH] > 2500){
    523e:	39 29       	jnc	$+628    	;abs 0x54b2
    5240:	2c 30       	jn	$+90     	;abs 0x529a
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    5242:	2c 32       	jn	$-934    	;abs 0x4e9c
    5244:	33 3b       	jl	$-408    	;abs 0x50ac
    5246:	65 78       	subc.b	@r8,	r5	
    5248:	70 3a       	jl	$-798    	;abs 0x4f2a
    524a:	28 30       	jn	$+82     	;abs 0x529c
                MenuAnalog = DISPLAY;
    524c:	2c 34       	jge	$+90     	;abs 0x52a6
    524e:	29 2c       	jc	$+84     	;abs 0x52a2
    5250:	32 33       	jn	$-410    	;abs 0x50b6
            }
    5252:	2c 38       	jl	$+90     	;abs 0x52ac
    5254:	3b 73       	subc	#-1,	r11	;r3 As==11
    5256:	69 67       	addc.b	@r7,	r9	
    5258:	6e 3a       	jl	$-802    	;abs 0x4f36
            break;
    525a:	28 30       	jn	$+82     	;abs 0x52ac
    525c:	2c 34       	jge	$+90     	;abs 0x52b6
    525e:	29 2c       	jc	$+84     	;abs 0x52b2
            
    5260:	33 31       	jn	$+616    	;abs 0x54c8
    5262:	2c 31       	jn	$+602    	;abs 0x54bc
        case WAIT_PITCH_UP:
            lcd_goto(0,14);
    5264:	3b 3b       	jl	$-392    	;abs 0x50dc
            printf("WAIT PITCH UP    ");
    5266:	2c 30       	jn	$+90     	;abs 0x52c0
    5268:	2c 33       	jn	$-422    	;abs 0x50c2
    526a:	32 3b       	jl	$-410    	;abs 0x50d0
    526c:	3b 00 5f 66 	mova	0x665f,	r11	;PC rel. 0x0b8cd

            if(ChannelInput[PITCH_CH] < 3500){
                AnalogChecked = AnalogChecked^(1<<AnalogSelect);
    5270:	70 61       	addc.b	@r1+,	r0	
    5272:	64 64       	addc.b	@r4,	r4	
    5274:	5f 70 61 72 	subc.b	0x7261,	r15	;PC rel. 0x0c4d9
    5278:	74 73       	subc.b	#-1,	r4	;r3 As==11
    527a:	3a 66       	addc	@r6+,	r10	
    527c:	28 31       	jn	$+594    	;abs 0x54ce
                analog_graph_clear(AnalogSelect);
    527e:	2c 31       	jn	$+602    	;abs 0x54d8
                MenuAnalog = DISPLAY;
            }
    5280:	29 3d       	jmp	$+596    	;abs 0x54d4
    5282:	2a 28       	jnc	$+86     	;abs 0x52d8
            break;
    5284:	38 2c       	jc	$+114    	;abs 0x52f6
    5286:	31 35       	jge	$+612    	;abs 0x54ea
    5288:	29 00 61 3a 	mova	&0x03a61,r9	
            
    528c:	50 28       	jnc	$+162    	;abs 0x532e
    528e:	31 2c       	jc	$+100    	;abs 0x52f2
    5290:	31 29       	jnc	$+612    	;abs 0x54f4
        case WAIT_ROLL_RIGHT:
    5292:	00 62       	addc	r2,	r0	
    5294:	3a 50 28 31 	add	#12584,	r10	;#0x3128
    5298:	2c 31       	jn	$+602    	;abs 0x54f2
    529a:	29 00 74 6d 	mova	&0x06d74,r9	
                lcd_goto(0,14);
    529e:	70 3a       	jl	$-798    	;abs 0x4f80
    52a0:	50 28       	jnc	$+162    	;abs 0x5342
                printf("WAIT ROLL RIGHT ");
    52a2:	31 2c       	jc	$+100    	;abs 0x5306
    52a4:	31 29       	jnc	$+612    	;abs 0x5508
    52a6:	00 74       	subc	r4,	r0	
    52a8:	66 72       	subc.b	#4,	r6	;r2 As==10

    52aa:	61 63       	addc.b	#2,	r1	;r3 As==10
    52ac:	74 69       	addc.b	@r9+,	r4	
    52ae:	6f 6e       	addc.b	@r14,	r15	
                if(ChannelInput[PITCH_CH] < 3500){
    52b0:	3a 72       	subc	#8,	r10	;r2 As==11
    52b2:	28 38       	jl	$+82     	;abs 0x5304
                    if(AnalogSelect > 0){
    52b4:	2c 31       	jn	$+602    	;abs 0x550e
    52b6:	32 29       	jnc	$+614    	;abs 0x551c
    52b8:	00 61       	addc	r1,	r0	
    52ba:	5f 6e 6f 72 	addc.b	29295(r14),r15	;0x726f(r14)
                        AnalogSelect--;
    52be:	6d 61       	addc.b	@r1,	r13	
    52c0:	6c 5f       	add.b	@r15,	r12	
    52c2:	65 78       	subc.b	@r8,	r5	
                    }
                    MenuAnalog = DISPLAY;
    52c4:	70 3a       	jl	$-798    	;abs 0x4fa6
    52c6:	72 28       	jnc	$+230    	;abs 0x53ac
    52c8:	30 2c       	jc	$+98     	;abs 0x532a
    52ca:	31 29       	jnc	$+612    	;abs 0x552e
    52cc:	00 62       	addc	r2,	r0	
    52ce:	5f 6e 6f 72 	addc.b	29295(r14),r15	;0x726f(r14)
                }
            break;
    52d2:	6d 61       	addc.b	@r1,	r13	
    52d4:	6c 5f       	add.b	@r15,	r12	
    52d6:	65 78       	subc.b	@r8,	r5	
    52d8:	70 3a       	jl	$-798    	;abs 0x4fba
    52da:	72 28       	jnc	$+230    	;abs 0x53c0
    52dc:	30 2c       	jc	$+98     	;abs 0x533e
    52de:	31 29       	jnc	$+612    	;abs 0x5542
            
    52e0:	00 61       	addc	r1,	r0	
    52e2:	5f 66 72 61 	addc.b	24946(r6),r15	;0x6172(r6)
        case WAIT_ROLL_LEFT:
    52e6:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    52e8:	69 6f       	addc.b	@r15,	r9	
    52ea:	6e 3a       	jl	$-802    	;abs 0x4fc8
    52ec:	72 28       	jnc	$+230    	;abs 0x53d2
    52ee:	38 2c       	jc	$+114    	;abs 0x5360
    52f0:	39 29       	jnc	$+628    	;abs 0x5564
    52f2:	00 62       	addc	r2,	r0	
    52f4:	5f 66 72 61 	addc.b	24946(r6),r15	;0x6172(r6)
    52f8:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
                lcd_goto(0,14);
                printf("WAIT ROLL LEFT   ");
    52fa:	69 6f       	addc.b	@r15,	r9	
    52fc:	6e 3a       	jl	$-802    	;abs 0x4fda
    52fe:	72 28       	jnc	$+230    	;abs 0x53e4
    5300:	38 2c       	jc	$+114    	;abs 0x5372
    5302:	39 29       	jnc	$+628    	;abs 0x5576
        
    5304:	00 64       	addc	r4,	r0	
    5306:	69 66       	addc.b	@r6,	r9	
    5308:	66 3a       	jl	$-818    	;abs 0x4fd6
                if(ChannelInput[PITCH_CH] > 2500){
    530a:	72 28       	jnc	$+230    	;abs 0x53f0
    530c:	30 2c       	jc	$+98     	;abs 0x536e
                   if(AnalogSelect < 7){
                        AnalogSelect++;
    530e:	31 29       	jnc	$+612    	;abs 0x5572
                    }
    5310:	00 5f       	add	r15,	r0	
    5312:	5f 61 64 64 	addc.b	25700(r1),r15	;0x6464(r1)
    5316:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    5318:	33 3a       	jl	$-920    	;abs 0x4f80
    531a:	46 28       	jnc	$+142    	;abs 0x53a8
#include "signal.h"
#include "msp430x261x.h"
#include "delay.h"
#include "analog.h"
#include "lcd6100.h"
#include "eeprom.h"
    531c:	38 2c       	jc	$+114    	;abs 0x538e
    531e:	31 31       	jn	$+612    	;abs 0x5582
#include "i2c.h"
#include "microquad.h"
    5320:	29 00 61 72 	mova	&0x07261,r9	

    5324:	67 5f       	add.b	@r15,	r7	
    5326:	61 3a       	jl	$-828    	;abs 0x4fea
    5328:	50 28       	jnc	$+162    	;abs 0x53ca
volatile unsigned int ControlCounter = 0;
    532a:	38 2c       	jc	$+114    	;abs 0x539c
    532c:	31 31       	jn	$+612    	;abs 0x5590
    532e:	29 00 61 72 	mova	&0x07261,r9	
volatile unsigned int RCCounter = 0;
    5332:	67 5f       	add.b	@r15,	r7	
volatile unsigned int MenuCounter = 0;
    5334:	62 3a       	jl	$-826    	;abs 0x4ffa

/*
    5336:	50 28       	jnc	$+162    	;abs 0x53d8
    5338:	38 2c       	jc	$+114    	;abs 0x53aa
    533a:	31 31       	jn	$+612    	;abs 0x559e
    533c:	29 00 61 3a 	mova	&0x03a61,r9	
    5340:	28 38       	jl	$+82     	;abs 0x5392
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    5342:	2c 31       	jn	$+602    	;abs 0x559c
    5344:	35 29       	jnc	$+620    	;abs 0x55b0
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
    5346:	00 62       	addc	r2,	r0	
    5348:	3a 28       	jnc	$+118    	;abs 0x53be
    534a:	38 2c       	jc	$+114    	;abs 0x53bc
    534c:	31 35       	jge	$+612    	;abs 0x55b0
    534e:	29 00 74 6d 	mova	&0x06d74,r9	
    5352:	70 3a       	jl	$-798    	;abs 0x5034
    5354:	28 38       	jl	$+82     	;abs 0x53a6
    5356:	2c 31       	jn	$+602    	;abs 0x55b0
    5358:	35 29       	jnc	$+620    	;abs 0x55c4
    535a:	00 72       	subc	r2,	r0	
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
    535c:	65 73       	subc.b	#2,	r5	;r3 As==10
    535e:	3a 72       	subc	#8,	r10	;r2 As==11
char SetupDone = FALSE;         // fica true quando acaba o setup, serve para saber se ja pode comecar a ler o radio
    5360:	28 31       	jn	$+594    	;abs 0x55b2
    5362:	2c 31       	jn	$+602    	;abs 0x55bc
    5364:	29 00 61 75 	mova	&0x07561,r9	
    5368:	3a 28       	jnc	$+118    	;abs 0x53de
    536a:	38 2c       	jc	$+114    	;abs 0x53dc
    536c:	32 30       	jn	$+102    	;abs 0x53d2
char MotorArmed = FALSE;        // seguranca, o loop de controle so eh feito quando esta variavei for TRUE
    536e:	29 00 62 75 	mova	&0x07562,r9	

    5372:	3a 28       	jnc	$+118    	;abs 0x53e8
    5374:	38 2c       	jc	$+114    	;abs 0x53e6
MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
    5376:	32 30       	jn	$+102    	;abs 0x53dc
    5378:	29 00 5f 5f 	mova	&0x05f5f,r9	
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
    537c:	73 75       	.word	0x7573;	????	Illegal as 2-op instr
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal
    537e:	62 73       	subc.b	#2,	r2	;r3 As==10
    5380:	66 33       	jn	$-306    	;abs 0x524e
    5382:	3a 46       	mov	@r6+,	r10	

    5384:	28 38       	jl	$+82     	;abs 0x53d6
    5386:	2c 31       	jn	$+602    	;abs 0x55e0
    5388:	31 29       	jnc	$+612    	;abs 0x55ec
    538a:	00 5f       	add	r15,	r0	
    538c:	5f 6d 75 6c 	addc.b	27765(r13),r15	;0x6c75(r13)
    5390:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    5392:	33 3a       	jl	$-920    	;abs 0x4ffa
    5394:	46 28       	jnc	$+142    	;abs 0x5422
    5396:	38 2c       	jc	$+114    	;abs 0x5408
    5398:	31 31       	jn	$+612    	;abs 0x55fc
    539a:	29 00 72 65 	mova	&0x06572,r9	
    539e:	73 3a       	jl	$-792    	;abs 0x5086
    53a0:	72 28       	jnc	$+230    	;abs 0x5486
    53a2:	31 2c       	jc	$+100    	;abs 0x5406
    53a4:	31 29       	jnc	$+612    	;abs 0x5608
    53a6:	3d 2a       	jnc	$-900    	;abs 0x5022
    53a8:	28 38       	jl	$+82     	;abs 0x53fa
    53aa:	2c 31       	jn	$+602    	;abs 0x5604
    53ac:	35 29       	jnc	$+620    	;abs 0x5618
    53ae:	00 5f       	add	r15,	r0	
    53b0:	66 70       	subc.b	@r0,	r6	
    53b2:	6d 75       	subc.b	@r5,	r13	
    53b4:	6c 5f       	add.b	@r15,	r12	
    53b6:	70 61       	addc.b	@r1+,	r0	
    53b8:	72 74       	subc.b	@r4+,	r2	
    53ba:	73 3a       	jl	$-792    	;abs 0x50a2
    53bc:	66 28       	jnc	$+206    	;abs 0x548a
    53be:	31 2c       	jc	$+100    	;abs 0x5422
    53c0:	31 29       	jnc	$+612    	;abs 0x5624
    53c2:	00 74       	subc	r4,	r0	
    53c4:	6d 70       	subc.b	@r0,	r13	
    53c6:	3a 70 28 31 	subc	#12584,	r10	;#0x3128
    StatusFlags:
    ----------------------------------
    |FirstSetup | Reserved | Reserved|
    ----------------------------------*/
char StatusFlags[3] = {0, 0, 0};// ficam guardados na EEPROM
char MenuVisible = FALSE;       // indica se o menu deve ser processado ou nao
    53ca:	2c 31       	jn	$+602    	;abs 0x5624
    53cc:	29 00 6c 6f 	mova	&0x06f6c,r9	
    53d0:	77 3a       	jl	$-784    	;abs 0x50c0
MENU_STEPSET MenuStep = DISPLAY;        // gerencia o menu principal
MENU_STEPSET MenuAnalog = DISPLAY;      // gerencia os canais analog visiveis
MENU_OPTION MenuOption = READY;         // guarda a opcao escolhida no menu principal

// variaveis usadas no menu analog graph
char AnalogSelect = 7;      // serve para selecionar a entrada no menu analog
    53d2:	28 38       	jl	$+82     	;abs 0x5424
    53d4:	2c 39       	jl	$+602    	;abs 0x562e
    53d6:	29 00 68 69 	mova	&0x06968,r9	
    53da:	67 68       	addc.b	@r8,	r7	
    53dc:	3a 72       	subc	#8,	r10	;r2 As==11
    53de:	28 38       	jl	$+82     	;abs 0x5430
    53e0:	2c 39       	jl	$+602    	;abs 0x563a
    53e2:	29 00 78 3a 	mova	&0x03a78,r9	
    53e6:	72 28       	jnc	$+230    	;abs 0x54cc
    53e8:	38 2c       	jc	$+114    	;abs 0x545a
    53ea:	39 29       	jnc	$+628    	;abs 0x565e
    53ec:	00 79       	subc	r9,	r0	
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
    53ee:	6c 6f       	addc.b	@r15,	r12	
    53f0:	77 3a       	jl	$-784    	;abs 0x50e0
    53f2:	72 28       	jnc	$+230    	;abs 0x54d8
    53f4:	38 2c       	jc	$+114    	;abs 0x5466
    53f6:	39 29       	jnc	$+628    	;abs 0x566a
    53f8:	00 79       	subc	r9,	r0	
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

    53fa:	68 69       	addc.b	@r9,	r8	
    53fc:	67 68       	addc.b	@r8,	r7	
// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    53fe:	3a 72       	subc	#8,	r10	;r2 As==11
    5400:	28 38       	jl	$+82     	;abs 0x5452
    5402:	2c 39       	jl	$+602    	;abs 0x565c
    5404:	29 00 62 69 	mova	&0x06962,r9	
float PPMOffset[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // ver funcao process_rc() calibrate_radio()
    5408:	74 3a       	jl	$-790    	;abs 0x50f2
    540a:	28 30       	jn	$+82     	;abs 0x545c
    540c:	2c 31       	jn	$+602    	;abs 0x5666
    540e:	29 00 63 61 	mova	&0x06163,r9	
    5412:	72 72       	subc.b	#8,	r2	;r2 As==11
    5414:	79 3a       	jl	$-780    	;abs 0x5108
    5416:	28 30       	jn	$+82     	;abs 0x5468
    5418:	2c 31       	jn	$+602    	;abs 0x5672
    541a:	29 00 5f 5f 	mova	&0x05f5f,r9	

    541e:	64 69       	addc.b	@r9,	r4	
// variaveis leitura radio raw
    5420:	76 73       	subc.b	#-1,	r6	;r3 As==11
    5422:	66 33       	jn	$-306    	;abs 0x52f0
volatile unsigned int TimeUpEdge[8] = {0,0,0,0,0,0,0,0};            // 
    5424:	3a 46       	mov	@r6+,	r10	
    5426:	28 38       	jl	$+82     	;abs 0x5478
volatile unsigned int PPMValue[8] = {0,0,0,0,0,0,0,0};
    5428:	2c 31       	jn	$+602    	;abs 0x5682
    542a:	31 29       	jnc	$+612    	;abs 0x568e
volatile unsigned int ChannelInput[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    542c:	00 5f       	add	r15,	r0	
    542e:	66 70       	subc.b	@r0,	r6	
    5430:	64 69       	addc.b	@r9,	r4	

    5432:	76 5f       	add.b	@r15+,	r6	
    5434:	70 61       	addc.b	@r1+,	r0	
    5436:	72 74       	subc.b	@r4+,	r2	
    5438:	73 3a       	jl	$-792    	;abs 0x5120
    543a:	66 28       	jnc	$+206    	;abs 0x5508
    543c:	31 2c       	jc	$+100    	;abs 0x54a0
    543e:	31 29       	jnc	$+612    	;abs 0x56a2
    5440:	00 62       	addc	r2,	r0	
    5442:	69 74       	subc.b	@r4,	r9	
    5444:	3a 72       	subc	#8,	r10	;r2 As==11
    5446:	28 38       	jl	$+82     	;abs 0x5498
int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    5448:	2c 39       	jl	$+602    	;abs 0x56a2
    544a:	29 00 6e 75 	mova	&0x0756e,r9	
    544e:	6d 65       	addc.b	@r5,	r13	
    5450:	72 61       	addc.b	@r1+,	r2	
char AnalogChecked = 0x00;  // verifica se a entrada X deve ser mostrada no grafico
char AnalogGraph[8][GRAPH_LENGHT];   // um vetor para cada entrada analogica, guarda as ultimas GRAPH_LENGHT leituras, total = 800B
char AnalogColours[8] = {BLUE, LIME, RED, YELLOW, ORANGE, MAGENTA, AQUA, WHITE}; 

// variaveis ajuste radio
float PPMSlope[8] = {1, 1, 1, 1, 1, 1, 1, 1};   // leitura do radio: leitura_ajustada = slope * leitura_real + offset
    5452:	74 6f       	addc.b	@r15+,	r4	
    5454:	72 3a       	jl	$-794    	;abs 0x513a
    5456:	72 28       	jnc	$+230    	;abs 0x553c
int main(){
    WDTCTL = WDTPW + WDTHOLD;   // desabilita watchdog

    INICIO: //loop main, vir para ca no caso de um reset
    setup();    // inicializa perifericos e verifica se precisa calibrar o radio

    5458:	38 2c       	jc	$+114    	;abs 0x54ca
    545a:	39 29       	jnc	$+628    	;abs 0x56ce
    545c:	00 64       	addc	r4,	r0	
    lcd_clear(BLACK);
    
    545e:	65 6e       	addc.b	@r14,	r5	
    MenuOption = RADIO_RAW;
    5460:	6f 6d       	addc.b	@r13,	r15	
    5462:	69 6e       	addc.b	@r14,	r9	
    5464:	61 74       	subc.b	@r4,	r1	
    5466:	6f 72       	subc.b	#4,	r15	;r2 As==10
    5468:	3a 72       	subc	#8,	r10	;r2 As==11
    546a:	28 38       	jl	$+82     	;abs 0x54bc
    546c:	2c 39       	jl	$+602    	;abs 0x56c6
    546e:	29 00 71 75 	mova	&0x07571,r9	
    5472:	6f 74       	subc.b	@r4,	r15	
    5474:	69 65       	addc.b	@r5,	r9	
    MenuStep = DISPLAY;
    5476:	6e 74       	subc.b	@r4,	r14	
    5478:	3a 72       	subc	#8,	r10	;r2 As==11
    MenuVisible = TRUE;     // inicializa mostrando o menu
    547a:	28 38       	jl	$+82     	;abs 0x54cc
    547c:	2c 39       	jl	$+602    	;abs 0x56d6
        
    547e:	29 00 5f 5f 	mova	&0x05f5f,r9	
    while(1){
    5482:	67 74       	subc.b	@r4,	r7	
    5484:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
        /* os Counters sao incrementados na interrution do timerA
    5486:	32 3a       	jl	$-922    	;abs 0x50ec
    5488:	46 28       	jnc	$+142    	;abs 0x5516
    548a:	38 2c       	jc	$+114    	;abs 0x54fc
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
    548c:	33 29       	jnc	$+616    	;abs 0x56f4
    548e:	00 5f       	add	r15,	r0	
    5490:	5f 67 65 73 	addc.b	29541(r7),r15	;0x7365(r7)
    5494:	66 32       	jn	$-818    	;abs 0x5162
    5496:	3a 46       	mov	@r6+,	r10	
    5498:	28 38       	jl	$+82     	;abs 0x54ea
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
    549a:	2c 33       	jn	$-422    	;abs 0x52f4
    while(1){
        /* os Counters sao incrementados na interrution do timerA
        esta parte do codigo nao esta dentro da interruption do timerA porque ela eh muito extensa
        e a prioridade da interrupcao do timerA eh uma das mais altas, fazendo com que as interruption
        da P1 e P2 fiquem esperando. Isso prejudica a leitura do radio. Se a prioridade da P1 e P2 for
        maior que a do timerA todo o codigo a seguir poderia estar la dentro da interruption do timerA.
    549c:	29 00 5f 5f 	mova	&0x05f5f,r9	
    54a0:	6c 74       	subc.b	@r4,	r12	
        Outra maneira eh delegar a leitura dos PPM para outro MSP, algum bem pequeno, so precisa de uma
        P1 completa. */
    54a2:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    54a4:	32 3a       	jl	$-922    	;abs 0x510a
    54a6:	46 28       	jnc	$+142    	;abs 0x5534
    54a8:	38 2c       	jc	$+114    	;abs 0x551a
    54aa:	33 29       	jnc	$+616    	;abs 0x5712
    54ac:	00 5f       	add	r15,	r0	
    54ae:	5f 66 6c 6f 	addc.b	28524(r6),r15	;0x6f6c(r6)
    54b2:	61 74       	subc.b	@r4,	r1	
    54b4:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
    54b6:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    54b8:	3a 46       	mov	@r6+,	r10	
    54ba:	28 38       	jl	$+82     	;abs 0x550c
    54bc:	2c 31       	jn	$+602    	;abs 0x5716
    54be:	31 29       	jnc	$+612    	;abs 0x5722
    54c0:	00 61       	addc	r1,	r0	
    54c2:	72 67       	addc.b	@r7+,	r2	
    54c4:	5f 61 3a 50 	addc.b	20538(r1),r15	;0x503a(r1)
    54c8:	28 38       	jl	$+82     	;abs 0x551a
    54ca:	2c 34       	jge	$+90     	;abs 0x5524
    54cc:	29 00 69 6e 	mova	&0x06e69,r9	
    54d0:	3a 28       	jnc	$+118    	;abs 0x5546
    54d2:	38 2c       	jc	$+114    	;abs 0x5544
    54d4:	31 35       	jge	$+612    	;abs 0x5738
    54d6:	29 00 5f 5f 	mova	&0x05f5f,r9	
    54da:	66 69       	addc.b	@r9,	r6	
    54dc:	78 73       	subc.b	#-1,	r8	;r3 As==11
    54de:	66 73       	subc.b	#2,	r6	;r3 As==10
    54e0:	69 3a       	jl	$-812    	;abs 0x51b4
     */
    BCSCTL1 = 0xcf;     

    /* 
     * Basic Clock System Control 3
     * 
    54e2:	46 28       	jnc	$+142    	;abs 0x5570
    54e4:	38 2c       	jc	$+114    	;abs 0x5556
    54e6:	34 29       	jnc	$+618    	;abs 0x5750
    54e8:	00 5f       	add	r15,	r0	
    54ea:	5f 74 68 65 	subc.b	25960(r4),r15	;0x6568(r4)
    54ee:	6e 61       	addc.b	@r1,	r14	
    54f0:	6e 5f       	add.b	@r15,	r14	
    54f2:	73 66       	.word	0x6673;	????	Illegal as 2-op instr
    54f4:	3a 47       	mov	@r7+,	r10	

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    54f6:	28 31       	jn	$+594    	;abs 0x5748
    54f8:	2c 31       	jn	$+602    	;abs 0x5752
    54fa:	29 3d       	jmp	$+596    	;abs 0x574e
    54fc:	6b 28       	jnc	$+216    	;abs 0x55d4
    54fe:	38 2c       	jc	$+114    	;abs 0x5570
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    5500:	31 35       	jge	$+612    	;abs 0x5764
    5502:	29 00 5f 5f 	mova	&0x05f5f,r9	
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5506:	70 61       	addc.b	@r1+,	r0	
    5508:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr
    550a:	5f 66 3a 46 	addc.b	17978(r6),r15	;0x463a(r6)
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    550e:	28 38       	jl	$+82     	;abs 0x5560
    5510:	2c 31       	jn	$+602    	;abs 0x576a
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5512:	31 29       	jnc	$+612    	;abs 0x5776
    5514:	00 73       	sbc	r0		
    5516:	72 63       	addc.b	#-1,	r2	;r3 As==11
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5518:	3a 50 28 31 	add	#12584,	r10	;#0x3128
            lcd_goto(0,14);
    551c:	2c 31       	jn	$+602    	;abs 0x5776
    551e:	29 3d       	jmp	$+596    	;abs 0x5772
    5520:	2a 28       	jnc	$+86     	;abs 0x5576
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5522:	38 2c       	jc	$+114    	;abs 0x5594
    5524:	31 35       	jge	$+612    	;abs 0x5788
    5526:	29 00 64 73 	mova	&0x07364,r9	
    552a:	74 3a       	jl	$-790    	;abs 0x5214
    552c:	28 38       	jl	$+82     	;abs 0x557e
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
            break;
    552e:	2c 32       	jn	$-934    	;abs 0x5188
    5530:	30 29       	jnc	$+610    	;abs 0x5792
            if(ChannelInput[PITCH_CH] > 2500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
    5532:	00 66       	addc	r6,	r0	
     * CM_0 -- No Capture
     * CCIS_0 -- CCIxA
     * ~SCS -- Asynchronous Capture
     * ~SCCI -- Latched capture signal (read)
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
    5534:	72 61       	addc.b	@r1+,	r2	
    5536:	63 74       	.word	0x7463;	????	Illegal as 2-op instr
    5538:	69 6f       	addc.b	@r15,	r9	
    553a:	6e 3a       	jl	$-802    	;abs 0x5218
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    553c:	72 28       	jnc	$+230    	;abs 0x5622
    553e:	38 2c       	jc	$+114    	;abs 0x55b0
    5540:	39 29       	jnc	$+628    	;abs 0x57b4
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5542:	00 73       	sbc	r0		
    5544:	69 67       	addc.b	@r7,	r9	
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5546:	6e 3a       	jl	$-802    	;abs 0x5224
    5548:	72 28       	jnc	$+230    	;abs 0x562e
    554a:	30 2c       	jc	$+98     	;abs 0x55ac
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    554c:	31 29       	jnc	$+612    	;abs 0x57b0
    554e:	00 65       	addc	r5,	r0	
            
    5550:	78 70 3a 72 	subc.b	#29242,	r8	;#0x723a
    5554:	28 30       	jn	$+82     	;abs 0x55a6
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5556:	2c 31       	jn	$+602    	;abs 0x57b0
    5558:	29 00 73 68 	mova	&0x06873,r9	
{
    /* 
     * TACCTL0, Capture/Compare Control Register 0
     * 
     * CM_0 -- No Capture
     * CCIS_0 -- CCIxA
    555c:	69 66       	addc.b	@r6,	r9	
    555e:	74 3a       	jl	$-790    	;abs 0x5248
    5560:	72 28       	jnc	$+230    	;abs 0x5646
    5562:	30 2c       	jc	$+98     	;abs 0x55c4
    5564:	31 29       	jnc	$+612    	;abs 0x57c8
    5566:	00 6c       	addc	r12,	r0	
    5568:	6f 77       	subc.b	@r7,	r15	
    556a:	62 69       	addc.b	@r9,	r2	
     * ~SCS -- Asynchronous Capture
    556c:	74 3a       	jl	$-790    	;abs 0x5256
    556e:	72 28       	jnc	$+230    	;abs 0x5654
    5570:	30 2c       	jc	$+98     	;abs 0x55d2
    5572:	31 29       	jnc	$+612    	;abs 0x57d6
    5574:	00 5f       	add	r15,	r0	
    5576:	5f 75 6e 70 	subc.b	28782(r5),r15	;0x706e(r5)
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    }

    // grava dados na EEPROM
    if(EEPROMFound){
        i2c_change_address(EEPROM_I2C_ADDR);
    557a:	61 63       	addc.b	#2,	r1	;r3 As==10
    557c:	6b 5f       	add.b	@r15,	r11	
    557e:	66 3a       	jl	$-818    	;abs 0x524c
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    5580:	46 28       	jnc	$+142    	;abs 0x560e
    5582:	30 2c       	jc	$+98     	;abs 0x55e4
    5584:	32 30       	jn	$+102    	;abs 0x55ea
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5586:	29 00 73 72 	mova	&0x07273,r9	
     * ~CAP -- Compare mode
     * OUTMOD_0 -- PWM output mode: 0 - OUT bit value
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    TACCTL0 = CM_0 + CCIS_0 + OUTMOD_0 + CCIE;
    558a:	63 3a       	jl	$-824    	;abs 0x5252
    558c:	50 28       	jnc	$+162    	;abs 0x562e
    TACCR0 = 4001;

    /* 
     * TACTL, Timer_A3 Control Register
     * 
     * TASSEL_2 -- SMCLK
    558e:	31 2c       	jc	$+100    	;abs 0x55f2
    5590:	31 29       	jnc	$+612    	;abs 0x57f4
     * ID_3 -- Divider - /8
    5592:	3d 2a       	jnc	$-900    	;abs 0x520e
    5594:	28 38       	jl	$+82     	;abs 0x55e6
     * MC_1 -- Up Mode
    5596:	2c 32       	jn	$-934    	;abs 0x51f0
    5598:	30 29       	jnc	$+610    	;abs 0x57fa
    559a:	00 64       	addc	r4,	r0	
    559c:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
     */
    559e:	3a 50 28 31 	add	#12584,	r10	;#0x3128
    55a2:	2c 32       	jn	$-934    	;abs 0x51fc
    55a4:	29 3d       	jmp	$+596    	;abs 0x57f8
    TACTL = TASSEL_2 + ID_3 + MC_1;
}
    55a6:	2a 28       	jnc	$+86     	;abs 0x55fc
    55a8:	38 2c       	jc	$+114    	;abs 0x561a

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    55aa:	31 35       	jge	$+612    	;abs 0x580e
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    // aqui eh usado PPM_P1_MASK, pq eh a interrupcao da P1 
    55ac:	29 00 5f 5f 	mova	&0x05f5f,r9	
    55b0:	66 70       	subc.b	@r0,	r6	
    int channel_num = 0, PPM_ch_counter;
    for(PPM_ch_counter = 0x01; PPM_ch_counter <= 0x80; PPM_ch_counter = PPM_ch_counter << 1){
        if(P1IFG & (PPM_ch_counter & PPM_P1MASK)){
    55b2:	63 6d       	.word	0x6d63;	????	Illegal as 2-op instr
    55b4:	70 5f       	add.b	@r15+,	r0	
    55b6:	70 61       	addc.b	@r1+,	r0	
    55b8:	72 74       	subc.b	@r4+,	r2	
    55ba:	73 5f       	.word	0x5f73;	????	Illegal as 2-op instr
            if(!(P1IES & PPM_ch_counter)){ // low to high
                TimeUpEdge[channel_num] = PPM_aux;
    55bc:	66 3a       	jl	$-818    	;abs 0x528a
                P1IES |= (PPM_ch_counter & PPM_P1MASK); // configura high to low
    55be:	46 28       	jnc	$+142    	;abs 0x564c
    55c0:	30 2c       	jc	$+98     	;abs 0x5622
    55c2:	31 29       	jnc	$+612    	;abs 0x5826
    55c4:	00 61       	addc	r1,	r0	
    55c6:	3a 50 28 31 	add	#12584,	r10	;#0x3128
    55ca:	2c 31       	jn	$+602    	;abs 0x5824
    55cc:	29 3d       	jmp	$+596    	;abs 0x5820
    55ce:	2a 28       	jnc	$+86     	;abs 0x5624
    55d0:	38 2c       	jc	$+114    	;abs 0x5642
    55d2:	31 35       	jge	$+612    	;abs 0x5836
    55d4:	29 00 63 3a 	mova	&0x03a63,r9	
            }
            else{ // high to low
    55d8:	5c 77 6f 72 	subc.b	29295(r7),r12	;0x726f(r7)
                if(TimeUpEdge[channel_num] > PPM_aux){ // se deu overflow na contagem do timer
                    PPMValue[channel_num] = TACCR0 - TimeUpEdge[channel_num] + PPM_aux;
                }
    55dc:	6b 5c       	add.b	@r12,	r11	
    55de:	6d 73       	subc.b	#2,	r13	;r3 As==10
    55e0:	70 67       	addc.b	@r7+,	r0	
    55e2:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    55e4:	5c 73       	subc.b	#1,	r12	;r3 As==01
    55e6:	66 5c       	add.b	@r12,	r6	
    55e8:	70 61       	addc.b	@r1+,	r0	
    55ea:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr
    55ec:	61 67       	addc.b	@r7,	r1	
    55ee:	69 6e       	addc.b	@r14,	r9	
    55f0:	67 5c       	add.b	@r12,	r7	
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
        return;
    }

    int i = 0, k;    
    float PPMMin[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    55f2:	62 75       	subc.b	@r5,	r2	
    55f4:	69 6c       	addc.b	@r12,	r9	
    55f6:	64 5c       	add.b	@r12,	r4	
    55f8:	6d 73       	subc.b	#2,	r13	;r3 As==10
    55fa:	70 34       	jge	$+226    	;abs 0x56dc
    float PPMMax[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    fourbytes ValorAux;        
    55fc:	33 30       	jn	$+104    	;abs 0x5664
    55fe:	2d 6c       	addc	@r12,	r13	
    
    lcd_goto(2,5);
    5600:	69 62       	addc.b	#4,	r9	;r2 As==10
    5602:	63 5c       	.word	0x5c63;	????	Illegal as 2-op instr
    5604:	73 72       	.word	0x7273;	????	Illegal as 2-op instr
    5606:	63 2f       	jc	$-312    	;abs 0x54ce
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    lcd_clear(BLACK);

    5608:	00 73       	sbc	r0		
    560a:	74 64       	addc.b	@r4+,	r4	
    for(i = 0; i < 8; i++){ // zera offset e slope
        PPMOffset[i] = 0;
    560c:	6c 69       	addc.b	@r9,	r12	
    560e:	62 2f       	jc	$-314    	;abs 0x54d4
        PPMSlope[i] = 1;
    5610:	70 72       	subc.b	#8,	r0	;r2 As==11
    5612:	69 6e       	addc.b	@r14,	r9	
    5614:	74 66       	addc.b	@r6+,	r4	
    5616:	2e 63       	addc	#2,	r14	;r3 As==10
    5618:	00 2e       	jc	$-1022   	;abs 0x521a
    561a:	2e 2f       	jc	$-418    	;abs 0x5478
    }
    
    for(k = 120; k > 0; k--){
        draw_rc_inputs(1);
        lcd_goto(0, 14);
        printf("%d ", k);
    561c:	69 6e       	addc.b	@r14,	r9	
    561e:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    5620:	75 64       	addc.b	@r4+,	r5	
    5622:	65 2f       	jc	$-308    	;abs 0x54ee
    5624:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    5626:	64 69       	addc.b	@r9,	r4	
    5628:	6f 2e       	jc	$-800    	;abs 0x5308
    562a:	68 00 63 3a 	mova	r0,	&0x83a63
    562e:	2f 77       	subc	@r7,	r15	
    5630:	6f 72       	subc.b	#4,	r15	;r2 As==10
    5632:	6b 2f       	jc	$-296    	;abs 0x550a
        delayms(1);
        for(i = 0; i < 8; i++){ // pega max min
    5634:	6d 73       	subc.b	#2,	r13	;r3 As==10
    5636:	70 67       	addc.b	@r7+,	r0	
    5638:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    563a:	2f 73       	subc	#2,	r15	;r3 As==10
    563c:	66 2f       	jc	$-306    	;abs 0x550a
    563e:	70 61       	addc.b	@r1+,	r0	
    5640:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr
    5642:	61 67       	addc.b	@r7,	r1	
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
    5644:	69 6e       	addc.b	@r14,	r9	
    5646:	67 2f       	jc	$-304    	;abs 0x5516
    5648:	62 75       	subc.b	@r5,	r2	
    564a:	69 6c       	addc.b	@r12,	r9	
    564c:	64 2f       	jc	$-310    	;abs 0x5516
    564e:	69 6e       	addc.b	@r14,	r9	
    5650:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    5652:	61 6c       	addc.b	@r12,	r1	
    5654:	6c 65       	addc.b	@r5,	r12	
    5656:	64 2f       	jc	$-310    	;abs 0x5520
    5658:	6c 69       	addc.b	@r9,	r12	
    565a:	62 2f       	jc	$-314    	;abs 0x5520
    565c:	67 63       	addc.b	#2,	r7	;r3 As==10
    565e:	63 2d       	jc	$+712    	;abs 0x5926
    5660:	6c 69       	addc.b	@r9,	r12	
    5662:	62 2f       	jc	$-314    	;abs 0x5528
    5664:	6d 73       	subc.b	#2,	r13	;r3 As==10
                PPMMin[i] = PPMValue[i];
            }
        }
    }
    
    lcd_clear(BLACK);
    5666:	70 34       	jge	$+226    	;abs 0x5748
    5668:	33 30       	jn	$+104    	;abs 0x56d0
    566a:	2f 33       	jn	$-416    	;abs 0x54ca
    
    for(i = 0; i < 8; i++){ // calcula offset e slope pra deixar na faixa de 1000 a 2000
        PPMSlope[i] = 2000.0 / (PPMMax[i] - PPMMin[i]);
        PPMOffset[i] = 2000.0 - (PPMSlope[i] * PPMMin[i]);
    566c:	2e 32       	jn	$-930    	;abs 0x52ca
    566e:	2e 33       	jn	$-418    	;abs 0x54cc
    5670:	2f 69       	addc	@r9,	r15	
    }

    5672:	6e 63       	addc.b	#2,	r14	;r3 As==10
    5674:	6c 75       	subc.b	@r5,	r12	
    5676:	64 65       	addc.b	@r5,	r4	
    5678:	2f 73       	subc	#2,	r15	;r3 As==10
    567a:	74 64       	addc.b	@r4+,	r4	
    567c:	64 65       	addc.b	@r5,	r4	
    567e:	66 2e       	jc	$-818    	;abs 0x534c
    5680:	68 00 2e 2e 	mova	r0,	&0x82e2e
    5684:	2f 69       	addc	@r9,	r15	
    5686:	6e 63       	addc.b	#2,	r14	;r3 As==10
    5688:	6c 75       	subc.b	@r5,	r12	
    568a:	64 65       	addc.b	@r5,	r4	
    // grava dados na EEPROM
    568c:	2f 73       	subc	#2,	r15	;r3 As==10
    568e:	79 73       	subc.b	#-1,	r9	;r3 As==11
    5690:	2f 74       	subc	@r4,	r15	
        PPMSlope[i] = 1;
    }

    for(i = 0; i < 8; i++){ // coloca um valor inicial em max min
        PPMMin[i] = PPMValue[i];
        PPMMax[i] = PPMMin[i];
    5692:	79 70 65 73 	subc.b	#29541,	r9	;#0x7365
    }
    5696:	2e 68       	addc	@r8,	r14	
    5698:	00 2e       	jc	$-1022   	;abs 0x529a
    
    569a:	2e 2f       	jc	$-418    	;abs 0x54f8
    569c:	69 6e       	addc.b	@r14,	r9	
    569e:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    56a0:	75 64       	addc.b	@r4+,	r5	
    56a2:	65 2f       	jc	$-308    	;abs 0x556e
    
    lcd_goto(2,5);
    color_fore = RED;
    printf("MOVE STICKS\nALL DIRECTIONS");
    color_fore = LIME;
    delayms(3000);
    56a4:	73 79       	.word	0x7973;	????	Illegal as 2-op instr
    56a6:	73 2f       	jc	$-280    	;abs 0x558e
    56a8:	63 64       	.word	0x6463;	????	Illegal as 2-op instr
    56aa:	65 66       	addc.b	@r6,	r5	
    56ac:	73 2e       	jc	$-792    	;abs 0x5394
            if(PPMMax[i] < PPMValue[i]){ // nao ta pegando maximo
                PPMMax[i] = PPMValue[i];
            }
            if(PPMMin[i] > PPMValue[i]){
                PPMMin[i] = PPMValue[i];
            }
    56ae:	68 00 2e 2e 	mova	r0,	&0x82e2e
    56b2:	2f 69       	addc	@r9,	r15	
        }
    56b4:	6e 63       	addc.b	#2,	r14	;r3 As==10
    56b6:	6c 75       	subc.b	@r5,	r12	
    }
    56b8:	64 65       	addc.b	@r5,	r4	
    56ba:	2f 73       	subc	#2,	r15	;r3 As==10
    56bc:	79 73       	subc.b	#-1,	r9	;r3 As==11
    56be:	2f 69       	addc	@r9,	r15	
    56c0:	6e 74       	subc.b	@r4,	r14	
    56c2:	74 79       	subc.b	@r9+,	r4	
    56c4:	70 65       	addc.b	@r5+,	r0	
    56c6:	73 2e       	jc	$-792    	;abs 0x53ae
    56c8:	68 00 63 3a 	mova	r0,	&0x83a63
                else{ // se nao deu overflow na contagem do timer
                    PPMValue[channel_num] = PPM_aux - TimeUpEdge[channel_num];
                }
                P1IES &= ~(PPM_ch_counter & PPM_P1MASK); // configure low to high      
            }
            P1IFG &= ~(PPM_ch_counter & PPM_P1MASK); // apaga o interruption flag da P1.7
    56cc:	2f 77       	subc	@r7,	r15	
        }
        channel_num++;
    }
    56ce:	6f 72       	subc.b	#4,	r15	;r2 As==10
    56d0:	6b 2f       	jc	$-296    	;abs 0x55a8
    56d2:	6d 73       	subc.b	#2,	r13	;r3 As==10
}

void calibrate_radio(void){
    
    56d4:	70 67       	addc.b	@r7+,	r0	
    if(MotorArmed == 1 ){ // nao faz se os motores estiverem armados
    56d6:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
    56d8:	2f 73       	subc	#2,	r15	;r3 As==10
    56da:	66 2f       	jc	$-306    	;abs 0x55a8
     */
    TACTL = TASSEL_2 + ID_3 + MC_1;
}

interrupt (PORT1_VECTOR) PORT1_ISR_HOOK(void){
    unsigned int PPM_aux = TAR; // captura aqui pra ser mais exato
    56dc:	70 61       	addc.b	@r1+,	r0	
    56de:	63 6b       	.word	0x6b63;	????	Illegal as 2-op instr
    56e0:	61 67       	addc.b	@r7,	r1	
    56e2:	69 6e       	addc.b	@r14,	r9	
    56e4:	67 2f       	jc	$-304    	;abs 0x55b4
    56e6:	62 75       	subc.b	@r5,	r2	
    56e8:	69 6c       	addc.b	@r12,	r9	
    56ea:	64 2f       	jc	$-310    	;abs 0x55b4
    56ec:	69 6e       	addc.b	@r14,	r9	
    56ee:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    56f0:	61 6c       	addc.b	@r12,	r1	

    // grava dados na EEPROM
    if(EEPROMFound){
        i2c_change_address(EEPROM_I2C_ADDR);
        
        // grava yaw slope 
    56f2:	6c 65       	addc.b	@r5,	r12	
    56f4:	64 2f       	jc	$-310    	;abs 0x55be
    56f6:	6c 69       	addc.b	@r9,	r12	
    56f8:	62 2f       	jc	$-314    	;abs 0x55be
    56fa:	67 63       	addc.b	#2,	r7	;r3 As==10
    56fc:	63 2d       	jc	$+712    	;abs 0x59c4
    56fe:	6c 69       	addc.b	@r9,	r12	
    5700:	62 2f       	jc	$-314    	;abs 0x55c6
    5702:	6d 73       	subc.b	#2,	r13	;r3 As==10
        ValorAux.f = PPMSlope[YAW_CH];
        i2c_write16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        
        delayms(100);
    5704:	70 34       	jge	$+226    	;abs 0x57e6
    5706:	33 30       	jn	$+104    	;abs 0x576e
    5708:	2f 33       	jn	$-416    	;abs 0x5568
        // grava throttle slope 
        ValorAux.f = PPMSlope[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
    570a:	2e 32       	jn	$-930    	;abs 0x5368
    570c:	2e 33       	jn	$-418    	;abs 0x556a
    570e:	2f 69       	addc	@r9,	r15	
    5710:	6e 63       	addc.b	#2,	r14	;r3 As==10
        // grava pitch slope 
    5712:	6c 75       	subc.b	@r5,	r12	
    5714:	64 65       	addc.b	@r5,	r4	
    5716:	2f 73       	subc	#2,	r15	;r3 As==10
    5718:	74 64       	addc.b	@r4+,	r4	
        ValorAux.f = PPMSlope[PITCH_CH];
        i2c_write16_multiples(_RADIO_PITCH_SLOPE, ValorAux.c, 4);
    571a:	61 72       	subc.b	#4,	r1	;r2 As==10
    571c:	67 2e       	jc	$-816    	;abs 0x53ec
    571e:	68 00 70 72 	mova	r0,	&0x87270
    5722:	69 6e       	addc.b	@r14,	r9	
    5724:	74 66       	addc.b	@r6+,	r4	
        
    5726:	3a 46       	mov	@r6+,	r10	
    5728:	28 30       	jn	$+82     	;abs 0x577a
    572a:	2c 31       	jn	$+602    	;abs 0x5984
    572c:	29 00 73 74 	mova	&0x07473,r9	
    5730:	72 69       	addc.b	@r9+,	r2	
    5732:	6e 67       	addc.b	@r7,	r14	
    5734:	3a 70 28 34 	subc	#13352,	r10	;#0x3428
        delayms(100);
        
    5738:	2c 31       	jn	$+602    	;abs 0x5992
    573a:	38 29       	jnc	$+626    	;abs 0x59ac
    573c:	00 73       	sbc	r0		
    573e:	74 72       	subc.b	#8,	r4	;r2 As==11
    5740:	69 6e       	addc.b	@r14,	r9	
    5742:	67 3a       	jl	$-816    	;abs 0x5412
        // grava roll slope 
        ValorAux.f = PPMSlope[ROLL_CH];
    5744:	72 28       	jnc	$+230    	;abs 0x582a
    5746:	34 2c       	jc	$+106    	;abs 0x57b0
        i2c_write16_multiples(_RADIO_ROLL_SLOPE, ValorAux.c, 4);
    5748:	31 38       	jl	$+100    	;abs 0x57ac
    574a:	29 00 6c 65 	mova	&0x0656c,r9	
    574e:	6e 3a       	jl	$-802    	;abs 0x542c
        
        delayms(100);
        
        // grava ch5 slope 
    5750:	72 28       	jnc	$+230    	;abs 0x5836
    5752:	30 2c       	jc	$+98     	;abs 0x57b4
    5754:	31 29       	jnc	$+612    	;abs 0x59b8
        i2c_write16_multiples(_RADIO_CH5_SLOPE, ValorAux.c, 4);
        
        delayms(100);
        
        // grava ch6 slope 
        ValorAux.f = PPMSlope[CH6_CH];
    5756:	00 73       	sbc	r0		
    5758:	74 64       	addc.b	@r4+,	r4	
    575a:	6c 69       	addc.b	@r9,	r12	
    575c:	62 2f       	jc	$-314    	;abs 0x5622
        i2c_write16_multiples(_RADIO_CH6_SLOPE, ValorAux.c, 4);
    575e:	76 75       	subc.b	@r5+,	r6	
    5760:	70 72       	subc.b	#8,	r0	;r2 As==11
    5762:	69 6e       	addc.b	@r14,	r9	
    5764:	74 66       	addc.b	@r6+,	r4	
        
        delayms(100);
    5766:	2e 63       	addc	#2,	r14	;r3 As==10
    5768:	00 2e       	jc	$-1022   	;abs 0x536a
    576a:	2e 2f       	jc	$-418    	;abs 0x55c8
    576c:	69 6e       	addc.b	@r14,	r9	
    576e:	63 6c       	.word	0x6c63;	????	Illegal as 2-op instr
    5770:	75 64       	addc.b	@r4+,	r5	
        
    5772:	65 2f       	jc	$-308    	;abs 0x563e
    5774:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    5776:	72 69       	addc.b	@r9+,	r2	
    5778:	6e 67       	addc.b	@r7,	r14	
    577a:	2e 68       	addc	@r8,	r14	
    577c:	00 50       	rla	r0		
    577e:	52 49 4e 54 	mov.b	21582(r9),r2	;0x544e(r9)
        // grava ch7 slope 
        ValorAux.f = PPMSlope[CH7_CH];
    5782:	3a 66       	addc	@r6+,	r10	
    5784:	28 30       	jn	$+82     	;abs 0x57d6
        i2c_write16_multiples(_RADIO_CH7_SLOPE, ValorAux.c, 4);
        
    5786:	2c 31       	jn	$+602    	;abs 0x59e0
    5788:	29 00 70 74 	mova	&0x07470,r9	
    578c:	72 3a       	jl	$-794    	;abs 0x5472
    578e:	50 28       	jnc	$+162    	;abs 0x5830
    5790:	34 2c       	jc	$+106    	;abs 0x57fa
    5792:	31 38       	jl	$+100    	;abs 0x57f6
        delayms(100);
        
    5794:	29 00 6c 65 	mova	&0x0656c,r9	
        // grava yaw offset 
    5798:	6e 3a       	jl	$-802    	;abs 0x5476
    579a:	50 28       	jnc	$+162    	;abs 0x583c
    579c:	30 2c       	jc	$+98     	;abs 0x57fe
    579e:	34 29       	jnc	$+618    	;abs 0x5a08
    clock_init();
    
    timer_a3_init();
    
    p1_init();
    
    57a0:	00 5f       	add	r15,	r0	
    57a2:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
    
    i2c_init();
    
    eint();
    
    lcd_init(BLACK);
    57a6:	74 65       	addc.b	@r5+,	r4	
    57a8:	5f 70 61 64 	subc.b	0x6461,	r15	;PC rel. 0x0bc0d
    57ac:	3a 66       	addc	@r6+,	r10	
    
    57ae:	28 30       	jn	$+82     	;abs 0x5800
    57b0:	2c 31       	jn	$+602    	;abs 0x5a0a
    57b2:	29 00 63 3a 	mova	&0x03a63,r9	
    //printf("EEPROM ADDRESS: %dd\n", find_first(0));

    57b6:	50 28       	jnc	$+162    	;abs 0x5858
    57b8:	30 2c       	jc	$+98     	;abs 0x581a
    57ba:	32 29       	jnc	$+614    	;abs 0x5a20
    57bc:	00 68       	addc	r8,	r0	
    57be:	6f 77       	subc.b	@r7,	r15	
    57c0:	6d 61       	addc.b	@r1,	r13	
    i2c_config(EEPROM_I2C_ADDR);
    57c2:	6e 79       	subc.b	@r9,	r14	
    57c4:	3a 50 28 30 	add	#12328,	r10	;#0x3028
    57c8:	2c 31       	jn	$+602    	;abs 0x5a22
    57ca:	30 29       	jnc	$+610    	;abs 0x5a2c
    57cc:	00 76       	subc	r6,	r0	
    57ce:	75 70 72 69 	subc.b	#26994,	r5	;#0x6972
    EEPROMFound = !(i2c_find_device());
    
    57d2:	6e 74       	subc.b	@r4,	r14	
    57d4:	66 3a       	jl	$-818    	;abs 0x54a2
    57d6:	46 28       	jnc	$+142    	;abs 0x5864
    57d8:	30 2c       	jc	$+98     	;abs 0x583a
    57da:	31 29       	jnc	$+612    	;abs 0x5a3e
    57dc:	00 66       	addc	r6,	r0	
    57de:	75 6e       	addc.b	@r14+,	r5	
    if(EEPROMFound){
        printf("EEPROM found\n");
    57e0:	63 3a       	jl	$-824    	;abs 0x54a8
    57e2:	50 28       	jnc	$+162    	;abs 0x5884
        i2c_read16_multiples(_STATUS_FLAGS, StatusFlags, 3);
    57e4:	31 2c       	jc	$+100    	;abs 0x5848
    57e6:	31 29       	jnc	$+612    	;abs 0x5a4a
    57e8:	3d 2a       	jnc	$-900    	;abs 0x5464
    57ea:	28 31       	jn	$+594    	;abs 0x5a3c
        
        delayms(100);
        
        // grava throttle offset 
        ValorAux.f = PPMOffset[THROTTLE_CH];
        i2c_write16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
    57ec:	2c 32       	jn	$-934    	;abs 0x5446
    57ee:	29 3d       	jmp	$+596    	;abs 0x5a42
    57f0:	66 28       	jnc	$+206    	;abs 0x58be
    57f2:	30 2c       	jc	$+98     	;abs 0x5854
    57f4:	31 29       	jnc	$+612    	;abs 0x5a58
    57f6:	00 66       	addc	r6,	r0	
    57f8:	6d 74       	subc.b	@r4,	r13	
    57fa:	30 3a       	jl	$-926    	;abs 0x545c
    57fc:	50 28       	jnc	$+162    	;abs 0x589e
    57fe:	34 2c       	jc	$+106    	;abs 0x5868
    5800:	31 38       	jl	$+100    	;abs 0x5864
    5802:	29 00 61 70 	mova	&0x07061,r9	
    5806:	3a 50 28 37 	add	#14120,	r10	;#0x3728
        
    580a:	2c 32       	jn	$-934    	;abs 0x5464
    580c:	29 00 66 6d 	mova	&0x06d66,r9	
        delayms(100);
    5810:	74 3a       	jl	$-790    	;abs 0x54fa
    5812:	72 28       	jnc	$+230    	;abs 0x58f8

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5814:	34 2c       	jc	$+106    	;abs 0x587e
    5816:	31 38       	jl	$+100    	;abs 0x587a
    5818:	29 00 63 68 	mova	&0x06863,r9	
    581c:	3a 72       	subc	#8,	r10	;r2 As==11
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    581e:	28 30       	jn	$+82     	;abs 0x5870
    5820:	2c 32       	jn	$-934    	;abs 0x547a
                    MenuOption = (MENU_OPTION)(MenuOption + 1);
    5822:	29 00 6e 3a 	mova	&0x03a6e,r9	
    5826:	72 28       	jnc	$+230    	;abs 0x590c
    5828:	30 2c       	jc	$+98     	;abs 0x588a
    582a:	31 29       	jnc	$+612    	;abs 0x5a8e
            printf("WAIT PITCH UP    ");

            if(ChannelInput[PITCH_CH] < 3500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption < MENU_LENGHT){
    582c:	00 63       	adc	r0		
    582e:	70 3a       	jl	$-798    	;abs 0x5510
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5830:	28 34       	jge	$+82     	;abs 0x5882
    5832:	2c 31       	jn	$+602    	;abs 0x5a8c
    5834:	36 29       	jnc	$+622    	;abs 0x5aa2
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5836:	00 66       	addc	r6,	r0	
    5838:	6d 61       	addc.b	@r1,	r13	
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    583a:	72 6b       	addc.b	@r11+,	r2	
    583c:	3a 72       	subc	#8,	r10	;r2 As==11
    583e:	28 34       	jge	$+82     	;abs 0x5890
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5840:	2c 31       	jn	$+602    	;abs 0x5a9a
    5842:	38 29       	jnc	$+626    	;abs 0x5ab4
        
        // grava ch7 offset 
        ValorAux.f = PPMOffset[CH7_CH];
        i2c_write16_multiples(_RADIO_CH7_OFFSET, ValorAux.c, 4);
        
        delayms(100);
    5844:	00 66       	addc	r6,	r0	
    5846:	6c 61       	addc.b	@r1,	r12	
    5848:	67 73       	subc.b	#2,	r7	;r3 As==10
    584a:	3a 28       	jnc	$+118    	;abs 0x58c0
    584c:	30 2c       	jc	$+98     	;abs 0x58ae
    584e:	31 31       	jn	$+612    	;abs 0x5ab2
    5850:	29 00 77 69 	mova	&0x06977,r9	
        
    5854:	64 74       	subc.b	@r4,	r4	
    5856:	68 3a       	jl	$-814    	;abs 0x5528
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
                MenuStep = SELECT;
            }
            break;
    5858:	28 30       	jn	$+82     	;abs 0x58aa
    585a:	2c 31       	jn	$+602    	;abs 0x5ab4
            if(ChannelInput[PITCH_CH] > 2500){
                lcd_goto(0,(int)MenuOption + 2);
                printf(" ");
                if((int)MenuOption > 0){
                    MenuOption = (MENU_OPTION)(MenuOption - 1);
                }
    585c:	30 29       	jnc	$+610    	;abs 0x5abe
    585e:	00 70       	subc	r0,	r0	
    5860:	72 65       	addc.b	@r5+,	r2	
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
            lcd_goto(0,14);
    5862:	63 3a       	jl	$-824    	;abs 0x552a
    5864:	72 28       	jnc	$+230    	;abs 0x594a
    5866:	30 2c       	jc	$+98     	;abs 0x58c8
                }
                MenuStep = SELECT;
            }
            break;
        
        case WAIT_ROLL_LEFT:
    5868:	31 30       	jn	$+100    	;abs 0x58cc
    586a:	29 00 73 69 	mova	&0x06973,r9	
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    586e:	67 6e       	addc.b	@r14,	r7	
    5870:	3a 28       	jnc	$+118    	;abs 0x58e6
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5872:	30 2c       	jc	$+98     	;abs 0x58d4
    5874:	32 29       	jnc	$+614    	;abs 0x5ada
        delayms(100);
        
        lcd_goto(2,2);
        printf("Params saved.");
        delayms(2000);
    }
    5876:	00 5f       	add	r15,	r0	
    5878:	75 6c       	addc.b	@r12+,	r5	
    587a:	6f 6e       	addc.b	@r14,	r15	
    587c:	67 3a       	jl	$-816    	;abs 0x554c
    587e:	28 30       	jn	$+82     	;abs 0x58d0
    5880:	2c 35       	jge	$+602    	;abs 0x5ada
    5882:	29 00 62 61 	mova	&0x06162,r9	
}
    5886:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
    5888:	3a 28       	jnc	$+118    	;abs 0x58fe
    588a:	30 2c       	jc	$+98     	;abs 0x58ec
    588c:	31 31       	jn	$+612    	;abs 0x5af0
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
            
    588e:	29 00 64 70 	mova	&0x07064,r9	
    5892:	72 65       	addc.b	@r5+,	r2	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    5894:	63 3a       	jl	$-824    	;abs 0x555c
    5896:	28 30       	jn	$+82     	;abs 0x58e8
            
    5898:	2c 31       	jn	$+602    	;abs 0x5af2
    589a:	30 29       	jnc	$+610    	;abs 0x5afc
    589c:	00 64       	addc	r4,	r0	
            if(ChannelInput[ROLL_CH] < 3500){
                lcd_clear(BLACK);
                lcd_goto(0,0);  
                MenuStep = PROCESS_OPTION;
            }
            break;
    589e:	70 61       	addc.b	@r1+,	r0	
    58a0:	64 3a       	jl	$-822    	;abs 0x556a
    ChannelInput[THROTTLE_CH] = PPMValue[THROTTLE_CH] * PPMSlope[THROTTLE_CH] + PPMOffset[THROTTLE_CH];
    ChannelInput[YAW_CH] = PPMValue[YAW_CH] * PPMSlope[YAW_CH] + PPMOffset[YAW_CH];
    ChannelInput[PITCH_CH] = PPMValue[PITCH_CH] * PPMSlope[PITCH_CH] + PPMOffset[PITCH_CH]; // pitch invertido
    ChannelInput[ROLL_CH] = PPMValue[ROLL_CH] * PPMSlope[ROLL_CH] + PPMOffset[ROLL_CH];
    ChannelInput[CH5_CH] = PPMValue[CH5_CH] * PPMSlope[CH5_CH] + PPMOffset[CH5_CH];
    ChannelInput[CH6_CH] = PPMValue[CH6_CH] * PPMSlope[CH6_CH] + PPMOffset[CH6_CH];
    58a2:	72 28       	jnc	$+230    	;abs 0x5988
    58a4:	30 2c       	jc	$+98     	;abs 0x5906
    58a6:	31 30       	jn	$+100    	;abs 0x590a
    58a8:	29 00 66 69 	mova	&0x06966,r9	
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
    58ac:	65 6c       	addc.b	@r12,	r5	
    58ae:	64 73       	subc.b	#2,	r4	;r3 As==10
    58b0:	7a 3a       	jl	$-778    	;abs 0x55a6
}
    58b2:	72 28       	jnc	$+230    	;abs 0x5998
    58b4:	30 2c       	jc	$+98     	;abs 0x5916

void load_transmitter_values(void){
    fourbytes ValorAux;

    58b6:	31 30       	jn	$+100    	;abs 0x591a
    58b8:	29 00 73 69 	mova	&0x06973,r9	
    if(EEPROMFound == 1){
        i2c_change_address(EEPROM_I2C_ADDR);    

        // load yaw slope e offset
    58bc:	7a 65       	addc.b	@r5+,	r10	
    58be:	3a 72       	subc	#8,	r10	;r2 As==11
    58c0:	28 30       	jn	$+82     	;abs 0x5912
    58c2:	2c 31       	jn	$+602    	;abs 0x5b1c
    58c4:	30 29       	jnc	$+610    	;abs 0x5b26
    58c6:	00 62       	addc	r2,	r0	
        i2c_read16_multiples(_RADIO_YAW_SLOPE, ValorAux.c, 4);
        PPMSlope[YAW_CH] = ValorAux.f;
    58c8:	75 66       	addc.b	@r6+,	r5	
    58ca:	3a 28       	jnc	$+118    	;abs 0x5940
    58cc:	31 2c       	jc	$+100    	;abs 0x5930
    58ce:	33 29       	jnc	$+616    	;abs 0x5b36
    58d0:	3d 61       	addc	@r1+,	r13	
    58d2:	72 28       	jnc	$+230    	;abs 0x59b8
    58d4:	31 2c       	jc	$+100    	;abs 0x5938
    58d6:	34 29       	jnc	$+618    	;abs 0x5b40
    58d8:	3d 72       	subc	#8,	r13	;r2 As==11
    58da:	28 31       	jn	$+594    	;abs 0x5b2c
    58dc:	2c 34       	jge	$+90     	;abs 0x5936
    58de:	29 3b       	jl	$-428    	;abs 0x5732
    58e0:	30 30       	jn	$+98     	;abs 0x5942
    58e2:	30 30       	jn	$+98     	;abs 0x5944
    58e4:	30 30       	jn	$+98     	;abs 0x5946
        i2c_read16_multiples(_RADIO_YAW_OFFSET, ValorAux.c, 4);
    58e6:	30 30       	jn	$+98     	;abs 0x5948
    58e8:	30 30       	jn	$+98     	;abs 0x594a
    58ea:	30 30       	jn	$+98     	;abs 0x594c
    58ec:	30 3b       	jl	$-414    	;abs 0x574e
    58ee:	30 30       	jn	$+98     	;abs 0x5950
    58f0:	30 30       	jn	$+98     	;abs 0x5952
    58f2:	30 30       	jn	$+98     	;abs 0x5954
    58f4:	30 31       	jn	$+610    	;abs 0x5b56
    58f6:	37 37       	jge	$-400    	;abs 0x5766
    58f8:	37 37       	jge	$-400    	;abs 0x5768
        PPMOffset[YAW_CH] = ValorAux.f;
        
    58fa:	37 3b       	jl	$-400    	;abs 0x576a
    58fc:	3b 30       	jn	$+120    	;abs 0x5974
        // load throttle slope  e offset
    58fe:	3b 33       	jn	$-392    	;abs 0x5776
    5900:	39 3b       	jl	$-396    	;abs 0x5774
    5902:	28 30       	jn	$+82     	;abs 0x5954
        i2c_read16_multiples(_RADIO_THROTTLE_SLOPE, ValorAux.c, 4);
        PPMSlope[THROTTLE_CH] = ValorAux.f;
    5904:	2c 32       	jn	$-934    	;abs 0x555e
        i2c_read16_multiples(_RADIO_THROTTLE_OFFSET, ValorAux.c, 4);
        PPMOffset[THROTTLE_CH] = ValorAux.f;
    5906:	29 00 6f 78 	mova	&0x0786f,r9	
        
    590a:	3a 28       	jnc	$+118    	;abs 0x5980
    590c:	31 2c       	jc	$+100    	;abs 0x5970
    590e:	35 29       	jnc	$+620    	;abs 0x5b7a
    ChannelInput[CH7_CH] = PPMValue[CH7_CH] * PPMSlope[CH7_CH] + PPMOffset[CH7_CH];
}

void load_transmitter_values(void){
    fourbytes ValorAux;

    5910:	3d 61       	addc	@r1+,	r13	
    5912:	72 28       	jnc	$+230    	;abs 0x59f8
    5914:	31 2c       	jc	$+100    	;abs 0x5978
    5916:	34 29       	jnc	$+618    	;abs 0x5b80
    5918:	3b 30       	jn	$+120    	;abs 0x5990
    591a:	3b 31       	jn	$+632    	;abs 0x5b92
    lcd_goto(0,0);
    printf("     RC inputs");
    lcd_goto(0,2);
    
    for(i = 0; i < 8; i++){
        if(!raw){
    591c:	3b 28       	jnc	$+120    	;abs 0x5994
    591e:	30 2c       	jc	$+98     	;abs 0x5980
    5920:	32 29       	jnc	$+614    	;abs 0x5b86
    5922:	00 5f       	add	r15,	r0	
    5924:	64 3a       	jl	$-822    	;abs 0x55ee
    5926:	72 28       	jnc	$+230    	;abs 0x5a0c
    5928:	30 2c       	jc	$+98     	;abs 0x598a
            printf("ch[%d]: %d   \n", i, ChannelInput[i]);
    592a:	31 31       	jn	$+612    	;abs 0x5b8e
    592c:	29 00 6e 6f 	mova	&0x06f6e,r9	
    5930:	74 6c       	addc.b	@r12+,	r4	
    5932:	61 73       	subc.b	#2,	r1	;r3 As==10
    5934:	74 64       	addc.b	@r4+,	r4	
    5936:	69 67       	addc.b	@r7,	r9	
    5938:	69 74       	subc.b	@r4,	r9	
    593a:	3a 28       	jnc	$+118    	;abs 0x59b0
        }
        else{
    593c:	30 2c       	jc	$+98     	;abs 0x599e
    593e:	31 31       	jn	$+612    	;abs 0x5ba2
    5940:	29 00 70 3a 	mova	&0x03a70,r9	
            printf("ch[%d]: %d   \n", i, PPMValue[i]);
        }
        k = 21 + (8 * i); //posicao inicial em y
        if(!raw){
    5944:	72 28       	jnc	$+230    	;abs 0x5a2a
    5946:	34 2c       	jc	$+106    	;abs 0x59b0
            if(ChannelInput[i] > 4000){
                h=100;
    5948:	31 36       	jge	$-924    	;abs 0x55ac
    594a:	29 00 5f 5f 	mova	&0x05f5f,r9	
            }
    594e:	77 72       	subc.b	#8,	r7	;r2 As==11
    5950:	69 74       	subc.b	@r4,	r9	
    5952:	65 5f       	add.b	@r15,	r5	
    5954:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
    5956:	61 72       	subc.b	#4,	r1	;r2 As==10
    5958:	3a 53       	add	#-1,	r10	;r3 As==11
            else{
                if(ChannelInput[i] < 2001){
    595a:	28 31       	jn	$+594    	;abs 0x5bac
    595c:	2c 31       	jn	$+602    	;abs 0x5bb6
    595e:	29 00 74 6f 	mova	&0x06f74,r9	
    5962:	74 61       	addc.b	@r1+,	r4	
                    h = 0;
    5964:	6c 5f       	add.b	@r15,	r12	
    5966:	6c 65       	addc.b	@r5,	r12	
    5968:	6e 3a       	jl	$-802    	;abs 0x5646
                }
                else{
    596a:	53 28       	jnc	$+168    	;abs 0x5a12
    596c:	30 2c       	jc	$+98     	;abs 0x59ce
    596e:	31 29       	jnc	$+612    	;abs 0x5bd2
    5970:	00 73       	sbc	r0		
    5972:	74 64       	addc.b	@r4+,	r4	
    5974:	6c 69       	addc.b	@r9,	r12	
                    h = ((ChannelInput[i] - 2000) * 10) / 200;
                }
    5976:	62 2f       	jc	$-314    	;abs 0x583c
    5978:	70 75       	subc.b	@r5+,	r0	
    597a:	74 73       	subc.b	#-1,	r4	;r3 As==11
            }
        }
    597c:	2e 63       	addc	#2,	r14	;r3 As==10
    597e:	00 70       	subc	r0,	r0	
    5980:	75 74       	subc.b	@r4+,	r5	
        else{
            if(PPMValue[i] > 4000){
    5982:	73 3a       	jl	$-792    	;abs 0x566a
    5984:	46 28       	jnc	$+142    	;abs 0x5a12
                h=100;
    5986:	30 2c       	jc	$+98     	;abs 0x59e8
    5988:	31 29       	jnc	$+612    	;abs 0x5bec
    598a:	00 73       	sbc	r0		
    598c:	3a 50 28 34 	add	#13352,	r10	;#0x3428
            }
            else{
    5990:	2c 31       	jn	$+602    	;abs 0x5bea
    5992:	38 29       	jnc	$+626    	;abs 0x5c04
    5994:	00 6f       	addc	r15,	r0	
    5996:	6b 3a       	jl	$-808    	;abs 0x566e
    5998:	72 28       	jnc	$+230    	;abs 0x5a7e
    599a:	30 2c       	jc	$+98     	;abs 0x59fc
    599c:	31 29       	jnc	$+612    	;abs 0x5c00
    599e:	00 73       	sbc	r0		
    59a0:	74 72       	subc.b	#8,	r4	;r2 As==11

int find_first(int startaddress){
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
    59a2:	69 6e       	addc.b	@r14,	r9	
    59a4:	67 2f       	jc	$-304    	;abs 0x5874
    59a6:	6d 65       	addc.b	@r5,	r13	
    59a8:	6d 63       	addc.b	#2,	r13	;r3 As==10
    59aa:	68 72       	subc.b	#4,	r8	;r2 As==10
    59ac:	2e 63       	addc	#2,	r14	;r3 As==10
    59ae:	00 6d       	addc	r13,	r0	
    59b0:	65 6d       	addc.b	@r13,	r5	
    59b2:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
    59b4:	72 3a       	jl	$-794    	;abs 0x569a
void main_loop(){
    
    
}

void setup(){
    59b6:	46 28       	jnc	$+142    	;abs 0x5a44
    59b8:	31 2c       	jc	$+100    	;abs 0x5a1c
    59ba:	31 29       	jnc	$+612    	;abs 0x5c1e
    59bc:	3d 2a       	jnc	$-900    	;abs 0x5638
    59be:	28 30       	jn	$+82     	;abs 0x5a10
    
    59c0:	2c 32       	jn	$-934    	;abs 0x561a
    59c2:	30 29       	jnc	$+610    	;abs 0x5c24
    59c4:	00 73       	sbc	r0		
    clock_init();
    59c6:	3a 50 28 31 	add	#12584,	r10	;#0x3128
    for(; startaddress < 255; startaddress++){
        i2c_config(startaddress);
        if(!i2c_find_device()){
            return startaddress;
        }
    }   
    59ca:	2c 32       	jn	$-934    	;abs 0x5624
    59cc:	29 3d       	jmp	$+596    	;abs 0x5c20
    return 0;
}


// loop de controle
    59ce:	2a 28       	jnc	$+86     	;abs 0x5a24
    59d0:	31 2c       	jc	$+100    	;abs 0x5a34
    59d2:	33 29       	jnc	$+616    	;abs 0x5c3a
    59d4:	3d 6b       	addc	@r11+,	r13	
    59d6:	28 30       	jn	$+82     	;abs 0x5a28
    59d8:	2c 32       	jn	$-934    	;abs 0x5632
void main_loop(){
    
    
    59da:	30 29       	jnc	$+610    	;abs 0x5c3c
    59dc:	00 6e       	addc	r14,	r0	
    59de:	3a 50 28 34 	add	#13352,	r10	;#0x3428
    59e2:	2c 32       	jn	$-934    	;abs 0x563c
    59e4:	29 00 70 3a 	mova	&0x03a70,r9	
    59e8:	72 28       	jnc	$+230    	;abs 0x5ace
    59ea:	31 2c       	jc	$+100    	;abs 0x5a4e
    59ec:	34 29       	jnc	$+618    	;abs 0x5c56
    59ee:	3d 2a       	jnc	$-900    	;abs 0x566a
    59f0:	28 31       	jn	$+594    	;abs 0x5c42
}

void setup(){
    
    clock_init();
    
    59f2:	2c 35       	jge	$+602    	;abs 0x5c4c
    59f4:	29 3d       	jmp	$+596    	;abs 0x5c48
    59f6:	6b 28       	jnc	$+216    	;abs 0x5ace
    59f8:	30 2c       	jc	$+98     	;abs 0x5a5a
    59fa:	31 31       	jn	$+612    	;abs 0x5c5e
    59fc:	29 00 70 3a 	mova	&0x03a70,r9	
    5a00:	72 28       	jnc	$+230    	;abs 0x5ae6
    5a02:	31 2c       	jc	$+100    	;abs 0x5a66
    5a04:	34 29       	jnc	$+618    	;abs 0x5c6e
	...
