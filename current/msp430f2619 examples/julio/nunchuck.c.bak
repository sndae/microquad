#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <msp430x2619.h>
#include "lcd2112.h"
#include "uart0.h"

// Declaração de pinos...
//
#define led         port3.out.pin0

#define sw1         port1.in.pin0
#define sw2         port1.in.pin1
#define sw3         port1.in.pin2
#define sw4         port1.in.pin3

#define sda_in      port2.in.pin6 
#define sda_out     port2.out.pin6 
#define scl         port2.in.pin7

#define SDA_OUT()   P2DIR = 0xc0
#define SDA_IN()    P2DIR = 0x80


// Definições...
//
#define no_lcd      0
#define na_serial   1
#define NACK        1
#define ACK         0

// Constantes e Variáveis...
//
const unsigned char hexadecimal[16] = {"0123456789ABCDEF"};
unsigned char aonde = no_lcd;


// Protótipos...
//
int putchar(int c);

void configura_cpu(void);
void delayus(unsigned int tempo);
void delayms(unsigned int tempo);

unsigned char readkeyboard(void);
unsigned char waitpress(void);
void waitrelease(void);
void waitkey(unsigned char key);
unsigned char waitanykey(void);

void init_i2c(void);
void start_i2c(void);
void stop_i2c(void);
void send_0(void);
void send_1(void);
unsigned char lebit(void);
unsigned char le_i2c(unsigned char acknowledge);
unsigned char escreve_i2c(unsigned char dado);

unsigned char nunchuck_find(void);


// M A I N
//
int main (void)
{
  WDTCTL = WDTPW + WDTHOLD; 
  configura_cpu();
  lcd_initmodule(nao_virado);
  config_serial(baud_115200, mod_115200);
  init_i2c();

  aonde = na_serial;
  printf("Procurando Nunchuck...\n\r");
  if(nunchuck_find() == ACK) printf("Achei um Nunchuck...\n\r"); else printf("Nao achei um Nunchuck...\n\r");

  while(1)
  {
  }    

  return 0;
}   

// Implementação do Printf...
//
int putchar(int c)
{
  if(aonde == no_lcd) lcd_putchar(c); else send_serial(c);
  return 0;
}

// Configuração da CPU...
//
void configura_cpu(void)
{
  // configura o clock para 16MHz...
  DCOCTL = 0x77;
  BCSCTL1 = 0x0f;
  BCSCTL2 = 0x08;
  BCSCTL3 = 0x8c;

  // Configura as portas...
  P1DIR = 0xf0;
  P3DIR = 0xd7;
  P3SEL = 0x30;
  P4DIR = 0xff;
  P5DIR = 0x70;
  P5SEL = 0x70;

  SDA_OUT();
  led = 1;
}

// T = 0.2923us * tempo (aproximadamente...)
//
void delayus(unsigned int tempo)
{
    int i;
    
    for(i = 0; i < tempo; i++) nop();
}

// Aproximadamente 1ms...
//
void delayms(unsigned int tempo)
{
    int i;
    
    for(i = 0; i < tempo; i++) delayus(3420);
}

// Primitivas de Teclado...
//
unsigned char readkeyboard(void)
{
  unsigned char tecla = 0;
  if(sw1 == 0) tecla = '1';
  if(sw2 == 0) tecla = '2';
  if(sw3 == 0) tecla = '3';
  if(sw4 == 0) tecla = '4';

  return tecla;
}

unsigned char waitpress(void)
{
  unsigned char v = 0;
  while(v == 0) 
  {
    v = readkeyboard();
    delayms(1);
  }

  return v;
}

void waitrelease(void)
{
  while(readkeyboard() != 0) delayms(1);
}

void waitkey(unsigned char key)
{
  while(readkeyboard() != key) delayms(1);
  waitrelease();
}

unsigned char waitanykey(void)
{
  unsigned char v;

  v = waitpress();
  waitrelease();

  return v;
}

// Primitivas de I2C...
//
void init_i2c(void)
{
  dataout();
  sda_out = 1;
  scl = 1;
}

void start_i2c(void)
{   
  sda_out = 1;
  delayus(7);
  scl = 1;
  delayus(17);
  sda_out = 0;
  delayus(17);
  scl = 0;
  delayus(7);
}

void stop_i2c(void)
{
  sda_out = 0;
  delayus(7);
  scl = 1;
  delayus(17);
  sda_out = 1;
  delayus(17);
}

void send_0(void)
{
  sda_out = 0;
  delayus(7);
  scl = 1;
  delayus(17);
  scl = 0;
  delayus(7);
}

void send_1(void)
{
  sda_out = 1;
  delayus(7);
  scl = 1;
  delayus(17);
  scl = 0;
  delayus(7);
  sda_out = 0;
  delayus(7);
}

unsigned char lebit(void)
{
  unsigned char v;

  scl = 1;
  delayus(7);
  if(sda_in == 1) v = 1; else v = 0;  
  delayus(7);
  scl = 0;
  delayus(7);

  return v;
}

unsigned char le_i2c(unsigned char acknowledge)
{
  unsigned char i, x = 0;

  datain();
  for(i=0; i<8; i++)
    if(lebit()) x += mask[i];

  dataout();
  if(acknowledge == ACK) send_0(); else send_1();

  return x;
}

unsigned char escreve_i2c(unsigned char dado)
{
  unsigned char i;
    
  for(i=0; i<8; i++)
    if ((dado & mask[i]) > 0) send_1(); else send_0();

  datain();
  i = lebit();
  dataout();

  return i;
}


// Primitivas nunchuck
//
unsigned char nunchuck_find(void)
{
  unsigned char v;

  start_i2c();
  v = escreve_i2c(0xa4);  
  stop_i2c();

  return v;
}


