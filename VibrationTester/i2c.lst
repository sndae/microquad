
i2c.o:     file format elf32-msp430


Disassembly of section .text:

00000000 <i2c_change_address>:
  i2c_init();
  i2c_slave_address = slave_addr;
}

void i2c_change_address( char slave_addr)
{
   0:	c2 4f 00 00 	mov.b	r15,	&0x0000	
  i2c_slave_address = slave_addr;
   4:	30 41       	ret			

00000006 <i2c_init>:
}

void i2c_init(void)
{
   6:	f2 d0 06 00 	bis.b	#6,	&0x0000	;#0x0006
   a:	00 00 
  SDA_OUT();
   c:	e2 d3 00 00 	bis.b	#2,	&0x0000	;r3 As==10
  sda_on;
  10:	e2 d2 00 00 	bis.b	#4,	&0x0000	;r2 As==10
  scl_on;
  14:	b0 12 00 00 	call	#0x0000	
  delay5us();
  18:	30 41       	ret			

0000001a <i2c_config>:
//
// ****************************************************************
// ** P R I M I T I V A S                                        **
// ****************************************************************
//
void i2c_config( char slave_addr)
  1a:	0b 12       	push	r11		
  1c:	4b 4f       	mov.b	r15,	r11	
{
  1e:	b0 12 00 00 	call	#0x0000	
  i2c_init();
  22:	c2 4b 00 00 	mov.b	r11,	&0x0000	
  i2c_slave_address = slave_addr;
  26:	3b 41       	pop	r11		
  28:	30 41       	ret			

0000002a <i2c_start>:
  scl_on;
  delay5us();
}

void i2c_start(void)
{
  2a:	e2 d3 00 00 	bis.b	#2,	&0x0000	;r3 As==10
  sda_on;
  2e:	b0 12 00 00 	call	#0x0000	
  delay5us();
  32:	e2 d2 00 00 	bis.b	#4,	&0x0000	;r2 As==10
  scl_on;
  36:	b0 12 00 00 	call	#0x0000	
  delay5us();

  3a:	f2 f0 fd ff 	and.b	#-3,	&0x0000	;#0xfffd
  3e:	00 00 
  sda_off;
  40:	b0 12 00 00 	call	#0x0000	
  delay5us();
  44:	f2 f0 fb ff 	and.b	#-5,	&0x0000	;#0xfffb
  48:	00 00 
  scl_off;
  4a:	b0 12 00 00 	call	#0x0000	
  delay5us();
  4e:	30 41       	ret			

00000050 <i2c_stop>:
}

void i2c_stop(void)
{
  50:	f2 f0 fd ff 	and.b	#-3,	&0x0000	;#0xfffd
  54:	00 00 
  sda_off;
  56:	b0 12 00 00 	call	#0x0000	
  delay5us();
  5a:	e2 d2 00 00 	bis.b	#4,	&0x0000	;r2 As==10
  scl_on;
  5e:	b0 12 00 00 	call	#0x0000	
  delay5us();
  62:	e2 d3 00 00 	bis.b	#2,	&0x0000	;r3 As==10
  sda_on;
  66:	b0 12 00 00 	call	#0x0000	
  delay5us();
  6a:	30 41       	ret			

0000006c <i2c_recv_ack>:
}

 char i2c_recv_ack(void)
  6c:	0b 12       	push	r11		
{
   char i;

  6e:	f2 f0 fd ff 	and.b	#-3,	&0x0000	;#0xfffd
  72:	00 00 
  SDA_IN();
  74:	b0 12 00 00 	call	#0x0000	
  delay5us();
  78:	e2 d2 00 00 	bis.b	#4,	&0x0000	;r2 As==10
  scl_on;
  7c:	b0 12 00 00 	call	#0x0000	
  delay5us();
  80:	5b 42 00 00 	mov.b	&0x0000,r11	
  if(sda_test) i=1; else i=0;
  84:	b0 12 00 00 	call	#0x0000	
  delay5us();
  88:	f2 f0 fb ff 	and.b	#-5,	&0x0000	;#0xfffb
  8c:	00 00 
  scl_off;
  8e:	b0 12 00 00 	call	#0x0000	
  delay5us();
  92:	f2 d0 06 00 	bis.b	#6,	&0x0000	;#0x0006
  96:	00 00 
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  98:	0e 4b       	mov	r11,	r14	
  9a:	2e f3       	and	#2,	r14	;r3 As==10
  9c:	5f 43       	mov.b	#1,	r15	;r3 As==01
  9e:	0e 93       	tst	r14		
  a0:	02 24       	jz	$+6      	;abs 0xa6
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a2:	3b 41       	pop	r11		
  a4:	30 41       	ret			
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  a6:	4f 4e       	mov.b	r14,	r15	
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a8:	3b 41       	pop	r11		
  aa:	30 41       	ret			

000000ac <i2c_send_ack>:
}

void i2c_send_ack( char confirmation)
{
  ac:	f2 d0 06 00 	bis.b	#6,	&0x0000	;#0x0006
  b0:	00 00 
  SDA_OUT();
  b2:	4f 93       	tst.b	r15		
  b4:	10 20       	jnz	$+34     	;abs 0xd6
  b6:	f2 f0 fd ff 	and.b	#-3,	&0x0000	;#0xfffd
  ba:	00 00 
  if(confirmation) sda_on; else sda_off;
  bc:	e2 d2 00 00 	bis.b	#4,	&0x0000	;r2 As==10
  scl_on;
  c0:	b0 12 00 00 	call	#0x0000	
  delay5us();
  c4:	f2 f0 fb ff 	and.b	#-5,	&0x0000	;#0xfffb
  c8:	00 00 
  scl_off;
  ca:	b0 12 00 00 	call	#0x0000	
  delay5us();
  ce:	f2 f0 fd ff 	and.b	#-3,	&0x0000	;#0xfffd
  d2:	00 00 
  sda_off;
  d4:	30 41       	ret			
  return i;
}

void i2c_send_ack( char confirmation)
{
  SDA_OUT();
  d6:	e2 d3 00 00 	bis.b	#2,	&0x0000	;r3 As==10
  da:	f0 3f       	jmp	$-30     	;abs 0xbc

000000dc <i2c_bwrite>:
  scl_off;
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
  dc:	0b 12       	push	r11		
  de:	0a 12       	push	r10		
  e0:	09 12       	push	r9		
  e2:	49 4f       	mov.b	r15,	r9	
{
   char mask = 0x80;
   char i;

  e4:	f2 d0 06 00 	bis.b	#6,	&0x0000	;#0x0006
  e8:	00 00 
  ea:	7b 42       	mov.b	#8,	r11	;r2 As==11
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
{
  ec:	7a 40 80 ff 	mov.b	#-128,	r10	;#0xff80
  f0:	10 3c       	jmp	$+34     	;abs 0x112
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
  f2:	e2 d3 00 00 	bis.b	#2,	&0x0000	;r3 As==10
    if(b & mask) sda_on; else sda_off;
  f6:	b0 12 00 00 	call	#0x0000	
    delay5us();
  fa:	e2 d2 00 00 	bis.b	#4,	&0x0000	;r2 As==10
    scl_on;
  fe:	b0 12 00 00 	call	#0x0000	
    delay5us();
 102:	f2 f0 fb ff 	and.b	#-5,	&0x0000	;#0xfffb
 106:	00 00 
    scl_off;
 108:	b0 12 00 00 	call	#0x0000	
 10c:	7b 53       	add.b	#-1,	r11	;r3 As==11
void i2c_bwrite( char b)
{
   char mask = 0x80;
   char i;

  SDA_OUT();
 10e:	08 24       	jz	$+18     	;abs 0x120
    if(b & mask) sda_on; else sda_off;
    delay5us();
    scl_on;
    delay5us();
    scl_off;
    delay5us();
 110:	4a 11       	rra.b	r10		
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
 112:	4e 4a       	mov.b	r10,	r14	
 114:	4e f9       	and.b	r9,	r14	
 116:	ed 23       	jnz	$-36     	;abs 0xf2
 118:	f2 f0 fd ff 	and.b	#-3,	&0x0000	;#0xfffd
 11c:	00 00 
 11e:	eb 3f       	jmp	$-40     	;abs 0xf6
    scl_on;
    delay5us();
    scl_off;
    delay5us();
    mask >>= 1;
  }
 120:	39 41       	pop	r9		
 122:	3a 41       	pop	r10		
 124:	3b 41       	pop	r11		
 126:	30 41       	ret			

00000128 <i2c_bread>:
}

 char i2c_bread(void)
 128:	0b 12       	push	r11		
 12a:	0a 12       	push	r10		
{
   char i;
   char bin = 0;

 12c:	f2 f0 fd ff 	and.b	#-3,	&0x0000	;#0xfffd
 130:	00 00 
 132:	7a 42       	mov.b	#8,	r10	;r2 As==11
  }
}

 char i2c_bread(void)
{
   char i;
 134:	4b 43       	clr.b	r11		
   char bin = 0;

  SDA_IN();
  for (i=0; i<8; i++)
  {
 136:	8b 11       	sxt	r11		
 138:	4b 5b       	rla.b	r11		
    bin <<= 1;
 13a:	e2 d2 00 00 	bis.b	#4,	&0x0000	;r2 As==10
    scl_on;
 13e:	b0 12 00 00 	call	#0x0000	
    delay5us();
 142:	5e 42 00 00 	mov.b	&0x0000,r14	
 146:	2e f3       	and	#2,	r14	;r3 As==10
 148:	01 24       	jz	$+4      	;abs 0x14c
 14a:	5b 53       	inc.b	r11		
    if (sda_test) bin += 1;
 14c:	b0 12 00 00 	call	#0x0000	
    delay5us();
 150:	f2 f0 fb ff 	and.b	#-5,	&0x0000	;#0xfffb
 154:	00 00 
    scl_off;
 156:	b0 12 00 00 	call	#0x0000	
 15a:	7a 53       	add.b	#-1,	r10	;r3 As==11
 char i2c_bread(void)
{
   char i;
   char bin = 0;

  SDA_IN();
 15c:	ec 23       	jnz	$-38     	;abs 0x136
    delay5us();
    scl_off;
    delay5us();
  }

  return bin;
 15e:	4f 4b       	mov.b	r11,	r15	
 160:	3a 41       	pop	r10		
 162:	3b 41       	pop	r11		
 164:	30 41       	ret			

00000166 <i2c_find_device>:
//
// ****************************************************************
// ** F U N Ç Õ E S  D E R I V A D A S                           **
// ****************************************************************
//
 char i2c_find_device(void)
 166:	21 83       	decd	r1		
{
   char status = 0;

 168:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 16c:	5f 42 00 00 	mov.b	&0x0000,r15	
 170:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address);
 174:	b0 12 00 00 	call	#0x0000	
  status = i2c_recv_ack();
 178:	81 4f 00 00 	mov	r15,	0(r1)	;0x0000(r1)
 17c:	b0 12 00 00 	call	#0x0000	
  i2c_stop();

  return status;
 180:	2f 41       	mov	@r1,	r15	
 182:	21 53       	incd	r1		
 184:	30 41       	ret			

00000186 <i2c_write_dummy>:
}

 char i2c_write_dummy( char b)
 186:	21 83       	decd	r1		
{
   char status = 0;

 188:	81 4f 00 00 	mov	r15,	0(r1)	;0x0000(r1)
 18c:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 190:	2f 41       	mov	@r1,	r15	
 192:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(b);
 196:	b0 12 00 00 	call	#0x0000	
  status = i2c_recv_ack();
 19a:	81 4f 00 00 	mov	r15,	0(r1)	;0x0000(r1)
 19e:	b0 12 00 00 	call	#0x0000	
  i2c_stop();

  return status;
 1a2:	2f 41       	mov	@r1,	r15	
 1a4:	21 53       	incd	r1		
 1a6:	30 41       	ret			

000001a8 <i2c_write_byte>:
}

 char i2c_write_byte( char reg,  char dat)
 1a8:	0b 12       	push	r11		
 1aa:	0a 12       	push	r10		
 1ac:	09 12       	push	r9		
 1ae:	49 4f       	mov.b	r15,	r9	
 1b0:	4b 4e       	mov.b	r14,	r11	
{
   char status = 0;

 1b2:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 1b6:	5f 42 00 00 	mov.b	&0x0000,r15	
 1ba:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address);
 1be:	b0 12 00 00 	call	#0x0000	
 1c2:	4a 4f       	mov.b	r15,	r10	
  status += i2c_recv_ack();
 1c4:	4f 49       	mov.b	r9,	r15	
 1c6:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg);
 1ca:	b0 12 00 00 	call	#0x0000	
 1ce:	49 4f       	mov.b	r15,	r9	
  status += i2c_recv_ack();
 1d0:	4f 4b       	mov.b	r11,	r15	
 1d2:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(dat);
 1d6:	b0 12 00 00 	call	#0x0000	
 1da:	4b 4f       	mov.b	r15,	r11	
  status += i2c_recv_ack();
 1dc:	b0 12 00 00 	call	#0x0000	
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 1e0:	4e 49       	mov.b	r9,	r14	
 1e2:	4e 5a       	add.b	r10,	r14	
  status += i2c_recv_ack();
  i2c_bwrite(dat);
  status += i2c_recv_ack();
  i2c_stop();

  return status;
 1e4:	4f 4e       	mov.b	r14,	r15	
 1e6:	4f 5b       	add.b	r11,	r15	
 1e8:	39 41       	pop	r9		
 1ea:	3a 41       	pop	r10		
 1ec:	3b 41       	pop	r11		
 1ee:	30 41       	ret			

000001f0 <i2c_write_multiples>:
}

char i2c_write_multiples( char reg,  char dat[],  int len)
 1f0:	0b 12       	push	r11		
 1f2:	0a 12       	push	r10		
 1f4:	09 12       	push	r9		
 1f6:	08 12       	push	r8		
 1f8:	48 4f       	mov.b	r15,	r8	
 1fa:	09 4e       	mov	r14,	r9	
 1fc:	0a 4d       	mov	r13,	r10	
{
  int i = 0, status = 0;

 1fe:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 202:	5f 42 00 00 	mov.b	&0x0000,r15	
 206:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address);
 20a:	b0 12 00 00 	call	#0x0000	
 20e:	4b 4f       	mov.b	r15,	r11	
  status += i2c_recv_ack();
 210:	4f 48       	mov.b	r8,	r15	
 212:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg);
 216:	b0 12 00 00 	call	#0x0000	
 21a:	4e 4f       	mov.b	r15,	r14	
 21c:	8e 11       	sxt	r14		
char i2c_write_multiples( char reg,  char dat[],  int len)
{
  int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 21e:	4f 4b       	mov.b	r11,	r15	
 220:	8f 11       	sxt	r15		
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 222:	0e 5f       	add	r15,	r14	
  status += i2c_recv_ack();
 224:	19 20       	jnz	$+52     	;abs 0x258
 226:	0e 9a       	cmp	r10,	r14	
 228:	17 34       	jge	$+48     	;abs 0x258
 22a:	0b 4e       	mov	r14,	r11	
 22c:	03 3c       	jmp	$+8      	;abs 0x234
  while((!status) && (i<len))
  {
 22e:	1b 53       	inc	r11		

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 230:	0b 9a       	cmp	r10,	r11	
 232:	09 34       	jge	$+20     	;abs 0x246
  status += i2c_recv_ack();
  i2c_stop();

  return status;
}

 234:	0f 49       	mov	r9,	r15	
 236:	0f 5b       	add	r11,	r15	
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  while((!status) && (i<len))
  {
 238:	6f 4f       	mov.b	@r15,	r15	
 23a:	b0 12 00 00 	call	#0x0000	
    i2c_bwrite(dat[i++]);
 23e:	b0 12 00 00 	call	#0x0000	
 242:	8f 11       	sxt	r15		

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 244:	f4 27       	jz	$-22     	;abs 0x22e
 246:	4b 4f       	mov.b	r15,	r11	
  while((!status) && (i<len))
  {
    i2c_bwrite(dat[i++]);
    status += i2c_recv_ack();
  }
 248:	b0 12 00 00 	call	#0x0000	
  i2c_stop();


  return status;
 24c:	4f 4b       	mov.b	r11,	r15	
 24e:	38 41       	pop	r8		
 250:	39 41       	pop	r9		
 252:	3a 41       	pop	r10		
 254:	3b 41       	pop	r11		
 256:	30 41       	ret			

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 258:	4b 4e       	mov.b	r14,	r11	
 25a:	f6 3f       	jmp	$-18     	;abs 0x248

0000025c <i2c_write16_byte>:


  return status;
}

 char i2c_write16_byte( int reg,  char dat)
 25c:	0b 12       	push	r11		
 25e:	0a 12       	push	r10		
 260:	09 12       	push	r9		
 262:	08 12       	push	r8		
 264:	07 12       	push	r7		
 266:	0b 4f       	mov	r15,	r11	
 268:	47 4e       	mov.b	r14,	r7	
{
  char status = 0;

 26a:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 26e:	5f 42 00 00 	mov.b	&0x0000,r15	
 272:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address);
 276:	b0 12 00 00 	call	#0x0000	
 27a:	49 4f       	mov.b	r15,	r9	
  status += i2c_recv_ack();
 27c:	0d 4b       	mov	r11,	r13	
 27e:	0b 93       	tst	r11		
 280:	02 34       	jge	$+6      	;abs 0x286
 282:	3d 50 ff 00 	add	#255,	r13	;#0x00ff
 286:	8d 10       	swpb	r13		
 288:	8d 11       	sxt	r13		
 28a:	4f 4d       	mov.b	r13,	r15	
 28c:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg/256);
 290:	b0 12 00 00 	call	#0x0000	
 294:	48 4f       	mov.b	r15,	r8	
  status += i2c_recv_ack();
 296:	0d 4b       	mov	r11,	r13	
 298:	3d f0 ff 80 	and	#-32513,r13	;#0x80ff
 29c:	3d b0 00 80 	bit	#-32768,r13	;#0x8000
 2a0:	04 34       	jge	$+10     	;abs 0x2aa
 2a2:	3d 53       	add	#-1,	r13	;r3 As==11
 2a4:	3d d0 00 ff 	bis	#-256,	r13	;#0xff00
 2a8:	1d 53       	inc	r13		
 2aa:	4f 4d       	mov.b	r13,	r15	
 2ac:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg%256);
 2b0:	b0 12 00 00 	call	#0x0000	
 2b4:	4a 4f       	mov.b	r15,	r10	
  status += i2c_recv_ack();
 2b6:	4f 47       	mov.b	r7,	r15	
 2b8:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(dat);
 2bc:	b0 12 00 00 	call	#0x0000	
 2c0:	4b 4f       	mov.b	r15,	r11	
  status += i2c_recv_ack();
 2c2:	b0 12 00 00 	call	#0x0000	
  char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 2c6:	4e 48       	mov.b	r8,	r14	
 2c8:	4e 59       	add.b	r9,	r14	
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
 2ca:	4e 5a       	add.b	r10,	r14	
  status += i2c_recv_ack();
  i2c_bwrite(dat);
  status += i2c_recv_ack();
  i2c_stop();

  return status;
 2cc:	4f 4e       	mov.b	r14,	r15	
 2ce:	4f 5b       	add.b	r11,	r15	
 2d0:	37 41       	pop	r7		
 2d2:	38 41       	pop	r8		
 2d4:	39 41       	pop	r9		
 2d6:	3a 41       	pop	r10		
 2d8:	3b 41       	pop	r11		
 2da:	30 41       	ret			

000002dc <i2c_write16_multiples>:
}

 char i2c_write16_multiples( int reg,  char dat[], int len)
 2dc:	0b 12       	push	r11		
 2de:	0a 12       	push	r10		
 2e0:	09 12       	push	r9		
 2e2:	08 12       	push	r8		
 2e4:	08 4f       	mov	r15,	r8	
 2e6:	09 4e       	mov	r14,	r9	
 2e8:	0a 4d       	mov	r13,	r10	
{
   int i = 0, status = 0;

 2ea:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 2ee:	5f 42 00 00 	mov.b	&0x0000,r15	
 2f2:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address);
 2f6:	b0 12 00 00 	call	#0x0000	
 2fa:	4b 4f       	mov.b	r15,	r11	
  status += i2c_recv_ack();
 2fc:	0d 48       	mov	r8,	r13	
 2fe:	08 93       	tst	r8		
 300:	02 34       	jge	$+6      	;abs 0x306
 302:	3d 50 ff 00 	add	#255,	r13	;#0x00ff
 306:	8d 10       	swpb	r13		
 308:	8d 11       	sxt	r13		
 30a:	4f 4d       	mov.b	r13,	r15	
 30c:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg/256);
 310:	b0 12 00 00 	call	#0x0000	
 314:	4e 4f       	mov.b	r15,	r14	
 316:	8e 11       	sxt	r14		
 char i2c_write16_multiples( int reg,  char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 318:	4f 4b       	mov.b	r11,	r15	
 31a:	8f 11       	sxt	r15		
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 31c:	0b 4e       	mov	r14,	r11	
 31e:	0b 5f       	add	r15,	r11	
  status += i2c_recv_ack();
 320:	0f 48       	mov	r8,	r15	
 322:	3f f0 ff 80 	and	#-32513,r15	;#0x80ff
 326:	3f b0 00 80 	bit	#-32768,r15	;#0x8000
 32a:	04 34       	jge	$+10     	;abs 0x334
 32c:	3f 53       	add	#-1,	r15	;r3 As==11
 32e:	3f d0 00 ff 	bis	#-256,	r15	;#0xff00
 332:	1f 53       	inc	r15		
 334:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg%256);
 338:	b0 12 00 00 	call	#0x0000	
 33c:	8f 11       	sxt	r15		
 33e:	0f 5b       	add	r11,	r15	
  status += i2c_recv_ack();
 340:	10 20       	jnz	$+34     	;abs 0x362
 342:	0f 9a       	cmp	r10,	r15	
 344:	0e 34       	jge	$+30     	;abs 0x362
 346:	0b 4f       	mov	r15,	r11	
 348:	03 3c       	jmp	$+8      	;abs 0x350
  while((!status) && (i<len))
  {
 34a:	1b 53       	inc	r11		
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
 34c:	0b 9a       	cmp	r10,	r11	
 34e:	09 34       	jge	$+20     	;abs 0x362
  status += i2c_recv_ack();
  i2c_stop();

  return status;
}

 350:	0f 49       	mov	r9,	r15	
 352:	0f 5b       	add	r11,	r15	
  i2c_bwrite(reg/256);
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
  while((!status) && (i<len))
  {
 354:	6f 4f       	mov.b	@r15,	r15	
 356:	b0 12 00 00 	call	#0x0000	
    i2c_bwrite(dat[i++]);
 35a:	b0 12 00 00 	call	#0x0000	
 35e:	8f 11       	sxt	r15		
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
 360:	f4 27       	jz	$-22     	;abs 0x34a
 362:	4b 4f       	mov.b	r15,	r11	
  while((!status) && (i<len))
  {
    i2c_bwrite(dat[i++]);
    status += i2c_recv_ack();
  }
 364:	b0 12 00 00 	call	#0x0000	
  i2c_stop();


  return status;
 368:	4f 4b       	mov.b	r11,	r15	
 36a:	38 41       	pop	r8		
 36c:	39 41       	pop	r9		
 36e:	3a 41       	pop	r10		
 370:	3b 41       	pop	r11		
 372:	30 41       	ret			

00000374 <i2c_read_byte>:
}

 char i2c_read_byte( char reg,  char *dat)
 374:	0b 12       	push	r11		
 376:	0a 12       	push	r10		
 378:	09 12       	push	r9		
 37a:	08 12       	push	r8		
 37c:	4a 4f       	mov.b	r15,	r10	
 37e:	0b 4e       	mov	r14,	r11	
{
   char status = 0;

 380:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 384:	5f 42 00 00 	mov.b	&0x0000,r15	
 388:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address);
 38c:	b0 12 00 00 	call	#0x0000	
 390:	49 4f       	mov.b	r15,	r9	
  status += i2c_recv_ack();
 392:	4f 4a       	mov.b	r10,	r15	
 394:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg);
 398:	b0 12 00 00 	call	#0x0000	
 39c:	48 4f       	mov.b	r15,	r8	
  status += i2c_recv_ack();
 39e:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 3a2:	5f 42 00 00 	mov.b	&0x0000,r15	
 3a6:	5f 53       	inc.b	r15		
 3a8:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address+1);
 3ac:	b0 12 00 00 	call	#0x0000	
 3b0:	4a 4f       	mov.b	r15,	r10	
  status += i2c_recv_ack();
 3b2:	b0 12 00 00 	call	#0x0000	
 3b6:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
  *dat = i2c_bread();
 3ba:	7f 43       	mov.b	#-1,	r15	;r3 As==11
 3bc:	b0 12 00 00 	call	#0x0000	
  i2c_send_ack(NACK);
 3c0:	b0 12 00 00 	call	#0x0000	
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 3c4:	4e 48       	mov.b	r8,	r14	
 3c6:	4e 59       	add.b	r9,	r14	
  status += i2c_recv_ack();
  *dat = i2c_bread();
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
 3c8:	4f 4e       	mov.b	r14,	r15	
 3ca:	4f 5a       	add.b	r10,	r15	
 3cc:	38 41       	pop	r8		
 3ce:	39 41       	pop	r9		
 3d0:	3a 41       	pop	r10		
 3d2:	3b 41       	pop	r11		
 3d4:	30 41       	ret			

000003d6 <i2c_read_multiples>:
}

 char i2c_read_multiples( char reg,  char dat[], int len)
 3d6:	0b 12       	push	r11		
 3d8:	0a 12       	push	r10		
 3da:	09 12       	push	r9		
 3dc:	08 12       	push	r8		
 3de:	4b 4f       	mov.b	r15,	r11	
 3e0:	0a 4e       	mov	r14,	r10	
 3e2:	09 4d       	mov	r13,	r9	
{
   int i = 0, status = 0;

 3e4:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 3e8:	5f 42 00 00 	mov.b	&0x0000,r15	
 3ec:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address);
 3f0:	b0 12 00 00 	call	#0x0000	
 3f4:	48 4f       	mov.b	r15,	r8	
  status += i2c_recv_ack();
 3f6:	4f 4b       	mov.b	r11,	r15	
 3f8:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg);
 3fc:	b0 12 00 00 	call	#0x0000	
 400:	4e 4f       	mov.b	r15,	r14	
 402:	8e 11       	sxt	r14		
 char i2c_read_multiples( char reg,  char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 404:	88 11       	sxt	r8		
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 406:	08 5e       	add	r14,	r8	
  status += i2c_recv_ack();
 408:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 40c:	5f 42 00 00 	mov.b	&0x0000,r15	
 410:	5f 53       	inc.b	r15		
 412:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address+1);
 416:	b0 12 00 00 	call	#0x0000	
 41a:	8f 11       	sxt	r15		
 41c:	08 5f       	add	r15,	r8	
  status += i2c_recv_ack();

 41e:	28 20       	jnz	$+82     	;abs 0x470
 420:	39 53       	add	#-1,	r9	;r3 As==11
 422:	08 99       	cmp	r9,	r8	
 424:	27 34       	jge	$+80     	;abs 0x474
  while((!status) && (i<len-1))
  {  
 426:	b0 12 00 00 	call	#0x0000	
 42a:	ca 4f 00 00 	mov.b	r15,	0(r10)	;0x0000(r10)
    dat[i] = i2c_bread();
 42e:	4f 48       	mov.b	r8,	r15	
 430:	b0 12 00 00 	call	#0x0000	
    i2c_send_ack(ACK);
 434:	1b 43       	mov	#1,	r11	;r3 As==01
 436:	0a 3c       	jmp	$+22     	;abs 0x44c
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 438:	b0 12 00 00 	call	#0x0000	
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
}

 43c:	0c 4a       	mov	r10,	r12	
 43e:	0c 5b       	add	r11,	r12	
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 440:	cc 4f 00 00 	mov.b	r15,	0(r12)	;0x0000(r12)
    dat[i] = i2c_bread();
 444:	4f 43       	clr.b	r15		
 446:	b0 12 00 00 	call	#0x0000	
    i2c_send_ack(ACK);
 44a:	1b 53       	inc	r11		
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 44c:	0b 99       	cmp	r9,	r11	
 44e:	f4 3b       	jl	$-22     	;abs 0x438
  while((!status) && (i<len-1))
  {  
    dat[i] = i2c_bread();
    i2c_send_ack(ACK);
    i++;
  }
 450:	b0 12 00 00 	call	#0x0000	
 454:	0a 59       	add	r9,	r10	
 456:	ca 4f 00 00 	mov.b	r15,	0(r10)	;0x0000(r10)
  dat[i] = i2c_bread();
 45a:	7f 43       	mov.b	#-1,	r15	;r3 As==11
 45c:	b0 12 00 00 	call	#0x0000	
  i2c_send_ack(NACK);
 460:	b0 12 00 00 	call	#0x0000	
  i2c_stop();

  return status;
 464:	4f 48       	mov.b	r8,	r15	
 466:	38 41       	pop	r8		
 468:	39 41       	pop	r9		
 46a:	3a 41       	pop	r10		
 46c:	3b 41       	pop	r11		
 46e:	30 41       	ret			
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 470:	09 43       	clr	r9		
 472:	ee 3f       	jmp	$-34     	;abs 0x450
 474:	09 48       	mov	r8,	r9	
 476:	ec 3f       	jmp	$-38     	;abs 0x450

00000478 <i2c_read16_byte>:
  i2c_stop();

  return status;
}

 char i2c_read16_byte( int reg,  char *dat)
 478:	0b 12       	push	r11		
 47a:	0a 12       	push	r10		
 47c:	09 12       	push	r9		
 47e:	08 12       	push	r8		
 480:	07 12       	push	r7		
 482:	0b 4f       	mov	r15,	r11	
 484:	0a 4e       	mov	r14,	r10	
{
   char status = 0;

 486:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 48a:	5f 42 00 00 	mov.b	&0x0000,r15	
 48e:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address);
 492:	b0 12 00 00 	call	#0x0000	
 496:	48 4f       	mov.b	r15,	r8	
  status += i2c_recv_ack();
 498:	0d 4b       	mov	r11,	r13	
 49a:	0b 93       	tst	r11		
 49c:	02 34       	jge	$+6      	;abs 0x4a2
 49e:	3d 50 ff 00 	add	#255,	r13	;#0x00ff
 4a2:	8d 10       	swpb	r13		
 4a4:	8d 11       	sxt	r13		
 4a6:	4f 4d       	mov.b	r13,	r15	
 4a8:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg/256);
 4ac:	b0 12 00 00 	call	#0x0000	
 4b0:	47 4f       	mov.b	r15,	r7	
  status += i2c_recv_ack();
 4b2:	0d 4b       	mov	r11,	r13	
 4b4:	3d f0 ff 80 	and	#-32513,r13	;#0x80ff
 4b8:	3d b0 00 80 	bit	#-32768,r13	;#0x8000
 4bc:	04 34       	jge	$+10     	;abs 0x4c6
 4be:	3d 53       	add	#-1,	r13	;r3 As==11
 4c0:	3d d0 00 ff 	bis	#-256,	r13	;#0xff00
 4c4:	1d 53       	inc	r13		
 4c6:	4f 4d       	mov.b	r13,	r15	
 4c8:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg%256);
 4cc:	b0 12 00 00 	call	#0x0000	
 4d0:	49 4f       	mov.b	r15,	r9	
  status += i2c_recv_ack();
 4d2:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 4d6:	5f 42 00 00 	mov.b	&0x0000,r15	
 4da:	5f 53       	inc.b	r15		
 4dc:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address+1);
 4e0:	b0 12 00 00 	call	#0x0000	
 4e4:	4b 4f       	mov.b	r15,	r11	
  status += i2c_recv_ack();
 4e6:	b0 12 00 00 	call	#0x0000	
 4ea:	ca 4f 00 00 	mov.b	r15,	0(r10)	;0x0000(r10)
  *dat = i2c_bread();
 4ee:	7f 43       	mov.b	#-1,	r15	;r3 As==11
 4f0:	b0 12 00 00 	call	#0x0000	
  i2c_send_ack(NACK);
 4f4:	b0 12 00 00 	call	#0x0000	
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 4f8:	4e 47       	mov.b	r7,	r14	
 4fa:	4e 58       	add.b	r8,	r14	
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
 4fc:	4e 59       	add.b	r9,	r14	
  status += i2c_recv_ack();
  *dat = i2c_bread();
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
 4fe:	4f 4e       	mov.b	r14,	r15	
 500:	4f 5b       	add.b	r11,	r15	
 502:	37 41       	pop	r7		
 504:	38 41       	pop	r8		
 506:	39 41       	pop	r9		
 508:	3a 41       	pop	r10		
 50a:	3b 41       	pop	r11		
 50c:	30 41       	ret			

0000050e <i2c_read16_multiples>:
}

 char i2c_read16_multiples( int reg, char dat[], int len)
 50e:	0b 12       	push	r11		
 510:	0a 12       	push	r10		
 512:	09 12       	push	r9		
 514:	08 12       	push	r8		
 516:	0b 4f       	mov	r15,	r11	
 518:	0a 4e       	mov	r14,	r10	
 51a:	09 4d       	mov	r13,	r9	
{
   int i = 0, status = 0;

 51c:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 520:	5f 42 00 00 	mov.b	&0x0000,r15	
 524:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address);
 528:	b0 12 00 00 	call	#0x0000	
 52c:	48 4f       	mov.b	r15,	r8	
  status += i2c_recv_ack();
 52e:	0c 4b       	mov	r11,	r12	
 530:	0b 93       	tst	r11		
 532:	02 34       	jge	$+6      	;abs 0x538
 534:	3c 50 ff 00 	add	#255,	r12	;#0x00ff
 538:	8c 10       	swpb	r12		
 53a:	8c 11       	sxt	r12		
 53c:	4f 4c       	mov.b	r12,	r15	
 53e:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg/256);
 542:	b0 12 00 00 	call	#0x0000	
 546:	4e 4f       	mov.b	r15,	r14	
 548:	8e 11       	sxt	r14		
 char i2c_read16_multiples( int reg, char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 54a:	88 11       	sxt	r8		
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 54c:	08 5e       	add	r14,	r8	
  status += i2c_recv_ack();
 54e:	0f 4b       	mov	r11,	r15	
 550:	3f f0 ff 80 	and	#-32513,r15	;#0x80ff
 554:	3f b0 00 80 	bit	#-32768,r15	;#0x8000
 558:	04 34       	jge	$+10     	;abs 0x562
 55a:	3f 53       	add	#-1,	r15	;r3 As==11
 55c:	3f d0 00 ff 	bis	#-256,	r15	;#0xff00
 560:	1f 53       	inc	r15		
 562:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(reg%256);
 566:	b0 12 00 00 	call	#0x0000	
 56a:	8f 11       	sxt	r15		
 56c:	08 5f       	add	r15,	r8	
  status += i2c_recv_ack();
 56e:	b0 12 00 00 	call	#0x0000	
  i2c_start();
 572:	5f 42 00 00 	mov.b	&0x0000,r15	
 576:	5f 53       	inc.b	r15		
 578:	b0 12 00 00 	call	#0x0000	
  i2c_bwrite(i2c_slave_address+1);
 57c:	b0 12 00 00 	call	#0x0000	
 580:	8f 11       	sxt	r15		
 582:	08 5f       	add	r15,	r8	
  status += i2c_recv_ack();

 584:	28 20       	jnz	$+82     	;abs 0x5d6
 586:	39 53       	add	#-1,	r9	;r3 As==11
 588:	08 99       	cmp	r9,	r8	
 58a:	27 34       	jge	$+80     	;abs 0x5da
  while((!status) && (i<len-1))
  {  
 58c:	b0 12 00 00 	call	#0x0000	
 590:	ca 4f 00 00 	mov.b	r15,	0(r10)	;0x0000(r10)
    dat[i] = i2c_bread();
 594:	4f 48       	mov.b	r8,	r15	
 596:	b0 12 00 00 	call	#0x0000	
    i2c_send_ack(ACK);
 59a:	1b 43       	mov	#1,	r11	;r3 As==01
 59c:	0a 3c       	jmp	$+22     	;abs 0x5b2
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 59e:	b0 12 00 00 	call	#0x0000	
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
}

 5a2:	0c 4a       	mov	r10,	r12	
 5a4:	0c 5b       	add	r11,	r12	
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 5a6:	cc 4f 00 00 	mov.b	r15,	0(r12)	;0x0000(r12)
    dat[i] = i2c_bread();
 5aa:	4f 43       	clr.b	r15		
 5ac:	b0 12 00 00 	call	#0x0000	
    i2c_send_ack(ACK);
 5b0:	1b 53       	inc	r11		
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 5b2:	0b 99       	cmp	r9,	r11	
 5b4:	f4 3b       	jl	$-22     	;abs 0x59e
  while((!status) && (i<len-1))
  {  
    dat[i] = i2c_bread();
    i2c_send_ack(ACK);
    i++;
  }
 5b6:	b0 12 00 00 	call	#0x0000	
 5ba:	0a 59       	add	r9,	r10	
 5bc:	ca 4f 00 00 	mov.b	r15,	0(r10)	;0x0000(r10)
  dat[i] = i2c_bread();
 5c0:	7f 43       	mov.b	#-1,	r15	;r3 As==11
 5c2:	b0 12 00 00 	call	#0x0000	
  i2c_send_ack(NACK);
 5c6:	b0 12 00 00 	call	#0x0000	
  i2c_stop();

  return status;
 5ca:	4f 48       	mov.b	r8,	r15	
 5cc:	38 41       	pop	r8		
 5ce:	39 41       	pop	r9		
 5d0:	3a 41       	pop	r10		
 5d2:	3b 41       	pop	r11		
 5d4:	30 41       	ret			
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 5d6:	09 43       	clr	r9		
 5d8:	ee 3f       	jmp	$-34     	;abs 0x5b6
 5da:	09 48       	mov	r8,	r9	
 5dc:	ec 3f       	jmp	$-38     	;abs 0x5b6

Disassembly of section .data:

00000000 <i2c_slave_address>:
   0:	3a 10       	Address 0x00000000 is out of bounds.
Address 0x00000002 is out of bounds.
and.b	@r15+,	-1(r15)	;0xffff(r15)

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  i2c_init();
  i2c_slave_address = slave_addr;
}

void i2c_change_address( char slave_addr)
{
   0:	01 11       	rra	r1		
   2:	01 25       	jz	$+516    	;abs 0x206
  i2c_slave_address = slave_addr;
   4:	0e 13       	reti			;return from interupt
}

void i2c_init(void)
{
   6:	0b 03       	mova	#2,	r11	;r3 As==10
   8:	0e 1b 0e 11 	.rpt	#14
				rrax	r14		
  SDA_OUT();
   c:	01 12       	push	r1		
   e:	01 10       	rrc	r1		
  sda_on;
  10:	06 00       	mova	@r0,	r6	
  12:	00 02       	bra	#4		;r2 As==10
  scl_on;
  14:	2e 01 3f 0c 	mova	&0x10c3f,r14	
  delay5us();
  18:	03 0e       	.word	0x0e03;	????	Illegal as address instr
//
// ****************************************************************
// ** P R I M I T I V A S                                        **
// ****************************************************************
//
void i2c_config( char slave_addr)
  1a:	3a 0b 3b 0b 	mova	2875(r11),r10	;0x0b3b(r11)
{
  1e:	27 0c 11 01 	mova	&0xc0111,r7	
  i2c_init();
  22:	12 01       	mova	@r1+,	r2	
  24:	40 0a       	rlam.a	#3,	r0	
  i2c_slave_address = slave_addr;
  26:	01 13       	reti			;return from interupt
  28:	00 00       	bra	@r0		
  scl_on;
  delay5us();
}

void i2c_start(void)
{
  2a:	03 05       	.word	0x0503;	????	Illegal as address instr
  2c:	00 03       	bra	#2		;r3 As==10
  sda_on;
  2e:	0e 3a       	jl	$-994    	;abs 0xfc4c
  30:	0b 3b       	jl	$-488    	;abs 0xfe48
  delay5us();
  32:	0b 49       	mov	r9,	r11	
  34:	13 02       	.word	0x0213;	????	Illegal as address instr
  scl_on;
  36:	0a 00       	mova	@r0,	r10	
  38:	00 04       	bra	@r4		
  delay5us();

  3a:	24 00 0b 0b 	mova	&0x00b0b,r4	
  3e:	3e 0b 03 0e 	mova	3587(r11),r14	;0x0e03(r11)
  sda_off;
  42:	00 00       	bra	@r0		
  delay5us();
  44:	05 2e       	jc	$-1012   	;abs 0xfc50
  46:	01 3f       	jmp	$-508    	;abs 0xfe4a
  48:	0c 03       	mova	#2,	r12	;r3 As==10
  scl_off;
  4a:	0e 3a       	jl	$-994    	;abs 0xfc68
  4c:	0b 3b       	jl	$-488    	;abs 0xfe64
  delay5us();
  4e:	0b 49       	mov	r9,	r11	
}

void i2c_stop(void)
{
  50:	13 3c       	jmp	$+40     	;abs 0x78
  52:	0c 00       	mova	@r0,	r12	
  54:	00 06       	bra	@r6		
  sda_off;
  56:	18 00       	mova	#0x00000,r8	
  58:	00 00       	bra	@r0		
  delay5us();
  5a:	07 24       	jz	$+16     	;abs 0x6a
  5c:	00 0b       	bra	@r11		
  scl_on;
  5e:	0b 3e       	jmp	$-1000   	;abs 0xfc76
  60:	0b 03       	mova	#2,	r11	;r3 As==10
  delay5us();
  62:	08 00       	mova	@r0,	r8	
  64:	00 08       	bra	@r8		
  sda_on;
  66:	2e 01 3f 0c 	mova	&0x10c3f,r14	
  delay5us();
  6a:	03 0e       	.word	0x0e03;	????	Illegal as address instr
}

 char i2c_recv_ack(void)
  6c:	3a 0b 3b 0b 	mova	2875(r11),r10	;0x0b3b(r11)
{
   char i;

  70:	27 0c 11 01 	mova	&0xc0111,r7	
  SDA_IN();
  74:	12 01       	mova	@r1+,	r2	
  76:	40 06       	rlam.a	#2,	r0	
  delay5us();
  78:	01 13       	reti			;return from interupt
  7a:	00 00       	bra	@r0		
  scl_on;
  7c:	09 05       	mova	@r5,	r9	
  7e:	00 03       	bra	#2		;r3 As==10
  delay5us();
  80:	0e 3a       	jl	$-994    	;abs 0xfc9e
  82:	0b 3b       	jl	$-488    	;abs 0xfe9a
  if(sda_test) i=1; else i=0;
  84:	0b 49       	mov	r9,	r11	
  86:	13 02       	.word	0x0213;	????	Illegal as address instr
  delay5us();
  88:	06 00       	mova	@r0,	r6	
  8a:	00 0a       	bra	@r10		
  8c:	2e 01 3f 0c 	mova	&0x10c3f,r14	
  scl_off;
  90:	03 0e       	.word	0x0e03;	????	Illegal as address instr
  delay5us();
  92:	3a 0b 3b 0b 	mova	2875(r11),r10	;0x0b3b(r11)
  96:	27 0c 49 13 	mova	&0xc1349,r7	
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  9a:	11 01       	mova	@r1+,	r1	
  9c:	12 01       	mova	@r1+,	r2	
  9e:	40 06       	rlam.a	#2,	r0	
  a0:	01 13       	reti			;return from interupt
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a2:	00 00       	bra	@r0		
  a4:	0b 34       	jge	$+24     	;abs 0xbc
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  a6:	00 03       	bra	#2		;r3 As==10
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a8:	08 3a       	jl	$-1006   	;abs 0xfcba
  aa:	0b 3b       	jl	$-488    	;abs 0xfec2
}

void i2c_send_ack( char confirmation)
{
  ac:	0b 49       	mov	r9,	r11	
  ae:	13 02       	.word	0x0213;	????	Illegal as address instr
  b0:	06 00       	mova	@r0,	r6	
  SDA_OUT();
  b2:	00 0c       	bra	@r12		
  b4:	05 00       	mova	@r0,	r5	
  b6:	03 08       	.word	0x0803;	????	Illegal as address instr
  b8:	3a 0b 3b 0b 	mova	2875(r11),r10	;0x0b3b(r11)
  if(confirmation) sda_on; else sda_off;
  bc:	49 13       	calla	r9		
  be:	02 06       	mova	@r6,	r2	
  scl_on;
  c0:	00 00       	bra	@r0		
  c2:	0d 34       	jge	$+28     	;abs 0xde
  delay5us();
  c4:	00 03       	bra	#2		;r3 As==10
  c6:	0e 3a       	jl	$-994    	;abs 0xfce4
  c8:	0b 3b       	jl	$-488    	;abs 0xfee0
  scl_off;
  ca:	0b 49       	mov	r9,	r11	
  cc:	13 02       	.word	0x0213;	????	Illegal as address instr
  delay5us();
  ce:	06 00       	mova	@r0,	r6	
  d0:	00 0e       	bra	@r14		
  d2:	0b 01       	mova	@r1,	r11	
  sda_off;
  d4:	55 06       	rlam	#2,	r5	
  return i;
}

void i2c_send_ack( char confirmation)
{
  SDA_OUT();
  d6:	00 00       	bra	@r0		
  d8:	0f 0b       	mova	@r11,	r15	
  da:	01 11       	rra	r1		
  scl_off;
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
  dc:	01 12       	push	r1		
  de:	01 00       	mova	@r0,	r1	
  e0:	00 10       	rrc	r0		
  e2:	0f 00       	mova	@r0,	r15	
{
   char mask = 0x80;
   char i;

  e4:	0b 0b       	mova	@r11,	r11	
  e6:	49 13       	calla	r9		
  e8:	00 00       	bra	@r0		
  ea:	11 2e       	jc	$-988    	;abs 0xfd0e
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
{
  ec:	01 3f       	jmp	$-508    	;abs 0xfef0
  ee:	0c 03       	mova	#2,	r12	;r3 As==10
  f0:	0e 3a       	jl	$-994    	;abs 0xfd0e
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
  f2:	0b 3b       	jl	$-488    	;abs 0xff0a
  f4:	05 27       	jz	$-500    	;abs 0xff00
    if(b & mask) sda_on; else sda_off;
  f6:	0c 49       	mov	r9,	r12	
  f8:	13 11       	rra	#1		;r3 As==01
    delay5us();
  fa:	01 12       	push	r1		
  fc:	01 40       	mov	r0,	r1	
    scl_on;
  fe:	06 01       	mova	@r1,	r6	
 100:	13 00       	.word	0x0013;	????	Illegal as address instr
    delay5us();
 102:	00 12       	push	r0		
 104:	05 00       	mova	@r0,	r5	
 106:	03 08       	.word	0x0803;	????	Illegal as address instr
    scl_off;
 108:	3a 0b 3b 05 	mova	1339(r11),r10	;0x053b(r11)
 10c:	49 13       	calla	r9		
void i2c_bwrite( char b)
{
   char mask = 0x80;
   char i;

  SDA_OUT();
 10e:	02 06       	mova	@r6,	r2	
    if(b & mask) sda_on; else sda_off;
    delay5us();
    scl_on;
    delay5us();
    scl_off;
    delay5us();
 110:	00 00       	bra	@r0		
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
 112:	13 34       	jge	$+40     	;abs 0x13a
 114:	00 03       	bra	#2		;r3 As==10
 116:	08 3a       	jl	$-1006   	;abs 0xfd28
 118:	0b 3b       	jl	$-488    	;abs 0xff30
 11a:	05 49       	mov	r9,	r5	
 11c:	13 02       	.word	0x0213;	????	Illegal as address instr
 11e:	06 00       	mova	@r0,	r6	
    scl_on;
    delay5us();
    scl_off;
    delay5us();
    mask >>= 1;
  }
 120:	00 14       	pushm.a	#1,	r0	
 122:	34 00 03 0e 	mova	0x0e03,	r4	;PC rel. 0x00f27
 126:	3a 0b 3b 05 	mova	1339(r11),r10	;0x053b(r11)
}

 char i2c_bread(void)
 12a:	49 13       	calla	r9		
{
   char i;
   char bin = 0;

 12c:	02 06       	mova	@r6,	r2	
 12e:	00 00       	bra	@r0		
 130:	15 34       	jge	$+44     	;abs 0x15c
 132:	00 03       	bra	#2		;r3 As==10
  }
}

 char i2c_bread(void)
{
   char i;
 134:	0e 3a       	jl	$-994    	;abs 0xfd52
   char bin = 0;

  SDA_IN();
  for (i=0; i<8; i++)
  {
 136:	0b 3b       	jl	$-488    	;abs 0xff4e
 138:	05 87       	sub	r7,	r5	
    bin <<= 1;
 13a:	40 0e       	rlam.a	#4,	r0	
 13c:	49 13       	calla	r9		
    scl_on;
 13e:	3f 0c 3c 0c 	mova	3132(r12),r15	;0x0c3c(r12)
    delay5us();
 142:	00 00       	bra	@r0		
 144:	16 26       	jz	$-978    	;abs 0xfd72
 146:	00 49       	br	r9		
 148:	13 00       	.word	0x0013;	????	Illegal as address instr
 14a:	00 17       	popm	#1,	r0	
    if (sda_test) bin += 1;
 14c:	35 00 49 13 	mova	0x1349,	r5	;PC rel. 0x01497
    delay5us();
 150:	00 00       	bra	@r0		
 152:	18 34       	jge	$+50     	;abs 0x184
 154:	00 03       	bra	#2		;r3 As==10
    scl_off;
 156:	0e 3a       	jl	$-994    	;abs 0xfd74
 158:	0b 3b       	jl	$-488    	;abs 0xff70
 15a:	0b 49       	mov	r9,	r11	
 char i2c_bread(void)
{
   char i;
   char bin = 0;

  SDA_IN();
 15c:	13 3f       	jmp	$-472    	;abs 0xff84
    delay5us();
    scl_off;
    delay5us();
  }

  return bin;
 15e:	0c 3c       	jmp	$+26     	;abs 0x178
 160:	0c 00       	mova	@r0,	r12	
 162:	00 19       	.word	0x1900;	????	
 164:	34 00 03 0e 	mova	0x0e03,	r4	;PC rel. 0x00f69
// ****************************************************************
//
 char i2c_find_device(void)
{
   char status = 0;

 168:	3a 0b 3b 0b 	mova	2875(r11),r10	;0x0b3b(r11)
  i2c_start();
 16c:	49 13       	calla	r9		
 16e:	3f 0c 02 0a 	mova	2562(r12),r15	;0x0a02(r12)
 172:	00 00       	bra	@r0		
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  i2c_init();
  i2c_slave_address = slave_addr;
}

void i2c_change_address( char slave_addr)
{
   0:	9e 05 00 00 	cmpa	#0x50000,r14	
  i2c_slave_address = slave_addr;
   4:	02 00       	mova	@r0,	r2	
}

void i2c_init(void)
{
   6:	00 00       	bra	@r0		
   8:	00 00       	bra	@r0		
   a:	02 01       	mova	@r1,	r2	
  SDA_OUT();
   c:	00 00       	bra	@r0		
   e:	00 00       	bra	@r0		
  sda_on;
  10:	01 00       	mova	@r0,	r1	
	...
// ****************************************************************
// ** P R I M I T I V A S                                        **
// ****************************************************************
//
void i2c_config( char slave_addr)
{
  1e:	00 00       	bra	@r0		
  20:	00 02       	bra	#4		;r2 As==10
  i2c_init();
  22:	01 00       	mova	@r0,	r1	
  24:	00 00       	bra	@r0		
  i2c_slave_address = slave_addr;
  26:	00 01       	bra	@r1		
  28:	1e 01       	mova	@r1+,	r14	
  scl_on;
  delay5us();
}

void i2c_start(void)
{
  2a:	00 00       	bra	@r0		
  2c:	00 00       	bra	@r0		
  sda_on;
  2e:	02 71       	subc	r1,	r2	
  30:	02 43       	clr	r2		
  delay5us();
  32:	00 00       	bra	@r0		
  34:	00 03       	bra	#2		;r3 As==10
  scl_on;
  36:	00 00       	bra	@r0		
  38:	00 00       	bra	@r0		
  delay5us();

  3a:	01 1e       	.word	0x1e01;	????	
  3c:	43 00       	rrcm.a	#1,	#0	;r3 As==00
  3e:	00 00       	bra	@r0		
  sda_off;
  40:	01 5f       	add	r15,	r1	
  42:	00 04       	bra	@r4		
  delay5us();
  44:	01 06       	mova	@r6,	r1	
  46:	00 00       	bra	@r0		
  48:	00 00       	bra	@r0		
  scl_off;
  4a:	02 01       	mova	@r1,	r2	
  4c:	00 00       	bra	@r0		
  delay5us();
  4e:	00 00       	bra	@r0		
}

void i2c_stop(void)
{
  50:	01 23       	jnz	$-508    	;abs 0xfe54
  52:	01 00       	mova	@r0,	r1	
  54:	00 00       	bra	@r0		
  sda_off;
  56:	00 02       	bra	#4		;r2 As==10
  58:	71 02 6e 00 	mova	r2,	110(r1)	;0x006e(r1)
  delay5us();
  5c:	00 00       	bra	@r0		
  scl_on;
  5e:	05 01       	mova	@r1,	r5	
  60:	00 00       	bra	@r0		
  delay5us();
  62:	00 00       	bra	@r0		
  64:	01 28       	jnc	$+4      	;abs 0x68
  sda_on;
  66:	6e 00 00 00 	mova	r0,	&0xe0000
  delay5us();
  6a:	01 06       	mova	@r6,	r1	
}

 char i2c_recv_ack(void)
  6c:	00 00       	bra	@r0		
{
   char i;

  6e:	07 02       	mova	#4,	r7	;r2 As==10
  70:	05 69       	addc	r9,	r5	
  72:	6e 74       	subc.b	@r4,	r14	
  SDA_IN();
  74:	00 08       	bra	@r8		
  76:	01 00       	mova	@r0,	r1	
  delay5us();
  78:	00 00       	bra	@r0		
  7a:	00 01       	bra	@r1		
  scl_on;
  7c:	18 01       	mova	@r1+,	r8	
	...
  delay5us();
  if(sda_test) i=1; else i=0;
  86:	9a 00 00 00 	cmpa	#0x00000,r10	
  delay5us();
  8a:	09 00       	mova	@r0,	r9	
  8c:	00 00       	bra	@r0		
  scl_off;
  8e:	00 01       	bra	@r1		
  90:	18 43       	mov	#1,	r8	;r3 As==01
	...
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  9a:	02 01       	mova	@r1,	r2	
  9c:	00 00       	bra	@r0		
  9e:	00 00       	bra	@r0		
  a0:	01 2b       	jnc	$-508    	;abs 0xfea4
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a2:	01 00       	mova	@r0,	r1	
  a4:	00 00       	bra	@r0		
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  a6:	00 02       	bra	#4		;r2 As==10
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a8:	71 02 be 00 	mova	r2,	190(r1)	;0x00be(r1)
}

void i2c_send_ack( char confirmation)
{
  ac:	00 00       	bra	@r0		
  ae:	05 01       	mova	@r1,	r5	
  b0:	00 00       	bra	@r0		
  SDA_OUT();
  b2:	00 00       	bra	@r0		
  b4:	01 28       	jnc	$+4      	;abs 0xb8
  b6:	6e 00 00 00 	mova	r0,	&0xe0000
  ba:	01 06       	mova	@r6,	r1	
  if(confirmation) sda_on; else sda_off;
  bc:	00 00       	bra	@r0		
  be:	02 01       	mova	@r1,	r2	
  scl_on;
  c0:	00 00       	bra	@r0		
  c2:	00 00       	bra	@r0		
  delay5us();
  c4:	01 38       	jl	$+4      	;abs 0xc8
  c6:	01 00       	mova	@r0,	r1	
  c8:	00 00       	bra	@r0		
  scl_off;
  ca:	00 02       	bra	#4		;r2 As==10
  cc:	71 02 e2 00 	mova	r2,	226(r1)	;0x00e2(r1)
  delay5us();
  d0:	00 00       	bra	@r0		
  d2:	05 01       	mova	@r1,	r5	
  sda_off;
  d4:	00 00       	bra	@r0		
  return i;
}

void i2c_send_ack( char confirmation)
{
  SDA_OUT();
  d6:	00 00       	bra	@r0		
  d8:	01 28       	jnc	$+4      	;abs 0xdc
  da:	6e 00 00 00 	mova	r0,	&0xe0000
  scl_off;
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
  de:	01 06       	mova	@r6,	r1	
  e0:	00 00       	bra	@r0		
  e2:	0a 01       	mova	@r1,	r10	
{
   char mask = 0x80;
   char i;

  e4:	00 00       	bra	@r0		
  e6:	00 00       	bra	@r0		
  e8:	01 42       	mov	r2,	r1	
  ea:	01 43       	clr	r1		
	...
  SDA_OUT();
  for (i=0; i<8; i++)
  {
  f4:	00 00       	bra	@r0		
    if(b & mask) sda_on; else sda_off;
  f6:	00 18       	.word	0x1800;	????	
  f8:	01 00       	mova	@r0,	r1	
    delay5us();
  fa:	00 0b       	bra	@r11		
  fc:	69 00 01 44 	mova	r0,	&0x94401
    scl_on;
 100:	43 00       	rrcm.a	#1,	#0	;r3 As==00
    delay5us();
 102:	00 00       	bra	@r0		
 104:	00 00       	bra	@r0		
 106:	00 00       	bra	@r0		
    scl_off;
 108:	05 01       	mova	@r1,	r5	
 10a:	00 00       	bra	@r0		
 10c:	00 00       	bra	@r0		
void i2c_bwrite( char b)
{
   char mask = 0x80;
   char i;

  SDA_OUT();
 10e:	01 28       	jnc	$+4      	;abs 0x112
    if(b & mask) sda_on; else sda_off;
    delay5us();
    scl_on;
    delay5us();
    scl_off;
    delay5us();
 110:	6e 00 00 00 	mova	r0,	&0xe0000
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
 114:	01 06       	mova	@r6,	r1	
 116:	00 00       	bra	@r0		
 118:	02 01       	mova	@r1,	r2	
 11a:	00 00       	bra	@r0		
 11c:	00 00       	bra	@r0		
 11e:	01 53       	add	#0,	r1	;r3 As==00
    scl_on;
    delay5us();
    scl_off;
    delay5us();
    mask >>= 1;
  }
 120:	01 00       	mova	@r0,	r1	
 122:	00 00       	bra	@r0		
 124:	00 02       	bra	#4		;r2 As==10
 126:	71 02 4b 01 	mova	r2,	331(r1)	;0x014b(r1)
}

 char i2c_bread(void)
 12a:	00 00       	bra	@r0		
{
   char i;
   char bin = 0;

 12c:	09 00       	mova	@r0,	r9	
 12e:	00 00       	bra	@r0		
 130:	00 01       	bra	@r1		
 132:	53 43       	.word	0x4353;	????	Illegal as 2-op instr
  }
}

 char i2c_bread(void)
{
   char i;
 134:	00 00       	bra	@r0		
   char bin = 0;

  SDA_IN();
  for (i=0; i<8; i++)
  {
 136:	00 00       	bra	@r0		
 138:	00 00       	bra	@r0		
    bin <<= 1;
 13a:	00 05       	bra	@r5		
 13c:	01 00       	mova	@r0,	r1	
    scl_on;
 13e:	00 00       	bra	@r0		
 140:	00 01       	bra	@r1		
    delay5us();
 142:	28 6e       	addc	@r14,	r8	
 144:	00 00       	bra	@r0		
 146:	00 01       	bra	@r1		
 148:	06 00       	mova	@r0,	r6	
 14a:	00 08       	bra	@r8		
    if (sda_test) bin += 1;
 14c:	01 00       	mova	@r0,	r1	
 14e:	00 00       	bra	@r0		
    delay5us();
 150:	00 01       	bra	@r1		
 152:	5e 01       	rram	#1,	r14	
	...
 char i2c_bread(void)
{
   char i;
   char bin = 0;

  SDA_IN();
 15c:	9f 01 00 00 	cmpa	#0x10000,r15	
    delay5us();
    scl_off;
    delay5us();
  }

  return bin;
 160:	0c 62       	addc	r2,	r12	
 162:	00 01       	bra	@r1		
 164:	5e 43       	mov.b	#1,	r14	;r3 As==01
//
// ****************************************************************
// ** F U N Ç Õ E S  D E R I V A D A S                           **
// ****************************************************************
//
 char i2c_find_device(void)
 166:	00 00       	bra	@r0		
{
   char status = 0;

 168:	00 00       	bra	@r0		
 16a:	00 00       	bra	@r0		
  i2c_start();
 16c:	00 0d       	bra	@r13		
 16e:	00 00       	bra	@r0		
 170:	00 00       	bra	@r0		
 172:	01 60       	addc	r0,	r1	
  i2c_bwrite(i2c_slave_address);
 174:	43 00       	rrcm.a	#1,	#0	;r3 As==00
 176:	00 00       	bra	@r0		
  status = i2c_recv_ack();
 178:	00 00       	bra	@r0		
 17a:	00 00       	bra	@r0		
 17c:	0b 69       	addc	r9,	r11	
 17e:	00 01       	bra	@r1		
  i2c_stop();

  return status;
 180:	61 43       	mov.b	#2,	r1	;r3 As==10
 182:	00 00       	bra	@r0		
 184:	00 00       	bra	@r0		
}

 char i2c_write_dummy( char b)
 186:	00 00       	bra	@r0		
{
   char status = 0;

 188:	00 0e       	bra	@r14		
 18a:	00 00       	bra	@r0		
 18c:	00 00       	bra	@r0		
 18e:	05 01       	mova	@r1,	r5	
  i2c_start();
 190:	00 00       	bra	@r0		
 192:	00 00       	bra	@r0		
 194:	01 28       	jnc	$+4      	;abs 0x198
  i2c_bwrite(b);
 196:	6e 00 00 00 	mova	r0,	&0xe0000
  status = i2c_recv_ack();
 19a:	01 06       	mova	@r6,	r1	
 19c:	00 00       	bra	@r0		
 19e:	00 0a       	bra	@r10		
 1a0:	01 00       	mova	@r0,	r1	
  i2c_stop();

  return status;
 1a2:	00 00       	bra	@r0		
 1a4:	00 01       	bra	@r1		
 1a6:	70 01 43 00 	mova	r1,	0x0043	;PC rel. 0x001eb
	...
}

 char i2c_write_byte( char reg,  char dat)
{
   char status = 0;

 1b2:	00 00       	bra	@r0		
 1b4:	ea 01       	adda	r1,	r10	
  i2c_start();
 1b6:	00 00       	bra	@r0		
 1b8:	0b 69       	addc	r9,	r11	
 1ba:	00 01       	bra	@r1		
 1bc:	72 43       	mov.b	#-1,	r2	;r3 As==11
  i2c_bwrite(i2c_slave_address);
 1be:	00 00       	bra	@r0		
 1c0:	00 00       	bra	@r0		
 1c2:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 1c4:	00 0b       	bra	@r11		
 1c6:	62 69       	addc.b	@r9,	r2	
 1c8:	6e 00 01 73 	mova	r0,	&0xe7301
  i2c_bwrite(reg);
 1cc:	43 00       	rrcm.a	#1,	#0	;r3 As==00
 1ce:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 1d0:	00 00       	bra	@r0		
 1d2:	00 00       	bra	@r0		
 1d4:	0f 00       	mova	@r0,	r15	
  i2c_bwrite(dat);
 1d6:	00 00       	bra	@r0		
 1d8:	00 05       	bra	@r5		
 1da:	01 00       	mova	@r0,	r1	
  status += i2c_recv_ack();
 1dc:	00 00       	bra	@r0		
 1de:	00 01       	bra	@r1		
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 1e0:	28 6e       	addc	@r14,	r8	
 1e2:	00 00       	bra	@r0		
  status += i2c_recv_ack();
  i2c_bwrite(dat);
  status += i2c_recv_ack();
  i2c_stop();

  return status;
 1e4:	00 01       	bra	@r1		
 1e6:	06 00       	mova	@r0,	r6	
 1e8:	00 00       	bra	@r0		
 1ea:	0a 01       	mova	@r1,	r10	
 1ec:	00 00       	bra	@r0		
 1ee:	00 00       	bra	@r0		
}

char i2c_write_multiples( char reg,  char dat[],  int len)
 1f0:	01 89       	sub	r9,	r1	
 1f2:	01 43       	clr	r1		
	...
 1fc:	00 00       	bra	@r0		
{
  int i = 0, status = 0;

 1fe:	00 13       	reti			
 200:	02 00       	mova	@r0,	r2	
  i2c_start();
 202:	00 0d       	bra	@r13		
 204:	00 00       	bra	@r0		
 206:	00 00       	bra	@r0		
 208:	01 8b       	sub	r11,	r1	
  i2c_bwrite(i2c_slave_address);
 20a:	43 00       	rrcm.a	#1,	#0	;r3 As==00
 20c:	00 00       	bra	@r0		
 20e:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 210:	00 00       	bra	@r0		
 212:	00 0a       	bra	@r10		
 214:	01 00       	mova	@r0,	r1	
  i2c_bwrite(reg);
 216:	00 00       	bra	@r0		
 218:	00 01       	bra	@r1		
 21a:	95 01 43 00 	cmpa	#0x10043,r5	
	...
  status += i2c_recv_ack();
 226:	00 00       	bra	@r0		
 228:	49 02       	rlam.a	#1,	r9	
 22a:	00 00       	bra	@r0		
 22c:	0c 62       	addc	r2,	r12	
  while((!status) && (i<len))
  {
 22e:	00 01       	bra	@r1		

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 230:	95 43 00 00 	mov	#1,	0(r5)	;r3 As==01, 0x0000(r5)
  status += i2c_recv_ack();
  i2c_stop();

  return status;
}

 234:	00 00       	bra	@r0		
 236:	00 00       	bra	@r0		
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  while((!status) && (i<len))
  {
 238:	00 0d       	bra	@r13		
 23a:	00 00       	bra	@r0		
 23c:	00 00       	bra	@r0		
    i2c_bwrite(dat[i++]);
 23e:	01 97       	cmp	r7,	r1	
 240:	43 00       	rrcm.a	#1,	#0	;r3 As==00
 242:	00 00       	bra	@r0		

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 244:	00 00       	bra	@r0		
 246:	00 00       	bra	@r0		
  while((!status) && (i<len))
  {
    i2c_bwrite(dat[i++]);
    status += i2c_recv_ack();
  }
 248:	00 0a       	bra	@r10		
 24a:	01 00       	mova	@r0,	r1	
  i2c_stop();


  return status;
 24c:	00 00       	bra	@r0		
 24e:	00 01       	bra	@r1		
 250:	a1 01 43 00 	adda	#0x10043,r1	
	...
}

 char i2c_write16_byte( int reg,  char dat)
 25c:	00 00       	bra	@r0		
 25e:	90 02 00 00 	cmpa	#0x20000,r0	
 262:	0c 72       	subc	r2,	r12	
 264:	65 67       	addc.b	@r7,	r5	
 266:	00 01       	bra	@r1		
 268:	a1 43 00 00 	mov	#2,	0(r1)	;r3 As==10, 0x0000(r1)
{
  char status = 0;

 26c:	00 00       	bra	@r0		
  i2c_start();
 26e:	00 00       	bra	@r0		
 270:	00 0c       	bra	@r12		
 272:	64 61       	addc.b	@r1,	r4	
 274:	74 00 01 a1 	mova	r0,	-24319(r4);0xa101(r4)
  i2c_bwrite(i2c_slave_address);
 278:	43 00       	rrcm.a	#1,	#0	;r3 As==00
 27a:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 27c:	00 00       	bra	@r0		
 27e:	00 00       	bra	@r0		
 280:	0d 00       	mova	@r0,	r13	
 282:	00 00       	bra	@r0		
 284:	00 01       	bra	@r1		
 286:	a3 43       	mov	#2,	#1	;r3 As==10, r3 As==01
	...
  i2c_bwrite(reg/256);
 290:	0a 01       	mova	@r1,	r10	
 292:	00 00       	bra	@r0		
 294:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 296:	01 b1       	bit	r1,	r1	
 298:	01 43       	clr	r1		
	...
 2a2:	00 00       	bra	@r0		
 2a4:	00 f3       	and	#0,	r0	;r3 As==00
 2a6:	02 00       	mova	@r0,	r2	
 2a8:	00 0c       	bra	@r12		
 2aa:	72 65       	addc.b	@r5+,	r2	
 2ac:	67 00 01 b1 	mova	r0,	&0x7b101
  i2c_bwrite(reg%256);
 2b0:	43 00       	rrcm.a	#1,	#0	;r3 As==00
 2b2:	00 00       	bra	@r0		
 2b4:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 2b6:	00 00       	bra	@r0		
 2b8:	0c 64       	addc	r4,	r12	
 2ba:	61 74       	subc.b	@r4,	r1	
  i2c_bwrite(dat);
 2bc:	00 01       	bra	@r1		
 2be:	b1 f3 02 00 	and	#-1,	2(r1)	;r3 As==11, 0x0002(r1)
  status += i2c_recv_ack();
 2c2:	00 00       	bra	@r0		
 2c4:	00 00       	bra	@r0		
  char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 2c6:	00 0c       	bra	@r12		
 2c8:	6c 65       	addc.b	@r5,	r12	
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
 2ca:	6e 00 01 b1 	mova	r0,	&0xeb101
  status += i2c_recv_ack();
  i2c_bwrite(dat);
  status += i2c_recv_ack();
  i2c_stop();

  return status;
 2ce:	6e 00 00 00 	mova	r0,	&0xe0000
 2d2:	00 00       	bra	@r0		
 2d4:	00 00       	bra	@r0		
 2d6:	0b 69       	addc	r9,	r11	
 2d8:	00 01       	bra	@r1		
 2da:	b3 6e       	addc	@r14+,	#1	;r3 As==01
}

 char i2c_write16_multiples( int reg,  char dat[], int len)
 2dc:	00 00       	bra	@r0		
 2de:	00 00       	bra	@r0		
 2e0:	00 00       	bra	@r0		
 2e2:	00 0d       	bra	@r13		
 2e4:	00 00       	bra	@r0		
 2e6:	00 00       	bra	@r0		
 2e8:	01 b3       	bit	#0,	r1	;r3 As==00
{
   int i = 0, status = 0;

 2ea:	6e 00 00 00 	mova	r0,	&0xe0000
  i2c_start();
 2ee:	00 00       	bra	@r0		
 2f0:	00 00       	bra	@r0		
 2f2:	00 10       	rrc	r0		
 2f4:	02 43       	clr	r2		
  i2c_bwrite(i2c_slave_address);
 2f6:	00 00       	bra	@r0		
 2f8:	00 0a       	bra	@r10		
 2fa:	01 00       	mova	@r0,	r1	
  status += i2c_recv_ack();
 2fc:	00 00       	bra	@r0		
 2fe:	00 01       	bra	@r1		
 300:	c5 01       	mova	r1,	r5	
 302:	43 00       	rrcm.a	#1,	#0	;r3 As==00
	...
 30c:	00 00       	bra	@r0		
 30e:	40 03       	rrum.a	#1,	r0	
  i2c_bwrite(reg/256);
 310:	00 00       	bra	@r0		
 312:	0c 72       	subc	r2,	r12	
 314:	65 67       	addc.b	@r7,	r5	
 316:	00 01       	bra	@r1		
 char i2c_write16_multiples( int reg,  char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 318:	c5 6e 00 00 	addc.b	r14,	0(r5)	;0x0000(r5)
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 31c:	00 00       	bra	@r0		
 31e:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 320:	00 0c       	bra	@r12		
 322:	64 61       	addc.b	@r1,	r4	
 324:	74 00 01 c5 	mova	r0,	-15103(r4);0xc501(r4)
 328:	43 00       	rrcm.a	#1,	#0	;r3 As==00
 32a:	00 00       	bra	@r0		
 32c:	00 00       	bra	@r0		
 32e:	00 00       	bra	@r0		
 330:	0d 00       	mova	@r0,	r13	
 332:	00 00       	bra	@r0		
 334:	00 01       	bra	@r1		
 336:	c7 43 00 00 	mov.b	#0,	0(r7)	;r3 As==00, 0x0000(r7)
  i2c_bwrite(reg%256);
 33a:	00 00       	bra	@r0		
 33c:	00 00       	bra	@r0		
 33e:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 340:	0a 01       	mova	@r1,	r10	
 342:	00 00       	bra	@r0		
 344:	00 00       	bra	@r0		
 346:	01 d7       	bis	r7,	r1	
 348:	01 43       	clr	r1		
	...
  status += i2c_recv_ack();
  i2c_stop();

  return status;
}

 352:	00 00       	bra	@r0		
  i2c_bwrite(reg/256);
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
  while((!status) && (i<len))
  {
 354:	00 a3       	dadc	r0		
 356:	03 00       	.word	0x0003;	????	Illegal as address instr
 358:	00 0c       	bra	@r12		
    i2c_bwrite(dat[i++]);
 35a:	72 65       	addc.b	@r5+,	r2	
 35c:	67 00 01 d7 	mova	r0,	&0x7d701
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
 360:	6e 00 00 00 	mova	r0,	&0xe0000
  while((!status) && (i<len))
  {
    i2c_bwrite(dat[i++]);
    status += i2c_recv_ack();
  }
 364:	00 00       	bra	@r0		
 366:	00 00       	bra	@r0		
  i2c_stop();


  return status;
 368:	0c 64       	addc	r4,	r12	
 36a:	61 74       	subc.b	@r4,	r1	
 36c:	00 01       	bra	@r1		
 36e:	d7 f3 02 00 	and.b	#1,	2(r7)	;r3 As==01, 0x0002(r7)
 372:	00 00       	bra	@r0		
}

 char i2c_read_byte( char reg,  char *dat)
 374:	00 00       	bra	@r0		
 376:	00 0c       	bra	@r12		
 378:	6c 65       	addc.b	@r5,	r12	
 37a:	6e 00 01 d7 	mova	r0,	&0xed701
 37e:	6e 00 00 00 	mova	r0,	&0xe0000
{
   char status = 0;

 382:	00 00       	bra	@r0		
  i2c_start();
 384:	00 00       	bra	@r0		
 386:	0b 69       	addc	r9,	r11	
 388:	00 01       	bra	@r1		
 38a:	d9 6e 00 00 	addc.b	0(r14),	0(r9)	;0x0000(r14), 0x0000(r9)
 38e:	00 00 
  i2c_bwrite(i2c_slave_address);
 390:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 392:	00 0d       	bra	@r13		
 394:	00 00       	bra	@r0		
 396:	00 00       	bra	@r0		
  i2c_bwrite(reg);
 398:	01 d9       	bis	r9,	r1	
 39a:	6e 00 00 00 	mova	r0,	&0xe0000
  status += i2c_recv_ack();
 39e:	00 00       	bra	@r0		
 3a0:	00 00       	bra	@r0		
  i2c_start();
 3a2:	00 0a       	bra	@r10		
 3a4:	01 00       	mova	@r0,	r1	
 3a6:	00 00       	bra	@r0		
 3a8:	00 01       	bra	@r1		
 3aa:	ed 01       	adda	r1,	r13	
  i2c_bwrite(i2c_slave_address+1);
 3ac:	43 00       	rrcm.a	#1,	#0	;r3 As==00
	...
  status += i2c_recv_ack();
 3b6:	00 00       	bra	@r0		
 3b8:	ea 03       	incda	r10		
  *dat = i2c_bread();
 3ba:	00 00       	bra	@r0		
 3bc:	0c 72       	subc	r2,	r12	
 3be:	65 67       	addc.b	@r7,	r5	
  i2c_send_ack(NACK);
 3c0:	00 01       	bra	@r1		
 3c2:	ed 43 00 00 	mov.b	#2,	0(r13)	;r3 As==10, 0x0000(r13)
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 3c6:	00 00       	bra	@r0		
  status += i2c_recv_ack();
  *dat = i2c_bread();
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
 3c8:	00 00       	bra	@r0		
 3ca:	00 0c       	bra	@r12		
 3cc:	64 61       	addc.b	@r1,	r4	
 3ce:	74 00 01 ed 	mova	r0,	-4863(r4);0xed01(r4)
 3d2:	f3 02       	.word	0x02f3;	????	Illegal as address instr
 3d4:	00 00       	bra	@r0		
}

 char i2c_read_multiples( char reg,  char dat[], int len)
 3d6:	00 00       	bra	@r0		
 3d8:	00 00       	bra	@r0		
 3da:	0d 00       	mova	@r0,	r13	
 3dc:	00 00       	bra	@r0		
 3de:	00 01       	bra	@r1		
 3e0:	ef 43 00 00 	mov.b	#2,	0(r15)	;r3 As==10, 0x0000(r15)
{
   int i = 0, status = 0;

 3e4:	00 00       	bra	@r0		
 3e6:	00 00       	bra	@r0		
  i2c_start();
 3e8:	00 00       	bra	@r0		
 3ea:	11 01       	mova	@r1+,	r1	
 3ec:	00 00       	bra	@r0		
 3ee:	00 00       	bra	@r0		
  i2c_bwrite(i2c_slave_address);
 3f0:	01 00       	mova	@r0,	r1	
 3f2:	01 01       	mova	@r1,	r1	
 3f4:	43 00       	rrcm.a	#1,	#0	;r3 As==00
	...
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 3fe:	00 00       	bra	@r0		
 400:	53 04       	rrcm	#2,	#0	;r3 As==00
 402:	00 00       	bra	@r0		
 char i2c_read_multiples( char reg,  char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 404:	12 72 65 67 	subc	&0x6765,r2	
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 408:	00 01       	bra	@r1		
 40a:	00 01       	bra	@r1		
  i2c_start();
 40c:	43 00       	rrcm.a	#1,	#0	;r3 As==00
 40e:	00 00       	bra	@r0		
 410:	00 00       	bra	@r0		
 412:	00 00       	bra	@r0		
 414:	12 64 61 74 	addc	29793(r4),r2	;0x7461(r4)
  i2c_bwrite(i2c_slave_address+1);
 418:	00 01       	bra	@r1		
 41a:	00 01       	bra	@r1		
 41c:	f3 02       	.word	0x02f3;	????	Illegal as address instr
  status += i2c_recv_ack();

 41e:	00 00       	bra	@r0		
 420:	00 00       	bra	@r0		
 422:	00 00       	bra	@r0		
 424:	12 6c 65 6e 	addc	28261(r12),r2	;0x6e65(r12)
  while((!status) && (i<len-1))
  {  
 428:	00 01       	bra	@r1		
 42a:	00 01       	bra	@r1		
 42c:	6e 00 00 00 	mova	r0,	&0xe0000
    dat[i] = i2c_bread();
 430:	00 00       	bra	@r0		
 432:	00 00       	bra	@r0		
    i2c_send_ack(ACK);
 434:	13 69       	.word	0x6913;	????	Illegal as 2-op instr
 436:	00 01       	bra	@r1		
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 438:	02 01       	mova	@r1,	r2	
 43a:	6e 00 00 00 	mova	r0,	&0xe0000
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
}

 43e:	00 00       	bra	@r0		
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 440:	00 00       	bra	@r0		
 442:	14 00       	mova	#0x00000,r4	
    dat[i] = i2c_bread();
 444:	00 00       	bra	@r0		
 446:	00 01       	bra	@r1		
 448:	02 01       	mova	@r1,	r2	
    i2c_send_ack(ACK);
 44a:	6e 00 00 00 	mova	r0,	&0xe0000
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 44e:	00 00       	bra	@r0		
  while((!status) && (i<len-1))
  {  
    dat[i] = i2c_bread();
    i2c_send_ack(ACK);
    i++;
  }
 450:	00 00       	bra	@r0		
 452:	00 11       	rra	r0		
 454:	01 00       	mova	@r0,	r1	
 456:	00 00       	bra	@r0		
 458:	00 01       	bra	@r1		
  dat[i] = i2c_bread();
 45a:	1a 01       	mova	@r1+,	r10	
 45c:	01 43       	clr	r1		
	...
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
 466:	00 00       	bra	@r0		
 468:	00 9e       	cmp	r14,	r0	
 46a:	04 00       	mova	@r0,	r4	
 46c:	00 12       	push	r0		
 46e:	72 65       	addc.b	@r5+,	r2	
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 470:	67 00 01 1a 	mova	r0,	&0x71a01
 474:	01 6e       	addc	r14,	r1	
 476:	00 00       	bra	@r0		
  i2c_stop();

  return status;
}

 char i2c_read16_byte( int reg,  char *dat)
 478:	00 00       	bra	@r0		
 47a:	00 00       	bra	@r0		
 47c:	00 12       	push	r0		
 47e:	64 61       	addc.b	@r1,	r4	
 480:	74 00 01 1a 	mova	r0,	6657(r4);0x1a01(r4)
 484:	01 f3       	and	#0,	r1	;r3 As==00
{
   char status = 0;

 486:	02 00       	mova	@r0,	r2	
 488:	00 00       	bra	@r0		
  i2c_start();
 48a:	00 00       	bra	@r0		
 48c:	00 14       	pushm.a	#1,	r0	
 48e:	00 00       	bra	@r0		
 490:	00 00       	bra	@r0		
  i2c_bwrite(i2c_slave_address);
 492:	01 1c 01 43 	.rpt	#1
				clrx	r1		
	...
  status += i2c_recv_ack();
 49e:	11 01       	mova	@r1+,	r1	
 4a0:	00 00       	bra	@r0		
 4a2:	00 00       	bra	@r0		
 4a4:	01 2f       	jc	$-508    	;abs 0x2a8
 4a6:	01 01       	mova	@r1,	r1	
 4a8:	43 00       	rrcm.a	#1,	#0	;r3 As==00
	...
  i2c_bwrite(reg/256);
  status += i2c_recv_ack();
 4b2:	00 00       	bra	@r0		
 4b4:	07 05       	mova	@r5,	r7	
 4b6:	00 00       	bra	@r0		
 4b8:	12 72 65 67 	subc	&0x6765,r2	
 4bc:	00 01       	bra	@r1		
 4be:	2f 01 6e 00 	mova	&0x1006e,r15	
 4c2:	00 00       	bra	@r0		
 4c4:	00 00       	bra	@r0		
 4c6:	00 00       	bra	@r0		
 4c8:	12 64 61 74 	addc	29793(r4),r2	;0x7461(r4)
  i2c_bwrite(reg%256);
 4cc:	00 01       	bra	@r1		
 4ce:	2f 01 f3 02 	mova	&0x102f3,r15	
  status += i2c_recv_ack();
 4d2:	00 00       	bra	@r0		
 4d4:	00 00       	bra	@r0		
  i2c_start();
 4d6:	00 00       	bra	@r0		
 4d8:	12 6c 65 6e 	addc	28261(r12),r2	;0x6e65(r12)
 4dc:	00 01       	bra	@r1		
 4de:	2f 01 6e 00 	mova	&0x1006e,r15	
  i2c_bwrite(i2c_slave_address+1);
 4e2:	00 00       	bra	@r0		
 4e4:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 4e6:	00 00       	bra	@r0		
 4e8:	13 69       	.word	0x6913;	????	Illegal as 2-op instr
 4ea:	00 01       	bra	@r1		
 4ec:	31 01 6e 00 	mova	110(r1),r1	;0x006e(r1)
  *dat = i2c_bread();
 4f0:	00 00       	bra	@r0		
 4f2:	00 00       	bra	@r0		
  i2c_send_ack(NACK);
 4f4:	00 00       	bra	@r0		
 4f6:	14 00       	mova	#0x00000,r4	
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 4f8:	00 00       	bra	@r0		
 4fa:	00 01       	bra	@r1		
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
 4fc:	31 01 6e 00 	mova	110(r1),r1	;0x006e(r1)
  status += i2c_recv_ack();
  *dat = i2c_bread();
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
 500:	00 00       	bra	@r0		
 502:	00 00       	bra	@r0		
 504:	00 00       	bra	@r0		
 506:	00 15       	pushm	#1,	r0	
 508:	00 00       	bra	@r0		
 50a:	00 00       	bra	@r0		
 50c:	02 af       	dadd	r15,	r2	
}

 char i2c_read16_multiples( int reg, char dat[], int len)
 50e:	03 00       	.word	0x0003;	????	Illegal as address instr
 510:	00 00       	bra	@r0		
 512:	00 19       	.word	0x1900;	????	
 514:	05 00       	mova	@r0,	r5	
 516:	00 01       	bra	@r1		
 518:	01 16       	popm.a	#1,	r1	
 51a:	1e 05       	mova	@r5+,	r14	
{
   int i = 0, status = 0;

 51c:	00 00       	bra	@r0		
 51e:	17 23       	jnz	$-464    	;abs 0x34e
  i2c_start();
 520:	05 00       	mova	@r0,	r5	
 522:	00 04       	bra	@r4		
 524:	01 08       	mova	@r8,	r1	
 526:	00 00       	bra	@r0		
  i2c_bwrite(i2c_slave_address);
 528:	00 00       	bra	@r0		
 52a:	15 00       	mova	#0x00000,r5	
 52c:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 52e:	00 02       	bra	#4		;r2 As==10
 530:	b1 03 00 00 	suba	#0x30000,r1	
 534:	00 00       	bra	@r0		
 536:	1e 05       	mova	@r5+,	r14	
 538:	00 00       	bra	@r0		
 53a:	01 01       	mova	@r1,	r1	
 53c:	15 00       	mova	#0x00000,r5	
 53e:	00 00       	bra	@r0		
 540:	00 02       	bra	#4		;r2 As==10
  i2c_bwrite(reg/256);
 542:	b3 03       	.word	0x03b3;	????	Illegal as address instr
 544:	00 00       	bra	@r0		
 546:	00 00       	bra	@r0		
 548:	1e 05       	mova	@r5+,	r14	
 char i2c_read16_multiples( int reg, char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 54a:	00 00       	bra	@r0		
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 54c:	01 01       	mova	@r1,	r1	
  status += i2c_recv_ack();
 54e:	18 00       	mova	#0x00000,r8	
 550:	00 00       	bra	@r0		
 552:	00 01       	bra	@r1		
 554:	11 43       	mov	#1,	r1	;r3 As==01
 556:	00 00       	bra	@r0		
 558:	00 01       	bra	@r1		
 55a:	01 15       	pushm	#1,	r1	
 55c:	00 00       	bra	@r0		
 55e:	00 00       	bra	@r0		
 560:	02 af       	dadd	r15,	r2	
 562:	03 00       	.word	0x0003;	????	Illegal as address instr
 564:	00 00       	bra	@r0		
  i2c_bwrite(reg%256);
 566:	00 19       	.word	0x1900;	????	
 568:	05 00       	mova	@r0,	r5	
 56a:	00 01       	bra	@r1		
 56c:	01 15       	pushm	#1,	r1	
  status += i2c_recv_ack();
 56e:	00 00       	bra	@r0		
 570:	00 00       	bra	@r0		
  i2c_start();
 572:	02 b1       	bit	r1,	r2	
 574:	03 00       	.word	0x0003;	????	Illegal as address instr
 576:	00 00       	bra	@r0		
 578:	00 1e       	.word	0x1e00;	????	
 57a:	05 00       	mova	@r0,	r5	
  i2c_bwrite(i2c_slave_address+1);
 57c:	00 01       	bra	@r1		
 57e:	01 15       	pushm	#1,	r1	
 580:	00 00       	bra	@r0		
 582:	00 00       	bra	@r0		
  status += i2c_recv_ack();

 584:	02 b3       	bit	#0,	r2	;r3 As==00
 586:	03 00       	.word	0x0003;	????	Illegal as address instr
 588:	00 00       	bra	@r0		
 58a:	00 1e       	.word	0x1e00;	????	
  while((!status) && (i<len-1))
  {  
 58c:	05 00       	mova	@r0,	r5	
 58e:	00 01       	bra	@r1		
 590:	01 19       	.word	0x1901;	????	
 592:	00 00       	bra	@r0		
    dat[i] = i2c_bread();
 594:	00 00       	bra	@r0		
 596:	01 11       	rra	r1		
 598:	43 00       	rrcm.a	#1,	#0	;r3 As==00
    i2c_send_ack(ACK);
 59a:	00 00       	bra	@r0		
 59c:	01 03       	mova	#2,	r1	;r3 As==10
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 59e:	03 00       	.word	0x0003;	????	Illegal as address instr
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
  i2c_init();
  i2c_slave_address = slave_addr;
}

void i2c_change_address( char slave_addr)
{
   0:	31 06 00 00 	mova	0(r6),	r1	;0x0000(r6)
  i2c_slave_address = slave_addr;
   4:	02 00       	mova	@r0,	r2	
}

void i2c_init(void)
{
   6:	6b 00 00 00 	mova	r0,	&0xb0000
   a:	01 01       	mova	@r1,	r1	
  SDA_OUT();
   c:	f6 f5 0a 00 	and.b	@r5+,	10(r6)	;0x000a(r6)
  sda_on;
  10:	01 01       	mova	@r1,	r1	
  12:	01 01       	mova	@r1,	r1	
  scl_on;
  14:	00 00       	bra	@r0		
  16:	00 01       	bra	@r1		
  delay5us();
  18:	63 3a       	jl	$-824    	;abs 0xfce0
//
// ****************************************************************
// ** P R I M I T I V A S                                        **
// ****************************************************************
//
void i2c_config( char slave_addr)
  1a:	5c 6d 73 70 	addc.b	28787(r13),r12	;0x7073(r13)
{
  1e:	67 63       	addc.b	#2,	r7	;r3 As==10
  20:	63 5c       	.word	0x5c63;	????	Illegal as 2-op instr
  i2c_init();
  22:	62 69       	addc.b	@r9,	r2	
  24:	6e 5c       	add.b	@r12,	r14	
  i2c_slave_address = slave_addr;
  26:	2e 2e       	jc	$-930    	;abs 0xfc84
  28:	2f 6c       	addc	@r12,	r15	
  scl_on;
  delay5us();
}

void i2c_start(void)
{
  2a:	69 62       	addc.b	#4,	r9	;r2 As==10
  2c:	2f 67       	addc	@r7,	r15	
  sda_on;
  2e:	63 63       	.word	0x6363;	????	Illegal as 2-op instr
  30:	2f 6d       	addc	@r13,	r15	
  delay5us();
  32:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
  34:	34 33       	jn	$-406    	;abs 0xfe9e
  scl_on;
  36:	30 2f       	jc	$-414    	;abs 0xfe98
  38:	34 2e       	jc	$-918    	;abs 0xfca2
  delay5us();

  3a:	35 2e       	jc	$-916    	;abs 0xfca6
  3c:	33 2f       	jc	$-408    	;abs 0xfea4
  3e:	2e 2e       	jc	$-930    	;abs 0xfc9c
  sda_off;
  40:	2f 2e       	jc	$-928    	;abs 0xfca0
  42:	2e 2f       	jc	$-418    	;abs 0xfea0
  delay5us();
  44:	2e 2e       	jc	$-930    	;abs 0xfca2
  46:	2f 2e       	jc	$-928    	;abs 0xfca6
  48:	2e 2f       	jc	$-418    	;abs 0xfea6
  scl_off;
  4a:	6d 73       	subc.b	#2,	r13	;r3 As==10
  4c:	70 34       	jge	$+226    	;abs 0x12e
  delay5us();
  4e:	33 30       	jn	$+104    	;abs 0xb6
}

void i2c_stop(void)
{
  50:	2f 69       	addc	@r9,	r15	
  52:	6e 63       	addc.b	#2,	r14	;r3 As==10
  54:	6c 75       	subc.b	@r5,	r12	
  sda_off;
  56:	64 65       	addc.b	@r5,	r4	
  58:	00 00       	bra	@r0		
  delay5us();
  5a:	69 32       	jn	$-812    	;abs 0xfd2e
  5c:	63 2e       	jc	$-824    	;abs 0xfd24
  scl_on;
  5e:	63 00 00 00 	mova	r0,	&0x30000
  delay5us();
  62:	00 6d       	addc	r13,	r0	
  64:	73 70       	.word	0x7073;	????	Illegal as 2-op instr
  sda_on;
  66:	34 33       	jn	$-406    	;abs 0xfed0
  68:	30 66       	addc	@r6+,	r0	
  delay5us();
  6a:	32 36       	jge	$-922    	;abs 0xfcd0
}

 char i2c_recv_ack(void)
  6c:	31 38       	jl	$+100    	;abs 0xd0
{
   char i;

  6e:	2e 68       	addc	@r8,	r14	
  70:	00 01       	bra	@r1		
  72:	00 00       	bra	@r0		
  SDA_IN();
  74:	00 00       	bra	@r0		
  76:	03 02       	.word	0x0203;	????	Illegal as address instr
  delay5us();
  78:	00 00       	bra	@r0		
  7a:	32 00 03 02 	mova	0x0203,	r2	;PC rel. 0x0027f
  scl_on;
  7e:	00 00       	bra	@r0		
  delay5us();
  80:	15 00       	mova	#0x00000,r5	
  82:	03 02       	.word	0x0203;	????	Illegal as address instr
  if(sda_test) i=1; else i=0;
  84:	00 00       	bra	@r0		
  86:	15 00       	mova	#0x00000,r5	
  delay5us();
  88:	03 02       	.word	0x0203;	????	Illegal as address instr
  8a:	00 00       	bra	@r0		
  8c:	17 00       	mova	#0x00000,r7	
  scl_off;
  8e:	03 02       	.word	0x0203;	????	Illegal as address instr
  90:	00 00       	bra	@r0		
  delay5us();
  92:	15 00       	mova	#0x00000,r5	
  94:	03 02       	.word	0x0203;	????	Illegal as address instr
  96:	00 00       	bra	@r0		
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  98:	15 00       	mova	#0x00000,r5	
  9a:	03 02       	.word	0x0203;	????	Illegal as address instr
  9c:	00 00       	bra	@r0		
  9e:	15 00       	mova	#0x00000,r5	
  a0:	03 02       	.word	0x0203;	????	Illegal as address instr
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a2:	00 00       	bra	@r0		
  a4:	15 00       	mova	#0x00000,r5	
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  a6:	03 02       	.word	0x0203;	????	Illegal as address instr
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a8:	00 00       	bra	@r0		
  aa:	15 00       	mova	#0x00000,r5	
}

void i2c_send_ack( char confirmation)
{
  ac:	03 02       	.word	0x0203;	????	Illegal as address instr
  ae:	00 00       	bra	@r0		
  b0:	03 70       	.word	0x7003;	????	Illegal as 2-op instr
  SDA_OUT();
  b2:	01 00       	mova	@r0,	r1	
  b4:	03 02       	.word	0x0203;	????	Illegal as address instr
  b6:	00 00       	bra	@r0		
  b8:	15 00       	mova	#0x00000,r5	
  ba:	03 02       	.word	0x0203;	????	Illegal as address instr
  if(confirmation) sda_on; else sda_off;
  bc:	00 00       	bra	@r0		
  be:	15 00       	mova	#0x00000,r5	
  scl_on;
  c0:	03 02       	.word	0x0203;	????	Illegal as address instr
  c2:	00 00       	bra	@r0		
  delay5us();
  c4:	15 00       	mova	#0x00000,r5	
  c6:	03 02       	.word	0x0203;	????	Illegal as address instr
  c8:	00 00       	bra	@r0		
  scl_off;
  ca:	24 00 03 02 	mova	&0x00203,r4	
  delay5us();
  ce:	00 00       	bra	@r0		
  d0:	15 00       	mova	#0x00000,r5	
  d2:	03 02       	.word	0x0203;	????	Illegal as address instr
  sda_off;
  d4:	00 00       	bra	@r0		
  return i;
}

void i2c_send_ack( char confirmation)
{
  SDA_OUT();
  d6:	15 00       	mova	#0x00000,r5	
  d8:	03 02       	.word	0x0203;	????	Illegal as address instr
  da:	00 00       	bra	@r0		
  scl_off;
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
  dc:	15 00       	mova	#0x00000,r5	
  de:	03 02       	.word	0x0203;	????	Illegal as address instr
  e0:	00 00       	bra	@r0		
  e2:	15 00       	mova	#0x00000,r5	
{
   char mask = 0x80;
   char i;

  e4:	03 02       	.word	0x0203;	????	Illegal as address instr
  e6:	00 00       	bra	@r0		
  e8:	16 00       	mova	#0x00000,r6	
  ea:	03 02       	.word	0x0203;	????	Illegal as address instr
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
{
  ec:	00 00       	bra	@r0		
  ee:	15 00       	mova	#0x00000,r5	
  f0:	03 02       	.word	0x0203;	????	Illegal as address instr
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
  f2:	00 00       	bra	@r0		
  f4:	15 00       	mova	#0x00000,r5	
    if(b & mask) sda_on; else sda_off;
  f6:	03 02       	.word	0x0203;	????	Illegal as address instr
  f8:	00 00       	bra	@r0		
    delay5us();
  fa:	15 00       	mova	#0x00000,r5	
  fc:	03 02       	.word	0x0203;	????	Illegal as address instr
    scl_on;
  fe:	00 00       	bra	@r0		
 100:	15 00       	mova	#0x00000,r5	
    delay5us();
 102:	03 02       	.word	0x0203;	????	Illegal as address instr
 104:	00 00       	bra	@r0		
 106:	17 00       	mova	#0x00000,r7	
    scl_off;
 108:	03 02       	.word	0x0203;	????	Illegal as address instr
 10a:	00 00       	bra	@r0		
 10c:	15 00       	mova	#0x00000,r5	
void i2c_bwrite( char b)
{
   char mask = 0x80;
   char i;

  SDA_OUT();
 10e:	03 02       	.word	0x0203;	????	Illegal as address instr
    if(b & mask) sda_on; else sda_off;
    delay5us();
    scl_on;
    delay5us();
    scl_off;
    delay5us();
 110:	00 00       	bra	@r0		
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
 112:	15 00       	mova	#0x00000,r5	
 114:	03 02       	.word	0x0203;	????	Illegal as address instr
 116:	00 00       	bra	@r0		
 118:	15 00       	mova	#0x00000,r5	
 11a:	03 02       	.word	0x0203;	????	Illegal as address instr
 11c:	00 00       	bra	@r0		
 11e:	15 00       	mova	#0x00000,r5	
    scl_on;
    delay5us();
    scl_off;
    delay5us();
    mask >>= 1;
  }
 120:	03 02       	.word	0x0203;	????	Illegal as address instr
 122:	00 00       	bra	@r0		
 124:	15 00       	mova	#0x00000,r5	
 126:	03 02       	.word	0x0203;	????	Illegal as address instr
}

 char i2c_bread(void)
 128:	00 00       	bra	@r0		
 12a:	15 00       	mova	#0x00000,r5	
{
   char i;
   char bin = 0;

 12c:	03 02       	.word	0x0203;	????	Illegal as address instr
 12e:	00 00       	bra	@r0		
 130:	15 00       	mova	#0x00000,r5	
 132:	03 02       	.word	0x0203;	????	Illegal as address instr
  }
}

 char i2c_bread(void)
{
   char i;
 134:	00 00       	bra	@r0		
   char bin = 0;

  SDA_IN();
  for (i=0; i<8; i++)
  {
 136:	17 00       	mova	#0x00000,r7	
 138:	03 02       	.word	0x0203;	????	Illegal as address instr
    bin <<= 1;
 13a:	00 00       	bra	@r0		
 13c:	17 00       	mova	#0x00000,r7	
    scl_on;
 13e:	03 02       	.word	0x0203;	????	Illegal as address instr
 140:	00 00       	bra	@r0		
    delay5us();
 142:	15 00       	mova	#0x00000,r5	
 144:	03 02       	.word	0x0203;	????	Illegal as address instr
 146:	00 00       	bra	@r0		
 148:	15 00       	mova	#0x00000,r5	
 14a:	03 02       	.word	0x0203;	????	Illegal as address instr
    if (sda_test) bin += 1;
 14c:	00 00       	bra	@r0		
 14e:	15 00       	mova	#0x00000,r5	
    delay5us();
 150:	03 02       	.word	0x0203;	????	Illegal as address instr
 152:	00 00       	bra	@r0		
 154:	15 00       	mova	#0x00000,r5	
    scl_off;
 156:	03 02       	.word	0x0203;	????	Illegal as address instr
 158:	00 00       	bra	@r0		
 15a:	15 00       	mova	#0x00000,r5	
 char i2c_bread(void)
{
   char i;
   char bin = 0;

  SDA_IN();
 15c:	03 02       	.word	0x0203;	????	Illegal as address instr
    delay5us();
    scl_off;
    delay5us();
  }

  return bin;
 15e:	00 00       	bra	@r0		
 160:	15 00       	mova	#0x00000,r5	
 162:	03 02       	.word	0x0203;	????	Illegal as address instr
 164:	00 00       	bra	@r0		
//
// ****************************************************************
// ** F U N Ç Õ E S  D E R I V A D A S                           **
// ****************************************************************
//
 char i2c_find_device(void)
 166:	15 00       	mova	#0x00000,r5	
{
   char status = 0;

 168:	03 02       	.word	0x0203;	????	Illegal as address instr
 16a:	00 00       	bra	@r0		
  i2c_start();
 16c:	15 00       	mova	#0x00000,r5	
 16e:	03 02       	.word	0x0203;	????	Illegal as address instr
 170:	00 00       	bra	@r0		
 172:	10 00       	bra	#0x00000	
  i2c_bwrite(i2c_slave_address);
 174:	03 02       	.word	0x0203;	????	Illegal as address instr
 176:	00 00       	bra	@r0		
  status = i2c_recv_ack();
 178:	1b 00       	mova	#0x00000,r11	
 17a:	03 02       	.word	0x0203;	????	Illegal as address instr
 17c:	00 00       	bra	@r0		
 17e:	0d 00       	mova	@r0,	r13	
  i2c_stop();

  return status;
 180:	03 02       	.word	0x0203;	????	Illegal as address instr
 182:	00 00       	bra	@r0		
 184:	1b 00       	mova	#0x00000,r11	
}

 char i2c_write_dummy( char b)
 186:	03 02       	.word	0x0203;	????	Illegal as address instr
{
   char status = 0;

 188:	00 00       	bra	@r0		
 18a:	17 00       	mova	#0x00000,r7	
 18c:	03 02       	.word	0x0203;	????	Illegal as address instr
 18e:	00 00       	bra	@r0		
  i2c_start();
 190:	15 00       	mova	#0x00000,r5	
 192:	03 02       	.word	0x0203;	????	Illegal as address instr
 194:	00 00       	bra	@r0		
  i2c_bwrite(b);
 196:	15 00       	mova	#0x00000,r5	
 198:	03 02       	.word	0x0203;	????	Illegal as address instr
  status = i2c_recv_ack();
 19a:	00 00       	bra	@r0		
 19c:	01 00       	mova	@r0,	r1	
 19e:	03 02       	.word	0x0203;	????	Illegal as address instr
 1a0:	00 00       	bra	@r0		
  i2c_stop();

  return status;
 1a2:	15 00       	mova	#0x00000,r5	
 1a4:	03 02       	.word	0x0203;	????	Illegal as address instr
 1a6:	00 00       	bra	@r0		
}

 char i2c_write_byte( char reg,  char dat)
 1a8:	15 00       	mova	#0x00000,r5	
 1aa:	03 02       	.word	0x0203;	????	Illegal as address instr
 1ac:	00 00       	bra	@r0		
 1ae:	15 00       	mova	#0x00000,r5	
 1b0:	03 02       	.word	0x0203;	????	Illegal as address instr
{
   char status = 0;

 1b2:	00 00       	bra	@r0		
 1b4:	15 00       	mova	#0x00000,r5	
  i2c_start();
 1b6:	03 02       	.word	0x0203;	????	Illegal as address instr
 1b8:	00 00       	bra	@r0		
 1ba:	15 00       	mova	#0x00000,r5	
 1bc:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_bwrite(i2c_slave_address);
 1be:	00 00       	bra	@r0		
 1c0:	15 00       	mova	#0x00000,r5	
 1c2:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 1c4:	00 00       	bra	@r0		
 1c6:	0e 00       	mova	@r0,	r14	
 1c8:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_bwrite(reg);
 1ca:	00 00       	bra	@r0		
 1cc:	1d 00       	mova	#0x00000,r13	
 1ce:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 1d0:	00 00       	bra	@r0		
 1d2:	18 00       	mova	#0x00000,r8	
 1d4:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_bwrite(dat);
 1d6:	00 00       	bra	@r0		
 1d8:	11 00       	mova	#0x00000,r1	
 1da:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 1dc:	00 00       	bra	@r0		
 1de:	1a 00       	mova	#0x00000,r10	
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 1e0:	03 02       	.word	0x0203;	????	Illegal as address instr
 1e2:	00 00       	bra	@r0		
  status += i2c_recv_ack();
  i2c_bwrite(dat);
  status += i2c_recv_ack();
  i2c_stop();

  return status;
 1e4:	15 00       	mova	#0x00000,r5	
 1e6:	03 02       	.word	0x0203;	????	Illegal as address instr
 1e8:	00 00       	bra	@r0		
 1ea:	15 00       	mova	#0x00000,r5	
 1ec:	03 02       	.word	0x0203;	????	Illegal as address instr
 1ee:	00 00       	bra	@r0		
}

char i2c_write_multiples( char reg,  char dat[],  int len)
 1f0:	15 00       	mova	#0x00000,r5	
 1f2:	03 02       	.word	0x0203;	????	Illegal as address instr
 1f4:	00 00       	bra	@r0		
 1f6:	15 00       	mova	#0x00000,r5	
 1f8:	03 02       	.word	0x0203;	????	Illegal as address instr
 1fa:	00 00       	bra	@r0		
 1fc:	15 00       	mova	#0x00000,r5	
{
  int i = 0, status = 0;

 1fe:	03 02       	.word	0x0203;	????	Illegal as address instr
 200:	00 00       	bra	@r0		
  i2c_start();
 202:	0d 00       	mova	@r0,	r13	
 204:	03 02       	.word	0x0203;	????	Illegal as address instr
 206:	00 00       	bra	@r0		
 208:	1c 00       	mova	#0x00000,r12	
  i2c_bwrite(i2c_slave_address);
 20a:	03 02       	.word	0x0203;	????	Illegal as address instr
 20c:	00 00       	bra	@r0		
 20e:	0e 00       	mova	@r0,	r14	
  status += i2c_recv_ack();
 210:	03 02       	.word	0x0203;	????	Illegal as address instr
 212:	00 00       	bra	@r0		
 214:	01 00       	mova	@r0,	r1	
  i2c_bwrite(reg);
 216:	03 02       	.word	0x0203;	????	Illegal as address instr
 218:	00 00       	bra	@r0		
 21a:	1c 00       	mova	#0x00000,r12	
 21c:	03 02       	.word	0x0203;	????	Illegal as address instr
char i2c_write_multiples( char reg,  char dat[],  int len)
{
  int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 21e:	00 00       	bra	@r0		
 220:	17 00       	mova	#0x00000,r7	
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 222:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 224:	00 00       	bra	@r0		
 226:	18 00       	mova	#0x00000,r8	
 228:	03 02       	.word	0x0203;	????	Illegal as address instr
 22a:	00 00       	bra	@r0		
 22c:	12 00       	mova	#0x00000,r2	
  while((!status) && (i<len))
  {
 22e:	03 02       	.word	0x0203;	????	Illegal as address instr

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 230:	00 00       	bra	@r0		
 232:	19 00       	mova	#0x00000,r9	
  status += i2c_recv_ack();
  i2c_stop();

  return status;
}

 234:	03 02       	.word	0x0203;	????	Illegal as address instr
 236:	00 00       	bra	@r0		
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  while((!status) && (i<len))
  {
 238:	15 00       	mova	#0x00000,r5	
 23a:	03 02       	.word	0x0203;	????	Illegal as address instr
 23c:	00 00       	bra	@r0		
    i2c_bwrite(dat[i++]);
 23e:	15 00       	mova	#0x00000,r5	
 240:	03 02       	.word	0x0203;	????	Illegal as address instr
 242:	00 00       	bra	@r0		

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 244:	15 00       	mova	#0x00000,r5	
 246:	03 02       	.word	0x0203;	????	Illegal as address instr
  while((!status) && (i<len))
  {
    i2c_bwrite(dat[i++]);
    status += i2c_recv_ack();
  }
 248:	00 00       	bra	@r0		
 24a:	01 00       	mova	@r0,	r1	
  i2c_stop();


  return status;
 24c:	03 02       	.word	0x0203;	????	Illegal as address instr
 24e:	00 00       	bra	@r0		
 250:	15 00       	mova	#0x00000,r5	
 252:	03 02       	.word	0x0203;	????	Illegal as address instr
 254:	00 00       	bra	@r0		
 256:	15 00       	mova	#0x00000,r5	

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 258:	03 02       	.word	0x0203;	????	Illegal as address instr
 25a:	00 00       	bra	@r0		


  return status;
}

 char i2c_write16_byte( int reg,  char dat)
 25c:	15 00       	mova	#0x00000,r5	
 25e:	03 02       	.word	0x0203;	????	Illegal as address instr
 260:	00 00       	bra	@r0		
 262:	0c 00       	mova	@r0,	r12	
 264:	03 02       	.word	0x0203;	????	Illegal as address instr
 266:	00 00       	bra	@r0		
 268:	20 00 03 02 	bra	&0x00203	
{
  char status = 0;

 26c:	00 00       	bra	@r0		
  i2c_start();
 26e:	1c 00       	mova	#0x00000,r12	
 270:	03 02       	.word	0x0203;	????	Illegal as address instr
 272:	00 00       	bra	@r0		
 274:	17 00       	mova	#0x00000,r7	
  i2c_bwrite(i2c_slave_address);
 276:	03 02       	.word	0x0203;	????	Illegal as address instr
 278:	00 00       	bra	@r0		
 27a:	15 00       	mova	#0x00000,r5	
  status += i2c_recv_ack();
 27c:	03 02       	.word	0x0203;	????	Illegal as address instr
 27e:	00 00       	bra	@r0		
 280:	15 00       	mova	#0x00000,r5	
 282:	03 02       	.word	0x0203;	????	Illegal as address instr
 284:	00 00       	bra	@r0		
 286:	15 00       	mova	#0x00000,r5	
 288:	03 02       	.word	0x0203;	????	Illegal as address instr
 28a:	00 00       	bra	@r0		
 28c:	17 00       	mova	#0x00000,r7	
 28e:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_bwrite(reg/256);
 290:	00 00       	bra	@r0		
 292:	17 00       	mova	#0x00000,r7	
 294:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 296:	00 00       	bra	@r0		
 298:	17 00       	mova	#0x00000,r7	
 29a:	03 02       	.word	0x0203;	????	Illegal as address instr
 29c:	00 00       	bra	@r0		
 29e:	15 00       	mova	#0x00000,r5	
 2a0:	03 02       	.word	0x0203;	????	Illegal as address instr
 2a2:	00 00       	bra	@r0		
 2a4:	15 00       	mova	#0x00000,r5	
 2a6:	03 02       	.word	0x0203;	????	Illegal as address instr
 2a8:	00 00       	bra	@r0		
 2aa:	15 00       	mova	#0x00000,r5	
 2ac:	03 02       	.word	0x0203;	????	Illegal as address instr
 2ae:	00 00       	bra	@r0		
  i2c_bwrite(reg%256);
 2b0:	17 00       	mova	#0x00000,r7	
 2b2:	03 02       	.word	0x0203;	????	Illegal as address instr
 2b4:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 2b6:	17 00       	mova	#0x00000,r7	
 2b8:	03 02       	.word	0x0203;	????	Illegal as address instr
 2ba:	00 00       	bra	@r0		
  i2c_bwrite(dat);
 2bc:	17 00       	mova	#0x00000,r7	
 2be:	03 02       	.word	0x0203;	????	Illegal as address instr
 2c0:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 2c2:	15 00       	mova	#0x00000,r5	
 2c4:	03 02       	.word	0x0203;	????	Illegal as address instr
  char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 2c6:	00 00       	bra	@r0		
 2c8:	15 00       	mova	#0x00000,r5	
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
 2ca:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
  i2c_bwrite(dat);
  status += i2c_recv_ack();
  i2c_stop();

  return status;
 2cc:	00 00       	bra	@r0		
 2ce:	15 00       	mova	#0x00000,r5	
 2d0:	03 02       	.word	0x0203;	????	Illegal as address instr
 2d2:	00 00       	bra	@r0		
 2d4:	15 00       	mova	#0x00000,r5	
 2d6:	03 02       	.word	0x0203;	????	Illegal as address instr
 2d8:	00 00       	bra	@r0		
 2da:	15 00       	mova	#0x00000,r5	
}

 char i2c_write16_multiples( int reg,  char dat[], int len)
 2dc:	03 02       	.word	0x0203;	????	Illegal as address instr
 2de:	00 00       	bra	@r0		
 2e0:	15 00       	mova	#0x00000,r5	
 2e2:	03 02       	.word	0x0203;	????	Illegal as address instr
 2e4:	00 00       	bra	@r0		
 2e6:	15 00       	mova	#0x00000,r5	
 2e8:	03 02       	.word	0x0203;	????	Illegal as address instr
{
   int i = 0, status = 0;

 2ea:	00 00       	bra	@r0		
 2ec:	11 00       	mova	#0x00000,r1	
  i2c_start();
 2ee:	03 02       	.word	0x0203;	????	Illegal as address instr
 2f0:	00 00       	bra	@r0		
 2f2:	1a 00       	mova	#0x00000,r10	
 2f4:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_bwrite(i2c_slave_address);
 2f6:	00 00       	bra	@r0		
 2f8:	17 00       	mova	#0x00000,r7	
 2fa:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 2fc:	00 00       	bra	@r0		
 2fe:	17 00       	mova	#0x00000,r7	
 300:	03 02       	.word	0x0203;	????	Illegal as address instr
 302:	00 00       	bra	@r0		
 304:	15 00       	mova	#0x00000,r5	
 306:	03 02       	.word	0x0203;	????	Illegal as address instr
 308:	00 00       	bra	@r0		
 30a:	15 00       	mova	#0x00000,r5	
 30c:	03 02       	.word	0x0203;	????	Illegal as address instr
 30e:	00 00       	bra	@r0		
  i2c_bwrite(reg/256);
 310:	15 00       	mova	#0x00000,r5	
 312:	03 02       	.word	0x0203;	????	Illegal as address instr
 314:	00 00       	bra	@r0		
 316:	15 00       	mova	#0x00000,r5	
 char i2c_write16_multiples( int reg,  char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 318:	03 02       	.word	0x0203;	????	Illegal as address instr
 31a:	00 00       	bra	@r0		
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 31c:	12 00       	mova	#0x00000,r2	
 31e:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 320:	00 00       	bra	@r0		
 322:	16 00       	mova	#0x00000,r6	
 324:	03 02       	.word	0x0203;	????	Illegal as address instr
 326:	00 00       	bra	@r0		
 328:	15 00       	mova	#0x00000,r5	
 32a:	03 02       	.word	0x0203;	????	Illegal as address instr
 32c:	00 00       	bra	@r0		
 32e:	16 00       	mova	#0x00000,r6	
 330:	03 02       	.word	0x0203;	????	Illegal as address instr
 332:	00 00       	bra	@r0		
 334:	12 00       	mova	#0x00000,r2	
 336:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_bwrite(reg%256);
 338:	00 00       	bra	@r0		
 33a:	0b 00       	mova	@r0,	r11	
 33c:	03 02       	.word	0x0203;	????	Illegal as address instr
 33e:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 340:	1f 00       	mova	#0x00000,r15	
 342:	03 02       	.word	0x0203;	????	Illegal as address instr
 344:	00 00       	bra	@r0		
 346:	15 00       	mova	#0x00000,r5	
 348:	03 02       	.word	0x0203;	????	Illegal as address instr
  while((!status) && (i<len))
  {
 34a:	00 00       	bra	@r0		
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
 34c:	11 00       	mova	#0x00000,r1	
 34e:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
  i2c_stop();

  return status;
}

 350:	00 00       	bra	@r0		
 352:	19 00       	mova	#0x00000,r9	
  i2c_bwrite(reg/256);
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
  while((!status) && (i<len))
  {
 354:	03 02       	.word	0x0203;	????	Illegal as address instr
 356:	00 00       	bra	@r0		
 358:	18 00       	mova	#0x00000,r8	
    i2c_bwrite(dat[i++]);
 35a:	03 02       	.word	0x0203;	????	Illegal as address instr
 35c:	00 00       	bra	@r0		
 35e:	0b 00       	mova	@r0,	r11	
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
 360:	03 02       	.word	0x0203;	????	Illegal as address instr
 362:	00 00       	bra	@r0		
  while((!status) && (i<len))
  {
    i2c_bwrite(dat[i++]);
    status += i2c_recv_ack();
  }
 364:	20 00 03 02 	bra	&0x00203	
  i2c_stop();


  return status;
 368:	00 00       	bra	@r0		
 36a:	17 00       	mova	#0x00000,r7	
 36c:	03 02       	.word	0x0203;	????	Illegal as address instr
 36e:	00 00       	bra	@r0		
 370:	15 00       	mova	#0x00000,r5	
 372:	03 02       	.word	0x0203;	????	Illegal as address instr
}

 char i2c_read_byte( char reg,  char *dat)
 374:	00 00       	bra	@r0		
 376:	15 00       	mova	#0x00000,r5	
 378:	03 02       	.word	0x0203;	????	Illegal as address instr
 37a:	00 00       	bra	@r0		
 37c:	15 00       	mova	#0x00000,r5	
 37e:	03 02       	.word	0x0203;	????	Illegal as address instr
{
   char status = 0;

 380:	00 00       	bra	@r0		
 382:	15 00       	mova	#0x00000,r5	
  i2c_start();
 384:	03 02       	.word	0x0203;	????	Illegal as address instr
 386:	00 00       	bra	@r0		
 388:	15 00       	mova	#0x00000,r5	
 38a:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_bwrite(i2c_slave_address);
 38c:	00 00       	bra	@r0		
 38e:	15 00       	mova	#0x00000,r5	
 390:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 392:	00 00       	bra	@r0		
 394:	15 00       	mova	#0x00000,r5	
 396:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_bwrite(reg);
 398:	00 00       	bra	@r0		
 39a:	15 00       	mova	#0x00000,r5	
 39c:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 39e:	00 00       	bra	@r0		
 3a0:	15 00       	mova	#0x00000,r5	
  i2c_start();
 3a2:	03 02       	.word	0x0203;	????	Illegal as address instr
 3a4:	00 00       	bra	@r0		
 3a6:	0f 00       	mova	@r0,	r15	
 3a8:	03 02       	.word	0x0203;	????	Illegal as address instr
 3aa:	00 00       	bra	@r0		
  i2c_bwrite(i2c_slave_address+1);
 3ac:	16 00       	mova	#0x00000,r6	
 3ae:	03 02       	.word	0x0203;	????	Illegal as address instr
 3b0:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 3b2:	1a 00       	mova	#0x00000,r10	
 3b4:	03 02       	.word	0x0203;	????	Illegal as address instr
 3b6:	00 00       	bra	@r0		
 3b8:	17 00       	mova	#0x00000,r7	
  *dat = i2c_bread();
 3ba:	03 02       	.word	0x0203;	????	Illegal as address instr
 3bc:	00 00       	bra	@r0		
 3be:	17 00       	mova	#0x00000,r7	
  i2c_send_ack(NACK);
 3c0:	03 02       	.word	0x0203;	????	Illegal as address instr
 3c2:	00 00       	bra	@r0		
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 3c4:	15 00       	mova	#0x00000,r5	
 3c6:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
  *dat = i2c_bread();
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
 3c8:	00 00       	bra	@r0		
 3ca:	15 00       	mova	#0x00000,r5	
 3cc:	03 02       	.word	0x0203;	????	Illegal as address instr
 3ce:	00 00       	bra	@r0		
 3d0:	15 00       	mova	#0x00000,r5	
 3d2:	03 02       	.word	0x0203;	????	Illegal as address instr
 3d4:	00 00       	bra	@r0		
}

 char i2c_read_multiples( char reg,  char dat[], int len)
 3d6:	15 00       	mova	#0x00000,r5	
 3d8:	03 02       	.word	0x0203;	????	Illegal as address instr
 3da:	00 00       	bra	@r0		
 3dc:	12 00       	mova	#0x00000,r2	
 3de:	03 02       	.word	0x0203;	????	Illegal as address instr
 3e0:	00 00       	bra	@r0		
 3e2:	16 00       	mova	#0x00000,r6	
{
   int i = 0, status = 0;

 3e4:	03 02       	.word	0x0203;	????	Illegal as address instr
 3e6:	00 00       	bra	@r0		
  i2c_start();
 3e8:	15 00       	mova	#0x00000,r5	
 3ea:	03 02       	.word	0x0203;	????	Illegal as address instr
 3ec:	00 00       	bra	@r0		
 3ee:	15 00       	mova	#0x00000,r5	
  i2c_bwrite(i2c_slave_address);
 3f0:	03 02       	.word	0x0203;	????	Illegal as address instr
 3f2:	00 00       	bra	@r0		
 3f4:	15 00       	mova	#0x00000,r5	
  status += i2c_recv_ack();
 3f6:	03 02       	.word	0x0203;	????	Illegal as address instr
 3f8:	00 00       	bra	@r0		
 3fa:	16 00       	mova	#0x00000,r6	
  i2c_bwrite(reg);
 3fc:	03 02       	.word	0x0203;	????	Illegal as address instr
 3fe:	00 00       	bra	@r0		
 400:	12 00       	mova	#0x00000,r2	
 402:	03 02       	.word	0x0203;	????	Illegal as address instr
 char i2c_read_multiples( char reg,  char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 404:	00 00       	bra	@r0		
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 406:	03 75       	.word	0x7503;	????	Illegal as 2-op instr
  status += i2c_recv_ack();
 408:	01 00       	mova	@r0,	r1	
 40a:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_start();
 40c:	00 00       	bra	@r0		
 40e:	21 00 03 02 	mova	&0x00203,r1	
 412:	00 00       	bra	@r0		
 414:	15 00       	mova	#0x00000,r5	
  i2c_bwrite(i2c_slave_address+1);
 416:	03 02       	.word	0x0203;	????	Illegal as address instr
 418:	00 00       	bra	@r0		
 41a:	11 00       	mova	#0x00000,r1	
 41c:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();

 41e:	00 00       	bra	@r0		
 420:	19 00       	mova	#0x00000,r9	
 422:	03 02       	.word	0x0203;	????	Illegal as address instr
 424:	00 00       	bra	@r0		
  while((!status) && (i<len-1))
  {  
 426:	18 00       	mova	#0x00000,r8	
 428:	03 02       	.word	0x0203;	????	Illegal as address instr
 42a:	00 00       	bra	@r0		
 42c:	17 00       	mova	#0x00000,r7	
    dat[i] = i2c_bread();
 42e:	03 02       	.word	0x0203;	????	Illegal as address instr
 430:	00 00       	bra	@r0		
 432:	17 00       	mova	#0x00000,r7	
    i2c_send_ack(ACK);
 434:	03 02       	.word	0x0203;	????	Illegal as address instr
 436:	00 00       	bra	@r0		
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 438:	15 00       	mova	#0x00000,r5	
 43a:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
}

 43c:	00 00       	bra	@r0		
 43e:	15 00       	mova	#0x00000,r5	
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 440:	03 02       	.word	0x0203;	????	Illegal as address instr
 442:	00 00       	bra	@r0		
    dat[i] = i2c_bread();
 444:	15 00       	mova	#0x00000,r5	
 446:	03 02       	.word	0x0203;	????	Illegal as address instr
 448:	00 00       	bra	@r0		
    i2c_send_ack(ACK);
 44a:	15 00       	mova	#0x00000,r5	
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 44c:	03 02       	.word	0x0203;	????	Illegal as address instr
 44e:	00 00       	bra	@r0		
  while((!status) && (i<len-1))
  {  
    dat[i] = i2c_bread();
    i2c_send_ack(ACK);
    i++;
  }
 450:	15 00       	mova	#0x00000,r5	
 452:	03 02       	.word	0x0203;	????	Illegal as address instr
 454:	00 00       	bra	@r0		
 456:	15 00       	mova	#0x00000,r5	
 458:	03 02       	.word	0x0203;	????	Illegal as address instr
  dat[i] = i2c_bread();
 45a:	00 00       	bra	@r0		
 45c:	15 00       	mova	#0x00000,r5	
 45e:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_send_ack(NACK);
 460:	00 00       	bra	@r0		
 462:	15 00       	mova	#0x00000,r5	
  i2c_stop();

  return status;
 464:	03 02       	.word	0x0203;	????	Illegal as address instr
 466:	00 00       	bra	@r0		
 468:	15 00       	mova	#0x00000,r5	
 46a:	03 02       	.word	0x0203;	????	Illegal as address instr
 46c:	00 00       	bra	@r0		
 46e:	15 00       	mova	#0x00000,r5	
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 470:	03 02       	.word	0x0203;	????	Illegal as address instr
 472:	00 00       	bra	@r0		
 474:	0e 00       	mova	@r0,	r14	
 476:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_stop();

  return status;
}

 char i2c_read16_byte( int reg,  char *dat)
 478:	00 00       	bra	@r0		
 47a:	1d 00       	mova	#0x00000,r13	
 47c:	03 02       	.word	0x0203;	????	Illegal as address instr
 47e:	00 00       	bra	@r0		
 480:	17 00       	mova	#0x00000,r7	
 482:	03 02       	.word	0x0203;	????	Illegal as address instr
 484:	00 00       	bra	@r0		
{
   char status = 0;

 486:	17 00       	mova	#0x00000,r7	
 488:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_start();
 48a:	00 00       	bra	@r0		
 48c:	15 00       	mova	#0x00000,r5	
 48e:	03 02       	.word	0x0203;	????	Illegal as address instr
 490:	00 00       	bra	@r0		
  i2c_bwrite(i2c_slave_address);
 492:	15 00       	mova	#0x00000,r5	
 494:	03 02       	.word	0x0203;	????	Illegal as address instr
 496:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 498:	15 00       	mova	#0x00000,r5	
 49a:	03 02       	.word	0x0203;	????	Illegal as address instr
 49c:	00 00       	bra	@r0		
 49e:	15 00       	mova	#0x00000,r5	
 4a0:	03 02       	.word	0x0203;	????	Illegal as address instr
 4a2:	00 00       	bra	@r0		
 4a4:	12 00       	mova	#0x00000,r2	
 4a6:	03 02       	.word	0x0203;	????	Illegal as address instr
 4a8:	00 00       	bra	@r0		
 4aa:	16 00       	mova	#0x00000,r6	
  i2c_bwrite(reg/256);
 4ac:	03 02       	.word	0x0203;	????	Illegal as address instr
 4ae:	00 00       	bra	@r0		
 4b0:	15 00       	mova	#0x00000,r5	
  status += i2c_recv_ack();
 4b2:	03 02       	.word	0x0203;	????	Illegal as address instr
 4b4:	00 00       	bra	@r0		
 4b6:	15 00       	mova	#0x00000,r5	
 4b8:	03 02       	.word	0x0203;	????	Illegal as address instr
 4ba:	00 00       	bra	@r0		
 4bc:	15 00       	mova	#0x00000,r5	
 4be:	03 02       	.word	0x0203;	????	Illegal as address instr
 4c0:	00 00       	bra	@r0		
 4c2:	16 00       	mova	#0x00000,r6	
 4c4:	03 02       	.word	0x0203;	????	Illegal as address instr
 4c6:	00 00       	bra	@r0		
 4c8:	16 00       	mova	#0x00000,r6	
 4ca:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_bwrite(reg%256);
 4cc:	00 00       	bra	@r0		
 4ce:	15 00       	mova	#0x00000,r5	
 4d0:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 4d2:	00 00       	bra	@r0		
 4d4:	15 00       	mova	#0x00000,r5	
  i2c_start();
 4d6:	03 02       	.word	0x0203;	????	Illegal as address instr
 4d8:	00 00       	bra	@r0		
 4da:	12 00       	mova	#0x00000,r2	
 4dc:	03 02       	.word	0x0203;	????	Illegal as address instr
 4de:	00 00       	bra	@r0		
  i2c_bwrite(i2c_slave_address+1);
 4e0:	03 71       	.word	0x7103;	????	Illegal as 2-op instr
 4e2:	01 00       	mova	@r0,	r1	
 4e4:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 4e6:	00 00       	bra	@r0		
 4e8:	23 00       	.word	0x0023;	????	Illegal as address instr
 4ea:	03 02       	.word	0x0203;	????	Illegal as address instr
 4ec:	00 00       	bra	@r0		
  *dat = i2c_bread();
 4ee:	15 00       	mova	#0x00000,r5	
 4f0:	03 02       	.word	0x0203;	????	Illegal as address instr
 4f2:	00 00       	bra	@r0		
  i2c_send_ack(NACK);
 4f4:	15 00       	mova	#0x00000,r5	
 4f6:	03 02       	.word	0x0203;	????	Illegal as address instr
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 4f8:	00 00       	bra	@r0		
 4fa:	10 00       	bra	#0x00000	
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
 4fc:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
  *dat = i2c_bread();
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
 4fe:	00 00       	bra	@r0		
 500:	1a 00       	mova	#0x00000,r10	
 502:	03 02       	.word	0x0203;	????	Illegal as address instr
 504:	00 00       	bra	@r0		
 506:	15 00       	mova	#0x00000,r5	
 508:	03 02       	.word	0x0203;	????	Illegal as address instr
 50a:	00 00       	bra	@r0		
 50c:	15 00       	mova	#0x00000,r5	
}

 char i2c_read16_multiples( int reg, char dat[], int len)
 50e:	03 02       	.word	0x0203;	????	Illegal as address instr
 510:	00 00       	bra	@r0		
 512:	17 00       	mova	#0x00000,r7	
 514:	03 02       	.word	0x0203;	????	Illegal as address instr
 516:	00 00       	bra	@r0		
 518:	03 75       	.word	0x7503;	????	Illegal as 2-op instr
 51a:	01 00       	mova	@r0,	r1	
{
   int i = 0, status = 0;

 51c:	03 02       	.word	0x0203;	????	Illegal as address instr
 51e:	00 00       	bra	@r0		
  i2c_start();
 520:	22 00 03 02 	mova	&0x00203,r2	
 524:	00 00       	bra	@r0		
 526:	17 00       	mova	#0x00000,r7	
  i2c_bwrite(i2c_slave_address);
 528:	03 02       	.word	0x0203;	????	Illegal as address instr
 52a:	00 00       	bra	@r0		
 52c:	15 00       	mova	#0x00000,r5	
  status += i2c_recv_ack();
 52e:	03 02       	.word	0x0203;	????	Illegal as address instr
 530:	00 00       	bra	@r0		
 532:	15 00       	mova	#0x00000,r5	
 534:	03 02       	.word	0x0203;	????	Illegal as address instr
 536:	00 00       	bra	@r0		
 538:	15 00       	mova	#0x00000,r5	
 53a:	03 02       	.word	0x0203;	????	Illegal as address instr
 53c:	00 00       	bra	@r0		
 53e:	15 00       	mova	#0x00000,r5	
 540:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_bwrite(reg/256);
 542:	00 00       	bra	@r0		
 544:	15 00       	mova	#0x00000,r5	
 546:	03 02       	.word	0x0203;	????	Illegal as address instr
 548:	00 00       	bra	@r0		
 char i2c_read16_multiples( int reg, char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 54a:	15 00       	mova	#0x00000,r5	
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 54c:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();
 54e:	00 00       	bra	@r0		
 550:	15 00       	mova	#0x00000,r5	
 552:	03 02       	.word	0x0203;	????	Illegal as address instr
 554:	00 00       	bra	@r0		
 556:	15 00       	mova	#0x00000,r5	
 558:	03 02       	.word	0x0203;	????	Illegal as address instr
 55a:	00 00       	bra	@r0		
 55c:	15 00       	mova	#0x00000,r5	
 55e:	03 02       	.word	0x0203;	????	Illegal as address instr
 560:	00 00       	bra	@r0		
 562:	15 00       	mova	#0x00000,r5	
 564:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_bwrite(reg%256);
 566:	00 00       	bra	@r0		
 568:	15 00       	mova	#0x00000,r5	
 56a:	03 02       	.word	0x0203;	????	Illegal as address instr
 56c:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 56e:	15 00       	mova	#0x00000,r5	
 570:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_start();
 572:	00 00       	bra	@r0		
 574:	0c 00       	mova	@r0,	r12	
 576:	03 02       	.word	0x0203;	????	Illegal as address instr
 578:	00 00       	bra	@r0		
 57a:	16 00       	mova	#0x00000,r6	
  i2c_bwrite(i2c_slave_address+1);
 57c:	03 02       	.word	0x0203;	????	Illegal as address instr
 57e:	00 00       	bra	@r0		
 580:	1d 00       	mova	#0x00000,r13	
 582:	03 02       	.word	0x0203;	????	Illegal as address instr
  status += i2c_recv_ack();

 584:	00 00       	bra	@r0		
 586:	17 00       	mova	#0x00000,r7	
 588:	03 02       	.word	0x0203;	????	Illegal as address instr
 58a:	00 00       	bra	@r0		
  while((!status) && (i<len-1))
  {  
 58c:	17 00       	mova	#0x00000,r7	
 58e:	03 02       	.word	0x0203;	????	Illegal as address instr
 590:	00 00       	bra	@r0		
 592:	15 00       	mova	#0x00000,r5	
    dat[i] = i2c_bread();
 594:	03 02       	.word	0x0203;	????	Illegal as address instr
 596:	00 00       	bra	@r0		
 598:	15 00       	mova	#0x00000,r5	
    i2c_send_ack(ACK);
 59a:	03 02       	.word	0x0203;	????	Illegal as address instr
 59c:	00 00       	bra	@r0		
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 59e:	15 00       	mova	#0x00000,r5	
 5a0:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
}

 5a2:	00 00       	bra	@r0		
 5a4:	15 00       	mova	#0x00000,r5	
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 5a6:	03 02       	.word	0x0203;	????	Illegal as address instr
 5a8:	00 00       	bra	@r0		
    dat[i] = i2c_bread();
 5aa:	12 00       	mova	#0x00000,r2	
 5ac:	03 02       	.word	0x0203;	????	Illegal as address instr
 5ae:	00 00       	bra	@r0		
    i2c_send_ack(ACK);
 5b0:	16 00       	mova	#0x00000,r6	
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 5b2:	03 02       	.word	0x0203;	????	Illegal as address instr
 5b4:	00 00       	bra	@r0		
  while((!status) && (i<len-1))
  {  
    dat[i] = i2c_bread();
    i2c_send_ack(ACK);
    i++;
  }
 5b6:	15 00       	mova	#0x00000,r5	
 5b8:	03 02       	.word	0x0203;	????	Illegal as address instr
 5ba:	00 00       	bra	@r0		
 5bc:	15 00       	mova	#0x00000,r5	
 5be:	03 02       	.word	0x0203;	????	Illegal as address instr
  dat[i] = i2c_bread();
 5c0:	00 00       	bra	@r0		
 5c2:	15 00       	mova	#0x00000,r5	
 5c4:	03 02       	.word	0x0203;	????	Illegal as address instr
  i2c_send_ack(NACK);
 5c6:	00 00       	bra	@r0		
 5c8:	15 00       	mova	#0x00000,r5	
  i2c_stop();

  return status;
 5ca:	03 02       	.word	0x0203;	????	Illegal as address instr
 5cc:	00 00       	bra	@r0		
 5ce:	15 00       	mova	#0x00000,r5	
 5d0:	03 02       	.word	0x0203;	????	Illegal as address instr
 5d2:	00 00       	bra	@r0		
 5d4:	16 00       	mova	#0x00000,r6	
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 5d6:	03 02       	.word	0x0203;	????	Illegal as address instr
 5d8:	00 00       	bra	@r0		
 5da:	16 00       	mova	#0x00000,r6	
 5dc:	03 02       	.word	0x0203;	????	Illegal as address instr
 5de:	00 00       	bra	@r0		
 5e0:	15 00       	mova	#0x00000,r5	
 5e2:	03 02       	.word	0x0203;	????	Illegal as address instr
 5e4:	00 00       	bra	@r0		
 5e6:	15 00       	mova	#0x00000,r5	
 5e8:	03 02       	.word	0x0203;	????	Illegal as address instr
 5ea:	00 00       	bra	@r0		
 5ec:	12 00       	mova	#0x00000,r2	
 5ee:	03 02       	.word	0x0203;	????	Illegal as address instr
 5f0:	00 00       	bra	@r0		
 5f2:	03 6f       	.word	0x6f03;	????	Illegal as 2-op instr
 5f4:	01 00       	mova	@r0,	r1	
 5f6:	03 02       	.word	0x0203;	????	Illegal as address instr
 5f8:	00 00       	bra	@r0		
 5fa:	25 00 03 02 	mova	&0x00203,r5	
 5fe:	00 00       	bra	@r0		
 600:	15 00       	mova	#0x00000,r5	
 602:	03 02       	.word	0x0203;	????	Illegal as address instr
 604:	00 00       	bra	@r0		
 606:	15 00       	mova	#0x00000,r5	
 608:	03 02       	.word	0x0203;	????	Illegal as address instr
 60a:	00 00       	bra	@r0		
 60c:	10 00       	bra	#0x00000	
 60e:	03 02       	.word	0x0203;	????	Illegal as address instr
 610:	00 00       	bra	@r0		
 612:	1a 00       	mova	#0x00000,r10	
 614:	03 02       	.word	0x0203;	????	Illegal as address instr
 616:	00 00       	bra	@r0		
 618:	15 00       	mova	#0x00000,r5	
 61a:	03 02       	.word	0x0203;	????	Illegal as address instr
 61c:	00 00       	bra	@r0		
 61e:	15 00       	mova	#0x00000,r5	
 620:	03 02       	.word	0x0203;	????	Illegal as address instr
 622:	00 00       	bra	@r0		
 624:	17 00       	mova	#0x00000,r7	
 626:	03 02       	.word	0x0203;	????	Illegal as address instr
 628:	00 00       	bra	@r0		
 62a:	03 75       	.word	0x7503;	????	Illegal as 2-op instr
 62c:	01 00       	mova	@r0,	r1	
 62e:	03 02       	.word	0x0203;	????	Illegal as address instr
 630:	00 00       	bra	@r0		
 632:	00 01       	bra	@r1		
 634:	01 00       	Address 0x00000634 is out of bounds.
Address 0x00000636 is out of bounds.
and.b	@r15+,	-1(r15)	;0xffff(r15)

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
  i2c_init();
  i2c_slave_address = slave_addr;
}

void i2c_change_address( char slave_addr)
{
   0:	0e 00       	mova	@r0,	r14	
   2:	00 00       	bra	@r0		
  i2c_slave_address = slave_addr;
   4:	ff ff ff ff 	and.b	@r15+,	-1(r15)	;0xffff(r15)
}

void i2c_init(void)
{
   8:	01 00       	mova	@r0,	r1	
   a:	01 7e       	subc	r14,	r1	
  SDA_OUT();
   c:	00 0c       	bra	@r12		
   e:	01 02       	mova	#4,	r1	;r2 As==10
  sda_on;
  10:	80 01 08 00 	bra	#0x10008	
	...
//
// ****************************************************************
// ** P R I M I T I V A S                                        **
// ****************************************************************
//
void i2c_config( char slave_addr)
  1c:	06 00       	mova	@r0,	r6	
{
  1e:	08 00       	mova	@r0,	r8	
	...
  i2c_init();
  i2c_slave_address = slave_addr;
  28:	14 00       	mova	#0x00000,r4	
  scl_on;
  delay5us();
}

void i2c_start(void)
{
  2a:	0e 00       	mova	@r0,	r14	
	...
  sda_on;
  delay5us();
  34:	10 00       	bra	#0x00000	
  scl_on;
  36:	42 0e       	rlam.a	#4,	r2	
  38:	04 8b       	sub	r11,	r4	
  delay5us();

  3a:	02 00       	mova	@r0,	r2	
  3c:	08 00       	mova	@r0,	r8	
	...
  sda_off;
  delay5us();
  46:	26 00 08 00 	mova	&0x00008,r6	
	...
  scl_off;
  delay5us();
}

void i2c_stop(void)
{
  52:	1c 00       	mova	#0x00000,r12	
  54:	0e 00       	mova	@r0,	r14	
	...
  sda_off;
  delay5us();
  scl_on;
  5e:	40 00       	rrcm.a	#1,	r0	
  60:	42 0e       	rlam.a	#4,	r2	
  delay5us();
  62:	04 8b       	sub	r11,	r4	
  64:	02 00       	mova	@r0,	r2	
  sda_on;
  66:	08 00       	mova	@r0,	r8	
	...
}

 char i2c_recv_ack(void)
{
   char i;

  70:	30 00 18 00 	bra	0x0018		;PC rel. 0x0008a
	...
  SDA_IN();
  delay5us();
  scl_on;
  7c:	4c 00       	rrcm.a	#1,	r12	
  7e:	42 0e       	rlam.a	#4,	r2	
  delay5us();
  80:	04 42       	mov	r2,	r4	
  82:	0e 06       	mova	@r6,	r14	
  if(sda_test) i=1; else i=0;
  84:	42 0e       	rlam.a	#4,	r2	
  86:	08 89       	sub	r9,	r8	
  delay5us();
  88:	04 8a       	sub	r10,	r4	
  8a:	03 8b       	.word	0x8b03;	????	Illegal as 2-op instr
  8c:	02 00       	mova	@r0,	r2	
  scl_off;
  8e:	12 00       	mova	#0x00000,r2	
	...
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  98:	3e 00 42 0e 	mova	0x0e42,	r14	;PC rel. 0x00edc
  9c:	04 42       	mov	r2,	r4	
  9e:	0e 06       	mova	@r6,	r14	
  a0:	8a 03 8b 02 	mova	#0x3028b,r10	
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a4:	0c 00       	mova	@r0,	r12	
	...
}

void i2c_send_ack( char confirmation)
{
  ae:	20 00 42 0e 	bra	&0x00e42	
  SDA_OUT();
  b2:	04 00       	mova	@r0,	r4	
  b4:	0c 00       	mova	@r0,	r12	
	...
  if(confirmation) sda_on; else sda_off;
  be:	22 00 42 0e 	mova	&0x00e42,r2	
  scl_on;
  c2:	04 00       	mova	@r0,	r4	
  delay5us();
  c4:	18 00       	mova	#0x00000,r8	
	...
  scl_off;
  delay5us();
  ce:	48 00       	rrcm.a	#1,	r8	
  d0:	42 0e       	rlam.a	#4,	r2	
  d2:	04 42       	mov	r2,	r4	
  sda_off;
  d4:	0e 06       	mova	@r6,	r14	
  return i;
}

void i2c_send_ack( char confirmation)
{
  SDA_OUT();
  d6:	42 0e       	rlam.a	#4,	r2	
  d8:	08 89       	sub	r9,	r8	
  da:	04 8a       	sub	r10,	r4	
  scl_off;
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
  dc:	03 8b       	.word	0x8b03;	????	Illegal as 2-op instr
  de:	02 00       	mova	@r0,	r2	
  e0:	1c 00       	mova	#0x00000,r12	
	...
{
   char mask = 0x80;
   char i;

  ea:	6c 00 42 0e 	mova	r0,	&0xc0e42
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
{
  ee:	04 42       	mov	r2,	r4	
  f0:	0e 06       	mova	@r6,	r14	
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
  f2:	42 0e       	rlam.a	#4,	r2	
  f4:	08 42       	mov	r2,	r8	
    if(b & mask) sda_on; else sda_off;
  f6:	0e 0a       	mova	@r10,	r14	
  f8:	88 05 89 04 	mova	#0x50489,r8	
    delay5us();
  fc:	8a 03 8b 02 	mova	#0x3028b,r10	
    scl_on;
 100:	22 00 00 00 	mova	&0x00000,r2	
    delay5us();
 104:	00 00       	bra	@r0		
 106:	00 00       	bra	@r0		
    scl_off;
 108:	00 00       	bra	@r0		
 10a:	80 00 42 0e 	bra	#0x00e42	
void i2c_bwrite( char b)
{
   char mask = 0x80;
   char i;

  SDA_OUT();
 10e:	04 42       	mov	r2,	r4	
    if(b & mask) sda_on; else sda_off;
    delay5us();
    scl_on;
    delay5us();
    scl_off;
    delay5us();
 110:	0e 06       	mova	@r6,	r14	
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
 112:	42 0e       	rlam.a	#4,	r2	
 114:	08 42       	mov	r2,	r8	
 116:	0e 0a       	mova	@r10,	r14	
 118:	42 0e       	rlam.a	#4,	r2	
 11a:	0c 87       	sub	r7,	r12	
 11c:	06 88       	sub	r8,	r6	
 11e:	05 89       	sub	r9,	r5	
    scl_on;
    delay5us();
    scl_off;
    delay5us();
    mask >>= 1;
  }
 120:	04 8a       	sub	r10,	r4	
 122:	03 8b       	.word	0x8b03;	????	Illegal as 2-op instr
 124:	02 00       	mova	@r0,	r2	
 126:	1c 00       	mova	#0x00000,r12	
	...

 char i2c_bread(void)
{
   char i;
   char bin = 0;

 130:	98 00 42 0e 	cmpa	#0x00e42,r8	
  }
}

 char i2c_bread(void)
{
   char i;
 134:	04 42       	mov	r2,	r4	
   char bin = 0;

  SDA_IN();
  for (i=0; i<8; i++)
  {
 136:	0e 06       	mova	@r6,	r14	
 138:	42 0e       	rlam.a	#4,	r2	
    bin <<= 1;
 13a:	08 42       	mov	r2,	r8	
 13c:	0e 0a       	mova	@r10,	r14	
    scl_on;
 13e:	88 05 89 04 	mova	#0x50489,r8	
    delay5us();
 142:	8a 03 8b 02 	mova	#0x3028b,r10	
 146:	1c 00       	mova	#0x00000,r12	
	...
    if (sda_test) bin += 1;
    delay5us();
 150:	62 00 42 0e 	mova	r0,	&0x20e42
 154:	04 42       	mov	r2,	r4	
    scl_off;
 156:	0e 06       	mova	@r6,	r14	
 158:	42 0e       	rlam.a	#4,	r2	
 15a:	08 42       	mov	r2,	r8	
 char i2c_bread(void)
{
   char i;
   char bin = 0;

  SDA_IN();
 15c:	0e 0a       	mova	@r10,	r14	
    delay5us();
    scl_off;
    delay5us();
  }

  return bin;
 15e:	88 05 89 04 	mova	#0x50489,r8	
 162:	8a 03 8b 02 	mova	#0x3028b,r10	
//
// ****************************************************************
// ** F U N Ç Õ E S  D E R I V A D A S                           **
// ****************************************************************
//
 char i2c_find_device(void)
 166:	1c 00       	mova	#0x00000,r12	
	...
{
   char status = 0;

  i2c_start();
 170:	a2 00 42 0e 	adda	#0x00e42,r2	
  i2c_bwrite(i2c_slave_address);
 174:	04 42       	mov	r2,	r4	
 176:	0e 06       	mova	@r6,	r14	
  status = i2c_recv_ack();
 178:	42 0e       	rlam.a	#4,	r2	
 17a:	08 42       	mov	r2,	r8	
 17c:	0e 0a       	mova	@r10,	r14	
 17e:	88 05 89 04 	mova	#0x50489,r8	
  i2c_stop();

  return status;
 182:	8a 03 8b 02 	mova	#0x3028b,r10	
}

 char i2c_write_dummy( char b)
 186:	22 00 00 00 	mova	&0x00000,r2	
{
   char status = 0;

 18a:	00 00       	bra	@r0		
 18c:	00 00       	bra	@r0		
 18e:	00 00       	bra	@r0		
  i2c_start();
 190:	96 00 42 0e 	cmpa	#0x00e42,r6	
 194:	04 42       	mov	r2,	r4	
  i2c_bwrite(b);
 196:	0e 06       	mova	@r6,	r14	
 198:	42 0e       	rlam.a	#4,	r2	
  status = i2c_recv_ack();
 19a:	08 42       	mov	r2,	r8	
 19c:	0e 0a       	mova	@r10,	r14	
 19e:	42 0e       	rlam.a	#4,	r2	
 1a0:	0c 87       	sub	r7,	r12	
  i2c_stop();

  return status;
 1a2:	06 88       	sub	r8,	r6	
 1a4:	05 89       	sub	r9,	r5	
 1a6:	04 8a       	sub	r10,	r4	
}

 char i2c_write_byte( char reg,  char dat)
 1a8:	03 8b       	.word	0x8b03;	????	Illegal as 2-op instr
 1aa:	02 00       	mova	@r0,	r2	
 1ac:	1c 00       	mova	#0x00000,r12	
	...
{
   char status = 0;

  i2c_start();
 1b6:	d0 00       	cmpa	r0,	r0	
 1b8:	42 0e       	rlam.a	#4,	r2	
 1ba:	04 42       	mov	r2,	r4	
 1bc:	0e 06       	mova	@r6,	r14	
  i2c_bwrite(i2c_slave_address);
 1be:	42 0e       	rlam.a	#4,	r2	
 1c0:	08 42       	mov	r2,	r8	
 1c2:	0e 0a       	mova	@r10,	r14	
  status += i2c_recv_ack();
 1c4:	88 05 89 04 	mova	#0x50489,r8	
 1c8:	8a 03 8b 02 	mova	#0x3028b,r10	

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  i2c_init();
  i2c_slave_address = slave_addr;
}

void i2c_change_address( char slave_addr)
{
   0:	1a 00       	mova	#0x00000,r10	
   2:	1c 00       	mova	#0x00000,r12	
  i2c_slave_address = slave_addr;
   4:	02 00       	mova	@r0,	r2	
}

void i2c_init(void)
{
   6:	71 02 1c 00 	mova	r2,	28(r1)	;0x001c(r1)
   a:	2a 00 02 00 	mova	&0x00002,r10	
  SDA_OUT();
   e:	71 04 00 00 	mova	r4,	0(r1)	;0x0000(r1)
  sda_on;
  12:	00 00       	bra	@r0		
  scl_on;
  14:	1a 00       	mova	#0x00000,r10	
  16:	21 00 01 00 	mova	&0x00001,r1	
//
// ****************************************************************
// ** P R I M I T I V A S                                        **
// ****************************************************************
//
void i2c_config( char slave_addr)
  1a:	5f 21       	jnz	$+704    	;abs 0x2da
  1c:	00 28       	jnc	$+2      	;abs 0x1e
{
  1e:	00 01       	bra	@r1		
  20:	00 5b       	add	r11,	r0	
  i2c_init();
  22:	28 00 2a 00 	mova	&0x0002a,r8	
  i2c_slave_address = slave_addr;
  26:	03 00       	.word	0x0003;	????	Illegal as address instr
  28:	03 00       	.word	0x0003;	????	Illegal as address instr
  scl_on;
  delay5us();
}

void i2c_start(void)
{
  2a:	00 00       	bra	@r0		
  2c:	00 00       	bra	@r0		
  sda_on;
  2e:	00 6c       	addc	r12,	r0	
  30:	00 6e       	addc	r14,	r0	
  delay5us();
  32:	00 02       	bra	#4		;r2 As==10
  34:	00 71       	subc	r1,	r0	
  scl_on;
  36:	02 6e       	addc	r14,	r2	
  38:	00 ac       	dadd	r12,	r0	
  delay5us();

  3a:	00 02       	bra	#4		;r2 As==10
  3c:	00 71       	subc	r1,	r0	
  3e:	04 00       	mova	@r0,	r4	
  sda_off;
  40:	00 00       	bra	@r0		
  42:	00 84       	sub	r4,	r0	
  delay5us();
  44:	00 a4       	dadd	r4,	r0	
  46:	00 0b       	bra	@r11		
  48:	00 7b       	subc	r11,	r0	
  scl_off;
  4a:	00 32       	jn	$-1022   	;abs 0xfc4c
  4c:	1a 38       	jl	$+54     	;abs 0x82
  delay5us();
  4e:	24 38       	jl	$+74     	;abs 0x98
}

void i2c_stop(void)
{
  50:	25 30       	jn	$+76     	;abs 0x9c
  52:	2e 9f       	cmp	@r15,	r14	
  54:	a6 00 aa 00 	adda	#0x000aa,r6	
  sda_off;
  58:	0b 00       	mova	@r0,	r11	
  delay5us();
  5a:	7b 00 32 1a 	mova	r0,	6706(r11);0x1a32(r11)
  scl_on;
  5e:	38 24       	jz	$+114    	;abs 0xd0
  60:	38 25       	jz	$+626    	;abs 0x2d2
  delay5us();
  62:	30 2e       	jc	$-926    	;abs 0xfcc4
  64:	9f 00 00 00 	cmpa	#0x00000,r15	
  sda_on;
  68:	00 ac       	dadd	r12,	r0	
  delay5us();
  6a:	00 c3       	bic	#0,	r0	;r3 As==00
}

 char i2c_recv_ack(void)
  6c:	00 01       	bra	@r1		
{
   char i;

  6e:	00 5f       	add	r15,	r0	
  70:	d6 00       	cmpa	r0,	r6	
  72:	dc 00       	cmpa	r0,	r12	
  SDA_IN();
  74:	01 00       	mova	@r0,	r1	
  76:	5f 00       	rrcm	#1,	r15	
  delay5us();
  78:	00 00       	bra	@r0		
  7a:	00 dc       	bis	r12,	r0	
  scl_on;
  7c:	00 de       	bis	r14,	r0	
  7e:	00 02       	bra	#4		;r2 As==10
  delay5us();
  80:	00 71       	subc	r1,	r0	
  82:	02 de       	bis	r14,	r2	
  if(sda_test) i=1; else i=0;
  84:	00 e0       	xor	r0,	r0	
  86:	00 02       	bra	#4		;r2 As==10
  delay5us();
  88:	00 71       	subc	r1,	r0	
  8a:	04 e0       	xor	r0,	r4	
  8c:	00 e2       	xor	r2,	r0	
  scl_off;
  8e:	00 02       	bra	#4		;r2 As==10
  90:	00 71       	subc	r1,	r0	
  delay5us();
  92:	06 e2       	xor	r2,	r6	
  94:	00 28       	jnc	$+2      	;abs 0x96
  96:	01 02       	mova	#4,	r1	;r2 As==10
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  98:	00 71       	subc	r1,	r0	
  9a:	08 00       	mova	@r0,	r8	
  9c:	00 00       	bra	@r0		
  9e:	00 dc       	bis	r12,	r0	
  a0:	00 f2       	and	r2,	r0	
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a2:	00 01       	bra	@r1		
  a4:	00 5f       	add	r15,	r0	
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  a6:	f2 00       	suba	r0,	r2	
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a8:	22 01 01 00 	mova	&0x10001,r2	
}

void i2c_send_ack( char confirmation)
{
  ac:	59 00       	rrcm	#1,	r9	
  ae:	00 00       	bra	@r0		
  b0:	00 e4       	xor	r4,	r0	
  SDA_OUT();
  b2:	00 f2       	and	r2,	r0	
  b4:	00 03       	bra	#2		;r3 As==10
  b6:	00 09       	bra	@r9		
  b8:	80 9f 0c 01 	cmp	r15,	0x010c	;PC rel. 0x001c8
  if(confirmation) sda_on; else sda_off;
  bc:	12 01       	mova	@r1+,	r2	
  be:	05 00       	mova	@r0,	r5	
  scl_on;
  c0:	7a 00 31 26 	mova	r0,	9777(r10);0x2631(r10)
  delay5us();
  c4:	9f 20       	jnz	$+320    	;abs 0x204
  c6:	01 24       	jz	$+4      	;abs 0xca
  c8:	01 05       	mova	@r5,	r1	
  scl_off;
  ca:	00 7a       	subc	r10,	r0	
  cc:	00 31       	jn	$+514    	;abs 0x2ce
  delay5us();
  ce:	26 9f       	cmp	@r15,	r6	
  d0:	00 00       	bra	@r0		
  d2:	00 00       	bra	@r0		
  sda_off;
  d4:	ea 00       	adda	r0,	r10	
  return i;
}

void i2c_send_ack( char confirmation)
{
  SDA_OUT();
  d6:	f2 00       	suba	r0,	r2	
  d8:	02 00       	mova	@r0,	r2	
  da:	30 9f       	cmp	@r15+,	r0	
  scl_off;
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
  dc:	00 00       	bra	@r0		
  de:	00 00       	bra	@r0		
  e0:	28 01 2a 01 	mova	&0x1012a,r8	
{
   char mask = 0x80;
   char i;

  e4:	02 00       	mova	@r0,	r2	
  e6:	71 02 2a 01 	mova	r2,	298(r1)	;0x012a(r1)
  ea:	2c 01 02 00 	mova	&0x10002,r12	
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
{
  ee:	71 04 2c 01 	mova	r4,	300(r1)	;0x012c(r1)
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
  f2:	66 01 02 00 	mova	r1,	&0x60002
    if(b & mask) sda_on; else sda_off;
  f6:	71 06 00 00 	mova	r6,	0(r1)	;0x0000(r1)
    delay5us();
  fa:	00 00       	bra	@r0		
  fc:	32 01 36 01 	mova	310(r1),r2	;0x0136(r1)
    scl_on;
 100:	02 00       	mova	@r0,	r2	
    delay5us();
 102:	30 9f       	cmp	@r15+,	r0	
 104:	00 00       	bra	@r0		
 106:	00 00       	bra	@r0		
    scl_off;
 108:	2c 01 36 01 	mova	&0x10136,r12	
 10c:	02 00       	mova	@r0,	r2	
void i2c_bwrite( char b)
{
   char mask = 0x80;
   char i;

  SDA_OUT();
 10e:	30 9f       	cmp	@r15+,	r0	
    if(b & mask) sda_on; else sda_off;
    delay5us();
    scl_on;
    delay5us();
    scl_off;
    delay5us();
 110:	3a 01 4c 01 	mova	332(r1),r10	;0x014c(r1)
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
 114:	01 00       	mova	@r0,	r1	
 116:	5b 4c 01 64 	mov.b	25601(r12),r11	;0x6401(r12)
 11a:	01 01       	mova	@r1,	r1	
 11c:	00 5b       	add	r11,	r0	
 11e:	64 01 66 01 	mova	r1,	&0x40166
    scl_on;
    delay5us();
    scl_off;
    delay5us();
    mask >>= 1;
  }
 122:	01 00       	mova	@r0,	r1	
 124:	5f 00       	rrcm	#1,	r15	
 126:	00 00       	bra	@r0		
}

 char i2c_bread(void)
 128:	00 66       	addc	r6,	r0	
 12a:	01 68       	addc	r8,	r1	
{
   char i;
   char bin = 0;

 12c:	01 02       	mova	#4,	r1	;r2 As==10
 12e:	00 71       	subc	r1,	r0	
 130:	02 68       	addc	r8,	r2	
 132:	01 86       	sub	r6,	r1	
  }
}

 char i2c_bread(void)
{
   char i;
 134:	01 02       	mova	#4,	r1	;r2 As==10
   char bin = 0;

  SDA_IN();
  for (i=0; i<8; i++)
  {
 136:	00 71       	subc	r1,	r0	
 138:	04 00       	mova	@r0,	r4	
    bin <<= 1;
 13a:	00 00       	bra	@r0		
 13c:	00 68       	addc	r8,	r0	
    scl_on;
 13e:	01 78       	subc	r8,	r1	
 140:	01 02       	mova	#4,	r1	;r2 As==10
    delay5us();
 142:	00 30       	jn	$+2      	;abs 0x144
 144:	9f 78 01 7f 	subc	32513(r8),257(r15);0x7f01(r8), 0x0101(r15)
 148:	01 01 
 14a:	00 5f       	add	r15,	r0	
    if (sda_test) bin += 1;
 14c:	00 00       	bra	@r0		
 14e:	00 00       	bra	@r0		
    delay5us();
 150:	86 01 88 01 	mova	#0x10188,r6	
 154:	02 00       	mova	@r0,	r2	
    scl_off;
 156:	71 02 88 01 	mova	r2,	392(r1)	;0x0188(r1)
 15a:	a8 01 02 00 	adda	#0x10002,r8	
    delay5us();
  }

  return bin;
 15e:	71 04 00 00 	mova	r4,	0(r1)	;0x0000(r1)
 162:	00 00       	bra	@r0		
 164:	86 01 8f 01 	mova	#0x1018f,r6	
// ****************************************************************
//
 char i2c_find_device(void)
{
   char status = 0;

 168:	01 00       	mova	@r0,	r1	
 16a:	5f 00       	rrcm	#1,	r15	
  i2c_start();
 16c:	00 00       	bra	@r0		
 16e:	00 88       	sub	r8,	r0	
 170:	01 9a       	cmp	r10,	r1	
 172:	01 02       	mova	#4,	r1	;r2 As==10
  i2c_bwrite(i2c_slave_address);
 174:	00 30       	jn	$+2      	;abs 0x176
 176:	9f 9a 01 a1 	cmp	-24319(r10),257(r15);0xa101(r10), 0x0101(r15)
 17a:	01 01 
  status = i2c_recv_ack();
 17c:	00 5f       	add	r15,	r0	
 17e:	00 00       	bra	@r0		
  i2c_stop();

  return status;
 180:	00 00       	bra	@r0		
 182:	a8 01 aa 01 	adda	#0x101aa,r8	
}

 char i2c_write_dummy( char b)
 186:	02 00       	mova	@r0,	r2	
{
   char status = 0;

 188:	71 02 aa 01 	mova	r2,	426(r1)	;0x01aa(r1)
 18c:	ac 01 02 00 	adda	#0x10002,r12	
  i2c_start();
 190:	71 04 ac 01 	mova	r4,	428(r1)	;0x01ac(r1)
 194:	ae 01 02 00 	adda	#0x10002,r14	
  i2c_bwrite(b);
 198:	71 06 ae 01 	mova	r6,	430(r1)	;0x01ae(r1)
  status = i2c_recv_ack();
 19c:	f0 01       	suba	r1,	r0	
 19e:	02 00       	mova	@r0,	r2	
 1a0:	71 08 00 00 	mova	r8,	0(r1)	;0x0000(r1)
  i2c_stop();

  return status;
 1a4:	00 00       	bra	@r0		
 1a6:	a8 01 b5 01 	adda	#0x101b5,r8	
}

 char i2c_write_byte( char reg,  char dat)
 1aa:	01 00       	mova	@r0,	r1	
 1ac:	5f b5 01 d0 	bit.b	-12287(r5),r15	;0xd001(r5)
 1b0:	01 01       	mova	@r1,	r1	
{
   char status = 0;

 1b2:	00 59       	add	r9,	r0	
 1b4:	00 00       	bra	@r0		
  i2c_start();
 1b6:	00 00       	bra	@r0		
 1b8:	a8 01 b5 01 	adda	#0x101b5,r8	
 1bc:	01 00       	mova	@r0,	r1	
  i2c_bwrite(i2c_slave_address);
 1be:	5e b5 01 dc 	bit.b	-9215(r5),r14	;0xdc01(r5)
 1c2:	01 01       	mova	@r1,	r1	
  status += i2c_recv_ack();
 1c4:	00 5b       	add	r11,	r0	
 1c6:	00 00       	bra	@r0		
 1c8:	00 00       	bra	@r0		
  i2c_bwrite(reg);
 1ca:	b2 01 c4 01 	suba	#0x101c4,r2	
 1ce:	02 00       	mova	@r0,	r2	
  status += i2c_recv_ack();
 1d0:	30 9f       	cmp	@r15+,	r0	
 1d2:	c4 01       	mova	r1,	r4	
 1d4:	c6 01       	mova	r1,	r6	
  i2c_bwrite(dat);
 1d6:	01 00       	mova	@r0,	r1	
 1d8:	5f c6 01 d0 	bic.b	-12287(r6),r15	;0xd001(r6)
  status += i2c_recv_ack();
 1dc:	01 01       	mova	@r1,	r1	
 1de:	00 5a       	add	r10,	r0	
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 1e0:	d0 01       	cmpa	r1,	r0	
 1e2:	d2 01       	cmpa	r1,	r2	
  status += i2c_recv_ack();
  i2c_bwrite(dat);
  status += i2c_recv_ack();
  i2c_stop();

  return status;
 1e4:	06 00       	mova	@r0,	r6	
 1e6:	7f 00 7a 00 	mova	r0,	122(r15);0x007a(r15)
 1ea:	22 9f       	cmp	@r15,	r2	
 1ec:	d2 01       	cmpa	r1,	r2	
 1ee:	dc 01       	cmpa	r1,	r12	
}

char i2c_write_multiples( char reg,  char dat[],  int len)
 1f0:	06 00       	mova	@r0,	r6	
 1f2:	79 00 7a 00 	mova	r0,	122(r9)	;0x007a(r9)
 1f6:	22 9f       	cmp	@r15,	r2	
 1f8:	dc 01       	cmpa	r1,	r12	
 1fa:	df 01       	cmpa	r1,	r15	
 1fc:	09 00       	mova	@r0,	r9	
{
  int i = 0, status = 0;

 1fe:	79 00 7a 00 	mova	r0,	122(r9)	;0x007a(r9)
  i2c_start();
 202:	22 7f       	subc	@r15,	r2	
 204:	00 22       	jnz	$-1022   	;abs 0xfe06
 206:	9f df 01 ea 	bis	-5631(r15),2305(r15);0xea01(r15), 0x0901(r15)
 20a:	01 09 
  i2c_bwrite(i2c_slave_address);
 20c:	00 79       	subc	r9,	r0	
 20e:	00 7a       	subc	r10,	r0	
  status += i2c_recv_ack();
 210:	00 22       	jnz	$-1022   	;abs 0xfe12
 212:	7b 00 22 9f 	mova	r0,	-24798(r11);0x9f22(r11)
  i2c_bwrite(reg);
 216:	ea 01       	adda	r1,	r10	
 218:	f0 01       	suba	r1,	r0	
 21a:	01 00       	mova	@r0,	r1	
 21c:	5f 00       	rrcm	#1,	r15	
char i2c_write_multiples( char reg,  char dat[],  int len)
{
  int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 21e:	00 00       	bra	@r0		
 220:	00 f0       	and	r0,	r0	
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 222:	01 f2       	and	r2,	r1	
  status += i2c_recv_ack();
 224:	01 02       	mova	#4,	r1	;r2 As==10
 226:	00 71       	subc	r1,	r0	
 228:	02 f2       	and	r2,	r2	
 22a:	01 f4       	and	r4,	r1	
 22c:	01 02       	mova	#4,	r1	;r2 As==10
  while((!status) && (i<len))
  {
 22e:	00 71       	subc	r1,	r0	

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 230:	04 f4       	and	r4,	r4	
 232:	01 f6       	and	r6,	r1	
  status += i2c_recv_ack();
  i2c_stop();

  return status;
}

 234:	01 02       	mova	#4,	r1	;r2 As==10
 236:	00 71       	subc	r1,	r0	
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  while((!status) && (i<len))
  {
 238:	06 f6       	and	r6,	r6	
 23a:	01 f8       	and	r8,	r1	
 23c:	01 02       	mova	#4,	r1	;r2 As==10
    i2c_bwrite(dat[i++]);
 23e:	00 71       	subc	r1,	r0	
 240:	08 f8       	and	r8,	r8	
 242:	01 5c       	add	r12,	r1	

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 244:	02 02       	mova	#4,	r2	;r2 As==10
 246:	00 71       	subc	r1,	r0	
  while((!status) && (i<len))
  {
    i2c_bwrite(dat[i++]);
    status += i2c_recv_ack();
  }
 248:	0a 00       	mova	@r0,	r10	
 24a:	00 00       	bra	@r0		
  i2c_stop();


  return status;
 24c:	00 f0       	and	r0,	r0	
 24e:	01 01       	mova	@r1,	r1	
 250:	02 01       	mova	@r1,	r2	
 252:	00 5f       	add	r15,	r0	
 254:	01 02       	mova	#4,	r1	;r2 As==10
 256:	50 02       	rlam	#1,	r0	

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
  status += i2c_recv_ack();
 258:	01 00       	mova	@r0,	r1	
 25a:	58 58 02 5c 	add.b	23554(r8),r8	;0x5c02(r8)


  return status;
}

 char i2c_write16_byte( int reg,  char dat)
 25e:	02 01       	mova	@r1,	r2	
 260:	00 58       	add	r8,	r0	
 262:	00 00       	bra	@r0		
 264:	00 00       	bra	@r0		
 266:	f0 01       	suba	r1,	r0	
 268:	01 02       	mova	#4,	r1	;r2 As==10
{
  char status = 0;

 26a:	01 00       	mova	@r0,	r1	
 26c:	5e 01       	rram	#1,	r14	
  i2c_start();
 26e:	02 52       	rla	r2		
 270:	02 01       	mova	@r1,	r2	
 272:	00 59       	add	r9,	r0	
 274:	58 02       	rlam	#1,	r8	
  i2c_bwrite(i2c_slave_address);
 276:	5c 02       	rlam	#1,	r12	
 278:	01 00       	mova	@r0,	r1	
 27a:	59 00       	rrcm	#1,	r9	
  status += i2c_recv_ack();
 27c:	00 00       	bra	@r0		
 27e:	00 f0       	and	r0,	r0	
 280:	01 01       	mova	@r1,	r1	
 282:	02 01       	mova	@r1,	r2	
 284:	00 5d       	add	r13,	r0	
 286:	01 02       	mova	#4,	r1	;r2 As==10
 288:	54 02       	rlam	#1,	r4	
 28a:	01 00       	mova	@r0,	r1	
 28c:	5a 58 02 5c 	add.b	23554(r8),r10	;0x5c02(r8)
  i2c_bwrite(reg/256);
 290:	02 01       	mova	@r1,	r2	
 292:	00 5a       	add	r10,	r0	
 294:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 296:	00 00       	bra	@r0		
 298:	fe 01       	suba	r1,	r14	
 29a:	2e 02 02 00 	mova	&0x20002,r14	
 29e:	30 9f       	cmp	@r15+,	r0	
 2a0:	2e 02 30 02 	mova	&0x20230,r14	
 2a4:	03 00       	.word	0x0003;	????	Illegal as address instr
 2a6:	7b 01 9f 30 	mova	r1,	12447(r11);0x309f(r11)
 2aa:	02 34       	jge	$+6      	;abs 0x2b0
 2ac:	02 01       	mova	@r1,	r2	
 2ae:	00 5b       	add	r11,	r0	
  i2c_bwrite(reg%256);
 2b0:	34 02 46 02 	mova	&0x0246,r4	
 2b4:	03 00       	.word	0x0003;	????	Illegal as address instr
  status += i2c_recv_ack();
 2b6:	7b 01 9f 58 	mova	r1,	22687(r11);0x589f(r11)
 2ba:	02 5c       	add	r12,	r2	
  i2c_bwrite(dat);
 2bc:	02 02       	mova	#4,	r2	;r2 As==10
 2be:	00 30       	jn	$+2      	;abs 0x2c0
 2c0:	9f 00 00 00 	cmpa	#0x00000,r15	
  status += i2c_recv_ack();
 2c4:	00 fe       	and	r14,	r0	
  char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 2c6:	01 10       	rrc	r1		
 2c8:	02 02       	mova	#4,	r2	;r2 As==10
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
 2ca:	00 30       	jn	$+2      	;abs 0x2cc
  status += i2c_recv_ack();
  i2c_bwrite(dat);
  status += i2c_recv_ack();
  i2c_stop();

  return status;
 2cc:	9f 10 02 12 	swpb	4610(r15)	;0x1202(r15)
 2d0:	02 01       	mova	@r1,	r2	
 2d2:	00 5f       	add	r15,	r0	
 2d4:	12 02       	mova	#8,	r2	;r2 As==11
 2d6:	24 02 01 00 	mova	&0x20001,r4	
 2da:	5b 24       	jz	$+184    	;abs 0x392
}

 char i2c_write16_multiples( int reg,  char dat[], int len)
 2dc:	02 2e       	jc	$-1018   	;abs 0xfee2
 2de:	02 01       	mova	@r1,	r2	
 2e0:	00 5e       	add	r14,	r0	
 2e2:	2e 02 34 02 	mova	&0x20234,r14	
 2e6:	01 00       	mova	@r0,	r1	
 2e8:	5f 44 02 48 	mov.b	18434(r4),r15	;0x4802(r4)
{
   int i = 0, status = 0;

 2ec:	02 01       	mova	@r1,	r2	
  i2c_start();
 2ee:	00 5f       	add	r15,	r0	
 2f0:	58 02       	rlam	#1,	r8	
 2f2:	5c 02       	rlam	#1,	r12	
 2f4:	01 00       	mova	@r0,	r1	
  i2c_bwrite(i2c_slave_address);
 2f6:	5e 00       	rrcm	#1,	r14	
 2f8:	00 00       	bra	@r0		
 2fa:	00 5c       	add	r12,	r0	
  status += i2c_recv_ack();
 2fc:	02 5e       	add	r14,	r2	
 2fe:	02 02       	mova	#4,	r2	;r2 As==10
 300:	00 71       	subc	r1,	r0	
 302:	02 5e       	add	r14,	r2	
 304:	02 60       	addc	r0,	r2	
 306:	02 02       	mova	#4,	r2	;r2 As==10
 308:	00 71       	subc	r1,	r0	
 30a:	04 60       	addc	r0,	r4	
 30c:	02 62       	rlc	r2		
 30e:	02 02       	mova	#4,	r2	;r2 As==10
  i2c_bwrite(reg/256);
 310:	00 71       	subc	r1,	r0	
 312:	06 62       	addc	r2,	r6	
 314:	02 64       	addc	r4,	r2	
 316:	02 02       	mova	#4,	r2	;r2 As==10
 char i2c_write16_multiples( int reg,  char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 318:	00 71       	subc	r1,	r0	
 31a:	08 64       	addc	r4,	r8	
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 31c:	02 66       	addc	r6,	r2	
 31e:	02 02       	mova	#4,	r2	;r2 As==10
  status += i2c_recv_ack();
 320:	00 71       	subc	r1,	r0	
 322:	0a 66       	addc	r6,	r10	
 324:	02 dc       	bis	r12,	r2	
 326:	02 02       	mova	#4,	r2	;r2 As==10
 328:	00 71       	subc	r1,	r0	
 32a:	0c 00       	mova	@r0,	r12	
 32c:	00 00       	bra	@r0		
 32e:	00 5c       	add	r12,	r0	
 330:	02 6d       	addc	r13,	r2	
 332:	02 01       	mova	@r1,	r2	
 334:	00 5f       	add	r15,	r0	
 336:	6d 02 c2 02 	mova	r2,	&0xd02c2
  i2c_bwrite(reg%256);
 33a:	01 00       	mova	@r0,	r1	
 33c:	5b 00       	rrcm	#1,	r11	
 33e:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 340:	00 5c       	add	r12,	r0	
 342:	02 6d       	addc	r13,	r2	
 344:	02 01       	mova	@r1,	r2	
 346:	00 5e       	add	r14,	r0	
 348:	6d 02 d2 02 	mova	r2,	&0xd02d2
 34c:	01 00       	mova	@r0,	r1	
 34e:	57 00       	rrcm	#1,	r7	
  status += i2c_recv_ack();
  i2c_stop();

  return status;
}

 350:	00 00       	bra	@r0		
 352:	00 6a       	addc	r10,	r0	
  i2c_bwrite(reg/256);
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
  while((!status) && (i<len))
  {
 354:	02 7c       	subc	r12,	r2	
 356:	02 02       	mova	#4,	r2	;r2 As==10
 358:	00 30       	jn	$+2      	;abs 0x35a
    i2c_bwrite(dat[i++]);
 35a:	9f 7c 02 8c 	subc	-29694(r12),258(r15);0x8c02(r12), 0x0102(r15)
 35e:	02 01 
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
 360:	00 5f       	add	r15,	r0	
 362:	8c 02 96 02 	mova	#0x20296,r12	
  while((!status) && (i<len))
  {
    i2c_bwrite(dat[i++]);
    status += i2c_recv_ack();
  }
 366:	01 00       	mova	@r0,	r1	
  i2c_stop();


  return status;
 368:	59 96 02 ac 	cmp.b	-21502(r6),r9	;0xac02(r6)
 36c:	02 06       	mova	@r6,	r2	
 36e:	00 7f       	subc	r15,	r0	
 370:	00 79       	subc	r9,	r0	
 372:	00 22       	jnz	$-1022   	;abs 0xff74
}

 char i2c_read_byte( char reg,  char *dat)
 374:	9f ac 02 b6 	dadd	-18942(r12),1538(r15);0xb602(r12), 0x0602(r15)
 378:	02 06 
 37a:	00 78       	subc	r8,	r0	
 37c:	00 79       	subc	r9,	r0	
 37e:	00 22       	jnz	$-1022   	;abs 0xff80
{
   char status = 0;

 380:	9f b6 02 b8 	bit	-18430(r6),2306(r15);0xb802(r6), 0x0902(r15)
 384:	02 09 
  i2c_start();
 386:	00 78       	subc	r8,	r0	
 388:	00 79       	subc	r9,	r0	
 38a:	00 22       	jnz	$-1022   	;abs 0xff8c
  i2c_bwrite(i2c_slave_address);
 38c:	7f 00 22 9f 	mova	r0,	-24798(r15);0x9f22(r15)
 390:	b8 02 c2 02 	suba	#0x202c2,r8	
  status += i2c_recv_ack();
 394:	09 00       	mova	@r0,	r9	
 396:	78 00 79 00 	mova	r0,	121(r8)	;0x0079(r8)
  i2c_bwrite(reg);
 39a:	22 7a       	subc	@r10,	r2	
 39c:	00 22       	jnz	$-1022   	;abs 0xff9e
  status += i2c_recv_ack();
 39e:	9f c2 02 c5 	bic	&0xc502,3074(r15);0x0c02(r15)
 3a2:	02 0c 
  i2c_start();
 3a4:	00 78       	subc	r8,	r0	
 3a6:	00 79       	subc	r9,	r0	
 3a8:	00 22       	jnz	$-1022   	;abs 0xffaa
 3aa:	7a 00 22 7f 	mova	r0,	32546(r10);0x7f22(r10)
  i2c_bwrite(i2c_slave_address+1);
 3ae:	00 22       	jnz	$-1022   	;abs 0xffb0
 3b0:	9f c5 02 d4 	bic	-11262(r5),3074(r15);0xd402(r5), 0x0c02(r15)
 3b4:	02 0c 
  status += i2c_recv_ack();
 3b6:	00 78       	subc	r8,	r0	
 3b8:	00 79       	subc	r9,	r0	
  *dat = i2c_bread();
 3ba:	00 22       	jnz	$-1022   	;abs 0xffbc
 3bc:	7a 00 22 7b 	mova	r0,	31522(r10);0x7b22(r10)
  i2c_send_ack(NACK);
 3c0:	00 22       	jnz	$-1022   	;abs 0xffc2
 3c2:	9f d4 02 dc 	bis	-9214(r4),258(r15);0xdc02(r4), 0x0102(r15)
 3c6:	02 01 
  i2c_stop();

  return status;
 3c8:	00 5f       	add	r15,	r0	
 3ca:	00 00       	bra	@r0		
 3cc:	00 00       	bra	@r0		
 3ce:	dc 02       	cmpa	r2,	r12	
 3d0:	de 02       	cmpa	r2,	r14	
 3d2:	02 00       	mova	@r0,	r2	
 3d4:	71 02 de 02 	mova	r2,	734(r1)	;0x02de(r1)
}

 char i2c_read_multiples( char reg,  char dat[], int len)
 3d8:	e0 02       	adda	r2,	r0	
 3da:	02 00       	mova	@r0,	r2	
 3dc:	71 04 e0 02 	mova	r4,	736(r1)	;0x02e0(r1)
 3e0:	e2 02       	adda	r2,	r2	
 3e2:	02 00       	mova	@r0,	r2	
{
   int i = 0, status = 0;

 3e4:	71 06 e2 02 	mova	r6,	738(r1)	;0x02e2(r1)
  i2c_start();
 3e8:	e4 02       	adda	r2,	r4	
 3ea:	02 00       	mova	@r0,	r2	
 3ec:	71 08 e4 02 	mova	r8,	740(r1)	;0x02e4(r1)
  i2c_bwrite(i2c_slave_address);
 3f0:	74 03 02 00 	mova	#0,	2(r4)	;r3 As==00, 0x0002(r4)
 3f4:	71 0a 00 00 	mova	r10,	0(r1)	;0x0000(r1)
  status += i2c_recv_ack();
 3f8:	00 00       	bra	@r0		
 3fa:	dc 02       	cmpa	r2,	r12	
  i2c_bwrite(reg);
 3fc:	ed 02       	adda	r2,	r13	
 3fe:	01 00       	mova	@r0,	r1	
 400:	5f ed 02 6c 	xor.b	27650(r13),r15	;0x6c02(r13)
 char i2c_read_multiples( char reg,  char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 404:	03 01       	.word	0x0103;	????	Illegal as address instr
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 406:	00 58       	add	r8,	r0	
  status += i2c_recv_ack();
 408:	00 00       	bra	@r0		
 40a:	00 00       	bra	@r0		
  i2c_start();
 40c:	dc 02       	cmpa	r2,	r12	
 40e:	ed 02       	adda	r2,	r13	
 410:	01 00       	mova	@r0,	r1	
 412:	5e ed 02 6e 	xor.b	28162(r13),r14	;0x6e02(r13)
  i2c_bwrite(i2c_slave_address+1);
 416:	03 01       	.word	0x0103;	????	Illegal as address instr
 418:	00 59       	add	r9,	r0	
 41a:	00 00       	bra	@r0		
 41c:	00 00       	bra	@r0		
  status += i2c_recv_ack();

 41e:	dc 02       	cmpa	r2,	r12	
 420:	ed 02       	adda	r2,	r13	
 422:	01 00       	mova	@r0,	r1	
 424:	5d ed 02 70 	xor.b	28674(r13),r13	;0x7002(r13)
  while((!status) && (i<len-1))
  {  
 428:	03 01       	.word	0x0103;	????	Illegal as address instr
 42a:	00 5a       	add	r10,	r0	
 42c:	00 00       	bra	@r0		
    dat[i] = i2c_bread();
 42e:	00 00       	bra	@r0		
 430:	ea 02       	adda	r2,	r10	
 432:	4a 03       	rrum.a	#1,	r10	
    i2c_send_ack(ACK);
 434:	02 00       	mova	@r0,	r2	
 436:	30 9f       	cmp	@r15+,	r0	
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 438:	4a 03       	rrum.a	#1,	r10	
 43a:	4c 03       	rrum.a	#1,	r12	
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
}

 43c:	03 00       	.word	0x0003;	????	Illegal as address instr
 43e:	7b 01 9f 4c 	mova	r1,	19615(r11);0x4c9f(r11)
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 442:	03 50       	.word	0x5003;	????	Illegal as 2-op instr
    dat[i] = i2c_bread();
 444:	03 01       	.word	0x0103;	????	Illegal as address instr
 446:	00 5b       	add	r11,	r0	
 448:	50 03       	rrum	#1,	r0	
    i2c_send_ack(ACK);
 44a:	62 03 03 00 	mova	#0,	&0x20003;r3 As==00
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 44e:	7b 01 9f 00 	mova	r1,	159(r11);0x009f(r11)
  while((!status) && (i<len-1))
  {  
    dat[i] = i2c_bread();
    i2c_send_ack(ACK);
    i++;
  }
 452:	00 00       	bra	@r0		
 454:	00 ea       	xor	r10,	r0	
 456:	02 fc       	and	r12,	r2	
 458:	02 02       	mova	#4,	r2	;r2 As==10
  dat[i] = i2c_bread();
 45a:	00 30       	jn	$+2      	;abs 0x45c
 45c:	9f fc 02 0c 	and	3074(r12),259(r15);0x0c02(r12), 0x0103(r15)
 460:	03 01 
  i2c_send_ack(NACK);
 462:	00 5f       	add	r15,	r0	
  i2c_stop();

  return status;
 464:	0c 03       	mova	#2,	r12	;r3 As==10
 466:	1e 03       	mova	#-1,	r14	;r3 As==11
 468:	01 00       	mova	@r0,	r1	
 46a:	5b 20       	jnz	$+184    	;abs 0x522
 46c:	03 40       	.word	0x4003;	????	Illegal as 2-op instr
 46e:	03 01       	.word	0x0103;	????	Illegal as address instr
  i2c_bwrite(reg);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 470:	00 5b       	add	r11,	r0	
 472:	40 03       	rrum.a	#1,	r0	
 474:	52 03       	rrum	#1,	r2	
 476:	01 00       	mova	@r0,	r1	
  i2c_stop();

  return status;
}

 char i2c_read16_byte( int reg,  char *dat)
 478:	5f 60 03 67 	addc.b	0x6703,	r15	;PC rel. 0x06b7f
 47c:	03 01       	.word	0x0103;	????	Illegal as address instr
 47e:	00 5f       	add	r15,	r0	
 480:	00 00       	bra	@r0		
 482:	00 00       	bra	@r0		
 484:	74 03 76 03 	mova	#0,	886(r4)	;r3 As==00, 0x0376(r4)
{
   char status = 0;

 488:	02 00       	mova	@r0,	r2	
  i2c_start();
 48a:	71 02 76 03 	mova	r2,	886(r1)	;0x0376(r1)
 48e:	78 03 02 00 	mova	#0,	2(r8)	;r3 As==00, 0x0002(r8)
  i2c_bwrite(i2c_slave_address);
 492:	71 04 78 03 	mova	r4,	888(r1)	;0x0378(r1)
 496:	7a 03 02 00 	mova	#0,	2(r10)	;r3 As==00, 0x0002(r10)
  status += i2c_recv_ack();
 49a:	71 06 7a 03 	mova	r6,	890(r1)	;0x037a(r1)
 49e:	7c 03 02 00 	mova	#0,	2(r12)	;r3 As==00, 0x0002(r12)
 4a2:	71 08 7c 03 	mova	r8,	892(r1)	;0x037c(r1)
 4a6:	d6 03       	tsta	r6		
 4a8:	02 00       	mova	@r0,	r2	
 4aa:	71 0a 00 00 	mova	r10,	0(r1)	;0x0000(r1)
  i2c_bwrite(reg/256);
 4ae:	00 00       	bra	@r0		
 4b0:	74 03 83 03 	mova	#0,	899(r4)	;r3 As==00, 0x0383(r4)
  status += i2c_recv_ack();
 4b4:	01 00       	mova	@r0,	r1	
 4b6:	5f 83       	dec.b	r15		
 4b8:	03 b2       	.word	0xb203;	????	Illegal as 2-op instr
 4ba:	03 01       	.word	0x0103;	????	Illegal as address instr
 4bc:	00 5a       	add	r10,	r0	
 4be:	00 00       	bra	@r0		
 4c0:	00 00       	bra	@r0		
 4c2:	74 03 83 03 	mova	#0,	899(r4)	;r3 As==00, 0x0383(r4)
 4c6:	01 00       	mova	@r0,	r1	
 4c8:	5e 83       	dec.b	r14		
 4ca:	03 d4       	.word	0xd403;	????	Illegal as 2-op instr
  i2c_bwrite(reg%256);
 4cc:	03 01       	.word	0x0103;	????	Illegal as address instr
 4ce:	00 5b       	add	r11,	r0	
 4d0:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 4d2:	00 00       	bra	@r0		
 4d4:	80 03 92 03 	bra	#0x30392	
  i2c_start();
 4d8:	02 00       	mova	@r0,	r2	
 4da:	30 9f       	cmp	@r15+,	r0	
 4dc:	92 03 94 03 	cmpa	#0x30394,r2	
  i2c_bwrite(i2c_slave_address+1);
 4e0:	01 00       	mova	@r0,	r1	
 4e2:	5f 94 03 9e 	cmp.b	-25085(r4),r15	;0x9e03(r4)
  status += i2c_recv_ack();
 4e6:	03 01       	.word	0x0103;	????	Illegal as address instr
 4e8:	00 59       	add	r9,	r0	
 4ea:	9e 03 a1 03 	cmpa	#0x303a1,r14	
  *dat = i2c_bread();
 4ee:	06 00       	mova	@r0,	r6	
 4f0:	7f 00 79 00 	mova	r0,	121(r15);0x0079(r15)
  i2c_send_ack(NACK);
 4f4:	22 9f       	cmp	@r15,	r2	
 4f6:	a1 03 b2 03 	adda	#0x303b2,r1	
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 4fa:	06 00       	mova	@r0,	r6	
  status += i2c_recv_ack();
  i2c_bwrite(reg%256);
 4fc:	78 00 79 00 	mova	r0,	121(r8)	;0x0079(r8)
  status += i2c_recv_ack();
  *dat = i2c_bread();
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
 500:	22 9f       	cmp	@r15,	r2	
 502:	b2 03 b5 03 	suba	#0x303b5,r2	
 506:	09 00       	mova	@r0,	r9	
 508:	78 00 79 00 	mova	r0,	121(r8)	;0x0079(r8)
 50c:	22 7f       	subc	@r15,	r2	
}

 char i2c_read16_multiples( int reg, char dat[], int len)
 50e:	00 22       	jnz	$-1022   	;abs 0x110
 510:	9f b5 03 ce 	bit	-12797(r5),2307(r15);0xce03(r5), 0x0903(r15)
 514:	03 09 
 516:	00 78       	subc	r8,	r0	
 518:	00 79       	subc	r9,	r0	
 51a:	00 22       	jnz	$-1022   	;abs 0x11c
{
   int i = 0, status = 0;

 51c:	7a 00 22 9f 	mova	r0,	-24798(r10);0x9f22(r10)
  i2c_start();
 520:	ce 03       	mova	#0,	r14	;r3 As==00
 522:	d6 03       	tsta	r6		
 524:	01 00       	mova	@r0,	r1	
 526:	5f 00       	rrcm	#1,	r15	
  i2c_bwrite(i2c_slave_address);
 528:	00 00       	bra	@r0		
 52a:	00 d6       	bis	r6,	r0	
 52c:	03 d8       	.word	0xd803;	????	Illegal as 2-op instr
  status += i2c_recv_ack();
 52e:	03 02       	.word	0x0203;	????	Illegal as address instr
 530:	00 71       	subc	r1,	r0	
 532:	02 d8       	bis	r8,	r2	
 534:	03 da       	.word	0xda03;	????	Illegal as 2-op instr
 536:	03 02       	.word	0x0203;	????	Illegal as address instr
 538:	00 71       	subc	r1,	r0	
 53a:	04 da       	bis	r10,	r4	
 53c:	03 dc       	.word	0xdc03;	????	Illegal as 2-op instr
 53e:	03 02       	.word	0x0203;	????	Illegal as address instr
 540:	00 71       	subc	r1,	r0	
  i2c_bwrite(reg/256);
 542:	06 dc       	bis	r12,	r6	
 544:	03 de       	.word	0xde03;	????	Illegal as 2-op instr
 546:	03 02       	.word	0x0203;	????	Illegal as address instr
 548:	00 71       	subc	r1,	r0	
 char i2c_read16_multiples( int reg, char dat[], int len)
{
   int i = 0, status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
 54a:	08 de       	bis	r14,	r8	
  status += i2c_recv_ack();
  i2c_bwrite(reg/256);
 54c:	03 78       	.word	0x7803;	????	Illegal as 2-op instr
  status += i2c_recv_ack();
 54e:	04 02       	mova	#4,	r4	;r2 As==10
 550:	00 71       	subc	r1,	r0	
 552:	0a 00       	mova	@r0,	r10	
 554:	00 00       	bra	@r0		
 556:	00 d6       	bis	r6,	r0	
 558:	03 e7       	.word	0xe703;	????	Illegal as 2-op instr
 55a:	03 01       	.word	0x0103;	????	Illegal as address instr
 55c:	00 5f       	add	r15,	r0	
 55e:	e7 03       	incda	r7		
 560:	36 04 01 00 	mova	1(r4),	r6	;0x0001(r4)
 564:	5b 70 04 78 	subc.b	0x7804,	r11	;PC rel. 0x07d6c
  i2c_bwrite(reg%256);
 568:	04 01       	mova	@r1,	r4	
 56a:	00 5b       	add	r11,	r0	
 56c:	00 00       	bra	@r0		
  status += i2c_recv_ack();
 56e:	00 00       	bra	@r0		
 570:	d6 03       	tsta	r6		
  i2c_start();
 572:	e7 03       	incda	r7		
 574:	01 00       	mova	@r0,	r1	
 576:	5e e7 03 56 	xor.b	22019(r7),r14	;0x5603(r7)
 57a:	04 01       	mova	@r1,	r4	
  i2c_bwrite(i2c_slave_address+1);
 57c:	00 5a       	add	r10,	r0	
 57e:	70 04 78 04 	mova	r4,	0x0478	;PC rel. 0x009f8
 582:	01 00       	mova	@r0,	r1	
  status += i2c_recv_ack();

 584:	5a 00       	rrcm	#1,	r10	
 586:	00 00       	bra	@r0		
 588:	00 d6       	bis	r6,	r0	
 58a:	03 e7       	.word	0xe703;	????	Illegal as 2-op instr
  while((!status) && (i<len-1))
  {  
 58c:	03 01       	.word	0x0103;	????	Illegal as address instr
 58e:	00 5d       	add	r13,	r0	
 590:	e7 03       	incda	r7		
 592:	22 04 01 00 	mova	&0x40001,r2	
    dat[i] = i2c_bread();
 596:	59 22       	jnz	$-844    	;abs 0x24a
 598:	04 50       	add	r0,	r4	
    i2c_send_ack(ACK);
 59a:	04 03       	mova	#2,	r4	;r3 As==10
 59c:	00 79       	subc	r9,	r0	
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 59e:	01 9f       	cmp	r15,	r1	
 5a0:	70 04 72 04 	mova	r4,	0x0472	;PC rel. 0x00a14
  i2c_send_ack(NACK);
  i2c_stop();

  return status;
}

 5a4:	01 00       	mova	@r0,	r1	
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

  while((!status) && (i<len-1))
  {  
 5a6:	59 74 04 76 	subc.b	30212(r4),r9	;0x7604(r4)
    dat[i] = i2c_bread();
 5aa:	04 03       	mova	#2,	r4	;r3 As==10
 5ac:	00 79       	subc	r9,	r0	
 5ae:	01 9f       	cmp	r15,	r1	
    i2c_send_ack(ACK);
 5b0:	00 00       	bra	@r0		
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 5b2:	00 00       	bra	@r0		
 5b4:	e4 03       	incda	r4		
  while((!status) && (i<len-1))
  {  
    dat[i] = i2c_bread();
    i2c_send_ack(ACK);
    i++;
  }
 5b6:	34 04 02 00 	mova	2(r4),	r4	;0x0002(r4)
 5ba:	30 9f       	cmp	@r15+,	r0	
 5bc:	34 04 38 04 	mova	1080(r4),r4	;0x0438(r4)
  dat[i] = i2c_bread();
 5c0:	02 00       	mova	@r0,	r2	
 5c2:	31 9f       	cmp	@r15+,	r1	
 5c4:	70 04 78 04 	mova	r4,	0x0478	;PC rel. 0x00a3e
  i2c_send_ack(NACK);
 5c8:	02 00       	mova	@r0,	r2	
  i2c_stop();

  return status;
 5ca:	30 9f       	cmp	@r15+,	r0	
 5cc:	00 00       	bra	@r0		
 5ce:	00 00       	bra	@r0		
 5d0:	e4 03       	incda	r4		
 5d2:	f6 03       	decda	r6		
 5d4:	02 00       	mova	@r0,	r2	
  i2c_bwrite(reg%256);
  status += i2c_recv_ack();
  i2c_start();
  i2c_bwrite(i2c_slave_address+1);
  status += i2c_recv_ack();

 5d6:	30 9f       	cmp	@r15+,	r0	
 5d8:	f6 03       	decda	r6		
 5da:	f8 03       	decda	r8		
 5dc:	01 00       	mova	@r0,	r1	
 5de:	5f f8 03 06 	and.b	1539(r8),r15	;0x0603(r8)
 5e2:	04 01       	mova	@r1,	r4	
 5e4:	00 58       	add	r8,	r0	
 5e6:	08 04       	mova	@r4,	r8	
 5e8:	1e 04       	mova	@r4+,	r14	
 5ea:	01 00       	mova	@r0,	r1	
 5ec:	58 1e 04 68 	.rpt	#8
				addcx	r8,	r4	
 5f0:	04 01       	mova	@r1,	r4	
 5f2:	00 58       	add	r8,	r0	
 5f4:	70 04 78 04 	mova	r4,	0x0478	;PC rel. 0x00a6e
 5f8:	01 00       	mova	@r0,	r1	
 5fa:	58 00       	rrcm	#1,	r8	
 5fc:	00 00       	bra	@r0		
 5fe:	00 78       	subc	r8,	r0	
 600:	04 7a       	subc	r10,	r4	
 602:	04 02       	mova	#4,	r4	;r2 As==10
 604:	00 71       	subc	r1,	r0	
 606:	02 7a       	subc	r10,	r2	
 608:	04 7c       	subc	r12,	r4	
 60a:	04 02       	mova	#4,	r4	;r2 As==10
 60c:	00 71       	subc	r1,	r0	
 60e:	04 7c       	subc	r12,	r4	
 610:	04 7e       	subc	r14,	r4	
 612:	04 02       	mova	#4,	r4	;r2 As==10
 614:	00 71       	subc	r1,	r0	
 616:	06 7e       	subc	r14,	r6	
 618:	04 80       	sub	r0,	r4	
 61a:	04 02       	mova	#4,	r4	;r2 As==10
 61c:	00 71       	subc	r1,	r0	
 61e:	08 80       	sub	r0,	r8	
 620:	04 82       	sub	r2,	r4	
 622:	04 02       	mova	#4,	r4	;r2 As==10
 624:	00 71       	subc	r1,	r0	
 626:	0a 82       	sub	r2,	r10	
 628:	04 0e       	mova	@r14,	r4	
 62a:	05 02       	mova	#4,	r5	;r2 As==10
 62c:	00 71       	subc	r1,	r0	
 62e:	0c 00       	mova	@r0,	r12	
 630:	00 00       	bra	@r0		
 632:	00 78       	subc	r8,	r0	
 634:	04 89       	sub	r9,	r4	
 636:	04 01       	mova	@r1,	r4	
 638:	00 5f       	add	r15,	r0	
 63a:	89 04 e6 04 	mova	#0x404e6,r9	
 63e:	01 00       	mova	@r0,	r1	
 640:	5b 00       	rrcm	#1,	r11	
 642:	00 00       	bra	@r0		
 644:	00 78       	subc	r8,	r0	
 646:	04 89       	sub	r9,	r4	
 648:	04 01       	mova	@r1,	r4	
 64a:	00 5e       	add	r14,	r0	
 64c:	89 04 0a 05 	mova	#0x4050a,r9	
 650:	01 00       	mova	@r0,	r1	
 652:	5a 00       	rrcm	#1,	r10	
 654:	00 00       	bra	@r0		
 656:	00 86       	sub	r6,	r0	
 658:	04 98       	cmp	r8,	r4	
 65a:	04 02       	mova	#4,	r4	;r2 As==10
 65c:	00 30       	jn	$+2      	;abs 0x65e
 65e:	9f 98 04 a8 	cmp	-22524(r8),260(r15);0xa804(r8), 0x0104(r15)
 662:	04 01 
 664:	00 5f       	add	r15,	r0	
 666:	a8 04 b2 04 	adda	#0x404b2,r8	
 66a:	01 00       	mova	@r0,	r1	
 66c:	58 b2 04 c8 	bit.b	&0xc804,r8	
 670:	04 06       	mova	@r6,	r4	
 672:	00 7f       	subc	r15,	r0	
 674:	00 78       	subc	r8,	r0	
 676:	00 22       	jnz	$-1022   	;abs 0x278
 678:	9f c8 04 d2 	bic	-11772(r8),1540(r15);0xd204(r8), 0x0604(r15)
 67c:	04 06 
 67e:	00 77       	subc	r7,	r0	
 680:	00 78       	subc	r8,	r0	
 682:	00 22       	jnz	$-1022   	;abs 0x284
 684:	9f d2 04 d5 	bis	&0xd504,2308(r15);0x0904(r15)
 688:	04 09 
 68a:	00 77       	subc	r7,	r0	
 68c:	00 78       	subc	r8,	r0	
 68e:	00 22       	jnz	$-1022   	;abs 0x290
 690:	7f 00 22 9f 	mova	r0,	-24798(r15);0x9f22(r15)
 694:	d5 04       	cmpa	r4,	r5	
 696:	e6 04       	adda	r4,	r6	
 698:	09 00       	mova	@r0,	r9	
 69a:	77 00 78 00 	mova	r0,	120(r7)	;0x0078(r7)
 69e:	22 79       	subc	@r9,	r2	
 6a0:	00 22       	jnz	$-1022   	;abs 0x2a2
 6a2:	9f e6 04 e9 	xor	-5884(r6),3076(r15);0xe904(r6), 0x0c04(r15)
 6a6:	04 0c 
 6a8:	00 77       	subc	r7,	r0	
 6aa:	00 78       	subc	r8,	r0	
 6ac:	00 22       	jnz	$-1022   	;abs 0x2ae
 6ae:	79 00 22 7f 	mova	r0,	32546(r9);0x7f22(r9)
 6b2:	00 22       	jnz	$-1022   	;abs 0x2b4
 6b4:	9f e9 04 04 	xor	1028(r9),3077(r15);0x0404(r9), 0x0c05(r15)
 6b8:	05 0c 
 6ba:	00 77       	subc	r7,	r0	
 6bc:	00 78       	subc	r8,	r0	
 6be:	00 22       	jnz	$-1022   	;abs 0x2c0
 6c0:	79 00 22 7b 	mova	r0,	31522(r9);0x7b22(r9)
 6c4:	00 22       	jnz	$-1022   	;abs 0x2c6
 6c6:	9f 04 05 0e 	cmpa	#0x40e05,r15	
 6ca:	05 01       	mova	@r1,	r5	
 6cc:	00 5f       	add	r15,	r0	
 6ce:	00 00       	bra	@r0		
 6d0:	00 00       	bra	@r0		
 6d2:	0e 05       	mova	@r5,	r14	
 6d4:	10 05       	bra	@r5+		
 6d6:	02 00       	mova	@r0,	r2	
 6d8:	71 02 10 05 	mova	r2,	1296(r1);0x0510(r1)
 6dc:	12 05       	mova	@r5+,	r2	
 6de:	02 00       	mova	@r0,	r2	
 6e0:	71 04 12 05 	mova	r4,	1298(r1);0x0512(r1)
 6e4:	14 05       	mova	@r5+,	r4	
 6e6:	02 00       	mova	@r0,	r2	
 6e8:	71 06 14 05 	mova	r6,	1300(r1);0x0514(r1)
 6ec:	16 05       	mova	@r5+,	r6	
 6ee:	02 00       	mova	@r0,	r2	
 6f0:	71 08 16 05 	mova	r8,	1302(r1);0x0516(r1)
 6f4:	de 05       	cmpa	r5,	r14	
 6f6:	02 00       	mova	@r0,	r2	
 6f8:	71 0a 00 00 	mova	r10,	0(r1)	;0x0000(r1)
 6fc:	00 00       	bra	@r0		
 6fe:	0e 05       	mova	@r5,	r14	
 700:	1f 05       	mova	@r5+,	r15	
 702:	01 00       	mova	@r0,	r1	
 704:	5f 1f 05 9c 	.rpt	#15
				cmpx	r12,	r5	
 708:	05 01       	mova	@r1,	r5	
 70a:	00 5b       	add	r11,	r0	
 70c:	d6 05       	cmpa	r5,	r6	
 70e:	de 05       	cmpa	r5,	r14	
 710:	01 00       	mova	@r0,	r1	
 712:	5b 00       	rrcm	#1,	r11	
 714:	00 00       	bra	@r0		
 716:	00 0e       	bra	@r14		
 718:	05 1f       	.word	0x1f05;	????	
 71a:	05 01       	mova	@r1,	r5	
 71c:	00 5e       	add	r14,	r0	
 71e:	1f 05       	mova	@r5+,	r15	
 720:	bc 05 01 00 	suba	#0x50001,r12	
 724:	5a d6 05 de 	bis.b	-8699(r6),r10	;0xde05(r6)
 728:	05 01       	mova	@r1,	r5	
 72a:	00 5a       	add	r10,	r0	
 72c:	00 00       	bra	@r0		
 72e:	00 00       	bra	@r0		
 730:	0e 05       	mova	@r5,	r14	
 732:	1f 05       	mova	@r5+,	r15	
 734:	01 00       	mova	@r0,	r1	
 736:	5d 1f 05 88 	.rpt	#13
				subx	r8,	r5	
 73a:	05 01       	mova	@r1,	r5	
 73c:	00 59       	add	r9,	r0	
 73e:	88 05 b6 05 	mova	#0x505b6,r8	
 742:	03 00       	.word	0x0003;	????	Illegal as address instr
 744:	79 01 9f d6 	mova	r1,	-10593(r9);0xd69f(r9)
 748:	05 d8       	bis	r8,	r5	
 74a:	05 01       	mova	@r1,	r5	
 74c:	00 59       	add	r9,	r0	
 74e:	da 05       	cmpa	r5,	r10	
 750:	dc 05       	cmpa	r5,	r12	
 752:	03 00       	.word	0x0003;	????	Illegal as address instr
 754:	79 01 9f 00 	mova	r1,	159(r9)	;0x009f(r9)
 758:	00 00       	bra	@r0		
 75a:	00 1c 05 9a 	cmpx	r10,	r5	
 75e:	05 02       	mova	#4,	r5	;r2 As==10
 760:	00 30       	jn	$+2      	;abs 0x762
 762:	9f 9a 05 9e 	cmp	-25083(r10),517(r15);0x9e05(r10), 0x0205(r15)
 766:	05 02 
 768:	00 31       	jn	$+514    	;abs 0x96a
 76a:	9f d6 05 de 	bis	-8699(r6),517(r15);0xde05(r6), 0x0205(r15)
 76e:	05 02 
 770:	00 30       	jn	$+2      	;abs 0x772
 772:	9f 00 00 00 	cmpa	#0x00000,r15	
 776:	00 1c       	.word	0x1c00;	????	
 778:	05 2e       	jc	$-1012   	;abs 0x384
 77a:	05 02       	mova	#4,	r5	;r2 As==10
 77c:	00 30       	jn	$+2      	;abs 0x77e
 77e:	9f 2e       	jc	$-704    	;abs 0x4be
 780:	05 3e       	jmp	$-1012   	;abs 0x38c
 782:	05 01       	mova	@r1,	r5	
 784:	00 5f       	add	r15,	r0	
 786:	3e 05 4c 05 	mova	1356(r5),r14	;0x054c(r5)
 78a:	01 00       	mova	@r0,	r1	
 78c:	58 4e 05 6e 	mov.b	28165(r14),r8	;0x6e05(r14)
 790:	05 01       	mova	@r1,	r5	
 792:	00 58       	add	r8,	r0	
 794:	6e 05 84 05 	mova	r5,	&0xe0584
 798:	01 00       	mova	@r0,	r1	
 79a:	58 84 05 ce 	sub.b	-12795(r4),r8	;0xce05(r4)
 79e:	05 01       	mova	@r1,	r5	
 7a0:	00 58       	add	r8,	r0	
 7a2:	d6 05       	cmpa	r5,	r6	
 7a4:	de 05       	cmpa	r5,	r14	
 7a6:	01 00       	mova	@r0,	r1	
 7a8:	58 00       	rrcm	#1,	r8	
 7aa:	00 00       	bra	@r0		
	...

Disassembly of section .debug_pubnames:

00000000 <.debug_pubnames>:
  i2c_init();
  i2c_slave_address = slave_addr;
}

void i2c_change_address( char slave_addr)
{
   0:	89 01 00 00 	mova	#0x10000,r9	
  i2c_slave_address = slave_addr;
   4:	02 00       	mova	@r0,	r2	
}

void i2c_init(void)
{
   6:	00 00       	bra	@r0		
   8:	00 00       	bra	@r0		
   a:	a2 05 00 00 	adda	#0x50000,r2	
  SDA_OUT();
   e:	21 00 00 00 	mova	&0x00000,r1	
  sda_on;
  12:	69 32       	jn	$-812    	;abs 0xfce6
  scl_on;
  14:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  16:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
  delay5us();
  18:	61 6e       	addc.b	@r14,	r1	
//
// ****************************************************************
// ** P R I M I T I V A S                                        **
// ****************************************************************
//
void i2c_config( char slave_addr)
  1a:	67 65       	addc.b	@r5,	r7	
  1c:	5f 61 64 64 	addc.b	25700(r1),r15	;0x6464(r1)
{
  20:	72 65       	addc.b	@r5+,	r2	
  i2c_init();
  22:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
  24:	00 4a       	br	r10		
  i2c_slave_address = slave_addr;
  26:	00 00       	bra	@r0		
  28:	00 69       	addc	r9,	r0	
  scl_on;
  delay5us();
}

void i2c_start(void)
{
  2a:	32 63       	addc	#-1,	r2	;r3 As==11
  2c:	5f 69 6e 69 	addc.b	26990(r9),r15	;0x696e(r9)
  sda_on;
  30:	74 00 75 00 	mova	r0,	117(r4)	;0x0075(r4)
  delay5us();
  34:	00 00       	bra	@r0		
  scl_on;
  36:	69 32       	jn	$-812    	;abs 0xfd0a
  38:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  delay5us();

  3a:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
  3c:	6e 66       	addc.b	@r6,	r14	
  3e:	69 67       	addc.b	@r7,	r9	
  sda_off;
  40:	00 9a       	cmp	r10,	r0	
  42:	00 00       	bra	@r0		
  delay5us();
  44:	00 69       	addc	r9,	r0	
  46:	32 63       	addc	#-1,	r2	;r3 As==11
  48:	5f 73       	subc.b	#1,	r15	;r3 As==01
  scl_off;
  4a:	74 61       	addc.b	@r1+,	r4	
  4c:	72 74       	subc.b	@r4+,	r2	
  delay5us();
  4e:	00 be       	bit	r14,	r0	
}

void i2c_stop(void)
{
  50:	00 00       	bra	@r0		
  52:	00 69       	addc	r9,	r0	
  54:	32 63       	addc	#-1,	r2	;r3 As==11
  sda_off;
  56:	5f 73       	subc.b	#1,	r15	;r3 As==01
  58:	74 6f       	addc.b	@r15+,	r4	
  delay5us();
  5a:	70 00 e2 00 	mova	r0,	0x00e2	;PC rel. 0x0013e
  scl_on;
  5e:	00 00       	bra	@r0		
  60:	69 32       	jn	$-812    	;abs 0xfd34
  delay5us();
  62:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  64:	72 65       	addc.b	@r5+,	r2	
  sda_on;
  66:	63 76       	.word	0x7663;	????	Illegal as 2-op instr
  68:	5f 61 63 6b 	addc.b	27491(r1),r15	;0x6b63(r1)
  delay5us();
}

 char i2c_recv_ack(void)
  6c:	00 18       	.word	0x1800;	????	
{
   char i;

  6e:	01 00       	mova	@r0,	r1	
  70:	00 69       	addc	r9,	r0	
  72:	32 63       	addc	#-1,	r2	;r3 As==11
  SDA_IN();
  74:	5f 73       	subc.b	#1,	r15	;r3 As==01
  76:	65 6e       	addc.b	@r14,	r5	
  delay5us();
  78:	64 5f       	add.b	@r15,	r4	
  7a:	61 63       	addc.b	#2,	r1	;r3 As==10
  scl_on;
  7c:	6b 00 4b 01 	mova	r0,	&0xb014b
  delay5us();
  80:	00 00       	bra	@r0		
  82:	69 32       	jn	$-812    	;abs 0xfd56
  if(sda_test) i=1; else i=0;
  84:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  86:	62 77       	subc.b	@r7,	r2	
  delay5us();
  88:	72 69       	addc.b	@r9+,	r2	
  8a:	74 65       	addc.b	@r5+,	r4	
  8c:	00 9f       	cmp	r15,	r0	
  scl_off;
  8e:	01 00       	mova	@r0,	r1	
  90:	00 69       	addc	r9,	r0	
  delay5us();
  92:	32 63       	addc	#-1,	r2	;r3 As==11
  94:	5f 62 72 65 	addc.b	&0x6572,r15	
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  98:	61 64       	addc.b	@r4,	r1	
  9a:	00 ea       	xor	r10,	r0	
  9c:	01 00       	mova	@r0,	r1	
  9e:	00 69       	addc	r9,	r0	
  a0:	32 63       	addc	#-1,	r2	;r3 As==11
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a2:	5f 66 69 6e 	addc.b	28265(r6),r15	;0x6e69(r6)
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  a6:	64 5f       	add.b	@r15,	r4	
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a8:	64 65       	addc.b	@r5,	r4	
  aa:	76 69       	addc.b	@r9+,	r6	
}

void i2c_send_ack( char confirmation)
{
  ac:	63 65       	.word	0x6563;	????	Illegal as 2-op instr
  ae:	00 13       	reti			
  b0:	02 00       	mova	@r0,	r2	
  SDA_OUT();
  b2:	00 69       	addc	r9,	r0	
  b4:	32 63       	addc	#-1,	r2	;r3 As==11
  b6:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
  ba:	74 65       	addc.b	@r5+,	r4	
  if(confirmation) sda_on; else sda_off;
  bc:	5f 64 75 6d 	addc.b	28021(r4),r15	;0x6d75(r4)
  scl_on;
  c0:	6d 79       	subc.b	@r9,	r13	
  c2:	00 49       	br	r9		
  delay5us();
  c4:	02 00       	mova	@r0,	r2	
  c6:	00 69       	addc	r9,	r0	
  c8:	32 63       	addc	#-1,	r2	;r3 As==11
  scl_off;
  ca:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
  delay5us();
  ce:	74 65       	addc.b	@r5+,	r4	
  d0:	5f 62 79 74 	addc.b	&0x7479,r15	
  sda_off;
  d4:	65 00 90 02 	mova	r0,	&0x50290
  return i;
}

void i2c_send_ack( char confirmation)
{
  SDA_OUT();
  d8:	00 00       	bra	@r0		
  da:	69 32       	jn	$-812    	;abs 0xfdae
  scl_off;
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
  dc:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  de:	77 72       	subc.b	#8,	r7	;r2 As==11
  e0:	69 74       	subc.b	@r4,	r9	
  e2:	65 5f       	add.b	@r15,	r5	
{
   char mask = 0x80;
   char i;

  e4:	6d 75       	subc.b	@r5,	r13	
  e6:	6c 74       	subc.b	@r4,	r12	
  e8:	69 70       	subc.b	@r0,	r9	
  ea:	6c 65       	addc.b	@r5,	r12	
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
{
  ec:	73 00       	.word	0x0073;	????	Illegal as address instr
  ee:	f9 02       	suba	r2,	r9	
  f0:	00 00       	bra	@r0		
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
  f2:	69 32       	jn	$-812    	;abs 0xfdc6
  f4:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
    if(b & mask) sda_on; else sda_off;
  f6:	77 72       	subc.b	#8,	r7	;r2 As==11
  f8:	69 74       	subc.b	@r4,	r9	
    delay5us();
  fa:	65 31       	jn	$+716    	;abs 0x3c6
  fc:	36 5f       	add	@r15+,	r6	
    scl_on;
  fe:	62 79       	subc.b	@r9,	r2	
 100:	74 65       	addc.b	@r5+,	r4	
    delay5us();
 102:	00 40       	br	r0		
 104:	03 00       	.word	0x0003;	????	Illegal as address instr
 106:	00 69       	addc	r9,	r0	
    scl_off;
 108:	32 63       	addc	#-1,	r2	;r3 As==11
 10a:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
void i2c_bwrite( char b)
{
   char mask = 0x80;
   char i;

  SDA_OUT();
 10e:	74 65       	addc.b	@r5+,	r4	
    if(b & mask) sda_on; else sda_off;
    delay5us();
    scl_on;
    delay5us();
    scl_off;
    delay5us();
 110:	31 36       	jge	$-924    	;abs 0xfd74
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
 112:	5f 6d 75 6c 	addc.b	27765(r13),r15	;0x6c75(r13)
 116:	74 69       	addc.b	@r9+,	r4	
 118:	70 6c       	addc.b	@r12+,	r0	
 11a:	65 73       	subc.b	#2,	r5	;r3 As==10
 11c:	00 a3       	dadc	r0		
 11e:	03 00       	.word	0x0003;	????	Illegal as address instr
    scl_on;
    delay5us();
    scl_off;
    delay5us();
    mask >>= 1;
  }
 120:	00 69       	addc	r9,	r0	
 122:	32 63       	addc	#-1,	r2	;r3 As==11
 124:	5f 72 65 61 	subc.b	&0x6165,r15	
}

 char i2c_bread(void)
 128:	64 5f       	add.b	@r15,	r4	
 12a:	62 79       	subc.b	@r9,	r2	
{
   char i;
   char bin = 0;

 12c:	74 65       	addc.b	@r5+,	r4	
 12e:	00 ea       	xor	r10,	r0	
 130:	03 00       	.word	0x0003;	????	Illegal as address instr
 132:	00 69       	addc	r9,	r0	
  }
}

 char i2c_bread(void)
{
   char i;
 134:	32 63       	addc	#-1,	r2	;r3 As==11
   char bin = 0;

  SDA_IN();
  for (i=0; i<8; i++)
  {
 136:	5f 72 65 61 	subc.b	&0x6165,r15	
    bin <<= 1;
 13a:	64 5f       	add.b	@r15,	r4	
 13c:	6d 75       	subc.b	@r5,	r13	
    scl_on;
 13e:	6c 74       	subc.b	@r4,	r12	
 140:	69 70       	subc.b	@r0,	r9	
    delay5us();
 142:	6c 65       	addc.b	@r5,	r12	
 144:	73 00       	.word	0x0073;	????	Illegal as address instr
 146:	53 04       	rrcm	#2,	#0	;r3 As==00
 148:	00 00       	bra	@r0		
 14a:	69 32       	jn	$-812    	;abs 0xfe1e
    if (sda_test) bin += 1;
 14c:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
 14e:	72 65       	addc.b	@r5+,	r2	
    delay5us();
 150:	61 64       	addc.b	@r4,	r1	
 152:	31 36       	jge	$-924    	;abs 0xfdb6
 154:	5f 62 79 74 	addc.b	&0x7479,r15	
    scl_off;
 158:	65 00 9e 04 	mova	r0,	&0x5049e
 char i2c_bread(void)
{
   char i;
   char bin = 0;

  SDA_IN();
 15c:	00 00       	bra	@r0		
    delay5us();
    scl_off;
    delay5us();
  }

  return bin;
 15e:	69 32       	jn	$-812    	;abs 0xfe32
 160:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
 162:	72 65       	addc.b	@r5+,	r2	
 164:	61 64       	addc.b	@r4,	r1	
//
// ****************************************************************
// ** F U N Ç Õ E S  D E R I V A D A S                           **
// ****************************************************************
//
 char i2c_find_device(void)
 166:	31 36       	jge	$-924    	;abs 0xfdca
{
   char status = 0;

 168:	5f 6d 75 6c 	addc.b	27765(r13),r15	;0x6c75(r13)
  i2c_start();
 16c:	74 69       	addc.b	@r9+,	r4	
 16e:	70 6c       	addc.b	@r12+,	r0	
 170:	65 73       	subc.b	#2,	r5	;r3 As==10
 172:	00 91       	cmp	r1,	r0	
  i2c_bwrite(i2c_slave_address);
 174:	05 00       	mova	@r0,	r5	
 176:	00 69       	addc	r9,	r0	
  status = i2c_recv_ack();
 178:	32 63       	addc	#-1,	r2	;r3 As==11
 17a:	5f 73       	subc.b	#1,	r15	;r3 As==01
 17c:	6c 61       	addc.b	@r1,	r12	
 17e:	76 65       	addc.b	@r5+,	r6	
  i2c_stop();

  return status;
 180:	5f 61 64 64 	addc.b	25700(r1),r15	;0x6464(r1)
 184:	72 65       	addc.b	@r5+,	r2	
}

 char i2c_write_dummy( char b)
 186:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
{
   char status = 0;

 188:	00 00       	bra	@r0		
 18a:	00 00       	bra	@r0		
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  i2c_init();
  i2c_slave_address = slave_addr;
}

void i2c_change_address( char slave_addr)
{
   0:	10 00       	bra	#0x00000	
   2:	00 00       	bra	@r0		
  i2c_slave_address = slave_addr;
   4:	02 00       	mova	@r0,	r2	
}

void i2c_init(void)
{
   6:	00 00       	bra	@r0		
   8:	00 00       	bra	@r0		
   a:	02 00       	mova	@r0,	r2	
  SDA_OUT();
   c:	00 00       	bra	@r0		
   e:	de 05       	cmpa	r5,	r14	
  sda_on;
  10:	00 00       	bra	@r0		
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
  i2c_init();
  i2c_slave_address = slave_addr;
}

void i2c_change_address( char slave_addr)
{
   0:	f2 00       	suba	r0,	r2	
   2:	0e 01       	mova	@r1,	r14	
  i2c_slave_address = slave_addr;
   4:	10 01       	reta			
}

void i2c_init(void)
{
   6:	20 01 00 00 	bra	&0x10000	
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
  i2c_init();
  i2c_slave_address = slave_addr;
}

void i2c_change_address( char slave_addr)
{
   0:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
   2:	6e 66       	addc.b	@r6,	r14	
  i2c_slave_address = slave_addr;
   4:	69 72       	subc.b	#4,	r9	;r2 As==10
}

void i2c_init(void)
{
   6:	6d 61       	addc.b	@r1,	r13	
   8:	74 69       	addc.b	@r9+,	r4	
   a:	6f 6e       	addc.b	@r14,	r15	
  SDA_OUT();
   c:	00 69       	addc	r9,	r0	
   e:	32 63       	addc	#-1,	r2	;r3 As==11
  sda_on;
  10:	5f 66 69 6e 	addc.b	28265(r6),r15	;0x6e69(r6)
  scl_on;
  14:	64 5f       	add.b	@r15,	r4	
  16:	64 65       	addc.b	@r5,	r4	
  delay5us();
  18:	76 69       	addc.b	@r9+,	r6	
//
// ****************************************************************
// ** P R I M I T I V A S                                        **
// ****************************************************************
//
void i2c_config( char slave_addr)
  1a:	63 65       	.word	0x6563;	????	Illegal as 2-op instr
  1c:	00 2a       	jnc	$-1022   	;abs 0xfc1e
{
  1e:	5f 5f 50 35 	add.b	13648(r15),r15	;0x3550(r15)
  i2c_init();
  22:	4f 55       	add.b	r5,	r15	
  24:	54 00       	rrcm	#1,	r4	
  i2c_slave_address = slave_addr;
  26:	47 4e       	mov.b	r14,	r7	
  28:	55 20       	jnz	$+172    	;abs 0xd4
  scl_on;
  delay5us();
}

void i2c_start(void)
{
  2a:	43 20       	jnz	$+136    	;abs 0xb2
  2c:	34 2e       	jc	$-918    	;abs 0xfc96
  sda_on;
  2e:	35 2e       	jc	$-916    	;abs 0xfc9a
  30:	33 00       	.word	0x0033;	????	Illegal as address instr
  delay5us();
  32:	69 32       	jn	$-812    	;abs 0xfd06
  34:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  scl_on;
  36:	62 72       	subc.b	#4,	r2	;r2 As==10
  38:	65 61       	addc.b	@r1,	r5	
  delay5us();

  3a:	64 00 75 6e 	mova	r0,	&0x46e75
  3e:	73 69       	.word	0x6973;	????	Illegal as 2-op instr
  sda_off;
  40:	67 6e       	addc.b	@r14,	r7	
  42:	65 64       	addc.b	@r4,	r5	
  delay5us();
  44:	20 63       	addc	#2,	r0	;r3 As==10
  46:	68 61       	addc.b	@r1,	r8	
  48:	72 00 50 35 	mova	r0,	&0x3550	
  scl_off;
  4c:	4f 55       	add.b	r5,	r15	
  delay5us();
  4e:	54 00       	rrcm	#1,	r4	
}

void i2c_stop(void)
{
  50:	69 32       	jn	$-812    	;abs 0xfd24
  52:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  54:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
  sda_off;
  56:	6f 70       	subc.b	@r0,	r15	
  58:	00 69       	addc	r9,	r0	
  delay5us();
  5a:	32 63       	addc	#-1,	r2	;r3 As==11
  5c:	5f 63       	addc.b	#1,	r15	;r3 As==01
  scl_on;
  5e:	6f 6e       	addc.b	@r14,	r15	
  60:	66 69       	addc.b	@r9,	r6	
  delay5us();
  62:	67 00 73 74 	mova	r0,	&0x77473
  sda_on;
  66:	61 74       	subc.b	@r4,	r1	
  68:	75 73       	subc.b	#-1,	r5	;r3 As==11
  delay5us();
  6a:	00 2a       	jnc	$-1022   	;abs 0xfc6c
}

 char i2c_recv_ack(void)
  6c:	5f 5f 50 35 	add.b	13648(r15),r15	;0x3550(r15)
{
   char i;

  70:	49 4e       	mov.b	r14,	r9	
  72:	00 73       	sbc	r0		
  SDA_IN();
  74:	6c 61       	addc.b	@r1,	r12	
  76:	76 65       	addc.b	@r5+,	r6	
  delay5us();
  78:	5f 61 64 64 	addc.b	25700(r1),r15	;0x6464(r1)
  scl_on;
  7c:	72 00 69 32 	mova	r0,	&0x3269	
  delay5us();
  80:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  82:	72 65       	addc.b	@r5+,	r2	
  if(sda_test) i=1; else i=0;
  84:	61 64       	addc.b	@r4,	r1	
  86:	5f 62 79 74 	addc.b	&0x7479,r15	
  delay5us();
  8a:	65 00 50 35 	mova	r0,	&0x53550
  scl_off;
  8e:	44 49       	mov.b	r9,	r4	
  90:	52 00       	rrcm	#1,	r2	
  delay5us();
  92:	69 32       	jn	$-812    	;abs 0xfd66
  94:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  96:	77 72       	subc.b	#8,	r7	;r2 As==11
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  98:	69 74       	subc.b	@r4,	r9	
  9a:	65 5f       	add.b	@r15,	r5	
  9c:	6d 75       	subc.b	@r5,	r13	
  9e:	6c 74       	subc.b	@r4,	r12	
  a0:	69 70       	subc.b	@r0,	r9	
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a2:	6c 65       	addc.b	@r5,	r12	
  a4:	73 00       	.word	0x0073;	????	Illegal as address instr
   char i;

  SDA_IN();
  delay5us();
  scl_on;
  delay5us();
  a6:	69 32       	jn	$-812    	;abs 0xfd7a
  delay5us();
  scl_off;
  delay5us();
  SDA_OUT();

  return i;
  a8:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  aa:	72 65       	addc.b	@r5+,	r2	
}

void i2c_send_ack( char confirmation)
{
  ac:	61 64       	addc.b	@r4,	r1	
  ae:	5f 6d 75 6c 	addc.b	27765(r13),r15	;0x6c75(r13)
  SDA_OUT();
  b2:	74 69       	addc.b	@r9+,	r4	
  b4:	70 6c       	addc.b	@r12+,	r0	
  b6:	65 73       	subc.b	#2,	r5	;r3 As==10
  b8:	00 6d       	addc	r13,	r0	
  ba:	61 73       	subc.b	#2,	r1	;r3 As==10
  if(confirmation) sda_on; else sda_off;
  bc:	6b 00 69 32 	mova	r0,	&0xb3269
  scl_on;
  c0:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  c2:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
  delay5us();
  c4:	61 6e       	addc.b	@r14,	r1	
  c6:	67 65       	addc.b	@r5,	r7	
  c8:	5f 61 64 64 	addc.b	25700(r1),r15	;0x6464(r1)
  scl_off;
  cc:	72 65       	addc.b	@r5+,	r2	
  delay5us();
  ce:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
  d0:	00 69       	addc	r9,	r0	
  d2:	32 63       	addc	#-1,	r2	;r3 As==11
  sda_off;
  d4:	5f 72 65 61 	subc.b	&0x6165,r15	
  return i;
}

void i2c_send_ack( char confirmation)
{
  SDA_OUT();
  d8:	64 31       	jn	$+714    	;abs 0x3a2
  da:	36 5f       	add	@r15+,	r6	
  scl_off;
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
  dc:	6d 75       	subc.b	@r5,	r13	
  de:	6c 74       	subc.b	@r4,	r12	
  e0:	69 70       	subc.b	@r0,	r9	
  e2:	6c 65       	addc.b	@r5,	r12	
{
   char mask = 0x80;
   char i;

  e4:	73 00       	.word	0x0073;	????	Illegal as address instr
  e6:	69 32       	jn	$-812    	;abs 0xfdba
  e8:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  ea:	73 6c       	.word	0x6c73;	????	Illegal as 2-op instr
  delay5us();
  sda_off;
}

void i2c_bwrite( char b)
{
  ec:	61 76       	subc.b	@r6,	r1	
  ee:	65 5f       	add.b	@r15,	r5	
  f0:	61 64       	addc.b	@r4,	r1	
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
  f2:	64 72       	subc.b	#4,	r4	;r2 As==10
  f4:	65 73       	subc.b	#2,	r5	;r3 As==10
    if(b & mask) sda_on; else sda_off;
  f6:	73 00       	.word	0x0073;	????	Illegal as address instr
  f8:	63 68       	.word	0x6863;	????	Illegal as 2-op instr
    delay5us();
  fa:	61 72       	subc.b	#4,	r1	;r2 As==10
  fc:	00 69       	addc	r9,	r0	
    scl_on;
  fe:	32 63       	addc	#-1,	r2	;r3 As==11
 100:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
    delay5us();
 104:	74 65       	addc.b	@r5+,	r4	
 106:	31 36       	jge	$-924    	;abs 0xfd6a
    scl_off;
 108:	5f 6d 75 6c 	addc.b	27765(r13),r15	;0x6c75(r13)
 10c:	74 69       	addc.b	@r9+,	r4	
void i2c_bwrite( char b)
{
   char mask = 0x80;
   char i;

  SDA_OUT();
 10e:	70 6c       	addc.b	@r12+,	r0	
    if(b & mask) sda_on; else sda_off;
    delay5us();
    scl_on;
    delay5us();
    scl_off;
    delay5us();
 110:	65 73       	subc.b	#2,	r5	;r3 As==10
   char mask = 0x80;
   char i;

  SDA_OUT();
  for (i=0; i<8; i++)
  {
 112:	00 43       	clr	r0		
 114:	3a 5c       	add	@r12+,	r10	
 116:	55 73       	subc.b	#1,	r5	;r3 As==01
 118:	65 72       	subc.b	#4,	r5	;r2 As==10
 11a:	73 5c       	.word	0x5c73;	????	Illegal as 2-op instr
 11c:	66 6c       	addc.b	@r12,	r6	
 11e:	61 76       	subc.b	@r6,	r1	
    scl_on;
    delay5us();
    scl_off;
    delay5us();
    mask >>= 1;
  }
 120:	69 6f       	addc.b	@r15,	r9	
 122:	68 70       	subc.b	@r0,	r8	
 124:	6f 5c       	add.b	@r12,	r15	
 126:	44 65       	addc.b	r5,	r4	
}

 char i2c_bread(void)
 128:	73 6b       	.word	0x6b73;	????	Illegal as 2-op instr
 12a:	74 6f       	addc.b	@r15+,	r4	
{
   char i;
   char bin = 0;

 12c:	70 5c       	add.b	@r12+,	r0	
 12e:	6d 69       	addc.b	@r9,	r13	
 130:	6e 69       	addc.b	@r9,	r14	
 132:	71 75       	subc.b	@r5+,	r1	
  }
}

 char i2c_bread(void)
{
   char i;
 134:	61 64       	addc.b	@r4,	r1	
   char bin = 0;

  SDA_IN();
  for (i=0; i<8; i++)
  {
 136:	5c 6d 69 6e 	addc.b	28265(r13),r12	;0x6e69(r13)
    bin <<= 1;
 13a:	69 71       	subc.b	@r1,	r9	
 13c:	75 61       	addc.b	@r1+,	r5	
    scl_on;
 13e:	64 5c       	add.b	@r12,	r4	
 140:	56 69 62 72 	addc.b	29282(r9),r6	;0x7262(r9)
    delay5us();
 144:	61 74       	subc.b	@r4,	r1	
 146:	69 6f       	addc.b	@r15,	r9	
 148:	6e 54       	add.b	@r4,	r14	
 14a:	65 73       	subc.b	#2,	r5	;r3 As==10
    if (sda_test) bin += 1;
 14c:	74 65       	addc.b	@r5+,	r4	
 14e:	72 00 69 32 	mova	r0,	&0x3269	
    delay5us();
 152:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
 154:	62 77       	subc.b	@r7,	r2	
    scl_off;
 156:	72 69       	addc.b	@r9+,	r2	
 158:	74 65       	addc.b	@r5+,	r4	
 15a:	00 69       	addc	r9,	r0	
 char i2c_bread(void)
{
   char i;
   char bin = 0;

  SDA_IN();
 15c:	32 63       	addc	#-1,	r2	;r3 As==11
    delay5us();
    scl_off;
    delay5us();
  }

  return bin;
 15e:	5f 73       	subc.b	#1,	r15	;r3 As==01
 160:	65 6e       	addc.b	@r14,	r5	
 162:	64 5f       	add.b	@r15,	r4	
 164:	61 63       	addc.b	#2,	r1	;r3 As==10
//
// ****************************************************************
// ** F U N Ç Õ E S  D E R I V A D A S                           **
// ****************************************************************
//
 char i2c_find_device(void)
 166:	6b 00 64 65 	mova	r0,	&0xb6564
{
   char status = 0;

 16a:	6c 61       	addc.b	@r1,	r12	
  i2c_start();
 16c:	79 35       	jge	$+756    	;abs 0x460
 16e:	75 73       	subc.b	#-1,	r5	;r3 As==11
 170:	00 69       	addc	r9,	r0	
 172:	32 63       	addc	#-1,	r2	;r3 As==11
  i2c_bwrite(i2c_slave_address);
 174:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
  status = i2c_recv_ack();
 178:	74 65       	addc.b	@r5+,	r4	
 17a:	5f 62 79 74 	addc.b	&0x7479,r15	
 17e:	65 00 2a 5f 	mova	r0,	&0x55f2a
  i2c_stop();

  return status;
 182:	5f 50 35 44 	add.b	0x4435,	r15	;PC rel. 0x045bb
}

 char i2c_write_dummy( char b)
 186:	49 52       	add.b	r2,	r9	
{
   char status = 0;

 188:	00 69       	addc	r9,	r0	
 18a:	32 63       	addc	#-1,	r2	;r3 As==11
 18c:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
  i2c_start();
 190:	74 65       	addc.b	@r5+,	r4	
 192:	5f 64 75 6d 	addc.b	28021(r4),r15	;0x6d75(r4)
  i2c_bwrite(b);
 196:	6d 79       	subc.b	@r9,	r13	
 198:	00 69       	addc	r9,	r0	
  status = i2c_recv_ack();
 19a:	32 63       	addc	#-1,	r2	;r3 As==11
 19c:	2e 63       	addc	#2,	r14	;r3 As==10
 19e:	00 69       	addc	r9,	r0	
 1a0:	32 63       	addc	#-1,	r2	;r3 As==11
  i2c_stop();

  return status;
 1a2:	5f 77 72 69 	subc.b	26994(r7),r15	;0x6972(r7)
 1a6:	74 65       	addc.b	@r5+,	r4	
}

 char i2c_write_byte( char reg,  char dat)
 1a8:	31 36       	jge	$-924    	;abs 0xfe0c
 1aa:	5f 62 79 74 	addc.b	&0x7479,r15	
 1ae:	65 00 69 32 	mova	r0,	&0x53269
{
   char status = 0;

 1b2:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
 1b4:	69 6e       	addc.b	@r14,	r9	
  i2c_start();
 1b6:	69 74       	subc.b	@r4,	r9	
 1b8:	00 69       	addc	r9,	r0	
 1ba:	32 63       	addc	#-1,	r2	;r3 As==11
 1bc:	5f 72 65 63 	subc.b	&0x6365,r15	
  i2c_bwrite(i2c_slave_address);
 1c0:	76 5f       	add.b	@r15+,	r6	
 1c2:	61 63       	addc.b	#2,	r1	;r3 As==10
  status += i2c_recv_ack();
 1c4:	6b 00 69 32 	mova	r0,	&0xb3269
 1c8:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
  i2c_bwrite(reg);
 1ca:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
 1cc:	61 72       	subc.b	#4,	r1	;r2 As==10
 1ce:	74 00 69 32 	mova	r0,	12905(r4);0x3269(r4)
  status += i2c_recv_ack();
 1d2:	63 5f       	.word	0x5f63;	????	Illegal as 2-op instr
 1d4:	72 65       	addc.b	@r5+,	r2	
  i2c_bwrite(dat);
 1d6:	61 64       	addc.b	@r4,	r1	
 1d8:	31 36       	jge	$-924    	;abs 0xfe3c
 1da:	5f 62 79 74 	addc.b	&0x7479,r15	
  status += i2c_recv_ack();
 1de:	65 00 50 35 	mova	r0,	&0x53550
   char status = 0;

  i2c_start();
  i2c_bwrite(i2c_slave_address);
  status += i2c_recv_ack();
  i2c_bwrite(reg);
 1e2:	49 4e       	mov.b	r14,	r9	
	...
